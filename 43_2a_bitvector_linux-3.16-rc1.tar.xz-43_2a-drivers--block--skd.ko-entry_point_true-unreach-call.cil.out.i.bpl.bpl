var $M.1: [ref]i8;

var $M.2: i32;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]ref;

var $M.7: [ref]i24;

var $M.8: [ref]i8;

var $M.9: [ref]i32;

var $M.10: [ref]i64;

var $M.11: i32;

var $M.12: i32;

var $M.13: ref;

var $M.14: i32;

var $M.15: ref;

var $M.16: i32;

var $M.17: ref;

var $M.18: i32;

var $M.19: ref;

var $M.20: ref;

var $M.22: i32;

var $M.23: [ref]ref;

var $M.24: [ref]ref;

var $M.26: i32;

var $M.27: i32;

var $M.28: [ref]i8;

var $M.29: [ref]i8;

var $M.30: [ref]i8;

var $M.31: [ref]i8;

var $M.32: [ref]i8;

var $M.33: [ref]i8;

var $M.34: [ref]i32;

var $M.35: [ref]i16;

var $M.36: [ref]i32;

var $M.37: i32;

var $M.38: i32;

var $M.39: i32;

var $M.40: i32;

var $M.41: i32;

var $M.43: ref;

var $M.44: ref;

var $M.45: [ref]i8;

var $M.46: [ref]i8;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.52: i32;

var $M.53: i32;

var $M.54: i32;

var $M.55: i32;

var $M.56: i32;

var $M.64: [ref]i8;

var $M.65: [ref]i8;

var $M.66: [ref]i8;

var $M.67: [ref]i8;

var $M.68: [ref]i8;

var $M.69: [ref]i8;

var $M.70: [ref]i8;

var $M.71: [ref]i8;

var $M.72: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 808888);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const ldv_timer_state_2: ref;

axiom ldv_timer_state_2 == $sub.ref(0, 2056);

const ldv_timer_1_0: ref;

axiom ldv_timer_1_0 == $sub.ref(0, 3084);

const ldv_timer_1_1: ref;

axiom ldv_timer_1_1 == $sub.ref(0, 4112);

const ldv_timer_1_2: ref;

axiom ldv_timer_1_2 == $sub.ref(0, 5140);

const ldv_timer_1_3: ref;

axiom ldv_timer_1_3 == $sub.ref(0, 6168);

const ldv_timer_list_2: ref;

axiom ldv_timer_list_2 == $sub.ref(0, 7200);

const ldv_timer_list_1_0: ref;

axiom ldv_timer_list_1_0 == $sub.ref(0, 8232);

const ldv_timer_list_1_1: ref;

axiom ldv_timer_list_1_1 == $sub.ref(0, 9264);

const ldv_timer_list_1_2: ref;

axiom ldv_timer_list_1_2 == $sub.ref(0, 10296);

const ldv_timer_list_1_3: ref;

axiom ldv_timer_list_1_3 == $sub.ref(0, 11328);

const skd_driver_group0: ref;

axiom skd_driver_group0 == $sub.ref(0, 12360);

const skd_blockdev_ops_group0: ref;

axiom skd_blockdev_ops_group0 == $sub.ref(0, 13392);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 14420);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 15448);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 16476);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 17504);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 18532);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 19560);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 20588);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 21616);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 22644);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 23672);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 24700);

const __mod_pci__skd_pci_tbl_device_table: ref;

axiom __mod_pci__skd_pci_tbl_device_table == $sub.ref(0, 25756);

const {:count 13} msix_entries: ref;

axiom msix_entries == $sub.ref(0, 26988);

const skd_blockdev_ops: ref;

axiom skd_blockdev_ops == $sub.ref(0, 28116);

const {:count 9} skd_chkstat_table: ref;

axiom skd_chkstat_table == $sub.ref(0, 29248);

const skd_next_devno: ref;

axiom skd_next_devno == $sub.ref(0, 30276);

const skd_max_pass_thru: ref;

axiom skd_max_pass_thru == $sub.ref(0, 31304);

const skd_isr_comp_limit: ref;

axiom skd_isr_comp_limit == $sub.ref(0, 32332);

const skd_dbg_level: ref;

axiom skd_dbg_level == $sub.ref(0, 33360);

const skd_sgs_per_request: ref;

axiom skd_sgs_per_request == $sub.ref(0, 34388);

const skd_max_req_per_msg: ref;

axiom skd_max_req_per_msg == $sub.ref(0, 35416);

const skd_isr_type: ref;

axiom skd_isr_type == $sub.ref(0, 36444);

const skd_major: ref;

axiom skd_major == $sub.ref(0, 37472);

const {:count 2} skd_pci_tbl: ref;

axiom skd_pci_tbl == $sub.ref(0, 38560);

const skd_driver: ref;

axiom skd_driver == $sub.ref(0, 39896);

const skd_max_queue_depth: ref;

axiom skd_max_queue_depth == $sub.ref(0, 40924);

const {:count 4} .str.27: ref;

axiom .str.27 == $sub.ref(0, 41952);

const {:count 26} .str.352: ref;

axiom .str.352 == $sub.ref(0, 43002);

const {:count 29} .str.353: ref;

axiom .str.353 == $sub.ref(0, 44055);

const {:count 19} .str.354: ref;

axiom .str.354 == $sub.ref(0, 45098);

const {:count 43} .str.341: ref;

axiom .str.341 == $sub.ref(0, 46165);

const {:count 35} .str.342: ref;

axiom .str.342 == $sub.ref(0, 47224);

const {:count 32} .str.343: ref;

axiom .str.343 == $sub.ref(0, 48280);

const {:count 34} .str.344: ref;

axiom .str.344 == $sub.ref(0, 49338);

const {:count 35} .str.345: ref;

axiom .str.345 == $sub.ref(0, 50397);

const {:count 43} .str.346: ref;

axiom .str.346 == $sub.ref(0, 51464);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 15} .str.32: ref;

axiom .str.32 == $sub.ref(0, 52503);

const {:count 215} .str.29: ref;

axiom .str.29 == $sub.ref(0, 53742);

const {:count 25} .str.33: ref;

axiom .str.33 == $sub.ref(0, 54791);

const {:count 16} .str.76: ref;

axiom .str.76 == $sub.ref(0, 55831);

const {:count 23} .str.40: ref;

axiom .str.40 == $sub.ref(0, 56878);

const {:count 21} .str.41: ref;

axiom .str.41 == $sub.ref(0, 57923);

const {:count 37} .str.43: ref;

axiom .str.43 == $sub.ref(0, 58984);

const {:count 36} .str.77: ref;

axiom .str.77 == $sub.ref(0, 60044);

const {:count 25} .str.78: ref;

axiom .str.78 == $sub.ref(0, 61093);

const {:count 24} .str.79: ref;

axiom .str.79 == $sub.ref(0, 62141);

const {:count 62} .str.80: ref;

axiom .str.80 == $sub.ref(0, 63227);

const {:count 55} .str.81: ref;

axiom .str.81 == $sub.ref(0, 64306);

const {:count 62} .str.82: ref;

axiom .str.82 == $sub.ref(0, 65392);

const {:count 16} .str.83: ref;

axiom .str.83 == $sub.ref(0, 66432);

const {:count 30} .str.84: ref;

axiom .str.84 == $sub.ref(0, 67486);

const {:count 11} .str.101: ref;

axiom .str.101 == $sub.ref(0, 68521);

const {:count 11} .str.102: ref;

axiom .str.102 == $sub.ref(0, 69556);

const {:count 37} .str.149: ref;

axiom .str.149 == $sub.ref(0, 70617);

const {:count 26} .str.150: ref;

axiom .str.150 == $sub.ref(0, 71667);

const {:count 49} .str.152: ref;

axiom .str.152 == $sub.ref(0, 72740);

const {:count 38} .str.153: ref;

axiom .str.153 == $sub.ref(0, 73802);

const {:count 15} .str.355: ref;

axiom .str.355 == $sub.ref(0, 74841);

const {:count 44} .str.155: ref;

axiom .str.155 == $sub.ref(0, 75909);

const {:count 36} .str.156: ref;

axiom .str.156 == $sub.ref(0, 76969);

const {:count 14} .str.157: ref;

axiom .str.157 == $sub.ref(0, 78007);

const {:count 26} .str.347: ref;

axiom .str.347 == $sub.ref(0, 79057);

const {:count 17} .str.322: ref;

axiom .str.322 == $sub.ref(0, 80098);

const {:count 30} .str.323: ref;

axiom .str.323 == $sub.ref(0, 81152);

const {:count 25} .str.324: ref;

axiom .str.324 == $sub.ref(0, 82201);

const {:count 37} .str.325: ref;

axiom .str.325 == $sub.ref(0, 83262);

const {:count 29} .str.326: ref;

axiom .str.326 == $sub.ref(0, 84315);

const {:count 26} .str.327: ref;

axiom .str.327 == $sub.ref(0, 85365);

const {:count 22} .str.328: ref;

axiom .str.328 == $sub.ref(0, 86411);

const {:count 32} .str.329: ref;

axiom .str.329 == $sub.ref(0, 87467);

const {:count 28} .str.211: ref;

axiom .str.211 == $sub.ref(0, 88519);

const {:count 46} .str.330: ref;

axiom .str.330 == $sub.ref(0, 89589);

const {:count 31} .str.331: ref;

axiom .str.331 == $sub.ref(0, 90644);

const {:count 34} .str.332: ref;

axiom .str.332 == $sub.ref(0, 91702);

const {:count 27} .str.333: ref;

axiom .str.333 == $sub.ref(0, 92753);

const {:count 25} .str.334: ref;

axiom .str.334 == $sub.ref(0, 93802);

const {:count 28} .str.335: ref;

axiom .str.335 == $sub.ref(0, 94854);

const {:count 26} .str.336: ref;

axiom .str.336 == $sub.ref(0, 95904);

const {:count 26} .str.89: ref;

axiom .str.89 == $sub.ref(0, 96954);

const {:count 20} .str.88: ref;

axiom .str.88 == $sub.ref(0, 97998);

const {:count 15} .str.74: ref;

axiom .str.74 == $sub.ref(0, 99037);

const {:count 23} .str.75: ref;

axiom .str.75 == $sub.ref(0, 100084);

const {:count 22} .str.337: ref;

axiom .str.337 == $sub.ref(0, 101130);

const {:count 30} .str.338: ref;

axiom .str.338 == $sub.ref(0, 102184);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 31} .str.320: ref;

axiom .str.320 == $sub.ref(0, 103239);

const {:count 16} .str.321: ref;

axiom .str.321 == $sub.ref(0, 104279);

const {:count 15} .str.28: ref;

axiom .str.28 == $sub.ref(0, 105318);

const {:count 46} .str.30: ref;

axiom .str.30 == $sub.ref(0, 106388);

const {:count 34} .str.31: ref;

axiom .str.31 == $sub.ref(0, 107446);

const {:count 26} .str.90: ref;

axiom .str.90 == $sub.ref(0, 108496);

const {:count 46} .str.91: ref;

axiom .str.91 == $sub.ref(0, 109566);

const {:count 33} .str.92: ref;

axiom .str.92 == $sub.ref(0, 110623);

const {:count 51} .str.93: ref;

axiom .str.93 == $sub.ref(0, 111698);

const {:count 40} .str.94: ref;

axiom .str.94 == $sub.ref(0, 112762);

const {:count 55} .str.95: ref;

axiom .str.95 == $sub.ref(0, 113841);

const {:count 40} .str.96: ref;

axiom .str.96 == $sub.ref(0, 114905);

const {:count 42} .str.97: ref;

axiom .str.97 == $sub.ref(0, 115971);

const {:count 31} .str.98: ref;

axiom .str.98 == $sub.ref(0, 117026);

const {:count 19} .str.99: ref;

axiom .str.99 == $sub.ref(0, 118069);

const {:count 28} .str.100: ref;

axiom .str.100 == $sub.ref(0, 119121);

const {:count 8} .str.42: ref;

axiom .str.42 == $sub.ref(0, 120153);

const {:count 31} .str.44: ref;

axiom .str.44 == $sub.ref(0, 121208);

const {:count 21} .str.45: ref;

axiom .str.45 == $sub.ref(0, 122253);

const {:count 19} .str.46: ref;

axiom .str.46 == $sub.ref(0, 123296);

const {:count 9} .str.47: ref;

axiom .str.47 == $sub.ref(0, 124329);

const {:count 31} .str.48: ref;

axiom .str.48 == $sub.ref(0, 125384);

const {:count 22} .str.49: ref;

axiom .str.49 == $sub.ref(0, 126430);

const {:count 26} .str.50: ref;

axiom .str.50 == $sub.ref(0, 127480);

const {:count 20} .str.71: ref;

axiom .str.71 == $sub.ref(0, 128524);

const {:count 30} .str.72: ref;

axiom .str.72 == $sub.ref(0, 129578);

const {:count 28} .str.73: ref;

axiom .str.73 == $sub.ref(0, 130630);

const {:count 14} .str.68: ref;

axiom .str.68 == $sub.ref(0, 131668);

const {:count 35} .str.69: ref;

axiom .str.69 == $sub.ref(0, 132727);

const {:count 45} .str.70: ref;

axiom .str.70 == $sub.ref(0, 133796);

const {:count 5} .str.15: ref;

axiom .str.15 == $sub.ref(0, 134825);

const {:count 5} .str.3: ref;

axiom .str.3 == $sub.ref(0, 135854);

const {:count 4} .str.13: ref;

axiom .str.13 == $sub.ref(0, 136882);

const {:count 16} .str.62: ref;

axiom .str.62 == $sub.ref(0, 137922);

const {:count 25} .str.63: ref;

axiom .str.63 == $sub.ref(0, 138971);

const {:count 5} .str.64: ref;

axiom .str.64 == $sub.ref(0, 140000);

const {:count 6} .str.65: ref;

axiom .str.65 == $sub.ref(0, 141030);

const {:count 46} .str.66: ref;

axiom .str.66 == $sub.ref(0, 142100);

const {:count 27} .str.67: ref;

axiom .str.67 == $sub.ref(0, 143151);

const {:count 41} .str.61: ref;

axiom .str.61 == $sub.ref(0, 144216);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 14} .str.51: ref;

axiom .str.51 == $sub.ref(0, 145254);

const {:count 35} .str.52: ref;

axiom .str.52 == $sub.ref(0, 146313);

const {:count 49} .str.53: ref;

axiom .str.53 == $sub.ref(0, 147386);

const {:count 40} .str.54: ref;

axiom .str.54 == $sub.ref(0, 148450);

const {:count 52} .str.55: ref;

axiom .str.55 == $sub.ref(0, 149526);

const {:count 19} .str.56: ref;

axiom .str.56 == $sub.ref(0, 150569);

const {:count 6} .str.57: ref;

axiom .str.57 == $sub.ref(0, 151599);

const {:count 10} .str.58: ref;

axiom .str.58 == $sub.ref(0, 152633);

const {:count 8} .str.59: ref;

axiom .str.59 == $sub.ref(0, 153665);

const {:count 8} .str.60: ref;

axiom .str.60 == $sub.ref(0, 154697);

const {:count 35} .str.34: ref;

axiom .str.34 == $sub.ref(0, 155756);

const {:count 45} .str.35: ref;

axiom .str.35 == $sub.ref(0, 156825);

const {:count 16} .str.36: ref;

axiom .str.36 == $sub.ref(0, 157865);

const {:count 41} .str.37: ref;

axiom .str.37 == $sub.ref(0, 158930);

const {:count 30} .str.38: ref;

axiom .str.38 == $sub.ref(0, 159984);

const {:count 36} .str.39: ref;

axiom .str.39 == $sub.ref(0, 161044);

const {:count 5} .str.14: ref;

axiom .str.14 == $sub.ref(0, 162073);

const {:count 9} .str.16: ref;

axiom .str.16 == $sub.ref(0, 163106);

const {:count 7} .str.2: ref;

axiom .str.2 == $sub.ref(0, 164137);

const {:count 8} .str.17: ref;

axiom .str.17 == $sub.ref(0, 165169);

const {:count 7} .str.18: ref;

axiom .str.18 == $sub.ref(0, 166200);

const {:count 17} .str.19: ref;

axiom .str.19 == $sub.ref(0, 167241);

const {:count 11} .str.20: ref;

axiom .str.20 == $sub.ref(0, 168276);

const {:count 9} .str.21: ref;

axiom .str.21 == $sub.ref(0, 169309);

const {:count 9} .str.22: ref;

axiom .str.22 == $sub.ref(0, 170342);

const {:count 8} .str.23: ref;

axiom .str.23 == $sub.ref(0, 171374);

const {:count 6} .str.4: ref;

axiom .str.4 == $sub.ref(0, 172404);

const {:count 12} .str.24: ref;

axiom .str.24 == $sub.ref(0, 173440);

const {:count 11} .str.11: ref;

axiom .str.11 == $sub.ref(0, 174475);

const {:count 14} .str.10: ref;

axiom .str.10 == $sub.ref(0, 175513);

const {:count 14} .str.25: ref;

axiom .str.25 == $sub.ref(0, 176551);

const {:count 10} .str.26: ref;

axiom .str.26 == $sub.ref(0, 177585);

const {:count 16} .str.85: ref;

axiom .str.85 == $sub.ref(0, 178625);

const {:count 28} .str.86: ref;

axiom .str.86 == $sub.ref(0, 179677);

const {:count 37} .str.87: ref;

axiom .str.87 == $sub.ref(0, 180738);

const .str: ref;

axiom .str == $sub.ref(0, 181770);

const {:count 5} .str.1: ref;

axiom .str.1 == $sub.ref(0, 182799);

const {:count 9} .str.5: ref;

axiom .str.5 == $sub.ref(0, 183832);

const {:count 9} .str.6: ref;

axiom .str.6 == $sub.ref(0, 184865);

const {:count 11} .str.7: ref;

axiom .str.7 == $sub.ref(0, 185900);

const {:count 8} .str.8: ref;

axiom .str.8 == $sub.ref(0, 186932);

const {:count 11} .str.9: ref;

axiom .str.9 == $sub.ref(0, 187967);

const {:count 11} .str.12: ref;

axiom .str.12 == $sub.ref(0, 189002);

const {:count 30} .str.276: ref;

axiom .str.276 == $sub.ref(0, 190056);

const {:count 54} .str.277: ref;

axiom .str.277 == $sub.ref(0, 191134);

const {:count 9} .str.278: ref;

axiom .str.278 == $sub.ref(0, 192167);

const {:count 48} .str.279: ref;

axiom .str.279 == $sub.ref(0, 193239);

const {:count 27} .str.280: ref;

axiom .str.280 == $sub.ref(0, 194290);

const {:count 55} .str.281: ref;

axiom .str.281 == $sub.ref(0, 195369);

const {:count 12} .str.282: ref;

axiom .str.282 == $sub.ref(0, 196405);

const {:count 30} .str.283: ref;

axiom .str.283 == $sub.ref(0, 197459);

const {:count 36} .str.284: ref;

axiom .str.284 == $sub.ref(0, 198519);

const {:count 42} .str.285: ref;

axiom .str.285 == $sub.ref(0, 199585);

const {:count 8} .str.318: ref;

axiom .str.318 == $sub.ref(0, 200617);

const {:count 32} .str.319: ref;

axiom .str.319 == $sub.ref(0, 201673);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 15} .str.235: ref;

axiom .str.235 == $sub.ref(0, 202712);

const {:count 56} .str.236: ref;

axiom .str.236 == $sub.ref(0, 203792);

const {:count 30} .str.237: ref;

axiom .str.237 == $sub.ref(0, 204846);

const {:count 24} .str.238: ref;

axiom .str.238 == $sub.ref(0, 205894);

const {:count 35} .str.239: ref;

axiom .str.239 == $sub.ref(0, 206953);

const {:count 31} .str.240: ref;

axiom .str.240 == $sub.ref(0, 208008);

const {:count 21} .str.241: ref;

axiom .str.241 == $sub.ref(0, 209053);

const {:count 30} .str.242: ref;

axiom .str.242 == $sub.ref(0, 210107);

const {:count 35} .str.243: ref;

axiom .str.243 == $sub.ref(0, 211166);

const {:count 31} .str.244: ref;

axiom .str.244 == $sub.ref(0, 212221);

const {:count 37} .str.245: ref;

axiom .str.245 == $sub.ref(0, 213282);

const {:count 22} .str.246: ref;

axiom .str.246 == $sub.ref(0, 214328);

const {:count 20} .str.247: ref;

axiom .str.247 == $sub.ref(0, 215372);

const {:count 27} .str.248: ref;

axiom .str.248 == $sub.ref(0, 216423);

const {:count 33} .str.249: ref;

axiom .str.249 == $sub.ref(0, 217480);

const {:count 16} .str.256: ref;

axiom .str.256 == $sub.ref(0, 218520);

const {:count 38} .str.257: ref;

axiom .str.257 == $sub.ref(0, 219582);

const {:count 34} .str.258: ref;

axiom .str.258 == $sub.ref(0, 220640);

const {:count 59} .str.259: ref;

axiom .str.259 == $sub.ref(0, 221723);

const {:count 31} .str.254: ref;

axiom .str.254 == $sub.ref(0, 222778);

const {:count 18} .str.255: ref;

axiom .str.255 == $sub.ref(0, 223820);

const {:count 46} .str.125: ref;

axiom .str.125 == $sub.ref(0, 224890);

const debug_locks: ref;

axiom debug_locks == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 23} .str.253: ref;

axiom .str.253 == $sub.ref(0, 225937);

const {:count 38} .str.250: ref;

axiom .str.250 == $sub.ref(0, 226999);

const {:count 26} .str.251: ref;

axiom .str.251 == $sub.ref(0, 228049);

const {:count 15} .str.252: ref;

axiom .str.252 == $sub.ref(0, 229088);

const {:count 14} .str.214: ref;

axiom .str.214 == $sub.ref(0, 230126);

const {:count 35} .str.215: ref;

axiom .str.215 == $sub.ref(0, 231185);

const {:count 51} .str.216: ref;

axiom .str.216 == $sub.ref(0, 232260);

const {:count 45} .str.217: ref;

axiom .str.217 == $sub.ref(0, 233329);

const {:count 48} .str.218: ref;

axiom .str.218 == $sub.ref(0, 234401);

const {:count 21} .str.311: ref;

axiom .str.311 == $sub.ref(0, 235446);

const {:count 33} .str.312: ref;

axiom .str.312 == $sub.ref(0, 236503);

const {:count 26} .str.313: ref;

axiom .str.313 == $sub.ref(0, 237553);

const {:count 28} .str.314: ref;

axiom .str.314 == $sub.ref(0, 238605);

const {:count 32} .str.315: ref;

axiom .str.315 == $sub.ref(0, 239661);

const {:count 42} .str.316: ref;

axiom .str.316 == $sub.ref(0, 240727);

const {:count 42} .str.172: ref;

axiom .str.172 == $sub.ref(0, 241793);

const {:count 26} .str.173: ref;

axiom .str.173 == $sub.ref(0, 242843);

const {:count 88} .str.174: ref;

axiom .str.174 == $sub.ref(0, 243955);

const {:count 29} .str.175: ref;

axiom .str.175 == $sub.ref(0, 245008);

const {:count 44} .str.176: ref;

axiom .str.176 == $sub.ref(0, 246076);

const {:count 67} .str.177: ref;

axiom .str.177 == $sub.ref(0, 247167);

const {:count 35} .str.178: ref;

axiom .str.178 == $sub.ref(0, 248226);

const {:count 33} .str.179: ref;

axiom .str.179 == $sub.ref(0, 249283);

const {:count 55} .str.180: ref;

axiom .str.180 == $sub.ref(0, 250362);

const {:count 12} .str.226: ref;

axiom .str.226 == $sub.ref(0, 251398);

const {:count 27} .str.227: ref;

axiom .str.227 == $sub.ref(0, 252449);

const {:count 6} .str.228: ref;

axiom .str.228 == $sub.ref(0, 253479);

const {:count 46} .str.229: ref;

axiom .str.229 == $sub.ref(0, 254549);

const {:count 17} .str.230: ref;

axiom .str.230 == $sub.ref(0, 255590);

const {:count 64} .str.231: ref;

axiom .str.231 == $sub.ref(0, 256678);

const {:count 55} .str.232: ref;

axiom .str.232 == $sub.ref(0, 257757);

const {:count 30} .str.233: ref;

axiom .str.233 == $sub.ref(0, 258811);

const {:count 36} .str.234: ref;

axiom .str.234 == $sub.ref(0, 259871);

const {:count 80} .str.225: ref;

axiom .str.225 == $sub.ref(0, 260975);

const {:count 37} .str.219: ref;

axiom .str.219 == $sub.ref(0, 262036);

const {:count 18} .str.220: ref;

axiom .str.220 == $sub.ref(0, 263078);

const {:count 35} .str.221: ref;

axiom .str.221 == $sub.ref(0, 264137);

const {:count 23} .str.222: ref;

axiom .str.222 == $sub.ref(0, 265184);

const {:count 21} .str.223: ref;

axiom .str.223 == $sub.ref(0, 266229);

const {:count 35} .str.224: ref;

axiom .str.224 == $sub.ref(0, 267288);

const {:count 19} .str.181: ref;

axiom .str.181 == $sub.ref(0, 268331);

const {:count 37} .str.182: ref;

axiom .str.182 == $sub.ref(0, 269392);

const {:count 34} .str.191: ref;

axiom .str.191 == $sub.ref(0, 270450);

const {:count 22} .str.192: ref;

axiom .str.192 == $sub.ref(0, 271496);

const {:count 31} .str.193: ref;

axiom .str.193 == $sub.ref(0, 272551);

const {:count 52} .str.194: ref;

axiom .str.194 == $sub.ref(0, 273627);

const {:count 39} .str.195: ref;

axiom .str.195 == $sub.ref(0, 274690);

const {:count 61} .str.196: ref;

axiom .str.196 == $sub.ref(0, 275775);

const {:count 48} .str.197: ref;

axiom .str.197 == $sub.ref(0, 276847);

const {:count 38} .str.198: ref;

axiom .str.198 == $sub.ref(0, 277909);

const {:count 33} .str.199: ref;

axiom .str.199 == $sub.ref(0, 278966);

const {:count 60} .str.200: ref;

axiom .str.200 == $sub.ref(0, 280050);

const {:count 47} .str.201: ref;

axiom .str.201 == $sub.ref(0, 281121);

const {:count 29} .str.202: ref;

axiom .str.202 == $sub.ref(0, 282174);

const {:count 95} .str.203: ref;

axiom .str.203 == $sub.ref(0, 283293);

const {:count 41} .str.204: ref;

axiom .str.204 == $sub.ref(0, 284358);

const {:count 40} .str.205: ref;

axiom .str.205 == $sub.ref(0, 285422);

const {:count 10} .str.206: ref;

axiom .str.206 == $sub.ref(0, 286456);

const {:count 18} .str.207: ref;

axiom .str.207 == $sub.ref(0, 287498);

const {:count 37} .str.208: ref;

axiom .str.208 == $sub.ref(0, 288559);

const {:count 27} .str.209: ref;

axiom .str.209 == $sub.ref(0, 289610);

const {:count 52} .str.210: ref;

axiom .str.210 == $sub.ref(0, 290686);

const {:count 26} .str.212: ref;

axiom .str.212 == $sub.ref(0, 291736);

const {:count 49} .str.213: ref;

axiom .str.213 == $sub.ref(0, 292809);

const {:count 21} .str.183: ref;

axiom .str.183 == $sub.ref(0, 293854);

const {:count 41} .str.184: ref;

axiom .str.184 == $sub.ref(0, 294919);

const {:count 30} .str.185: ref;

axiom .str.185 == $sub.ref(0, 295973);

const {:count 19} .str.188: ref;

axiom .str.188 == $sub.ref(0, 297016);

const {:count 52} .str.189: ref;

axiom .str.189 == $sub.ref(0, 298092);

const {:count 11} .str.190: ref;

axiom .str.190 == $sub.ref(0, 299127);

const {:count 19} .str.186: ref;

axiom .str.186 == $sub.ref(0, 300170);

const {:count 57} .str.187: ref;

axiom .str.187 == $sub.ref(0, 301251);

const {:count 34} .str.286: ref;

axiom .str.286 == $sub.ref(0, 302309);

const {:count 36} .str.287: ref;

axiom .str.287 == $sub.ref(0, 303369);

const {:count 17} .str.288: ref;

axiom .str.288 == $sub.ref(0, 304410);

const {:count 46} .str.289: ref;

axiom .str.289 == $sub.ref(0, 305480);

const {:count 13} .str.290: ref;

axiom .str.290 == $sub.ref(0, 306517);

const {:count 52} .str.291: ref;

axiom .str.291 == $sub.ref(0, 307593);

const {:count 42} .str.292: ref;

axiom .str.292 == $sub.ref(0, 308659);

const {:count 13} .str.348: ref;

axiom .str.348 == $sub.ref(0, 309696);

const {:count 15} .str.169: ref;

axiom .str.169 == $sub.ref(0, 310735);

const {:count 15} .str.168: ref;

axiom .str.168 == $sub.ref(0, 311774);

const {:count 17} .str.167: ref;

axiom .str.167 == $sub.ref(0, 312815);

const {:count 16} .str.166: ref;

axiom .str.166 == $sub.ref(0, 313855);

const {:count 16} .str.165: ref;

axiom .str.165 == $sub.ref(0, 314895);

const {:count 17} .str.164: ref;

axiom .str.164 == $sub.ref(0, 315936);

const {:count 16} .str.349: ref;

axiom .str.349 == $sub.ref(0, 316976);

const {:count 37} .str.350: ref;

axiom .str.350 == $sub.ref(0, 318037);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 34} .str.351: ref;

axiom .str.351 == $sub.ref(0, 319095);

const {:count 39} .str.147: ref;

axiom .str.147 == $sub.ref(0, 320158);

const {:count 6} .str.137: ref;

axiom .str.137 == $sub.ref(0, 321188);

const {:count 5} .str.138: ref;

axiom .str.138 == $sub.ref(0, 322217);

const {:count 42} .str.148: ref;

axiom .str.148 == $sub.ref(0, 323283);

const {:count 17} .str.151: ref;

axiom .str.151 == $sub.ref(0, 324324);

const {:count 14} .str.154: ref;

axiom .str.154 == $sub.ref(0, 325362);

const {:count 47} .str.158: ref;

axiom .str.158 == $sub.ref(0, 326433);

const {:count 16} .str.339: ref;

axiom .str.339 == $sub.ref(0, 327473);

const {:count 19} .str.340: ref;

axiom .str.340 == $sub.ref(0, 328516);

const {:count 7} .str.271: ref;

axiom .str.271 == $sub.ref(0, 329547);

const {:count 9} .str.272: ref;

axiom .str.272 == $sub.ref(0, 330580);

const {:count 9} .str.273: ref;

axiom .str.273 == $sub.ref(0, 331613);

const {:count 11} .str.274: ref;

axiom .str.274 == $sub.ref(0, 332648);

const {:count 5} .str.275: ref;

axiom .str.275 == $sub.ref(0, 333677);

const {:count 34} .str.159: ref;

axiom .str.159 == $sub.ref(0, 334735);

const {:count 6} .str.160: ref;

axiom .str.160 == $sub.ref(0, 335765);

const {:count 23} .str.161: ref;

axiom .str.161 == $sub.ref(0, 336812);

const {:count 28} .str.162: ref;

axiom .str.162 == $sub.ref(0, 337864);

const {:count 14} .str.163: ref;

axiom .str.163 == $sub.ref(0, 338902);

const {:count 18} .str.170: ref;

axiom .str.170 == $sub.ref(0, 339944);

const {:count 27} .str.171: ref;

axiom .str.171 == $sub.ref(0, 340995);

const {:count 6} .str.269: ref;

axiom .str.269 == $sub.ref(0, 342025);

const {:count 14} .str.270: ref;

axiom .str.270 == $sub.ref(0, 343063);

const x86_dma_fallback_dev: ref;

axiom x86_dma_fallback_dev == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 16} .str.267: ref;

axiom .str.267 == $sub.ref(0, 344103);

const {:count 63} .str.268: ref;

axiom .str.268 == $sub.ref(0, 345190);

const {:count 15} .str.264: ref;

axiom .str.264 == $sub.ref(0, 346229);

const {:count 62} .str.265: ref;

axiom .str.265 == $sub.ref(0, 347315);

const {:count 62} .str.266: ref;

axiom .str.266 == $sub.ref(0, 348401);

const {:count 15} .str.262: ref;

axiom .str.262 == $sub.ref(0, 349440);

const {:count 62} .str.263: ref;

axiom .str.263 == $sub.ref(0, 350526);

const {:count 16} .str.260: ref;

axiom .str.260 == $sub.ref(0, 351566);

const {:count 52} .str.261: ref;

axiom .str.261 == $sub.ref(0, 352642);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const {:count 16} .str.134: ref;

axiom .str.134 == $sub.ref(0, 353682);

const {:count 36} .str.135: ref;

axiom .str.135 == $sub.ref(0, 354742);

const {:count 15} .str.103: ref;

axiom .str.103 == $sub.ref(0, 355781);

const {:count 58} .str.104: ref;

axiom .str.104 == $sub.ref(0, 356863);

const {:count 32} .str.105: ref;

axiom .str.105 == $sub.ref(0, 357919);

const {:count 16} .str.106: ref;

axiom .str.106 == $sub.ref(0, 358959);

const {:count 27} .str.107: ref;

axiom .str.107 == $sub.ref(0, 360010);

const {:count 21} .str.130: ref;

axiom .str.130 == $sub.ref(0, 361055);

const {:count 41} .str.131: ref;

axiom .str.131 == $sub.ref(0, 362120);

const {:count 39} .str.132: ref;

axiom .str.132 == $sub.ref(0, 363183);

const {:count 36} .str.133: ref;

axiom .str.133 == $sub.ref(0, 364243);

const {:count 16} .str.126: ref;

axiom .str.126 == $sub.ref(0, 365283);

const {:count 28} .str.127: ref;

axiom .str.127 == $sub.ref(0, 366335);

const {:count 31} .str.128: ref;

axiom .str.128 == $sub.ref(0, 367390);

const {:count 19} .str.129: ref;

axiom .str.129 == $sub.ref(0, 368433);

const {:count 25} .str.124: ref;

axiom .str.124 == $sub.ref(0, 369482);

const {:count 24} .str.121: ref;

axiom .str.121 == $sub.ref(0, 370530);

const {:count 19} .str.122: ref;

axiom .str.122 == $sub.ref(0, 371573);

const {:count 28} .str.123: ref;

axiom .str.123 == $sub.ref(0, 372625);

const {:count 29} .str.108: ref;

axiom .str.108 == $sub.ref(0, 373678);

const {:count 30} .str.109: ref;

axiom .str.109 == $sub.ref(0, 374732);

const {:count 38} .str.110: ref;

axiom .str.110 == $sub.ref(0, 375794);

const {:count 36} .str.111: ref;

axiom .str.111 == $sub.ref(0, 376854);

const {:count 29} .str.112: ref;

axiom .str.112 == $sub.ref(0, 377907);

const {:count 33} .str.113: ref;

axiom .str.113 == $sub.ref(0, 378964);

const {:count 31} .str.114: ref;

axiom .str.114 == $sub.ref(0, 380019);

const {:count 31} .str.115: ref;

axiom .str.115 == $sub.ref(0, 381074);

const {:count 40} .str.116: ref;

axiom .str.116 == $sub.ref(0, 382138);

const {:count 31} .str.117: ref;

axiom .str.117 == $sub.ref(0, 383193);

const {:count 32} .str.118: ref;

axiom .str.118 == $sub.ref(0, 384249);

const {:count 41} .str.119: ref;

axiom .str.119 == $sub.ref(0, 385314);

const {:count 35} .str.120: ref;

axiom .str.120 == $sub.ref(0, 386373);

const kernel_stack: ref;

axiom kernel_stack == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

const {:count 8} .str.293: ref;

axiom .str.293 == $sub.ref(0, 387405);

const {:count 8} .str.294: ref;

axiom .str.294 == $sub.ref(0, 388437);

const {:count 8} .str.295: ref;

axiom .str.295 == $sub.ref(0, 389469);

const {:count 8} .str.296: ref;

axiom .str.296 == $sub.ref(0, 390501);

const {:count 15} .str.297: ref;

axiom .str.297 == $sub.ref(0, 391540);

const {:count 10} .str.298: ref;

axiom .str.298 == $sub.ref(0, 392574);

const {:count 6} .str.299: ref;

axiom .str.299 == $sub.ref(0, 393604);

const {:count 11} .str.300: ref;

axiom .str.300 == $sub.ref(0, 394639);

const {:count 15} .str.301: ref;

axiom .str.301 == $sub.ref(0, 395678);

const {:count 15} .str.302: ref;

axiom .str.302 == $sub.ref(0, 396717);

const {:count 15} .str.303: ref;

axiom .str.303 == $sub.ref(0, 397756);

const {:count 15} .str.304: ref;

axiom .str.304 == $sub.ref(0, 398795);

const {:count 14} .str.317: ref;

axiom .str.317 == $sub.ref(0, 399833);

const {:count 22} .str.306: ref;

axiom .str.306 == $sub.ref(0, 400879);

const {:count 12} .str.310: ref;

axiom .str.310 == $sub.ref(0, 401915);

const {:count 11} .str.309: ref;

axiom .str.309 == $sub.ref(0, 402950);

const {:count 15} .str.308: ref;

axiom .str.308 == $sub.ref(0, 403989);

const {:count 17} .str.305: ref;

axiom .str.305 == $sub.ref(0, 405030);

const {:count 36} .str.307: ref;

axiom .str.307 == $sub.ref(0, 406090);

const {:count 23} .str.139: ref;

axiom .str.139 == $sub.ref(0, 407137);

const {:count 45} .str.140: ref;

axiom .str.140 == $sub.ref(0, 408206);

const {:count 52} .str.141: ref;

axiom .str.141 == $sub.ref(0, 409282);

const {:count 52} .str.142: ref;

axiom .str.142 == $sub.ref(0, 410358);

const {:count 51} .str.143: ref;

axiom .str.143 == $sub.ref(0, 411433);

const {:count 46} .str.144: ref;

axiom .str.144 == $sub.ref(0, 412503);

const {:count 48} .str.145: ref;

axiom .str.145 == $sub.ref(0, 413575);

const {:count 50} .str.146: ref;

axiom .str.146 == $sub.ref(0, 414649);

const {:count 26} .str.136: ref;

axiom .str.136 == $sub.ref(0, 415699);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 416731);

const {:count 3} .str.1.726: ref;

axiom .str.1.726 == $sub.ref(0, 417758);

const {:count 14} .str.727: ref;

axiom .str.727 == $sub.ref(0, 418796);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 419824);

const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 420856);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := ldv_malloc($i0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 421888);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 422920);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p4 := malloc($i0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} __VERIFIER_assume($i7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 423952);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 9} $r := $malloc($i0);
    return;
}



const skd_pci_probe: ref;

axiom skd_pci_probe == $sub.ref(0, 424984);

procedure skd_pci_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.37, $M.10, $M.11, $CurrAddr, $M.20, assertsPassed, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18;



implementation skd_pci_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i15: i32;
  var $i16: i1;
  var $i18: i32;
  var $i19: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p62: ref;
  var $i63: i64;
  var $p65: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p73: ref;
  var $i74: i64;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p82: ref;
  var $i83: i64;
  var $p86: ref;
  var $i87: i64;
  var $i88: i64;
  var $i89: i64;
  var $i90: i32;
  var $i91: i32;
  var $p93: ref;
  var $p95: ref;
  var $i96: i64;
  var $p98: ref;
  var $i99: i32;
  var $i100: i64;
  var $p101: ref;
  var $p103: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i24;
  var $i119: i24;
  var $i120: i24;
  var $p121: ref;
  var $p122: ref;
  var $i123: i8;
  var $i124: i64;
  var $i125: i64;
  var $i126: i64;
  var $i127: i1;
  var $p128: ref;
  var $p129: ref;
  var $p131: ref;
  var $p132: ref;
  var $p134: ref;
  var $i135: i64;
  var $p137: ref;
  var $i138: i32;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i144: i32;
  var $i145: i1;
  var $p147: ref;
  var $p148: ref;
  var $i149: i32;
  var $i150: i1;
  var $i151: i8;
  var $i152: i1;
  var $i153: i1;
  var $i154: i64;
  var $i155: i1;
  var $i157: i1;
  var $i156: i1;
  var $i158: i32;
  var $i159: i1;
  var $p160: ref;
  var $p161: ref;
  var $i162: i64;
  var $p163: ref;
  var $i164: i64;
  var $p165: ref;
  var $i166: i32;
  var $i167: i1;
  var $i168: i8;
  var $i169: i1;
  var $i170: i1;
  var $i171: i64;
  var $i172: i1;
  var $i174: i1;
  var $i173: i1;
  var $i175: i32;
  var $i176: i1;
  var $i177: i64;
  var $i179: i1;
  var $i180: i64;
  var $i181: i64;
  var $i178: i64;
  var $p182: ref;
  var $i183: i64;
  var $i184: i32;
  var $p185: ref;
  var $i186: i32;
  var $i187: i1;
  var $p189: ref;
  var $i191: i1;
  var $i192: i32;
  var $i146: i32;
  var $i111: i32;
  var $p194: ref;
  var $p195: ref;
  var $i196: i64;
  var $i197: i1;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $i202: i32;
  var $i203: i1;
  var $i31: i32;
  var $i20: i32;
  var $i17: i32;
  var $p206: ref;
  var $p207: ref;
  var $i208: i64;
  var $i209: i1;
  var $p211: ref;
  var $p212: ref;
  var $p215: ref;
  var $i216: i64;
  var $p218: ref;
  var $p221: ref;
  var $i222: i64;
  var $i223: i1;
  var $p226: ref;
  var $i227: i64;
  var $p230: ref;
  var $i231: i64;
  var $i232: i1;
  var $p236: ref;
  var $i237: i64;
  var $p240: ref;
  var $i241: i64;
  var $i242: i64;
  var $i243: i64;
  var $i244: i32;
  var $i233: i32;
  var $p246: ref;
  var $p248: ref;
  var $i249: i64;
  var $p251: ref;
  var $i252: i32;
  var $i253: i64;
  var $p254: ref;
  var $p256: ref;
  var $p258: ref;
  var $p259: ref;
  var $i260: i64;
  var $i261: i1;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $i268: i24;
  var $i269: i24;
  var $i270: i24;
  var $p271: ref;
  var $p272: ref;
  var $i273: i8;
  var $i274: i64;
  var $i275: i64;
  var $i276: i64;
  var $i277: i1;
  var $p278: ref;
  var $p279: ref;
  var $p281: ref;
  var $p282: ref;
  var $p284: ref;
  var $i285: i64;
  var $p287: ref;
  var $i288: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: ref;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} vslice_dummy_var_44 := printk.ref.ref.ref.ref(.str.147, .str.27, .str.137, .str.138);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $p7 := pci_name($p0);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(60, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.1, $p8);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(62, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.1, $p11);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} vslice_dummy_var_45 := printk.ref.ref.i32.i32(.str.148, $p7, $i10, $i13);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i15 := pci_enable_device($p0);
    call {:si_unique_call 18} {:cexpr "rc"} boogie_si_record_i32($i15);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i18 := pci_request_regions($p0, .str.27);
    call {:si_unique_call 20} {:cexpr "rc"} boogie_si_record_i32($i18);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $i21 := pci_set_dma_mask($p0, $sub.i64(0, 1));
    call {:si_unique_call 24} {:cexpr "rc"} boogie_si_record_i32($i21);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i27 := pci_set_dma_mask($p0, 4294967295);
    call {:si_unique_call 28} {:cexpr "rc"} boogie_si_record_i32($i27);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i32 := $M.2;
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p41 := skd_construct($p0);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p2);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} vslice_dummy_var_48 := skd_pci_info($p41, $p44);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $p46 := skd_name($p41);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p2);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} vslice_dummy_var_49 := printk.ref.ref.ref(.str.151, $p46, $p47);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} pci_set_master($p0);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $i49 := pci_enable_pcie_error_reporting($p0);
    call {:si_unique_call 46} {:cexpr "rc"} boogie_si_record_i32($i49);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i50 == 1);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(64, 1));
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p54, 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p41);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} pci_set_drvdata($p0, $p55);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(144, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 1752)), $mul.ref(1696, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p59, $p56);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.1, $p62);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(16, 1)), $mul.ref(0, 8));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p65, $i63);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.1, $p68);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb37, $bb39;

  $bb39:
    assume !($i70 == 1);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.1, $p73);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.1, $p77);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i74, $i78);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i79 == 1);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i91 := 0;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(32, 1)), $mul.ref(0, 4));
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p93, $i91);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(16, 1)), $mul.ref(0, 8));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i96 := $load.i64($M.1, $p95);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(32, 1)), $mul.ref(0, 4));
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.1, $p98);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i100 := $zext.i32.i64($i99);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $p101 := ioremap($i96, $i100);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p103, $p101);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.1, $p105);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i108 := $eq.i64($i107, 0);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb43, $bb45;

  $bb45:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p112, .str.27);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p113, .str.154);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p114, .str.29);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p115, .str.155);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i118 := $load.i24($M.7, $p117);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i119 := $and.i24($i118, $sub.i24(0, 262144));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i120 := $or.i24($i119, 4947);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p117, $i120);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p121, 0);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.8, $p122);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i64($i123);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i125 := $and.i64($i124, 1);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $i126 := ldv__builtin_expect($i125, 0);
    call {:si_unique_call 54} {:cexpr "tmp___8"} boogie_si_record_i64($i126);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i126, 0);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i216 := $load.i64($M.1, $p215);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(16, 1)), $mul.ref(1, 8));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p218, $i216);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i222 := $load.i64($M.1, $p221);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i223 := $ne.i64($i222, 0);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i223} true;
    goto $bb108, $bb110;

  $bb110:
    assume !($i223 == 1);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(8, 1));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i227 := $load.i64($M.1, $p226);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i231 := $load.i64($M.1, $p230);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i232 := $ne.i64($i227, $i231);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i232} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i232 == 1);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i233 := 0;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(32, 1)), $mul.ref(1, 4));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p246, $i233);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(16, 1)), $mul.ref(1, 8));
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i249 := $load.i64($M.1, $p248);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(32, 1)), $mul.ref(1, 4));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i252 := $load.i32($M.1, $p251);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i253 := $zext.i32.i64($i252);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $p254 := ioremap($i249, $i253);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p256, $p254);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p259 := $load.ref($M.1, $p258);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i260 := $p2i.ref.i64($p259);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i261 := $eq.i64($i260, 0);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i261} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p262, .str.27);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p263, .str.154);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p264, .str.29);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p265, .str.155);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p267 := $bitcast.ref.ref($p266);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i268 := $load.i24($M.7, $p267);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i269 := $and.i24($i268, $sub.i24(0, 262144));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i270 := $or.i24($i269, 4947);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p267, $i270);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p271, 0);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i273 := $load.i8($M.8, $p272);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i274 := $zext.i8.i64($i273);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i275 := $and.i64($i274, 1);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $i276 := ldv__builtin_expect($i275, 0);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i277 := $ne.i64($i276, 0);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i277} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $i140 := skd_acquire_irq($p41);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 57} {:cexpr "rc"} boogie_si_record_i32($i140);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i140, 0);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $i144 := skd_start_timer($p41);
    call {:si_unique_call 61} {:cexpr "rc"} boogie_si_record_i32($i144);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i145 := $ne.i32($i144, 0);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(664, 1));
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} __init_waitqueue_head($p147, .str.157, $p4);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} skd_start_device($p41);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(168, 1));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.1, $p148);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i150 := $ne.i32($i149, 0);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i151 := $zext.i1.i8($i150);
    call {:si_unique_call 66} {:cexpr "__cond___0"} boogie_si_record_i8($i151);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i8.i1($i151);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i152 == 1);
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i154 := 22500;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i155 := $trunc.i8.i1($i151);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i156 := 1;
    assume {:branchcond $i155} true;
    goto $bb66, $bb68;

  $bb68:
    assume !($i155 == 1);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i157 := $eq.i64($i154, 0);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i156 := $i157;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i158 := $zext.i1.i32($i156);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 0);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i159} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    $i183 := $i154;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i184 := $trunc.i64.i32($i183);
    call {:si_unique_call 74} {:cexpr "rc"} boogie_si_record_i32($i184);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(168, 1));
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.1, $p185);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i187 := $sgt.i32($i186, 0);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i187} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i187 == 1);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $p189 := skd_name($p41);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} vslice_dummy_var_55 := printk.ref.ref.i32(.str.158, $p189, $i184);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i184, 0);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    $i192 := $i184;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i146 := $i192;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} skd_stop_device($p41);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} skd_release_irq($p41);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i111 := $i146;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.1, $p194);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i196 := $p2i.ref.i64($p195);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i197 := $ne.i64($i196, 0);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.1, $p206);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i208 := $p2i.ref.i64($p207);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i209 := $ne.i64($i208, 0);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(64, 1));
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i202 := $load.i32($M.1, $p201);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i203 := $ne.i32($i202, 0);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} skd_destruct($p41);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i31 := $i111;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} pci_release_regions($p0);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i20 := $i31;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} pci_disable_device($p0);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} pci_set_drvdata($p0, $0.ref);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i17 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb102:
    assume $i203 == 1;
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} vslice_dummy_var_56 := pci_disable_pcie_error_reporting($p0);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb105:
    assume $i209 == 1;
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.1, $p211);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} iounmap($p212);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb97:
    assume $i197 == 1;
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p200 := $load.ref($M.1, $p199);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} iounmap($p200);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    goto $bb99;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb92:
    assume $i191 == 1;
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i192 := $sub.i32(0, 6);
    goto $bb94;

  $bb89:
    assume $i187 == 1;
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} vslice_dummy_var_54 := skd_bdev_attach($p41);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb69:
    assume $i159 == 1;
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} INIT_LIST_HEAD($p160);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p161, 0);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i162 := 22500;
    goto $bb71;

  $bb71:
    call $i162, $p163, $i164, $p165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i174, $i173, $i175, $i176, $i177, $i179, $i180, $i181 := skd_pci_probe_loop_$bb71($p5, $p41, $i162, $p163, $i164, $p165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i174, $i173, $i175, $i176, $i177, $i179, $i180, $i181);
    goto $bb71_last;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(664, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $i164 := prepare_to_wait_event($p163, $p5, 1);
    call {:si_unique_call 69} {:cexpr "tmp___10"} boogie_si_record_i64($i164);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(168, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.1, $p165);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i166, 0);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i168 := $zext.i1.i8($i167);
    call {:si_unique_call 70} {:cexpr "__cond"} boogie_si_record_i8($i168);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i8.i1($i168);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i169 == 1);
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i171 := $i162;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i172 := $trunc.i8.i1($i168);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i173 := 1;
    assume true;
    goto $bb78, $bb80;

  $bb80:
    assume !($i172 == 1);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i174 := $eq.i64($i171, 0);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i173 := $i174;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i175 := $zext.i1.i32($i173);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i176 := $ne.i32($i175, 0);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i177 := $i171;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i179 := $ne.i64($i164, 0);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i180 := $i164;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $i181 := schedule_timeout($i171);
    call {:si_unique_call 73} {:cexpr "__ret___0"} boogie_si_record_i64($i181);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i162 := $i181;
    goto corral_source_split_286_dummy;

  $bb85:
    assume $i179 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i178 := $i180;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(664, 1));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} finish_wait($p182, $p5);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i183 := $i178;
    goto $bb88;

  $bb81:
    assume $i176 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i178 := $i177;
    goto $bb83;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i172 == 1;
    goto $bb79;

  $bb72:
    assume $i169 == 1;
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i170 := $eq.i64($i162, 0);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i170 == 1);
    goto $bb74;

  $bb75:
    assume $i170 == 1;
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i171 := 1;
    goto $bb77;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i155 == 1;
    goto $bb67;

  $bb60:
    assume $i152 == 1;
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i153 := $eq.i64(22500, 0);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i153 == 1);
    goto $bb62;

  $bb63:
    assume $i153 == 1;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i154 := 1;
    goto $bb65;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb56:
    assume $i145 == 1;
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i146 := $i144;
    goto $bb58;

  $bb53:
    assume $i141 == 1;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $p142 := skd_name($p41);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} vslice_dummy_var_53 := printk.ref.ref.i32(.str.156, $p142, $i140);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i111 := $i140;
    goto $bb46;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb117:
    assume $i277 == 1;
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p279 := $bitcast.ref.ref($p278);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p282 := $load.ref($M.1, $p281);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(16, 1)), $mul.ref(1, 8));
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i285 := $load.i64($M.1, $p284);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(32, 1)), $mul.ref(1, 4));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i288 := $load.i32($M.1, $p287);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} vslice_dummy_var_57 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.i64.i32($p3, .str.155, $p279, .str.154, 4947, $p282, $i285, $i288);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb114:
    assume {:verifier.code 0} true;
    assume $i261 == 1;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $p109 := skd_name($p41);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} vslice_dummy_var_51 := printk.ref.ref(.str.153, $p109);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i111 := $sub.i32(0, 19);
    goto $bb46;

  $bb111:
    assume {:verifier.code 0} true;
    assume $i232 == 1;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(8, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i237 := $load.i64($M.1, $p236);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i241 := $load.i64($M.1, $p240);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i242 := $sub.i64($i237, $i241);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i243 := $add.i64($i242, 1);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i244 := $trunc.i64.i32($i243);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i233 := $i244;
    goto $bb113;

  $bb108:
    assume {:verifier.code 0} true;
    assume $i223 == 1;
    goto $bb109;

  $bb48:
    assume $i127 == 1;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.1, $p131);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(16, 1)), $mul.ref(0, 8));
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i135 := $load.i64($M.1, $p134);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(32, 1)), $mul.ref(0, 4));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.1, $p137);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} vslice_dummy_var_52 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.i64.i32($p3, .str.155, $p129, .str.154, 4947, $p132, $i135, $i138);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb44;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.1, $p82);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.1, $p86);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i88 := $sub.i64($i83, $i87);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i89 := $add.i64($i88, 1);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i64.i32($i89);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i91 := $i90;
    goto $bb42;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb38;

  $bb32:
    assume $i50 == 1;
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $p51 := skd_name($p41);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} vslice_dummy_var_50 := printk.ref.ref.i32(.str.152, $p51, $i49);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p41, $mul.ref(0, 1008)), $mul.ref(64, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p53, 0);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i43 == 1;
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 12);
    goto $bb17;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i33 == 1;
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $i34 := register_blkdev(0, .str.27);
    call {:si_unique_call 35} {:cexpr "rc"} boogie_si_record_i32($i34);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i34, 0);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i34, 0);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i36);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 37} {:cexpr "tmp___3"} boogie_si_record_i64($i39);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.2 := $i34;
    call {:si_unique_call 39} {:cexpr "skd_major"} boogie_si_record_i32($i34);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb24:
    assume $i40 == 1;
    call {:si_unique_call 38} devirtbounce(0, .str.29, 4905, 12);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    call skd_pci_probe_loop_$bb26();
    goto $bb26_last;

  $bb21:
    assume $i35 == 1;
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i31 := $i34;
    goto $bb17;

  $bb15:
    assume $i28 == 1;
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $p29 := pci_name($p0);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} vslice_dummy_var_47 := printk.ref.ref.i32(.str.150, $p29, $i27);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i31 := $i27;
    goto $bb17;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i23 := pci_set_consistent_dma_mask($p0, $sub.i64(0, 1));
    call {:si_unique_call 26} {:cexpr "tmp___1"} boogie_si_record_i32($i23);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $p25 := pci_name($p0);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} vslice_dummy_var_46 := printk.ref.ref.i32(.str.149, $p25, $i21);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    goto $bb7;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    goto $bb3;

  corral_source_split_286_dummy:
    assume false;
    return;

  $bb71_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_252;

  $bb26_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    goto $bb26_dummy;
}



const skd_pci_remove: ref;

axiom skd_pci_remove == $sub.ref(0, 426016);

procedure skd_pci_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.10, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.11, $CurrAddr, $M.12, $M.14, $M.16, $M.18, $M.20, $M.13, $M.15, $M.17, $M.19, assertsPassed;



implementation skd_pci_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} skd_stop_device($p2);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} skd_release_irq($p2);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 1008)), $mul.ref(64, 1));
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} skd_destruct($p2);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} pci_release_regions($p0);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} pci_disable_device($p0);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} pci_set_drvdata($p0, $0.ref);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i17 == 1;
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} vslice_dummy_var_59 := pci_disable_pcie_error_reporting($p0);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15:
    assume $i23 == 1;
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} iounmap($p26);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} iounmap($p14);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $p5 := pci_name($p0);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} vslice_dummy_var_58 := printk.ref.ref(.str.353, $p5);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const skd_pci_suspend: ref;

axiom skd_pci_suspend == $sub.ref(0, 427048);

procedure skd_pci_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.1, $M.10, $M.36, $CurrAddr, $M.11, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.12, $M.14, $M.16, $M.18, $M.20, $M.13, $M.15, $M.17, $M.19, assertsPassed;



implementation skd_pci_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i10: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p3, $i1);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $p4 := pci_get_drvdata($p0);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} skd_stop_device($p5);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} skd_release_irq($p5);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 1008)), $mul.ref(64, 1));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} pci_release_regions($p0);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} vslice_dummy_var_62 := pci_save_state($p0);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} pci_disable_device($p0);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.9, $p24);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $i26 := pci_choose_state($p0, $i25);
    call {:si_unique_call 109} {:cexpr "tmp___1"} boogie_si_record_i32($i26);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} vslice_dummy_var_63 := pci_set_power_state($p0, $i26);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb12:
    assume $i21 == 1;
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} vslice_dummy_var_61 := pci_disable_pcie_error_reporting($p0);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15:
    assume $i32 == 1;
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} iounmap($p35);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} iounmap($p18);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $p8 := pci_name($p0);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} vslice_dummy_var_60 := printk.ref.ref(.str.353, $p8);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 5);
    goto $bb3;
}



const skd_pci_resume: ref;

axiom skd_pci_resume == $sub.ref(0, 428080);

procedure skd_pci_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.10, $M.11, $CurrAddr, $M.20, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, assertsPassed;



implementation skd_pci_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p37: ref;
  var $i38: i64;
  var $p40: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p48: ref;
  var $i49: i64;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p57: ref;
  var $i58: i64;
  var $p61: ref;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $i65: i32;
  var $i66: i32;
  var $p68: ref;
  var $p70: ref;
  var $i71: i64;
  var $p73: ref;
  var $i74: i32;
  var $i75: i64;
  var $p76: ref;
  var $p78: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i1;
  var $p84: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i24;
  var $i94: i24;
  var $i95: i24;
  var $p96: ref;
  var $p97: ref;
  var $i98: i8;
  var $i99: i64;
  var $i100: i64;
  var $i101: i64;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $p106: ref;
  var $p107: ref;
  var $p109: ref;
  var $i110: i64;
  var $p112: ref;
  var $i113: i32;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i86: i32;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $i126: i1;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i32;
  var $i132: i1;
  var $i27: i32;
  var $i16: i32;
  var $i9: i32;
  var $p135: ref;
  var $p136: ref;
  var $i137: i64;
  var $i138: i1;
  var $p140: ref;
  var $p141: ref;
  var $p144: ref;
  var $i145: i64;
  var $p147: ref;
  var $p150: ref;
  var $i151: i64;
  var $i152: i1;
  var $p155: ref;
  var $i156: i64;
  var $p159: ref;
  var $i160: i64;
  var $i161: i1;
  var $p165: ref;
  var $i166: i64;
  var $p169: ref;
  var $i170: i64;
  var $i171: i64;
  var $i172: i64;
  var $i173: i32;
  var $i162: i32;
  var $p175: ref;
  var $p177: ref;
  var $i178: i64;
  var $p180: ref;
  var $i181: i32;
  var $i182: i64;
  var $p183: ref;
  var $p185: ref;
  var $p187: ref;
  var $p188: ref;
  var $i189: i64;
  var $i190: i1;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $i197: i24;
  var $i198: i24;
  var $i199: i24;
  var $p200: ref;
  var $p201: ref;
  var $i202: i8;
  var $i203: i64;
  var $i204: i64;
  var $i205: i64;
  var $i206: i1;
  var $p207: ref;
  var $p208: ref;
  var $p210: ref;
  var $p211: ref;
  var $p213: ref;
  var $i214: i64;
  var $p216: ref;
  var $i217: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $p3 := pci_get_drvdata($p0);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} vslice_dummy_var_65 := pci_set_power_state($p0, 0);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} vslice_dummy_var_66 := pci_enable_wake($p0, 0, 0);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} pci_restore_state($p0);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $i12 := pci_enable_device($p0);
    call {:si_unique_call 121} {:cexpr "rc"} boogie_si_record_i32($i12);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $i14 := pci_request_regions($p0, .str.27);
    call {:si_unique_call 123} {:cexpr "rc"} boogie_si_record_i32($i14);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i17 := pci_set_dma_mask($p0, $sub.i64(0, 1));
    call {:si_unique_call 126} {:cexpr "rc"} boogie_si_record_i32($i17);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i18 == 1);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $i23 := pci_set_dma_mask($p0, 4294967295);
    call {:si_unique_call 130} {:cexpr "rc"} boogie_si_record_i32($i23);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} pci_set_master($p0);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $i28 := pci_enable_pcie_error_reporting($p0);
    call {:si_unique_call 135} {:cexpr "rc"} boogie_si_record_i32($i28);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i29 == 1);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(64, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p34, 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.1, $p37);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(16, 1)), $mul.ref(0, 8));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p40, $i38);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.1, $p43);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb29;

  $bb29:
    assume !($i45 == 1);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.1, $p48);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.1, $p52);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i49, $i53);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i54 == 1);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i66 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(32, 1)), $mul.ref(0, 4));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p68, $i66);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(16, 1)), $mul.ref(0, 8));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.1, $p70);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(32, 1)), $mul.ref(0, 4));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.1, $p73);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i75 := $zext.i32.i64($i74);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $p76 := ioremap($i71, $i75);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p78, $p76);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.1, $p80);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i83 := $eq.i64($i82, 0);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb35;

  $bb35:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p87, .str.27);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p88, .str.355);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p89, .str.29);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p90, .str.155);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i93 := $load.i24($M.7, $p92);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i94 := $and.i24($i93, $sub.i24(0, 262144));
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i95 := $or.i24($i94, 5144);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p92, $i95);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p96, 0);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.8, $p97);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i64($i98);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i100 := $and.i64($i99, 1);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $i101 := ldv__builtin_expect($i100, 0);
    call {:si_unique_call 144} {:cexpr "tmp___6"} boogie_si_record_i64($i101);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i145 := $load.i64($M.1, $p144);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(16, 1)), $mul.ref(1, 8));
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p147, $i145);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i151 := $load.i64($M.1, $p150);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i152 := $ne.i64($i151, 0);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb63, $bb65;

  $bb65:
    assume !($i152 == 1);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(8, 1));
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i156 := $load.i64($M.1, $p155);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i160 := $load.i64($M.1, $p159);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i156, $i160);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i161 == 1);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i162 := 0;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(32, 1)), $mul.ref(1, 4));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p175, $i162);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(16, 1)), $mul.ref(1, 8));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i178 := $load.i64($M.1, $p177);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(32, 1)), $mul.ref(1, 4));
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.1, $p180);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i182 := $zext.i32.i64($i181);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $p183 := ioremap($i178, $i182);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p185, $p183);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.1, $p187);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i189 := $p2i.ref.i64($p188);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i190 := $eq.i64($i189, 0);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p191, .str.27);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p192, .str.355);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p193, .str.29);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p194, .str.155);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p196 := $bitcast.ref.ref($p195);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i197 := $load.i24($M.7, $p196);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i198 := $and.i24($i197, $sub.i24(0, 262144));
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i199 := $or.i24($i198, 5144);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p196, $i199);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p200, 0);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i202 := $load.i8($M.8, $p201);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i203 := $zext.i8.i64($i202);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i204 := $and.i64($i203, 1);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $i205 := ldv__builtin_expect($i204, 0);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i206 := $ne.i64($i205, 0);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i206} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $i115 := skd_acquire_irq($p4);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    call {:si_unique_call 147} {:cexpr "rc"} boogie_si_record_i32($i115);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} $i119 := skd_start_timer($p4);
    call {:si_unique_call 151} {:cexpr "rc"} boogie_si_record_i32($i119);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(664, 1));
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} __init_waitqueue_head($p121, .str.157, $p2);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} skd_start_device($p4);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i9 := $i119;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i120 == 1;
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} skd_stop_device($p4);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} skd_release_irq($p4);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i86 := $i119;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.1, $p123);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i126 := $ne.i64($i125, 0);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.1, $p135);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i137 := $p2i.ref.i64($p136);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i138 := $ne.i64($i137, 0);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(64, 1));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.1, $p130);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i132 := $ne.i32($i131, 0);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i27 := $i86;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} pci_release_regions($p0);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i16 := $i27;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} pci_disable_device($p0);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i9 := $i16;
    goto $bb3;

  $bb57:
    assume $i132 == 1;
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} vslice_dummy_var_73 := pci_disable_pcie_error_reporting($p0);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb60:
    assume $i138 == 1;
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.1, $p140);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} iounmap($p141);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb52:
    assume $i126 == 1;
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.1, $p128);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} iounmap($p129);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i116 == 1;
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $p117 := pci_name($p0);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} vslice_dummy_var_72 := printk.ref.ref.i32(.str.156, $p117, $i115);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i86 := $i115;
    goto $bb36;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb72:
    assume $i206 == 1;
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p207);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p211 := $load.ref($M.1, $p210);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(16, 1)), $mul.ref(1, 8));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i214 := $load.i64($M.1, $p213);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(32, 1)), $mul.ref(1, 4));
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i217 := $load.i32($M.1, $p216);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} vslice_dummy_var_74 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.i64.i32($p1, .str.155, $p208, .str.355, 5144, $p211, $i214, $i217);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i190 == 1;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $p84 := skd_name($p4);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} vslice_dummy_var_70 := printk.ref.ref(.str.153, $p84);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i86 := $sub.i32(0, 19);
    goto $bb36;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i161 == 1;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(8, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i166 := $load.i64($M.1, $p165);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i170 := $load.i64($M.1, $p169);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i171 := $sub.i64($i166, $i170);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i172 := $add.i64($i171, 1);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i173 := $trunc.i64.i32($i172);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i162 := $i173;
    goto $bb68;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i152 == 1;
    goto $bb64;

  $bb38:
    assume $i102 == 1;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.1, $p106);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(16, 1)), $mul.ref(0, 8));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i110 := $load.i64($M.1, $p109);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(32, 1)), $mul.ref(0, 4));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.1, $p112);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} vslice_dummy_var_71 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.i64.i32($p1, .str.155, $p104, .str.355, 5144, $p107, $i110, $i113);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb34;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.1, $p57);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.1, $p61);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i63 := $sub.i64($i58, $i62);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 1);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i64.i32($i64);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i66 := $i65;
    goto $bb32;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb28;

  $bb22:
    assume $i29 == 1;
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} vslice_dummy_var_69 := printk.ref.ref.i32(.str.152, $p31, $i28);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 1008)), $mul.ref(64, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p33, 0);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume $i24 == 1;
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} $p25 := pci_name($p0);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} vslice_dummy_var_68 := printk.ref.ref.i32(.str.150, $p25, $i23);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i27 := $i23;
    goto $bb20;

  $bb12:
    assume $i18 == 1;
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i19 := pci_set_consistent_dma_mask($p0, $sub.i64(0, 1));
    call {:si_unique_call 128} {:cexpr "tmp___2"} boogie_si_record_i32($i19);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $p21 := pci_name($p0);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} vslice_dummy_var_67 := printk.ref.ref.i32(.str.149, $p21, $i17);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i9 := $i12;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $p7 := pci_name($p0);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} vslice_dummy_var_64 := printk.ref.ref(.str.353, $p7);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb3;
}



const skd_pci_shutdown: ref;

axiom skd_pci_shutdown == $sub.ref(0, 429112);

procedure skd_pci_shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.10, $M.11, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.12, $M.14, $M.16, $M.18, $M.20, $M.13, $M.15, $M.17, $M.19, assertsPassed;



implementation skd_pci_shutdown($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p8: ref;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} vslice_dummy_var_75 := printk.ref(.str.352);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $p2 := pci_get_drvdata($p0);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $p8 := skd_name($p3);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} vslice_dummy_var_77 := printk.ref.ref(.str.354, $p8);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} skd_stop_device($p3);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $p6 := pci_name($p0);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} vslice_dummy_var_76 := printk.ref.ref(.str.353, $p6);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const printk: ref;

axiom printk == $sub.ref(0, 430144);

procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 1} true;
    call {:si_unique_call 169} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 170} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 1} true;
    call {:si_unique_call 171} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 172} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 1} true;
    call {:si_unique_call 173} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 174} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 1} true;
    call {:si_unique_call 175} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 176} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 1} true;
    call {:si_unique_call 177} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 178} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 1} true;
    call {:si_unique_call 179} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 180} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 1} true;
    call {:si_unique_call 181} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 182} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: ref, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: ref, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 1} true;
    call {:si_unique_call 183} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 184} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 1} true;
    call {:si_unique_call 185} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 186} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);



procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 1} true;
    call {:si_unique_call 187} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 188} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb11:
    assume {:verifier.code 1} true;
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 1} true;
    call {:si_unique_call 189} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 190} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb12:
    assume {:verifier.code 1} true;
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 1} true;
    call {:si_unique_call 191} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 192} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 431176);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pci_name: ref;

axiom pci_name == $sub.ref(0, 432208);

procedure pci_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $p2 := dev_name($p1);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skd_name: ref;

axiom skd_name == $sub.ref(0, 433240);

procedure skd_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation skd_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(549, 1));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.1;
    call {:si_unique_call 195} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p2, 0, 80, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_1;
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(532, 1));
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $p18 := pci_name($p17);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(549, 1));
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} vslice_dummy_var_79 := snprintf.ref.i64.ref.ref.ref($p20, 80, .str.102, $p22, $p18);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(549, 1));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $r := $p25;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $p8 := pci_name($p7);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(549, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(536, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} vslice_dummy_var_78 := snprintf.ref.i64.ref.ref.ref.ref($p10, 80, .str.101, $p12, $p14, $p8);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const skd_stop_device: ref;

axiom skd_stop_device == $sub.ref(0, 434272);

procedure skd_stop_device($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.10, $M.11, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.12, $M.14, $M.16, $M.18, $M.20, $M.13, $M.15, $M.17, $M.19, assertsPassed;



implementation skd_stop_device($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i8;
  var $i22: i1;
  var $i23: i1;
  var $i24: i64;
  var $i25: i1;
  var $i27: i1;
  var $i26: i1;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i38: i8;
  var $i39: i1;
  var $i40: i1;
  var $i41: i64;
  var $i42: i1;
  var $i44: i1;
  var $i43: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i1;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $p69: ref;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i64;
  var $i68: i32;
  var $i76: i1;
  var $p77: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i64;
  var $p84: ref;
  var $i85: i64;
  var $i86: i64;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i92: i64;
  var $p93: ref;
  var $i94: i64;
  var $i95: i64;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $i101: i64;
  var $p102: ref;
  var $i103: i64;
  var $i104: i64;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i110: i64;
  var $p111: ref;
  var $i112: i64;
  var $i113: i64;
  var $i115: i32;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $i119: i64;
  var $p120: ref;
  var $i121: i64;
  var $i122: i64;
  var $i124: i32;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i128: i64;
  var $p129: ref;
  var $i130: i64;
  var $i131: i64;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $i137: i64;
  var $p138: ref;
  var $i139: i64;
  var $i140: i64;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $i146: i64;
  var $p147: ref;
  var $i148: i64;
  var $i149: i64;
  var $i151: i32;
  var $i75: i32;
  var $i152: i1;
  var $p153: ref;
  var $i154: i64;
  var $p155: ref;
  var $i156: i64;
  var $i157: i64;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i64;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i64;
  var vslice_dummy_var_88: i64;
  var vslice_dummy_var_89: i64;
  var vslice_dummy_var_90: i64;
  var vslice_dummy_var_91: i64;
  var vslice_dummy_var_92: i64;
  var vslice_dummy_var_93: i64;
  var vslice_dummy_var_94: i64;
  var vslice_dummy_var_95: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1));
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} ldv_spin_lock();
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 4);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p15, 18);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(172, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p16, 0);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} skd_send_internal_skspcl($p0, $p3, 53);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(72, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} spin_unlock_irqrestore($p17, $u0);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(172, 1));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p18);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i8($i20);
    call {:si_unique_call 216} {:cexpr "__cond___0"} boogie_si_record_i8($i21);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i21);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i24 := 2500;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i21);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i26 := 1;
    assume {:branchcond $i25} true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i25 == 1);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i24, 0);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i26 := $i27;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i26);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} ldv_spin_lock();
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(172, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.1, $p50);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i51, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i51, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} $p59 := skd_name($p0);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} vslice_dummy_var_84 := printk.ref.ref(.str.345, $p59);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p61, 10);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(72, 1));
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} spin_unlock_irqrestore($p62, $u0);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} skd_kill_timer($p0);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} ldv_spin_lock();
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} skd_disable_interrupts($p0);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} skd_reg_write32($p0, 2023, 1312);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} skd_reg_write32($p0, 2, 1280);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(72, 1));
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} spin_unlock_irqrestore($p63, $u0);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} $i64 := skd_reg_read32($p0, 1296);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 232} {:cexpr "tmp___5"} boogie_si_record_i32($i64);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 255);
    call {:si_unique_call 233} {:cexpr "dev_state"} boogie_si_record_i32($i65);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 1);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i67 := $i65;
    assume true;
    goto $bb50, $bb52;

  $bb52:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p2, 1);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $p69 := get_current();
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.10, $p2);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p69, $mul.ref(0, 10656)), $mul.ref(0, 1));
    call {:si_unique_call 235} $i72 := devirtbounce.1(0, $p71, $i70, $p71);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p2, $i72);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i73 := msecs_to_jiffies(100);
    call {:si_unique_call 237} {:cexpr "tmp___10"} boogie_si_record_i64($i73);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} vslice_dummy_var_85 := schedule_timeout($i73);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $i79 := skd_reg_read32($p0, 1296);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 255);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 1);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i67 := $i80;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p2, 1);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $p82 := get_current();
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.10, $p2);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p82, $mul.ref(0, 10656)), $mul.ref(0, 1));
    call {:si_unique_call 243} $i85 := devirtbounce.1(0, $p84, $i83, $p84);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p2, $i85);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $i86 := msecs_to_jiffies(100);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} vslice_dummy_var_87 := schedule_timeout($i86);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $i88 := skd_reg_read32($p0, 1296);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i89 := $and.i32($i88, 255);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 1);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i67 := $i89;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p2, 1);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $p91 := get_current();
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.10, $p2);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p91, $mul.ref(0, 10656)), $mul.ref(0, 1));
    call {:si_unique_call 248} $i94 := devirtbounce.1(0, $p93, $i92, $p93);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p2, $i94);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $i95 := msecs_to_jiffies(100);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} vslice_dummy_var_88 := schedule_timeout($i95);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $i97 := skd_reg_read32($p0, 1296);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i98 := $and.i32($i97, 255);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 1);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i67 := $i98;
    assume {:branchcond $i99} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p2, 1);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $p100 := get_current();
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.10, $p2);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p100, $mul.ref(0, 10656)), $mul.ref(0, 1));
    call {:si_unique_call 253} $i103 := devirtbounce.1(0, $p102, $i101, $p102);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p2, $i103);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $i104 := msecs_to_jiffies(100);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} vslice_dummy_var_89 := schedule_timeout($i104);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $i106 := skd_reg_read32($p0, 1296);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i106, 255);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 1);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i67 := $i107;
    assume {:branchcond $i108} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p2, 1);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $p109 := get_current();
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i110 := $load.i64($M.10, $p2);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p109, $mul.ref(0, 10656)), $mul.ref(0, 1));
    call {:si_unique_call 258} $i112 := devirtbounce.1(0, $p111, $i110, $p111);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p2, $i112);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $i113 := msecs_to_jiffies(100);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} vslice_dummy_var_90 := schedule_timeout($i113);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $i115 := skd_reg_read32($p0, 1296);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i116 := $and.i32($i115, 255);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 1);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i67 := $i116;
    assume {:branchcond $i117} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p2, 1);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $p118 := get_current();
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i119 := $load.i64($M.10, $p2);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p118, $mul.ref(0, 10656)), $mul.ref(0, 1));
    call {:si_unique_call 263} $i121 := devirtbounce.1(0, $p120, $i119, $p120);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p2, $i121);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $i122 := msecs_to_jiffies(100);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} vslice_dummy_var_91 := schedule_timeout($i122);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $i124 := skd_reg_read32($p0, 1296);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i125 := $and.i32($i124, 255);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 1);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i67 := $i125;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p2, 1);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $p127 := get_current();
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i128 := $load.i64($M.10, $p2);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p127, $mul.ref(0, 10656)), $mul.ref(0, 1));
    call {:si_unique_call 268} $i130 := devirtbounce.1(0, $p129, $i128, $p129);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p2, $i130);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $i131 := msecs_to_jiffies(100);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} vslice_dummy_var_92 := schedule_timeout($i131);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $i133 := skd_reg_read32($p0, 1296);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i134 := $and.i32($i133, 255);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 1);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i67 := $i134;
    assume {:branchcond $i135} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p2, 1);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $p136 := get_current();
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i137 := $load.i64($M.10, $p2);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p136, $mul.ref(0, 10656)), $mul.ref(0, 1));
    call {:si_unique_call 273} $i139 := devirtbounce.1(0, $p138, $i137, $p138);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p2, $i139);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $i140 := msecs_to_jiffies(100);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} vslice_dummy_var_93 := schedule_timeout($i140);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i142 := skd_reg_read32($p0, 1296);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i143 := $and.i32($i142, 255);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, 1);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i67 := $i143;
    assume {:branchcond $i144} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p2, 1);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $p145 := get_current();
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i146 := $load.i64($M.10, $p2);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p145, $mul.ref(0, 10656)), $mul.ref(0, 1));
    call {:si_unique_call 278} $i148 := devirtbounce.1(0, $p147, $i146, $p147);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p2, $i148);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $i149 := msecs_to_jiffies(100);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} vslice_dummy_var_94 := schedule_timeout($i149);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $i151 := skd_reg_read32($p0, 1296);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i151, 255);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i75, 1);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i67 := $i75;
    assume {:branchcond $i152} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p2, 1);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $p153 := get_current();
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i154 := $load.i64($M.10, $p2);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p153, $mul.ref(0, 10656)), $mul.ref(0, 1));
    call {:si_unique_call 283} $i156 := devirtbounce.1(0, $p155, $i154, $p155);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p2, $i156);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $i157 := msecs_to_jiffies(100);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} vslice_dummy_var_95 := schedule_timeout($i157);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i68 := $i75;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i68, 1);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    return;

  $bb58:
    assume $i76 == 1;
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} $p77 := skd_name($p0);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} vslice_dummy_var_86 := printk.ref.ref.i32(.str.346, $p77, $i68);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb101:
    assume {:verifier.code 0} true;
    assume $i152 == 1;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i68 := $i67;
    goto $bb53;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb96:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb51;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i135 == 1;
    goto $bb51;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i126 == 1;
    goto $bb51;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb81:
    assume {:verifier.code 0} true;
    assume $i117 == 1;
    goto $bb51;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb51;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i99 == 1;
    goto $bb51;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb51;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i81 == 1;
    goto $bb51;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i66 == 1;
    goto $bb51;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i53 == 1;
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $p57 := skd_name($p0);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} vslice_dummy_var_82 := printk.ref.ref(.str.344, $p57);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb38:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i51, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb42;

  $bb43:
    assume $i54 == 1;
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $p55 := skd_name($p0);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} vslice_dummy_var_83 := printk.ref.ref(.str.343, $p55);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} INIT_LIST_HEAD($p30);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p31, 0);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i32 := 2500;
    goto $bb19;

  $bb19:
    call $i32, $p33, $i34, $p35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i44, $i43, $i45, $i46, $i47, $i48 := skd_stop_device_loop_$bb19($p0, $p1, $i32, $p33, $i34, $p35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i44, $i43, $i45, $i46, $i47, $i48);
    goto $bb19_last;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(664, 1));
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $i34 := prepare_to_wait_event($p33, $p1, 1);
    call {:si_unique_call 219} {:cexpr "tmp___1"} boogie_si_record_i64($i34);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(172, 1));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.1, $p35);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i8($i37);
    call {:si_unique_call 220} {:cexpr "__cond"} boogie_si_record_i8($i38);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i38);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i41 := $i32;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i38);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i43 := 1;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i42 == 1);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i41, 0);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i43 := $i44;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i32($i43);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i34, 0);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $i48 := schedule_timeout($i41);
    call {:si_unique_call 223} {:cexpr "__ret___0"} boogie_si_record_i64($i48);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i32 := $i48;
    goto corral_source_split_951_dummy;

  $bb33:
    assume $i47 == 1;
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(664, 1));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} finish_wait($p49, $p1);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb29:
    assume $i46 == 1;
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb27;

  $bb20:
    assume $i39 == 1;
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i32, 0);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb22;

  $bb23:
    assume $i40 == 1;
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i41 := 1;
    goto $bb25;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb15;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64(2500, 0);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i24 := 1;
    goto $bb13;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $p13 := skd_name($p0);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} vslice_dummy_var_81 := printk.ref.ref(.str.342, $p13);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $p7 := skd_name($p0);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} vslice_dummy_var_80 := printk.ref.ref(.str.341, $p7);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_951_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_918;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 435304);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.11;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 286} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    return;
}



const skd_send_internal_skspcl: ref;

axiom skd_send_internal_skspcl == $sub.ref(0, 436336);

procedure skd_send_internal_skspcl($p0: ref, $p1: ref, $i2: i8);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation skd_send_internal_skspcl($p0: ref, $p1: ref, $i2: i8)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p24: ref;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $i29: i32;
  var $i30: i16;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p38: ref;
  var $i39: i16;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $p81: ref;
  var $p83: ref;
  var $p84: ref;
  var $p86: ref;
  var $p88: ref;
  var $p90: ref;
  var $p92: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $i105: i8;
  var $i106: i64;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $i110: i1;
  var $i104: i32;
  var $p112: ref;
  var $p114: ref;
  var $p116: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i32;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i32;
  var $i129: i64;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_96: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} {:cexpr "skd_send_internal_skspcl:arg:opcode"} boogie_si_record_i8($i2);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(136, 1));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.1, $p13);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 1024);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 289} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p24, 2);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.1, $p26);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, 1024);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p32, $i30);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(152, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.1, $p38);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p35, $mul.ref(64, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p41, $i39);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p35, $mul.ref(64, 32)), $mul.ref(16, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.1;
    call {:si_unique_call 291} cmdloc_dummy_var_3 := $memset.i8(cmdloc_dummy_var_2, $p43, 0, 16, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_3;
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i2);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i44, 53);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i44, 59);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i44, 60);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i44, 60);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb15:
    assume $i48 == 1;
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p35, $mul.ref(64, 32)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p112, 60);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p35, $mul.ref(64, 32)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p114, 2);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p35, $mul.ref(64, 32)), $mul.ref(16, 1)), $mul.ref(7, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p116, 2);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p35, $mul.ref(64, 32)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p118, 0);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p119, 512);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.1, $p120);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $i122 := __fswab32($i121);
    call {:si_unique_call 295} {:cexpr "tmp___3"} boogie_si_record_i32($i122);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p35, $mul.ref(64, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p124, $i122);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(136, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.1, $p125);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.1, $p127);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i129 := $zext.i32.i64($i128);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_4 := $M.1;
    call {:si_unique_call 296} cmdloc_dummy_var_5 := $memset.i8(cmdloc_dummy_var_4, $p126, 0, $i129, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_5;
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} skd_send_special_fitmsg($p0, $p1);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i47 == 1;
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p35, $mul.ref(64, 32)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p88, 59);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p35, $mul.ref(64, 32)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p90, 2);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p35, $mul.ref(64, 32)), $mul.ref(16, 1)), $mul.ref(7, 1));
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p92, 2);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p35, $mul.ref(64, 32)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p94, 0);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p95, 512);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.1, $p96);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $i98 := __fswab32($i97);
    call {:si_unique_call 293} {:cexpr "tmp___2"} boogie_si_record_i32($i98);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p35, $mul.ref(64, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p100, $i98);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.1, $p101);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i103 := $ult.i32(0, $i102);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb31:
    assume $i103 == 1;
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i104 := 0;
    goto $bb34;

  $bb34:
    call $i105, $i106, $p107, $i108, $i109, $i110, $i104 := skd_send_internal_skspcl_loop_$bb34($p7, $p101, $i105, $i106, $p107, $i108, $i109, $i110, $i104);
    goto $bb34_last;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i32.i8($i104);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i106 := $sext.i32.i64($i104);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p7, $mul.ref($i106, 1));
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p107, $i105);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i108 := $add.i32($i104, 1);
    call {:si_unique_call 302} {:cexpr "i"} boogie_si_record_i32($i108);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.1, $p101);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i110 := $ult.i32($i108, $i109);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i110 == 1);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb36:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $i104 := $i108;
    goto $bb36_dummy;

  $bb11:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i44, 53);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb17;

  $bb18:
    assume $i49 == 1;
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p35, $mul.ref(64, 32)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p83, 53);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p84, 0);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p35, $mul.ref(64, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p86, 0);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb9:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i44, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i44, 37);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i44, 37);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb17;

  $bb24:
    assume $i52 == 1;
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p35, $mul.ref(64, 32)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p61, 37);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p62, 8);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.1, $p63);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $i65 := __fswab32($i64);
    call {:si_unique_call 298} {:cexpr "tmp___0"} boogie_si_record_i32($i65);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p35, $mul.ref(64, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p67, $i65);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb22:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i44, 18);
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb17;

  $bb26:
    assume $i53 == 1;
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p35, $mul.ref(64, 32)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p69, 18);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p35, $mul.ref(64, 32)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p71, 1);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p35, $mul.ref(64, 32)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p73, $sub.i8(0, 128));
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p35, $mul.ref(64, 32)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p75, 16);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p76, 16);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.1, $p77);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $i79 := __fswab32($i78);
    call {:si_unique_call 300} {:cexpr "tmp___1"} boogie_si_record_i32($i79);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p35, $mul.ref(64, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p81, $i79);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb20:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i44, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb17;

  $bb28:
    assume $i54 == 1;
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p35, $mul.ref(64, 32)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p56, 0);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p57, 0);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p35, $mul.ref(64, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p59, 0);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} vslice_dummy_var_96 := printk.ref.ref.ref.ref.i32(.str.43, .str.77, .str.29, .str.78, 1952);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb36_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1244;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 437368);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.11;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} ldv_spin_unlock();
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} ldv_spin_unlock_irqrestore_8($p0, $i1);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 438400);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1, $p0);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p0);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    return;
}



const prepare_to_wait_event: ref;

axiom prepare_to_wait_event == $sub.ref(0, 439432);

procedure prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 306} {:cexpr "prepare_to_wait_event:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 1} true;
    call {:si_unique_call 307} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 308} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 440464);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 309} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 1} true;
    call {:si_unique_call 310} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 311} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 441496);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    return;
}



const skd_kill_timer: ref;

axiom skd_kill_timer == $sub.ref(0, 442528);

procedure skd_kill_timer($p0: ref);
  free requires assertsPassed;
  modifies $M.12, $M.14, $M.16, $M.18;



implementation skd_kill_timer($p0: ref)
{
  var $p1: ref;
  var vslice_dummy_var_97: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(752, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} vslice_dummy_var_97 := ldv_del_timer_sync_22($p1);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    return;
}



const skd_disable_interrupts: ref;

axiom skd_disable_interrupts == $sub.ref(0, 443560);

procedure skd_disable_interrupts($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.1, $M.10, $M.11, $M.20, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, assertsPassed;



implementation skd_disable_interrupts($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $i2 := skd_reg_read32($p0, 1280);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 315} {:cexpr "sense"} boogie_si_record_i32($i2);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $sub.i32(0, 129));
    call {:si_unique_call 316} {:cexpr "sense"} boogie_si_record_i32($i3);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} skd_reg_write32($p0, $i3, 1280);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p4, .str.27);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p5, .str.40);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p6, .str.29);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p7, .str.41);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.7, $p9);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 3466);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p9, $i12);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p13, 0);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.8, $p14);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 319} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} skd_reg_write32($p0, $sub.i32(0, 1), 1320);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} vslice_dummy_var_98 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p1, .str.41, $p21, .str.40, 3466, $i3);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const skd_reg_write32: ref;

axiom skd_reg_write32 == $sub.ref(0, 444592);

procedure skd_reg_write32($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation skd_reg_write32($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i24;
  var $i28: i24;
  var $i29: i24;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 323} {:cexpr "skd_reg_write32:arg:val"} boogie_si_record_i32($i1);
    call {:si_unique_call 324} {:cexpr "skd_reg_write32:arg:offset"} boogie_si_record_i32($i2);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(904, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i6 := $sle.i32($i5, 1);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $i9 := ldv__builtin_expect($i8, 1);
    call {:si_unique_call 326} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    call {:si_unique_call 329} devirtbounce.2(0);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i2);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p18, $mul.ref($i19, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} writel($i1, $p20);
    call {:si_unique_call 331} devirtbounce.2(0);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p21, .str.27);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p22, .str.76);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p23, .str.29);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p24, .str.33);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i27 := $load.i24($M.7, $p26);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i28 := $and.i24($i27, $sub.i24(0, 262144));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i29 := $or.i24($i28, 441);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p26, $i29);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p30, 0);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.8, $p31);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i64($i32);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i33, 1);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 333} {:cexpr "tmp"} boogie_si_record_i64($i35);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i36 == 1;
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} vslice_dummy_var_99 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32($p3, .str.33, $p38, .str.76, 441, $i2, $i1);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i2);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p13, $mul.ref($i14, 1));
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} writel($i1, $p15);
    call {:si_unique_call 328} devirtbounce.2(0);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const skd_reg_read32: ref;

axiom skd_reg_read32 == $sub.ref(0, 445624);

procedure skd_reg_read32($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.1, $M.10, $M.11, $M.20, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, assertsPassed;



implementation skd_reg_read32($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i24;
  var $i30: i24;
  var $i31: i24;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i16: i32;
  var vslice_dummy_var_100: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 336} {:cexpr "skd_reg_read32:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(904, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i5 := $sle.i32($i4, 1);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $i8 := ldv__builtin_expect($i7, 1);
    call {:si_unique_call 338} {:cexpr "tmp___1"} boogie_si_record_i64($i8);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    call {:si_unique_call 341} devirtbounce.2(0);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i1);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p19, $mul.ref($i20, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $i22 := readl($p21);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 343} {:cexpr "val"} boogie_si_record_i32($i22);
    call {:si_unique_call 344} devirtbounce.2(0);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p23, .str.27);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p24, .str.32);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p25, .str.29);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p26, .str.33);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i29 := $load.i24($M.7, $p28);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i30 := $and.i24($i29, $sub.i24(0, 262144));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i31 := $or.i24($i30, 424);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p28, $i31);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p32, 0);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.8, $p33);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i64($i34);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i35, 1);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 346} {:cexpr "tmp___0"} boogie_si_record_i64($i37);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i16 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i38 == 1;
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} vslice_dummy_var_100 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32($p2, .str.33, $p40, .str.32, 424, $i1, $i22);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i1);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p12, $mul.ref($i13, 1));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $i15 := readl($p14);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 340} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb3;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 446656);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $p0 := devirtbounce.3(0, current_task);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 447688);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 349} {:cexpr "msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 1} true;
    call {:si_unique_call 350} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 351} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 448720);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 353} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const readl: ref;

axiom readl == $sub.ref(0, 449752);

procedure readl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.10, $M.11, $CurrAddr, $M.20, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, assertsPassed;



implementation readl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 354} $i2 := devirtbounce.4(0, $p1);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 355} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 450784);

procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.i64.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: i64, p.7: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.i64.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: i64, p.7: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 1} true;
    call {:si_unique_call 356} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 357} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 1} true;
    call {:si_unique_call 358} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 359} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 1} true;
    call {:si_unique_call 360} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 361} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 1} true;
    call {:si_unique_call 362} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 363} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 1} true;
    call {:si_unique_call 364} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 365} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32.i32.i64.i64($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i64, p.9: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32.i32.i64.i64($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i64, p.9: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 1} true;
    call {:si_unique_call 366} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 367} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.ref.i64($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: ref, p.7: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.ref.i64($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: ref, p.7: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 1} true;
    call {:si_unique_call 368} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 369} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 1} true;
    call {:si_unique_call 370} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 371} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.ref.i32.i32.i64($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: ref, p.7: i32, p.8: i32, p.9: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.ref.i32.i32.i64($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: ref, p.7: i32, p.8: i32, p.9: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 1} true;
    call {:si_unique_call 372} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 373} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 1} true;
    call {:si_unique_call 374} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 375} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 1} true;
    call {:si_unique_call 376} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 377} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.i64.i32.i64($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i64, p.6: i32, p.7: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32.i64.i32.i64($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i64, p.6: i32, p.7: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb11:
    assume {:verifier.code 1} true;
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 1} true;
    call {:si_unique_call 378} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 379} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i64.i64($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i64, p.7: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i64.i64($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i64, p.7: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb12:
    assume {:verifier.code 1} true;
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 1} true;
    call {:si_unique_call 380} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 381} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: ref, p.7: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: ref, p.7: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb13:
    assume {:verifier.code 1} true;
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 1} true;
    call {:si_unique_call 382} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 383} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: ref, p.7: i32, p.8: i32, p.9: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: ref, p.7: i32, p.8: i32, p.9: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb14:
    assume {:verifier.code 1} true;
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 1} true;
    call {:si_unique_call 384} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 385} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32) returns ($r: i32);



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: i32, p.7: i32) returns ($r: i32);



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32) returns ($r: i32);



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb18:
    assume {:verifier.code 1} true;
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 1} true;
    call {:si_unique_call 386} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 387} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.i32.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: i32, p.7: ref, p.8: i32) returns ($r: i32);



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: ref, p.7: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: ref, p.7: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb20:
    assume {:verifier.code 1} true;
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 1} true;
    call {:si_unique_call 388} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 389} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32, p.13: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32, p.13: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb21:
    assume {:verifier.code 1} true;
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 1} true;
    call {:si_unique_call 390} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 391} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.i64.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i64, p.6: i32) returns ($r: i32);



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb23:
    assume {:verifier.code 1} true;
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 1} true;
    call {:si_unique_call 392} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 393} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb24:
    assume {:verifier.code 1} true;
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 1} true;
    call {:si_unique_call 394} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 395} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i64($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i64($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb25:
    assume {:verifier.code 1} true;
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 1} true;
    call {:si_unique_call 396} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 397} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.i32.ref.i64($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: i32, p.7: ref, p.8: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.i32.ref.i64($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: i32, p.7: ref, p.8: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb26:
    assume {:verifier.code 1} true;
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 1} true;
    call {:si_unique_call 398} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 399} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const writel: ref;

axiom writel == $sub.ref(0, 451816);

procedure writel($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation writel($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} {:cexpr "writel:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 401} devirtbounce.5(0, $i0, $p2);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_sync_22: ref;

axiom ldv_del_timer_sync_22 == $sub.ref(0, 452848);

procedure ldv_del_timer_sync_22($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.14, $M.16, $M.18;



implementation ldv_del_timer_sync_22($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $i1 := del_timer_sync($p0);
    call {:si_unique_call 403} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} disable_suitable_timer_1($p0);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const del_timer_sync: ref;

axiom del_timer_sync == $sub.ref(0, 453880);

procedure del_timer_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 1} true;
    call {:si_unique_call 405} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 406} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_suitable_timer_1: ref;

axiom disable_suitable_timer_1 == $sub.ref(0, 454912);

procedure disable_suitable_timer_1($p0: ref);
  free requires assertsPassed;
  modifies $M.12, $M.14, $M.16, $M.18;



implementation disable_suitable_timer_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i1 := $M.12;
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $M.14;
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i13 := $M.16;
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i19 := $M.18;
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p22 := $M.19;
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb22;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 410} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p16 := $M.17;
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i15, $i17);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 409} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p10 := $M.15;
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i9, $i11);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $M.14 := 0;
    call {:si_unique_call 408} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p4 := $M.13;
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $M.12 := 0;
    call {:si_unique_call 407} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 455944);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.11;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $M.11 := 0;
    call {:si_unique_call 411} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_8: ref;

axiom ldv_spin_unlock_irqrestore_8 == $sub.ref(0, 456976);

procedure ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} {:cexpr "ldv_spin_unlock_irqrestore_8:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 458008);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 459040);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const __fswab32: ref;

axiom __fswab32 == $sub.ref(0, 460072);

procedure __fswab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __fswab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} {:cexpr "__fswab32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $i1 := __arch_swab32($i0);
    call {:si_unique_call 417} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const skd_send_special_fitmsg: ref;

axiom skd_send_special_fitmsg == $sub.ref(0, 461104);

procedure skd_send_special_fitmsg($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation skd_send_special_fitmsg($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i24;
  var $i22: i24;
  var $i23: i24;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $i14: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i24;
  var $i84: i24;
  var $i85: i24;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $p96: ref;
  var $i97: i16;
  var $i98: i32;
  var $p100: ref;
  var $p101: ref;
  var $p103: ref;
  var $i104: i64;
  var $p107: ref;
  var $i108: i32;
  var $i109: i1;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i24;
  var $i123: i24;
  var $i124: i24;
  var $p125: ref;
  var $p126: ref;
  var $i127: i8;
  var $i128: i64;
  var $i129: i64;
  var $i130: i64;
  var $i131: i1;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $p136: ref;
  var $i137: i32;
  var $p138: ref;
  var $i139: i64;
  var $p140: ref;
  var $i141: i64;
  var $i143: i32;
  var $i144: i32;
  var $i145: i1;
  var $i110: i32;
  var $p146: ref;
  var $i147: i64;
  var $i148: i64;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(904, 1));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 1);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 422} {:cexpr "tmp___2"} boogie_si_record_i64($i10);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(160, 1));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i147 := $load.i64($M.1, $p146);
    call {:si_unique_call 434} {:cexpr "qcmd"} boogie_si_record_i64($i147);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i148 := $or.i64($i147, 16);
    call {:si_unique_call 435} {:cexpr "qcmd"} boogie_si_record_i64($i148);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} skd_reg_write64($p0, $i148, 1024);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(152, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    call $p15, $p16, $p17, $p18, $p19, $p20, $i21, $i22, $i23, $p24, $p25, $i26, $i27, $i28, $i29, $i30, $p31, $p32, $i33, $p34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $i43, $p44, $i45, $i46, $i47, $i48, $p49, $i50, $i51, $i52, $i53, $p54, $i55, $i56, $i57, $i58, $p59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $p69, $i70, $i71, $i73, $i74, $i75, $i76, $i14, vslice_dummy_var_101 := skd_send_special_fitmsg_loop_$bb3($p0, $p2, $p13, $p15, $p16, $p17, $p18, $p19, $p20, $i21, $i22, $i23, $p24, $p25, $i26, $i27, $i28, $i29, $i30, $p31, $p32, $i33, $p34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $i43, $p44, $i45, $i46, $i47, $i48, $p49, $i50, $i51, $i52, $i53, $p54, $i55, $i56, $i57, $i58, $p59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $p69, $i70, $i71, $i73, $i74, $i75, $i76, $i14, vslice_dummy_var_101);
    goto $bb3_last;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p15, .str.27);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p16, .str.79);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p17, .str.29);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p18, .str.80);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i21 := $load.i24($M.7, $p20);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i22 := $and.i24($i21, $sub.i24(0, 262144));
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i23 := $or.i24($i22, 2288);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p20, $i23);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p24, 0);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.8, $p25);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 424} {:cexpr "tmp"} boogie_si_record_i64($i29);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i14, 0);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $i14;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i74, 8);
    call {:si_unique_call 426} {:cexpr "i"} boogie_si_record_i32($i75);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i76 := $ule.i32($i75, 127);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p77, .str.27);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p78, .str.79);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p79, .str.29);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p80, .str.81);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i83 := $load.i24($M.7, $p82);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i84 := $and.i24($i83, $sub.i24(0, 262144));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i85 := $or.i24($i84, 2296);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p82, $i85);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p86, 0);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.8, $p87);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i64($i88);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i90 := $and.i64($i89, 1);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $i91 := ldv__builtin_expect($i90, 0);
    call {:si_unique_call 428} {:cexpr "tmp___0"} boogie_si_record_i64($i91);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, 0);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.1, $p107);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i109 := $ult.i32(0, $i108);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb17:
    assume $i109 == 1;
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i110 := 0;
    goto $bb20;

  $bb20:
    call $p112, $p113, $i114, $p116, $p117, $p118, $p119, $p120, $p121, $i122, $i123, $i124, $p125, $p126, $i127, $i128, $i129, $i130, $i131, $p132, $p133, $p134, $i135, $p136, $i137, $p138, $i139, $p140, $i141, $i143, $i144, $i145, $i110, vslice_dummy_var_103 := skd_send_special_fitmsg_loop_$bb20($p0, $p1, $p4, $p107, $p112, $p113, $i114, $p116, $p117, $p118, $p119, $p120, $p121, $i122, $i123, $i124, $p125, $p126, $i127, $i128, $i129, $i130, $i131, $p132, $p133, $p134, $i135, $p136, $i137, $p138, $i139, $p140, $i141, $i143, $i144, $i145, $i110, vslice_dummy_var_103);
    goto $bb20_last;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.1, $p112);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i114 := $sext.i32.i64($i110);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p116, .str.27);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p117, .str.79);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p118, .str.29);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p119, .str.82);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i122 := $load.i24($M.7, $p121);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i123 := $and.i24($i122, $sub.i24(0, 262144));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i124 := $or.i24($i123, 2305);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p121, $i124);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p125, 0);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.8, $p126);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i64($i127);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i129 := $and.i64($i128, 1);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i130 := ldv__builtin_expect($i129, 0);
    call {:si_unique_call 431} {:cexpr "tmp___1"} boogie_si_record_i64($i130);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i131 := $ne.i64($i130, 0);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i143 := $add.i32($i110, 1);
    call {:si_unique_call 433} {:cexpr "i"} boogie_si_record_i32($i143);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.1, $p107);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i145 := $ult.i32($i143, $i144);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i145 == 1);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb25:
    assume $i145 == 1;
    assume {:verifier.code 0} true;
    $i110 := $i143;
    goto $bb25_dummy;

  $bb22:
    assume $i131 == 1;
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p113, $mul.ref($i114, 32)), $mul.ref(4, 1));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.1, $p134);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p113, $mul.ref($i114, 32)), $mul.ref(0, 1));
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.1, $p136);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p113, $mul.ref($i114, 32)), $mul.ref(8, 1));
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i139 := $load.i64($M.1, $p138);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p113, $mul.ref($i114, 32)), $mul.ref(24, 1));
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i141 := $load.i64($M.1, $p140);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} vslice_dummy_var_103 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32.i32.i64.i64($p4, .str.82, $p133, .str.79, 2305, $i110, $i135, $i137, $i139, $i141);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb14:
    assume $i92 == 1;
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i97 := $load.i16($M.1, $p96);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i98 := $zext.i16.i32($i97);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.1, $p100);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i104 := $load.i64($M.1, $p103);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} vslice_dummy_var_102 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.i32.ref.i64($p3, .str.81, $p94, .str.79, 2296, $p1, $i98, $p101, $i104);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i75;
    goto $bb11_dummy;

  $bb8:
    assume $i73 == 1;
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i74 := 56;
    goto $bb10;

  $bb5:
    assume $i30 == 1;
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i14);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p13, $mul.ref($i33, 1));
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.1, $p34);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i14);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 1);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p13, $mul.ref($i38, 1));
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.1, $p39);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i14);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, 2);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p13, $mul.ref($i43, 1));
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.1, $p44);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i14);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 3);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p13, $mul.ref($i48, 1));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.1, $p49);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i14);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 4);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p13, $mul.ref($i53, 1));
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.1, $p54);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i14);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 5);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p13, $mul.ref($i58, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.1, $p59);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i14);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 6);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p13, $mul.ref($i63, 1));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.1, $p64);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i14);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i67, 7);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p13, $mul.ref($i68, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.1, $p69);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} vslice_dummy_var_101 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32($p2, .str.80, $p32, .str.79, 2288, $i14, $i36, $i41, $i46, $i51, $i56, $i61, $i66, $i71);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb25_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1693;

  $bb11_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1575;
}



const skd_reg_write64: ref;

axiom skd_reg_write64 == $sub.ref(0, 462136);

procedure skd_reg_write64($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation skd_reg_write64($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i24;
  var $i28: i24;
  var $i29: i24;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var vslice_dummy_var_104: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 438} {:cexpr "skd_reg_write64:arg:val"} boogie_si_record_i64($i1);
    call {:si_unique_call 439} {:cexpr "skd_reg_write64:arg:offset"} boogie_si_record_i32($i2);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(904, 1));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i6 := $sle.i32($i5, 1);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i9 := ldv__builtin_expect($i8, 1);
    call {:si_unique_call 441} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    call {:si_unique_call 444} devirtbounce.2(0);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i2);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p18, $mul.ref($i19, 1));
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} writeq($i1, $p20);
    call {:si_unique_call 446} devirtbounce.2(0);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p21, .str.27);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p22, .str.83);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p23, .str.29);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p24, .str.84);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i27 := $load.i24($M.7, $p26);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i28 := $and.i24($i27, $sub.i24(0, 262144));
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i29 := $or.i24($i28, 456);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p26, $i29);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p30, 0);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.8, $p31);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i64($i32);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i33, 1);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 448} {:cexpr "tmp"} boogie_si_record_i64($i35);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i36 == 1;
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} vslice_dummy_var_104 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i64($p3, .str.84, $p38, .str.83, 456, $i2, $i1);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i2);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p13, $mul.ref($i14, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} writeq($i1, $p15);
    call {:si_unique_call 443} devirtbounce.2(0);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const writeq: ref;

axiom writeq == $sub.ref(0, 463168);

procedure writeq($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation writeq($i0: i64, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} {:cexpr "writeq:arg:val"} boogie_si_record_i64($i0);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 451} devirtbounce.6(0, $i0, $p2);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    return;
}



const __arch_swab32: ref;

axiom __arch_swab32 == $sub.ref(0, 464200);

procedure __arch_swab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __arch_swab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} {:cexpr "__arch_swab32:arg:val"} boogie_si_record_i32($i0);
    call {:si_unique_call 453} $i1 := devirtbounce.7(0, $i0);
    call {:si_unique_call 454} {:cexpr "val"} boogie_si_record_i32($i1);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 465232);

procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



procedure snprintf.ref.i64.ref.ref.i32.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: i32, p.5: ref) returns ($r: i32);



procedure snprintf.ref.i64.ref.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32);



procedure snprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);



procedure snprintf.ref.i64.ref.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref, p.5: ref) returns ($r: i32);



const dev_name: ref;

axiom dev_name == $sub.ref(0, 466264);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $p9 := kobject_name($p8);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 467296);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 468328);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pci_set_power_state: ref;

axiom pci_set_power_state == $sub.ref(0, 469360);

procedure pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 456} {:cexpr "pci_set_power_state:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 1} true;
    call {:si_unique_call 457} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 458} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_enable_wake: ref;

axiom pci_enable_wake == $sub.ref(0, 470392);

procedure pci_enable_wake($p0: ref, $i1: i32, $i2: i1) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_wake($p0: ref, $i1: i32, $i2: i1) returns ($r: i32)
{
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} {:cexpr "pci_enable_wake:arg:state"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 460} {:cexpr "pci_enable_wake:arg:enable"} boogie_si_record_i1($i2);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i5 := __pci_enable_wake($p0, $i1, 0, $i4);
    call {:si_unique_call 462} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const pci_restore_state: ref;

axiom pci_restore_state == $sub.ref(0, 471424);

procedure pci_restore_state($p0: ref);
  free requires assertsPassed;



implementation pci_restore_state($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 472456);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 1} true;
    call {:si_unique_call 463} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 464} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_request_regions: ref;

axiom pci_request_regions == $sub.ref(0, 473488);

procedure pci_request_regions($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_request_regions($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 1} true;
    call {:si_unique_call 465} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 466} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_set_dma_mask: ref;

axiom pci_set_dma_mask == $sub.ref(0, 474520);

procedure pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} {:cexpr "pci_set_dma_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $i3 := dma_set_mask($p2, $i1);
    call {:si_unique_call 469} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_set_consistent_dma_mask: ref;

axiom pci_set_consistent_dma_mask == $sub.ref(0, 475552);

procedure pci_set_consistent_dma_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation pci_set_consistent_dma_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} {:cexpr "pci_set_consistent_dma_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $i3 := dma_set_coherent_mask($p2, $i1);
    call {:si_unique_call 472} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 476584);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_pcie_error_reporting: ref;

axiom pci_enable_pcie_error_reporting == $sub.ref(0, 477616);

procedure pci_enable_pcie_error_reporting($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_pcie_error_reporting($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 1} true;
    call {:si_unique_call 473} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 474} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ioremap: ref;

axiom ioremap == $sub.ref(0, 478648);

procedure ioremap($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} {:cexpr "ioremap:arg:offset"} boogie_si_record_i64($i0);
    call {:si_unique_call 476} {:cexpr "ioremap:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $p2 := ioremap_nocache($i0, $i1);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skd_acquire_irq: ref;

axiom skd_acquire_irq == $sub.ref(0, 479680);

procedure skd_acquire_irq($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, assertsPassed;



implementation skd_acquire_irq($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p37: ref;
  var $i36: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i39: i32;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $p70: ref;
  var $i20: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(44, 1));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p3, 0);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $p4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $p17, $p19, $p21, $p22, $p23, $i24, $i26, $i27, $p28, $p29, $i30, $p31, $p32, $p33, $i34, $i35, $p37, $i36, $i39, $p44, $p46, $p66, $p67, $i68, $p70, vslice_dummy_var_105, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_114 := skd_acquire_irq_loop_$bb1($p0, $p2, $p4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $p17, $p19, $p21, $p22, $p23, $i24, $i26, $i27, $p28, $p29, $i30, $p31, $p32, $p33, $i34, $i35, $p37, $i36, $i39, $p44, $p46, $p66, $p67, $i68, $p70, vslice_dummy_var_105, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_114);
    goto $bb1_last;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $p66 := skd_name($p0);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(40, 1));
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.1, $p67);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} vslice_dummy_var_114 := printk.ref.ref.i32.i32(.str.285, $p66, $i68, 1);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(40, 1));
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p70, 0);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $i10 := skd_acquire_msix($p0);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 482} {:cexpr "rc"} boogie_si_record_i32($i10);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i11 == 1);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $p17 := skd_name($p0);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} vslice_dummy_var_108 := printk.ref.ref.i32(.str.277, $p17, $i10);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(40, 1));
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p19, 1);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $p13 := skd_name($p0);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(44, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} vslice_dummy_var_107 := printk.ref.ref.i32(.str.276, $p13, $i15);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i20 := $i12;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(220, 1));
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(180, 1));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} vslice_dummy_var_105 := snprintf.ref.i64.ref.ref.i32($p22, 30, .str.278, .str.27, $i24);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $i26 := pci_enable_msi_range($p2, 1, 1);
    call {:si_unique_call 480} {:cexpr "rc"} boogie_si_record_i32($i26);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i27 := $sgt.i32($i26, 0);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i27 == 1);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i39 := $i26;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $p44 := skd_name($p0);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} vslice_dummy_var_110 := printk.ref.ref.i32(.str.281, $p44, $i39);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(40, 1));
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p46, 0);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb17:
    assume $i27 == 1;
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.1, $p29);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(220, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p0);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $i34 := devm_request_irq($p28, $i30, skd_isr, 0, $p32, $p33);
    call {:si_unique_call 491} {:cexpr "rc"} boogie_si_record_i32($i34);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i36 := $i34;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $p40 := skd_name($p0);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.1, $p41);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} vslice_dummy_var_111 := printk.ref.ref.i32(.str.280, $p40, $i42);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i20 := $i36;
    goto $bb16;

  $bb19:
    assume $i35 == 1;
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} pci_disable_msi($p2);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $p37 := skd_name($p0);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} vslice_dummy_var_109 := printk.ref.ref.i32(.str.279, $p37, $i34);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i39 := $i34;
    goto $bb21;

  $bb3:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb9;

  $bb10:
    assume $i9 == 1;
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(220, 1));
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(180, 1));
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.1, $p49);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} vslice_dummy_var_106 := snprintf.ref.i64.ref.ref.i32($p48, 30, .str.282, .str.27, $i50);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.1, $p53);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(220, 1));
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p0);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $i58 := devm_request_irq($p52, $i54, skd_isr, 128, $p56, $p57);
    call {:si_unique_call 485} {:cexpr "rc"} boogie_si_record_i32($i58);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i59 == 1);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $p64 := skd_name($p0);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} vslice_dummy_var_113 := printk.ref.ref.i32(.str.284, $p64, $i58);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i20 := $i58;
    goto $bb16;

  $bb24:
    assume $i59 == 1;
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $p60 := skd_name($p0);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.1, $p61);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} vslice_dummy_var_112 := printk.ref.ref.i32(.str.283, $p60, $i62);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb15_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(40, 1));
    goto corral_source_split_1861;
}



const skd_start_timer: ref;

axiom skd_start_timer == $sub.ref(0, 480712);

procedure skd_start_timer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.13, $M.1, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18;



implementation skd_start_timer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i1;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(752, 1));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} vslice_dummy_var_115 := reg_timer_2($p1);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(752, 1));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} vslice_dummy_var_116 := reg_timer_1($p3, skd_timer_tick, $i4);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(752, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.1, jiffies);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 250);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $i9 := ldv_mod_timer_21($p6, $i8);
    call {:si_unique_call 508} {:cexpr "rc"} boogie_si_record_i32($i9);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} vslice_dummy_var_117 := printk.ref.ref.i32(.str.320, .str.321, $i9);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 481744);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    return;
}



const skd_start_device: ref;

axiom skd_start_device == $sub.ref(0, 482776);

procedure skd_start_device($p0: ref);
  free requires assertsPassed;
  modifies $M.11, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $CurrAddr, $M.10, $M.20, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, assertsPassed;



implementation skd_start_device($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i24;
  var $i61: i24;
  var $i62: i24;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i24;
  var $i98: i24;
  var $i99: i24;
  var $p100: ref;
  var $p101: ref;
  var $i102: i8;
  var $i103: i64;
  var $i104: i64;
  var $i105: i64;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i24;
  var $i123: i24;
  var $i124: i24;
  var $p125: ref;
  var $p126: ref;
  var $i127: i8;
  var $i128: i64;
  var $i129: i64;
  var $i130: i64;
  var $i131: i1;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i32;
  var $i145: i32;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i24;
  var $i153: i24;
  var $i154: i24;
  var $p155: ref;
  var $p156: ref;
  var $i157: i8;
  var $i158: i64;
  var $i159: i64;
  var $i160: i64;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $i165: i32;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $i172: i24;
  var $i173: i24;
  var $i174: i24;
  var $p175: ref;
  var $p176: ref;
  var $i177: i8;
  var $i178: i64;
  var $i179: i64;
  var $i180: i64;
  var $i181: i1;
  var $p182: ref;
  var $p183: ref;
  var $i185: i32;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $i192: i24;
  var $i193: i24;
  var $i194: i24;
  var $p195: ref;
  var $p196: ref;
  var $i197: i8;
  var $i198: i64;
  var $i199: i64;
  var $i200: i64;
  var $i201: i1;
  var $p202: ref;
  var $p203: ref;
  var $i205: i32;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $i212: i24;
  var $i213: i24;
  var $i214: i24;
  var $p215: ref;
  var $p216: ref;
  var $i217: i8;
  var $i218: i64;
  var $i219: i64;
  var $i220: i64;
  var $i221: i1;
  var $p222: ref;
  var $p223: ref;
  var $i225: i32;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $i232: i24;
  var $i233: i24;
  var $i234: i24;
  var $p235: ref;
  var $p236: ref;
  var $i237: i8;
  var $i238: i64;
  var $i239: i64;
  var $i240: i64;
  var $i241: i1;
  var $p242: ref;
  var $p243: ref;
  var $p245: ref;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} ldv_spin_lock();
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} skd_reg_write32($p0, 2023, 1312);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $i10 := skd_reg_read32($p0, 1296);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 522} {:cexpr "sense"} boogie_si_record_i32($i10);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.27);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.322);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p13, .str.29);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p14, .str.323);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.7, $p16);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 3526);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p16, $i19);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p20, 0);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.8, $p21);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 524} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i10, 255);
    call {:si_unique_call 526} {:cexpr "state"} boogie_si_record_i32($i30);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(256, 1));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p31, $i30);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(896, 1));
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p32, 0);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p33, 3);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p34, 8);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} skd_enable_interrupts($p0);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(256, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.1, $p35);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i36, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i36, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i36, 255);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i36, 255);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $p141 := skd_name($p0);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(256, 1));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.1, $p142);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} vslice_dummy_var_127 := printk.ref.ref.i32(.str.331, $p141, $i143);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} $i145 := skd_reg_read32($p0, 1280);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 548} {:cexpr "state"} boogie_si_record_i32($i145);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p146, .str.27);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p147, .str.322);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p148, .str.29);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p149, .str.332);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p150);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i152 := $load.i24($M.7, $p151);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i153 := $and.i24($i152, $sub.i24(0, 262144));
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i154 := $or.i24($i153, 3612);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p151, $i154);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p155, 0);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.8, $p156);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i64($i157);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i159 := $and.i64($i158, 1);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $i160 := ldv__builtin_expect($i159, 0);
    call {:si_unique_call 550} {:cexpr "tmp___9"} boogie_si_record_i64($i160);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i160, 0);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $i165 := skd_reg_read32($p0, 1312);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 562} {:cexpr "state"} boogie_si_record_i32($i165);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p166, .str.27);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p167, .str.322);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p168, .str.29);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p169, .str.333);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p171 := $bitcast.ref.ref($p170);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i172 := $load.i24($M.7, $p171);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i173 := $and.i24($i172, $sub.i24(0, 262144));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i174 := $or.i24($i173, 3616);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p171, $i174);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p175, 0);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i177 := $load.i8($M.8, $p176);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i178 := $zext.i8.i64($i177);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i179 := $and.i64($i178, 1);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $i180 := ldv__builtin_expect($i179, 0);
    call {:si_unique_call 564} {:cexpr "tmp___10"} boogie_si_record_i64($i180);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i181 := $ne.i64($i180, 0);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $i185 := skd_reg_read32($p0, 1320);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 567} {:cexpr "state"} boogie_si_record_i32($i185);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p186, .str.27);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p187, .str.322);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p188, .str.29);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p189, .str.334);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p191 := $bitcast.ref.ref($p190);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i192 := $load.i24($M.7, $p191);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i193 := $and.i24($i192, $sub.i24(0, 262144));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i194 := $or.i24($i193, 3620);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p191, $i194);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p195, 0);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i197 := $load.i8($M.8, $p196);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i198 := $zext.i8.i64($i197);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i199 := $and.i64($i198, 1);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $i200 := ldv__builtin_expect($i199, 0);
    call {:si_unique_call 569} {:cexpr "tmp___11"} boogie_si_record_i64($i200);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i201 := $ne.i64($i200, 0);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i201} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i205 := skd_reg_read32($p0, 1352);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 572} {:cexpr "state"} boogie_si_record_i32($i205);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p206, .str.27);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p207, .str.322);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p208, .str.29);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p209, .str.335);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p211 := $bitcast.ref.ref($p210);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i212 := $load.i24($M.7, $p211);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i213 := $and.i24($i212, $sub.i24(0, 262144));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i214 := $or.i24($i213, 3624);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p211, $i214);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p215, 0);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i217 := $load.i8($M.8, $p216);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i218 := $zext.i8.i64($i217);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i219 := $and.i64($i218, 1);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $i220 := ldv__builtin_expect($i219, 0);
    call {:si_unique_call 574} {:cexpr "tmp___12"} boogie_si_record_i64($i220);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i221 := $ne.i64($i220, 0);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i221} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $i225 := skd_reg_read32($p0, 1416);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 577} {:cexpr "state"} boogie_si_record_i32($i225);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p226, .str.27);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p227, .str.322);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p228, .str.29);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p229, .str.336);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p231 := $bitcast.ref.ref($p230);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i232 := $load.i24($M.7, $p231);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i233 := $and.i24($i232, $sub.i24(0, 262144));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i234 := $or.i24($i233, 3628);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p231, $i234);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p235, 0);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i237 := $load.i8($M.8, $p236);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i238 := $zext.i8.i64($i237);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i239 := $and.i64($i238, 1);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $i240 := ldv__builtin_expect($i239, 0);
    call {:si_unique_call 579} {:cexpr "tmp___13"} boogie_si_record_i64($i240);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i241 := $ne.i64($i240, 0);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i241} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(72, 1));
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} spin_unlock_irqrestore($p245, $u0);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    return;

  $bb60:
    assume $i241 == 1;
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p243 := $bitcast.ref.ref($p242);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} vslice_dummy_var_132 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p9, .str.336, $p243, .str.322, 3628, $i225);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i221 == 1;
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p222);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} vslice_dummy_var_131 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p8, .str.335, $p223, .str.322, 3624, $i205);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i201 == 1;
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p203 := $bitcast.ref.ref($p202);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} vslice_dummy_var_130 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p7, .str.334, $p203, .str.322, 3620, $i185);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i181 == 1;
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p183 := $bitcast.ref.ref($p182);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} vslice_dummy_var_129 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p6, .str.333, $p183, .str.322, 3616, $i165);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    goto $bb53;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i161 == 1;
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} vslice_dummy_var_128 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p5, .str.332, $p163, .str.322, 3612, $i145);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    goto $bb50;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i41 == 1;
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} skd_drive_disappeared($p0);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p116, .str.27);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p117, .str.322);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p118, .str.29);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p119, .str.330);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i122 := $load.i24($M.7, $p121);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i123 := $and.i24($i122, $sub.i24(0, 262144));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i124 := $or.i24($i123, 3598);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p121, $i124);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p125, 0);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.8, $p126);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i64($i127);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i129 := $and.i64($i128, 1);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $i130 := ldv__builtin_expect($i129, 0);
    call {:si_unique_call 532} {:cexpr "tmp___7"} boogie_si_record_i64($i130);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i131 := $ne.i64($i130, 0);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(152, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.1, $p137);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} blk_start_queue($p138);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(168, 1));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p139, $sub.i32(0, 1));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(664, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} __wake_up($p140, 1, 1, $0.ref);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb44:
    assume $i131 == 1;
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p134);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} vslice_dummy_var_126 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref($p4, .str.330, $p133, .str.322, 3598, $p135);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb11:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i36, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb15;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p54, .str.27);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p55, .str.322);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p56, .str.29);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p57, .str.325);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i60 := $load.i24($M.7, $p59);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i61 := $and.i24($i60, $sub.i24(0, 262144));
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i62 := $or.i24($i61, 3544);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p59, $i62);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p63, 0);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.8, $p64);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i64($i65);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i67 := $and.i64($i66, 1);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $i68 := ldv__builtin_expect($i67, 0);
    call {:si_unique_call 534} {:cexpr "tmp___1"} boogie_si_record_i64($i68);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p75, 17);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p76, 90);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb38:
    assume $i69 == 1;
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} vslice_dummy_var_124 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref($p2, .str.325, $p71, .str.322, 3544, $p73);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb9:
    assume $i39 == 1;
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $p81 := skd_name($p0);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} vslice_dummy_var_119 := printk.ref.ref(.str.327, $p81);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p83, 14);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p84, 60);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb7:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i36, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i43 == 1);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $p77 := skd_name($p0);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} vslice_dummy_var_120 := printk.ref.ref(.str.326, $p77);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p79, 15);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p80, 60);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb18:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i36, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb15;

  $bb20:
    assume $i44 == 1;
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $p89 := skd_name($p0);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} vslice_dummy_var_121 := printk.ref.ref(.str.329, $p89);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb5:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i36, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i36, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb26;

  $bb26:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i36, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i36, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb15;

  $bb29:
    assume $i48 == 1;
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} skd_drive_fault($p0);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p91, .str.27);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p92, .str.322);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p93, .str.29);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p94, .str.211);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i97 := $load.i24($M.7, $p96);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i98 := $and.i24($i97, $sub.i24(0, 262144));
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i99 := $or.i24($i98, 3586);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p96, $i99);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p100, 0);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.8, $p101);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i64($i102);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i104 := $and.i64($i103, 1);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $i105 := ldv__builtin_expect($i104, 0);
    call {:si_unique_call 544} {:cexpr "tmp___6"} boogie_si_record_i64($i105);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, 0);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(152, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.1, $p112);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} blk_start_queue($p113);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(168, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p114, $sub.i32(0, 1));
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(664, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} __wake_up($p115, 1, 1, $0.ref);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb41:
    assume $i106 == 1;
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} vslice_dummy_var_125 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref($p3, .str.211, $p108, .str.322, 3586, $p110);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb27:
    assume $i47 == 1;
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $p85 := skd_name($p0);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} vslice_dummy_var_122 := printk.ref.ref(.str.328, $p85);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p87, 2);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p88, 60);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} skd_soft_reset($p0);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i36, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i36, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb15;

  $bb33:
    assume $i50 == 1;
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb31:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i36, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb15;

  $bb35:
    assume $i51 == 1;
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $p52 := skd_name($p0);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} vslice_dummy_var_123 := printk.ref.ref(.str.324, $p52);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} vslice_dummy_var_118 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p1, .str.323, $p28, .str.322, 3526, $i10);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const skd_release_irq: ref;

axiom skd_release_irq == $sub.ref(0, 483808);

procedure skd_release_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation skd_release_irq($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var vslice_dummy_var_133: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(40, 1));
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $p25 := skd_name($p0);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(40, 1));
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p26);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} vslice_dummy_var_133 := printk.ref.ref.i32(.str.347, $p25, $i27);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} skd_release_msix($p0);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} devm_free_irq($p9, $i13, $p14);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} pci_disable_msi($p16);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, $p22);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p0);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} devm_free_irq($p19, $i23, $p24);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const iounmap: ref;

axiom iounmap == $sub.ref(0, 484840);

procedure iounmap($p0: ref);
  free requires assertsPassed;



implementation iounmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    return;
}



const pci_disable_pcie_error_reporting: ref;

axiom pci_disable_pcie_error_reporting == $sub.ref(0, 485872);

procedure pci_disable_pcie_error_reporting($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_disable_pcie_error_reporting($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 1} true;
    call {:si_unique_call 588} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 589} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_release_regions: ref;

axiom pci_release_regions == $sub.ref(0, 486904);

procedure pci_release_regions($p0: ref);
  free requires assertsPassed;



implementation pci_release_regions($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    return;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 487936);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    return;
}



const skd_release_msix: ref;

axiom skd_release_msix == $sub.ref(0, 488968);

procedure skd_release_msix($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation skd_release_msix($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p9: ref;
  var $i10: i32;
  var $p32: ref;
  var $p8: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(48, 1));
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $p36 := $p0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 1008)), $mul.ref(44, 1));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.1, $p37);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p36, $mul.ref(0, 1008)), $mul.ref(44, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p42, 0);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p36, $mul.ref(0, 1008)), $mul.ref(48, 1));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p43, $0.ref);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    return;

  $bb15:
    assume $i39 == 1;
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p36, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} pci_disable_msix($p41);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(44, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i7 := $ult.i32(0, $i6);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p8 := $p0;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p8, $mul.ref(0, 1008)), $mul.ref(48, 1));
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} kfree($p35);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p36 := $p8;
    goto $bb14;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p9, $i10 := $p0, 0;
    goto $bb6;

  $bb6:
    call $p11, $p12, $i13, $p15, $p16, $p17, $i18, $i19, $p20, $p21, $p22, $p23, $i24, $p25, $p26, $p27, $i28, $p29, $i30, $i31, $p9, $i10, $p32 := skd_release_msix_loop_$bb6($p11, $p12, $i13, $p15, $p16, $p17, $i18, $i19, $p20, $p21, $p22, $p23, $i24, $p25, $p26, $p27, $i28, $p29, $i30, $i31, $p9, $i10, $p32);
    goto $bb6_last;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref(0, 1008)), $mul.ref(48, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i10);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p12, $mul.ref($i13, 56)), $mul.ref(16, 1));
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p12, $mul.ref($i13, 56)), $mul.ref(0, 1));
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.1, $p17);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i10, 1);
    call {:si_unique_call 591} {:cexpr "i"} boogie_si_record_i32($i28);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p16, $mul.ref(0, 1008)), $mul.ref(44, 1));
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.1, $p29);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i31 := $ult.i32($i28, $i30);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p32 := $p16;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p8 := $p32;
    goto $bb5;

  $bb11:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $p9, $i10 := $p16, $i28;
    goto $bb11_dummy;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p16, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p12, $mul.ref($i13, 56)), $mul.ref(4, 1));
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p12, $mul.ref($i13, 56)), $mul.ref(16, 1));
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} devm_free_irq($p22, $i24, $p27);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2373;
}



const devm_free_irq: ref;

axiom devm_free_irq == $sub.ref(0, 490000);

procedure devm_free_irq($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation devm_free_irq($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} {:cexpr "devm_free_irq:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    return;
}



const pci_disable_msi: ref;

axiom pci_disable_msi == $sub.ref(0, 491032);

procedure pci_disable_msi($p0: ref);
  free requires assertsPassed;



implementation pci_disable_msi($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 492064);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} free_($p0);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    return;
}



const pci_disable_msix: ref;

axiom pci_disable_msix == $sub.ref(0, 493096);

procedure pci_disable_msix($p0: ref);
  free requires assertsPassed;



implementation pci_disable_msix($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 494128);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 596} $free($p0);
    return;
}



const skd_enable_interrupts: ref;

axiom skd_enable_interrupts == $sub.ref(0, 495160);

procedure skd_enable_interrupts($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.1, $M.10, $M.11, $M.20, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, assertsPassed;



implementation skd_enable_interrupts($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i24;
  var $i33: i24;
  var $i34: i24;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i3 := $xor.i32(7, $sub.i32(0, 1));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} skd_reg_write32($p0, $i3, 1320);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p4, .str.27);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p5, .str.337);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p6, .str.29);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p7, .str.338);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.7, $p9);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 3486);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p9, $i12);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p13, 0);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.8, $p14);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 601} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $i24 := skd_reg_read32($p0, 1280);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 604} {:cexpr "val"} boogie_si_record_i32($i24);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, 128);
    call {:si_unique_call 605} {:cexpr "val"} boogie_si_record_i32($i25);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p26, .str.27);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p27, .str.337);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p28, .str.29);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p29, .str.75);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i32 := $load.i24($M.7, $p31);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i33 := $and.i24($i32, $sub.i24(0, 262144));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i34 := $or.i24($i33, 3491);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p31, $i34);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p35, 0);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.8, $p36);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i64($i37);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i38, 1);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 607} {:cexpr "tmp___0"} boogie_si_record_i64($i40);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} skd_reg_write32($p0, $i25, 1280);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i41 == 1;
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} vslice_dummy_var_135 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p2, .str.75, $p43, .str.337, 3491, $i25);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i22 := $xor.i32(7, $sub.i32(0, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} vslice_dummy_var_134 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p1, .str.338, $p21, .str.337, 3486, $i22);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const skd_soft_reset: ref;

axiom skd_soft_reset == $sub.ref(0, 496192);

procedure skd_soft_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.1, $M.10, $M.11, $M.20, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, assertsPassed;



implementation skd_soft_reset($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var vslice_dummy_var_136: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $i2 := skd_reg_read32($p0, 1280);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    call {:si_unique_call 612} {:cexpr "val"} boogie_si_record_i32($i2);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 2);
    call {:si_unique_call 613} {:cexpr "val"} boogie_si_record_i32($i3);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p4, .str.27);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p5, .str.74);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p6, .str.29);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p7, .str.75);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.7, $p9);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 3508);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p9, $i12);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p13, 0);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.8, $p14);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 615} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} skd_reg_write32($p0, $i3, 1280);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} vslice_dummy_var_136 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p1, .str.75, $p21, .str.74, 3508, $i3);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const skd_drive_fault: ref;

axiom skd_drive_fault == $sub.ref(0, 497224);

procedure skd_drive_fault($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation skd_drive_fault($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var vslice_dummy_var_137: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p1, 11);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $p2 := skd_name($p0);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} vslice_dummy_var_137 := printk.ref.ref(.str.88, $p2);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    return;
}



const blk_start_queue: ref;

axiom blk_start_queue == $sub.ref(0, 498256);

procedure blk_start_queue($p0: ref);
  free requires assertsPassed;



implementation blk_start_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 499288);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 621} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    return;
}



const skd_drive_disappeared: ref;

axiom skd_drive_disappeared == $sub.ref(0, 500320);

procedure skd_drive_disappeared($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation skd_drive_disappeared($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var vslice_dummy_var_138: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p1, 12);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $p2 := skd_name($p0);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} vslice_dummy_var_138 := printk.ref.ref(.str.89, $p2);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    return;
}



const reg_timer_2: ref;

axiom reg_timer_2 == $sub.ref(0, 501352);

procedure reg_timer_2($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20;



implementation reg_timer_2($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $M.20 := $p0;
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} {:cexpr "ldv_timer_state_2"} boogie_si_record_i32(1);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const skd_timer_tick: ref;

axiom skd_timer_tick == $sub.ref(0, 502384);

procedure skd_timer_tick($i0: i64);
  free requires assertsPassed;
  modifies $M.11, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, $CurrAddr, $M.10, $M.20, assertsPassed;



implementation skd_timer_tick($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i24;
  var $i33: i24;
  var $i34: i24;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $p51: ref;
  var $i52: i64;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $i57: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $p68: ref;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 626} {:cexpr "skd_timer_tick:arg:arg"} boogie_si_record_i64($i0);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i0);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 11);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} ldv_spin_lock();
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $i6 := skd_reg_read32($p2, 1296);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    call {:si_unique_call 629} {:cexpr "state"} boogie_si_record_i32($i6);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 255);
    call {:si_unique_call 630} {:cexpr "state"} boogie_si_record_i32($i7);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 1008)), $mul.ref(256, 1));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, $i7);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 4);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 1008)), $mul.ref(300, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 1);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 1008)), $mul.ref(300, 1));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p17, $i16);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 1008)), $mul.ref(300, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p18);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 3);
    call {:si_unique_call 635} {:cexpr "timo_slot"} boogie_si_record_i32($i20);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1008)), $mul.ref(284, 1)), $mul.ref($i21, 4));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p26, .str.27);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p27, .str.28);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p28, .str.29);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p29, .str.30);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i32 := $load.i24($M.7, $p31);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i33 := $and.i24($i32, $sub.i24(0, 262144));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i34 := $or.i24($i33, 1105);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p31, $i34);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p35, 0);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.8, $p36);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i64($i37);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i38, 1);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 637} {:cexpr "tmp"} boogie_si_record_i64($i40);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $p51 := skd_name($p2);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i52 := $zext.i32.i64($i20);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1008)), $mul.ref(284, 1)), $mul.ref($i52, 4));
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.1, $p54);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 1008)), $mul.ref(260, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.1, $p56);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} vslice_dummy_var_141 := printk.ref.ref.i32.i32(.str.31, $p51, $i55, $i57);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p59, 6);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p60, 7);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 1008)), $mul.ref(920, 1));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p61, $i20);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 1008)), $mul.ref(152, 1));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.1, $p62);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} blk_stop_queue($p63);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 1008)), $mul.ref(752, 1));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.1, jiffies);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i66 := $add.i64($i65, 250);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} vslice_dummy_var_139 := ldv_mod_timer_20($p64, $i66);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 1008)), $mul.ref(72, 1));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} spin_unlock_irqrestore($p68, $u0);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb15:
    assume $i41 == 1;
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i44 := $zext.i32.i64($i20);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1008)), $mul.ref(284, 1)), $mul.ref($i44, 4));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.1, $p46);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 1008)), $mul.ref(260, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.1, $p48);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} vslice_dummy_var_140 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32($p1, .str.30, $p43, .str.28, 1105, $i47, $i49);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} skd_timer_tick_not_online($p2);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} skd_isr_fwstate($p2);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const reg_timer_1: ref;

axiom reg_timer_1 == $sub.ref(0, 503416);

procedure reg_timer_1($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.1, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18;



implementation reg_timer_1($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} {:cexpr "reg_timer_1:arg:data"} boogie_si_record_i64($i2);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(skd_timer_tick));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} activate_suitable_timer_1($p0, $i2);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mod_timer_21: ref;

axiom ldv_mod_timer_21 == $sub.ref(0, 504448);

procedure ldv_mod_timer_21($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.1, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18;



implementation ldv_mod_timer_21($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} {:cexpr "ldv_mod_timer_21:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 646} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} activate_pending_timer_1($p0, $i1, 1);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mod_timer: ref;

axiom mod_timer == $sub.ref(0, 505480);

procedure mod_timer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mod_timer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 648} {:cexpr "mod_timer:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 1} true;
    call {:si_unique_call 649} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 650} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const activate_pending_timer_1: ref;

axiom activate_pending_timer_1 == $sub.ref(0, 506512);

procedure activate_pending_timer_1($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.13, $M.1, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18;



implementation activate_pending_timer_1($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} {:cexpr "activate_pending_timer_1:arg:data"} boogie_si_record_i64($i1);
    call {:si_unique_call 652} {:cexpr "activate_pending_timer_1:arg:pending_flag"} boogie_si_record_i32($i2);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p3 := $M.13;
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i4, $i5);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $M.15;
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p21 := $M.17;
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p30 := $M.19;
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i31, $i32);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} activate_suitable_timer_1($p0, $i1);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i33 == 1;
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i34 := $M.18;
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i35 == 1);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i2, 0);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $M.19 := $p0;
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p37 := $M.19;
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p38, $i1);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 656} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb32;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i25 := $M.16;
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i26 == 1);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i2, 0);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $M.17 := $p0;
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p28 := $M.17;
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p29, $i1);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 655} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb23;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i16 := $M.14;
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i17 == 1);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i2, 0);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.15 := $p0;
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p19 := $M.15;
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p20, $i1);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 654} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb14;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i7 := $M.12;
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 2);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.13 := $p0;
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p10 := $M.13;
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p11, $i1);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 653} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;
}



const activate_suitable_timer_1: ref;

axiom activate_suitable_timer_1 == $sub.ref(0, 507544);

procedure activate_suitable_timer_1($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.13, $M.1, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18;



implementation activate_suitable_timer_1($p0: ref, $i1: i64)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} {:cexpr "activate_suitable_timer_1:arg:data"} boogie_si_record_i64($i1);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i2 := $M.12;
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i4 := $M.12;
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $M.14;
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i9 == 1);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i10 := $M.14;
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $M.16;
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i15 == 1);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i16 := $M.16;
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := $M.18;
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i21 == 1);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i22 := $M.18;
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.19 := $p0;
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p24 := $M.19;
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p25, $i1);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 662} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.17 := $p0;
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p18 := $M.17;
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p19, $i1);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 661} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.15 := $p0;
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p12 := $M.15;
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p13, $i1);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 660} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $M.13 := $p0;
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p6 := $M.13;
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p7, $i1);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 659} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const skd_isr_fwstate: ref;

axiom skd_isr_fwstate == $sub.ref(0, 508576);

procedure skd_isr_fwstate($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $CurrAddr, $M.10, $M.11, $M.20, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, assertsPassed;



implementation skd_isr_fwstate($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $i72: i32;
  var $p74: ref;
  var $p75: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i24;
  var $i97: i24;
  var $i98: i24;
  var $p99: ref;
  var $p100: ref;
  var $i101: i8;
  var $i102: i64;
  var $i103: i64;
  var $i104: i64;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    call {:si_unique_call 664} {:cexpr "prev_driver_state"} boogie_si_record_i32($i3);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $i4 := skd_reg_read32($p0, 1296);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    call {:si_unique_call 666} {:cexpr "sense"} boogie_si_record_i32($i4);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 255);
    call {:si_unique_call 667} {:cexpr "state"} boogie_si_record_i32($i5);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $p6 := skd_drive_state_to_str($i5);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(256, 1));
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $p9 := skd_drive_state_to_str($i8);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $p10 := skd_name($p0);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(256, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} vslice_dummy_var_142 := printk.ref.ref.ref.i32.ref.i32(.str.34, $p10, $p9, $i12, $p6, $i5);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(256, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p14, $i5);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(256, 1));
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i16, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i16, 254);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i16, 255);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i16, 255);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.1, $p119);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $p121 := skd_skdev_state_to_str($i120);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $p122 := skd_skdev_state_to_str($i3);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $p123 := skd_name($p0);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.1, $p124);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} vslice_dummy_var_145 := printk.ref.ref.ref.i32.ref.i32(.str.39, $p123, $p122, $i3, $p121, $i125);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $p115 := skd_name($p0);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} vslice_dummy_var_143 := printk.ref.ref.i32.i32(.str.38, $p115, $i5, $i4);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} skd_drive_disappeared($p0);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} skd_recover_requests($p0, 0);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(152, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.1, $p117);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} blk_start_queue($p118);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb6:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i16, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i16, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb13;

  $bb16:
    assume $i23 == 1;
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p90, .str.27);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p91, .str.36);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p92, .str.29);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p93, .str.37);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i96 := $load.i24($M.7, $p95);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i97 := $and.i24($i96, $sub.i24(0, 262144));
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i98 := $or.i24($i97, 3243);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p95, $i98);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p99, 0);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.8, $p100);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i64($i101);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i103 := $and.i64($i102, 1);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $i104 := ldv__builtin_expect($i103, 0);
    call {:si_unique_call 678} {:cexpr "tmp___3"} boogie_si_record_i64($i104);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p111, 17);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p112, 90);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb66:
    assume $i105 == 1;
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} vslice_dummy_var_147 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref($p1, .str.37, $p107, .str.36, 3243, $p109);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p81, 14);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p82, 1200);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb4:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i16, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i16, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i25 == 1);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p77, 15);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p78, 3);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(152, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.1, $p79);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} blk_start_queue($p80);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb21:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i16, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb13;

  $bb23:
    assume $i26 == 1;
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.1, $p84);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i85, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i85, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p89, 8);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb56:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i85, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb61;

  $bb62:
    assume $i88 == 1;
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb2:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i16, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i16, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i16, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i29 == 1);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume $i29 == 1;
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} skd_drive_fault($p0);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} skd_recover_requests($p0, 0);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(152, 1));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.1, $p113);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} blk_start_queue($p114);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb27:
    assume $i28 == 1;
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p74, 2);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p75, 1200);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} vslice_dummy_var_144 := skd_quiesce_dev($p0);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb25:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i16, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i16, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i31 == 1);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i46 := $M.22;
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(264, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p47, $i46);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(264, 1));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.1, $p48);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(272, 1));
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.1, $p50);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i52 := $ugt.i32($i49, $i51);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(264, 1));
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.1, $p56);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i58 := $mul.i32($i57, 2);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i59 := $udiv.i32($i58, 3);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i59, 1);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(268, 1));
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p61, $i60);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(268, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.1, $p62);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 0);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $p66 := skd_name($p0);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(264, 1));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.1, $p67);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(272, 1));
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.1, $p69);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(268, 1));
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.1, $p71);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} vslice_dummy_var_146 := printk.ref.ref.i32.i32.i32(.str.35, $p66, $i68, $i70, $i72);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} skd_refresh_device_data($p0);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb52:
    assume $i64 == 1;
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(268, 1));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p65, 1);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume $i52 == 1;
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(272, 1));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.1, $p53);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(264, 1));
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p55, $i54);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb33:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i16, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb13;

  $bb35:
    assume $i32 == 1;
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 13);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.1, $p37);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 8);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.1, $p40);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 17);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} skd_reg_write32($p0, 16777216, 1344);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(896, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p45, 16777216);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb46:
    assume $i42 == 1;
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p43, 8);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p44, 3);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} skd_soft_reset($p0);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    goto $bb41;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i39 == 1;
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} skd_recover_requests($p0, 0);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb39:
    assume $i36 == 1;
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} skd_disable_interrupts($p0);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    goto $bb41;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i16, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb13;

  $bb37:
    assume $i33 == 1;
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p83, 1);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    goto $bb41;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const skd_timer_tick_not_online: ref;

axiom skd_timer_tick_not_online == $sub.ref(0, 509608);

procedure skd_timer_tick_not_online($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $CurrAddr, $M.10, $M.11, $M.20, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, assertsPassed;



implementation skd_timer_tick_not_online($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i24;
  var $i35: i24;
  var $i36: i24;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i24;
  var $i65: i24;
  var $i66: i24;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i64;
  var $i71: i64;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $i79: i32;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i24;
  var $i95: i24;
  var $i96: i24;
  var $p97: ref;
  var $p98: ref;
  var $i99: i8;
  var $i100: i64;
  var $i101: i64;
  var $i102: i64;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $p108: ref;
  var $i109: i32;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i24;
  var $i134: i24;
  var $i135: i24;
  var $p136: ref;
  var $p137: ref;
  var $i138: i8;
  var $i139: i64;
  var $i140: i64;
  var $i141: i64;
  var $i142: i1;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $p147: ref;
  var $i148: i32;
  var $p149: ref;
  var $i150: i32;
  var $p151: ref;
  var $i152: i32;
  var $i153: i64;
  var $p155: ref;
  var $i156: i32;
  var $p158: ref;
  var $i159: i32;
  var $i160: i64;
  var $p162: ref;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i24;
  var $i172: i24;
  var $i173: i24;
  var $p174: ref;
  var $p175: ref;
  var $i176: i8;
  var $i177: i64;
  var $i178: i64;
  var $i179: i64;
  var $i180: i1;
  var $p181: ref;
  var $p182: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $i188: i32;
  var $i189: i1;
  var $p190: ref;
  var $i191: i32;
  var $i192: i32;
  var $p193: ref;
  var $p194: ref;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $i198: i32;
  var $i199: i32;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $i204: i32;
  var $p206: ref;
  var $i207: i32;
  var $i208: i1;
  var $p209: ref;
  var $i210: i32;
  var $i211: i1;
  var $p212: ref;
  var $i213: i32;
  var $i214: i1;
  var $p215: ref;
  var $p216: ref;
  var $i217: i32;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i7, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i7, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i7, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i7, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i7, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.1, $p111);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p118, 11);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $p119 := skd_name($p0);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(256, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.1, $p120);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} vslice_dummy_var_151 := printk.ref.ref.i32(.str.94, $p119, $i121);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(152, 1));
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.1, $p123);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} blk_start_queue($p124);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(168, 1));
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p125, $sub.i32(0, 1));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(664, 1));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} __wake_up($p126, 1, 1, $0.ref);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb69:
    assume $i113 == 1;
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.1, $p114);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i116 := $sub.i32($i115, 1);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p117, $i116);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p58, .str.27);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p59, .str.90);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p60, .str.29);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p61, .str.92);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i64 := $load.i24($M.7, $p63);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i65 := $and.i24($i64, $sub.i24(0, 262144));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i66 := $or.i24($i65, 1146);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p63, $i66);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p67, 0);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.8, $p68);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i64($i69);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i71 := $and.i64($i70, 1);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $i72 := ldv__builtin_expect($i71, 0);
    call {:si_unique_call 702} {:cexpr "tmp___0"} boogie_si_record_i64($i72);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.1, $p81);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p88, .str.27);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p89, .str.90);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p90, .str.29);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p91, .str.93);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i94 := $load.i24($M.7, $p93);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i95 := $and.i24($i94, $sub.i24(0, 262144));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i96 := $or.i24($i95, 1153);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p93, $i96);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p97, 0);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.8, $p98);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i64($i99);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i101 := $and.i64($i100, 1);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $i102 := ldv__builtin_expect($i101, 0);
    call {:si_unique_call 711} {:cexpr "tmp___1"} boogie_si_record_i64($i102);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i103 := $ne.i64($i102, 0);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} skd_restart_device($p0);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb66:
    assume $i103 == 1;
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.1, $p106);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.1, $p108);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} vslice_dummy_var_150 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32($p3, .str.93, $p105, .str.90, 1153, $i107, $i109);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb63:
    assume $i83 == 1;
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.1, $p84);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i86 := $sub.i32($i85, 1);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p87, $i86);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb60:
    assume $i73 == 1;
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.1, $p76);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.1, $p78);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} vslice_dummy_var_149 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32($p2, .str.92, $p75, .str.90, 1146, $i77, $i79);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb6:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i7, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i14 == 1);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p28, .str.27);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p29, .str.90);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p30, .str.29);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p31, .str.91);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i34 := $load.i24($M.7, $p33);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i35 := $and.i24($i34, $sub.i24(0, 262144));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i36 := $or.i24($i35, 1130);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p33, $i36);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p37, 0);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.8, $p38);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i64($i39);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i41 := $and.i64($i40, 1);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $i42 := ldv__builtin_expect($i41, 0);
    call {:si_unique_call 704} {:cexpr "tmp"} boogie_si_record_i64($i42);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.1, $p51);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} skd_recover_requests($p0, 0);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb56:
    assume $i53 == 1;
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.1, $p54);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32($i55, 1);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p57, $i56);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume $i43 == 1;
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(256, 1));
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.1, $p46);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.1, $p48);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} vslice_dummy_var_148 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32($p1, .str.91, $p45, .str.90, 1130, $i47, $i49);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb18;

  $bb4:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i7, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i7, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i7, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb25, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb16;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb26;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb23;

  $bb20:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i7, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb28:
    assume $i18 == 1;
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i7, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i7, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i7, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb37;

  $bb37:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i7, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i22 == 1);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i195 := $load.i32($M.1, $p194);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i196 := $ne.i32($i195, 0);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i196} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p201, 11);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $p202 := skd_name($p0);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(256, 1));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i204 := $load.i32($M.1, $p203);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} vslice_dummy_var_154 := printk.ref.ref.i32(.str.97, $p202, $i204);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(256, 1));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i207 := $load.i32($M.1, $p206);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i207, 8);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i208} true;
    goto $bb87, $bb89;

  $bb89:
    assume !($i208 == 1);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(256, 1));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i210 := $load.i32($M.1, $p209);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 5);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    assume {:branchcond $i211} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i211 == 1);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(256, 1));
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.1, $p212);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i214 := $eq.i32($i213, 255);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    assume {:branchcond $i214} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i214 == 1);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $p215 := skd_name($p0);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(256, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i217 := $load.i32($M.1, $p216);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} vslice_dummy_var_155 := printk.ref.ref.i32(.str.98, $p215, $i217);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p220 := $load.ref($M.1, $p219);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} pci_disable_device($p220);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} skd_disable_interrupts($p0);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} skd_recover_requests($p0, 0);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(152, 1));
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.1, $p221);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} blk_start_queue($p222);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(168, 1));
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p223, $sub.i32(0, 1));
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(664, 1));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} __wake_up($p224, 1, 1, $0.ref);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb92:
    assume {:verifier.code 0} true;
    assume $i214 == 1;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} skd_recover_requests($p0, 0);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb90:
    assume {:verifier.code 0} true;
    assume $i211 == 1;
    goto $bb88;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i208 == 1;
    goto $bb88;

  $bb84:
    assume $i196 == 1;
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i198 := $load.i32($M.1, $p197);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i199 := $sub.i32($i198, 1);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p200, $i199);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb38:
    assume $i22 == 1;
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p127, .str.27);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p128, .str.90);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p129, .str.29);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p130, .str.95);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p131);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i133 := $load.i24($M.7, $p132);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i134 := $and.i24($i133, $sub.i24(0, 262144));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i135 := $or.i24($i134, 1192);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p132, $i135);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p136, 0);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.8, $p137);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i64($i138);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i140 := $and.i64($i139, 1);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $i141 := ldv__builtin_expect($i140, 0);
    call {:si_unique_call 706} {:cexpr "tmp___3"} boogie_si_record_i64($i141);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i142 := $ne.i64($i141, 0);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(920, 1));
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.1, $p158);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i160 := $zext.i32.i64($i159);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(284, 1)), $mul.ref($i160, 4));
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.1, $p162);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i163, 0);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i188 := $load.i32($M.1, $p187);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i189 := $ne.i32($i188, 0);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} skd_restart_device($p0);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb81:
    assume $i189 == 1;
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.1, $p190);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i192 := $sub.i32($i191, 1);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p193, $i192);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb75:
    assume $i164 == 1;
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p165, .str.27);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p166, .str.90);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p167, .str.29);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p168, .str.96);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p169);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i171 := $load.i24($M.7, $p170);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i172 := $and.i24($i171, $sub.i24(0, 262144));
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i173 := $or.i24($i172, 1196);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p170, $i173);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p174, 0);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i176 := $load.i8($M.8, $p175);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i177 := $zext.i8.i64($i176);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i178 := $and.i64($i177, 1);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $i179 := ldv__builtin_expect($i178, 0);
    call {:si_unique_call 720} {:cexpr "tmp___4"} boogie_si_record_i64($i179);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i180 := $ne.i64($i179, 0);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p184, 4);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(152, 1));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.1, $p185);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} blk_start_queue($p186);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb77:
    assume $i180 == 1;
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p182 := $bitcast.ref.ref($p181);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} vslice_dummy_var_153 := __dynamic_pr_debug.ref.ref.ref.ref.i32($p5, .str.96, $p182, .str.90, 1196);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb72:
    assume $i142 == 1;
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(920, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.1, $p145);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.1, $p147);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(260, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.1, $p149);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(920, 1));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.1, $p151);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i153 := $zext.i32.i64($i152);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(284, 1)), $mul.ref($i153, 4));
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i156 := $load.i32($M.1, $p155);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} vslice_dummy_var_152 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32.i32.i32($p4, .str.95, $p144, .str.90, 1192, $i146, $i148, $i150, $i156);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb33:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i7, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i23 == 1);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb40:
    assume $i23 == 1;
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb31:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i7, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i7, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb46;

  $bb44:
    assume $i25 == 1;
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb42:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i26 == 1);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb47:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i7, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb16;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb50;
}



const blk_stop_queue: ref;

axiom blk_stop_queue == $sub.ref(0, 510640);

procedure blk_stop_queue($p0: ref);
  free requires assertsPassed;



implementation blk_stop_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mod_timer_20: ref;

axiom ldv_mod_timer_20 == $sub.ref(0, 511672);

procedure ldv_mod_timer_20($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.1, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18;



implementation ldv_mod_timer_20($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} {:cexpr "ldv_mod_timer_20:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 736} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} activate_pending_timer_1($p0, $i1, 1);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const skd_recover_requests: ref;

axiom skd_recover_requests == $sub.ref(0, 512704);

procedure skd_recover_requests($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation skd_recover_requests($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i16;
  var $i60: i32;
  var $i61: i32;
  var $i62: i16;
  var $p63: ref;
  var $i64: i1;
  var $i65: i64;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i7: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $i91: i64;
  var $i92: i64;
  var $i93: i1;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $p99: ref;
  var $i100: i1;
  var $i101: i64;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $i78: i32;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $p118: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $i124: i8;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i24;
  var $i134: i24;
  var $i135: i24;
  var $p136: ref;
  var $p137: ref;
  var $i138: i8;
  var $i139: i64;
  var $i140: i64;
  var $i141: i64;
  var $i142: i1;
  var $p143: ref;
  var $p144: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i24;
  var $i153: i24;
  var $i154: i24;
  var $p155: ref;
  var $p156: ref;
  var $i157: i8;
  var $i158: i64;
  var $i159: i64;
  var $i160: i64;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $p166: ref;
  var $i167: i32;
  var $i168: i32;
  var $i169: i1;
  var $i114: i32;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p174: ref;
  var $p175: ref;
  var $p177: ref;
  var $p179: ref;
  var $p181: ref;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 740} {:cexpr "skd_recover_requests:arg:requeue"} boogie_si_record_i32($i1);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(280, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i6 := $ult.i32(0, $i5);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(328, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.1, $p72);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(320, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p74, $p73);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(276, 1));
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.1, $p75);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i77 := $ult.i32(0, $i76);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(312, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.1, $p108);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(304, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p110, $p109);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(888, 1));
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.1, $p111);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i113 := $sgt.i32($i112, 0);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i113 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(344, 1));
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.1, $p170);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(336, 1));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p172, $p171);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(284, 1)), $mul.ref(0, 4));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p174, 0);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(284, 1)), $mul.ref(1, 4));
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p177, 0);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(284, 1)), $mul.ref(2, 4));
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p179, 0);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(284, 1)), $mul.ref(3, 4));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p181, 0);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(260, 1));
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p175, 0);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    return;

  $bb47:
    assume $i113 == 1;
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i114 := 0;
    goto $bb50;

  $bb50:
    call $p115, $p116, $i117, $p118, $p120, $i121, $i122, $p123, $i124, $i125, $i126, $p127, $p128, $p129, $p130, $p131, $p132, $i133, $i134, $i135, $p136, $p137, $i138, $i139, $i140, $i141, $i142, $p143, $p144, $p146, $p147, $p148, $p149, $p150, $p151, $i152, $i153, $i154, $p155, $p156, $i157, $i158, $i159, $i160, $i161, $p162, $p163, $p166, $i167, $i168, $i169, $i114, vslice_dummy_var_159, vslice_dummy_var_160 := skd_recover_requests_loop_$bb50($p0, $p2, $p3, $p111, $p115, $p116, $i117, $p118, $p120, $i121, $i122, $p123, $i124, $i125, $i126, $p127, $p128, $p129, $p130, $p131, $p132, $i133, $i134, $i135, $p136, $p137, $i138, $i139, $i140, $i141, $i142, $p143, $p144, $p146, $p147, $p148, $p149, $p150, $p151, $i152, $i153, $i154, $p155, $p156, $i157, $i158, $i159, $i160, $i161, $p162, $p163, $p166, $i167, $i168, $i169, $i114, vslice_dummy_var_159, vslice_dummy_var_160);
    goto $bb50_last;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(344, 1));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.1, $p115);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i117 := $sext.i32.i64($i114);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p116, $mul.ref($i117, 168));
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p116, $mul.ref($i117, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.1, $p120);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 2);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i167 := $add.i32($i114, 1);
    call {:si_unique_call 765} {:cexpr "i"} boogie_si_record_i32($i167);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i168 := $load.i32($M.1, $p111);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i169 := $sgt.i32($i168, $i167);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i169 == 1);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb64:
    assume $i169 == 1;
    assume {:verifier.code 0} true;
    $i114 := $i167;
    goto $bb64_dummy;

  $bb52:
    assume $i122 == 1;
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p116, $mul.ref($i117, 168)), $mul.ref(128, 1));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.1, $p123);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i32($i124);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i126 == 1);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p146, .str.27);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p147, .str.45);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p148, .str.29);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p149, .str.50);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p150);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i152 := $load.i24($M.7, $p151);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i153 := $and.i24($i152, $sub.i24(0, 262144));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i154 := $or.i24($i153, 3348);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p151, $i154);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p155, 0);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.8, $p156);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i64($i157);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i159 := $and.i64($i158, 1);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i160 := ldv__builtin_expect($i159, 0);
    call {:si_unique_call 761} {:cexpr "tmp___3"} boogie_si_record_i64($i160);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i160, 0);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($p116, $mul.ref($i117, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p166, 5);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb60:
    assume $i161 == 1;
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} vslice_dummy_var_160 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref($p3, .str.50, $p163, .str.45, 3348, $p118);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb54:
    assume $i126 == 1;
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p127, .str.27);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p128, .str.45);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p129, .str.29);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p130, .str.49);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p131);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i133 := $load.i24($M.7, $p132);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i134 := $and.i24($i133, $sub.i24(0, 262144));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i135 := $or.i24($i134, 3343);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p132, $i135);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p136, 0);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.8, $p137);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i64($i138);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i140 := $and.i64($i139, 1);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i141 := ldv__builtin_expect($i140, 0);
    call {:si_unique_call 759} {:cexpr "tmp___2"} boogie_si_record_i64($i141);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i142 := $ne.i64($i141, 0);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} skd_release_special($p0, $p118);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb56:
    assume $i142 == 1;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} vslice_dummy_var_159 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref($p2, .str.49, $p144, .str.45, 3343, $p118);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb30:
    assume $i77 == 1;
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i78 := 0;
    goto $bb33;

  $bb33:
    call $p79, $p80, $i81, $p82, $p83, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $p95, $p96, $i97, $i98, $p99, $i100, $i101, $p103, $p104, $i105, $i106, $i107, $i78, vslice_dummy_var_158 := skd_recover_requests_loop_$bb33($p0, $p75, $p79, $p80, $i81, $p82, $p83, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $p95, $p96, $i97, $i98, $p99, $i100, $i101, $p103, $p104, $i105, $i106, $i107, $i78, vslice_dummy_var_158);
    goto $bb33_last;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(312, 1));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.1, $p79);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i78);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p80, $mul.ref($i81, 48));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p80, $mul.ref($i81, 48)), $mul.ref(0, 1));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.1, $p83);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 1);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i100 := $sgt.i32($i78, 0);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p80, $mul.ref($i81, 48)), $mul.ref(8, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p104, $0.ref);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i105 := $add.i32($i78, 1);
    call {:si_unique_call 757} {:cexpr "i"} boogie_si_record_i32($i105);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.1, $p75);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i107 := $ult.i32($i105, $i106);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i107 == 1);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb44:
    assume $i107 == 1;
    assume {:verifier.code 0} true;
    $i78 := $i105;
    goto $bb44_dummy;

  $bb41:
    assume $i100 == 1;
    $i101 := $add.i64($i81, $sub.i64(0, 1));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p80, $mul.ref($i101, 48)), $mul.ref(8, 1));
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p103, $p82);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb35:
    assume $i85 == 1;
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} skd_log_skmsg($p0, $p82, .str.47);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p80, $mul.ref($i81, 48)), $mul.ref(16, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.1, $p86);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i88 := $and.i32($i87, 1024);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 0);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i90 := $zext.i1.i32($i89);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i91 := $sext.i32.i64($i90);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $i92 := ldv__builtin_expect($i91, 0);
    call {:si_unique_call 755} {:cexpr "tmp___1"} boogie_si_record_i64($i92);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, 0);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p80, $mul.ref($i81, 48)), $mul.ref(0, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p95, 0);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p80, $mul.ref($i81, 48)), $mul.ref(16, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.1, $p96);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i97, 1024);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p80, $mul.ref($i81, 48)), $mul.ref(16, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p99, $i98);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i93 == 1;
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} vslice_dummy_var_158 := printk.ref.ref.ref.ref.i32(.str.43, .str.48, .str.29, .str.45, 3319);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $p8, $p9, $i10, $p11, $p12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $p25, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $p34, $i35, $i36, $i37, $p38, $p39, $p40, $p41, $p42, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $i50, $i51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $i59, $i60, $i61, $i62, $p63, $i64, $i65, $p67, $p68, $i69, $i70, $i71, $i7, vslice_dummy_var_156, vslice_dummy_var_157 := skd_recover_requests_loop_$bb4($p0, $i1, $p4, $p8, $p9, $i10, $p11, $p12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $p25, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $p34, $i35, $i36, $i37, $p38, $p39, $p40, $p41, $p42, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $i50, $i51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $i59, $i60, $i61, $i62, $p63, $i64, $i65, $p67, $p68, $i69, $i70, $i71, $i7, vslice_dummy_var_156, vslice_dummy_var_157);
    goto $bb4_last;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(328, 1));
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i7);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p9, $mul.ref($i10, 128));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref($i10, 128)), $mul.ref(0, 1));
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 2);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i64 := $sgt.i32($i7, 0);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p9, $mul.ref($i10, 128)), $mul.ref(8, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p68, $0.ref);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i7, 1);
    call {:si_unique_call 752} {:cexpr "i"} boogie_si_record_i32($i69);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.1, $p4);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i71 := $ult.i32($i69, $i70);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i71 == 1);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb27:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i69;
    goto $bb27_dummy;

  $bb24:
    assume $i64 == 1;
    $i65 := $add.i64($i10, $sub.i64(0, 1));
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p9, $mul.ref($i65, 128)), $mul.ref(8, 1));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p67, $p11);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} skd_log_skreq($p0, $p11, .str.42);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p9, $mul.ref($i10, 128)), $mul.ref(16, 1));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.1, $p15);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 1024);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 743} {:cexpr "tmp"} boogie_si_record_i64($i22);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p9, $mul.ref($i10, 128)), $mul.ref(24, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 746} {:cexpr "tmp___0"} boogie_si_record_i64($i31);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p9, $mul.ref($i10, 128)), $mul.ref(56, 1));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i1, 0);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} skd_end_request($p0, $p11, $sub.i32(0, 5));
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p9, $mul.ref($i10, 128)), $mul.ref(24, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p56, $0.ref);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p9, $mul.ref($i10, 128)), $mul.ref(0, 1));
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p57, 0);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p9, $mul.ref($i10, 128)), $mul.ref(16, 1));
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i59 := $load.i16($M.1, $p58);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i32($i59);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, 1024);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i16($i61);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p9, $mul.ref($i10, 128)), $mul.ref(16, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p63, $i62);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p9, $mul.ref($i10, 128)), $mul.ref(24, 1));
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 368)), $mul.ref(248, 1));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p41, $mul.ref(1, 1));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p9, $mul.ref($i10, 128)), $mul.ref(24, 1));
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 368)), $mul.ref(248, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p45, $p42);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p9, $mul.ref($i10, 128)), $mul.ref(24, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.1, $p46);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 368)), $mul.ref(248, 1));
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.1, $p48);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i51 := $ule.i64($i50, 1);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i51 == 1);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} skd_end_request($p0, $p11, $sub.i32(0, 5));
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i51 == 1;
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(152, 1));
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.1, $p52);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p9, $mul.ref($i10, 128)), $mul.ref(24, 1));
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.1, $p54);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} blk_requeue_request($p53, $p55);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} skd_postop_sg_list($p0, $p11);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} vslice_dummy_var_157 := printk.ref.ref.ref.ref.i32(.str.43, .str.46, .str.29, .str.45, 3290);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} vslice_dummy_var_156 := printk.ref.ref.ref.ref.i32(.str.43, .str.44, .str.29, .str.45, 3289);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb64_dummy:
    assume false;
    return;

  $bb50_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3464;

  $bb44_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3407;

  $bb27_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3296;
}



const skd_restart_device: ref;

axiom skd_restart_device == $sub.ref(0, 513736);

procedure skd_restart_device($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $CurrAddr, $M.10, $M.11, $M.20, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, assertsPassed;



implementation skd_restart_device($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} skd_reg_write32($p0, 2023, 1312);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $i2 := skd_reg_read32($p0, 1296);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    call {:si_unique_call 769} {:cexpr "state"} boogie_si_record_i32($i2);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p3, .str.27);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p4, .str.99);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p5, .str.29);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, .str.100);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.7, $p8);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 3722);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p8, $i11);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p12, 0);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.8, $p13);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 771} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i2, 255);
    call {:si_unique_call 773} {:cexpr "state"} boogie_si_record_i32($i22);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(256, 1));
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p23, $i22);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(896, 1));
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p24, 0);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p25, 8);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(880, 1));
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p26, 240);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} skd_soft_reset($p0);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} vslice_dummy_var_161 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p1, .str.100, $p20, .str.99, 3722, $i2);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const skd_log_skreq: ref;

axiom skd_log_skreq == $sub.ref(0, 514768);

procedure skd_log_skreq($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation skd_log_skreq($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i24;
  var $i36: i24;
  var $i37: i24;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i24;
  var $i65: i24;
  var $i66: i24;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i64;
  var $i71: i64;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $p81: ref;
  var $i82: i32;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i24;
  var $i100: i24;
  var $i101: i24;
  var $p102: ref;
  var $p103: ref;
  var $i104: i8;
  var $i105: i64;
  var $i106: i64;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i64;
  var $i113: i32;
  var $i114: i32;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i24;
  var $i123: i24;
  var $i124: i24;
  var $p125: ref;
  var $p126: ref;
  var $i127: i8;
  var $i128: i64;
  var $i129: i64;
  var $i130: i64;
  var $i131: i1;
  var $p132: ref;
  var $p133: ref;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.27);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.51);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p10, .str.29);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p11, .str.52);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.7, $p13);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 5374);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p13, $i16);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p17, 0);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.8, $p18);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 781} {:cexpr "tmp"} boogie_si_record_i64($i22);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p29, .str.27);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p30, .str.51);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p31, .str.29);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p32, .str.53);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i35 := $load.i24($M.7, $p34);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i36 := $and.i24($i35, $sub.i24(0, 262144));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i37 := $or.i24($i36, 5378);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p34, $i37);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p38, 0);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.8, $p39);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i64($i40);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i42 := $and.i64($i41, 1);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 784} {:cexpr "tmp___1"} boogie_si_record_i64($i43);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p58, .str.27);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p59, .str.51);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p60, .str.29);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p61, .str.54);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i64 := $load.i24($M.7, $p63);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i65 := $and.i24($i64, $sub.i24(0, 262144));
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i66 := $or.i24($i65, 5381);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p63, $i66);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p67, 0);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.8, $p68);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i64($i69);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i71 := $and.i64($i70, 1);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $i72 := ldv__builtin_expect($i71, 0);
    call {:si_unique_call 788} {:cexpr "tmp___2"} boogie_si_record_i64($i72);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.1, $p84);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p85);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i87 == 1);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p116, .str.27);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p117, .str.51);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p118, .str.29);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p119, .str.56);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i122 := $load.i24($M.7, $p121);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i123 := $and.i24($i122, $sub.i24(0, 262144));
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i124 := $or.i24($i123, 5395);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p121, $i124);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p125, 0);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.8, $p126);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i64($i127);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i129 := $and.i64($i128, 1);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $i130 := ldv__builtin_expect($i129, 0);
    call {:si_unique_call 798} {:cexpr "tmp___6"} boogie_si_record_i64($i130);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i131 := $ne.i64($i130, 0);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i131 == 1;
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} vslice_dummy_var_166 := __dynamic_pr_debug.ref.ref.ref.ref.i32($p7, .str.56, $p133, .str.51, 5395);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume $i87 == 1;
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.1, $p88);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $i90 := blk_rq_pos($p89);
    call {:si_unique_call 791} {:cexpr "tmp___3"} boogie_si_record_i64($i90);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i64.i32($i90);
    call {:si_unique_call 792} {:cexpr "lba"} boogie_si_record_i32($i91);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $i92 := blk_rq_sectors($p89);
    call {:si_unique_call 794} {:cexpr "tmp___4"} boogie_si_record_i32($i92);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p93, .str.27);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p94, .str.51);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p95, .str.29);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p96, .str.55);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i99 := $load.i24($M.7, $p98);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i100 := $and.i24($i99, $sub.i24(0, 262144));
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i101 := $or.i24($i100, 5392);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p98, $i101);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p102, 0);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.8, $p103);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i64($i104);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i106 := $and.i64($i105, 1);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i107 := ldv__builtin_expect($i106, 0);
    call {:si_unique_call 796} {:cexpr "tmp___5"} boogie_si_record_i64($i107);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i108 == 1;
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p89, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i112 := $load.i64($M.1, $p111);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i64.i32($i112);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i114 := $and.i32($i113, 1);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} vslice_dummy_var_165 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.i32.i32.i32.i32.i32($p6, .str.55, $p110, .str.51, 5392, $p89, $i91, $i91, $i92, $i92, $i114);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb7:
    assume $i73 == 1;
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(36, 1));
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.1, $p76);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.1, $p78);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.1, $p81);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} vslice_dummy_var_164 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32.i32($p5, .str.54, $p75, .str.51, 5381, $i77, $i80, $i82);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i44 == 1;
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.1, $p45);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $p47 := skd_skreq_state_to_str($i46);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.1, $p50);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.1, $p52);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.1, $p55);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} vslice_dummy_var_163 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.i32.i32.i32($p4, .str.53, $p49, .str.51, 5378, $p47, $i51, $i54, $i56);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} vslice_dummy_var_162 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.ref.ref($p3, .str.52, $p25, .str.51, 5374, $p27, $p1, $p2);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const skd_postop_sg_list: ref;

axiom skd_postop_sg_list == $sub.ref(0, 515800);

procedure skd_postop_sg_list($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation skd_postop_sg_list($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.1, $p2);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 801} {:cexpr "writing"} boogie_si_record_i32($i6);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $i8 := (if $i7 == 1 then 1 else 2);
    call {:si_unique_call 802} {:cexpr "pci_dir"} boogie_si_record_i32($i8);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.1, $p9);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i14 := $mul.i64($i13, 32);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i10, $i14);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p18);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i19, 1);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p17, $mul.ref($i21, 32)), $mul.ref(24, 1));
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p23, $i15);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.1, $p28);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} pci_unmap_sg($p25, $p27, $i29, $i8);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    return;
}



const blk_requeue_request: ref;

axiom blk_requeue_request == $sub.ref(0, 516832);

procedure blk_requeue_request($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation blk_requeue_request($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    return;
}



const skd_end_request: ref;

axiom skd_end_request == $sub.ref(0, 517864);

procedure skd_end_request($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $CurrAddr;



implementation skd_end_request($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i24;
  var $i24: i24;
  var $i25: i24;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i1;
  var $i41: i32;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i64;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i24;
  var $i68: i24;
  var $i69: i24;
  var $p70: ref;
  var $p71: ref;
  var $i72: i8;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i16;
  var $i81: i32;
  var $p83: ref;
  var $p84: ref;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 806} {:cexpr "skd_end_request:arg:error"} boogie_si_record_i32($i2);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.1, $p7);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    call {:si_unique_call 807} {:cexpr "io_flags"} boogie_si_record_i32($i9);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i11 := $and.i64($i10, 128);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i2, 0);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i32($i40);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 813} {:cexpr "tmp___4"} boogie_si_record_i64($i43);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i44 == 1);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p61, .str.27);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p62, .str.62);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p63, .str.29);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p64, .str.67);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i67 := $load.i24($M.7, $p66);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i68 := $and.i24($i67, $sub.i24(0, 262144));
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i69 := $or.i24($i68, 927);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p66, $i69);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p70, 0);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.8, $p71);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i64($i72);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i74 := $and.i64($i73, 1);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $i75 := ldv__builtin_expect($i74, 0);
    call {:si_unique_call 822} {:cexpr "tmp___3"} boogie_si_record_i64($i75);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.1, $p83);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} __blk_end_request_all($p84, $i2);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i76 == 1;
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i80 := $load.i16($M.1, $p79);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} vslice_dummy_var_169 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32($p4, .str.67, $p78, .str.62, 927, $i81, $i2);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i44 == 1;
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.1, $p45);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.1, $p47);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i64.i32($i48);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 1);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 0);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p52 := (if $i51 == 1 then .str.64 else .str.65);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i53 := blk_rq_pos($p46);
    call {:si_unique_call 815} {:cexpr "tmp___0"} boogie_si_record_i64($i53);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i64.i32($i53);
    call {:si_unique_call 816} {:cexpr "lba"} boogie_si_record_i32($i54);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $i55 := blk_rq_sectors($p46);
    call {:si_unique_call 818} {:cexpr "tmp___1"} boogie_si_record_i32($i55);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $p56 := skd_name($p0);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.1, $p57);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} vslice_dummy_var_168 := printk.ref.ref.ref.i32.i32.i32(.str.66, $p56, $p52, $i54, $i55, $i59);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(33, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.1, $p13);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 1);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p17, .str.27);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p18, .str.62);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p19, .str.29);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p20, .str.63);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i23 := $load.i24($M.7, $p22);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i24 := $and.i24($i23, $sub.i24(0, 262144));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i25 := $or.i24($i24, 913);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p22, $i25);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p26, 0);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.8, $p27);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 1);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 809} {:cexpr "tmp"} boogie_si_record_i64($i31);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(136, 1));
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.1, $p37);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} __free_pages($p39, 0);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i32 == 1;
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} vslice_dummy_var_167 := __dynamic_pr_debug.ref.ref.ref.ref.i32($p3, .str.63, $p34, .str.62, 913);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const skd_log_skmsg: ref;

axiom skd_log_skmsg == $sub.ref(0, 518896);

procedure skd_log_skmsg($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation skd_log_skmsg($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i24;
  var $i33: i24;
  var $i34: i24;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.27);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p6, .str.68);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p7, .str.29);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, .str.69);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.7, $p10);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 5363);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p10, $i13);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p14, 0);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.8, $p15);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 828} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p26, .str.27);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p27, .str.68);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p28, .str.29);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p29, .str.70);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i32 := $load.i24($M.7, $p31);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i33 := $and.i24($i32, $sub.i24(0, 262144));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i34 := $or.i24($i33, 5367);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p31, $i34);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p35, 0);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.8, $p36);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i64($i37);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i38, 1);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 831} {:cexpr "tmp___1"} boogie_si_record_i64($i40);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i41 == 1;
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.1, $p42);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} $p44 := skd_skmsg_state_to_str($i43);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.1, $p47);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.1, $p49);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.1, $p51);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} vslice_dummy_var_171 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.i32.i32.i32($p4, .str.70, $p46, .str.68, 5367, $p44, $i48, $i50, $i52);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} vslice_dummy_var_170 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.ref.ref($p3, .str.69, $p22, .str.68, 5363, $p24, $p1, $p2);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const skd_release_special: ref;

axiom skd_release_special == $sub.ref(0, 519928);

procedure skd_release_special($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation skd_release_special($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i7: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $p23: ref;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i16;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i24;
  var $i46: i24;
  var $i47: i24;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var vslice_dummy_var_172: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i6 := $ult.i32(0, $i5);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(336, 1));
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    call {:si_unique_call 838} {:cexpr "was_depleted"} boogie_si_record_i32($i21);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p23, 0);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.1, $p25);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, 1024);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p31, $i29);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(336, 1));
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p36, $p33);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(336, 1));
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p37, $p1);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i21, 0);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i38 == 1;
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p39, .str.27);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p40, .str.71);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p41, .str.29);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p42, .str.72);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i45 := $load.i24($M.7, $p44);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i46 := $and.i24($i45, $sub.i24(0, 262144));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i47 := $or.i24($i46, 3016);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p44, $i47);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p48, 0);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.8, $p49);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i64($i50);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i52 := $and.i64($i51, 1);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $i53 := ldv__builtin_expect($i52, 0);
    call {:si_unique_call 840} {:cexpr "tmp___0"} boogie_si_record_i64($i53);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(664, 1));
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} __wake_up($p58, 1, 1, $0.ref);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i54 == 1;
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} vslice_dummy_var_172 := __dynamic_pr_debug.ref.ref.ref.ref.i32($p2, .str.72, $p56, .str.71, 3016);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $p12, $p13, $i14, $i15, $i16, $i7 := skd_release_special_loop_$bb4($p1, $p4, $p9, $p10, $i11, $p12, $p13, $i14, $i15, $i16, $i7);
    goto $bb4_last;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i7);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 40));
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $p13 := sg_page($p12);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} __free_pages($p13, 0);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i7, 1);
    call {:si_unique_call 837} {:cexpr "i"} boogie_si_record_i32($i14);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p4);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i16 := $ult.i32($i14, $i15);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i14;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4005;
}



const sg_page: ref;

axiom sg_page == $sub.ref(0, 520960);

procedure sg_page($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sg_page($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.1, $p1);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 2271560481);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 844} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.1, $p8);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i12 := $and.i64($i11, 1);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 847} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.1, $p15);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, $sub.i64(0, 4));
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $r := $p18;
    return;

  $bb5:
    assume $i14 == 1;
    call {:si_unique_call 848} devirtbounce(0, .str.73, 99, 12);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call sg_page_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 845} devirtbounce(0, .str.73, 98, 12);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call sg_page_loop_$bb3();
    goto $bb3_last;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const __free_pages: ref;

axiom __free_pages == $sub.ref(0, 521992);

procedure __free_pages($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __free_pages($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} {:cexpr "__free_pages:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    return;
}



const skd_skmsg_state_to_str: ref;

axiom skd_skmsg_state_to_str == $sub.ref(0, 523024);

procedure skd_skmsg_state_to_str($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skd_skmsg_state_to_str($i0: i32) returns ($r: ref)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $p4: ref;

  $bb0:
    call {:si_unique_call 850} {:cexpr "skd_skmsg_state_to_str:arg:state"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p4 := .str.13;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p4 := .str.3;
    goto $bb9;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb6;

  $bb7:
    assume $i3 == 1;
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p4 := .str.15;
    goto $bb9;
}



const blk_rq_pos: ref;

axiom blk_rq_pos == $sub.ref(0, 524056);

procedure blk_rq_pos($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation blk_rq_pos($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(96, 1));
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.1, $p1);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const blk_rq_sectors: ref;

axiom blk_rq_sectors == $sub.ref(0, 525088);

procedure blk_rq_sectors($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation blk_rq_sectors($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $i1 := blk_rq_bytes($p0);
    call {:si_unique_call 852} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i2 := $lshr.i32($i1, 9);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __blk_end_request_all: ref;

axiom __blk_end_request_all == $sub.ref(0, 526120);

procedure __blk_end_request_all($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __blk_end_request_all($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} {:cexpr "__blk_end_request_all:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    return;
}



const blk_rq_bytes: ref;

axiom blk_rq_bytes == $sub.ref(0, 527152);

procedure blk_rq_bytes($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation blk_rq_bytes($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(92, 1));
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_unmap_sg: ref;

axiom pci_unmap_sg == $sub.ref(0, 528184);

procedure pci_unmap_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;



implementation pci_unmap_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} {:cexpr "pci_unmap_sg:arg:nents"} boogie_si_record_i32($i2);
    call {:si_unique_call 855} {:cexpr "pci_unmap_sg:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} dma_unmap_sg_attrs($p7, $p1, $i2, $i3, $0.ref);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const dma_unmap_sg_attrs: ref;

axiom dma_unmap_sg_attrs == $sub.ref(0, 529216);

procedure dma_unmap_sg_attrs($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_sg_attrs($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} {:cexpr "dma_unmap_sg_attrs:arg:nents"} boogie_si_record_i32($i2);
    call {:si_unique_call 858} {:cexpr "dma_unmap_sg_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $p5 := get_dma_ops($p0);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 861} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 863} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} debug_dma_unmap_sg($p0, $p1, $i2, $i3);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    call {:si_unique_call 866} devirtbounce.8($p17, $p0, $p1, $i2, $i3, $p4);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 864} devirtbounce(0, .str.61, 65, 12);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_sg_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 530248);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 868} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, dma_ops);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 531280);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 2);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const debug_dma_unmap_sg: ref;

axiom debug_dma_unmap_sg == $sub.ref(0, 532312);

procedure debug_dma_unmap_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;



implementation debug_dma_unmap_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} {:cexpr "debug_dma_unmap_sg:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 871} {:cexpr "debug_dma_unmap_sg:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    return;
}



const skd_skreq_state_to_str: ref;

axiom skd_skreq_state_to_str == $sub.ref(0, 533344);

procedure skd_skreq_state_to_str($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skd_skreq_state_to_str($i0: i32) returns ($r: ref)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    call {:si_unique_call 872} {:cexpr "skd_skreq_state_to_str:arg:state"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p8 := .str.13;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb8:
    assume $i4 == 1;
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $p8 := .str.60;
    goto $bb17;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p8 := .str.59;
    goto $bb17;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $p8 := .str.58;
    goto $bb17;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i6 == 1);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $p8 := .str.3;
    goto $bb17;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $p8 := .str.57;
    goto $bb17;

  $bb11:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb15:
    assume $i7 == 1;
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $p8 := .str.15;
    goto $bb17;
}



const skd_drive_state_to_str: ref;

axiom skd_drive_state_to_str == $sub.ref(0, 534376);

procedure skd_drive_state_to_str($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skd_drive_state_to_str($i0: i32) returns ($r: ref)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $p17: ref;

  $bb0:
    call {:si_unique_call 873} {:cexpr "skd_drive_state_to_str:arg:state"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 254);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 254);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p17 := .str.13;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $r := $p17;
    return;

  $bb10:
    assume $i5 == 1;
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p17 := .str.8;
    goto $bb35;

  $bb8:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb12;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p17 := .str.12;
    goto $bb35;

  $bb6:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i0, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i7 == 1);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p17 := .str.11;
    goto $bb35;

  $bb15:
    assume $i7 == 1;
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $p17 := .str.10;
    goto $bb35;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i0, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i0, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i9 == 1);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p17 := .str.9;
    goto $bb35;

  $bb19:
    assume $i9 == 1;
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $p17 := .str.7;
    goto $bb35;

  $bb17:
    assume $i8 == 1;
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $p17 := .str.6;
    goto $bb35;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i0, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i0, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i12 == 1);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $p17 := .str.5;
    goto $bb35;

  $bb25:
    assume $i12 == 1;
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $p17 := .str.4;
    goto $bb35;

  $bb23:
    assume $i11 == 1;
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p17 := .str.3;
    goto $bb35;

  $bb21:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i14 == 1);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p17 := .str.2;
    goto $bb35;

  $bb29:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb12;

  $bb31:
    assume $i15 == 1;
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p17 := .str.1;
    goto $bb35;

  $bb27:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb12;

  $bb33:
    assume $i16 == 1;
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p17 := .str;
    goto $bb35;
}



const skd_refresh_device_data: ref;

axiom skd_refresh_device_data == $sub.ref(0, 535408);

procedure skd_refresh_device_data($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation skd_refresh_device_data($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} skd_send_internal_skspcl($p0, $p1, 0);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    return;
}



const skd_quiesce_dev: ref;

axiom skd_quiesce_dev == $sub.ref(0, 536440);

procedure skd_quiesce_dev($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation skd_quiesce_dev($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i24;
  var $i26: i24;
  var $i27: i24;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i24;
  var $i50: i24;
  var $i51: i24;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i42: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i4, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i4, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i4, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p43, .str.27);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p44, .str.85);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p45, .str.29);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p46, .str.87);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i49 := $load.i24($M.7, $p48);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i50 := $and.i24($i49, $sub.i24(0, 262144));
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i51 := $or.i24($i50, 3757);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p48, $i51);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p52, 0);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.8, $p53);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i64($i54);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i56 := $and.i64($i55, 1);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $i57 := ldv__builtin_expect($i56, 0);
    call {:si_unique_call 882} {:cexpr "tmp___0"} boogie_si_record_i64($i57);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 22);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb44:
    assume $i58 == 1;
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.1, $p61);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} vslice_dummy_var_174 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p2, .str.87, $p60, .str.85, 3757, $i62);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb8:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i4, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb13;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p19, .str.27);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p20, .str.85);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p21, .str.29);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p22, .str.86);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i25 := $load.i24($M.7, $p24);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i26 := $and.i24($i25, $sub.i24(0, 262144));
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i27 := $or.i24($i26, 3743);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p24, $i27);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p28, 0);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.8, $p29);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 1);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 878} {:cexpr "tmp"} boogie_si_record_i64($i33);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(152, 1));
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} blk_stop_queue($p41);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb42;

  $bb39:
    assume $i34 == 1;
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} vslice_dummy_var_173 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref($p1, .str.86, $p36, .str.85, 3743, $p38);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb6:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i4, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb13;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb4:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i4, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb23;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i4, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i4, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i4, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb13;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb32;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb29;

  $bb26:
    assume $i14 == 1;
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb24:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i4, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb36;

  $bb34:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb13;

  $bb37:
    assume $i18 == 1;
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const skd_skdev_state_to_str: ref;

axiom skd_skdev_state_to_str == $sub.ref(0, 537472);

procedure skd_skdev_state_to_str($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skd_skdev_state_to_str($i0: i32) returns ($r: ref)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $p21: ref;

  $bb0:
    call {:si_unique_call 884} {:cexpr "skd_skdev_state_to_str:arg:state"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 14);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 17);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 18);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p21 := .str.13;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $r := $p21;
    return;

  $bb12:
    assume $i6 == 1;
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $p21 := .str.23;
    goto $bb43;

  $bb10:
    assume $i5 == 1;
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $p21 := .str.26;
    goto $bb43;

  $bb8:
    assume $i4 == 1;
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $p21 := .str.25;
    goto $bb43;

  $bb6:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i0, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i7 == 1);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p21 := .str.10;
    goto $bb43;

  $bb15:
    assume $i7 == 1;
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $p21 := .str.11;
    goto $bb43;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i0, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i0, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i0, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb14;

  $bb21:
    assume $i10 == 1;
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p21 := .str.24;
    goto $bb43;

  $bb19:
    assume $i9 == 1;
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p21 := .str.4;
    goto $bb43;

  $bb17:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i0, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i11 == 1);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p21 := .str.22;
    goto $bb43;

  $bb23:
    assume $i11 == 1;
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p21 := .str.21;
    goto $bb43;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i0, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i0, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i0, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i15 == 1);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $p21 := .str.20;
    goto $bb43;

  $bb31:
    assume $i15 == 1;
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $p21 := .str.19;
    goto $bb43;

  $bb29:
    assume $i14 == 1;
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p21 := .str.18;
    goto $bb43;

  $bb27:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i0, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i16 == 1);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $p21 := .str.17;
    goto $bb43;

  $bb33:
    assume $i16 == 1;
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p21 := .str.2;
    goto $bb43;

  $bb25:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i18 == 1);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $p21 := .str.16;
    goto $bb43;

  $bb37:
    assume $i18 == 1;
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $p21 := .str.3;
    goto $bb43;

  $bb35:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i19 == 1);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $p21 := .str.15;
    goto $bb43;

  $bb39:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb14;

  $bb41:
    assume $i20 == 1;
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $p21 := .str.14;
    goto $bb43;
}



const skd_acquire_msix: ref;

axiom skd_acquire_msix == $sub.ref(0, 538504);

procedure skd_acquire_msix($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, assertsPassed;



implementation skd_acquire_msix($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i38: i64;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i64;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i24;
  var $i58: i24;
  var $i59: i24;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i64;
  var $i64: i64;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $i75: i32;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $i33: i32;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i64;
  var $p94: ref;
  var $p95: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i64;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
  var $i111: i32;
  var $p112: ref;
  var $i113: i32;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $i122: i1;
  var $i83: i32;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i24;
  var $i130: i24;
  var $i131: i24;
  var $p132: ref;
  var $p133: ref;
  var $i134: i8;
  var $i135: i64;
  var $i136: i64;
  var $i137: i64;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $i15: i32;
  var $i147: i64;
  var $i148: i1;
  var $p149: ref;
  var $i9: i32;
  var $p151: ref;
  var $p153: ref;
  var $p155: ref;
  var $p157: ref;
  var $p159: ref;
  var $p161: ref;
  var $p163: ref;
  var $p165: ref;
  var $p167: ref;
  var $p169: ref;
  var $p171: ref;
  var $p173: ref;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $p5 := kzalloc(104, 208);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p10, 0);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p6, $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p151, 1);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p6, $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p153, 2);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p6, $mul.ref(3, 8)), $mul.ref(4, 1));
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p155, 3);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p6, $mul.ref(4, 8)), $mul.ref(4, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p157, 4);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p6, $mul.ref(5, 8)), $mul.ref(4, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p159, 5);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p6, $mul.ref(6, 8)), $mul.ref(4, 1));
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p161, 6);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p6, $mul.ref(7, 8)), $mul.ref(4, 1));
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p163, 7);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p6, $mul.ref(8, 8)), $mul.ref(4, 1));
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p165, 8);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p6, $mul.ref(9, 8)), $mul.ref(4, 1));
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p167, 9);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p6, $mul.ref(10, 8)), $mul.ref(4, 1));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p169, 10);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p6, $mul.ref(11, 8)), $mul.ref(4, 1));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p171, 11);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p6, $mul.ref(12, 8)), $mul.ref(4, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p173, 12);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} $i11 := pci_enable_msix_exact($p4, $p6, 13);
    call {:si_unique_call 889} {:cexpr "rc"} boogie_si_record_i32($i11);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(44, 1));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p16, 13);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(44, 1));
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.1, $p17);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i20 := $mul.i64($i19, 56);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} $p21 := kzalloc($i20, 208);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(48, 1));
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p23, $p21);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(48, 1));
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(44, 1));
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i32 := $ult.i32(0, $i31);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(44, 1));
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.1, $p80);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i82 := $ult.i32(0, $i81);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p123, .str.27);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p124, .str.288);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p125, .str.29);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p126, .str.292);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p127);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i129 := $load.i24($M.7, $p128);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i130 := $and.i24($i129, $sub.i24(0, 262144));
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i131 := $or.i24($i130, 4050);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p128, $i131);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p132, 0);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i134 := $load.i8($M.8, $p133);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i135 := $zext.i8.i64($i134);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i136 := $and.i64($i135, 1);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $i137 := ldv__builtin_expect($i136, 0);
    call {:si_unique_call 907} {:cexpr "tmp___7"} boogie_si_record_i64($i137);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i138 := $ne.i64($i137, 0);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb38:
    assume $i138 == 1;
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $p139 := pci_name($p4);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p142);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(44, 1));
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.1, $p144);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} vslice_dummy_var_180 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.ref.i32($p2, .str.292, $p141, .str.288, 4050, $p139, $p143, $i145);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb27:
    assume $i82 == 1;
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i83 := 0;
    goto $bb30;

  $bb30:
    call $p84, $p85, $i86, $p87, $p88, $p89, $p90, $i91, $i92, $p94, $p95, $p97, $p98, $p99, $p100, $i101, $i102, $p104, $p105, $p106, $p107, $p108, $i109, $i110, $i111, $p112, $i113, $p118, $p119, $i120, $i121, $i122, $i83, vslice_dummy_var_178 := skd_acquire_msix_loop_$bb30($p0, $p80, $p84, $p85, $i86, $p87, $p88, $p89, $p90, $i91, $i92, $p94, $p95, $p97, $p98, $p99, $p100, $i101, $i102, $p104, $p105, $p106, $p107, $p108, $i109, $i110, $i111, $p112, $i113, $p118, $p119, $i120, $i121, $i122, $i83, vslice_dummy_var_178);
    goto $bb30_last;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(48, 1));
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.1, $p84);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i83);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p85, $mul.ref($i86, 56));
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p85, $mul.ref($i86, 56)), $mul.ref(24, 1));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(180, 1));
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.1, $p90);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i83);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref($i92, 16)), $mul.ref(0, 1));
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.23, $p94);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} vslice_dummy_var_178 := snprintf.ref.i64.ref.ref.i32.ref($p89, 30, .str.290, .str.27, $i91, $p95);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.1, $p97);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p98, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p85, $mul.ref($i86, 56)), $mul.ref(4, 1));
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.1, $p100);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i102 := $sext.i32.i64($i83);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref($i102, 16)), $mul.ref(8, 1));
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.24, $p104);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p85, $mul.ref($i86, 56)), $mul.ref(24, 1));
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p0);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $i109 := devm_request_irq($p99, $i101, $p105, 0, $p107, $p108);
    call {:si_unique_call 902} {:cexpr "rc"} boogie_si_record_i32($i109);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i111, $p112, $i113 := $i83, $p87, $i109;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i110 == 1);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p85, $mul.ref($i86, 56)), $mul.ref(0, 1));
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p118, 1);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p85, $mul.ref($i86, 56)), $mul.ref(16, 1));
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p119, $p0);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i120 := $add.i32($i83, 1);
    call {:si_unique_call 905} {:cexpr "i"} boogie_si_record_i32($i120);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.1, $p80);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i122 := $ult.i32($i120, $i121);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i122 == 1);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb35:
    assume $i122 == 1;
    assume {:verifier.code 0} true;
    $i83 := $i120;
    goto $bb35_dummy;

  $bb32:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $p114 := skd_name($p0);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p112, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} vslice_dummy_var_179 := printk.ref.ref.i32.i32.ref(.str.291, $p114, $i113, $i111, $p116);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i15 := $i113;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i147 := $p2i.ref.i64($p6);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i148 := $ne.i64($i147, 0);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} skd_release_msix($p0);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i9 := $i15;
    goto $bb3;

  $bb41:
    assume $i148 == 1;
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p6);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} kfree($p149);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb16:
    assume $i32 == 1;
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb19;

  $bb19:
    call $p34, $p35, $i36, $i38, $p40, $i41, $p42, $i43, $p45, $i46, $i47, $p48, $p49, $p50, $p51, $p52, $p53, $p54, $p55, $p56, $i57, $i58, $i59, $p60, $p61, $i62, $i63, $i64, $i65, $i66, $p67, $p68, $p69, $p70, $p71, $p72, $i73, $p74, $i75, $i77, $i78, $i79, $i33, vslice_dummy_var_177 := skd_acquire_msix_loop_$bb19($p0, $p1, $p4, $p6, $p30, $p34, $p35, $i36, $i38, $p40, $i41, $p42, $i43, $p45, $i46, $i47, $p48, $p49, $p50, $p51, $p52, $p53, $p54, $p55, $p56, $i57, $i58, $i59, $p60, $p61, $i62, $i63, $i64, $i65, $i66, $p67, $p68, $p69, $p70, $p71, $p72, $i73, $p74, $i75, $i77, $i78, $i79, $i33, vslice_dummy_var_177);
    goto $bb19_last;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(48, 1));
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i33);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i33);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref($i38, 8)), $mul.ref(0, 1));
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.1, $p40);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p35, $mul.ref($i36, 56)), $mul.ref(4, 1));
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p42, $i41);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i33);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref($i43, 8)), $mul.ref(4, 1));
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.1, $p45);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p35, $mul.ref($i36, 56)), $mul.ref(8, 1));
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p48, $i47);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p35, $mul.ref($i36, 56)), $mul.ref(16, 1));
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p49, $0.ref);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p35, $mul.ref($i36, 56)), $mul.ref(0, 1));
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p50, 0);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p51, .str.27);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p52, .str.288);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p53, .str.29);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p54, .str.289);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i57 := $load.i24($M.7, $p56);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i58 := $and.i24($i57, $sub.i24(0, 262144));
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i59 := $or.i24($i58, 4026);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p56, $i59);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p60, 0);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.8, $p61);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i64($i62);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i64 := $and.i64($i63, 1);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $i65 := ldv__builtin_expect($i64, 0);
    call {:si_unique_call 896} {:cexpr "tmp___4"} boogie_si_record_i64($i65);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i33, 1);
    call {:si_unique_call 899} {:cexpr "i"} boogie_si_record_i32($i77);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.1, $p30);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i79 := $ult.i32($i77, $i78);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i79 == 1);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb24:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $i33 := $i77;
    goto $bb24_dummy;

  $bb21:
    assume $i66 == 1;
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $p67 := pci_name($p4);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p35, $mul.ref($i36, 56)), $mul.ref(4, 1));
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.1, $p72);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p35, $mul.ref($i36, 56)), $mul.ref(8, 1));
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.1, $p74);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} vslice_dummy_var_177 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.ref.i32.i32.i32($p1, .str.289, $p69, .str.288, 4026, $p67, $p71, $i33, $i73, $i75);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $p28 := skd_name($p0);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} vslice_dummy_var_176 := printk.ref.ref(.str.287, $p28);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 12);
    goto $bb11;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i12 == 1;
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} $p13 := skd_name($p0);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} vslice_dummy_var_175 := printk.ref.ref.i32(.str.286, $p13, $i11);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i15 := $i11;
    goto $bb11;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb35_dummy:
    assume false;
    return;

  $bb30_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4473;

  $bb24_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4403;
}



const pci_enable_msi_range: ref;

axiom pci_enable_msi_range == $sub.ref(0, 539536);

procedure pci_enable_msi_range($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_msi_range($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 912} {:cexpr "pci_enable_msi_range:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 913} {:cexpr "pci_enable_msi_range:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 1} true;
    call {:si_unique_call 914} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 915} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const skd_isr: ref;

axiom skd_isr == $sub.ref(0, 540568);

procedure skd_isr($i0: i32, $p1: ref) returns ($r: i32);



const devm_request_irq: ref;

axiom devm_request_irq == $sub.ref(0, 541600);

procedure devm_request_irq($p0: ref, $i1: i32, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devm_request_irq($p0: ref, $i1: i32, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} {:cexpr "devm_request_irq:arg:irq"} boogie_si_record_i32($i1);
    call {:si_unique_call 917} {:cexpr "devm_request_irq:arg:irqflags"} boogie_si_record_i64($i3);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $i6 := devm_request_threaded_irq($p0, $i1, $p2, $0.ref, $i3, $p4, $p5);
    call {:si_unique_call 919} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const devm_request_threaded_irq: ref;

axiom devm_request_threaded_irq == $sub.ref(0, 542632);

procedure devm_request_threaded_irq($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devm_request_threaded_irq($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $i7: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 920} {:cexpr "devm_request_threaded_irq:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 921} {:cexpr "devm_request_threaded_irq:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 1} true;
    call {:si_unique_call 922} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 923} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 543664);

procedure spin_lock($p0: ref);



const skd_isr_completion_posted: ref;

axiom skd_isr_completion_posted == $sub.ref(0, 544696);

procedure skd_isr_completion_posted($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 545728);

procedure spin_unlock($p0: ref);



const skd_isr_msg_from_dev: ref;

axiom skd_isr_msg_from_dev == $sub.ref(0, 546760);

procedure skd_isr_msg_from_dev($p0: ref);



const skd_request_fn: ref;

axiom skd_request_fn == $sub.ref(0, 547792);

procedure skd_request_fn($p0: ref);



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 548824);

procedure schedule_work($p0: ref) returns ($r: i1);



const queue_work: ref;

axiom queue_work == $sub.ref(0, 549856);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 550888);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);



const skd_request_fn_not_online: ref;

axiom skd_request_fn_not_online == $sub.ref(0, 551920);

procedure skd_request_fn_not_online($p0: ref);



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 552952);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);



const queue_flag_clear: ref;

axiom queue_flag_clear == $sub.ref(0, 553984);

procedure queue_flag_clear($i0: i32, $p1: ref);



const blk_peek_request: ref;

axiom blk_peek_request == $sub.ref(0, 555016);

procedure blk_peek_request($p0: ref) returns ($r: ref);



const blk_start_request: ref;

axiom blk_start_request == $sub.ref(0, 556048);

procedure blk_start_request($p0: ref);



const __fswab64: ref;

axiom __fswab64 == $sub.ref(0, 557080);

procedure __fswab64($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __fswab64($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} {:cexpr "__fswab64:arg:val"} boogie_si_record_i64($i0);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $i1 := __arch_swab64($i0);
    call {:si_unique_call 926} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const alloc_pages: ref;

axiom alloc_pages == $sub.ref(0, 558112);

procedure alloc_pages($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation alloc_pages($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} {:cexpr "alloc_pages:arg:flags"} boogie_si_record_i32($i0);
    call {:si_unique_call 928} {:cexpr "alloc_pages:arg:order"} boogie_si_record_i32($i1);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} ldv_check_alloc_flags($i0);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $p2 := ldv_alloc_pages_11($i0, $i1);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const skd_prep_discard_cdb: ref;

axiom skd_prep_discard_cdb == $sub.ref(0, 559144);

procedure skd_prep_discard_cdb($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32);



const skd_prep_zerosize_flush_cdb: ref;

axiom skd_prep_zerosize_flush_cdb == $sub.ref(0, 560176);

procedure skd_prep_zerosize_flush_cdb($p0: ref, $p1: ref);



const skd_prep_rw_cdb: ref;

axiom skd_prep_rw_cdb == $sub.ref(0, 561208);

procedure skd_prep_rw_cdb($p0: ref, $i1: i32, $i2: i32, $i3: i32);



const skd_preop_sg_list: ref;

axiom skd_preop_sg_list == $sub.ref(0, 562240);

procedure skd_preop_sg_list($p0: ref, $p1: ref) returns ($r: i32);



const skd_send_fitmsg: ref;

axiom skd_send_fitmsg == $sub.ref(0, 563272);

procedure skd_send_fitmsg($p0: ref, $p1: ref);



const blk_rq_map_sg: ref;

axiom blk_rq_map_sg == $sub.ref(0, 564304);

procedure blk_rq_map_sg($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const pci_map_sg: ref;

axiom pci_map_sg == $sub.ref(0, 565336);

procedure pci_map_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);



const dma_map_sg_attrs: ref;

axiom dma_map_sg_attrs == $sub.ref(0, 566368);

procedure dma_map_sg_attrs($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);



const sg_virt: ref;

axiom sg_virt == $sub.ref(0, 567400);

procedure sg_virt($p0: ref) returns ($r: ref);



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 568432);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);



const sg_next: ref;

axiom sg_next == $sub.ref(0, 569464);

procedure sg_next($p0: ref) returns ($r: ref);



const debug_dma_map_sg: ref;

axiom debug_dma_map_sg == $sub.ref(0, 570496);

procedure debug_dma_map_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32);



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 571528);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 1} true;
    call {:si_unique_call 931} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 932} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 572560);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const put_unaligned_be16: ref;

axiom put_unaligned_be16 == $sub.ref(0, 573592);

procedure put_unaligned_be16($i0: i16, $p1: ref);



const put_unaligned_be64: ref;

axiom put_unaligned_be64 == $sub.ref(0, 574624);

procedure put_unaligned_be64($i0: i64, $p1: ref);



const put_unaligned_be32: ref;

axiom put_unaligned_be32 == $sub.ref(0, 575656);

procedure put_unaligned_be32($i0: i32, $p1: ref);



const blk_add_request_payload: ref;

axiom blk_add_request_payload == $sub.ref(0, 576688);

procedure blk_add_request_payload($p0: ref, $p1: ref, $i2: i32);



const __fswab16: ref;

axiom __fswab16 == $sub.ref(0, 577720);

procedure __fswab16($i0: i16) returns ($r: i16);



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 578752);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i1 := $M.11;
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} ldv_error();
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const ldv_alloc_pages_11: ref;

axiom ldv_alloc_pages_11 == $sub.ref(0, 579784);

procedure ldv_alloc_pages_11($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_alloc_pages_11($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} {:cexpr "ldv_alloc_pages_11:arg:gfp_mask"} boogie_si_record_i32($i0);
    call {:si_unique_call 936} {:cexpr "ldv_alloc_pages_11:arg:order"} boogie_si_record_i32($i1);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $p2 := alloc_pages_current($i0, $i1);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const alloc_pages_current: ref;

axiom alloc_pages_current == $sub.ref(0, 580816);

procedure alloc_pages_current($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_pages_current($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} {:cexpr "alloc_pages_current:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 939} {:cexpr "alloc_pages_current:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $p2 := external_alloc();
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 581848);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 941} __VERIFIER_error();
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const __arch_swab64: ref;

axiom __arch_swab64 == $sub.ref(0, 582880);

procedure __arch_swab64($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __arch_swab64($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} {:cexpr "__arch_swab64:arg:val"} boogie_si_record_i64($i0);
    call {:si_unique_call 943} $i1 := devirtbounce.10(0, $i0);
    call {:si_unique_call 944} {:cexpr "val"} boogie_si_record_i64($i1);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const queue_lockdep_assert_held: ref;

axiom queue_lockdep_assert_held == $sub.ref(0, 583912);

procedure queue_lockdep_assert_held($p0: ref);



const __clear_bit: ref;

axiom __clear_bit == $sub.ref(0, 584944);

procedure __clear_bit($i0: i64, $p1: ref);



const lock_is_held: ref;

axiom lock_is_held == $sub.ref(0, 585976);

procedure lock_is_held($p0: ref) returns ($r: i32);



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 587008);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    return;
}



const skd_log_skdev: ref;

axiom skd_log_skdev == $sub.ref(0, 588040);

procedure skd_log_skdev($p0: ref, $p1: ref);



const skd_fail_all_pending: ref;

axiom skd_fail_all_pending == $sub.ref(0, 589072);

procedure skd_fail_all_pending($p0: ref);



const skd_reset_skcomp: ref;

axiom skd_reset_skcomp == $sub.ref(0, 590104);

procedure skd_reset_skcomp($p0: ref);



const get_seconds: ref;

axiom get_seconds == $sub.ref(0, 591136);

procedure get_seconds() returns ($r: i64);



const ldv_spin_unlock_5: ref;

axiom ldv_spin_unlock_5 == $sub.ref(0, 592168);

procedure ldv_spin_unlock_5($p0: ref);



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 593200);

procedure _raw_spin_unlock($p0: ref);



const skd_complete_other: ref;

axiom skd_complete_other == $sub.ref(0, 594232);

procedure skd_complete_other($p0: ref, $p1: ref, $p2: ref);



const skd_release_skreq: ref;

axiom skd_release_skreq == $sub.ref(0, 595264);

procedure skd_release_skreq($p0: ref, $p1: ref);



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 596296);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const skd_log_check_status: ref;

axiom skd_log_check_status == $sub.ref(0, 597328);

procedure skd_log_check_status($p0: ref, $i1: i8, $i2: i8, $i3: i8, $i4: i8, $i5: i8);



const skd_resolve_req_exception: ref;

axiom skd_resolve_req_exception == $sub.ref(0, 598360);

procedure skd_resolve_req_exception($p0: ref, $p1: ref);



const skd_check_status: ref;

axiom skd_check_status == $sub.ref(0, 599392);

procedure skd_check_status($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);



const skd_complete_special: ref;

axiom skd_complete_special == $sub.ref(0, 600424);

procedure skd_complete_special($p0: ref, $p1: ref, $p2: ref, $p3: ref);



const skd_complete_internal: ref;

axiom skd_complete_internal == $sub.ref(0, 601456);

procedure skd_complete_internal($p0: ref, $p1: ref, $p2: ref, $p3: ref);



const skd_chk_read_buf: ref;

axiom skd_chk_read_buf == $sub.ref(0, 602488);

procedure skd_chk_read_buf($p0: ref, $p1: ref) returns ($r: i32);



const set_capacity: ref;

axiom set_capacity == $sub.ref(0, 603520);

procedure set_capacity($p0: ref, $i1: i64);



const skd_unquiesce_dev: ref;

axiom skd_unquiesce_dev == $sub.ref(0, 604552);

procedure skd_unquiesce_dev($p0: ref) returns ($r: i32);



const skd_process_scsi_inq: ref;

axiom skd_process_scsi_inq == $sub.ref(0, 605584);

procedure skd_process_scsi_inq($p0: ref, $p1: ref, $p2: ref, $p3: ref);



const dma_sync_sg_for_cpu: ref;

axiom dma_sync_sg_for_cpu == $sub.ref(0, 606616);

procedure dma_sync_sg_for_cpu($p0: ref, $p1: ref, $i2: i32, $i3: i32);



const skd_sg_1st_page_ptr: ref;

axiom skd_sg_1st_page_ptr == $sub.ref(0, 607648);

procedure skd_sg_1st_page_ptr($p0: ref) returns ($r: ref);



const skd_do_driver_inq: ref;

axiom skd_do_driver_inq == $sub.ref(0, 608680);

procedure skd_do_driver_inq($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref);



const skd_do_inq_page_00: ref;

axiom skd_do_inq_page_00 == $sub.ref(0, 609712);

procedure skd_do_inq_page_00($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref);



const skd_do_inq_page_da: ref;

axiom skd_do_inq_page_da == $sub.ref(0, 610744);

procedure skd_do_inq_page_da($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref);



const skd_get_link_info: ref;

axiom skd_get_link_info == $sub.ref(0, 611776);

procedure skd_get_link_info($p0: ref, $p1: ref, $p2: ref);



const pci_read_config_word: ref;

axiom pci_read_config_word == $sub.ref(0, 612808);

procedure pci_read_config_word($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_word($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} {:cexpr "pci_read_config_word:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(56, 1));
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $i7 := pci_bus_read_config_word($p4, $i6, $i1, $p2);
    call {:si_unique_call 948} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_bus_read_config_word: ref;

axiom pci_bus_read_config_word == $sub.ref(0, 613840);

procedure pci_bus_read_config_word($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_word($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 949} {:cexpr "pci_bus_read_config_word:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 950} {:cexpr "pci_bus_read_config_word:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 1} true;
    call {:si_unique_call 951} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 952} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_find_capability: ref;

axiom pci_find_capability == $sub.ref(0, 614872);

procedure pci_find_capability($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_find_capability($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 953} {:cexpr "pci_find_capability:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 1} true;
    call {:si_unique_call 954} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 955} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const debug_dma_sync_sg_for_cpu: ref;

axiom debug_dma_sync_sg_for_cpu == $sub.ref(0, 615904);

procedure debug_dma_sync_sg_for_cpu($p0: ref, $p1: ref, $i2: i32, $i3: i32);



const ldv_spin_lock_1: ref;

axiom ldv_spin_lock_1 == $sub.ref(0, 616936);

procedure ldv_spin_lock_1($p0: ref);



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 617968);

procedure _raw_spin_lock($p0: ref);



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 619000);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 957} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} ldv_check_alloc_flags($i1);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const pci_enable_msix_exact: ref;

axiom pci_enable_msix_exact == $sub.ref(0, 620032);

procedure pci_enable_msix_exact($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_msix_exact($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} {:cexpr "pci_enable_msix_exact:arg:nvec"} boogie_si_record_i32($i2);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} $i3 := pci_enable_msix_range($p0, $p1, $i2, $i2);
    call {:si_unique_call 961} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;
}



const pci_enable_msix_range: ref;

axiom pci_enable_msix_range == $sub.ref(0, 621064);

procedure pci_enable_msix_range($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_msix_range($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 962} {:cexpr "pci_enable_msix_range:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 963} {:cexpr "pci_enable_msix_range:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 1} true;
    call {:si_unique_call 964} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 965} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ioremap_nocache: ref;

axiom ioremap_nocache == $sub.ref(0, 622096);

procedure ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} {:cexpr "ioremap_nocache:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 967} {:cexpr "ioremap_nocache:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $p2 := external_alloc();
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dma_set_coherent_mask: ref;

axiom dma_set_coherent_mask == $sub.ref(0, 623128);

procedure dma_set_coherent_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation dma_set_coherent_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} {:cexpr "dma_set_coherent_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $i2 := dma_supported($p0, $i1);
    call {:si_unique_call 971} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1168, 1));
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p5, $i1);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 5);
    goto $bb3;
}



const dma_supported: ref;

axiom dma_supported == $sub.ref(0, 624160);

procedure dma_supported($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_supported($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 972} {:cexpr "dma_supported:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 1} true;
    call {:si_unique_call 973} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 974} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dma_set_mask: ref;

axiom dma_set_mask == $sub.ref(0, 625192);

procedure dma_set_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_set_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 975} {:cexpr "dma_set_mask:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 1} true;
    call {:si_unique_call 976} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 977} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __pci_enable_wake: ref;

axiom __pci_enable_wake == $sub.ref(0, 626224);

procedure __pci_enable_wake($p0: ref, $i1: i32, $i2: i1, $i3: i1) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_enable_wake($p0: ref, $i1: i32, $i2: i1, $i3: i1) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 978} {:cexpr "__pci_enable_wake:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 979} {:cexpr "__pci_enable_wake:arg:arg2"} boogie_si_record_i1($i2);
    call {:si_unique_call 980} {:cexpr "__pci_enable_wake:arg:arg3"} boogie_si_record_i1($i3);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 1} true;
    call {:si_unique_call 981} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 982} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_save_state: ref;

axiom pci_save_state == $sub.ref(0, 627256);

procedure pci_save_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_save_state($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 1} true;
    call {:si_unique_call 983} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 984} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_choose_state: ref;

axiom pci_choose_state == $sub.ref(0, 628288);

procedure pci_choose_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.36, $CurrAddr;



implementation pci_choose_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.36 := $store.i32($M.36, $p3, $i1);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 1} true;
    call {:si_unique_call 986} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 987} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const skd_destruct: ref;

axiom skd_destruct == $sub.ref(0, 629320);

procedure skd_destruct($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $CurrAddr;



implementation skd_destruct($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i24;
  var $i36: i24;
  var $i37: i24;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i24;
  var $i55: i24;
  var $i56: i24;
  var $p57: ref;
  var $p58: ref;
  var $i59: i8;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i24;
  var $i74: i24;
  var $i75: i24;
  var $p76: ref;
  var $p77: ref;
  var $i78: i8;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i24;
  var $i93: i24;
  var $i94: i24;
  var $p95: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i64;
  var $i99: i64;
  var $i100: i64;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i24;
  var $i112: i24;
  var $i113: i24;
  var $p114: ref;
  var $p115: ref;
  var $i116: i8;
  var $i117: i64;
  var $i118: i64;
  var $i119: i64;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i24;
  var $i131: i24;
  var $i132: i24;
  var $p133: ref;
  var $p134: ref;
  var $i135: i8;
  var $i136: i64;
  var $i137: i64;
  var $i138: i64;
  var $i139: i1;
  var $p140: ref;
  var $p141: ref;
  var $p143: ref;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p10, .str.27);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str.348);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p12, .str.29);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p13, .str.169);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.7, $p15);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 4759);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p15, $i18);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p19, 0);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.8, $p20);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 996} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} skd_free_disk($p0);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p29, .str.27);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p30, .str.348);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p31, .str.29);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p32, .str.168);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i35 := $load.i24($M.7, $p34);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i36 := $and.i24($i35, $sub.i24(0, 262144));
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i37 := $or.i24($i36, 4762);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p34, $i37);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p38, 0);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.8, $p39);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i64($i40);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i42 := $and.i64($i41, 1);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 1000} {:cexpr "tmp___0"} boogie_si_record_i64($i43);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} skd_free_sksb($p0);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p48, .str.27);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p49, .str.348);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p50, .str.29);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p51, .str.167);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i54 := $load.i24($M.7, $p53);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i55 := $and.i24($i54, $sub.i24(0, 262144));
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i56 := $or.i24($i55, 4765);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p53, $i56);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p57, 0);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.8, $p58);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i64($i59);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i61 := $and.i64($i60, 1);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} $i62 := ldv__builtin_expect($i61, 0);
    call {:si_unique_call 1004} {:cexpr "tmp___1"} boogie_si_record_i64($i62);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} skd_free_skspcl($p0);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p67, .str.27);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p68, .str.348);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p69, .str.29);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p70, .str.166);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i73 := $load.i24($M.7, $p72);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i74 := $and.i24($i73, $sub.i24(0, 262144));
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i75 := $or.i24($i74, 4768);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p72, $i75);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p76, 0);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.8, $p77);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i64($i78);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i80 := $and.i64($i79, 1);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} $i81 := ldv__builtin_expect($i80, 0);
    call {:si_unique_call 1008} {:cexpr "tmp___2"} boogie_si_record_i64($i81);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} skd_free_skreq($p0);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p86, .str.27);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p87, .str.348);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p88, .str.29);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p89, .str.165);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i92 := $load.i24($M.7, $p91);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i93 := $and.i24($i92, $sub.i24(0, 262144));
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i94 := $or.i24($i93, 4771);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p91, $i94);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p95, 0);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.8, $p96);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i64($i97);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i99 := $and.i64($i98, 1);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} $i100 := ldv__builtin_expect($i99, 0);
    call {:si_unique_call 1012} {:cexpr "tmp___3"} boogie_si_record_i64($i100);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} skd_free_skmsg($p0);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p105, .str.27);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p106, .str.348);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p107, .str.29);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p108, .str.164);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i111 := $load.i24($M.7, $p110);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i112 := $and.i24($i111, $sub.i24(0, 262144));
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i113 := $or.i24($i112, 4774);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p110, $i113);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p114, 0);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.8, $p115);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i64($i116);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i118 := $and.i64($i117, 1);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} $i119 := ldv__builtin_expect($i118, 0);
    call {:si_unique_call 1016} {:cexpr "tmp___4"} boogie_si_record_i64($i119);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i120 := $ne.i64($i119, 0);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} skd_free_skcomp($p0);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p124, .str.27);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p125, .str.348);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p126, .str.29);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p127, .str.349);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i130 := $load.i24($M.7, $p129);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i131 := $and.i24($i130, $sub.i24(0, 262144));
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i132 := $or.i24($i131, 4777);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p129, $i132);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p133, 0);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.8, $p134);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i64($i135);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i137 := $and.i64($i136, 1);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} $i138 := ldv__builtin_expect($i137, 0);
    call {:si_unique_call 1020} {:cexpr "tmp___5"} boogie_si_record_i64($i138);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i139 := $ne.i64($i138, 0);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p0);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} kfree($p143);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i139 == 1;
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} vslice_dummy_var_187 := __dynamic_pr_debug.ref.ref.ref.ref.i32($p7, .str.349, $p141, .str.348, 4777);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i120 == 1;
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} vslice_dummy_var_186 := __dynamic_pr_debug.ref.ref.ref.ref.i32($p6, .str.164, $p122, .str.348, 4774);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i101 == 1;
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} vslice_dummy_var_185 := __dynamic_pr_debug.ref.ref.ref.ref.i32($p5, .str.165, $p103, .str.348, 4771);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i82 == 1;
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} vslice_dummy_var_184 := __dynamic_pr_debug.ref.ref.ref.ref.i32($p4, .str.166, $p84, .str.348, 4768);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i63 == 1;
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} vslice_dummy_var_183 := __dynamic_pr_debug.ref.ref.ref.ref.i32($p3, .str.167, $p65, .str.348, 4765);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i44 == 1;
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} vslice_dummy_var_182 := __dynamic_pr_debug.ref.ref.ref.ref.i32($p2, .str.168, $p46, .str.348, 4762);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} vslice_dummy_var_181 := __dynamic_pr_debug.ref.ref.ref.ref.i32($p1, .str.169, $p27, .str.348, 4759);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 630352);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} dev_set_drvdata($p2, $p1);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 631384);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p1);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    return;
}



const skd_free_disk: ref;

axiom skd_free_disk == $sub.ref(0, 632416);

procedure skd_free_disk($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation skd_free_disk($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(144, 1));
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(144, 1));
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, $0.ref);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 1752)), $mul.ref(1672, 1));
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 1752)), $mul.ref(1688, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 16);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p6);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} put_disk($p2);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} blk_cleanup_queue($p6);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} del_gendisk($p2);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const skd_free_sksb: ref;

axiom skd_free_sksb == $sub.ref(0, 633448);

procedure skd_free_sksb($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation skd_free_sksb($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $i33: i64;
  var $p35: ref;
  var $p37: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(136, 1));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(136, 1));
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, $0.ref);
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(144, 1));
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p14, 0);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(152, 1));
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(152, 1));
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p26, $0.ref);
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(160, 1));
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p27, 0);
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    $p32 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.1, $p32);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} skd_free_sg_list($p0, $p30, 1, $i33);
    $p35 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p35, $0.ref);
    $p37 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p37, 0);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64(128);
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(152, 1));
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(160, 1));
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.1, $p24);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} pci_free_consistent($p20, $i21, $p23, $i25);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64(512);
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(136, 1));
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(144, 1));
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.1, $p11);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} pci_free_consistent($p7, $i8, $p10, $i12);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const skd_free_skspcl: ref;

axiom skd_free_skspcl == $sub.ref(0, 634480);

procedure skd_free_skspcl($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation skd_free_skspcl($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i64;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i8: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(344, 1));
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(888, 1));
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i6, 0);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(344, 1));
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} kfree($p45);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(344, 1));
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p46, $0.ref);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb8;

  $bb8:
    call $p9, $p10, $i11, $p13, $p14, $i15, $i16, $p17, $p18, $i19, $p20, $p21, $p22, $i23, $p24, $p25, $p27, $p28, $p30, $i31, $p33, $p35, $p37, $p38, $p39, $i40, $i41, $i42, $i8 := skd_free_skspcl_loop_$bb8($p0, $p5, $p9, $p10, $i11, $p13, $p14, $i15, $i16, $p17, $p18, $i19, $p20, $p21, $p22, $i23, $p24, $p25, $p27, $p28, $p30, $i31, $p33, $p35, $p37, $p38, $p39, $i40, $i41, $i42, $i8);
    goto $bb8_last;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(344, 1));
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i8);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref($i11, 168)), $mul.ref(152, 1));
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p10, $mul.ref($i11, 168)), $mul.ref(152, 1));
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p24, $0.ref);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p10, $mul.ref($i11, 168)), $mul.ref(160, 1));
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p25, 0);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p10, $mul.ref($i11, 168)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p10, $mul.ref($i11, 168)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.1, $p30);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} skd_free_sg_list($p0, $p28, 256, $i31);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p10, $mul.ref($i11, 168)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p33, $0.ref);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p10, $mul.ref($i11, 168)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p35, 0);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p10, $mul.ref($i11, 168)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.1, $p37);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} kfree($p39);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i8, 1);
    call {:si_unique_call 1033} {:cexpr "i"} boogie_si_record_i32($i40);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.1, $p5);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i42 := $ugt.i32($i41, $i40);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i40;
    goto $bb13_dummy;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64(128);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p10, $mul.ref($i11, 168)), $mul.ref(152, 1));
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p10, $mul.ref($i11, 168)), $mul.ref(160, 1));
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.1, $p22);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} pci_free_consistent($p18, $i19, $p21, $i23);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5007;
}



const skd_free_skreq: ref;

axiom skd_free_skreq == $sub.ref(0, 635512);

procedure skd_free_skreq($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation skd_free_skreq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i8: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(328, 1));
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(280, 1));
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i6, 0);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(328, 1));
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} kfree($p29);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(328, 1));
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p30, $0.ref);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb8;

  $bb8:
    call $p9, $p10, $i11, $p13, $p14, $p15, $i16, $p17, $i18, $p19, $p20, $p21, $p22, $p23, $i24, $i25, $i26, $i8 := skd_free_skreq_loop_$bb8($p0, $p5, $p9, $p10, $i11, $p13, $p14, $p15, $i16, $p17, $i18, $p19, $p20, $p21, $p22, $p23, $i24, $i25, $i26, $i8);
    goto $bb8_last;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(328, 1));
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i8);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref($i11, 128)), $mul.ref(64, 1));
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(892, 1));
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p10, $mul.ref($i11, 128)), $mul.ref(72, 1));
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.1, $p17);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} skd_free_sg_list($p0, $p14, $i16, $i18);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p10, $mul.ref($i11, 128)), $mul.ref(64, 1));
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p19, $0.ref);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p10, $mul.ref($i11, 128)), $mul.ref(72, 1));
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p20, 0);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p10, $mul.ref($i11, 128)), $mul.ref(48, 1));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} kfree($p23);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i8, 1);
    call {:si_unique_call 1037} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p5);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i26 := $ugt.i32($i25, $i24);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i24;
    goto $bb10_dummy;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5072;
}



const skd_free_skmsg: ref;

axiom skd_free_skmsg == $sub.ref(0, 636544);

procedure skd_free_skmsg($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation skd_free_skmsg($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i8: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(312, 1));
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(276, 1));
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i6, 0);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(312, 1));
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} kfree($p44);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(312, 1));
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p45, $0.ref);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb8;

  $bb8:
    call $p9, $p10, $i11, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $i20, $i21, $p22, $p23, $p24, $i25, $p26, $i27, $i28, $i29, $p30, $p31, $p32, $p33, $p34, $p35, $i36, $p37, $p38, $i39, $i40, $i41, $i8 := skd_free_skmsg_loop_$bb8($p0, $p5, $p9, $p10, $i11, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $i20, $i21, $p22, $p23, $p24, $i25, $p26, $i27, $i28, $i29, $p30, $p31, $p32, $p33, $p34, $p35, $i36, $p37, $p38, $i39, $i40, $i41, $i8);
    goto $bb8_last;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(312, 1));
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i8);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref($i11, 48)), $mul.ref(32, 1));
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p10, $mul.ref($i11, 48)), $mul.ref(32, 1));
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p37, $0.ref);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p10, $mul.ref($i11, 48)), $mul.ref(40, 1));
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p38, 0);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i8, 1);
    call {:si_unique_call 1040} {:cexpr "i"} boogie_si_record_i32($i39);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.1, $p5);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i41 := $ugt.i32($i40, $i39);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i41 == 1);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i39;
    goto $bb13_dummy;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p10, $mul.ref($i11, 48)), $mul.ref(32, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p10, $mul.ref($i11, 48)), $mul.ref(28, 1));
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p18, $mul.ref($i21, 1));
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p10, $mul.ref($i11, 48)), $mul.ref(32, 1));
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p23, $p22);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p10, $mul.ref($i11, 48)), $mul.ref(40, 1));
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.1, $p24);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p10, $mul.ref($i11, 48)), $mul.ref(28, 1));
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p26);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i25, $i28);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p10, $mul.ref($i11, 48)), $mul.ref(40, 1));
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p30, $i29);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p10, $mul.ref($i11, 48)), $mul.ref(32, 1));
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p10, $mul.ref($i11, 48)), $mul.ref(40, 1));
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.1, $p35);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} pci_free_consistent($p32, 512, $p34, $i36);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5120;
}



const skd_free_skcomp: ref;

axiom skd_free_skcomp == $sub.ref(0, 637576);

procedure skd_free_skcomp($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation skd_free_skcomp($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(640, 1));
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(640, 1));
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, $0.ref);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(656, 1));
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p14, 0);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64(2048);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(640, 1));
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(656, 1));
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.1, $p11);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} pci_free_consistent($p6, $i7, $p10, $i12);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_free_consistent: ref;

axiom pci_free_consistent == $sub.ref(0, 638608);

procedure pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} {:cexpr "pci_free_consistent:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1044} {:cexpr "pci_free_consistent:arg:dma_handle"} boogie_si_record_i64($i3);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} dma_free_attrs($p7, $i1, $p2, $i3, $0.ref);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 639640);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_188: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} {:cexpr "dma_free_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1047} {:cexpr "dma_free_attrs:arg:bus"} boogie_si_record_i64($i3);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $p5 := get_dma_ops($p0);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $i6 := arch_local_save_flags();
    call {:si_unique_call 1050} {:cexpr "_flags"} boogie_si_record_i64($i6);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i7 := arch_irqs_disabled_flags($i6);
    call {:si_unique_call 1052} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 1053} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 1055} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} vslice_dummy_var_188 := ldv__builtin_expect($i17, 0);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} debug_dma_free_coherent($p0, $i1, $p2, $i3);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    call {:si_unique_call 1059} devirtbounce.13($p24, $p0, $i1, $p2, $i3, $p4);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} warn_slowpath_null(.str.350, 166);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 640672);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.1, pv_irq_ops);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1061} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 1063} $i7 := devirtbounce.14(0, 44, pv_irq_ops, 1);
    call {:si_unique_call 1064} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 1062} devirtbounce(0, .str.351, 804, 12);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_save_flags_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 641704);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const debug_dma_free_coherent: ref;

axiom debug_dma_free_coherent == $sub.ref(0, 642736);

procedure debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} {:cexpr "debug_dma_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1067} {:cexpr "debug_dma_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    return;
}



const skd_free_sg_list: ref;

axiom skd_free_sg_list == $sub.ref(0, 643768);

procedure skd_free_sg_list($p0: ref, $p1: ref, $i2: i32, $i3: i64);
  free requires assertsPassed;



implementation skd_free_sg_list($p0: ref, $p1: ref, $i2: i32, $i3: i64)
{
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} {:cexpr "skd_free_sg_list:arg:n_sg"} boogie_si_record_i32($i2);
    call {:si_unique_call 1069} {:cexpr "skd_free_sg_list:arg:dma_addr"} boogie_si_record_i64($i3);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i2, 32);
    call {:si_unique_call 1070} {:cexpr "nbytes"} boogie_si_record_i32($i6);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i6);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} pci_free_consistent($p8, $i9, $p10, $i3);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const del_gendisk: ref;

axiom del_gendisk == $sub.ref(0, 644800);

procedure del_gendisk($p0: ref);
  free requires assertsPassed;



implementation del_gendisk($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    return;
}



const blk_cleanup_queue: ref;

axiom blk_cleanup_queue == $sub.ref(0, 645832);

procedure blk_cleanup_queue($p0: ref);
  free requires assertsPassed;



implementation blk_cleanup_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    return;
}



const put_disk: ref;

axiom put_disk == $sub.ref(0, 646864);

procedure put_disk($p0: ref);
  free requires assertsPassed;



implementation put_disk($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    return;
}



const register_blkdev: ref;

axiom register_blkdev == $sub.ref(0, 647896);

procedure register_blkdev($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_blkdev($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1072} {:cexpr "register_blkdev:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1073} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1074} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const skd_construct: ref;

axiom skd_construct == $sub.ref(0, 648928);

procedure skd_construct($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $M.37, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.11, $CurrAddr, assertsPassed;



implementation skd_construct($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i24;
  var $i73: i24;
  var $i74: i24;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i64;
  var $i79: i64;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i24;
  var $i94: i24;
  var $i95: i24;
  var $p96: ref;
  var $p97: ref;
  var $i98: i8;
  var $i99: i64;
  var $i100: i64;
  var $i101: i64;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i24;
  var $i115: i24;
  var $i116: i24;
  var $p117: ref;
  var $p118: ref;
  var $i119: i8;
  var $i120: i64;
  var $i121: i64;
  var $i122: i64;
  var $i123: i1;
  var $p124: ref;
  var $p125: ref;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i24;
  var $i136: i24;
  var $i137: i24;
  var $p138: ref;
  var $p139: ref;
  var $i140: i8;
  var $i141: i64;
  var $i142: i64;
  var $i143: i64;
  var $i144: i1;
  var $p145: ref;
  var $p146: ref;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i24;
  var $i157: i24;
  var $i158: i24;
  var $p159: ref;
  var $p160: ref;
  var $i161: i8;
  var $i162: i64;
  var $i163: i64;
  var $i164: i64;
  var $i165: i1;
  var $p166: ref;
  var $p167: ref;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $i177: i24;
  var $i178: i24;
  var $i179: i24;
  var $p180: ref;
  var $p181: ref;
  var $i182: i8;
  var $i183: i64;
  var $i184: i64;
  var $i185: i64;
  var $i186: i1;
  var $p187: ref;
  var $p188: ref;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $i198: i24;
  var $i199: i24;
  var $i200: i24;
  var $p201: ref;
  var $p202: ref;
  var $i203: i8;
  var $i204: i64;
  var $i205: i64;
  var $i206: i64;
  var $i207: i1;
  var $p208: ref;
  var $p209: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $i217: i24;
  var $i218: i24;
  var $i219: i24;
  var $p220: ref;
  var $p221: ref;
  var $i222: i8;
  var $i223: i64;
  var $i224: i64;
  var $i225: i64;
  var $i226: i1;
  var $p227: ref;
  var $p228: ref;
  var $p19: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var vslice_dummy_var_189: i32;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: ref;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i32;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i12 := $M.2;
    call {:si_unique_call 1086} {:cexpr "blk_major"} boogie_si_record_i32($i12);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $p13 := kzalloc(1000, 208);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p20, 0);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p21, $p0);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i22 := $M.37;
    call {:si_unique_call 1090} {:cexpr "tmp___1"} boogie_si_record_i32($i22);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i23 := $M.37;
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 1);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $M.37 := $i24;
    call {:si_unique_call 1091} {:cexpr "skd_next_devno"} boogie_si_record_i32($i24);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(180, 1));
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p25, $i22);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(184, 1));
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p26, $i12);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i27 := $M.38;
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(40, 1));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p28, $i27);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(180, 1));
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.1, $p31);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} vslice_dummy_var_190 := sprintf.ref.ref.i32($p30, .str.160, $i32);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(272, 1));
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p34, 0);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i35 := $M.22;
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(280, 1));
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p36, $i35);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i37 := $M.22;
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(276, 1));
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p38, $i37);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $i39 := $M.39;
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(888, 1));
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p40, $i39);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(264, 1));
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p41, 1);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(268, 1));
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p42, 1);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(900, 1));
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p43, 99);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i44 := $M.40;
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(892, 1));
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p45, $i44);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i46 := $M.41;
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(904, 1));
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p47, $i46);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(176, 1));
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} atomic_set($p48, 0);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(72, 1));
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} vslice_dummy_var_191 := spinlock_check($p49);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} __raw_spin_lock_init($p53, .str.161, $p1);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(928, 1));
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} __init_work($p54, 0);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p55, 137438953408);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(928, 1)), $mul.ref(0, 1));
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p3);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.1;
    cmdloc_dummy_var_7 := $M.1;
    call {:si_unique_call 1097} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p58, $p59, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_8;
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(928, 1)), $mul.ref(32, 1));
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} lockdep_init_map($p61, .str.162, $p2, 0);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(928, 1)), $mul.ref(8, 1));
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} INIT_LIST_HEAD($p63);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(928, 1)), $mul.ref(24, 1));
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p65, skd_completion_worker);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p66, .str.27);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p67, .str.163);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p68, .str.29);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p69, .str.164);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i72 := $load.i24($M.7, $p71);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i73 := $and.i24($i72, $sub.i24(0, 262144));
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i74 := $or.i24($i73, 4540);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p71, $i74);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p75, 0);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.8, $p76);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i64($i77);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i79 := $and.i64($i78, 1);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} $i80 := ldv__builtin_expect($i79, 0);
    call {:si_unique_call 1101} {:cexpr "tmp___2"} boogie_si_record_i64($i80);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} $i85 := skd_cons_skcomp($p14);
    call {:si_unique_call 1104} {:cexpr "rc"} boogie_si_record_i32($i85);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i85, 0);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p87, .str.27);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p88, .str.163);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p89, .str.29);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p90, .str.165);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i93 := $load.i24($M.7, $p92);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i94 := $and.i24($i93, $sub.i24(0, 262144));
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i95 := $or.i24($i94, 4545);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p92, $i95);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p96, 0);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.8, $p97);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i64($i98);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i100 := $and.i64($i99, 1);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} $i101 := ldv__builtin_expect($i100, 0);
    call {:si_unique_call 1108} {:cexpr "tmp___3"} boogie_si_record_i64($i101);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $i106 := skd_cons_skmsg($p14);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    call {:si_unique_call 1111} {:cexpr "rc"} boogie_si_record_i32($i106);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $i107 := $slt.i32($i106, 0);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p108, .str.27);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p109, .str.163);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p110, .str.29);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p111, .str.166);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i114 := $load.i24($M.7, $p113);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i115 := $and.i24($i114, $sub.i24(0, 262144));
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i116 := $or.i24($i115, 4550);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p113, $i116);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p117, 0);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i119 := $load.i8($M.8, $p118);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i120 := $zext.i8.i64($i119);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i121 := $and.i64($i120, 1);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} $i122 := ldv__builtin_expect($i121, 0);
    call {:si_unique_call 1113} {:cexpr "tmp___4"} boogie_si_record_i64($i122);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i123 := $ne.i64($i122, 0);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} $i127 := skd_cons_skreq($p14);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    call {:si_unique_call 1116} {:cexpr "rc"} boogie_si_record_i32($i127);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i127, 0);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p129, .str.27);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p130, .str.163);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p131, .str.29);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p132, .str.167);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p133);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i135 := $load.i24($M.7, $p134);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i136 := $and.i24($i135, $sub.i24(0, 262144));
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i137 := $or.i24($i136, 4555);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p134, $i137);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p138, 0);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.8, $p139);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i64($i140);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i142 := $and.i64($i141, 1);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} $i143 := ldv__builtin_expect($i142, 0);
    call {:si_unique_call 1118} {:cexpr "tmp___5"} boogie_si_record_i64($i143);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i144 := $ne.i64($i143, 0);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} $i148 := skd_cons_skspcl($p14);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    call {:si_unique_call 1121} {:cexpr "rc"} boogie_si_record_i32($i148);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i149 := $slt.i32($i148, 0);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p150, .str.27);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p151, .str.163);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p152, .str.29);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p153, .str.168);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p154);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $i156 := $load.i24($M.7, $p155);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i157 := $and.i24($i156, $sub.i24(0, 262144));
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $i158 := $or.i24($i157, 4560);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p155, $i158);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p159, 0);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $i161 := $load.i8($M.8, $p160);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i162 := $zext.i8.i64($i161);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i163 := $and.i64($i162, 1);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} $i164 := ldv__builtin_expect($i163, 0);
    call {:si_unique_call 1123} {:cexpr "tmp___6"} boogie_si_record_i64($i164);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i165 := $ne.i64($i164, 0);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $i169 := skd_cons_sksb($p14);
    call {:si_unique_call 1126} {:cexpr "rc"} boogie_si_record_i32($i169);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $i170 := $slt.i32($i169, 0);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p171, .str.27);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p172, .str.163);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p173, .str.29);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p174, .str.169);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p175);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i177 := $load.i24($M.7, $p176);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i178 := $and.i24($i177, $sub.i24(0, 262144));
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i179 := $or.i24($i178, 4565);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p176, $i179);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p180, 0);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i182 := $load.i8($M.8, $p181);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i183 := $zext.i8.i64($i182);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i184 := $and.i64($i183, 1);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} $i185 := ldv__builtin_expect($i184, 0);
    call {:si_unique_call 1128} {:cexpr "tmp___7"} boogie_si_record_i64($i185);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i186 := $ne.i64($i185, 0);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} $i190 := skd_cons_disk($p14);
    call {:si_unique_call 1131} {:cexpr "rc"} boogie_si_record_i32($i190);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i191 := $slt.i32($i190, 0);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p192, .str.27);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p193, .str.163);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p194, .str.29);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p195, .str.170);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p197 := $bitcast.ref.ref($p196);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i198 := $load.i24($M.7, $p197);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i199 := $and.i24($i198, $sub.i24(0, 262144));
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i200 := $or.i24($i199, 4570);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p197, $i200);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p201, 0);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i203 := $load.i8($M.8, $p202);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i204 := $zext.i8.i64($i203);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $i205 := $and.i64($i204, 1);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $i206 := ldv__builtin_expect($i205, 0);
    call {:si_unique_call 1133} {:cexpr "tmp___8"} boogie_si_record_i64($i206);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i207 := $ne.i64($i206, 0);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i207} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p19 := $p13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $r := $p19;
    return;

  $bb42:
    assume $i207 == 1;
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p209 := $bitcast.ref.ref($p208);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} vslice_dummy_var_198 := __dynamic_pr_debug.ref.ref.ref.ref.i32($p10, .str.170, $p209, .str.163, 4570);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i191 == 1;
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p211, .str.27);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p212, .str.163);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p213, .str.29);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p214, .str.171);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p216 := $bitcast.ref.ref($p215);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i217 := $load.i24($M.7, $p216);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i218 := $and.i24($i217, $sub.i24(0, 262144));
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i219 := $or.i24($i218, 4575);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p216, $i219);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p220, 0);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i222 := $load.i8($M.8, $p221);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i223 := $zext.i8.i64($i222);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i224 := $and.i64($i223, 1);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} $i225 := ldv__builtin_expect($i224, 0);
    call {:si_unique_call 1106} {:cexpr "tmp___9"} boogie_si_record_i64($i225);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i226 := $ne.i64($i225, 0);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i226} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} skd_destruct($p14);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $p19 := $0.ref;
    goto $bb3;

  $bb45:
    assume $i226 == 1;
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $p228 := $bitcast.ref.ref($p227);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} vslice_dummy_var_199 := __dynamic_pr_debug.ref.ref.ref.ref.i32($p11, .str.171, $p228, .str.163, 4575);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb36:
    assume $i186 == 1;
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $p188 := $bitcast.ref.ref($p187);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} vslice_dummy_var_197 := __dynamic_pr_debug.ref.ref.ref.ref.i32($p9, .str.169, $p188, .str.163, 4565);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i170 == 1;
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb30:
    assume $i165 == 1;
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p166);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} vslice_dummy_var_196 := __dynamic_pr_debug.ref.ref.ref.ref.i32($p8, .str.168, $p167, .str.163, 4560);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i149 == 1;
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i144 == 1;
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p145);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} vslice_dummy_var_195 := __dynamic_pr_debug.ref.ref.ref.ref.i32($p7, .str.167, $p146, .str.163, 4555);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i128 == 1;
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i123 == 1;
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} vslice_dummy_var_194 := __dynamic_pr_debug.ref.ref.ref.ref.i32($p6, .str.166, $p125, .str.163, 4550);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i107 == 1;
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i102 == 1;
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} vslice_dummy_var_193 := __dynamic_pr_debug.ref.ref.ref.ref.i32($p5, .str.165, $p104, .str.163, 4545);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i86 == 1;
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i81 == 1;
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p14, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} vslice_dummy_var_192 := __dynamic_pr_debug.ref.ref.ref.ref.i32($p4, .str.164, $p83, .str.163, 4540);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} $p17 := pci_name($p0);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} vslice_dummy_var_189 := printk.ref.ref(.str.159, $p17);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p19 := $0.ref;
    goto $bb3;

  SeqInstr_160:
    assume !assertsPassed;
    return;
}



const skd_pci_info: ref;

axiom skd_pci_info == $sub.ref(0, 649960);

procedure skd_pci_info($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation skd_pci_info($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i16;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i16;
  var $i22: i32;
  var $i23: i1;
  var $i25: i32;
  var $i26: i1;
  var $p29: ref;
  var $i30: i32;
  var $p32: ref;
  var vslice_dummy_var_200: ref;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: ref;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: ref;
  var vslice_dummy_var_205: ref;
  var vslice_dummy_var_206: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $p2 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} vslice_dummy_var_200 := strcpy($p1, .str.271);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} $i7 := pci_find_capability($p6, 16);
    call {:si_unique_call 1141} {:cexpr "pcie_reg"} boogie_si_record_i32($i7);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i7, 18);
    call {:si_unique_call 1142} {:cexpr "pcie_reg"} boogie_si_record_i32($i9);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} vslice_dummy_var_201 := pci_read_config_word($p11, $i9, $p3);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.35, $p3);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 15);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    call {:si_unique_call 1144} {:cexpr "lspeed"} boogie_si_record_i16($i16);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.35, $p3);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 1008);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i20 := $ashr.i32($i19, 4);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i20);
    call {:si_unique_call 1145} {:cexpr "lwidth"} boogie_si_record_i16($i21);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i16);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 1);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i23 == 1);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i16);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} vslice_dummy_var_206 := strcat($p1, .str.274);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p2);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i21);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} vslice_dummy_var_203 := snprintf.ref.i64.ref.i32($p29, 6, .str.275, $i30);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p2);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} vslice_dummy_var_204 := strcat($p1, $p32);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} vslice_dummy_var_205 := strcat($p1, .str.273);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i23 == 1;
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} vslice_dummy_var_202 := strcat($p1, .str.272);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const skd_bdev_attach: ref;

axiom skd_bdev_attach == $sub.ref(0, 650992);

procedure skd_bdev_attach($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation skd_bdev_attach($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var vslice_dummy_var_207: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p2, .str.27);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p3, .str.339);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p4, .str.29);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p5, .str.340);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.7, $p7);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 4811);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p7, $i10);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p11, 0);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.8, $p12);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1153} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(144, 1));
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} add_disk($p22);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} vslice_dummy_var_207 := __dynamic_pr_debug.ref.ref.ref.ref.i32($p1, .str.340, $p19, .str.339, 4811);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const add_disk: ref;

axiom add_disk == $sub.ref(0, 652024);

procedure add_disk($p0: ref);
  free requires assertsPassed;



implementation add_disk($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    return;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 653056);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const strcat: ref;

axiom strcat == $sub.ref(0, 654088);

procedure strcat($p0: ref, $p1: ref) returns ($r: ref);



const sprintf: ref;

axiom sprintf == $sub.ref(0, 655120);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 656152);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, $i1);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 657184);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 658216);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 659248);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 660280);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    return;
}



const skd_completion_worker: ref;

axiom skd_completion_worker == $sub.ref(0, 661312);

procedure skd_completion_worker($p0: ref);



const skd_cons_skcomp: ref;

axiom skd_cons_skcomp == $sub.ref(0, 662344);

procedure skd_cons_skcomp($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $CurrAddr;



implementation skd_cons_skcomp($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i30: i32;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var vslice_dummy_var_208: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i2 := $add.i32(2048, 8192);
    call {:si_unique_call 1160} {:cexpr "nbytes"} boogie_si_record_i32($i2);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p3, .str.27);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p4, .str.260);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p5, .str.29);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, .str.261);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.7, $p8);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 4166);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p8, $i11);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p12, 0);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.8, $p13);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1162} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i2);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(656, 1));
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} $p26 := pci_alloc_consistent($p23, $i24, $p25);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p27);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i2);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.1;
    call {:si_unique_call 1165} cmdloc_dummy_var_10 := $memset.i8(cmdloc_dummy_var_9, $p31, 0, $i32, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_10;
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(640, 1));
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p33, $p26);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p27);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref(2048, 40));
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(648, 1));
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p36, $p35);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} vslice_dummy_var_208 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32($p1, .str.261, $p20, .str.260, 4166, $i2, 256);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const skd_cons_skmsg: ref;

axiom skd_cons_skmsg == $sub.ref(0, 663376);

procedure skd_cons_skmsg($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $CurrAddr, assertsPassed;



implementation skd_cons_skmsg($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i64;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i43: i32;
  var $i92: i32;
  var $i42: i32;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i64;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i38: i32;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var vslice_dummy_var_209: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p2, .str.27);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p3, .str.262);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p4, .str.29);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p5, .str.263);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.7, $p7);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 4196);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p7, $i10);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p11, 0);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.8, $p12);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1168} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(276, 1));
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.1, $p27);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i28);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i30 := $mul.i64($i29, 48);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $p31 := kzalloc($i30, 208);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(312, 1));
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p33, $p31);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(312, 1));
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(276, 1));
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.1, $p39);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i41 := $ugt.i32($i40, 0);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $i42 := 0;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(312, 1));
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.1, $p93);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i95 := $sub.i32($i42, 1);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i96 := $zext.i32.i64($i95);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p94, $mul.ref($i96, 48)), $mul.ref(8, 1));
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p98, $0.ref);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(312, 1));
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.1, $p99);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(304, 1));
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p101, $p100);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb8:
    assume $i41 == 1;
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb11;

  $bb11:
    call $p44, $p45, $i46, $i48, $p49, $p50, $p51, $p52, $p53, $p54, $p55, $p56, $p57, $i58, $i59, $p60, $p61, $i62, $i63, $i64, $p65, $p66, $p67, $p68, $p69, $p70, $p71, $i72, $i73, $p74, $p75, $p76, $i77, $i78, $p79, $p80, $i81, $i82, $p83, $p84, $p85, $i86, $p87, $p88, $i89, $i90, $i91, $i43, $i92, cmdloc_dummy_var_11, cmdloc_dummy_var_12 := skd_cons_skmsg_loop_$bb11($p0, $p39, $p44, $p45, $i46, $i48, $p49, $p50, $p51, $p52, $p53, $p54, $p55, $p56, $p57, $i58, $i59, $p60, $p61, $i62, $i63, $i64, $p65, $p66, $p67, $p68, $p69, $p70, $p71, $i72, $i73, $p74, $p75, $p76, $i77, $i78, $p79, $p80, $i81, $i82, $p83, $p84, $p85, $i86, $p87, $p88, $i89, $i90, $i91, $i43, $i92, cmdloc_dummy_var_11, cmdloc_dummy_var_12);
    goto $bb11_last;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(312, 1));
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i46 := $zext.i32.i64($i43);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i43, 768);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p45, $mul.ref($i46, 48)), $mul.ref(16, 1));
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p49, $i48);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p45, $mul.ref($i46, 48)), $mul.ref(0, 1));
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p50, 0);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p45, $mul.ref($i46, 48)), $mul.ref(40, 1));
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $p54 := pci_alloc_consistent($p52, 576, $p53);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p45, $mul.ref($i46, 48)), $mul.ref(32, 1));
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p55, $p54);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p45, $mul.ref($i46, 48)), $mul.ref(32, 1));
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.1, $p56);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i58, 0);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p45, $mul.ref($i46, 48)), $mul.ref(32, 1));
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.1, $p60);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i64.i32($i62);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 63);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p45, $mul.ref($i46, 48)), $mul.ref(28, 1));
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p65, $i64);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p45, $mul.ref($i46, 48)), $mul.ref(32, 1));
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.1, $p66);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p67, $mul.ref(63, 1));
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p45, $mul.ref($i46, 48)), $mul.ref(32, 1));
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p69, $p68);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p45, $mul.ref($i46, 48)), $mul.ref(32, 1));
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.1, $p70);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i73 := $and.i64($i72, $sub.i64(0, 64));
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $p74 := $i2p.i64.ref($i73);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p45, $mul.ref($i46, 48)), $mul.ref(32, 1));
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p75, $p74);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p45, $mul.ref($i46, 48)), $mul.ref(40, 1));
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.1, $p76);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i78 := $add.i64($i77, 63);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p45, $mul.ref($i46, 48)), $mul.ref(40, 1));
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p79, $i78);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p45, $mul.ref($i46, 48)), $mul.ref(40, 1));
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.1, $p80);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i82 := $and.i64($i81, $sub.i64(0, 64));
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p45, $mul.ref($i46, 48)), $mul.ref(40, 1));
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p83, $i82);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p45, $mul.ref($i46, 48)), $mul.ref(32, 1));
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.1, $p84);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.1;
    call {:si_unique_call 1172} cmdloc_dummy_var_12 := $memset.i8(cmdloc_dummy_var_11, $p85, 0, 512, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_12;
    $i86 := $add.i64($i46, 1);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p45, $mul.ref($i86, 48));
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p45, $mul.ref($i46, 48)), $mul.ref(8, 1));
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p88, $p87);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i43, 1);
    call {:si_unique_call 1173} {:cexpr "i"} boogie_si_record_i32($i89);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.1, $p39);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i91 := $ugt.i32($i90, $i89);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i92 := $i89;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i42 := $i92;
    goto $bb10;

  $bb16:
    assume $i91 == 1;
    assume {:verifier.code 0} true;
    $i43 := $i89;
    goto $bb16_dummy;

  $bb13:
    assume $i59 == 1;
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 12);
    goto $bb6;

  $bb4:
    assume $i37 == 1;
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(276, 1));
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(276, 1));
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, $p22);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i25 := $mul.i64($i24, 48);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} vslice_dummy_var_209 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i64.i32.i64($p1, .str.263, $p19, .str.262, 4196, 48, $i21, $i25);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5812;
}



const skd_cons_skreq: ref;

axiom skd_cons_skreq == $sub.ref(0, 664408);

procedure skd_cons_skreq($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $CurrAddr, assertsPassed;



implementation skd_cons_skreq($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i24;
  var $i47: i24;
  var $i48: i24;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i64;
  var $i63: i64;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i74: i16;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i64;
  var $i80: i64;
  var $p81: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $i101: i64;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $i69: i32;
  var $i107: i32;
  var $i68: i32;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i64;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i39: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p3, .str.27);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p4, .str.264);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p5, .str.29);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, .str.265);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.7, $p8);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 4280);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p8, $i11);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p12, 0);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.8, $p13);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1177} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(280, 1));
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.1, $p28);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i31 := $mul.i64($i30, 120);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $p32 := kzalloc($i31, 208);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(328, 1));
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p34, $p32);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(328, 1));
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p40, .str.27);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p41, .str.264);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p42, .str.29);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p43, .str.266);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i46 := $load.i24($M.7, $p45);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i47 := $and.i24($i46, $sub.i24(0, 262144));
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $i48 := $or.i24($i47, 4292);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p45, $i48);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p49, 0);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.8, $p50);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i64($i51);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i53 := $and.i64($i52, 1);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 1181} {:cexpr "tmp___1"} boogie_si_record_i64($i54);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(280, 1));
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.1, $p65);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i67 := $ugt.i32($i66, 0);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $i68 := 0;
    assume {:branchcond $i67} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(328, 1));
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.1, $p108);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i110 := $sub.i32($i68, 1);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i111 := $zext.i32.i64($i110);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p109, $mul.ref($i111, 128)), $mul.ref(8, 1));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p113, $0.ref);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(328, 1));
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.1, $p114);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(320, 1));
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p116, $p115);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb11:
    assume $i67 == 1;
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i69 := 0;
    goto $bb14;

  $bb14:
    call $p70, $p71, $i72, $i74, $p75, $p76, $p77, $i78, $i79, $i80, $p81, $p83, $p84, $p85, $i86, $i87, $p88, $p89, $p90, $i91, $p92, $i93, $p94, $p95, $p96, $p97, $p98, $i99, $i100, $i101, $p102, $p103, $i104, $i105, $i106, $i69, $i107 := skd_cons_skreq_loop_$bb14($p0, $p65, $p70, $p71, $i72, $i74, $p75, $p76, $p77, $i78, $i79, $i80, $p81, $p83, $p84, $p85, $i86, $i87, $p88, $p89, $p90, $i91, $p92, $i93, $p94, $p95, $p96, $p97, $p98, $i99, $i100, $i101, $p102, $p103, $i104, $i105, $i106, $i69, $i107);
    goto $bb14_last;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(328, 1));
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.1, $p70);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $i72 := $zext.i32.i64($i69);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i16($i69);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p71, $mul.ref($i72, 128)), $mul.ref(16, 1));
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p75, $i74);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p71, $mul.ref($i72, 128)), $mul.ref(0, 1));
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p76, 0);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(892, 1));
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.1, $p77);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i78);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i80 := $mul.i64($i79, 40);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} $p81 := kzalloc($i80, 208);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p71, $mul.ref($i72, 128)), $mul.ref(48, 1));
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p83, $p81);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p71, $mul.ref($i72, 128)), $mul.ref(48, 1));
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.1, $p84);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p85);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i87 := $eq.i64($i86, 0);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p71, $mul.ref($i72, 128)), $mul.ref(48, 1));
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.1, $p88);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(892, 1));
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.1, $p90);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} sg_init_table($p89, $i91);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(892, 1));
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.1, $p92);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p71, $mul.ref($i72, 128)), $mul.ref(72, 1));
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $p95 := skd_cons_sg_list($p0, $i93, $p94);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p71, $mul.ref($i72, 128)), $mul.ref(64, 1));
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p96, $p95);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p71, $mul.ref($i72, 128)), $mul.ref(64, 1));
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.1, $p97);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $i100 := $eq.i64($i99, 0);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    $i101 := $add.i64($i72, 1);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($p71, $mul.ref($i101, 128));
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p71, $mul.ref($i72, 128)), $mul.ref(8, 1));
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p103, $p102);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i69, 1);
    call {:si_unique_call 1186} {:cexpr "i"} boogie_si_record_i32($i104);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.1, $p65);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i106 := $ugt.i32($i105, $i104);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i107 := $i104;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i68 := $i107;
    goto $bb13;

  $bb22:
    assume $i106 == 1;
    assume {:verifier.code 0} true;
    $i69 := $i104;
    goto $bb22_dummy;

  $bb19:
    assume $i100 == 1;
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 12);
    goto $bb6;

  $bb16:
    assume $i87 == 1;
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i55 == 1;
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(892, 1));
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.1, $p58);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(892, 1));
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.1, $p60);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i63 := $mul.i64($i62, 40);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} vslice_dummy_var_211 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i64.i64($p2, .str.266, $p57, .str.264, 4292, $i59, 40, $i63);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i38 == 1;
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(280, 1));
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(280, 1));
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i26 := $mul.i64($i25, 120);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} vslice_dummy_var_210 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i64.i32.i64($p1, .str.265, $p20, .str.264, 4280, 120, $i22, $i26);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5981;
}



const skd_cons_skspcl: ref;

axiom skd_cons_skspcl == $sub.ref(0, 665440);

procedure skd_cons_skspcl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $CurrAddr, assertsPassed;



implementation skd_cons_skspcl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i47: i16;
  var $i48: i32;
  var $i49: i32;
  var $i50: i16;
  var $p52: ref;
  var $p54: ref;
  var $i55: i64;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p73: ref;
  var $p76: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p83: ref;
  var $p84: ref;
  var $p86: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $i42: i32;
  var $i95: i32;
  var $i41: i32;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i64;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var vslice_dummy_var_212: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p2, .str.27);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p3, .str.267);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p4, .str.29);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p5, .str.268);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.7, $p7);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 4339);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p7, $i10);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p11, 0);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.8, $p12);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1189} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(888, 1));
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.1, $p27);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $i30 := $mul.i64($i29, 160);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} $p31 := kzalloc($i30, 208);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(344, 1));
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p33, $p31);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(344, 1));
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(888, 1));
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.1, $p38);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i40 := $ugt.i32($i39, 0);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i41 := 0;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(344, 1));
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.1, $p96);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i98 := $sub.i32($i41, 1);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i99 := $zext.i32.i64($i98);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p97, $mul.ref($i99, 168)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p102, $0.ref);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(344, 1));
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.1, $p103);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(336, 1));
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p105, $p104);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $i106 := 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $r := $i106;
    return;

  $bb8:
    assume $i40 == 1;
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb11;

  $bb11:
    call $p43, $p44, $i45, $i47, $i48, $i49, $i50, $p52, $p54, $i55, $p57, $p59, $p60, $p61, $i62, $p63, $p64, $p65, $p66, $p67, $i68, $i69, $p70, $p71, $i72, $p73, $p76, $p78, $p79, $i80, $i81, $p83, $p84, $p86, $p88, $p89, $i90, $i91, $i92, $i93, $i94, $i42, $i95, cmdloc_dummy_var_13, cmdloc_dummy_var_14 := skd_cons_skspcl_loop_$bb11($p0, $p38, $p43, $p44, $i45, $i47, $i48, $i49, $i50, $p52, $p54, $i55, $p57, $p59, $p60, $p61, $i62, $p63, $p64, $p65, $p66, $p67, $i68, $i69, $p70, $p71, $i72, $p73, $p76, $p78, $p79, $i80, $i81, $p83, $p84, $p86, $p88, $p89, $i90, $i91, $i92, $i93, $i94, $i42, $i95, cmdloc_dummy_var_13, cmdloc_dummy_var_14);
    goto $bb11_last;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(344, 1));
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i42);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i16($i42);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, 512);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p44, $mul.ref($i45, 168)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p52, $i50);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p44, $mul.ref($i45, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p54, 0);
    $i55 := $add.i64($i45, 1);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p44, $mul.ref($i55, 168)), $mul.ref(0, 1));
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p44, $mul.ref($i45, 168)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p59, $p57);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.1, $p60);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i62 := $zext.i32.i64(128);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p44, $mul.ref($i45, 168)), $mul.ref(160, 1));
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} $p64 := pci_alloc_consistent($p61, $i62, $p63);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p44, $mul.ref($i45, 168)), $mul.ref(152, 1));
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p65, $p64);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p44, $mul.ref($i45, 168)), $mul.ref(152, 1));
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.1, $p66);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $i69 := $eq.i64($i68, 0);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p44, $mul.ref($i45, 168)), $mul.ref(152, 1));
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.1, $p70);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i72 := $zext.i32.i64(128);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.1;
    call {:si_unique_call 1193} cmdloc_dummy_var_14 := $memset.i8(cmdloc_dummy_var_13, $p71, 0, $i72, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_14;
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} $p73 := kzalloc(10240, 208);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p44, $mul.ref($i45, 168)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p76, $p73);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p44, $mul.ref($i45, 168)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.1, $p78);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i81 := $eq.i64($i80, 0);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p44, $mul.ref($i45, 168)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} $p84 := skd_cons_sg_list($p0, 256, $p83);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p44, $mul.ref($i45, 168)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p86, $p84);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p44, $mul.ref($i45, 168)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.1, $p88);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p89);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i91 := $eq.i64($i90, 0);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i42, 1);
    call {:si_unique_call 1196} {:cexpr "i"} boogie_si_record_i32($i92);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.1, $p38);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i94 := $ugt.i32($i93, $i92);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i95 := $i92;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $i41 := $i95;
    goto $bb10;

  $bb22:
    assume $i94 == 1;
    assume {:verifier.code 0} true;
    $i42 := $i92;
    goto $bb22_dummy;

  $bb19:
    assume $i91 == 1;
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i106 := $sub.i32(0, 12);
    goto $bb25;

  $bb16:
    assume $i81 == 1;
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i69 == 1;
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume $i37 == 1;
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(888, 1));
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(888, 1));
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, $p22);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i25 := $mul.i64($i24, 160);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} vslice_dummy_var_212 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i64.i32.i64($p1, .str.268, $p19, .str.267, 4339, 160, $i21, $i25);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6103;
}



const skd_cons_sksb: ref;

axiom skd_cons_sksb == $sub.ref(0, 666472);

procedure skd_cons_sksb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation skd_cons_sksb($p0: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i16: i32;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p3, 256);
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p5, 0);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64(512);
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(144, 1));
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} $p10 := pci_alloc_consistent($p7, $i8, $p9);
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(136, 1));
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, $p10);
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(136, 1));
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(136, 1));
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64(512);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.1;
    call {:si_unique_call 1198} cmdloc_dummy_var_16 := $memset.i8(cmdloc_dummy_var_15, $p18, 0, $i19, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_16;
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64(128);
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(160, 1));
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} $p24 := pci_alloc_consistent($p21, $i22, $p23);
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(152, 1));
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p25, $p24);
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(152, 1));
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(152, 1));
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64(128);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.1;
    call {:si_unique_call 1200} cmdloc_dummy_var_18 := $memset.i8(cmdloc_dummy_var_17, $p31, 0, $i32, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_18;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} $p35 := skd_cons_sg_list($p0, 1, $p34);
    $p37 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p37, $p35);
    $p39 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} $i43 := skd_format_internal_skspcl($p0);
    call {:si_unique_call 1203} {:cexpr "tmp___0"} boogie_si_record_i32($i43);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb11:
    assume $i44 == 1;
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i42 == 1;
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i29 == 1;
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb3;
}



const skd_cons_disk: ref;

axiom skd_cons_disk == $sub.ref(0, 667504);

procedure skd_cons_disk($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation skd_cons_disk($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i16;
  var $i33: i32;
  var $i34: i16;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i24;
  var $i50: i24;
  var $i51: i24;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i5: i32;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} $p2 := alloc_disk(16);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(144, 1));
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, $p2);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(180, 1));
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} vslice_dummy_var_213 := sprintf.ref.ref.i32($p8, .str.269, $i10);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(184, 1));
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 1752)), $mul.ref(0, 1));
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p14, $i13);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(180, 1));
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i16, 16);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 1752)), $mul.ref(4, 1));
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p18, $i17);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 1752)), $mul.ref(1664, 1));
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p19, skd_blockdev_ops);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 1752)), $mul.ref(1680, 1));
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p21, $p0);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(72, 1));
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} $p23 := blk_init_queue(skd_request_fn, $p22);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(152, 1));
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p26, $p23);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 1752)), $mul.ref(1672, 1));
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p27, $p23);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p23, $mul.ref(0, 3880)), $mul.ref(1976, 1));
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p29, $p0);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} blk_queue_flush($p23, 6144);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(892, 1));
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} blk_queue_max_segments($p23, $i34);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} blk_queue_max_hw_sectors($p23, 2048);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} blk_queue_io_opt($p23, 8192);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 3880)), $mul.ref(2968, 1)), $mul.ref(56, 1));
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p36, 8192);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 3880)), $mul.ref(2968, 1)), $mul.ref(60, 1));
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p38, 0);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 3880)), $mul.ref(2968, 1)), $mul.ref(48, 1));
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p40, 8388607);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 3880)), $mul.ref(2968, 1)), $mul.ref(73, 1));
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p42, 1);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} queue_flag_set_unlocked(14, $p23);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} queue_flag_set_unlocked(12, $p23);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} ldv_spin_lock();
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p43, .str.27);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p44, .str.270);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p45, .str.29);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p46, .str.86);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i49 := $load.i24($M.7, $p48);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i50 := $and.i24($i49, $sub.i24(0, 262144));
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i51 := $or.i24($i50, 4492);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p48, $i51);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p52, 0);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.8, $p53);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i64($i54);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i56 := $and.i64($i55, 1);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} $i57 := ldv__builtin_expect($i56, 0);
    call {:si_unique_call 1216} {:cexpr "tmp"} boogie_si_record_i64($i57);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(152, 1));
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.1, $p64);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} blk_stop_queue($p65);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(72, 1));
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} spin_unlock_irqrestore($p66, $u0);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb8:
    assume $i58 == 1;
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} vslice_dummy_var_214 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref($p1, .str.86, $p60, .str.270, 4492, $p62);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;
}



const alloc_disk: ref;

axiom alloc_disk == $sub.ref(0, 668536);

procedure alloc_disk($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_disk($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} {:cexpr "alloc_disk:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} $p1 := external_alloc();
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const blk_init_queue: ref;

axiom blk_init_queue == $sub.ref(0, 669568);

procedure blk_init_queue($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation blk_init_queue($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} $p2 := external_alloc();
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const blk_queue_flush: ref;

axiom blk_queue_flush == $sub.ref(0, 670600);

procedure blk_queue_flush($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_queue_flush($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} {:cexpr "blk_queue_flush:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    return;
}



const blk_queue_max_segments: ref;

axiom blk_queue_max_segments == $sub.ref(0, 671632);

procedure blk_queue_max_segments($p0: ref, $i1: i16);
  free requires assertsPassed;



implementation blk_queue_max_segments($p0: ref, $i1: i16)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} {:cexpr "blk_queue_max_segments:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    return;
}



const blk_queue_max_hw_sectors: ref;

axiom blk_queue_max_hw_sectors == $sub.ref(0, 672664);

procedure blk_queue_max_hw_sectors($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_queue_max_hw_sectors($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} {:cexpr "blk_queue_max_hw_sectors:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    return;
}



const blk_queue_io_opt: ref;

axiom blk_queue_io_opt == $sub.ref(0, 673696);

procedure blk_queue_io_opt($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_queue_io_opt($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} {:cexpr "blk_queue_io_opt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    return;
}



const queue_flag_set_unlocked: ref;

axiom queue_flag_set_unlocked == $sub.ref(0, 674728);

procedure queue_flag_set_unlocked($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation queue_flag_set_unlocked($i0: i32, $p1: ref)
{
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} {:cexpr "queue_flag_set_unlocked:arg:flag"} boogie_si_record_i32($i0);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i0);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 3880)), $mul.ref(1984, 1));
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} __set_bit($i2, $p3);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    return;
}



const __set_bit: ref;

axiom __set_bit == $sub.ref(0, 675760);

procedure __set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation __set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} {:cexpr "__set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1230} devirtbounce.11(0, $p1, $i0, $p1);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    return;
}



const pci_alloc_consistent: ref;

axiom pci_alloc_consistent == $sub.ref(0, 676792);

procedure pci_alloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_alloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} {:cexpr "pci_alloc_consistent:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} $p7 := dma_alloc_attrs($p6, $i1, $p2, 32, $0.ref);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $p6 := $p5;
    goto $bb3;
}



const skd_cons_sg_list: ref;

axiom skd_cons_sg_list == $sub.ref(0, 677824);

procedure skd_cons_sg_list($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation skd_cons_sg_list($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i32;
  var $i15: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i17: i32;
  var $i27: i32;
  var $i16: i32;
  var $i28: i64;
  var $p30: ref;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} {:cexpr "skd_cons_sg_list:arg:n_sg"} boogie_si_record_i32($i1);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i3 := $mul.i32($i1, 32);
    call {:si_unique_call 1234} {:cexpr "nbytes"} boogie_si_record_i32($i3);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i3);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} $p7 := pci_alloc_consistent($p5, $i6, $p2);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.1, $p2);
    call {:si_unique_call 1236} {:cexpr "dma_address"} boogie_si_record_i64($i11);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p8);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i3);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.1;
    call {:si_unique_call 1237} cmdloc_dummy_var_20 := $memset.i8(cmdloc_dummy_var_19, $p12, 0, $i13, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_20;
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32($i1, 1);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i32($i14, 0);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $i16 := 0;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i16);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p8, $mul.ref($i28, 32)), $mul.ref(24, 1));
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p30, 0);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb6;

  $bb6:
    call $i18, $i19, $i20, $i21, $i22, $p24, $i25, $i26, $i17, $i27 := skd_cons_sg_list_loop_$bb6($p8, $i11, $i14, $i18, $i19, $i20, $i21, $i22, $p24, $i25, $i26, $i17, $i27);
    goto $bb6_last;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 1);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i20 := $mul.i64($i19, 32);
    call {:si_unique_call 1238} {:cexpr "ndp_off"} boogie_si_record_i64($i20);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i11, $i20);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i17);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p8, $mul.ref($i22, 32)), $mul.ref(24, 1));
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p24, $i21);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i17, 1);
    call {:si_unique_call 1239} {:cexpr "i"} boogie_si_record_i32($i25);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $i26 := $ugt.i32($i14, $i25);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $i27 := $i25;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $i16 := $i27;
    goto $bb5;

  $bb8:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i17 := $i25;
    goto $bb8_dummy;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6385;
}



const skd_format_internal_skspcl: ref;

axiom skd_format_internal_skspcl == $sub.ref(0, 678856);

procedure skd_format_internal_skspcl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation skd_format_internal_skspcl($p0: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(152, 1));
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, 3);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(1, 1));
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p9, 1);
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(152, 1));
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(64, 32));
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.1;
    call {:si_unique_call 1240} cmdloc_dummy_var_22 := $memset.i8(cmdloc_dummy_var_21, $p14, 0, 32, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_22;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.1, $p16);
    call {:si_unique_call 1241} {:cexpr "dma_address"} boogie_si_record_i64($i17);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} $i18 := __fswab64($i17);
    call {:si_unique_call 1243} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p12, $mul.ref(64, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p20, $i18);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p21, 1038);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p22, 0);
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(352, 1)), $mul.ref(144, 1));
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.1, $p23);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p25, $i24);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p26, 0);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p27, 0);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const dma_alloc_attrs: ref;

axiom dma_alloc_attrs == $sub.ref(0, 679888);

procedure dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} {:cexpr "dma_alloc_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1245} {:cexpr "dma_alloc_attrs:arg:gfp"} boogie_si_record_i32($i3);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} $p5 := get_dma_ops($p0);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i3, $sub.i32(0, 8));
    call {:si_unique_call 1247} {:cexpr "gfp"} boogie_si_record_i32($i6);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p9 := $p0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} $i10 := is_device_dma_capable($p9);
    call {:si_unique_call 1249} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} $i17 := dma_alloc_coherent_gfp_flags($p9, $i6);
    call {:si_unique_call 1251} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    call {:si_unique_call 1252} $p20 := devirtbounce.15($p19, $p9, $i1, $p2, $i17, $p4);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.1, $p2);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} debug_dma_alloc_coherent($p9, $i1, $i21, $p20);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $p12 := $p20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p9 := x86_dma_fallback_dev;
    goto $bb3;
}



const is_device_dma_capable: ref;

axiom is_device_dma_capable == $sub.ref(0, 680920);

procedure is_device_dma_capable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_device_dma_capable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i5: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1160, 1));
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i5);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1160, 1));
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.1, $p7);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb3;
}



const dma_alloc_coherent_gfp_flags: ref;

axiom dma_alloc_coherent_gfp_flags == $sub.ref(0, 681952);

procedure dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} {:cexpr "dma_alloc_coherent_gfp_flags:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $i2 := dma_alloc_coherent_mask($p0, $i1);
    call {:si_unique_call 1256} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i3 := $ule.i64($i2, 16777215);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i2, 4294967295);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i10 := $i5;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i5, 1);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i5, 4);
    call {:si_unique_call 1258} {:cexpr "gfp"} boogie_si_record_i32($i9);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i1, 1);
    call {:si_unique_call 1257} {:cexpr "gfp"} boogie_si_record_i32($i4);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const debug_dma_alloc_coherent: ref;

axiom debug_dma_alloc_coherent == $sub.ref(0, 682984);

procedure debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref);
  free requires assertsPassed;



implementation debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} {:cexpr "debug_dma_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1260} {:cexpr "debug_dma_alloc_coherent:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    return;
}



const dma_alloc_coherent_mask: ref;

axiom dma_alloc_coherent_mask == $sub.ref(0, 684016);

procedure dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} {:cexpr "dma_alloc_coherent_mask:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1168, 1));
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.1, $p2);
    call {:si_unique_call 1262} {:cexpr "dma_mask"} boogie_si_record_i64($i3);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i1, 1);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i7 := (if $i6 == 1 then 16777215 else 4294967295);
    call {:si_unique_call 1263} {:cexpr "dma_mask"} boogie_si_record_i64($i7);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const sg_init_table: ref;

axiom sg_init_table == $sub.ref(0, 685048);

procedure sg_init_table($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation sg_init_table($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} {:cexpr "sg_init_table:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    return;
}



const skd_bdev_ioctl: ref;

axiom skd_bdev_ioctl == $sub.ref(0, 686080);

procedure skd_bdev_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $CurrAddr, $M.11, assertsPassed;



implementation skd_bdev_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i53: i32;
  var $i52: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i24;
  var $i61: i24;
  var $i62: i24;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i41: i32;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1267} {:cexpr "skd_bdev_ioctl:arg:mode"} boogie_si_record_i32($i1);
    call {:si_unique_call 1268} {:cexpr "skd_bdev_ioctl:arg:cmd_in"} boogie_si_record_i32($i2);
    call {:si_unique_call 1269} {:cexpr "skd_bdev_ioctl:arg:arg"} boogie_si_record_i64($i3);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(280, 1));
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1752)), $mul.ref(1680, 1));
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i3);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p12, .str.27);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str.103);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p14, .str.29);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p15, .str.104);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.7, $p17);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 1321);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p17, $i20);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p21, 0);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.8, $p22);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 1271} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $i36 := capable(21);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 1275} {:cexpr "tmp___1"} boogie_si_record_i8($i37);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i2, 8834);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i2, 8837);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i2, 8837);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32(0, 25);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p54, .str.27);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p55, .str.103);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p56, .str.29);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p57, .str.105);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i60 := $load.i24($M.7, $p59);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i61 := $and.i24($i60, $sub.i24(0, 262144));
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i62 := $or.i24($i61, 1342);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p59, $i62);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p63, 0);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.8, $p64);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i64($i65);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i67 := $and.i64($i66, 1);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $i68 := ldv__builtin_expect($i67, 0);
    call {:si_unique_call 1281} {:cexpr "tmp___3"} boogie_si_record_i64($i68);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i41 := $i52;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb31:
    assume $i69 == 1;
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p10, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p7, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} vslice_dummy_var_216 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.i32($p5, .str.105, $p71, .str.103, 1342, $p73, $i52);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb16:
    assume $i44 == 1;
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $i53 := skd_ioctl_sg_io($p10, $i1, $p11);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    call {:si_unique_call 1277} {:cexpr "rc"} boogie_si_record_i32($i53);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i52 := $i53;
    goto $bb29;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i2, 8834);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb18;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p7, $mul.ref(0, 1752)), $mul.ref(1672, 1));
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.1, $p49);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} $i51 := scsi_cmd_ioctl($p50, $p7, $i1, $i2, $p11);
    call {:si_unique_call 1279} {:cexpr "rc"} boogie_si_record_i32($i51);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i52 := $i51;
    goto $bb29;

  $bb12:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i2, 8706);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i2, 8706);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb18;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb22:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i2, 8705);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb18;

  $bb27:
    assume $i48 == 1;
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb7:
    assume $i40 == 1;
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 1);
    goto $bb9;

  $bb4:
    assume $i38 == 1;
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb6;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} $p28 := get_current();
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p10, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p7, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p28, $mul.ref(0, 10656)), $mul.ref(2456, 1));
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} vslice_dummy_var_215 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.ref.i32.i32.i64($p4, .str.104, $p30, .str.103, 1321, $p32, $p34, $i1, $i2, $i3);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const skd_bdev_getgeo: ref;

axiom skd_bdev_getgeo == $sub.ref(0, 687112);

procedure skd_bdev_getgeo($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $CurrAddr;



implementation skd_bdev_getgeo($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i16;
  var $p44: ref;
  var $i45: i32;
  var vslice_dummy_var_217: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(280, 1));
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1752)), $mul.ref(1680, 1));
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.27);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.134);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p10, .str.29);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p11, .str.135);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.7, $p13);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 4796);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p13, $i16);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p17, 0);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.8, $p18);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 1285} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p7, $mul.ref(0, 1008)), $mul.ref(528, 1));
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32(0, 5);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $r := $i45;
    return;

  $bb4:
    assume $i36 == 1;
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p7, $mul.ref(0, 1008)), $mul.ref(144, 1));
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.1, $p37);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $i39 := get_capacity($p38);
    call {:si_unique_call 1289} {:cexpr "tmp___1"} boogie_si_record_i64($i39);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p40, 64);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p41, $sub.i8(0, 1));
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $i42 := $udiv.i64($i39, 16320);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i64.i16($i42);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p44, $i43);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb6;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $p24 := get_current();
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p7, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(280, 1));
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p24, $mul.ref(0, 10656)), $mul.ref(2456, 1));
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} vslice_dummy_var_217 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.ref($p2, .str.135, $p26, .str.134, 4796, $p30, $p32);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_capacity: ref;

axiom get_capacity == $sub.ref(0, 688144);

procedure get_capacity($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation get_capacity($p0: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(72, 1)), $mul.ref(8, 1));
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.1, $p2);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const capable: ref;

axiom capable == $sub.ref(0, 689176);

procedure capable($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation capable($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1290} {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1291} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1292} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const scsi_cmd_ioctl: ref;

axiom scsi_cmd_ioctl == $sub.ref(0, 690208);

procedure scsi_cmd_ioctl($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_cmd_ioctl($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1293} {:cexpr "scsi_cmd_ioctl:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1294} {:cexpr "scsi_cmd_ioctl:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1295} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1296} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const skd_ioctl_sg_io: ref;

axiom skd_ioctl_sg_io == $sub.ref(0, 691240);

procedure skd_ioctl_sg_io($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.11, $CurrAddr, assertsPassed;



implementation skd_ioctl_sg_io($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i24;
  var $i22: i24;
  var $i23: i24;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i34: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} $p3 := $alloc($mul.ref(160, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1299} {:cexpr "skd_ioctl_sg_io:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.1;
    call {:si_unique_call 1300} cmdloc_dummy_var_24 := $memset.i8(cmdloc_dummy_var_23, $p5, 0, 160, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_24;
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p6, $i1);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, $p2);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, $p8);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(252, 1));
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i11, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p15, .str.27);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p16, .str.106);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p17, .str.29);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p18, .str.107);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i21 := $load.i24($M.7, $p20);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i22 := $and.i24($i21, $sub.i24(0, 262144));
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $i23 := $or.i24($i22, 1364);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p20, $i23);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p24, 0);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.8, $p25);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 1304} {:cexpr "tmp"} boogie_si_record_i64($i29);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 6);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} vslice_dummy_var_219 := skd_sg_io_release_skspcl($p0, $p3);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.1, $p52);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb40:
    assume $i55 == 1;
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.1, $p56);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i58, $i60);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb42;

  $bb43:
    assume $i61 == 1;
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.1, $p62);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} kfree($p64);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb12:
    assume $i30 == 1;
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} vslice_dummy_var_218 := __dynamic_pr_debug.ref.ref.ref.ref.i32($p4, .str.107, $p32, .str.106, 1364);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} $i35 := skd_sg_io_get_and_check_args($p0, $p3);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    call {:si_unique_call 1302} {:cexpr "rc"} boogie_si_record_i32($i35);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $i37 := skd_sg_io_obtain_skspcl($p0, $p3);
    call {:si_unique_call 1308} {:cexpr "rc"} boogie_si_record_i32($i37);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} $i39 := skd_sg_io_prep_buffering($p0, $p3);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    call {:si_unique_call 1310} {:cexpr "rc"} boogie_si_record_i32($i39);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} $i41 := skd_sg_io_copy_buffer($p0, $p3, $sub.i32(0, 2));
    call {:si_unique_call 1312} {:cexpr "rc"} boogie_si_record_i32($i41);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $i43 := skd_sg_io_send_fitmsg($p0, $p3);
    call {:si_unique_call 1314} {:cexpr "rc"} boogie_si_record_i32($i43);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $i45 := skd_sg_io_await($p0, $p3);
    call {:si_unique_call 1316} {:cexpr "rc"} boogie_si_record_i32($i45);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} $i47 := skd_sg_io_copy_buffer($p0, $p3, $sub.i32(0, 3));
    call {:si_unique_call 1318} {:cexpr "rc"} boogie_si_record_i32($i47);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} $i49 := skd_sg_io_put_status($p0, $p3);
    call {:si_unique_call 1320} {:cexpr "rc"} boogie_si_record_i32($i49);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb15;

  $bb37:
    assume $i50 == 1;
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i34 := $i49;
    goto $bb15;

  $bb34:
    assume $i48 == 1;
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i34 := $i47;
    goto $bb15;

  $bb31:
    assume $i46 == 1;
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $i34 := $i45;
    goto $bb15;

  $bb28:
    assume $i44 == 1;
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i34 := $i43;
    goto $bb15;

  $bb25:
    assume $i42 == 1;
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i34 := $i41;
    goto $bb15;

  $bb22:
    assume $i40 == 1;
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $i34 := $i39;
    goto $bb15;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i38 == 1;
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i34 := $i37;
    goto $bb15;

  $bb16:
    assume $i36 == 1;
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i34 := $i35;
    goto $bb15;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i11, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb7;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const skd_sg_io_get_and_check_args: ref;

axiom skd_sg_io_get_and_check_args == $sub.ref(0, 692272);

procedure skd_sg_io_get_and_check_args($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $CurrAddr, assertsPassed;



implementation skd_sg_io_get_and_check_args($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i23: i8;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i24;
  var $i36: i24;
  var $i37: i24;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i24;
  var $i63: i24;
  var $i64: i24;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i24;
  var $i87: i24;
  var $i88: i24;
  var $p89: ref;
  var $p90: ref;
  var $i91: i8;
  var $i92: i64;
  var $i93: i64;
  var $i94: i64;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $p101: ref;
  var $i102: i8;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i24;
  var $i112: i24;
  var $i113: i24;
  var $p114: ref;
  var $p115: ref;
  var $i116: i8;
  var $i117: i64;
  var $i118: i64;
  var $i119: i64;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i8;
  var $i125: i32;
  var $p127: ref;
  var $i128: i16;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i24;
  var $i138: i24;
  var $i139: i24;
  var $p140: ref;
  var $p141: ref;
  var $i142: i8;
  var $i143: i64;
  var $i144: i64;
  var $i145: i64;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i16;
  var $i151: i32;
  var $p153: ref;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i24;
  var $i163: i24;
  var $i164: i24;
  var $p165: ref;
  var $p166: ref;
  var $i167: i8;
  var $i168: i64;
  var $i169: i64;
  var $i170: i64;
  var $i171: i1;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i32;
  var $p177: ref;
  var $i178: i32;
  var $i179: i1;
  var $i180: i1;
  var $i181: i1;
  var $i182: i1;
  var $i183: i1;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $i190: i24;
  var $i191: i24;
  var $i192: i24;
  var $p193: ref;
  var $p194: ref;
  var $i195: i8;
  var $i196: i64;
  var $i197: i64;
  var $i198: i64;
  var $i199: i1;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $i203: i32;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $i210: i8;
  var $i211: i64;
  var $i212: i64;
  var $i213: i1;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $i220: i24;
  var $i221: i24;
  var $i222: i24;
  var $p223: ref;
  var $p224: ref;
  var $i225: i8;
  var $i226: i64;
  var $i227: i64;
  var $i228: i64;
  var $i229: i1;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p235: ref;
  var $i236: i8;
  var $i237: i32;
  var $i238: i1;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $i242: i64;
  var $p243: ref;
  var $i244: i8;
  var $i245: i64;
  var $p247: ref;
  var $i248: i64;
  var $i249: i1;
  var $i250: i8;
  var $i251: i1;
  var $i252: i32;
  var $i253: i64;
  var $i254: i64;
  var $i255: i1;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $i262: i24;
  var $i263: i24;
  var $i264: i24;
  var $p265: ref;
  var $p266: ref;
  var $i267: i8;
  var $i268: i64;
  var $i269: i64;
  var $i270: i64;
  var $i271: i1;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $p277: ref;
  var $i278: i16;
  var $i279: i32;
  var $i280: i1;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $p286: ref;
  var $i287: i32;
  var $i288: i64;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $i294: i32;
  var $p295: ref;
  var $p296: ref;
  var $i297: i16;
  var $i298: i32;
  var $i299: i32;
  var $i300: i64;
  var $p301: ref;
  var $p302: ref;
  var $i303: i64;
  var $i304: i1;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $p309: ref;
  var $p310: ref;
  var $i311: i24;
  var $i312: i24;
  var $i313: i24;
  var $p314: ref;
  var $p315: ref;
  var $i316: i8;
  var $i317: i64;
  var $i318: i64;
  var $i319: i64;
  var $i320: i1;
  var $p321: ref;
  var $p322: ref;
  var $p323: ref;
  var $i324: i16;
  var $i325: i32;
  var $p327: ref;
  var $p328: ref;
  var $i329: i16;
  var $i330: i32;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $p334: ref;
  var $i335: i64;
  var $i336: i64;
  var $i337: i1;
  var $p338: ref;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $p343: ref;
  var $i344: i24;
  var $i345: i24;
  var $i346: i24;
  var $p347: ref;
  var $p348: ref;
  var $i349: i8;
  var $i350: i64;
  var $i351: i64;
  var $i352: i64;
  var $i353: i1;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $p359: ref;
  var $i360: i16;
  var $i361: i32;
  var $i362: i1;
  var $i366: i64;
  var $p368: ref;
  var $i369: i64;
  var $i370: i64;
  var $i371: i1;
  var $i372: i64;
  var $p374: ref;
  var $i375: i64;
  var $i376: i64;
  var $i377: i32;
  var $i378: i16;
  var $i379: i32;
  var $i380: i1;
  var $i364: i64;
  var $i365: i32;
  var $i381: i64;
  var $i363: i64;
  var $p382: ref;
  var $i383: i32;
  var $i384: i64;
  var $i385: i1;
  var $p386: ref;
  var $p387: ref;
  var $i388: i16;
  var $i389: i64;
  var $p390: ref;
  var $i391: i32;
  var $i392: i64;
  var $i393: i64;
  var $i394: i32;
  var $p395: ref;
  var $p396: ref;
  var $i397: i32;
  var $p398: ref;
  var $i399: i32;
  var $p400: ref;
  var $p401: ref;
  var $i402: i32;
  var $i403: i1;
  var $p404: ref;
  var $p405: ref;
  var $p406: ref;
  var $i407: i32;
  var $i408: i1;
  var $p411: ref;
  var $p412: ref;
  var $p413: ref;
  var $i414: i64;
  var $p415: ref;
  var $i416: i64;
  var $p418: ref;
  var $i419: i64;
  var $i420: i1;
  var $i421: i8;
  var $i422: i1;
  var $i423: i32;
  var $i424: i64;
  var $i425: i64;
  var $i426: i1;
  var $p427: ref;
  var $p428: ref;
  var $p429: ref;
  var $p430: ref;
  var $p431: ref;
  var $p432: ref;
  var $p433: ref;
  var $i434: i24;
  var $i435: i24;
  var $i436: i24;
  var $p437: ref;
  var $p438: ref;
  var $i439: i8;
  var $i440: i64;
  var $i441: i64;
  var $i442: i64;
  var $i443: i1;
  var $p444: ref;
  var $p445: ref;
  var $p446: ref;
  var $p447: ref;
  var $p448: ref;
  var $i449: i64;
  var $i450: i32;
  var $i452: i32;
  var $p453: ref;
  var $i454: i32;
  var $i455: i1;
  var $p409: ref;
  var $i410: i32;
  var $i50: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i32;
  var vslice_dummy_var_222: i32;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i32;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: i32;
  var vslice_dummy_var_227: i32;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: i32;
  var vslice_dummy_var_230: i32;
  var vslice_dummy_var_231: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} $p15 := current_thread_info();
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.1, $p20);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} $i22 := __chk_range_not_ok($i18, 88, $i21);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i22);
    call {:si_unique_call 1336} {:cexpr "tmp___1"} boogie_si_record_i8($i23);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} $i27 := ldv__builtin_expect($i26, 1);
    call {:si_unique_call 1338} {:cexpr "tmp___3"} boogie_si_record_i64($i27);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p14);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.1, $p52);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} $i54 := __copy_from_user($p51, $p53, 88);
    call {:si_unique_call 1343} {:cexpr "tmp___5"} boogie_si_record_i32($i54);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    $p77 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.1, $p77);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 83);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    $p101 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.1, $p101);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i104 := $ugt.i32($i103, 16);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    $p127 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(10, 1));
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i128 := $load.i16($M.1, $p127);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i129 := $zext.i16.i32($i128);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i130 := $ugt.i32($i129, 256);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    $p153 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.1, $p153);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $i155 := $ugt.i32($i154, 1048576);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    $p177 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i178 := $load.i32($M.1, $p177);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i179 := $slt.i32($i178, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    $i180 := $slt.i32($i178, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i178, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i181 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p184, .str.27);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p185, .str.108);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p186, .str.29);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p187, .str.115);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $p189 := $bitcast.ref.ref($p188);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i190 := $load.i24($M.7, $p189);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i191 := $and.i24($i190, $sub.i24(0, 262144));
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i192 := $or.i24($i191, 1469);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p189, $i192);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p193, 0);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $i195 := $load.i8($M.8, $p194);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i196 := $zext.i8.i64($i195);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $i197 := $and.i64($i196, 1);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} $i198 := ldv__builtin_expect($i197, 0);
    call {:si_unique_call 1362} {:cexpr "tmp___10"} boogie_si_record_i64($i198);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i199 := $ne.i64($i198, 0);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i199} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32(0, 22);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $r := $i50;
    return;

  $bb56:
    assume $i199 == 1;
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $p201 := $bitcast.ref.ref($p200);
    $p202 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.1, $p202);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} vslice_dummy_var_226 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p8, .str.115, $p201, .str.108, 1469, $i203);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb46:
    assume $i181 == 1;
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(104, 1));
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $p206 := $bitcast.ref.ref($p205);
    $p207 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.1, $p207);
    $p209 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $i210 := $load.i8($M.1, $p209);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $i211 := $zext.i8.i64($i210);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} $i212 := copy_from_user($p206, $p208, $i211);
    call {:si_unique_call 1360} {:cexpr "tmp___12"} boogie_si_record_i64($i212);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $i213 := $ne.i64($i212, 0);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i213} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    $p235 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(9, 1));
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i236 := $load.i8($M.1, $p235);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i237 := $zext.i8.i32($i236);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i238 := $ne.i32($i237, 0);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i238} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    $p277 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(10, 1));
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $i278 := $load.i16($M.1, $p277);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $i279 := $zext.i16.i32($i278);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $i280 := $eq.i32($i279, 0);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i280} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i280 == 1);
    $p296 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(10, 1));
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i297 := $load.i16($M.1, $p296);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i298 := $zext.i16.i32($i297);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i299 := $mul.i32($i298, 16);
    call {:si_unique_call 1375} {:cexpr "nbytes"} boogie_si_record_i32($i299);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i300 := $zext.i32.i64($i299);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $p301 := kmalloc($i300, 208);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $p302 := $bitcast.ref.ref($p301);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i303 := $p2i.ref.i64($p302);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i304 := $eq.i64($i303, 0);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i304} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p327, $p301);
    $p328 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(10, 1));
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $i329 := $load.i16($M.1, $p328);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $i330 := $zext.i16.i32($i329);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p331, $i330);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $p332 := $bitcast.ref.ref($p302);
    $p333 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $p334 := $load.ref($M.1, $p333);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i335 := $zext.i32.i64($i299);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} $i336 := copy_from_user($p332, $p334, $i335);
    call {:si_unique_call 1381} {:cexpr "tmp___21"} boogie_si_record_i64($i336);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $i337 := $ne.i64($i336, 0);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i337} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    $p359 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(10, 1));
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i360 := $load.i16($M.1, $p359);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $i361 := $zext.i16.i32($i360);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i362 := $sgt.i32($i361, 0);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $i363 := 0;
    assume {:branchcond $i362} true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i362 == 1);
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    $p382 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i383 := $load.i32($M.1, $p382);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i384 := $zext.i32.i64($i383);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i385 := $ult.i64($i384, $i363);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i385} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i385 == 1);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $i399 := $trunc.i64.i32($i363);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p400, $i399);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    $p401 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $i402 := $load.i32($M.1, $p401);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $i403 := $ne.i32($i402, $sub.i32(0, 1));
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i403} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb9;

  $bb106:
    assume $i403 == 1;
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $p405 := $load.ref($M.1, $p404);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i407 := $load.i32($M.1, $p406);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i408 := $ult.i32(0, $i407);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i408} true;
    goto $bb108, $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    assume !($i408 == 1);
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb108:
    assume $i408 == 1;
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $p409, $i410 := $p405, 0;
    goto $bb111;

  $bb111:
    call $p411, $p412, $p413, $i414, $p415, $i416, $p418, $i419, $i420, $i421, $i422, $i423, $i424, $i425, $i426, $p427, $i452, $p453, $i454, $i455, $p409, $i410 := skd_sg_io_get_and_check_args_loop_$bb111($p406, $p411, $p412, $p413, $i414, $p415, $i416, $p418, $i419, $i420, $i421, $i422, $i423, $i424, $i425, $i426, $p427, $i452, $p453, $i454, $i455, $p409, $i410);
    goto $bb111_last;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $p411 := current_thread_info();
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($p409, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $p413 := $load.ref($M.1, $p412);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i414 := $p2i.ref.i64($p413);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($p409, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i416 := $load.i64($M.1, $p415);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($add.ref($p411, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i419 := $load.i64($M.1, $p418);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} $i420 := __chk_range_not_ok($i414, $i416, $i419);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i421 := $zext.i1.i8($i420);
    call {:si_unique_call 1391} {:cexpr "tmp___25"} boogie_si_record_i8($i421);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $i422 := $trunc.i8.i1($i421);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i422 == 1);
    assume {:verifier.code 0} true;
    $i423 := 1;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i424 := $sext.i32.i64($i423);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $i425 := ldv__builtin_expect($i424, 1);
    call {:si_unique_call 1393} {:cexpr "tmp___27"} boogie_si_record_i64($i425);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i426 := $eq.i64($i425, 0);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $p427 := $p409;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i426 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i452 := $add.i32($i410, 1);
    call {:si_unique_call 1397} {:cexpr "i"} boogie_si_record_i32($i452);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($p409, $mul.ref(1, 16));
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i454 := $load.i32($M.1, $p406);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i455 := $ult.i32($i452, $i454);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i455 == 1);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb122:
    assume $i455 == 1;
    assume {:verifier.code 0} true;
    $p409, $i410 := $p453, $i452;
    goto $bb122_dummy;

  $bb116:
    assume $i426 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p428, .str.27);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p429, .str.108);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p430, .str.29);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p431, .str.120);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $p433 := $bitcast.ref.ref($p432);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $i434 := $load.i24($M.7, $p433);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $i435 := $and.i24($i434, $sub.i24(0, 262144));
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $i436 := $or.i24($i435, 1539);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p433, $i436);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p437, 0);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i439 := $load.i8($M.8, $p438);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $i440 := $zext.i8.i64($i439);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $i441 := $and.i64($i440, 1);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} $i442 := ldv__builtin_expect($i441, 0);
    call {:si_unique_call 1395} {:cexpr "tmp___23"} boogie_si_record_i64($i442);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $i443 := $ne.i64($i442, 0);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i443} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i443 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32(0, 14);
    goto $bb9;

  $bb118:
    assume $i443 == 1;
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $p445 := $bitcast.ref.ref($p444);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p427, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $p447 := $load.ref($M.1, $p446);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($add.ref($p427, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i449 := $load.i64($M.1, $p448);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $i450 := $trunc.i64.i32($i449);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} vslice_dummy_var_231 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.i32($p13, .str.120, $p445, .str.108, 1539, $p447, $i450);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb113:
    assume $i422 == 1;
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $i423 := 0;
    goto $bb115;

  $bb103:
    assume $i385 == 1;
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $p386 := $bitcast.ref.ref($p302);
    $p387 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(10, 1));
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $i388 := $load.i16($M.1, $p387);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i389 := $zext.i16.i64($i388);
    $p390 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i391 := $load.i32($M.1, $p390);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i392 := $zext.i32.i64($i391);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} $i393 := iov_shorten($p386, $i389, $i392);
    call {:si_unique_call 1388} {:cexpr "tmp___22"} boogie_si_record_i64($i393);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $i394 := $trunc.i64.i32($i393);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p395, $i394);
    $p396 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $i397 := $load.i32($M.1, $p396);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p398, $i397);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb92:
    assume $i362 == 1;
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $i364, $i365 := 0, 0;
    goto $bb95;

  $bb95:
    call $i366, $p368, $i369, $i370, $i371, $i372, $p374, $i375, $i376, $i377, $i378, $i379, $i380, $i364, $i365, $i381 := skd_sg_io_get_and_check_args_loop_$bb95($p302, $p359, $i366, $p368, $i369, $i370, $i371, $i372, $p374, $i375, $i376, $i377, $i378, $i379, $i380, $i364, $i365, $i381);
    goto $bb95_last;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i366 := $sext.i32.i64($i365);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p302, $mul.ref($i366, 16)), $mul.ref(8, 1));
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $i369 := $load.i64($M.1, $p368);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $i370 := $add.i64($i369, $i364);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $i371 := $ult.i64($i370, $i364);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i372 := $sext.i32.i64($i365);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p302, $mul.ref($i372, 16)), $mul.ref(8, 1));
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $i375 := $load.i64($M.1, $p374);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $i376 := $add.i64($i375, $i364);
    call {:si_unique_call 1385} {:cexpr "iov_data_len"} boogie_si_record_i64($i376);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i377 := $add.i32($i365, 1);
    call {:si_unique_call 1386} {:cexpr "i"} boogie_si_record_i32($i377);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i378 := $load.i16($M.1, $p359);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i379 := $zext.i16.i32($i378);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i380 := $sgt.i32($i379, $i377);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i381 := $i376;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i380 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i363 := $i381;
    goto $bb94;

  $bb100:
    assume $i380 == 1;
    assume {:verifier.code 0} true;
    $i364, $i365 := $i376, $i377;
    goto $bb100_dummy;

  $bb97:
    assume $i371 == 1;
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32(0, 22);
    goto $bb9;

  $bb86:
    assume $i337 == 1;
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p338, .str.27);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p339, .str.108);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p340, .str.29);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p341, .str.119);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $p343 := $bitcast.ref.ref($p342);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $i344 := $load.i24($M.7, $p343);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $i345 := $and.i24($i344, $sub.i24(0, 262144));
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i346 := $or.i24($i345, 1509);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p343, $i346);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p347, 0);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i349 := $load.i8($M.8, $p348);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $i350 := $zext.i8.i64($i349);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $i351 := $and.i64($i350, 1);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} $i352 := ldv__builtin_expect($i351, 0);
    call {:si_unique_call 1383} {:cexpr "tmp___20"} boogie_si_record_i64($i352);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i353 := $ne.i64($i352, 0);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    assume {:branchcond $i353} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32(0, 14);
    goto $bb9;

  $bb88:
    assume $i353 == 1;
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $p355 := $bitcast.ref.ref($p354);
    $p356 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $p357 := $load.ref($M.1, $p356);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} vslice_dummy_var_230 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref($p12, .str.119, $p355, .str.108, 1509, $p357);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb80:
    assume $i304 == 1;
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p305, .str.27);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p306, .str.108);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p307, .str.29);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p308, .str.118);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $p310 := $bitcast.ref.ref($p309);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i311 := $load.i24($M.7, $p310);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i312 := $and.i24($i311, $sub.i24(0, 262144));
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $i313 := $or.i24($i312, 1501);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p310, $i313);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p314, 0);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i316 := $load.i8($M.8, $p315);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i317 := $zext.i8.i64($i316);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i318 := $and.i64($i317, 1);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} $i319 := ldv__builtin_expect($i318, 0);
    call {:si_unique_call 1378} {:cexpr "tmp___19"} boogie_si_record_i64($i319);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $i320 := $ne.i64($i319, 0);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i320} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32(0, 12);
    goto $bb9;

  $bb82:
    assume $i320 == 1;
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $p322 := $bitcast.ref.ref($p321);
    $p323 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(10, 1));
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i324 := $load.i16($M.1, $p323);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i325 := $zext.i16.i32($i324);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} vslice_dummy_var_229 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p11, .str.118, $p322, .str.108, 1501, $i325);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb77:
    assume $i280 == 1;
    $p281 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $p282 := $load.ref($M.1, $p281);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $p284 := $load.ref($M.1, $p283);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p284, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p285, $p282);
    $p286 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $i287 := $load.i32($M.1, $p286);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $i288 := $zext.i32.i64($i287);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $p290 := $load.ref($M.1, $p289);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p290, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p291, $i288);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p292, 1);
    $p293 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $i294 := $load.i32($M.1, $p293);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p295, $i294);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb65:
    assume $i238 == 1;
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} $p239 := current_thread_info();
    $p240 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(32, 1));
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $p241 := $load.ref($M.1, $p240);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i242 := $p2i.ref.i64($p241);
    $p243 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(9, 1));
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i244 := $load.i8($M.1, $p243);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i245 := $zext.i8.i64($i244);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($p239, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $i248 := $load.i64($M.1, $p247);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $i249 := __chk_range_not_ok($i242, $i245, $i248);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i250 := $zext.i1.i8($i249);
    call {:si_unique_call 1369} {:cexpr "tmp___15"} boogie_si_record_i8($i250);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $i251 := $trunc.i8.i1($i250);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    $i252 := 1;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $i253 := $sext.i32.i64($i252);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $i254 := ldv__builtin_expect($i253, 1);
    call {:si_unique_call 1371} {:cexpr "tmp___17"} boogie_si_record_i64($i254);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i255 := $eq.i64($i254, 0);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i255} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb70:
    assume $i255 == 1;
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p256, .str.27);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p257, .str.108);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p258, .str.29);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p259, .str.117);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $p261 := $bitcast.ref.ref($p260);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i262 := $load.i24($M.7, $p261);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $i263 := $and.i24($i262, $sub.i24(0, 262144));
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i264 := $or.i24($i263, 1482);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p261, $i264);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p265, 0);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i267 := $load.i8($M.8, $p266);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i268 := $zext.i8.i64($i267);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $i269 := $and.i64($i268, 1);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} $i270 := ldv__builtin_expect($i269, 0);
    call {:si_unique_call 1373} {:cexpr "tmp___13"} boogie_si_record_i64($i270);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $i271 := $ne.i64($i270, 0);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i271} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32(0, 14);
    goto $bb9;

  $bb72:
    assume $i271 == 1;
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $p273 := $bitcast.ref.ref($p272);
    $p274 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(32, 1));
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $p275 := $load.ref($M.1, $p274);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} vslice_dummy_var_228 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref($p10, .str.117, $p273, .str.108, 1482, $p275);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb67:
    assume $i251 == 1;
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $i252 := 0;
    goto $bb69;

  $bb59:
    assume $i213 == 1;
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p214, .str.27);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p215, .str.108);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p216, .str.29);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p217, .str.116);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $p219 := $bitcast.ref.ref($p218);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $i220 := $load.i24($M.7, $p219);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i221 := $and.i24($i220, $sub.i24(0, 262144));
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i222 := $or.i24($i221, 1475);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p219, $i222);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p223, 0);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i225 := $load.i8($M.8, $p224);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $i226 := $zext.i8.i64($i225);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i227 := $and.i64($i226, 1);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} $i228 := ldv__builtin_expect($i227, 0);
    call {:si_unique_call 1365} {:cexpr "tmp___11"} boogie_si_record_i64($i228);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i229 := $ne.i64($i228, 0);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i229} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32(0, 14);
    goto $bb9;

  $bb61:
    assume $i229 == 1;
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $p231 := $bitcast.ref.ref($p230);
    $p232 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $p233 := $load.ref($M.1, $p232);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} vslice_dummy_var_227 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref($p9, .str.116, $p231, .str.108, 1475, $p233);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb44:
    assume $i180 == 1;
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb42:
    assume $i179 == 1;
    assume {:verifier.code 0} true;
    $i182 := $slt.i32($i178, $sub.i32(0, 3));
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i182 == 1);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume $i182 == 1;
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i178, $sub.i32(0, 4));
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb51, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i183 == 1);
    goto $bb48;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i183 == 1;
    goto $bb52;

  $bb35:
    assume $i155 == 1;
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p156, .str.27);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p157, .str.108);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p158, .str.29);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p159, .str.114);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p160);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $i162 := $load.i24($M.7, $p161);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i163 := $and.i24($i162, $sub.i24(0, 262144));
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i164 := $or.i24($i163, 1449);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p161, $i164);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p165, 0);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i167 := $load.i8($M.8, $p166);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i168 := $zext.i8.i64($i167);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i169 := $and.i64($i168, 1);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} $i170 := ldv__builtin_expect($i169, 0);
    call {:si_unique_call 1357} {:cexpr "tmp___9"} boogie_si_record_i64($i170);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $i171 := $ne.i64($i170, 0);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32(0, 22);
    goto $bb9;

  $bb37:
    assume $i171 == 1;
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    $p174 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.1, $p174);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} vslice_dummy_var_225 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p7, .str.114, $p173, .str.108, 1449, $i175);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb29:
    assume $i130 == 1;
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p131, .str.27);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p132, .str.108);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p133, .str.29);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p134, .str.113);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p135);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $i137 := $load.i24($M.7, $p136);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $i138 := $and.i24($i137, $sub.i24(0, 262144));
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i139 := $or.i24($i138, 1443);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p136, $i139);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p140, 0);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $i142 := $load.i8($M.8, $p141);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i143 := $zext.i8.i64($i142);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i144 := $and.i64($i143, 1);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} $i145 := ldv__builtin_expect($i144, 0);
    call {:si_unique_call 1354} {:cexpr "tmp___8"} boogie_si_record_i64($i145);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $i146 := $ne.i64($i145, 0);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32(0, 22);
    goto $bb9;

  $bb31:
    assume $i146 == 1;
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    $p149 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(10, 1));
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $i150 := $load.i16($M.1, $p149);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $i151 := $zext.i16.i32($i150);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} vslice_dummy_var_224 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p6, .str.113, $p148, .str.108, 1443, $i151);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb23:
    assume $i104 == 1;
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p105, .str.27);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p106, .str.108);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p107, .str.29);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p108, .str.112);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i111 := $load.i24($M.7, $p110);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $i112 := $and.i24($i111, $sub.i24(0, 262144));
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $i113 := $or.i24($i112, 1437);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p110, $i113);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p114, 0);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.8, $p115);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i64($i116);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i118 := $and.i64($i117, 1);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} $i119 := ldv__builtin_expect($i118, 0);
    call {:si_unique_call 1351} {:cexpr "tmp___7"} boogie_si_record_i64($i119);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $i120 := $ne.i64($i119, 0);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32(0, 22);
    goto $bb9;

  $bb25:
    assume $i120 == 1;
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    $p123 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.1, $p123);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i32($i124);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} vslice_dummy_var_223 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p5, .str.112, $p122, .str.108, 1437, $i125);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb17:
    assume $i79 == 1;
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p80, .str.27);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p81, .str.108);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p82, .str.29);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p83, .str.111);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i86 := $load.i24($M.7, $p85);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i87 := $and.i24($i86, $sub.i24(0, 262144));
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $i88 := $or.i24($i87, 1431);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p85, $i88);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p89, 0);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.8, $p90);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i64($i91);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $i93 := $and.i64($i92, 1);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} $i94 := ldv__builtin_expect($i93, 0);
    call {:si_unique_call 1348} {:cexpr "tmp___6"} boogie_si_record_i64($i94);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i94, 0);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32(0, 22);
    goto $bb9;

  $bb19:
    assume $i95 == 1;
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    $p98 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.1, $p98);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} vslice_dummy_var_222 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p4, .str.111, $p97, .str.108, 1431, $i99);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i55 == 1;
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p56, .str.27);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p57, .str.108);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p58, .str.29);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p59, .str.110);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $i62 := $load.i24($M.7, $p61);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i63 := $and.i24($i62, $sub.i24(0, 262144));
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $i64 := $or.i24($i63, 1425);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p61, $i64);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p65, 0);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.8, $p66);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i64($i67);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i69 := $and.i64($i68, 1);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} $i70 := ldv__builtin_expect($i69, 0);
    call {:si_unique_call 1345} {:cexpr "tmp___4"} boogie_si_record_i64($i70);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32(0, 14);
    goto $bb9;

  $bb13:
    assume $i71 == 1;
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.1, $p74);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} vslice_dummy_var_221 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref($p3, .str.110, $p73, .str.108, 1425, $p75);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p29, .str.27);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p30, .str.108);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p31, .str.29);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p32, .str.109);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $i35 := $load.i24($M.7, $p34);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $i36 := $and.i24($i35, $sub.i24(0, 262144));
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $i37 := $or.i24($i36, 1419);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p34, $i37);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p38, 0);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.8, $p39);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i64($i40);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $i42 := $and.i64($i41, 1);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 1340} {:cexpr "tmp"} boogie_si_record_i64($i43);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32(0, 14);
    goto $bb9;

  $bb6:
    assume $i44 == 1;
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.1, $p47);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} vslice_dummy_var_220 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref($p2, .str.109, $p46, .str.108, 1419, $p48);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb3;

  $bb122_dummy:
    assume false;
    return;

  $bb111_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7309;

  $bb100_dummy:
    assume false;
    return;

  $bb95_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7254;
}



const skd_sg_io_obtain_skspcl: ref;

axiom skd_sg_io_obtain_skspcl == $sub.ref(0, 693304);

procedure skd_sg_io_obtain_skspcl($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation skd_sg_io_obtain_skspcl($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i16;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i24;
  var $i40: i24;
  var $i41: i24;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i64;
  var $i46: i64;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $i60: i8;
  var $i61: i1;
  var $i62: i1;
  var $i63: i64;
  var $i64: i1;
  var $i66: i1;
  var $i65: i1;
  var $i67: i32;
  var $i68: i1;
  var $p70: ref;
  var $i71: i32;
  var $i72: i64;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $i82: i8;
  var $i83: i1;
  var $i84: i1;
  var $i85: i64;
  var $i86: i1;
  var $i88: i1;
  var $i87: i1;
  var $i89: i32;
  var $i90: i1;
  var $i91: i64;
  var $i93: i1;
  var $i94: i64;
  var $i95: i64;
  var $i92: i64;
  var $p96: ref;
  var $i97: i64;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i24;
  var $i106: i24;
  var $i107: i24;
  var $p108: ref;
  var $p109: ref;
  var $i110: i8;
  var $i111: i64;
  var $i112: i64;
  var $i113: i64;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $i118: i1;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $i122: i32;
  var $p31: ref;
  var $i32: i32;
  var $p123: ref;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $p5, $p6, $i7, $i8, $p10, $p11, $p13, $p15, $i16, $i17, $i18, $i19, $p21, $p23, $p24, $p26, $p27, $i28, $i29, $p30, $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $i41, $p42, $p43, $i44, $i45, $i46, $i47, $i48, $p49, $p50, $p53, $i54, $i55, $p56, $p57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i66, $i65, $i67, $i68, $p70, $i71, $i72, $p73, $p74, $i75, $p76, $i77, $p78, $p79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i88, $i87, $i89, $i90, $i91, $i93, $i94, $i95, $i92, $p96, $i97, $i98, $p99, $p100, $p101, $p102, $p103, $p104, $i105, $i106, $i107, $p108, $p109, $i110, $i111, $i112, $i113, $i114, $p115, $p116, $i118, $p119, $i120, vslice_dummy_var_232, vslice_dummy_var_233 := skd_sg_io_obtain_skspcl_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $i7, $i8, $p10, $p11, $p13, $p15, $i16, $i17, $i18, $i19, $p21, $p23, $p24, $p26, $p27, $i28, $i29, $p30, $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $i41, $p42, $p43, $i44, $i45, $i46, $i47, $i48, $p49, $p50, $p53, $i54, $i55, $p56, $p57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i66, $i65, $i67, $i68, $p70, $i71, $i72, $p73, $p74, $i75, $p76, $i77, $p78, $p79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i88, $i87, $i89, $i90, $i91, $i93, $i94, $i95, $i92, $p96, $i97, $i98, $p99, $p100, $p101, $p102, $p103, $p104, $i105, $i106, $i107, $p108, $p109, $i110, $i111, $i112, $i113, $i114, $p115, $p116, $i118, $p119, $i120, vslice_dummy_var_232, vslice_dummy_var_233);
    goto $bb1_last;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(336, 1));
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(72, 1));
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} spin_unlock_irqrestore($p27, $u0);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p6);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $p30 := $p6;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p33, .str.27);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p34, .str.121);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p35, .str.29);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p36, .str.122);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $i39 := $load.i24($M.7, $p38);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $i40 := $and.i24($i39, $sub.i24(0, 262144));
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i41 := $or.i24($i40, 1575);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p38, $i41);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p42, 0);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.8, $p43);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i64($i44);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $i46 := $and.i64($i45, 1);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} $i47 := ldv__builtin_expect($i46, 0);
    call {:si_unique_call 1404} {:cexpr "tmp"} boogie_si_record_i64($i47);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(40, 1));
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.1, $p53);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} $i55 := msecs_to_jiffies($i54);
    call {:si_unique_call 1407} {:cexpr "tmp___0"} boogie_si_record_i64($i55);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(336, 1));
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.1, $p56);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i60 := $zext.i1.i8($i59);
    call {:si_unique_call 1408} {:cexpr "__cond___0"} boogie_si_record_i8($i60);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i8.i1($i60);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i63 := $i55;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i8.i1($i60);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i65 := 1;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i64 == 1);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $i66 := $eq.i64($i63, 0);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $i65 := $i66;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i32($i65);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 0);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i97 := $i63;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i64.i32($i97);
    call {:si_unique_call 1418} {:cexpr "rc"} boogie_si_record_i32($i98);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p99, .str.27);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p100, .str.121);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p101, .str.29);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p102, .str.123);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $i105 := $load.i24($M.7, $p104);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i106 := $and.i24($i105, $sub.i24(0, 262144));
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i107 := $or.i24($i106, 1583);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p104, $i107);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p108, 0);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.8, $p109);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i64($i110);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $i112 := $and.i64($i111, 1);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} $i113 := ldv__builtin_expect($i112, 0);
    call {:si_unique_call 1420} {:cexpr "tmp___3"} boogie_si_record_i64($i113);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $i114 := $ne.i64($i113, 0);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i118 := $sle.i32($i98, 0);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $p119, $i120 := $p6, $i98;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb49_dummy;

  $bb44:
    assume $i118 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 0);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    $i122 := $sub.i32(0, 4);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $p31, $i32 := $p119, $i122;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p123, $p31);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb46:
    assume $i121 == 1;
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $i122 := $sub.i32(0, 110);
    goto $bb48;

  $bb41:
    assume $i114 == 1;
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} vslice_dummy_var_233 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p4, .str.123, $p116, .str.121, 1583, $i98);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb21:
    assume $i68 == 1;
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(40, 1));
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.1, $p70);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} $i72 := msecs_to_jiffies($i71);
    call {:si_unique_call 1410} {:cexpr "tmp___1"} boogie_si_record_i64($i72);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} INIT_LIST_HEAD($p73);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p74, 0);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i75 := $i72;
    goto $bb23;

  $bb23:
    call $i75, $p76, $i77, $p78, $p79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i88, $i87, $i89, $i90, $i91, $i93, $i94, $i95 := skd_sg_io_obtain_skspcl_loop_$bb23($p0, $p3, $i75, $p76, $i77, $p78, $p79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i88, $i87, $i89, $i90, $i91, $i93, $i94, $i95);
    goto $bb23_last;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(664, 1));
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $i77 := prepare_to_wait_event($p76, $p3, 1);
    call {:si_unique_call 1413} {:cexpr "tmp___2"} boogie_si_record_i64($i77);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(336, 1));
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.1, $p78);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $i82 := $zext.i1.i8($i81);
    call {:si_unique_call 1414} {:cexpr "__cond"} boogie_si_record_i8($i82);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i8.i1($i82);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i85 := $i75;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i8.i1($i82);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $i87 := 1;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i86 == 1);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i88 := $eq.i64($i85, 0);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $i87 := $i88;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $i89 := $zext.i1.i32($i87);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $i91 := $i85;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i77, 0);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $i94 := $i77;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} $i95 := schedule_timeout($i85);
    call {:si_unique_call 1417} {:cexpr "__ret___0"} boogie_si_record_i64($i95);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i75 := $i95;
    goto corral_source_split_7507_dummy;

  $bb37:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i92 := $i94;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(664, 1));
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} finish_wait($p96, $p3);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $i97 := $i92;
    goto $bb40;

  $bb33:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $i92 := $i91;
    goto $bb35;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb31;

  $bb24:
    assume $i83 == 1;
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i84 := $eq.i64($i75, 0);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb26;

  $bb27:
    assume $i84 == 1;
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i85 := 1;
    goto $bb29;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb19;

  $bb12:
    assume $i61 == 1;
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $i62 := $eq.i64($i55, 0);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb14;

  $bb15:
    assume $i62 == 1;
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $i63 := 1;
    goto $bb17;

  $bb9:
    assume $i48 == 1;
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} vslice_dummy_var_232 := __dynamic_pr_debug.ref.ref.ref.ref.i32($p2, .str.122, $p50, .str.121, 1575);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $p31, $i32 := $p30, 0;
    goto $bb7;

  $bb2:
    assume $i8 == 1;
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(336, 1));
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, $p11);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.1, $p15);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 1024);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p21, $i19);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p23, 1);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 168)), $mul.ref(128, 1));
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p24, 0);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p26, 0);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    goto $bb4;

  corral_source_split_7507_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7472;

  $bb49_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} ldv_spin_lock();
    goto corral_source_split_7373;
}



const skd_sg_io_prep_buffering: ref;

axiom skd_sg_io_prep_buffering == $sub.ref(0, 694336);

procedure skd_sg_io_prep_buffering($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, assertsPassed;



implementation skd_sg_io_prep_buffering($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    call {:si_unique_call 1422} {:cexpr "dxfer_len"} boogie_si_record_i32($i6);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $i7 := skd_skreq_prep_buffering($p0, $p4, $i6);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    call {:si_unique_call 1424} {:cexpr "rc"} boogie_si_record_i32($i7);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;
}



const skd_sg_io_copy_buffer: ref;

axiom skd_sg_io_copy_buffer == $sub.ref(0, 695368);

procedure skd_sg_io_copy_buffer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation skd_sg_io_copy_buffer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i20: i1;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i30: i32;
  var $i39: i1;
  var $i40: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $p53: ref;
  var $i54: i64;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i64: i32;
  var $i68: i1;
  var $i69: i32;
  var $p70: ref;
  var $i71: i64;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i31: i32;
  var $i19: i32;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 1426} {:cexpr "skd_sg_io_copy_buffer:arg:dxfer_dir"} boogie_si_record_i32($i2);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    call {:si_unique_call 1427} {:cexpr "resid"} boogie_si_record_i32($i7);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p8, 0);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, $0.ref);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, $i2);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i7, 0);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $i21, $i22, $i23, $i24, $i25, $p26 := $i20, $i7, 0, 0, 0, $0.ref;
    goto $bb14;

  $bb14:
    call $p27, $i28, $i29, $i32, $p33, $p34, $i35, $p36, $p37, $p38, $i30, $i39, $i40, $p42, $p43, $i44, $p45, $p46, $p47, $p48, $i49, $i50, $i51, $i52, $p53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p61, $p62, $i63, $p65, $p66, $i67, $i64, $i68, $i69, $p70, $i71, $i72, $i73, $p74, $p75, $p76, $i77, $p78, $p79, $i80, $i81, $i21, $i22, $i23, $i24, $i25, $p26, $i31, cmdloc_dummy_var_25, cmdloc_dummy_var_26, cmdloc_dummy_var_27 := skd_sg_io_copy_buffer_loop_$bb14($p1, $i2, $p3, $p5, $p27, $i28, $i29, $i32, $p33, $p34, $i35, $p36, $p37, $p38, $i30, $i39, $i40, $p42, $p43, $i44, $p45, $p46, $p47, $p48, $i49, $i50, $i51, $i52, $p53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p61, $p62, $i63, $p65, $p66, $i67, $i64, $i68, $i69, $p70, $i71, $i72, $i73, $p74, $p75, $p76, $i77, $p78, $p79, $i80, $i81, $i21, $i22, $i23, $i24, $i25, $p26, $i31, cmdloc_dummy_var_25, cmdloc_dummy_var_26, cmdloc_dummy_var_27);
    goto $bb14_last;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $i31 := $i24;
    goto $bb41;

  $bb41:
    call $p27, $i28, $i29, $i32, $p33, $p34, $i35, $p36, $p37, $p38, $i30, $i31, cmdloc_dummy_var_25, cmdloc_dummy_var_26, cmdloc_dummy_var_27 := skd_sg_io_copy_buffer_loop_$bb41($p1, $p3, $p27, $i28, $i29, $i32, $p33, $p34, $i35, $p36, $p37, $p38, $i30, $i21, $i31, cmdloc_dummy_var_25, cmdloc_dummy_var_26, cmdloc_dummy_var_27);
    goto $bb41_last;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.1, $p27);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $i30 := $i31;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i23, 0);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $p48, $i49, $i50 := $p26, $i25, $i23;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $i51 := $ult.i32(4096, $i22);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i51 == 1);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i52 := $i22;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.1, $p53);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i64.i32($i54);
    call {:si_unique_call 1433} {:cexpr "__min2___0"} boogie_si_record_i32($i55);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $i56 := $ult.i32($i52, $i55);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i56 == 1);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $i57 := $i55;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $i58 := $ult.i32($i57, $i50);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i58 == 1);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $i59 := $i50;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i2, $sub.i32(0, 2));
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i60 == 1);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.1, $p65);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} $i67 := __copy_to_user($p66, $p48, $i59);
    call {:si_unique_call 1437} {:cexpr "rc"} boogie_si_record_i32($i67);
    assume {:verifier.code 0} true;
    $i64 := $i67;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i64, 0);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i69 := $sub.i32($i22, $i59);
    call {:si_unique_call 1438} {:cexpr "resid"} boogie_si_record_i32($i69);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.1, $p70);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $i72 := $zext.i32.i64($i59);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $i73 := $sub.i64($i71, $i72);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p74, $i73);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.1, $p75);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $i77 := $zext.i32.i64($i59);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p76, $mul.ref($i77, 1));
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p79, $p78);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $i80 := $sub.i32($i50, $i59);
    call {:si_unique_call 1439} {:cexpr "buf_len"} boogie_si_record_i32($i80);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i69, 0);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i81 == 1);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb39:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    $i21, $i22, $i23, $i24, $i25, $p26 := $i81, $i69, $i80, $i30, $i49, $p48;
    goto $bb39_dummy;

  $bb36:
    assume $i68 == 1;
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 14);
    goto $bb8;

  $bb33:
    assume $i60 == 1;
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.1, $p61);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} $i63 := __copy_from_user($p48, $p62, $i59);
    call {:si_unique_call 1435} {:cexpr "rc"} boogie_si_record_i32($i63);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $i64 := $i63;
    goto $bb35;

  $bb30:
    assume $i58 == 1;
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $i59 := $i57;
    goto $bb32;

  $bb27:
    assume $i56 == 1;
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $i57 := $i52;
    goto $bb29;

  $bb24:
    assume $i51 == 1;
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $i52 := 4096;
    goto $bb26;

  $bb21:
    assume $i39 == 1;
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i25, 1);
    call {:si_unique_call 1430} {:cexpr "sksg_ix"} boogie_si_record_i32($i40);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $i44 := $zext.i32.i64($i25);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p43, $mul.ref($i44, 40));
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} $p46 := sg_page($p45);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} $p47 := lowmem_page_address($p46);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $p48, $i49, $i50 := $p47, $i40, 4096;
    goto $bb23;

  $bb16:
    assume $i29 == 1;
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 1);
    call {:si_unique_call 1428} {:cexpr "iov_ix"} boogie_si_record_i32($i32);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i31);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p34, $mul.ref($i35, 16));
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p3);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p36);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.1;
    cmdloc_dummy_var_26 := $M.1;
    call {:si_unique_call 1429} cmdloc_dummy_var_27 := $memcpy.i8(cmdloc_dummy_var_25, cmdloc_dummy_var_26, $p37, $p38, 16, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_27;
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i21 == 1);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb18:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i31 := $i32;
    goto $bb18_dummy;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i2, $sub.i32(0, 2));
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i14 == 1);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.1, $p16);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, $sub.i32(0, 4));
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb4;

  $bb18_dummy:
    assume false;
    return;

  $bb41_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7671;

  $bb39_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7583;
}



const skd_sg_io_send_fitmsg: ref;

axiom skd_sg_io_send_fitmsg == $sub.ref(0, 696400);

procedure skd_sg_io_send_fitmsg($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation skd_sg_io_send_fitmsg($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p22: ref;
  var $p24: ref;
  var $i25: i16;
  var $p27: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $p33: ref;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(152, 1));
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(152, 1));
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_28 := $M.1;
    call {:si_unique_call 1440} cmdloc_dummy_var_29 := $memset.i8(cmdloc_dummy_var_28, $p10, 0, 128, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_29;
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, 3);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(1, 1));
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p12, 1);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, $sub.i32(0, 1));
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.1, $p24);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p7, $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p27, $i25);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(60, 1));
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.1, $p29);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} $i31 := __fswab32($i30);
    call {:si_unique_call 1444} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p7, $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p33, $i31);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $i34 := $ugt.i64(16, 63);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i34 == 1);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p7, $mul.ref(1, 32)), $mul.ref(16, 1));
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(104, 1));
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.1;
    cmdloc_dummy_var_34 := $M.1;
    call {:si_unique_call 1446} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p40, $p42, 16, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_35;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p44, 2);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} skd_send_special_fitmsg($p0, $p3);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i34 == 1;
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(1, 32)), $mul.ref(16, 1));
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(104, 1));
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.1;
    cmdloc_dummy_var_31 := $M.1;
    call {:si_unique_call 1445} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p36, $p38, 16, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_32;
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.1, $p18);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} $i20 := __fswab64($i19);
    call {:si_unique_call 1442} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p7, $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p22, $i20);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const skd_sg_io_await: ref;

axiom skd_sg_io_await == $sub.ref(0, 697432);

procedure skd_sg_io_await($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation skd_sg_io_await($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i8;
  var $i17: i1;
  var $i18: i1;
  var $i19: i64;
  var $i20: i1;
  var $i22: i1;
  var $i21: i1;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i8;
  var $i41: i1;
  var $i42: i1;
  var $i43: i64;
  var $i44: i1;
  var $i46: i1;
  var $i45: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i64;
  var $i51: i1;
  var $i52: i64;
  var $i53: i64;
  var $i50: i64;
  var $p54: ref;
  var $i55: i64;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i24;
  var $i70: i24;
  var $i71: i24;
  var $p72: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i64;
  var $i76: i64;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p84: ref;
  var $p85: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i8;
  var $i100: i8;
  var $i101: i8;
  var $p102: ref;
  var $p103: ref;
  var $p106: ref;
  var $i107: i8;
  var $i108: i8;
  var $i109: i8;
  var $p110: ref;
  var $p111: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p119: ref;
  var $p121: ref;
  var $p122: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i1;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i24;
  var $i140: i24;
  var $i141: i24;
  var $p142: ref;
  var $p143: ref;
  var $i144: i8;
  var $i145: i64;
  var $i146: i64;
  var $i147: i64;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $p152: ref;
  var $i153: i32;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i24;
  var $i163: i24;
  var $i164: i24;
  var $p165: ref;
  var $p166: ref;
  var $i167: i8;
  var $i168: i64;
  var $i169: i64;
  var $i170: i64;
  var $i171: i1;
  var $p172: ref;
  var $p173: ref;
  var $i155: i32;
  var $i127: i32;
  var $i120: i32;
  var $p175: ref;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var vslice_dummy_var_234: i32;
  var vslice_dummy_var_235: i32;
  var vslice_dummy_var_236: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(40, 1));
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} $i9 := msecs_to_jiffies($i8);
    call {:si_unique_call 1453} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.1, $p13);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 2);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i8($i15);
    call {:si_unique_call 1454} {:cexpr "__cond___0"} boogie_si_record_i8($i16);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i19 := $i9;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i16);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $i21 := 1;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i19, 0);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $i21 := $i22;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i21);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i55 := $i19;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i64.i32($i55);
    call {:si_unique_call 1464} {:cexpr "rc"} boogie_si_record_i32($i56);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} ldv_spin_lock();
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p58, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.1, $p60);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 5);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i62 == 1);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.1, $p121);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p122, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.1, $p124);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 2);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i126 == 1);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.1, $p128);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p129, $mul.ref(0, 168)), $mul.ref(128, 1));
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p130, 1);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p131, $0.ref);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i56, 0);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i132 == 1);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p156, .str.27);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p157, .str.126);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p158, .str.29);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p159, .str.129);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p160);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    $i162 := $load.i24($M.7, $p161);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $i163 := $and.i24($i162, $sub.i24(0, 262144));
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $i164 := $or.i24($i163, 1824);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p161, $i164);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p165, 0);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $i167 := $load.i8($M.8, $p166);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $i168 := $zext.i8.i64($i167);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $i169 := $and.i64($i168, 1);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} $i170 := ldv__builtin_expect($i169, 0);
    call {:si_unique_call 1474} {:cexpr "tmp___4"} boogie_si_record_i64($i170);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $i171 := $ne.i64($i170, 0);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i155 := $sub.i32(0, 4);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i127 := $i155;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i120 := $i127;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(72, 1));
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} spin_unlock_irqrestore($p175, $u0);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $r := $i120;
    return;

  $bb45:
    assume $i171 == 1;
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} vslice_dummy_var_236 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref($p5, .str.129, $p173, .str.126, 1824, $p1);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb39:
    assume $i132 == 1;
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p133, .str.27);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p134, .str.126);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p135, .str.29);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p136, .str.128);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $i139 := $load.i24($M.7, $p138);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i140 := $and.i24($i139, $sub.i24(0, 262144));
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $i141 := $or.i24($i140, 1820);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p138, $i141);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p142, 0);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.8, $p143);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i64($i144);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i146 := $and.i64($i145, 1);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} $i147 := ldv__builtin_expect($i146, 0);
    call {:si_unique_call 1472} {:cexpr "tmp___3"} boogie_si_record_i64($i147);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $i148 := $ne.i64($i147, 0);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i155 := $sub.i32(0, 110);
    goto $bb44;

  $bb41:
    assume $i148 == 1;
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p149);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(40, 1));
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.1, $p152);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} vslice_dummy_var_235 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.i32($p4, .str.128, $p150, .str.126, 1820, $p1, $i153);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb36:
    assume $i126 == 1;
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $i127 := 0;
    goto $bb38;

  $bb30:
    assume $i62 == 1;
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p63, .str.27);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p64, .str.126);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p65, .str.29);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p66, .str.127);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $i69 := $load.i24($M.7, $p68);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $i70 := $and.i24($i69, $sub.i24(0, 262144));
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $i71 := $or.i24($i70, 1793);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p68, $i71);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p72, 0);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.8, $p73);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i64($i74);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $i76 := $and.i64($i75, 1);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} $i77 := ldv__builtin_expect($i76, 0);
    call {:si_unique_call 1467} {:cexpr "tmp___2"} boogie_si_record_i64($i77);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.1, $p84);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($add.ref($p85, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(80, 1)), $mul.ref(6, 1));
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p88, 2);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.1, $p89);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p90, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.1;
    call {:si_unique_call 1469} cmdloc_dummy_var_37 := $memset.i8(cmdloc_dummy_var_36, $p93, 0, 32, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_37;
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.1, $p94);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p95, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.1, $p98);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $i100 := $and.i8($i99, $sub.i8(0, 128));
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $i101 := $or.i8($i100, 112);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p98, $i101);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.1, $p102);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($add.ref($p103, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(88, 1)), $mul.ref(2, 1));
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.1, $p106);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $i108 := $and.i8($i107, $sub.i8(0, 16));
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $i109 := $or.i8($i108, 11);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p106, $i109);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.1, $p110);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p111, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(88, 1)), $mul.ref(12, 1));
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p114, 68);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.1, $p115);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($add.ref($p116, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(88, 1)), $mul.ref(13, 1));
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p119, 0);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $i120 := 0;
    goto $bb35;

  $bb32:
    assume $i78 == 1;
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.1, $p81);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} vslice_dummy_var_234 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref($p3, .str.127, $p80, .str.126, 1793, $p82);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(40, 1));
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p26);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} $i28 := msecs_to_jiffies($i27);
    call {:si_unique_call 1456} {:cexpr "tmp___0"} boogie_si_record_i64($i28);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} INIT_LIST_HEAD($p29);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p30, 0);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $i31 := $i28;
    goto $bb12;

  $bb12:
    call $i31, $p32, $i33, $p34, $p35, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i46, $i45, $i47, $i48, $i49, $i51, $i52, $i53 := skd_sg_io_await_loop_$bb12($p0, $p1, $p2, $i31, $p32, $i33, $p34, $p35, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i46, $i45, $i47, $i48, $i49, $i51, $i52, $i53);
    goto $bb12_last;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(664, 1));
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} $i33 := prepare_to_wait_event($p32, $p2, 1);
    call {:si_unique_call 1459} {:cexpr "tmp___1"} boogie_si_record_i64($i33);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.1, $p37);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 2);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i8($i39);
    call {:si_unique_call 1460} {:cexpr "__cond"} boogie_si_record_i8($i40);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i40);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i43 := $i31;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i8.i1($i40);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $i45 := 1;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i44 == 1);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i43, 0);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $i45 := $i46;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i45);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $i49 := $i43;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i33, 0);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $i52 := $i33;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} $i53 := schedule_timeout($i43);
    call {:si_unique_call 1463} {:cexpr "__ret___0"} boogie_si_record_i64($i53);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $i31 := $i53;
    goto corral_source_split_7799_dummy;

  $bb26:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i50 := $i52;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(664, 1));
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} finish_wait($p54, $p2);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $i55 := $i50;
    goto $bb29;

  $bb22:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb24;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb20;

  $bb13:
    assume $i41 == 1;
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i31, 0);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb15;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $i43 := 1;
    goto $bb18;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb8;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i9, 0);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb6;

  corral_source_split_7799_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7763;
}



const skd_sg_io_put_status: ref;

axiom skd_sg_io_put_status == $sub.ref(0, 698464);

procedure skd_sg_io_put_status($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation skd_sg_io_put_status($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p15: ref;
  var $i16: i8;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i24;
  var $i54: i24;
  var $i55: i24;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $p71: ref;
  var $i72: i32;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i1;
  var $p83: ref;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i8;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i24;
  var $i103: i24;
  var $i104: i24;
  var $p105: ref;
  var $p106: ref;
  var $i107: i8;
  var $i108: i64;
  var $i109: i64;
  var $i110: i64;
  var $i111: i1;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i24;
  var $i130: i24;
  var $i131: i24;
  var $p132: ref;
  var $p133: ref;
  var $i134: i8;
  var $i135: i64;
  var $i136: i64;
  var $i137: i64;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i117: i32;
  var vslice_dummy_var_237: i32;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} $i12 := __fswab32($i11);
    call {:si_unique_call 1481} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(80, 1)), $mul.ref(6, 1));
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p15);
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(64, 1));
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p17, $i16);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p18);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i19, $i12);
    call {:si_unique_call 1482} {:cexpr "resid"} boogie_si_record_i32($i20);
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(64, 1));
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 254);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(65, 1));
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p26, $i25);
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(66, 1));
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p27, 0);
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(68, 1));
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p28, 0);
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(70, 1));
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p29, 0);
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(72, 1));
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p30, $i20);
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(65, 1));
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.1, $p31);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i34 == 1);
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(68, 1));
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.1, $p35);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i38 == 1);
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(70, 1));
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.1, $p39);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p47, .str.27);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p48, .str.130);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p49, .str.29);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p50, .str.131);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $i53 := $load.i24($M.7, $p52);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $i54 := $and.i24($i53, $sub.i24(0, 262144));
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $i55 := $or.i24($i54, 1856);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p52, $i55);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p56, 0);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.8, $p57);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i64($i58);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $i60 := $and.i64($i59, 1);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} $i61 := ldv__builtin_expect($i60, 0);
    call {:si_unique_call 1484} {:cexpr "tmp___0"} boogie_si_record_i64($i61);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    $p74 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(65, 1));
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.1, $p74);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 2);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.1, $p118);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p5);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} $i121 := __copy_to_user($p119, $p120, 88);
    call {:si_unique_call 1493} {:cexpr "tmp___4"} boogie_si_record_i32($i121);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i121, 0);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i117 := 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $r := $i117;
    return;

  $bb28:
    assume $i122 == 1;
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p123, .str.27);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p124, .str.130);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p125, .str.29);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p126, .str.133);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p127);
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $i129 := $load.i24($M.7, $p128);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $i130 := $and.i24($i129, $sub.i24(0, 262144));
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $i131 := $or.i24($i130, 1878);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p128, $i131);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p132, 0);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $i134 := $load.i8($M.8, $p133);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $i135 := $zext.i8.i64($i134);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $i136 := $and.i64($i135, 1);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} $i137 := ldv__builtin_expect($i136, 0);
    call {:si_unique_call 1495} {:cexpr "tmp___3"} boogie_si_record_i64($i137);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $i138 := $ne.i64($i137, 0);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i117 := $sub.i32(0, 14);
    goto $bb24;

  $bb30:
    assume $i138 == 1;
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.1, $p141);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} vslice_dummy_var_239 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref($p4, .str.133, $p140, .str.130, 1878, $p142);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb12:
    assume $i77 == 1;
    $p78 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(9, 1));
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.1, $p78);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb14:
    assume $i81 == 1;
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(88, 1));
    $p84 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(9, 1));
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.1, $p84);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    call {:si_unique_call 1486} {:cexpr "__min2"} boogie_si_record_i32($i86);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $i87 := $ult.i32(32, $i86);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i87 == 1);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $i88 := $i86;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i8($i88);
    $p90 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(67, 1));
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p90, $i89);
    $p91 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(32, 1));
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.1, $p91);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p83);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} $i94 := __copy_to_user($p92, $p93, $i88);
    call {:si_unique_call 1488} {:cexpr "tmp___2"} boogie_si_record_i32($i94);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb19:
    assume $i95 == 1;
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p96, .str.27);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p97, .str.130);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p98, .str.29);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p99, .str.132);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i102 := $load.i24($M.7, $p101);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i103 := $and.i24($i102, $sub.i24(0, 262144));
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $i104 := $or.i24($i103, 1870);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p101, $i104);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p105, 0);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.8, $p106);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i64($i107);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $i109 := $and.i64($i108, 1);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $i110 := ldv__builtin_expect($i109, 0);
    call {:si_unique_call 1490} {:cexpr "tmp___1"} boogie_si_record_i64($i110);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $i111 := $ne.i64($i110, 0);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i117 := $sub.i32(0, 14);
    goto $bb24;

  $bb21:
    assume $i111 == 1;
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    $p114 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(32, 1));
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.1, $p114);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} vslice_dummy_var_238 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref($p3, .str.132, $p113, .str.130, 1870, $p115);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb16:
    assume $i87 == 1;
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $i88 := 32;
    goto $bb18;

  $bb9:
    assume $i62 == 1;
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    $p65 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(64, 1));
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.1, $p65);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    $p68 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(65, 1));
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.1, $p68);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    $p71 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(72, 1));
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.1, $p71);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} vslice_dummy_var_237 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32.i32($p2, .str.131, $p64, .str.130, 1856, $i67, $i70, $i72);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb2;

  $bb2:
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(80, 1));
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.1, $p43);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i44, 1);
    $p46 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(80, 1));
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p46, $i45);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb2;
}



const skd_sg_io_release_skspcl: ref;

axiom skd_sg_io_release_skspcl == $sub.ref(0, 699496);

procedure skd_sg_io_release_skspcl($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation skd_sg_io_release_skspcl($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, $0.ref);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} ldv_spin_lock();
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} skd_release_special($p0, $p3);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(72, 1));
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} spin_unlock_irqrestore($p7, $u0);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __copy_to_user: ref;

axiom __copy_to_user == $sub.ref(0, 700528);

procedure __copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} {:cexpr "__copy_to_user:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} might_fault();
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} $i3 := __copy_to_user_nocheck($p0, $p1, $i2);
    call {:si_unique_call 1503} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const might_fault: ref;

axiom might_fault == $sub.ref(0, 701560);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    return;
}



const __copy_to_user_nocheck: ref;

axiom __copy_to_user_nocheck == $sub.ref(0, 702592);

procedure __copy_to_user_nocheck($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __copy_to_user_nocheck($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} {:cexpr "__copy_to_user_nocheck:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} $i3 := copy_user_generic($p0, $p1, $i2);
    call {:si_unique_call 1506} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const copy_user_generic: ref;

axiom copy_user_generic == $sub.ref(0, 703624);

procedure copy_user_generic($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation copy_user_generic($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} {:cexpr "copy_user_generic:arg:len"} boogie_si_record_i32($i2);
    call {:si_unique_call 1508} $p3 := devirtbounce.16(0, copy_user_generic_unrolled, copy_user_generic_string, copy_user_enhanced_fast_string, $p0, $p1, $i2);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $i4 := $extractvalue($p3, 0);
    call {:si_unique_call 1509} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const copy_user_generic_unrolled: ref;

axiom copy_user_generic_unrolled == $sub.ref(0, 704656);

procedure copy_user_generic_unrolled($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);



const copy_user_generic_string: ref;

axiom copy_user_generic_string == $sub.ref(0, 705688);

procedure copy_user_generic_string($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);



const copy_user_enhanced_fast_string: ref;

axiom copy_user_enhanced_fast_string == $sub.ref(0, 706720);

procedure copy_user_enhanced_fast_string($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);



const __copy_from_user: ref;

axiom __copy_from_user == $sub.ref(0, 707752);

procedure __copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} {:cexpr "__copy_from_user:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} might_fault();
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} $i3 := __copy_from_user_nocheck($p0, $p1, $i2);
    call {:si_unique_call 1513} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_nocheck: ref;

axiom __copy_from_user_nocheck == $sub.ref(0, 708784);

procedure __copy_from_user_nocheck($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __copy_from_user_nocheck($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} {:cexpr "__copy_from_user_nocheck:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} $i3 := copy_user_generic($p0, $p1, $i2);
    call {:si_unique_call 1516} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const skd_skreq_prep_buffering: ref;

axiom skd_skreq_prep_buffering == $sub.ref(0, 709816);

procedure skd_skreq_prep_buffering($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, assertsPassed;



implementation skd_skreq_prep_buffering($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i22: i1;
  var $i23: i32;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i11: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i24;
  var $i72: i24;
  var $i73: i24;
  var $p74: ref;
  var $p75: ref;
  var $i76: i8;
  var $i77: i64;
  var $i78: i64;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i16;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i24;
  var $i106: i24;
  var $i107: i24;
  var $p108: ref;
  var $p109: ref;
  var $i110: i8;
  var $i111: i64;
  var $i112: i64;
  var $i113: i64;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $p119: ref;
  var $i120: i32;
  var $p121: ref;
  var $i122: i64;
  var $p123: ref;
  var $i124: i64;
  var $i126: i32;
  var $i127: i32;
  var $i128: i1;
  var $i94: i32;
  var $i27: i32;
  var vslice_dummy_var_240: i32;
  var vslice_dummy_var_241: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1519} {:cexpr "skd_skreq_prep_buffering:arg:dxfer_len"} boogie_si_record_i32($i2);
    call {:si_unique_call 1520} {:cexpr "skd_skreq_prep_buffering:arg:resid"} boogie_si_record_i32($i2);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, $i2);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 3);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, $i2);
    call {:si_unique_call 1521} {:cexpr "resid"} boogie_si_record_i32($i7);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(60, 1));
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p8, $i7);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p9, 0);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i7, 0);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.1, $p46);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(904, 1));
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.1, $p58);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $i60 := $sgt.i32($i59, 1);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i32($i60);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} $i63 := ldv__builtin_expect($i62, 0);
    call {:si_unique_call 1529} {:cexpr "tmp___1"} boogie_si_record_i64($i63);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb19:
    assume $i64 == 1;
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p65, .str.27);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p66, .str.124);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p67, .str.29);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p68, .str.125);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $i71 := $load.i24($M.7, $p70);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $i72 := $and.i24($i71, $sub.i24(0, 262144));
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $i73 := $or.i24($i72, 1662);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p70, $i73);
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p74, 0);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.8, $p75);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i64($i76);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $i78 := $and.i64($i77, 1);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} $i79 := ldv__builtin_expect($i78, 0);
    call {:si_unique_call 1531} {:cexpr "tmp"} boogie_si_record_i64($i79);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.1, $p91);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $i93 := $ugt.i32($i92, 0);
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb24:
    assume $i93 == 1;
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $i94 := 0;
    goto $bb27;

  $bb27:
    call $p95, $p96, $i97, $p99, $p100, $p101, $p102, $p103, $p104, $i105, $i106, $i107, $p108, $p109, $i110, $i111, $i112, $i113, $i114, $p115, $p116, $p117, $i118, $p119, $i120, $p121, $i122, $p123, $i124, $i126, $i127, $i128, $i94, vslice_dummy_var_241 := skd_skreq_prep_buffering_loop_$bb27($p0, $p1, $p4, $p91, $p95, $p96, $i97, $p99, $p100, $p101, $p102, $p103, $p104, $i105, $i106, $i107, $p108, $p109, $i110, $i111, $i112, $i113, $i114, $p115, $p116, $p117, $i118, $p119, $i120, $p121, $i122, $p123, $i124, $i126, $i127, $i128, $i94, vslice_dummy_var_241);
    goto $bb27_last;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.1, $p95);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $i97 := $zext.i32.i64($i94);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p99, .str.27);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p100, .str.124);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p101, .str.29);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p102, .str.82);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $i105 := $load.i24($M.7, $p104);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $i106 := $and.i24($i105, $sub.i24(0, 262144));
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $i107 := $or.i24($i106, 1670);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p104, $i107);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p108, 0);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.8, $p109);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i64($i110);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $i112 := $and.i64($i111, 1);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} $i113 := ldv__builtin_expect($i112, 0);
    call {:si_unique_call 1534} {:cexpr "tmp___0"} boogie_si_record_i64($i113);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $i114 := $ne.i64($i113, 0);
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i126 := $add.i32($i94, 1);
    call {:si_unique_call 1536} {:cexpr "i"} boogie_si_record_i32($i126);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.1, $p91);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $i128 := $ugt.i32($i127, $i126);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i128 == 1);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb32:
    assume $i128 == 1;
    assume {:verifier.code 0} true;
    $i94 := $i126;
    goto $bb32_dummy;

  $bb29:
    assume $i114 == 1;
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p96, $mul.ref($i97, 32)), $mul.ref(4, 1));
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.1, $p117);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p96, $mul.ref($i97, 32)), $mul.ref(0, 1));
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.1, $p119);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p96, $mul.ref($i97, 32)), $mul.ref(8, 1));
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $i122 := $load.i64($M.1, $p121);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p96, $mul.ref($i97, 32)), $mul.ref(24, 1));
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $i124 := $load.i64($M.1, $p123);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} vslice_dummy_var_241 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32.i32.i64.i64($p4, .str.82, $p116, .str.124, 1670, $i94, $i118, $i120, $i122, $i124);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb21:
    assume $i80 == 1;
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $i84 := $load.i16($M.1, $p83);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $i85 := $zext.i16.i32($i84);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.1, $p86);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.1, $p88);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} vslice_dummy_var_240 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.ref.i64($p3, .str.125, $p82, .str.124, 1662, $i85, $p87, $i89);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb16:
    assume $i48 == 1;
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.1, $p49);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32($i50, 1);
    call {:si_unique_call 1527} {:cexpr "ix___0"} boogie_si_record_i32($i51);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.1, $p52);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $i54 := $zext.i32.i64($i51);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p53, $mul.ref($i54, 32)), $mul.ref(0, 1));
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p56, 1038);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p53, $mul.ref($i54, 32)), $mul.ref(24, 1));
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p57, 0);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $i11 := $i7;
    goto $bb4;

  $bb4:
    call $p12, $i13, $p14, $p15, $i16, $p17, $p18, $p19, $i20, $i22, $i23, $p24, $i25, $i26, $p28, $p29, $i30, $p31, $p32, $p33, $i34, $i35, $i36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $i44, $i45, $i11 := skd_skreq_prep_buffering_loop_$bb4($p1, $p12, $i13, $p14, $p15, $i16, $p17, $p18, $p19, $i20, $i22, $i23, $p24, $i25, $i26, $p28, $p29, $i30, $p31, $p32, $p33, $i34, $i35, $i36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $i44, $i45, $i11);
    goto $bb4_last;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    call {:si_unique_call 1522} {:cexpr "ix"} boogie_si_record_i32($i13);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i13);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p15, $mul.ref($i16, 40));
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i13);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i32(4096, $i11);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := 4096;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} $p24 := alloc_pages(208, 0);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} sg_set_page($p17, $p24, $i23, 0);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p19, $mul.ref($i20, 32)), $mul.ref(0, 1));
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p28, 0);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p19, $mul.ref($i20, 32)), $mul.ref(4, 1));
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p29, $i23);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} $i30 := sg_phys($p17);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p19, $mul.ref($i20, 32)), $mul.ref(8, 1));
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p31, $i30);
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p19, $mul.ref($i20, 32)), $mul.ref(16, 1));
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p32, 0);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.1, $p33);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i13, 1);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i35);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $i37 := $mul.i64($i36, 32);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i34, $i37);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p19, $mul.ref($i20, 32)), $mul.ref(24, 1));
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p39, $i38);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.1, $p40);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, 1);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p43, $i42);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32($i11, $i23);
    call {:si_unique_call 1526} {:cexpr "resid"} boogie_si_record_i32($i44);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i45 == 1);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i44;
    goto $bb13_dummy;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 12);
    goto $bb11;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $i23 := $i11;
    goto $bb8;

  $bb32_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8295;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8175;
}



const sg_set_page: ref;

axiom sg_set_page == $sub.ref(0, 710848);

procedure sg_set_page($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation sg_set_page($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} {:cexpr "sg_set_page:arg:len"} boogie_si_record_i32($i2);
    call {:si_unique_call 1538} {:cexpr "sg_set_page:arg:offset"} boogie_si_record_i32($i3);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} sg_assign_page($p0, $p1);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p4, $i3);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p5, $i2);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    return;
}



const sg_phys: ref;

axiom sg_phys == $sub.ref(0, 711880);

procedure sg_phys($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation sg_phys($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} $p1 := sg_page($p0);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 24189255811072);
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $i4 := $sdiv.i64($i3, 64);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $i5 := $shl.i64($i4, 12);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i5, $i8);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const sg_assign_page: ref;

axiom sg_assign_page == $sub.ref(0, 712912);

procedure sg_assign_page($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation sg_assign_page($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.1, $p2);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, 3);
    call {:si_unique_call 1541} {:cexpr "page_link"} boogie_si_record_i64($i4);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 3);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 1543} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.1, $p12);
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 2271560481);
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1546} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.1, $p19);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i20);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1549} {:cexpr "tmp___1"} boogie_si_record_i64($i24);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $i27 := $or.i64($i4, $i26);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p28, $i27);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i25 == 1;
    call {:si_unique_call 1550} devirtbounce(0, .str.73, 68, 12);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call sg_assign_page_loop_$bb11();
    goto $bb11_last;

  $bb5:
    assume $i18 == 1;
    call {:si_unique_call 1547} devirtbounce(0, .str.73, 67, 12);
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call sg_assign_page_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 1544} devirtbounce(0, .str.73, 65, 12);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call sg_assign_page_loop_$bb3();
    goto $bb3_last;

  $bb11_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const current_thread_info: ref;

axiom current_thread_info == $sub.ref(0, 713944);

procedure current_thread_info() returns ($r: ref);
  free requires assertsPassed;



implementation current_thread_info() returns ($r: ref)
{
  var $i0: i64;
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} $i0 := devirtbounce.17(0, kernel_stack);
    call {:si_unique_call 1552} {:cexpr "pfo_ret__"} boogie_si_record_i64($i0);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64($i0, 16344);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __chk_range_not_ok: ref;

axiom __chk_range_not_ok == $sub.ref(0, 714976);

procedure __chk_range_not_ok($i0: i64, $i1: i64, $i2: i64) returns ($r: i1);
  free requires assertsPassed;



implementation __chk_range_not_ok($i0: i64, $i1: i64, $i2: i64) returns ($r: i1)
{
  var $i3: i64;
  var $i4: i1;
  var $i6: i1;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} {:cexpr "__chk_range_not_ok:arg:addr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1554} {:cexpr "__chk_range_not_ok:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1555} {:cexpr "__chk_range_not_ok:arg:limit"} boogie_si_record_i64($i2);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i0, $i1);
    call {:si_unique_call 1556} {:cexpr "addr"} boogie_si_record_i64($i3);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $i4 := $ult.i64($i3, $i1);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i64($i3, $i2);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 716008);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 1559} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1560} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} might_fault();
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} $i9 := ldv__builtin_expect($i8, 1);
    call {:si_unique_call 1563} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i5);
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $i15 := $uge.i64($i14, $i2);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 1567} {:cexpr "tmp___1"} boogie_si_record_i64($i18);
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i22 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i2);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} $i21 := _copy_from_user($p0, $p1, $i20);
    call {:si_unique_call 1569} {:cexpr "n"} boogie_si_record_i64($i21);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i2);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} $i12 := _copy_from_user($p0, $p1, $i11);
    call {:si_unique_call 1565} {:cexpr "n"} boogie_si_record_i64($i12);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 717040);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed, $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var vslice_dummy_var_242: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1572} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} ldv_check_alloc_flags($i1);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} vslice_dummy_var_242 := ldv_kmalloc_12($i0, $i1);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;
}



const iov_shorten: ref;

axiom iov_shorten == $sub.ref(0, 718072);

procedure iov_shorten($p0: ref, $i1: i64, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation iov_shorten($p0: ref, $i1: i64, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1575} {:cexpr "iov_shorten:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1576} {:cexpr "iov_shorten:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1577} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1578} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_kmalloc_12: ref;

axiom ldv_kmalloc_12 == $sub.ref(0, 719104);

procedure ldv_kmalloc_12($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_kmalloc_12($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} {:cexpr "ldv_kmalloc_12:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1580} {:cexpr "ldv_kmalloc_12:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 720136);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 721168);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1582} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1583} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1584} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 722200);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    return;
}



const skd_reserved_isr: ref;

axiom skd_reserved_isr == $sub.ref(0, 723232);

procedure skd_reserved_isr($i0: i32, $p1: ref) returns ($r: i32);



const skd_statec_isr: ref;

axiom skd_statec_isr == $sub.ref(0, 724264);

procedure skd_statec_isr($i0: i32, $p1: ref) returns ($r: i32);



const skd_comp_q: ref;

axiom skd_comp_q == $sub.ref(0, 725296);

procedure skd_comp_q($i0: i32, $p1: ref) returns ($r: i32);



const skd_msg_isr: ref;

axiom skd_msg_isr == $sub.ref(0, 726328);

procedure skd_msg_isr($i0: i32, $p1: ref) returns ($r: i32);



const skd_qfull_isr: ref;

axiom skd_qfull_isr == $sub.ref(0, 727360);

procedure skd_qfull_isr($i0: i32, $p1: ref) returns ($r: i32);



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 728392);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1585} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1586} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1587} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1588} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} $p4 := calloc(1, $i0);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1590} __VERIFIER_assume($i7);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const timer_init_1: ref;

axiom timer_init_1 == $sub.ref(0, 729424);

procedure timer_init_1();
  free requires assertsPassed;
  modifies $M.12, $M.14, $M.16, $M.18;



implementation timer_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $M.12 := 0;
    call {:si_unique_call 1591} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $M.14 := 0;
    call {:si_unique_call 1592} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 1593} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 1594} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    return;
}



const choose_timer_2: ref;

axiom choose_timer_2 == $sub.ref(0, 730456);

procedure choose_timer_2($p0: ref);
  free requires assertsPassed;
  modifies $M.11, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, $CurrAddr, $M.10, $M.20, assertsPassed;



implementation choose_timer_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.1, $p3);
    call {:si_unique_call 1596} devirtbounce.18($p2, $i4);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} {:cexpr "ldv_timer_state_2"} boogie_si_record_i32(2);
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;
}



const ldv_initialize_pci_driver_3: ref;

axiom ldv_initialize_pci_driver_3 == $sub.ref(0, 731488);

procedure ldv_initialize_pci_driver_3();
  free requires assertsPassed;
  modifies $M.43, $M.1, $CurrAddr;



implementation ldv_initialize_pci_driver_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} $p0 := ldv_zalloc(2976);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $M.43 := $p0;
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    return;
}



const choose_timer_1: ref;

axiom choose_timer_1 == $sub.ref(0, 732520);

procedure choose_timer_1();
  free requires assertsPassed;
  modifies $M.12, $M.14, $M.16, $M.18, $M.11, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.13, $M.15, $M.17, $M.19, $CurrAddr, $M.10, $M.20, assertsPassed;



implementation choose_timer_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1600} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1601} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1602} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} ldv_stop();
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $i18 := $M.18;
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 1609} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(2);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $i20 := $M.18;
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $p21 := $M.19;
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} ldv_timer_1($i20, $p21);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $i14 := $M.16;
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $M.16 := 2;
    call {:si_unique_call 1607} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(2);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $i16 := $M.16;
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $p17 := $M.17;
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} ldv_timer_1($i16, $p17);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $i10 := $M.14;
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $M.14 := 2;
    call {:si_unique_call 1605} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(2);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i12 := $M.14;
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $p13 := $M.15;
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} ldv_timer_1($i12, $p13);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $i6 := $M.12;
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $M.12 := 2;
    call {:si_unique_call 1603} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(2);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $i8 := $M.12;
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $p9 := $M.13;
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} ldv_timer_1($i8, $p9);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_211:
    assume !assertsPassed;
    return;
}



const ldv_timer_1: ref;

axiom ldv_timer_1 == $sub.ref(0, 733552);

procedure ldv_timer_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.11, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, $CurrAddr, $M.10, $M.20, assertsPassed;



implementation ldv_timer_1($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} {:cexpr "ldv_timer_1:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.1, $p2);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} skd_timer_tick($i3);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 734584);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_initialize_block_device_operations_4: ref;

axiom ldv_initialize_block_device_operations_4 == $sub.ref(0, 735616);

procedure ldv_initialize_block_device_operations_4();
  free requires assertsPassed;
  modifies $M.44, $M.1, $CurrAddr;



implementation ldv_initialize_block_device_operations_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} $p0 := ldv_zalloc(496);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $M.44 := $p0;
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 736648);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.45, $M.46, $M.47, $M.12, $M.14, $M.16, $M.18, $M.48, $M.49, $M.50, $M.51, $M.52, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.53, $M.43, $M.44, $M.2, $M.54, $M.9, $M.55, $M.56, $M.20, $M.13, $M.15, $M.17, $M.19, $M.11, $M.23, $M.24, $M.29, $M.30, $M.31, $M.32, $M.33, $M.28, $M.34, $M.37, $M.39, $M.26, $M.41, $M.40, $M.27, $M.38, $M.64, $M.22, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $CurrAddr, $M.10, $M.36, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var vslice_dummy_var_243: i32;
  var vslice_dummy_var_244: i32;

  $bb0:
    call {:si_unique_call 1617} $initialize();
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1618} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1621} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1622} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    call {:si_unique_call 1623} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} $p3 := ldv_zalloc(16);
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1625} $i5 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1626} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i5);
    call {:si_unique_call 1627} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} $p6 := ldv_zalloc(32);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} ldv_initialize();
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.45;
    call {:si_unique_call 1630} cmdloc_dummy_var_39 := $memset.i8(cmdloc_dummy_var_38, $p8, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.45 := cmdloc_dummy_var_39;
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_40 := $M.46;
    call {:si_unique_call 1631} cmdloc_dummy_var_41 := $memset.i8(cmdloc_dummy_var_40, $p9, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.46 := cmdloc_dummy_var_41;
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $M.47 := 0;
    call {:si_unique_call 1632} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} timer_init_1();
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1634} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $M.49 := 0;
    call {:si_unique_call 1635} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1636} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $M.51 := 0;
    call {:si_unique_call 1637} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1638} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $i26, $i28, $i29, $p30, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $p62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $p70, $i71, $i72, $p73, $i74, $i75, $p76, $p77, $i78, $i79, $i80, $i81, $i82, $i83, $p84, $i85, $i86, $i87, $i88, $p89, $i90, $i91, $i92, $i93, $p94, $i95, $i96, $i97, $i98, $p99, $i100, $i101, $i102, $i103, $i104, $p105, vslice_dummy_var_243, vslice_dummy_var_244 := main_loop_$bb1($p0, $p1, $i2, $p4, $i5, $p7, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $i26, $i28, $i29, $p30, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $p62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $p70, $i71, $i72, $p73, $i74, $i75, $p76, $p77, $i78, $i79, $i80, $i81, $i82, $i83, $p84, $i85, $i86, $i87, $i88, $p89, $i90, $i91, $i92, $i93, $p94, $i95, $i96, $i97, $i98, $p99, $i100, $i101, $i102, $i103, $i104, $p105, vslice_dummy_var_243, vslice_dummy_var_244);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i10, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} ldv_stop();
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb36_dummy;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $i103 := $M.52;
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb123:
    assume $i104 == 1;
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $p105 := $M.20;
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} choose_timer_2($p105);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    goto $bb125;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $i51 := $M.51;
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb70:
    assume $i52 == 1;
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1666} $i53 := __VERIFIER_nondet_int();
    call {:si_unique_call 1667} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i53);
    call {:si_unique_call 1668} {:cexpr "tmp___6"} boogie_si_record_i32($i53);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i53, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i53, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i53, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} ldv_stop();
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb79:
    assume $i57 == 1;
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $i97 := $M.51;
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 4);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb114:
    assume $i98 == 1;
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $p99 := $M.43;
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} $i100 := skd_pci_resume($p99);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $M.56 := $i100;
    call {:si_unique_call 1690} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i100);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $i101 := $M.56;
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 0);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb116:
    assume $i102 == 1;
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1691} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    goto $bb118;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb77:
    assume $i56 == 1;
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $i82 := $M.51;
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 4);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i87 := $M.51;
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 3);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i92 := $M.51;
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 2);
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb111:
    assume $i93 == 1;
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $p94 := $M.43;
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} skd_pci_remove($p94);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1687} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i95 := $M.49;
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $i96 := $sub.i32($i95, 1);
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $M.49 := $i96;
    call {:si_unique_call 1688} {:cexpr "ref_cnt"} boogie_si_record_i32($i96);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    goto $bb113;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb108:
    assume $i88 == 1;
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $p89 := $M.43;
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} skd_pci_remove($p89);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1684} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $i90 := $M.49;
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $i91 := $sub.i32($i90, 1);
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $M.49 := $i91;
    call {:si_unique_call 1685} {:cexpr "ref_cnt"} boogie_si_record_i32($i91);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    goto $bb110;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb105:
    assume $i83 == 1;
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $p84 := $M.43;
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} skd_pci_remove($p84);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1681} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $i85 := $M.49;
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $i86 := $sub.i32($i85, 1);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $M.49 := $i86;
    call {:si_unique_call 1682} {:cexpr "ref_cnt"} boogie_si_record_i32($i86);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    goto $bb107;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb75:
    assume $i55 == 1;
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $i74 := $M.51;
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 2);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb99:
    assume $i75 == 1;
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $p76 := $M.43;
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.46, $p77);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} $i79 := skd_pci_suspend($p76, $i78);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $M.55 := $i79;
    call {:si_unique_call 1678} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i79);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $i80 := $M.55;
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 0);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb101:
    assume $i81 == 1;
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $M.51 := 4;
    call {:si_unique_call 1679} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    goto $bb103;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb73:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i53, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i58 == 1);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $i68 := $M.51;
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 4);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i71 := $M.51;
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 2);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb96:
    assume $i72 == 1;
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $p73 := $M.43;
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} skd_pci_shutdown($p73);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $M.51 := 3;
    call {:si_unique_call 1676} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    goto $bb98;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb93:
    assume $i69 == 1;
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $p70 := $M.43;
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} skd_pci_shutdown($p70);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $M.51 := 3;
    call {:si_unique_call 1674} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    goto $bb95;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb82:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i53, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb81;

  $bb84:
    assume $i59 == 1;
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $i60 := $M.51;
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 1);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb86:
    assume $i61 == 1;
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $p62 := $M.43;
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} $i63 := skd_pci_probe($p62, $p7);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $M.54 := $i63;
    call {:si_unique_call 1670} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i63);
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $i64 := $M.54;
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb88:
    assume $i65 == 1;
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1671} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $i66 := $M.49;
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i66, 1);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $M.49 := $i67;
    call {:si_unique_call 1672} {:cexpr "ref_cnt"} boogie_si_record_i32($i67);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    goto $bb90;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $i34 := $M.50;
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb40:
    assume $i35 == 1;
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1651} $i36 := __VERIFIER_nondet_int();
    call {:si_unique_call 1652} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i36);
    call {:si_unique_call 1653} {:cexpr "tmp___5"} boogie_si_record_i32($i36);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i36, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} ldv_stop();
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb45:
    assume $i38 == 1;
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $i44 := $M.50;
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 1);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb58:
    assume $i45 == 1;
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} $i46 := skd_init();
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $M.53 := $i46;
    call {:si_unique_call 1658} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i46);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $i47 := $M.53;
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i49 := $M.53;
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb63:
    assume $i50 == 1;
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1664} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} ldv_check_final_state();
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb60:
    assume $i48 == 1;
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1659} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1660} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} ldv_initialize_pci_driver_3();
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1662} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} ldv_initialize_block_device_operations_4();
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb43:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i36, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb47;

  $bb48:
    assume $i39 == 1;
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $i40 := $M.50;
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 3);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb50:
    assume $i41 == 1;
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $i42 := $M.49;
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb52;

  $bb53:
    assume $i43 == 1;
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} skd_exit();
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1655} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb3:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i10, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i15 == 1);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $i32 := $M.48;
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb37:
    assume $i33 == 1;
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} choose_timer_1();
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i10, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb11;

  $bb14:
    assume $i16 == 1;
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $i17 := $M.47;
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb16:
    assume $i18 == 1;
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1642} $i19 := __VERIFIER_nondet_int();
    call {:si_unique_call 1643} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i19);
    call {:si_unique_call 1644} {:cexpr "tmp___4"} boogie_si_record_i32($i19);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i19, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} ldv_stop();
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb21:
    assume $i21 == 1;
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $i28 := $M.47;
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb30:
    assume $i29 == 1;
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $p30 := $M.44;
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} vslice_dummy_var_244 := skd_bdev_getgeo($p30, $p4);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1648} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb19:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i19, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb23;

  $bb24:
    assume $i22 == 1;
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $i23 := $M.47;
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $p25 := $M.44;
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.45, $p0);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} vslice_dummy_var_243 := skd_bdev_ioctl($p25, $i26, $i5, $i2);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1646} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb36_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1639} $i10 := __VERIFIER_nondet_int();
    call {:si_unique_call 1640} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i10);
    call {:si_unique_call 1641} {:cexpr "tmp___3"} boogie_si_record_i32($i10);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 737680);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    return;
}



const skd_exit: ref;

axiom skd_exit == $sub.ref(0, 738712);

procedure skd_exit();
  free requires assertsPassed;



implementation skd_exit()
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var vslice_dummy_var_245: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} vslice_dummy_var_245 := printk.ref.ref.ref(.str.136, .str.137, .str.138);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} pci_unregister_driver(skd_driver);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $i1 := $M.2;
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $i3 := $M.2;
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} unregister_blkdev($i3, .str.27);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const skd_init: ref;

axiom skd_init == $sub.ref(0, 739744);

procedure skd_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $M.22, $M.27, $M.40, $M.41, $M.26, $M.39;



implementation skd_init() returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i42: i32;
  var vslice_dummy_var_246: i32;
  var vslice_dummy_var_247: i32;
  var vslice_dummy_var_248: i32;
  var vslice_dummy_var_249: i32;
  var vslice_dummy_var_250: i32;
  var vslice_dummy_var_251: i32;
  var vslice_dummy_var_252: i32;
  var vslice_dummy_var_253: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} vslice_dummy_var_246 := printk.ref.ref.ref(.str.139, .str.137, .str.138);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $i1 := $M.38;
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb7, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i6 := $M.38;
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} vslice_dummy_var_247 := printk.ref.i32.i32(.str.140, $i6, 1);
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1700} {:cexpr "skd_isr_type"} boogie_si_record_i32(1);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i8 := $M.22;
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $i9 := $sle.i32($i8, 0);
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i9 == 1);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $i10 := $M.22;
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i32($i10, 200);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i14 := $M.27;
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $i15 := $sle.i32($i14, 0);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i15 == 1);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $i16 := $M.27;
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, 14);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i20 := $M.40;
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $i21 := $sle.i32($i20, 0);
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i21 == 1);
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $i22 := $M.40;
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $i23 := $sgt.i32($i22, 4096);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i26 := $M.41;
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, 0);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb36;

  $bb36:
    assume !($i27 == 1);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $i28 := $M.41;
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $i29 := $sgt.i32($i28, 2);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i32 := $M.26;
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 0);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i36 := $M.39;
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $i37 := $sle.i32($i36, 0);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb45;

  $bb45:
    assume !($i37 == 1);
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $i38 := $M.39;
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $i39 := $sgt.i32($i38, 50);
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} $i42 := __pci_register_driver(skd_driver, __this_module, .str.27);
    call {:si_unique_call 1714} {:cexpr "tmp"} boogie_si_record_i32($i42);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i40 := $M.39;
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} vslice_dummy_var_253 := printk.ref.i32.i32(.str.146, $i40, 32);
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $M.39 := 32;
    call {:si_unique_call 1712} {:cexpr "skd_max_pass_thru"} boogie_si_record_i32(32);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb44;

  $bb40:
    assume $i33 == 1;
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $i34 := $M.26;
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} vslice_dummy_var_252 := printk.ref.i32.i32(.str.145, $i34, 0);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $M.26 := 0;
    call {:si_unique_call 1710} {:cexpr "skd_isr_comp_limit"} boogie_si_record_i32(0);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i30 := $M.41;
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} vslice_dummy_var_251 := printk.ref.i32.i32(.str.144, $i30, 0);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $M.41 := 0;
    call {:si_unique_call 1708} {:cexpr "skd_dbg_level"} boogie_si_record_i32(0);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb35;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i24 := $M.40;
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} vslice_dummy_var_250 := printk.ref.i32.i32(.str.143, $i24, 256);
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $M.40 := 256;
    call {:si_unique_call 1706} {:cexpr "skd_sgs_per_request"} boogie_si_record_i32(256);
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb29;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i18 := $M.27;
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} vslice_dummy_var_249 := printk.ref.i32.i32(.str.142, $i18, 1);
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1704} {:cexpr "skd_max_req_per_msg"} boogie_si_record_i32(1);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb23;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i12 := $M.22;
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} vslice_dummy_var_248 := printk.ref.i32.i32(.str.141, $i12, 64);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $M.22 := 64;
    call {:si_unique_call 1702} {:cexpr "skd_max_queue_depth"} boogie_si_record_i32(64);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb17;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb2:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb10;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 740776);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 741808);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1715} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1716} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 742840);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    return;
}



const unregister_blkdev: ref;

axiom unregister_blkdev == $sub.ref(0, 743872);

procedure unregister_blkdev($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation unregister_blkdev($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} {:cexpr "unregister_blkdev:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 744904);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1718} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 1} true;
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 745936);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 746968);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 748000);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 749032);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 750064);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 751096);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 752128);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 753160);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 754192);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 755224);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 756256);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 757288);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 758320);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1719} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1720} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1721} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1722} __VERIFIER_assume($i4);
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 759352);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 760384);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 761416);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 762448);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1723} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1724} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1725} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1726} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1727} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1728} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1729} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1730} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1731} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1732} __VERIFIER_assume($i7);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1733} __VERIFIER_assume($i11);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 763480);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 764512);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1734} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1735} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1736} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1737} __VERIFIER_assume($i4);
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 765544);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 766576);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 767608);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 768640);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 769672);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1738} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1739} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1740} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1741} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1742} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1743} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1744} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1745} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1746} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1747} __VERIFIER_assume($i7);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1748} __VERIFIER_assume($i11);
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 770704);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 771736);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 772768);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 773800);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 774832);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 775864);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 776896);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 777928);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 778960);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1749} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1750} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1751} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1752} __VERIFIER_assume($i10);
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 779992);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1753} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1754} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1755} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 781024);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1756} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1757} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1758} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 782056);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1759} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1760} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 783088);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 784120);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1761} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1762} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 785152);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 786184);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 787216);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1763} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1764} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1765} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1766} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} $p6 := malloc($i5);
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.1;
    call {:si_unique_call 1768} cmdloc_dummy_var_43 := $memset.i8(cmdloc_dummy_var_42, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_43;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 788248);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 789280);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.12, $M.14, $M.16, $M.18, $M.20, $M.13, $M.15, $M.17, $M.19, $M.43, $M.44, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.11, $M.23, $M.24, $M.1, $M.29, $M.30, $M.31, $M.32, $M.33, $M.28, $M.34, $M.37, $M.39, $M.26, $M.41, $M.40, $M.27, $M.38, $M.2, $M.64, $M.22, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1769} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    call {:si_unique_call 1770} {:cexpr "ldv_timer_state_2"} boogie_si_record_i32(0);
    $M.12 := 0;
    call {:si_unique_call 1771} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(0);
    $M.14 := 0;
    call {:si_unique_call 1772} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(0);
    $M.16 := 0;
    call {:si_unique_call 1773} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(0);
    $M.18 := 0;
    call {:si_unique_call 1774} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(0);
    $M.20 := $0.ref;
    $M.13 := $0.ref;
    $M.15 := $0.ref;
    $M.17 := $0.ref;
    $M.19 := $0.ref;
    $M.43 := $0.ref;
    $M.44 := $0.ref;
    $M.47 := 0;
    call {:si_unique_call 1775} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 1776} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1777} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 1778} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 1779} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 1780} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 1781} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.54 := 0;
    call {:si_unique_call 1782} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 1783} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 1784} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.11 := 0;
    call {:si_unique_call 1785} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.23 := $store.ref($M.23, msix_entries, .str.293);
    $M.24 := $store.ref($M.24, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(0, 16)), $mul.ref(8, 1)), skd_reserved_isr);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(1, 16)), $mul.ref(0, 1)), .str.294);
    $M.24 := $store.ref($M.24, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(1, 16)), $mul.ref(8, 1)), skd_reserved_isr);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(2, 16)), $mul.ref(0, 1)), .str.295);
    $M.24 := $store.ref($M.24, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(2, 16)), $mul.ref(8, 1)), skd_reserved_isr);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(3, 16)), $mul.ref(0, 1)), .str.296);
    $M.24 := $store.ref($M.24, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(3, 16)), $mul.ref(8, 1)), skd_reserved_isr);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(4, 16)), $mul.ref(0, 1)), .str.297);
    $M.24 := $store.ref($M.24, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(4, 16)), $mul.ref(8, 1)), skd_statec_isr);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(5, 16)), $mul.ref(0, 1)), .str.298);
    $M.24 := $store.ref($M.24, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(5, 16)), $mul.ref(8, 1)), skd_comp_q);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(6, 16)), $mul.ref(0, 1)), .str.299);
    $M.24 := $store.ref($M.24, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(6, 16)), $mul.ref(8, 1)), skd_msg_isr);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(7, 16)), $mul.ref(0, 1)), .str.300);
    $M.24 := $store.ref($M.24, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(7, 16)), $mul.ref(8, 1)), skd_reserved_isr);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(8, 16)), $mul.ref(0, 1)), .str.300);
    $M.24 := $store.ref($M.24, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(8, 16)), $mul.ref(8, 1)), skd_reserved_isr);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(9, 16)), $mul.ref(0, 1)), .str.301);
    $M.24 := $store.ref($M.24, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(9, 16)), $mul.ref(8, 1)), skd_qfull_isr);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(10, 16)), $mul.ref(0, 1)), .str.302);
    $M.24 := $store.ref($M.24, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(10, 16)), $mul.ref(8, 1)), skd_qfull_isr);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(11, 16)), $mul.ref(0, 1)), .str.303);
    $M.24 := $store.ref($M.24, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(11, 16)), $mul.ref(8, 1)), skd_qfull_isr);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(12, 16)), $mul.ref(0, 1)), .str.304);
    $M.24 := $store.ref($M.24, $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(12, 16)), $mul.ref(8, 1)), skd_qfull_isr);
    $M.1 := $store.ref($M.1, skd_blockdev_ops, $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(skd_blockdev_ops, $mul.ref(0, 104)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(skd_blockdev_ops, $mul.ref(0, 104)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(skd_blockdev_ops, $mul.ref(0, 104)), $mul.ref(24, 1)), skd_bdev_ioctl);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(skd_blockdev_ops, $mul.ref(0, 104)), $mul.ref(32, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(skd_blockdev_ops, $mul.ref(0, 104)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(skd_blockdev_ops, $mul.ref(0, 104)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(skd_blockdev_ops, $mul.ref(0, 104)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(skd_blockdev_ops, $mul.ref(0, 104)), $mul.ref(64, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(skd_blockdev_ops, $mul.ref(0, 104)), $mul.ref(72, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(skd_blockdev_ops, $mul.ref(0, 104)), $mul.ref(80, 1)), skd_bdev_getgeo);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(skd_blockdev_ops, $mul.ref(0, 104)), $mul.ref(88, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(skd_blockdev_ops, $mul.ref(0, 104)), $mul.ref(96, 1)), __this_module);
    $M.29 := $store.i8($M.29, skd_chkstat_table, 112);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(0, 12)), $mul.ref(1, 1)), 2);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(0, 12)), $mul.ref(2, 1)), 1);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(0, 12)), $mul.ref(3, 1)), 0);
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(0, 12)), $mul.ref(4, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(0, 12)), $mul.ref(5, 1)), 28);
    $M.34 := $store.i32($M.34, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.29 := $store.i8($M.29, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(1, 12)), $mul.ref(0, 1)), 112);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(1, 12)), $mul.ref(1, 1)), 2);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(1, 12)), $mul.ref(2, 1)), 0);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(1, 12)), $mul.ref(3, 1)), 11);
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(1, 12)), $mul.ref(4, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(1, 12)), $mul.ref(5, 1)), 30);
    $M.34 := $store.i32($M.34, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(1, 12)), $mul.ref(8, 1)), 1);
    $M.29 := $store.i8($M.29, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(2, 12)), $mul.ref(0, 1)), 112);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(2, 12)), $mul.ref(1, 1)), 2);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(2, 12)), $mul.ref(2, 1)), 0);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(2, 12)), $mul.ref(3, 1)), 93);
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(2, 12)), $mul.ref(4, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(2, 12)), $mul.ref(5, 1)), 30);
    $M.34 := $store.i32($M.34, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(2, 12)), $mul.ref(8, 1)), 1);
    $M.29 := $store.i8($M.29, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(3, 12)), $mul.ref(0, 1)), 112);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(3, 12)), $mul.ref(1, 1)), 2);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(3, 12)), $mul.ref(2, 1)), 1);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(3, 12)), $mul.ref(3, 1)), 11);
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(3, 12)), $mul.ref(4, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(3, 12)), $mul.ref(5, 1)), 31);
    $M.34 := $store.i32($M.34, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(3, 12)), $mul.ref(8, 1)), 1);
    $M.29 := $store.i8($M.29, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(4, 12)), $mul.ref(0, 1)), 112);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(4, 12)), $mul.ref(1, 1)), 2);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(4, 12)), $mul.ref(2, 1)), 11);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(4, 12)), $mul.ref(3, 1)), 0);
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(4, 12)), $mul.ref(4, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(4, 12)), $mul.ref(5, 1)), 28);
    $M.34 := $store.i32($M.34, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(4, 12)), $mul.ref(8, 1)), 2);
    $M.29 := $store.i8($M.29, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(5, 12)), $mul.ref(0, 1)), 112);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(5, 12)), $mul.ref(1, 1)), 2);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(5, 12)), $mul.ref(2, 1)), 6);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(5, 12)), $mul.ref(3, 1)), 11);
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(5, 12)), $mul.ref(4, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(5, 12)), $mul.ref(5, 1)), 30);
    $M.34 := $store.i32($M.34, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(5, 12)), $mul.ref(8, 1)), 2);
    $M.29 := $store.i8($M.29, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(6, 12)), $mul.ref(0, 1)), 112);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(6, 12)), $mul.ref(1, 1)), 2);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(6, 12)), $mul.ref(2, 1)), 6);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(6, 12)), $mul.ref(3, 1)), 93);
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(6, 12)), $mul.ref(4, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(6, 12)), $mul.ref(5, 1)), 30);
    $M.34 := $store.i32($M.34, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(6, 12)), $mul.ref(8, 1)), 2);
    $M.29 := $store.i8($M.29, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(7, 12)), $mul.ref(0, 1)), 112);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(7, 12)), $mul.ref(1, 1)), 2);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(7, 12)), $mul.ref(2, 1)), 6);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(7, 12)), $mul.ref(3, 1)), $sub.i8(0, 128));
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(7, 12)), $mul.ref(4, 1)), 48);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(7, 12)), $mul.ref(5, 1)), 31);
    $M.34 := $store.i32($M.34, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(7, 12)), $mul.ref(8, 1)), 2);
    $M.29 := $store.i8($M.29, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(8, 12)), $mul.ref(0, 1)), 112);
    $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(8, 12)), $mul.ref(1, 1)), 2);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(8, 12)), $mul.ref(2, 1)), 6);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(8, 12)), $mul.ref(3, 1)), 63);
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(8, 12)), $mul.ref(4, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(8, 12)), $mul.ref(5, 1)), 31);
    $M.34 := $store.i32($M.34, $add.ref($add.ref($add.ref(skd_chkstat_table, $mul.ref(0, 108)), $mul.ref(8, 12)), $mul.ref(8, 1)), 4);
    $M.37 := 0;
    call {:si_unique_call 1786} {:cexpr "skd_next_devno"} boogie_si_record_i32(0);
    $M.39 := 32;
    call {:si_unique_call 1787} {:cexpr "skd_max_pass_thru"} boogie_si_record_i32(32);
    $M.26 := 4;
    call {:si_unique_call 1788} {:cexpr "skd_isr_comp_limit"} boogie_si_record_i32(4);
    $M.41 := 0;
    call {:si_unique_call 1789} {:cexpr "skd_dbg_level"} boogie_si_record_i32(0);
    $M.40 := 256;
    call {:si_unique_call 1790} {:cexpr "skd_sgs_per_request"} boogie_si_record_i32(256);
    $M.27 := 1;
    call {:si_unique_call 1791} {:cexpr "skd_max_req_per_msg"} boogie_si_record_i32(1);
    $M.38 := 1;
    call {:si_unique_call 1792} {:cexpr "skd_isr_type"} boogie_si_record_i32(1);
    $M.2 := 0;
    call {:si_unique_call 1793} {:cexpr "skd_major"} boogie_si_record_i32(0);
    $M.1 := $store.i32($M.1, skd_pci_tbl, 6969);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(skd_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(skd_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(skd_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(skd_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(skd_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(skd_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(skd_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(skd_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(skd_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(skd_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(skd_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(skd_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(skd_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.64 := $store.ref($M.64, skd_driver, $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str.27);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), skd_pci_tbl);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), skd_pci_probe);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), skd_pci_remove);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), skd_pci_suspend);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), skd_pci_resume);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), skd_pci_shutdown);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.64 := $store.ref($M.64, $add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.64 := $store.i32($M.64, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.64 := $store.i32($M.64, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i32($M.64, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.64 := $store.ref($M.64, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.64 := $store.i32($M.64, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.64 := $store.i64($M.64, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.64 := $store.ref($M.64, $add.ref($add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref($add.ref($add.ref(skd_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.22 := 64;
    call {:si_unique_call 1794} {:cexpr "skd_max_queue_depth"} boogie_si_record_i32(64);
    $M.1 := $store.i8($M.1, .str.27, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 4)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 4)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.1 := $store.i8($M.1, .str.32, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.32, $mul.ref(0, 15)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.32, $mul.ref(0, 15)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.32, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.32, $mul.ref(0, 15)), $mul.ref(4, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.32, $mul.ref(0, 15)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.32, $mul.ref(0, 15)), $mul.ref(6, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.32, $mul.ref(0, 15)), $mul.ref(7, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.32, $mul.ref(0, 15)), $mul.ref(8, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.32, $mul.ref(0, 15)), $mul.ref(9, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.32, $mul.ref(0, 15)), $mul.ref(10, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.32, $mul.ref(0, 15)), $mul.ref(11, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.32, $mul.ref(0, 15)), $mul.ref(12, 1)), 51);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.32, $mul.ref(0, 15)), $mul.ref(13, 1)), 50);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.32, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, .str.29, 47);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(1, 1)), 119);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(2, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(3, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(4, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(5, 1)), 47);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(6, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(7, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(8, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(9, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(10, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(11, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(12, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(13, 1)), 47);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(14, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(15, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(16, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(17, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(18, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(19, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(20, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(21, 1)), 47);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(22, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(23, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(24, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(25, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(26, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(27, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(28, 1)), 47);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(29, 1)), 119);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(30, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(31, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(32, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(33, 1)), 47);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(34, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(35, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(36, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(37, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(38, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(39, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(40, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(41, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(42, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(43, 1)), 88);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(44, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(45, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(46, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(47, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(48, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(49, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(50, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(51, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(52, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(53, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(54, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(55, 1)), 88);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(56, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(57, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(58, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(59, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(60, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(61, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(62, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(63, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(64, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(65, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(66, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(67, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(68, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(69, 1)), 120);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(70, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(71, 1)), 51);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(72, 1)), 46);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(73, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(74, 1)), 54);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(75, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(76, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(77, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(78, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(79, 1)), 46);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(80, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(81, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(82, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(83, 1)), 46);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(84, 1)), 120);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(85, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(86, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(87, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(88, 1)), 88);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(89, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(90, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(91, 1)), 52);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(92, 1)), 51);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(93, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(94, 1)), 50);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(95, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(96, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(97, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(98, 1)), 88);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(99, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(100, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(101, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(102, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(103, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(104, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(105, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(106, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(107, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(108, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(109, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(110, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(111, 1)), 47);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(112, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(113, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(114, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(115, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(116, 1)), 120);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(117, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(118, 1)), 51);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(119, 1)), 46);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(120, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(121, 1)), 54);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(122, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(123, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(124, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(125, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(126, 1)), 46);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(127, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(128, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(129, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(130, 1)), 46);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(131, 1)), 120);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(132, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(133, 1)), 47);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(134, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(135, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(136, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(137, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(138, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(139, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(140, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(141, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(142, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(143, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(144, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(145, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(146, 1)), 47);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(147, 1)), 57);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(148, 1)), 54);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(149, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(150, 1)), 55);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(151, 1)), 47);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(152, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(153, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(154, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(155, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(156, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(157, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(158, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(159, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(160, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(161, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(162, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(163, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(164, 1)), 47);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(165, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(166, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(167, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(168, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(169, 1)), 47);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(170, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(171, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(172, 1)), 47);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(173, 1)), 52);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(174, 1)), 51);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(175, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(176, 1)), 50);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(177, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(178, 1)), 47);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(179, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(180, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(181, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(182, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(183, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(184, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(185, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(186, 1)), 47);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(187, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(188, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(189, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(190, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(191, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(192, 1)), 47);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(193, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(194, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(195, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(196, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(197, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(198, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(199, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(200, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(201, 1)), 46);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(202, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(203, 1)), 46);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(204, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(205, 1)), 46);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(206, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(207, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(208, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(209, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(210, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(211, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(212, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(213, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.29, $mul.ref(0, 215)), $mul.ref(214, 1)), 0);
    $M.1 := $store.i8($M.1, .str.76, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 16)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 16)), $mul.ref(4, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 16)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 16)), $mul.ref(6, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 16)), $mul.ref(7, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 16)), $mul.ref(8, 1)), 119);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 16)), $mul.ref(9, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 16)), $mul.ref(10, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 16)), $mul.ref(11, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 16)), $mul.ref(12, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 16)), $mul.ref(13, 1)), 51);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 16)), $mul.ref(14, 1)), 50);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.76, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.1 := $store.i8($M.1, .str.40, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 23)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 23)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 23)), $mul.ref(4, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 23)), $mul.ref(5, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 23)), $mul.ref(6, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 23)), $mul.ref(7, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 23)), $mul.ref(8, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 23)), $mul.ref(9, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 23)), $mul.ref(10, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 23)), $mul.ref(11, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 23)), $mul.ref(12, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 23)), $mul.ref(13, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 23)), $mul.ref(14, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 23)), $mul.ref(15, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 23)), $mul.ref(16, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 23)), $mul.ref(17, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 23)), $mul.ref(18, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 23)), $mul.ref(19, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 23)), $mul.ref(20, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 23)), $mul.ref(21, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.1 := $store.i8($M.1, .str.77, 40);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(1, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(2, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(3, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(4, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(5, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(6, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(7, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(8, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(9, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(10, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(11, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(12, 1)), 46);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(13, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(14, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(15, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(16, 1)), 38);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(17, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(18, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(19, 1)), 75);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(20, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(21, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(22, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(23, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(24, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(25, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(26, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(27, 1)), 67);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(28, 1)), 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(29, 1)), 41);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(30, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(31, 1)), 61);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(32, 1)), 61);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(33, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(34, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.77, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    $M.1 := $store.i8($M.1, .str.78, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(4, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(6, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(7, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(9, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(10, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(11, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(12, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(13, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(14, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(15, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(16, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(17, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(18, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(19, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(20, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(21, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(22, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(23, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.78, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i8($M.1, .str.79, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 24)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 24)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 24)), $mul.ref(4, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 24)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 24)), $mul.ref(6, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 24)), $mul.ref(7, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 24)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 24)), $mul.ref(9, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 24)), $mul.ref(10, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 24)), $mul.ref(11, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 24)), $mul.ref(12, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 24)), $mul.ref(13, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 24)), $mul.ref(14, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 24)), $mul.ref(15, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 24)), $mul.ref(16, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 24)), $mul.ref(17, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 24)), $mul.ref(18, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 24)), $mul.ref(19, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 24)), $mul.ref(20, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 24)), $mul.ref(21, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 24)), $mul.ref(22, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.1 := $store.i8($M.1, .str.83, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.83, $mul.ref(0, 16)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.83, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.83, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.83, $mul.ref(0, 16)), $mul.ref(4, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.83, $mul.ref(0, 16)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.83, $mul.ref(0, 16)), $mul.ref(6, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.83, $mul.ref(0, 16)), $mul.ref(7, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.83, $mul.ref(0, 16)), $mul.ref(8, 1)), 119);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.83, $mul.ref(0, 16)), $mul.ref(9, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.83, $mul.ref(0, 16)), $mul.ref(10, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.83, $mul.ref(0, 16)), $mul.ref(11, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.83, $mul.ref(0, 16)), $mul.ref(12, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.83, $mul.ref(0, 16)), $mul.ref(13, 1)), 54);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.83, $mul.ref(0, 16)), $mul.ref(14, 1)), 52);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.83, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, .str.101, 37);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.101, $mul.ref(0, 11)), $mul.ref(1, 1)), 115);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.101, $mul.ref(0, 11)), $mul.ref(2, 1)), 58);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.101, $mul.ref(0, 11)), $mul.ref(3, 1)), 37);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.101, $mul.ref(0, 11)), $mul.ref(4, 1)), 115);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.101, $mul.ref(0, 11)), $mul.ref(5, 1)), 58);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.101, $mul.ref(0, 11)), $mul.ref(6, 1)), 91);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.101, $mul.ref(0, 11)), $mul.ref(7, 1)), 37);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.101, $mul.ref(0, 11)), $mul.ref(8, 1)), 115);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.101, $mul.ref(0, 11)), $mul.ref(9, 1)), 93);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.101, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.66 := $store.i8($M.66, .str.102, 37);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.102, $mul.ref(0, 11)), $mul.ref(1, 1)), 115);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.102, $mul.ref(0, 11)), $mul.ref(2, 1)), 58);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.102, $mul.ref(0, 11)), $mul.ref(3, 1)), 63);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.102, $mul.ref(0, 11)), $mul.ref(4, 1)), 63);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.102, $mul.ref(0, 11)), $mul.ref(5, 1)), 58);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.102, $mul.ref(0, 11)), $mul.ref(6, 1)), 91);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.102, $mul.ref(0, 11)), $mul.ref(7, 1)), 37);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.102, $mul.ref(0, 11)), $mul.ref(8, 1)), 115);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.102, $mul.ref(0, 11)), $mul.ref(9, 1)), 93);
    $M.66 := $store.i8($M.66, $add.ref($add.ref(.str.102, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i8($M.1, .str.355, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.355, $mul.ref(0, 15)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.355, $mul.ref(0, 15)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.355, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.355, $mul.ref(0, 15)), $mul.ref(4, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.355, $mul.ref(0, 15)), $mul.ref(5, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.355, $mul.ref(0, 15)), $mul.ref(6, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.355, $mul.ref(0, 15)), $mul.ref(7, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.355, $mul.ref(0, 15)), $mul.ref(8, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.355, $mul.ref(0, 15)), $mul.ref(9, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.355, $mul.ref(0, 15)), $mul.ref(10, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.355, $mul.ref(0, 15)), $mul.ref(11, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.355, $mul.ref(0, 15)), $mul.ref(12, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.355, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.355, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, .str.322, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.322, $mul.ref(0, 17)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.322, $mul.ref(0, 17)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.322, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.322, $mul.ref(0, 17)), $mul.ref(4, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.322, $mul.ref(0, 17)), $mul.ref(5, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.322, $mul.ref(0, 17)), $mul.ref(6, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.322, $mul.ref(0, 17)), $mul.ref(7, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.322, $mul.ref(0, 17)), $mul.ref(8, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.322, $mul.ref(0, 17)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.322, $mul.ref(0, 17)), $mul.ref(10, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.322, $mul.ref(0, 17)), $mul.ref(11, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.322, $mul.ref(0, 17)), $mul.ref(12, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.322, $mul.ref(0, 17)), $mul.ref(13, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.322, $mul.ref(0, 17)), $mul.ref(14, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.322, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.322, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i8($M.1, .str.74, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(4, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(5, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(6, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(7, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(9, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(10, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(11, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(12, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(13, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.74, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, .str.337, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.337, $mul.ref(0, 22)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.337, $mul.ref(0, 22)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.337, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.337, $mul.ref(0, 22)), $mul.ref(4, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.337, $mul.ref(0, 22)), $mul.ref(5, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.337, $mul.ref(0, 22)), $mul.ref(6, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.337, $mul.ref(0, 22)), $mul.ref(7, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.337, $mul.ref(0, 22)), $mul.ref(8, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.337, $mul.ref(0, 22)), $mul.ref(9, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.337, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.337, $mul.ref(0, 22)), $mul.ref(11, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.337, $mul.ref(0, 22)), $mul.ref(12, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.337, $mul.ref(0, 22)), $mul.ref(13, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.337, $mul.ref(0, 22)), $mul.ref(14, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.337, $mul.ref(0, 22)), $mul.ref(15, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.337, $mul.ref(0, 22)), $mul.ref(16, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.337, $mul.ref(0, 22)), $mul.ref(17, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.337, $mul.ref(0, 22)), $mul.ref(18, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.337, $mul.ref(0, 22)), $mul.ref(19, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.337, $mul.ref(0, 22)), $mul.ref(20, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.337, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.1 := $store.i8($M.1, .str.28, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(4, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(5, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(6, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(7, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(8, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(10, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(11, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(12, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(13, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, .str.90, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(4, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(5, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(6, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(7, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(8, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(10, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(11, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(12, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(13, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(14, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(15, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(16, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(17, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(18, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(19, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(20, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(21, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(22, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(23, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(24, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.1 := $store.i8($M.1, .str.99, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 19)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 19)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 19)), $mul.ref(4, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 19)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 19)), $mul.ref(6, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 19)), $mul.ref(7, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 19)), $mul.ref(8, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 19)), $mul.ref(9, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 19)), $mul.ref(10, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 19)), $mul.ref(11, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 19)), $mul.ref(12, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 19)), $mul.ref(13, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 19)), $mul.ref(14, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 19)), $mul.ref(15, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 19)), $mul.ref(16, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, .str.42, 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 8)), $mul.ref(1, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 8)), $mul.ref(2, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 8)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 8)), $mul.ref(4, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 8)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 8)), $mul.ref(6, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.44, 40);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(1, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(2, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(3, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(4, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(5, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(6, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(7, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(8, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(9, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(10, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(11, 1)), 38);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(12, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(13, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(14, 1)), 75);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(15, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(16, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(17, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(18, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(19, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(20, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(21, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(22, 1)), 67);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(23, 1)), 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(24, 1)), 41);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(25, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(26, 1)), 33);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(27, 1)), 61);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(28, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(29, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.1 := $store.i8($M.1, .str.45, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 21)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 21)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 21)), $mul.ref(4, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 21)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 21)), $mul.ref(6, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 21)), $mul.ref(7, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 21)), $mul.ref(8, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 21)), $mul.ref(9, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 21)), $mul.ref(10, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 21)), $mul.ref(12, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 21)), $mul.ref(13, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 21)), $mul.ref(14, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 21)), $mul.ref(15, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 21)), $mul.ref(16, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 21)), $mul.ref(17, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 21)), $mul.ref(18, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 21)), $mul.ref(19, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i8($M.1, .str.46, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(2, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(4, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(5, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(6, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(7, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(8, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(9, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(10, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(11, 1)), 33);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(12, 1)), 61);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(13, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(14, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(15, 1)), 85);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(16, 1)), 76);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(17, 1)), 76);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, .str.47, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(1, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(2, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(3, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(4, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(5, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(6, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(7, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, .str.48, 40);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(1, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(2, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(3, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(4, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(5, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(6, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(7, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(8, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(9, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(10, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(11, 1)), 38);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(12, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(13, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(14, 1)), 75);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(15, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(16, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(17, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(18, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(19, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(20, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(21, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(22, 1)), 67);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(23, 1)), 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(24, 1)), 41);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(25, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(26, 1)), 33);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(27, 1)), 61);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(28, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(29, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.1 := $store.i8($M.1, .str.71, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 20)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 20)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 20)), $mul.ref(4, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 20)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 20)), $mul.ref(6, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 20)), $mul.ref(7, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 20)), $mul.ref(8, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 20)), $mul.ref(9, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 20)), $mul.ref(10, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 20)), $mul.ref(11, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 20)), $mul.ref(12, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 20)), $mul.ref(13, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 20)), $mul.ref(14, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 20)), $mul.ref(15, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 20)), $mul.ref(16, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 20)), $mul.ref(17, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 20)), $mul.ref(18, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.1 := $store.i8($M.1, .str.68, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 14)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 14)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 14)), $mul.ref(4, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 14)), $mul.ref(5, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 14)), $mul.ref(6, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 14)), $mul.ref(7, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 14)), $mul.ref(8, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 14)), $mul.ref(9, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 14)), $mul.ref(10, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 14)), $mul.ref(11, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 14)), $mul.ref(12, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.1 := $store.i8($M.1, .str.15, 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.15, $mul.ref(0, 5)), $mul.ref(1, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.15, $mul.ref(0, 5)), $mul.ref(2, 1)), 76);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.15, $mul.ref(0, 5)), $mul.ref(3, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.15, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, .str.3, 66);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.3, $mul.ref(0, 5)), $mul.ref(1, 1)), 85);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.3, $mul.ref(0, 5)), $mul.ref(2, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.3, $mul.ref(0, 5)), $mul.ref(3, 1)), 89);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.3, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, .str.13, 63);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.13, $mul.ref(0, 4)), $mul.ref(1, 1)), 63);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.13, $mul.ref(0, 4)), $mul.ref(2, 1)), 63);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.13, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.1 := $store.i8($M.1, .str.62, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(4, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(5, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(6, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(7, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(8, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(9, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(10, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(11, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(12, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(13, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(14, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.1 := $store.i8($M.1, .str.64, 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.64, $mul.ref(0, 5)), $mul.ref(1, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.64, $mul.ref(0, 5)), $mul.ref(2, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.64, $mul.ref(0, 5)), $mul.ref(3, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.64, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, .str.65, 119);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 6)), $mul.ref(1, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 6)), $mul.ref(2, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 6)), $mul.ref(3, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 6)), $mul.ref(4, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.51, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(4, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(5, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(6, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(7, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(8, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(9, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(10, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(11, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(12, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.51, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.1 := $store.i8($M.1, .str.57, 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.57, $mul.ref(0, 6)), $mul.ref(1, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.57, $mul.ref(0, 6)), $mul.ref(2, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.57, $mul.ref(0, 6)), $mul.ref(3, 1)), 85);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.57, $mul.ref(0, 6)), $mul.ref(4, 1)), 80);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.57, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.58, 67);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.58, $mul.ref(0, 10)), $mul.ref(1, 1)), 79);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.58, $mul.ref(0, 10)), $mul.ref(2, 1)), 77);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.58, $mul.ref(0, 10)), $mul.ref(3, 1)), 80);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.58, $mul.ref(0, 10)), $mul.ref(4, 1)), 76);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.58, $mul.ref(0, 10)), $mul.ref(5, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.58, $mul.ref(0, 10)), $mul.ref(6, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.58, $mul.ref(0, 10)), $mul.ref(7, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.58, $mul.ref(0, 10)), $mul.ref(8, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.58, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, .str.59, 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.59, $mul.ref(0, 8)), $mul.ref(1, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.59, $mul.ref(0, 8)), $mul.ref(2, 1)), 77);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.59, $mul.ref(0, 8)), $mul.ref(3, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.59, $mul.ref(0, 8)), $mul.ref(4, 1)), 79);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.59, $mul.ref(0, 8)), $mul.ref(5, 1)), 85);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.59, $mul.ref(0, 8)), $mul.ref(6, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.59, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.60, 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.60, $mul.ref(0, 8)), $mul.ref(1, 1)), 66);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.60, $mul.ref(0, 8)), $mul.ref(2, 1)), 79);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.60, $mul.ref(0, 8)), $mul.ref(3, 1)), 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.60, $mul.ref(0, 8)), $mul.ref(4, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.60, $mul.ref(0, 8)), $mul.ref(5, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.60, $mul.ref(0, 8)), $mul.ref(6, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.60, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.36, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 16)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 16)), $mul.ref(4, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 16)), $mul.ref(5, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 16)), $mul.ref(6, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 16)), $mul.ref(7, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 16)), $mul.ref(8, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 16)), $mul.ref(9, 1)), 119);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 16)), $mul.ref(10, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 16)), $mul.ref(11, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 16)), $mul.ref(12, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 16)), $mul.ref(13, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.1 := $store.i8($M.1, .str.14, 76);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.14, $mul.ref(0, 5)), $mul.ref(1, 1)), 79);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.14, $mul.ref(0, 5)), $mul.ref(2, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.14, $mul.ref(0, 5)), $mul.ref(3, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.14, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, .str.16, 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 9)), $mul.ref(1, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 9)), $mul.ref(2, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 9)), $mul.ref(3, 1)), 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 9)), $mul.ref(4, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 9)), $mul.ref(5, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 9)), $mul.ref(6, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 9)), $mul.ref(7, 1)), 71);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, .str.2, 79);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.2, $mul.ref(0, 7)), $mul.ref(1, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.2, $mul.ref(0, 7)), $mul.ref(2, 1)), 76);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.2, $mul.ref(0, 7)), $mul.ref(3, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.2, $mul.ref(0, 7)), $mul.ref(4, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.2, $mul.ref(0, 7)), $mul.ref(5, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.2, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.17, 80);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.17, $mul.ref(0, 8)), $mul.ref(1, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.17, $mul.ref(0, 8)), $mul.ref(2, 1)), 85);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.17, $mul.ref(0, 8)), $mul.ref(3, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.17, $mul.ref(0, 8)), $mul.ref(4, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.17, $mul.ref(0, 8)), $mul.ref(5, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.17, $mul.ref(0, 8)), $mul.ref(6, 1)), 71);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.17, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.18, 80);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 7)), $mul.ref(1, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 7)), $mul.ref(2, 1)), 85);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 7)), $mul.ref(3, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 7)), $mul.ref(4, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 7)), $mul.ref(5, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.19, 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 17)), $mul.ref(1, 1)), 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 17)), $mul.ref(2, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 17)), $mul.ref(3, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 17)), $mul.ref(4, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 17)), $mul.ref(5, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 17)), $mul.ref(6, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 17)), $mul.ref(7, 1)), 71);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 17)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 17)), $mul.ref(9, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 17)), $mul.ref(10, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 17)), $mul.ref(11, 1)), 77);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 17)), $mul.ref(12, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 17)), $mul.ref(13, 1)), 79);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 17)), $mul.ref(14, 1)), 85);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 17)), $mul.ref(15, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i8($M.1, .str.20, 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 11)), $mul.ref(1, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 11)), $mul.ref(2, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 11)), $mul.ref(3, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 11)), $mul.ref(4, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 11)), $mul.ref(5, 1)), 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 11)), $mul.ref(6, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 11)), $mul.ref(7, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 11)), $mul.ref(8, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 11)), $mul.ref(9, 1)), 71);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i8($M.1, .str.21, 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 9)), $mul.ref(1, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 9)), $mul.ref(2, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 9)), $mul.ref(3, 1)), 85);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 9)), $mul.ref(4, 1)), 77);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 9)), $mul.ref(5, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 9)), $mul.ref(6, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 9)), $mul.ref(7, 1)), 71);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, .str.22, 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(1, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(2, 1)), 79);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(3, 1)), 80);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(4, 1)), 80);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(5, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(6, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(7, 1)), 71);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, .str.23, 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 8)), $mul.ref(1, 1)), 89);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 8)), $mul.ref(2, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 8)), $mul.ref(3, 1)), 67);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 8)), $mul.ref(4, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 8)), $mul.ref(5, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 8)), $mul.ref(6, 1)), 71);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.4, 70);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.4, $mul.ref(0, 6)), $mul.ref(1, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.4, $mul.ref(0, 6)), $mul.ref(2, 1)), 85);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.4, $mul.ref(0, 6)), $mul.ref(3, 1)), 76);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.4, $mul.ref(0, 6)), $mul.ref(4, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.4, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.24, 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 12)), $mul.ref(1, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 12)), $mul.ref(2, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 12)), $mul.ref(3, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 12)), $mul.ref(4, 1)), 80);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 12)), $mul.ref(5, 1)), 80);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 12)), $mul.ref(6, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 12)), $mul.ref(7, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 12)), $mul.ref(8, 1)), 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 12)), $mul.ref(9, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 12)), $mul.ref(10, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.24, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.1 := $store.i8($M.1, .str.11, 66);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.11, $mul.ref(0, 11)), $mul.ref(1, 1)), 85);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.11, $mul.ref(0, 11)), $mul.ref(2, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.11, $mul.ref(0, 11)), $mul.ref(3, 1)), 89);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.11, $mul.ref(0, 11)), $mul.ref(4, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.11, $mul.ref(0, 11)), $mul.ref(5, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.11, $mul.ref(0, 11)), $mul.ref(6, 1)), 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.11, $mul.ref(0, 11)), $mul.ref(7, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.11, $mul.ref(0, 11)), $mul.ref(8, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.11, $mul.ref(0, 11)), $mul.ref(9, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.11, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i8($M.1, .str.10, 66);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(1, 1)), 85);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(2, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(3, 1)), 89);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(4, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(5, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(6, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(7, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(8, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(9, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(10, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(11, 1)), 90);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(12, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.1 := $store.i8($M.1, .str.25, 66);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.25, $mul.ref(0, 14)), $mul.ref(1, 1)), 85);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.25, $mul.ref(0, 14)), $mul.ref(2, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.25, $mul.ref(0, 14)), $mul.ref(3, 1)), 89);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.25, $mul.ref(0, 14)), $mul.ref(4, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.25, $mul.ref(0, 14)), $mul.ref(5, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.25, $mul.ref(0, 14)), $mul.ref(6, 1)), 77);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.25, $mul.ref(0, 14)), $mul.ref(7, 1)), 77);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.25, $mul.ref(0, 14)), $mul.ref(8, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.25, $mul.ref(0, 14)), $mul.ref(9, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.25, $mul.ref(0, 14)), $mul.ref(10, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.25, $mul.ref(0, 14)), $mul.ref(11, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.25, $mul.ref(0, 14)), $mul.ref(12, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.25, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.1 := $store.i8($M.1, .str.26, 87);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 10)), $mul.ref(1, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 10)), $mul.ref(2, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 10)), $mul.ref(3, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 10)), $mul.ref(4, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 10)), $mul.ref(5, 1)), 66);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 10)), $mul.ref(6, 1)), 79);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 10)), $mul.ref(7, 1)), 79);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 10)), $mul.ref(8, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, .str.85, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.85, $mul.ref(0, 16)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.85, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.85, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.85, $mul.ref(0, 16)), $mul.ref(4, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.85, $mul.ref(0, 16)), $mul.ref(5, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.85, $mul.ref(0, 16)), $mul.ref(6, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.85, $mul.ref(0, 16)), $mul.ref(7, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.85, $mul.ref(0, 16)), $mul.ref(8, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.85, $mul.ref(0, 16)), $mul.ref(9, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.85, $mul.ref(0, 16)), $mul.ref(10, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.85, $mul.ref(0, 16)), $mul.ref(11, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.85, $mul.ref(0, 16)), $mul.ref(12, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.85, $mul.ref(0, 16)), $mul.ref(13, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.85, $mul.ref(0, 16)), $mul.ref(14, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.85, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.1 := $store.i8($M.1, .str, 79);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(1, 1)), 70);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(2, 1)), 70);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(3, 1)), 76);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(4, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(5, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(6, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.1, 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.1, $mul.ref(0, 5)), $mul.ref(1, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.1, $mul.ref(0, 5)), $mul.ref(2, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.1, $mul.ref(0, 5)), $mul.ref(3, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.1, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, .str.5, 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 9)), $mul.ref(1, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 9)), $mul.ref(2, 1)), 71);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 9)), $mul.ref(3, 1)), 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 9)), $mul.ref(4, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 9)), $mul.ref(5, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 9)), $mul.ref(6, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 9)), $mul.ref(7, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, .str.6, 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(1, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(2, 1)), 75);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(4, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(5, 1)), 79);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(6, 1)), 87);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(7, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.6, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, .str.7, 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.7, $mul.ref(0, 11)), $mul.ref(1, 1)), 79);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.7, $mul.ref(0, 11)), $mul.ref(2, 1)), 70);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.7, $mul.ref(0, 11)), $mul.ref(3, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.7, $mul.ref(0, 11)), $mul.ref(4, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.7, $mul.ref(0, 11)), $mul.ref(5, 1)), 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.7, $mul.ref(0, 11)), $mul.ref(6, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.7, $mul.ref(0, 11)), $mul.ref(7, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.7, $mul.ref(0, 11)), $mul.ref(8, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.7, $mul.ref(0, 11)), $mul.ref(9, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.7, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i8($M.1, .str.8, 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 8)), $mul.ref(1, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 8)), $mul.ref(2, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 8)), $mul.ref(3, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 8)), $mul.ref(4, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 8)), $mul.ref(5, 1)), 70);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 8)), $mul.ref(6, 1)), 87);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.9, 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 11)), $mul.ref(1, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 11)), $mul.ref(2, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 11)), $mul.ref(3, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 11)), $mul.ref(4, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 11)), $mul.ref(5, 1)), 70);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 11)), $mul.ref(6, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 11)), $mul.ref(7, 1)), 85);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 11)), $mul.ref(8, 1)), 76);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 11)), $mul.ref(9, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i8($M.1, .str.12, 70);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.12, $mul.ref(0, 11)), $mul.ref(1, 1)), 87);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.12, $mul.ref(0, 11)), $mul.ref(2, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.12, $mul.ref(0, 11)), $mul.ref(3, 1)), 66);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.12, $mul.ref(0, 11)), $mul.ref(4, 1)), 79);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.12, $mul.ref(0, 11)), $mul.ref(5, 1)), 79);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.12, $mul.ref(0, 11)), $mul.ref(6, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.12, $mul.ref(0, 11)), $mul.ref(7, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.12, $mul.ref(0, 11)), $mul.ref(8, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.12, $mul.ref(0, 11)), $mul.ref(9, 1)), 71);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.12, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, .str.278, 37);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.278, $mul.ref(0, 9)), $mul.ref(1, 1)), 115);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.278, $mul.ref(0, 9)), $mul.ref(2, 1)), 37);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.278, $mul.ref(0, 9)), $mul.ref(3, 1)), 100);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.278, $mul.ref(0, 9)), $mul.ref(4, 1)), 45);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.278, $mul.ref(0, 9)), $mul.ref(5, 1)), 109);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.278, $mul.ref(0, 9)), $mul.ref(6, 1)), 115);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.278, $mul.ref(0, 9)), $mul.ref(7, 1)), 105);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.278, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.68 := $store.i8($M.68, .str.282, 37);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.282, $mul.ref(0, 12)), $mul.ref(1, 1)), 115);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.282, $mul.ref(0, 12)), $mul.ref(2, 1)), 37);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.282, $mul.ref(0, 12)), $mul.ref(3, 1)), 100);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.282, $mul.ref(0, 12)), $mul.ref(4, 1)), 45);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.282, $mul.ref(0, 12)), $mul.ref(5, 1)), 108);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.282, $mul.ref(0, 12)), $mul.ref(6, 1)), 101);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.282, $mul.ref(0, 12)), $mul.ref(7, 1)), 103);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.282, $mul.ref(0, 12)), $mul.ref(8, 1)), 97);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.282, $mul.ref(0, 12)), $mul.ref(9, 1)), 99);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.282, $mul.ref(0, 12)), $mul.ref(10, 1)), 121);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.282, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.1 := $store.i8($M.1, .str.318, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.318, $mul.ref(0, 8)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.318, $mul.ref(0, 8)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.318, $mul.ref(0, 8)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.318, $mul.ref(0, 8)), $mul.ref(4, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.318, $mul.ref(0, 8)), $mul.ref(5, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.318, $mul.ref(0, 8)), $mul.ref(6, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.318, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.235, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.235, $mul.ref(0, 15)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.235, $mul.ref(0, 15)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.235, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.235, $mul.ref(0, 15)), $mul.ref(4, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.235, $mul.ref(0, 15)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.235, $mul.ref(0, 15)), $mul.ref(6, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.235, $mul.ref(0, 15)), $mul.ref(7, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.235, $mul.ref(0, 15)), $mul.ref(8, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.235, $mul.ref(0, 15)), $mul.ref(9, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.235, $mul.ref(0, 15)), $mul.ref(10, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.235, $mul.ref(0, 15)), $mul.ref(11, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.235, $mul.ref(0, 15)), $mul.ref(12, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.235, $mul.ref(0, 15)), $mul.ref(13, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.235, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, .str.239, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(2, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(4, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(5, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(6, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(7, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(8, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(9, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(10, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(11, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(12, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(13, 1)), 61);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(14, 1)), 61);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(15, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(16, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(17, 1)), 75);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(18, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(19, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(20, 1)), 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(21, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(22, 1)), 81);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(23, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(24, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(25, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(26, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(27, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(28, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(29, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(30, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(31, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(32, 1)), 76);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(33, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.239, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.1 := $store.i8($M.1, .str.240, 40);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(1, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(2, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(3, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(4, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(5, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(6, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(7, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(8, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(9, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(10, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(11, 1)), 38);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(12, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(13, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(14, 1)), 75);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(15, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(16, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(17, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(18, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(19, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(20, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(21, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(22, 1)), 67);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(23, 1)), 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(24, 1)), 41);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(25, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(26, 1)), 61);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(27, 1)), 61);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(28, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(29, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.240, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.1 := $store.i8($M.1, .str.243, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(2, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(3, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(4, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(5, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(6, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(7, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(8, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(9, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(10, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(11, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(12, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(13, 1)), 61);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(14, 1)), 61);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(15, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(16, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(17, 1)), 75);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(18, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(19, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(20, 1)), 77);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(21, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(22, 1)), 71);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(23, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(24, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(25, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(26, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(27, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(28, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(29, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(30, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(31, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(32, 1)), 76);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(33, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.243, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.1 := $store.i8($M.1, .str.244, 40);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(1, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(2, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(3, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(4, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(5, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(6, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(7, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(8, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(9, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(10, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(11, 1)), 38);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(12, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(13, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(14, 1)), 75);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(15, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(16, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(17, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(18, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(19, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(20, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(21, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(22, 1)), 67);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(23, 1)), 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(24, 1)), 41);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(25, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(26, 1)), 61);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(27, 1)), 61);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(28, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(29, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.244, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.1 := $store.i8($M.1, .str.246, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.246, $mul.ref(0, 22)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.246, $mul.ref(0, 22)), $mul.ref(2, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.246, $mul.ref(0, 22)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.246, $mul.ref(0, 22)), $mul.ref(4, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.246, $mul.ref(0, 22)), $mul.ref(5, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.246, $mul.ref(0, 22)), $mul.ref(6, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.246, $mul.ref(0, 22)), $mul.ref(7, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.246, $mul.ref(0, 22)), $mul.ref(8, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.246, $mul.ref(0, 22)), $mul.ref(9, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.246, $mul.ref(0, 22)), $mul.ref(10, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.246, $mul.ref(0, 22)), $mul.ref(11, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.246, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.246, $mul.ref(0, 22)), $mul.ref(13, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.246, $mul.ref(0, 22)), $mul.ref(14, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.246, $mul.ref(0, 22)), $mul.ref(15, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.246, $mul.ref(0, 22)), $mul.ref(16, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.246, $mul.ref(0, 22)), $mul.ref(17, 1)), 61);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.246, $mul.ref(0, 22)), $mul.ref(18, 1)), 61);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.246, $mul.ref(0, 22)), $mul.ref(19, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.246, $mul.ref(0, 22)), $mul.ref(20, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.246, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.1 := $store.i8($M.1, .str.256, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.256, $mul.ref(0, 16)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.256, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.256, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.256, $mul.ref(0, 16)), $mul.ref(4, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.256, $mul.ref(0, 16)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.256, $mul.ref(0, 16)), $mul.ref(6, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.256, $mul.ref(0, 16)), $mul.ref(7, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.256, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.256, $mul.ref(0, 16)), $mul.ref(9, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.256, $mul.ref(0, 16)), $mul.ref(10, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.256, $mul.ref(0, 16)), $mul.ref(11, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.256, $mul.ref(0, 16)), $mul.ref(12, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.256, $mul.ref(0, 16)), $mul.ref(13, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.256, $mul.ref(0, 16)), $mul.ref(14, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.256, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.1 := $store.i8($M.1, .str.254, 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(1, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(2, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(3, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(4, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(5, 1)), 60);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(6, 1)), 61);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(7, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(8, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(9, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(10, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(11, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(12, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(13, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(14, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(15, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(16, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(17, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(18, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(19, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(20, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(21, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(22, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(23, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(24, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(25, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(26, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(27, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(28, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(29, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.254, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.1 := $store.i8($M.1, .str.255, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.255, $mul.ref(0, 18)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.255, $mul.ref(0, 18)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.255, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.255, $mul.ref(0, 18)), $mul.ref(4, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.255, $mul.ref(0, 18)), $mul.ref(5, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.255, $mul.ref(0, 18)), $mul.ref(6, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.255, $mul.ref(0, 18)), $mul.ref(7, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.255, $mul.ref(0, 18)), $mul.ref(8, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.255, $mul.ref(0, 18)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.255, $mul.ref(0, 18)), $mul.ref(10, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.255, $mul.ref(0, 18)), $mul.ref(11, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.255, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.255, $mul.ref(0, 18)), $mul.ref(13, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.255, $mul.ref(0, 18)), $mul.ref(14, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.255, $mul.ref(0, 18)), $mul.ref(15, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.255, $mul.ref(0, 18)), $mul.ref(16, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.255, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.1 := $store.i8($M.1, .str.250, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(4, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(5, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(6, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(7, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(8, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(9, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(10, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(11, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(12, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(13, 1)), 33);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(14, 1)), 61);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(15, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(16, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(17, 1)), 75);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(18, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(19, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(20, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(21, 1)), 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(22, 1)), 86);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(23, 1)), 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(24, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(25, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(26, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(27, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(28, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(29, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(30, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(31, 1)), 79);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(32, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(33, 1)), 76);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(34, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(35, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(36, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.250, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.1 := $store.i8($M.1, .str.251, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(4, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(6, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(7, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(8, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(9, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(10, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(11, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(12, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(13, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(14, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(15, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(16, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(17, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(18, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(19, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(20, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(21, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(22, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(23, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(24, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.251, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.1 := $store.i8($M.1, .str.252, 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.252, $mul.ref(0, 15)), $mul.ref(1, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.252, $mul.ref(0, 15)), $mul.ref(2, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.252, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.252, $mul.ref(0, 15)), $mul.ref(4, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.252, $mul.ref(0, 15)), $mul.ref(5, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.252, $mul.ref(0, 15)), $mul.ref(6, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.252, $mul.ref(0, 15)), $mul.ref(7, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.252, $mul.ref(0, 15)), $mul.ref(8, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.252, $mul.ref(0, 15)), $mul.ref(9, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.252, $mul.ref(0, 15)), $mul.ref(10, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.252, $mul.ref(0, 15)), $mul.ref(11, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.252, $mul.ref(0, 15)), $mul.ref(12, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.252, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.252, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, .str.214, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.214, $mul.ref(0, 14)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.214, $mul.ref(0, 14)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.214, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.214, $mul.ref(0, 14)), $mul.ref(4, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.214, $mul.ref(0, 14)), $mul.ref(5, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.214, $mul.ref(0, 14)), $mul.ref(6, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.214, $mul.ref(0, 14)), $mul.ref(7, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.214, $mul.ref(0, 14)), $mul.ref(8, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.214, $mul.ref(0, 14)), $mul.ref(9, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.214, $mul.ref(0, 14)), $mul.ref(10, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.214, $mul.ref(0, 14)), $mul.ref(11, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.214, $mul.ref(0, 14)), $mul.ref(12, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.214, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.1 := $store.i8($M.1, .str.311, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.311, $mul.ref(0, 21)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.311, $mul.ref(0, 21)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.311, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.311, $mul.ref(0, 21)), $mul.ref(4, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.311, $mul.ref(0, 21)), $mul.ref(5, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.311, $mul.ref(0, 21)), $mul.ref(6, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.311, $mul.ref(0, 21)), $mul.ref(7, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.311, $mul.ref(0, 21)), $mul.ref(8, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.311, $mul.ref(0, 21)), $mul.ref(9, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.311, $mul.ref(0, 21)), $mul.ref(10, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.311, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.311, $mul.ref(0, 21)), $mul.ref(12, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.311, $mul.ref(0, 21)), $mul.ref(13, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.311, $mul.ref(0, 21)), $mul.ref(14, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.311, $mul.ref(0, 21)), $mul.ref(15, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.311, $mul.ref(0, 21)), $mul.ref(16, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.311, $mul.ref(0, 21)), $mul.ref(17, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.311, $mul.ref(0, 21)), $mul.ref(18, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.311, $mul.ref(0, 21)), $mul.ref(19, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.311, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i8($M.1, .str.172, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(4, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(5, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(6, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(7, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(8, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(9, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(10, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(11, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(12, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(13, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(14, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(15, 1)), 120);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(16, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(17, 1)), 60);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(18, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(19, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(20, 1)), 75);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(21, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(22, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(23, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(24, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(25, 1)), 67);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(26, 1)), 79);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(27, 1)), 77);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(28, 1)), 80);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(29, 1)), 76);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(30, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(31, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(32, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(33, 1)), 79);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(34, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(35, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(36, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(37, 1)), 78);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(38, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(39, 1)), 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(40, 1)), 89);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.172, $mul.ref(0, 42)), $mul.ref(41, 1)), 0);
    $M.1 := $store.i8($M.1, .str.173, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(4, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(5, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(6, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(7, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(8, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(9, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(10, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(11, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(12, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(13, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(14, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(15, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(16, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(17, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(18, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(19, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(20, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(21, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(22, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(23, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(24, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.173, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.1 := $store.i8($M.1, .str.178, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(2, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(4, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(5, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(6, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(7, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(8, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(9, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(10, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(11, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(12, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(13, 1)), 61);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(14, 1)), 61);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(15, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(16, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(17, 1)), 75);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(18, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(19, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(20, 1)), 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(21, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(22, 1)), 81);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(23, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(24, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(25, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(26, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(27, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(28, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(29, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(30, 1)), 66);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(31, 1)), 85);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(32, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(33, 1)), 89);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.178, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.1 := $store.i8($M.1, .str.226, 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.226, $mul.ref(0, 12)), $mul.ref(1, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.226, $mul.ref(0, 12)), $mul.ref(2, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.226, $mul.ref(0, 12)), $mul.ref(3, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.226, $mul.ref(0, 12)), $mul.ref(4, 1)), 121);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.226, $mul.ref(0, 12)), $mul.ref(5, 1)), 40);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.226, $mul.ref(0, 12)), $mul.ref(6, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.226, $mul.ref(0, 12)), $mul.ref(7, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.226, $mul.ref(0, 12)), $mul.ref(8, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.226, $mul.ref(0, 12)), $mul.ref(9, 1)), 121);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.226, $mul.ref(0, 12)), $mul.ref(10, 1)), 41);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.226, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.1 := $store.i8($M.1, .str.228, 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.228, $mul.ref(0, 6)), $mul.ref(1, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.228, $mul.ref(0, 6)), $mul.ref(2, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.228, $mul.ref(0, 6)), $mul.ref(3, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.228, $mul.ref(0, 6)), $mul.ref(4, 1)), 121);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.228, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.230, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.230, $mul.ref(0, 17)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.230, $mul.ref(0, 17)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.230, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.230, $mul.ref(0, 17)), $mul.ref(4, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.230, $mul.ref(0, 17)), $mul.ref(5, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.230, $mul.ref(0, 17)), $mul.ref(6, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.230, $mul.ref(0, 17)), $mul.ref(7, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.230, $mul.ref(0, 17)), $mul.ref(8, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.230, $mul.ref(0, 17)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.230, $mul.ref(0, 17)), $mul.ref(10, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.230, $mul.ref(0, 17)), $mul.ref(11, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.230, $mul.ref(0, 17)), $mul.ref(12, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.230, $mul.ref(0, 17)), $mul.ref(13, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.230, $mul.ref(0, 17)), $mul.ref(14, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.230, $mul.ref(0, 17)), $mul.ref(15, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.230, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i8($M.1, .str.219, 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(1, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(2, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(4, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(5, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(6, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(7, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(8, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(9, 1)), 60);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(10, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(11, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(12, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(13, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(14, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(15, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(16, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(17, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(18, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(19, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(20, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(21, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(22, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(23, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(24, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(25, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(26, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(27, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(28, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(29, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(30, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(31, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(32, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(33, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(34, 1)), 120);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(35, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.219, $mul.ref(0, 37)), $mul.ref(36, 1)), 0);
    $M.1 := $store.i8($M.1, .str.220, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.220, $mul.ref(0, 18)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.220, $mul.ref(0, 18)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.220, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.220, $mul.ref(0, 18)), $mul.ref(4, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.220, $mul.ref(0, 18)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.220, $mul.ref(0, 18)), $mul.ref(6, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.220, $mul.ref(0, 18)), $mul.ref(7, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.220, $mul.ref(0, 18)), $mul.ref(8, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.220, $mul.ref(0, 18)), $mul.ref(9, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.220, $mul.ref(0, 18)), $mul.ref(10, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.220, $mul.ref(0, 18)), $mul.ref(11, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.220, $mul.ref(0, 18)), $mul.ref(12, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.220, $mul.ref(0, 18)), $mul.ref(13, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.220, $mul.ref(0, 18)), $mul.ref(14, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.220, $mul.ref(0, 18)), $mul.ref(15, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.220, $mul.ref(0, 18)), $mul.ref(16, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.220, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.1 := $store.i8($M.1, .str.221, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(2, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(3, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(4, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(5, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(6, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(7, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(8, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(9, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(10, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(11, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(12, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(13, 1)), 61);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(14, 1)), 61);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(15, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(16, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(17, 1)), 75);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(18, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(19, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(20, 1)), 77);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(21, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(22, 1)), 71);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(23, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(24, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(25, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(26, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(27, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(28, 1)), 69);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(29, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(30, 1)), 66);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(31, 1)), 85);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(32, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(33, 1)), 89);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.221, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.1 := $store.i8($M.1, .str.222, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.222, $mul.ref(0, 23)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.222, $mul.ref(0, 23)), $mul.ref(2, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.222, $mul.ref(0, 23)), $mul.ref(3, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.222, $mul.ref(0, 23)), $mul.ref(4, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.222, $mul.ref(0, 23)), $mul.ref(5, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.222, $mul.ref(0, 23)), $mul.ref(6, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.222, $mul.ref(0, 23)), $mul.ref(7, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.222, $mul.ref(0, 23)), $mul.ref(8, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.222, $mul.ref(0, 23)), $mul.ref(9, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.222, $mul.ref(0, 23)), $mul.ref(10, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.222, $mul.ref(0, 23)), $mul.ref(11, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.222, $mul.ref(0, 23)), $mul.ref(12, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.222, $mul.ref(0, 23)), $mul.ref(13, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.222, $mul.ref(0, 23)), $mul.ref(14, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.222, $mul.ref(0, 23)), $mul.ref(15, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.222, $mul.ref(0, 23)), $mul.ref(16, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.222, $mul.ref(0, 23)), $mul.ref(17, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.222, $mul.ref(0, 23)), $mul.ref(18, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.222, $mul.ref(0, 23)), $mul.ref(19, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.222, $mul.ref(0, 23)), $mul.ref(20, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.222, $mul.ref(0, 23)), $mul.ref(21, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.222, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.1 := $store.i8($M.1, .str.223, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.223, $mul.ref(0, 21)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.223, $mul.ref(0, 21)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.223, $mul.ref(0, 21)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.223, $mul.ref(0, 21)), $mul.ref(4, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.223, $mul.ref(0, 21)), $mul.ref(5, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.223, $mul.ref(0, 21)), $mul.ref(6, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.223, $mul.ref(0, 21)), $mul.ref(7, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.223, $mul.ref(0, 21)), $mul.ref(8, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.223, $mul.ref(0, 21)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.223, $mul.ref(0, 21)), $mul.ref(10, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.223, $mul.ref(0, 21)), $mul.ref(11, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.223, $mul.ref(0, 21)), $mul.ref(12, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.223, $mul.ref(0, 21)), $mul.ref(13, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.223, $mul.ref(0, 21)), $mul.ref(14, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.223, $mul.ref(0, 21)), $mul.ref(15, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.223, $mul.ref(0, 21)), $mul.ref(16, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.223, $mul.ref(0, 21)), $mul.ref(17, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.223, $mul.ref(0, 21)), $mul.ref(18, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.223, $mul.ref(0, 21)), $mul.ref(19, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.223, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i8($M.1, .str.224, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(4, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(5, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(6, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(7, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(8, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(9, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(10, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(11, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(12, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(13, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(14, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(15, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(16, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(17, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(18, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(19, 1)), 91);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(20, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(21, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(22, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(23, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(24, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(25, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(26, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(27, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(28, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(29, 1)), 93);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(30, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(31, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(32, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(33, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.224, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.1 := $store.i8($M.1, .str.181, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.181, $mul.ref(0, 19)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.181, $mul.ref(0, 19)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.181, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.181, $mul.ref(0, 19)), $mul.ref(4, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.181, $mul.ref(0, 19)), $mul.ref(5, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.181, $mul.ref(0, 19)), $mul.ref(6, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.181, $mul.ref(0, 19)), $mul.ref(7, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.181, $mul.ref(0, 19)), $mul.ref(8, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.181, $mul.ref(0, 19)), $mul.ref(9, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.181, $mul.ref(0, 19)), $mul.ref(10, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.181, $mul.ref(0, 19)), $mul.ref(11, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.181, $mul.ref(0, 19)), $mul.ref(12, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.181, $mul.ref(0, 19)), $mul.ref(13, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.181, $mul.ref(0, 19)), $mul.ref(14, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.181, $mul.ref(0, 19)), $mul.ref(15, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.181, $mul.ref(0, 19)), $mul.ref(16, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.181, $mul.ref(0, 19)), $mul.ref(17, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.181, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, .str.191, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(2, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(3, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(4, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(5, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(6, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(7, 1)), 61);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(8, 1)), 61);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(9, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(10, 1)), 38);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(11, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(12, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(13, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(14, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(15, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(16, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(17, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(18, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(19, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(20, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(21, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(22, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(23, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(24, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(25, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(26, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(27, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(28, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(29, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(30, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(31, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(32, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.191, $mul.ref(0, 34)), $mul.ref(33, 1)), 0);
    $M.1 := $store.i8($M.1, .str.192, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.192, $mul.ref(0, 22)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.192, $mul.ref(0, 22)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.192, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.192, $mul.ref(0, 22)), $mul.ref(4, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.192, $mul.ref(0, 22)), $mul.ref(5, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.192, $mul.ref(0, 22)), $mul.ref(6, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.192, $mul.ref(0, 22)), $mul.ref(7, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.192, $mul.ref(0, 22)), $mul.ref(8, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.192, $mul.ref(0, 22)), $mul.ref(9, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.192, $mul.ref(0, 22)), $mul.ref(10, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.192, $mul.ref(0, 22)), $mul.ref(11, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.192, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.192, $mul.ref(0, 22)), $mul.ref(13, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.192, $mul.ref(0, 22)), $mul.ref(14, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.192, $mul.ref(0, 22)), $mul.ref(15, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.192, $mul.ref(0, 22)), $mul.ref(16, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.192, $mul.ref(0, 22)), $mul.ref(17, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.192, $mul.ref(0, 22)), $mul.ref(18, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.192, $mul.ref(0, 22)), $mul.ref(19, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.192, $mul.ref(0, 22)), $mul.ref(20, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.192, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.1 := $store.i8($M.1, .str.206, 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.206, $mul.ref(0, 10)), $mul.ref(1, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.206, $mul.ref(0, 10)), $mul.ref(2, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.206, $mul.ref(0, 10)), $mul.ref(3, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.206, $mul.ref(0, 10)), $mul.ref(4, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.206, $mul.ref(0, 10)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.206, $mul.ref(0, 10)), $mul.ref(6, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.206, $mul.ref(0, 10)), $mul.ref(7, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.206, $mul.ref(0, 10)), $mul.ref(8, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.206, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, .str.207, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.207, $mul.ref(0, 18)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.207, $mul.ref(0, 18)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.207, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.207, $mul.ref(0, 18)), $mul.ref(4, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.207, $mul.ref(0, 18)), $mul.ref(5, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.207, $mul.ref(0, 18)), $mul.ref(6, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.207, $mul.ref(0, 18)), $mul.ref(7, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.207, $mul.ref(0, 18)), $mul.ref(8, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.207, $mul.ref(0, 18)), $mul.ref(9, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.207, $mul.ref(0, 18)), $mul.ref(10, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.207, $mul.ref(0, 18)), $mul.ref(11, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.207, $mul.ref(0, 18)), $mul.ref(12, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.207, $mul.ref(0, 18)), $mul.ref(13, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.207, $mul.ref(0, 18)), $mul.ref(14, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.207, $mul.ref(0, 18)), $mul.ref(15, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.207, $mul.ref(0, 18)), $mul.ref(16, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.207, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.1 := $store.i8($M.1, .str.183, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.183, $mul.ref(0, 21)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.183, $mul.ref(0, 21)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.183, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.183, $mul.ref(0, 21)), $mul.ref(4, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.183, $mul.ref(0, 21)), $mul.ref(5, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.183, $mul.ref(0, 21)), $mul.ref(6, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.183, $mul.ref(0, 21)), $mul.ref(7, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.183, $mul.ref(0, 21)), $mul.ref(8, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.183, $mul.ref(0, 21)), $mul.ref(9, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.183, $mul.ref(0, 21)), $mul.ref(10, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.183, $mul.ref(0, 21)), $mul.ref(11, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.183, $mul.ref(0, 21)), $mul.ref(12, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.183, $mul.ref(0, 21)), $mul.ref(13, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.183, $mul.ref(0, 21)), $mul.ref(14, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.183, $mul.ref(0, 21)), $mul.ref(15, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.183, $mul.ref(0, 21)), $mul.ref(16, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.183, $mul.ref(0, 21)), $mul.ref(17, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.183, $mul.ref(0, 21)), $mul.ref(18, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.183, $mul.ref(0, 21)), $mul.ref(19, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.183, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i8($M.1, .str.188, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.188, $mul.ref(0, 19)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.188, $mul.ref(0, 19)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.188, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.188, $mul.ref(0, 19)), $mul.ref(4, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.188, $mul.ref(0, 19)), $mul.ref(5, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.188, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.188, $mul.ref(0, 19)), $mul.ref(7, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.188, $mul.ref(0, 19)), $mul.ref(8, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.188, $mul.ref(0, 19)), $mul.ref(9, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.188, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.188, $mul.ref(0, 19)), $mul.ref(11, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.188, $mul.ref(0, 19)), $mul.ref(12, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.188, $mul.ref(0, 19)), $mul.ref(13, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.188, $mul.ref(0, 19)), $mul.ref(14, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.188, $mul.ref(0, 19)), $mul.ref(15, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.188, $mul.ref(0, 19)), $mul.ref(16, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.188, $mul.ref(0, 19)), $mul.ref(17, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.188, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, .str.190, 50);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(1, 1)), 46);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(2, 1)), 50);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(3, 1)), 46);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(4, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(5, 1)), 46);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(6, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(7, 1)), 50);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(8, 1)), 54);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(9, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i8($M.1, .str.186, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.186, $mul.ref(0, 19)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.186, $mul.ref(0, 19)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.186, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.186, $mul.ref(0, 19)), $mul.ref(4, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.186, $mul.ref(0, 19)), $mul.ref(5, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.186, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.186, $mul.ref(0, 19)), $mul.ref(7, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.186, $mul.ref(0, 19)), $mul.ref(8, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.186, $mul.ref(0, 19)), $mul.ref(9, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.186, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.186, $mul.ref(0, 19)), $mul.ref(11, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.186, $mul.ref(0, 19)), $mul.ref(12, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.186, $mul.ref(0, 19)), $mul.ref(13, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.186, $mul.ref(0, 19)), $mul.ref(14, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.186, $mul.ref(0, 19)), $mul.ref(15, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.186, $mul.ref(0, 19)), $mul.ref(16, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.186, $mul.ref(0, 19)), $mul.ref(17, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.186, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, .str.288, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.288, $mul.ref(0, 17)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.288, $mul.ref(0, 17)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.288, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.288, $mul.ref(0, 17)), $mul.ref(4, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.288, $mul.ref(0, 17)), $mul.ref(5, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.288, $mul.ref(0, 17)), $mul.ref(6, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.288, $mul.ref(0, 17)), $mul.ref(7, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.288, $mul.ref(0, 17)), $mul.ref(8, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.288, $mul.ref(0, 17)), $mul.ref(9, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.288, $mul.ref(0, 17)), $mul.ref(10, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.288, $mul.ref(0, 17)), $mul.ref(11, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.288, $mul.ref(0, 17)), $mul.ref(12, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.288, $mul.ref(0, 17)), $mul.ref(13, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.288, $mul.ref(0, 17)), $mul.ref(14, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.288, $mul.ref(0, 17)), $mul.ref(15, 1)), 120);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.288, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.69 := $store.i8($M.69, .str.290, 37);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.290, $mul.ref(0, 13)), $mul.ref(1, 1)), 115);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.290, $mul.ref(0, 13)), $mul.ref(2, 1)), 37);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.290, $mul.ref(0, 13)), $mul.ref(3, 1)), 100);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.290, $mul.ref(0, 13)), $mul.ref(4, 1)), 45);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.290, $mul.ref(0, 13)), $mul.ref(5, 1)), 109);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.290, $mul.ref(0, 13)), $mul.ref(6, 1)), 115);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.290, $mul.ref(0, 13)), $mul.ref(7, 1)), 105);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.290, $mul.ref(0, 13)), $mul.ref(8, 1)), 120);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.290, $mul.ref(0, 13)), $mul.ref(9, 1)), 32);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.290, $mul.ref(0, 13)), $mul.ref(10, 1)), 37);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.290, $mul.ref(0, 13)), $mul.ref(11, 1)), 115);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.290, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, .str.348, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.348, $mul.ref(0, 13)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.348, $mul.ref(0, 13)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.348, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.348, $mul.ref(0, 13)), $mul.ref(4, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.348, $mul.ref(0, 13)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.348, $mul.ref(0, 13)), $mul.ref(6, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.348, $mul.ref(0, 13)), $mul.ref(7, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.348, $mul.ref(0, 13)), $mul.ref(8, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.348, $mul.ref(0, 13)), $mul.ref(9, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.348, $mul.ref(0, 13)), $mul.ref(10, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.348, $mul.ref(0, 13)), $mul.ref(11, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.348, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, .str.137, 50);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.137, $mul.ref(0, 6)), $mul.ref(1, 1)), 46);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.137, $mul.ref(0, 6)), $mul.ref(2, 1)), 50);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.137, $mul.ref(0, 6)), $mul.ref(3, 1)), 46);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.137, $mul.ref(0, 6)), $mul.ref(4, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.137, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.138, 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.138, $mul.ref(0, 5)), $mul.ref(1, 1)), 50);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.138, $mul.ref(0, 5)), $mul.ref(2, 1)), 54);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.138, $mul.ref(0, 5)), $mul.ref(3, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.138, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, .str.154, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.154, $mul.ref(0, 14)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.154, $mul.ref(0, 14)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.154, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.154, $mul.ref(0, 14)), $mul.ref(4, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.154, $mul.ref(0, 14)), $mul.ref(5, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.154, $mul.ref(0, 14)), $mul.ref(6, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.154, $mul.ref(0, 14)), $mul.ref(7, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.154, $mul.ref(0, 14)), $mul.ref(8, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.154, $mul.ref(0, 14)), $mul.ref(9, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.154, $mul.ref(0, 14)), $mul.ref(10, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.154, $mul.ref(0, 14)), $mul.ref(11, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.154, $mul.ref(0, 14)), $mul.ref(12, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.154, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.1 := $store.i8($M.1, .str.339, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.339, $mul.ref(0, 16)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.339, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.339, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.339, $mul.ref(0, 16)), $mul.ref(4, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.339, $mul.ref(0, 16)), $mul.ref(5, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.339, $mul.ref(0, 16)), $mul.ref(6, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.339, $mul.ref(0, 16)), $mul.ref(7, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.339, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.339, $mul.ref(0, 16)), $mul.ref(9, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.339, $mul.ref(0, 16)), $mul.ref(10, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.339, $mul.ref(0, 16)), $mul.ref(11, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.339, $mul.ref(0, 16)), $mul.ref(12, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.339, $mul.ref(0, 16)), $mul.ref(13, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.339, $mul.ref(0, 16)), $mul.ref(14, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.339, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.1 := $store.i8($M.1, .str.271, 80);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.271, $mul.ref(0, 7)), $mul.ref(1, 1)), 67);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.271, $mul.ref(0, 7)), $mul.ref(2, 1)), 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.271, $mul.ref(0, 7)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.271, $mul.ref(0, 7)), $mul.ref(4, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.271, $mul.ref(0, 7)), $mul.ref(5, 1)), 40);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.271, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.272, 50);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.272, $mul.ref(0, 9)), $mul.ref(1, 1)), 46);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.272, $mul.ref(0, 9)), $mul.ref(2, 1)), 53);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.272, $mul.ref(0, 9)), $mul.ref(3, 1)), 71);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.272, $mul.ref(0, 9)), $mul.ref(4, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.272, $mul.ref(0, 9)), $mul.ref(5, 1)), 47);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.272, $mul.ref(0, 9)), $mul.ref(6, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.272, $mul.ref(0, 9)), $mul.ref(7, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.272, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, .str.273, 53);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.273, $mul.ref(0, 9)), $mul.ref(1, 1)), 46);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.273, $mul.ref(0, 9)), $mul.ref(2, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.273, $mul.ref(0, 9)), $mul.ref(3, 1)), 71);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.273, $mul.ref(0, 9)), $mul.ref(4, 1)), 84);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.273, $mul.ref(0, 9)), $mul.ref(5, 1)), 47);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.273, $mul.ref(0, 9)), $mul.ref(6, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.273, $mul.ref(0, 9)), $mul.ref(7, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.273, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, .str.274, 60);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.274, $mul.ref(0, 11)), $mul.ref(1, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.274, $mul.ref(0, 11)), $mul.ref(2, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.274, $mul.ref(0, 11)), $mul.ref(3, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.274, $mul.ref(0, 11)), $mul.ref(4, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.274, $mul.ref(0, 11)), $mul.ref(5, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.274, $mul.ref(0, 11)), $mul.ref(6, 1)), 119);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.274, $mul.ref(0, 11)), $mul.ref(7, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.274, $mul.ref(0, 11)), $mul.ref(8, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.274, $mul.ref(0, 11)), $mul.ref(9, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.274, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.70 := $store.i8($M.70, .str.275, 37);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.275, $mul.ref(0, 5)), $mul.ref(1, 1)), 100);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.275, $mul.ref(0, 5)), $mul.ref(2, 1)), 88);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.275, $mul.ref(0, 5)), $mul.ref(3, 1)), 41);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.275, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.71 := $store.i8($M.71, .str.160, 115);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(.str.160, $mul.ref(0, 6)), $mul.ref(1, 1)), 107);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(.str.160, $mul.ref(0, 6)), $mul.ref(2, 1)), 100);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(.str.160, $mul.ref(0, 6)), $mul.ref(3, 1)), 37);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(.str.160, $mul.ref(0, 6)), $mul.ref(4, 1)), 100);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(.str.160, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.163, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.163, $mul.ref(0, 14)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.163, $mul.ref(0, 14)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.163, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.163, $mul.ref(0, 14)), $mul.ref(4, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.163, $mul.ref(0, 14)), $mul.ref(5, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.163, $mul.ref(0, 14)), $mul.ref(6, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.163, $mul.ref(0, 14)), $mul.ref(7, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.163, $mul.ref(0, 14)), $mul.ref(8, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.163, $mul.ref(0, 14)), $mul.ref(9, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.163, $mul.ref(0, 14)), $mul.ref(10, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.163, $mul.ref(0, 14)), $mul.ref(11, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.163, $mul.ref(0, 14)), $mul.ref(12, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.163, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.72 := $store.i8($M.72, .str.269, 115);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(.str.269, $mul.ref(0, 6)), $mul.ref(1, 1)), 107);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(.str.269, $mul.ref(0, 6)), $mul.ref(2, 1)), 100);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(.str.269, $mul.ref(0, 6)), $mul.ref(3, 1)), 37);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(.str.269, $mul.ref(0, 6)), $mul.ref(4, 1)), 117);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(.str.269, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.270, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.270, $mul.ref(0, 14)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.270, $mul.ref(0, 14)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.270, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.270, $mul.ref(0, 14)), $mul.ref(4, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.270, $mul.ref(0, 14)), $mul.ref(5, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.270, $mul.ref(0, 14)), $mul.ref(6, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.270, $mul.ref(0, 14)), $mul.ref(7, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.270, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.270, $mul.ref(0, 14)), $mul.ref(9, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.270, $mul.ref(0, 14)), $mul.ref(10, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.270, $mul.ref(0, 14)), $mul.ref(11, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.270, $mul.ref(0, 14)), $mul.ref(12, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.270, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.1 := $store.i8($M.1, .str.267, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.267, $mul.ref(0, 16)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.267, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.267, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.267, $mul.ref(0, 16)), $mul.ref(4, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.267, $mul.ref(0, 16)), $mul.ref(5, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.267, $mul.ref(0, 16)), $mul.ref(6, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.267, $mul.ref(0, 16)), $mul.ref(7, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.267, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.267, $mul.ref(0, 16)), $mul.ref(9, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.267, $mul.ref(0, 16)), $mul.ref(10, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.267, $mul.ref(0, 16)), $mul.ref(11, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.267, $mul.ref(0, 16)), $mul.ref(12, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.267, $mul.ref(0, 16)), $mul.ref(13, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.267, $mul.ref(0, 16)), $mul.ref(14, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.267, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.1 := $store.i8($M.1, .str.264, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.264, $mul.ref(0, 15)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.264, $mul.ref(0, 15)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.264, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.264, $mul.ref(0, 15)), $mul.ref(4, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.264, $mul.ref(0, 15)), $mul.ref(5, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.264, $mul.ref(0, 15)), $mul.ref(6, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.264, $mul.ref(0, 15)), $mul.ref(7, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.264, $mul.ref(0, 15)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.264, $mul.ref(0, 15)), $mul.ref(9, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.264, $mul.ref(0, 15)), $mul.ref(10, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.264, $mul.ref(0, 15)), $mul.ref(11, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.264, $mul.ref(0, 15)), $mul.ref(12, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.264, $mul.ref(0, 15)), $mul.ref(13, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.264, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, .str.262, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(4, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(5, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(6, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(7, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(9, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(10, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(11, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(12, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(13, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, .str.260, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.260, $mul.ref(0, 16)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.260, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.260, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.260, $mul.ref(0, 16)), $mul.ref(4, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.260, $mul.ref(0, 16)), $mul.ref(5, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.260, $mul.ref(0, 16)), $mul.ref(6, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.260, $mul.ref(0, 16)), $mul.ref(7, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.260, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.260, $mul.ref(0, 16)), $mul.ref(9, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.260, $mul.ref(0, 16)), $mul.ref(10, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.260, $mul.ref(0, 16)), $mul.ref(11, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.260, $mul.ref(0, 16)), $mul.ref(12, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.260, $mul.ref(0, 16)), $mul.ref(13, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.260, $mul.ref(0, 16)), $mul.ref(14, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.260, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.1 := $store.i8($M.1, .str.134, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.134, $mul.ref(0, 16)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.134, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.134, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.134, $mul.ref(0, 16)), $mul.ref(4, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.134, $mul.ref(0, 16)), $mul.ref(5, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.134, $mul.ref(0, 16)), $mul.ref(6, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.134, $mul.ref(0, 16)), $mul.ref(7, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.134, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.134, $mul.ref(0, 16)), $mul.ref(9, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.134, $mul.ref(0, 16)), $mul.ref(10, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.134, $mul.ref(0, 16)), $mul.ref(11, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.134, $mul.ref(0, 16)), $mul.ref(12, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.134, $mul.ref(0, 16)), $mul.ref(13, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.134, $mul.ref(0, 16)), $mul.ref(14, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.134, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.1 := $store.i8($M.1, .str.103, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(4, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(5, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(6, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(7, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(9, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(10, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(11, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(12, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(13, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, .str.106, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(4, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(5, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(6, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(7, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(8, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(10, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(11, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(12, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(13, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(14, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.1 := $store.i8($M.1, .str.130, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(4, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(5, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(6, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(7, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(8, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(10, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(11, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(12, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(13, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(14, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(15, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(16, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(17, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(18, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(19, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i8($M.1, .str.126, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.126, $mul.ref(0, 16)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.126, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.126, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.126, $mul.ref(0, 16)), $mul.ref(4, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.126, $mul.ref(0, 16)), $mul.ref(5, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.126, $mul.ref(0, 16)), $mul.ref(6, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.126, $mul.ref(0, 16)), $mul.ref(7, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.126, $mul.ref(0, 16)), $mul.ref(8, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.126, $mul.ref(0, 16)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.126, $mul.ref(0, 16)), $mul.ref(10, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.126, $mul.ref(0, 16)), $mul.ref(11, 1)), 119);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.126, $mul.ref(0, 16)), $mul.ref(12, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.126, $mul.ref(0, 16)), $mul.ref(13, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.126, $mul.ref(0, 16)), $mul.ref(14, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.126, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.1 := $store.i8($M.1, .str.124, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(4, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(5, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(6, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(7, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(8, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(10, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(11, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(12, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(13, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(14, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(15, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(16, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(17, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(18, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(19, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(20, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(21, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(22, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(23, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.124, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i8($M.1, .str.121, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(4, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(5, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(6, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(7, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(8, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(10, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(11, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(12, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(13, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(14, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(15, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(16, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(17, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(18, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(19, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(20, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(21, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(22, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.1 := $store.i8($M.1, .str.108, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(4, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(5, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(6, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(7, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(8, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(10, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(11, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(12, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(13, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(14, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(15, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(16, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(17, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(18, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(19, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(20, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(21, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(22, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(23, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(24, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(25, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(26, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(27, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.108, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.1 := $store.i8($M.1, .str.293, 40);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.293, $mul.ref(0, 8)), $mul.ref(1, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.293, $mul.ref(0, 8)), $mul.ref(2, 1)), 77);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.293, $mul.ref(0, 8)), $mul.ref(3, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.293, $mul.ref(0, 8)), $mul.ref(4, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.293, $mul.ref(0, 8)), $mul.ref(5, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.293, $mul.ref(0, 8)), $mul.ref(6, 1)), 41);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.293, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.294, 40);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.294, $mul.ref(0, 8)), $mul.ref(1, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.294, $mul.ref(0, 8)), $mul.ref(2, 1)), 77);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.294, $mul.ref(0, 8)), $mul.ref(3, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.294, $mul.ref(0, 8)), $mul.ref(4, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.294, $mul.ref(0, 8)), $mul.ref(5, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.294, $mul.ref(0, 8)), $mul.ref(6, 1)), 41);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.294, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.295, 40);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.295, $mul.ref(0, 8)), $mul.ref(1, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.295, $mul.ref(0, 8)), $mul.ref(2, 1)), 77);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.295, $mul.ref(0, 8)), $mul.ref(3, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.295, $mul.ref(0, 8)), $mul.ref(4, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.295, $mul.ref(0, 8)), $mul.ref(5, 1)), 50);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.295, $mul.ref(0, 8)), $mul.ref(6, 1)), 41);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.295, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.296, 40);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.296, $mul.ref(0, 8)), $mul.ref(1, 1)), 68);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.296, $mul.ref(0, 8)), $mul.ref(2, 1)), 77);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.296, $mul.ref(0, 8)), $mul.ref(3, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.296, $mul.ref(0, 8)), $mul.ref(4, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.296, $mul.ref(0, 8)), $mul.ref(5, 1)), 51);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.296, $mul.ref(0, 8)), $mul.ref(6, 1)), 41);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.296, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.297, 40);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.297, $mul.ref(0, 15)), $mul.ref(1, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.297, $mul.ref(0, 15)), $mul.ref(2, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.297, $mul.ref(0, 15)), $mul.ref(3, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.297, $mul.ref(0, 15)), $mul.ref(4, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.297, $mul.ref(0, 15)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.297, $mul.ref(0, 15)), $mul.ref(6, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.297, $mul.ref(0, 15)), $mul.ref(7, 1)), 67);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.297, $mul.ref(0, 15)), $mul.ref(8, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.297, $mul.ref(0, 15)), $mul.ref(9, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.297, $mul.ref(0, 15)), $mul.ref(10, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.297, $mul.ref(0, 15)), $mul.ref(11, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.297, $mul.ref(0, 15)), $mul.ref(12, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.297, $mul.ref(0, 15)), $mul.ref(13, 1)), 41);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.297, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, .str.298, 40);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.298, $mul.ref(0, 10)), $mul.ref(1, 1)), 67);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.298, $mul.ref(0, 10)), $mul.ref(2, 1)), 79);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.298, $mul.ref(0, 10)), $mul.ref(3, 1)), 77);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.298, $mul.ref(0, 10)), $mul.ref(4, 1)), 80);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.298, $mul.ref(0, 10)), $mul.ref(5, 1)), 76);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.298, $mul.ref(0, 10)), $mul.ref(6, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.298, $mul.ref(0, 10)), $mul.ref(7, 1)), 81);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.298, $mul.ref(0, 10)), $mul.ref(8, 1)), 41);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.298, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, .str.299, 40);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.299, $mul.ref(0, 6)), $mul.ref(1, 1)), 77);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.299, $mul.ref(0, 6)), $mul.ref(2, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.299, $mul.ref(0, 6)), $mul.ref(3, 1)), 71);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.299, $mul.ref(0, 6)), $mul.ref(4, 1)), 41);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.299, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.300, 40);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.300, $mul.ref(0, 11)), $mul.ref(1, 1)), 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.300, $mul.ref(0, 11)), $mul.ref(2, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.300, $mul.ref(0, 11)), $mul.ref(3, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.300, $mul.ref(0, 11)), $mul.ref(4, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.300, $mul.ref(0, 11)), $mul.ref(5, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.300, $mul.ref(0, 11)), $mul.ref(6, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.300, $mul.ref(0, 11)), $mul.ref(7, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.300, $mul.ref(0, 11)), $mul.ref(8, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.300, $mul.ref(0, 11)), $mul.ref(9, 1)), 41);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.300, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i8($M.1, .str.301, 40);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(1, 1)), 81);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(2, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(4, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(6, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(7, 1)), 70);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(8, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(9, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(10, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(11, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(12, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(13, 1)), 41);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, .str.302, 40);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.302, $mul.ref(0, 15)), $mul.ref(1, 1)), 81);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.302, $mul.ref(0, 15)), $mul.ref(2, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.302, $mul.ref(0, 15)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.302, $mul.ref(0, 15)), $mul.ref(4, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.302, $mul.ref(0, 15)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.302, $mul.ref(0, 15)), $mul.ref(6, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.302, $mul.ref(0, 15)), $mul.ref(7, 1)), 70);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.302, $mul.ref(0, 15)), $mul.ref(8, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.302, $mul.ref(0, 15)), $mul.ref(9, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.302, $mul.ref(0, 15)), $mul.ref(10, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.302, $mul.ref(0, 15)), $mul.ref(11, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.302, $mul.ref(0, 15)), $mul.ref(12, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.302, $mul.ref(0, 15)), $mul.ref(13, 1)), 41);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.302, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, .str.303, 40);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.303, $mul.ref(0, 15)), $mul.ref(1, 1)), 81);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.303, $mul.ref(0, 15)), $mul.ref(2, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.303, $mul.ref(0, 15)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.303, $mul.ref(0, 15)), $mul.ref(4, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.303, $mul.ref(0, 15)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.303, $mul.ref(0, 15)), $mul.ref(6, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.303, $mul.ref(0, 15)), $mul.ref(7, 1)), 70);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.303, $mul.ref(0, 15)), $mul.ref(8, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.303, $mul.ref(0, 15)), $mul.ref(9, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.303, $mul.ref(0, 15)), $mul.ref(10, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.303, $mul.ref(0, 15)), $mul.ref(11, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.303, $mul.ref(0, 15)), $mul.ref(12, 1)), 50);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.303, $mul.ref(0, 15)), $mul.ref(13, 1)), 41);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.303, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, .str.304, 40);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.304, $mul.ref(0, 15)), $mul.ref(1, 1)), 81);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.304, $mul.ref(0, 15)), $mul.ref(2, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.304, $mul.ref(0, 15)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.304, $mul.ref(0, 15)), $mul.ref(4, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.304, $mul.ref(0, 15)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.304, $mul.ref(0, 15)), $mul.ref(6, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.304, $mul.ref(0, 15)), $mul.ref(7, 1)), 70);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.304, $mul.ref(0, 15)), $mul.ref(8, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.304, $mul.ref(0, 15)), $mul.ref(9, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.304, $mul.ref(0, 15)), $mul.ref(10, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.304, $mul.ref(0, 15)), $mul.ref(11, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.304, $mul.ref(0, 15)), $mul.ref(12, 1)), 51);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.304, $mul.ref(0, 15)), $mul.ref(13, 1)), 41);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.304, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, .str.317, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.317, $mul.ref(0, 14)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.317, $mul.ref(0, 14)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.317, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.317, $mul.ref(0, 14)), $mul.ref(4, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.317, $mul.ref(0, 14)), $mul.ref(5, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.317, $mul.ref(0, 14)), $mul.ref(6, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.317, $mul.ref(0, 14)), $mul.ref(7, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.317, $mul.ref(0, 14)), $mul.ref(8, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.317, $mul.ref(0, 14)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.317, $mul.ref(0, 14)), $mul.ref(10, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.317, $mul.ref(0, 14)), $mul.ref(11, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.317, $mul.ref(0, 14)), $mul.ref(12, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.317, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.1 := $store.i8($M.1, .str.310, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.310, $mul.ref(0, 12)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.310, $mul.ref(0, 12)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.310, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.310, $mul.ref(0, 12)), $mul.ref(4, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.310, $mul.ref(0, 12)), $mul.ref(5, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.310, $mul.ref(0, 12)), $mul.ref(6, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.310, $mul.ref(0, 12)), $mul.ref(7, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.310, $mul.ref(0, 12)), $mul.ref(8, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.310, $mul.ref(0, 12)), $mul.ref(9, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.310, $mul.ref(0, 12)), $mul.ref(10, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.310, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.1 := $store.i8($M.1, .str.309, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.309, $mul.ref(0, 11)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.309, $mul.ref(0, 11)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.309, $mul.ref(0, 11)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.309, $mul.ref(0, 11)), $mul.ref(4, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.309, $mul.ref(0, 11)), $mul.ref(5, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.309, $mul.ref(0, 11)), $mul.ref(6, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.309, $mul.ref(0, 11)), $mul.ref(7, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.309, $mul.ref(0, 11)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.309, $mul.ref(0, 11)), $mul.ref(9, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.309, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i8($M.1, .str.308, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.308, $mul.ref(0, 15)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.308, $mul.ref(0, 15)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.308, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.308, $mul.ref(0, 15)), $mul.ref(4, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.308, $mul.ref(0, 15)), $mul.ref(5, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.308, $mul.ref(0, 15)), $mul.ref(6, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.308, $mul.ref(0, 15)), $mul.ref(7, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.308, $mul.ref(0, 15)), $mul.ref(8, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.308, $mul.ref(0, 15)), $mul.ref(9, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.308, $mul.ref(0, 15)), $mul.ref(10, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.308, $mul.ref(0, 15)), $mul.ref(11, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.308, $mul.ref(0, 15)), $mul.ref(12, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.308, $mul.ref(0, 15)), $mul.ref(13, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.308, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, .str.305, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.305, $mul.ref(0, 17)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.305, $mul.ref(0, 17)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.305, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.305, $mul.ref(0, 17)), $mul.ref(4, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.305, $mul.ref(0, 17)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.305, $mul.ref(0, 17)), $mul.ref(6, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.305, $mul.ref(0, 17)), $mul.ref(7, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.305, $mul.ref(0, 17)), $mul.ref(8, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.305, $mul.ref(0, 17)), $mul.ref(9, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.305, $mul.ref(0, 17)), $mul.ref(10, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.305, $mul.ref(0, 17)), $mul.ref(11, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.305, $mul.ref(0, 17)), $mul.ref(12, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.305, $mul.ref(0, 17)), $mul.ref(13, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.305, $mul.ref(0, 17)), $mul.ref(14, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.305, $mul.ref(0, 17)), $mul.ref(15, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.305, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    call {:si_unique_call 1795} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 790312);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 791344);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 792376);

procedure devirtbounce.2(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 793408);

procedure devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 794440);

procedure devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.10, $M.11, $CurrAddr, $M.20, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i5} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    $i4 := $eq.ref(skd_pci_resume, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1796} $i2 := skd_pci_resume($p1);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    $r := $i2;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i5 == 1;
    call {:si_unique_call 1797} $i3 := __builtinx_object_size();
    $r := $i3;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 795472);

procedure devirtbounce.5(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 796504);

procedure devirtbounce.6(funcPtr: ref, arg: i64, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: i64, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 797536);

procedure devirtbounce.7(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1798} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 798568);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 799600);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: ref) returns ($r: i32);



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 800632);

procedure devirtbounce.10(funcPtr: ref, arg: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: i64) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 801664);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 802696);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32);



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 803728);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 804760);

procedure devirtbounce.14(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 805792);

procedure devirtbounce.15(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 806824);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref, arg4: ref, arg5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref, arg4: ref, arg5: i32) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 807856);

procedure devirtbounce.17(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 808888);

procedure devirtbounce.18(funcPtr: ref, arg: i64);
  free requires assertsPassed;
  modifies $M.11, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, $CurrAddr, $M.10, $M.20, assertsPassed;



implementation devirtbounce.18(funcPtr: ref, arg: i64)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(skd_timer_tick, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1799} skd_timer_tick(arg);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.12, $M.14, $M.16, $M.18, $M.20, $M.13, $M.15, $M.17, $M.19, $M.43, $M.44, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.11, $M.23, $M.24, $M.1, $M.29, $M.30, $M.31, $M.32, $M.33, $M.28, $M.34, $M.37, $M.39, $M.26, $M.41, $M.40, $M.27, $M.38, $M.2, $M.64, $M.22, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1800} __SMACK_static_init();
    call {:si_unique_call 1801} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.45, $M.46, $M.47, $M.12, $M.14, $M.16, $M.18, $M.48, $M.49, $M.50, $M.51, $M.52, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $M.53, $M.43, $M.44, $M.2, $M.54, $M.9, $M.55, $M.56, $M.20, $M.13, $M.15, $M.17, $M.19, $M.11, $M.23, $M.24, $M.29, $M.30, $M.31, $M.32, $M.33, $M.28, $M.34, $M.37, $M.39, $M.26, $M.41, $M.40, $M.27, $M.38, $M.64, $M.22, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $CurrAddr, $M.10, $M.36;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation skd_pci_probe_loop_$bb71(in_$p5: ref, in_$p41: ref, in_$i162: i64, in_$p163: ref, in_$i164: i64, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$i168: i8, in_$i169: i1, in_$i170: i1, in_$i171: i64, in_$i172: i1, in_$i174: i1, in_$i173: i1, in_$i175: i32, in_$i176: i1, in_$i177: i64, in_$i179: i1, in_$i180: i64, in_$i181: i64) returns (out_$i162: i64, out_$p163: ref, out_$i164: i64, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$i168: i8, out_$i169: i1, out_$i170: i1, out_$i171: i64, out_$i172: i1, out_$i174: i1, out_$i173: i1, out_$i175: i32, out_$i176: i1, out_$i177: i64, out_$i179: i1, out_$i180: i64, out_$i181: i64)
{

  entry:
    out_$i162, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i174, out_$i173, out_$i175, out_$i176, out_$i177, out_$i179, out_$i180, out_$i181 := in_$i162, in_$p163, in_$i164, in_$p165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i174, in_$i173, in_$i175, in_$i176, in_$i177, in_$i179, in_$i180, in_$i181;
    goto $bb71, exit;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_252;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    out_$i162 := out_$i181;
    goto corral_source_split_286_dummy;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} out_$i181 := schedule_timeout(out_$i171);
    call {:si_unique_call 73} {:cexpr "__ret___0"} boogie_si_record_i64(out_$i181);
    goto corral_source_split_286;

  $bb86:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    out_$i180 := out_$i164;
    assume true;
    goto $bb86;

  $bb84:
    assume {:verifier.code 0} true;
    out_$i179 := $ne.i64(out_$i164, 0);
    goto corral_source_split_282;

  $bb82:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    out_$i177 := out_$i171;
    assume true;
    goto $bb82;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    out_$i176 := $ne.i32(out_$i175, 0);
    goto corral_source_split_271;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    out_$i175 := $zext.i1.i32(out_$i173);
    goto corral_source_split_270;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_269;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    out_$i173 := out_$i174;
    goto $bb79;

  $bb78:
    assume {:verifier.code 0} true;
    assume out_$i172 == 1;
    goto $bb79;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    out_$i173 := 1;
    assume true;
    goto $bb78, $bb80;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    out_$i172 := $trunc.i8.i1(out_$i168);
    goto corral_source_split_267;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_266;

  $bb74:
    assume {:verifier.code 0} true;
    out_$i171 := out_$i162;
    goto $bb77;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    out_$i171 := 1;
    goto $bb77;

  $bb75:
    assume out_$i170 == 1;
    goto corral_source_split_264;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    out_$i170 := $eq.i64(out_$i162, 0);
    goto corral_source_split_262;

  $bb72:
    assume out_$i169 == 1;
    goto corral_source_split_261;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    out_$i169 := $trunc.i8.i1(out_$i168);
    goto corral_source_split_259;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    out_$i168 := $zext.i1.i8(out_$i167);
    call {:si_unique_call 70} {:cexpr "__cond"} boogie_si_record_i8(out_$i168);
    goto corral_source_split_258;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    out_$i167 := $ne.i32(out_$i166, 0);
    goto corral_source_split_257;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    out_$i166 := $load.i32($M.1, out_$p165);
    goto corral_source_split_256;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p41, $mul.ref(0, 1008)), $mul.ref(168, 1));
    goto corral_source_split_255;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} out_$i164 := prepare_to_wait_event(out_$p163, in_$p5, 1);
    call {:si_unique_call 69} {:cexpr "tmp___10"} boogie_si_record_i64(out_$i164);
    goto corral_source_split_254;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref(in_$p41, $mul.ref(0, 1008)), $mul.ref(664, 1));
    goto corral_source_split_253;

  $bb73:
    assume {:verifier.code 0} true;
    assume !(out_$i169 == 1);
    goto $bb74;

  $bb76:
    assume {:verifier.code 0} true;
    assume !(out_$i170 == 1);
    goto $bb74;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i64(out_$i171, 0);
    goto corral_source_split_274;

  $bb80:
    assume !(out_$i172 == 1);
    goto corral_source_split_273;

  corral_source_split_286_dummy:
    call {:si_unique_call 1} out_$i162, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i174, out_$i173, out_$i175, out_$i176, out_$i177, out_$i179, out_$i180, out_$i181 := skd_pci_probe_loop_$bb71(in_$p5, in_$p41, out_$i162, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i174, out_$i173, out_$i175, out_$i176, out_$i177, out_$i179, out_$i180, out_$i181);
    return;

  exit:
    return;
}



procedure skd_pci_probe_loop_$bb71(in_$p5: ref, in_$p41: ref, in_$i162: i64, in_$p163: ref, in_$i164: i64, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$i168: i8, in_$i169: i1, in_$i170: i1, in_$i171: i64, in_$i172: i1, in_$i174: i1, in_$i173: i1, in_$i175: i32, in_$i176: i1, in_$i177: i64, in_$i179: i1, in_$i180: i64, in_$i181: i64) returns (out_$i162: i64, out_$p163: ref, out_$i164: i64, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$i168: i8, out_$i169: i1, out_$i170: i1, out_$i171: i64, out_$i172: i1, out_$i174: i1, out_$i173: i1, out_$i175: i32, out_$i176: i1, out_$i177: i64, out_$i179: i1, out_$i180: i64, out_$i181: i64);



implementation skd_pci_probe_loop_$bb26()
{

  entry:
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb26_dummy;

  $bb26_dummy:
    call {:si_unique_call 1} skd_pci_probe_loop_$bb26();
    return;

  exit:
    return;
}



procedure skd_pci_probe_loop_$bb26();



implementation skd_stop_device_loop_$bb19(in_$p0: ref, in_$p1: ref, in_$i32: i64, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i38: i8, in_$i39: i1, in_$i40: i1, in_$i41: i64, in_$i42: i1, in_$i44: i1, in_$i43: i1, in_$i45: i32, in_$i46: i1, in_$i47: i1, in_$i48: i64) returns (out_$i32: i64, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i38: i8, out_$i39: i1, out_$i40: i1, out_$i41: i64, out_$i42: i1, out_$i44: i1, out_$i43: i1, out_$i45: i32, out_$i46: i1, out_$i47: i1, out_$i48: i64)
{

  entry:
    out_$i32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i44, out_$i43, out_$i45, out_$i46, out_$i47, out_$i48 := in_$i32, in_$p33, in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i44, in_$i43, in_$i45, in_$i46, in_$i47, in_$i48;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_918;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i48;
    goto corral_source_split_951_dummy;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} out_$i48 := schedule_timeout(out_$i41);
    call {:si_unique_call 223} {:cexpr "__ret___0"} boogie_si_record_i64(out_$i48);
    goto corral_source_split_951;

  $bb34:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i34, 0);
    goto corral_source_split_947;

  $bb30:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_937;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i1.i32(out_$i43);
    goto corral_source_split_936;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_935;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i44;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    assume out_$i42 == 1;
    goto $bb27;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    out_$i43 := 1;
    assume true;
    goto $bb26, $bb28;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    out_$i42 := $trunc.i8.i1(out_$i38);
    goto corral_source_split_933;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_932;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i32;
    goto $bb25;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    out_$i41 := 1;
    goto $bb25;

  $bb23:
    assume out_$i40 == 1;
    goto corral_source_split_930;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i64(out_$i32, 0);
    goto corral_source_split_928;

  $bb20:
    assume out_$i39 == 1;
    goto corral_source_split_927;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i8.i1(out_$i38);
    goto corral_source_split_925;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i1.i8(out_$i37);
    call {:si_unique_call 220} {:cexpr "__cond"} boogie_si_record_i8(out_$i38);
    goto corral_source_split_924;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_923;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.1, out_$p35);
    goto corral_source_split_922;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(172, 1));
    goto corral_source_split_921;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} out_$i34 := prepare_to_wait_event(out_$p33, in_$p1, 1);
    call {:si_unique_call 219} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_920;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(664, 1));
    goto corral_source_split_919;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i39 == 1);
    goto $bb22;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i40 == 1);
    goto $bb22;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i64(out_$i41, 0);
    goto corral_source_split_940;

  $bb28:
    assume !(out_$i42 == 1);
    goto corral_source_split_939;

  corral_source_split_951_dummy:
    call {:si_unique_call 1} out_$i32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i44, out_$i43, out_$i45, out_$i46, out_$i47, out_$i48 := skd_stop_device_loop_$bb19(in_$p0, in_$p1, out_$i32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i44, out_$i43, out_$i45, out_$i46, out_$i47, out_$i48);
    return;

  exit:
    return;
}



procedure skd_stop_device_loop_$bb19(in_$p0: ref, in_$p1: ref, in_$i32: i64, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i38: i8, in_$i39: i1, in_$i40: i1, in_$i41: i64, in_$i42: i1, in_$i44: i1, in_$i43: i1, in_$i45: i32, in_$i46: i1, in_$i47: i1, in_$i48: i64) returns (out_$i32: i64, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i38: i8, out_$i39: i1, out_$i40: i1, out_$i41: i64, out_$i42: i1, out_$i44: i1, out_$i43: i1, out_$i45: i32, out_$i46: i1, out_$i47: i1, out_$i48: i64);



implementation skd_send_internal_skspcl_loop_$bb34(in_$p7: ref, in_$p101: ref, in_$i105: i8, in_$i106: i64, in_$p107: ref, in_$i108: i32, in_$i109: i32, in_$i110: i1, in_$i104: i32) returns (out_$i105: i8, out_$i106: i64, out_$p107: ref, out_$i108: i32, out_$i109: i32, out_$i110: i1, out_$i104: i32)
{

  entry:
    out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i104 := in_$i105, in_$i106, in_$p107, in_$i108, in_$i109, in_$i110, in_$i104;
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_1244;

  $bb36:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$i104 := out_$i108;
    goto $bb36_dummy;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    out_$i110 := $ult.i32(out_$i108, out_$i109);
    goto corral_source_split_1252;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i32($M.1, in_$p101);
    goto corral_source_split_1251;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    out_$i108 := $add.i32(out_$i104, 1);
    call {:si_unique_call 302} {:cexpr "i"} boogie_si_record_i32(out_$i108);
    goto corral_source_split_1250;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p107, out_$i105);
    goto corral_source_split_1249;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref(in_$p7, $mul.ref(out_$i106, 1));
    goto corral_source_split_1248;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    out_$i106 := $sext.i32.i64(out_$i104);
    goto corral_source_split_1247;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i105 := $trunc.i32.i8(out_$i104);
    goto corral_source_split_1246;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb36_dummy:
    call {:si_unique_call 1} out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i104 := skd_send_internal_skspcl_loop_$bb34(in_$p7, in_$p101, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i104);
    return;

  exit:
    return;
}



procedure skd_send_internal_skspcl_loop_$bb34(in_$p7: ref, in_$p101: ref, in_$i105: i8, in_$i106: i64, in_$p107: ref, in_$i108: i32, in_$i109: i32, in_$i110: i1, in_$i104: i32) returns (out_$i105: i8, out_$i106: i64, out_$p107: ref, out_$i108: i32, out_$i109: i32, out_$i110: i1, out_$i104: i32);
  modifies $M.1;



implementation skd_send_special_fitmsg_loop_$bb20(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p107: ref, in_$p112: ref, in_$p113: ref, in_$i114: i64, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$i122: i24, in_$i123: i24, in_$i124: i24, in_$p125: ref, in_$p126: ref, in_$i127: i8, in_$i128: i64, in_$i129: i64, in_$i130: i64, in_$i131: i1, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i135: i32, in_$p136: ref, in_$i137: i32, in_$p138: ref, in_$i139: i64, in_$p140: ref, in_$i141: i64, in_$i143: i32, in_$i144: i32, in_$i145: i1, in_$i110: i32, in_vslice_dummy_var_103: i32) returns (out_$p112: ref, out_$p113: ref, out_$i114: i64, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$i122: i24, out_$i123: i24, out_$i124: i24, out_$p125: ref, out_$p126: ref, out_$i127: i8, out_$i128: i64, out_$i129: i64, out_$i130: i64, out_$i131: i1, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i135: i32, out_$p136: ref, out_$i137: i32, out_$p138: ref, out_$i139: i64, out_$p140: ref, out_$i141: i64, out_$i143: i32, out_$i144: i32, out_$i145: i1, out_$i110: i32, out_vslice_dummy_var_103: i32)
{

  entry:
    out_$p112, out_$p113, out_$i114, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$i122, out_$i123, out_$i124, out_$p125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$p132, out_$p133, out_$p134, out_$i135, out_$p136, out_$i137, out_$p138, out_$i139, out_$p140, out_$i141, out_$i143, out_$i144, out_$i145, out_$i110, out_vslice_dummy_var_103 := in_$p112, in_$p113, in_$i114, in_$p116, in_$p117, in_$p118, in_$p119, in_$p120, in_$p121, in_$i122, in_$i123, in_$i124, in_$p125, in_$p126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$p132, in_$p133, in_$p134, in_$i135, in_$p136, in_$i137, in_$p138, in_$i139, in_$p140, in_$i141, in_$i143, in_$i144, in_$i145, in_$i110, in_vslice_dummy_var_103;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1693;

  $bb25:
    assume out_$i145 == 1;
    assume {:verifier.code 0} true;
    out_$i110 := out_$i143;
    goto $bb25_dummy;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    out_$i145 := $ult.i32(out_$i143, out_$i144);
    goto corral_source_split_1737;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    out_$i144 := $load.i32($M.1, in_$p107);
    goto corral_source_split_1736;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i143 := $add.i32(out_$i110, 1);
    call {:si_unique_call 433} {:cexpr "i"} boogie_si_record_i32(out_$i143);
    goto corral_source_split_1735;

  $bb23:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} out_vslice_dummy_var_103 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32.i32.i64.i64(in_$p4, .str.82, out_$p133, .str.79, 2305, out_$i110, out_$i135, out_$i137, out_$i139, out_$i141);
    goto corral_source_split_1733;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i64($M.1, out_$p140);
    goto corral_source_split_1732;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(out_$p113, $mul.ref(out_$i114, 32)), $mul.ref(24, 1));
    goto corral_source_split_1731;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    out_$i139 := $load.i64($M.1, out_$p138);
    goto corral_source_split_1730;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(out_$p113, $mul.ref(out_$i114, 32)), $mul.ref(8, 1));
    goto corral_source_split_1729;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    out_$i137 := $load.i32($M.1, out_$p136);
    goto corral_source_split_1728;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(out_$p113, $mul.ref(out_$i114, 32)), $mul.ref(0, 1));
    goto corral_source_split_1727;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i32($M.1, out_$p134);
    goto corral_source_split_1726;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(out_$p113, $mul.ref(out_$i114, 32)), $mul.ref(4, 1));
    goto corral_source_split_1725;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    out_$p133 := $bitcast.ref.ref(out_$p132);
    goto corral_source_split_1724;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_1723;

  $bb22:
    assume out_$i131 == 1;
    goto corral_source_split_1722;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i64(out_$i130, 0);
    goto corral_source_split_1720;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} out_$i130 := ldv__builtin_expect(out_$i129, 0);
    call {:si_unique_call 431} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i130);
    goto corral_source_split_1719;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    out_$i129 := $and.i64(out_$i128, 1);
    goto corral_source_split_1718;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i8.i64(out_$i127);
    goto corral_source_split_1717;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    out_$i127 := $load.i8($M.8, out_$p126);
    goto corral_source_split_1716;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1715;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p125, 0);
    goto corral_source_split_1714;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1713;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, out_$p121, out_$i124);
    goto corral_source_split_1712;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    out_$i124 := $or.i24(out_$i123, 2305);
    goto corral_source_split_1711;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    out_$i123 := $and.i24(out_$i122, $sub.i24(0, 262144));
    goto corral_source_split_1710;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i24($M.7, out_$p121);
    goto corral_source_split_1709;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    out_$p121 := $bitcast.ref.ref(out_$p120);
    goto corral_source_split_1708;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1707;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p119, .str.82);
    goto corral_source_split_1706;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1705;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p118, .str.29);
    goto corral_source_split_1704;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1703;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p117, .str.79);
    goto corral_source_split_1702;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1701;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p116, .str.27);
    goto corral_source_split_1700;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1699;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    goto corral_source_split_1698;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    out_$i114 := $sext.i32.i64(out_$i110);
    goto corral_source_split_1697;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    out_$p113 := $load.ref($M.1, out_$p112);
    goto corral_source_split_1696;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_1695;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p112, out_$p113, out_$i114, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$i122, out_$i123, out_$i124, out_$p125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$p132, out_$p133, out_$p134, out_$i135, out_$p136, out_$i137, out_$p138, out_$i139, out_$p140, out_$i141, out_$i143, out_$i144, out_$i145, out_$i110, out_vslice_dummy_var_103 := skd_send_special_fitmsg_loop_$bb20(in_$p0, in_$p1, in_$p4, in_$p107, out_$p112, out_$p113, out_$i114, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$i122, out_$i123, out_$i124, out_$p125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$p132, out_$p133, out_$p134, out_$i135, out_$p136, out_$i137, out_$p138, out_$i139, out_$p140, out_$i141, out_$i143, out_$i144, out_$i145, out_$i110, out_vslice_dummy_var_103);
    return;

  exit:
    return;
}



procedure skd_send_special_fitmsg_loop_$bb20(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p107: ref, in_$p112: ref, in_$p113: ref, in_$i114: i64, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$i122: i24, in_$i123: i24, in_$i124: i24, in_$p125: ref, in_$p126: ref, in_$i127: i8, in_$i128: i64, in_$i129: i64, in_$i130: i64, in_$i131: i1, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i135: i32, in_$p136: ref, in_$i137: i32, in_$p138: ref, in_$i139: i64, in_$p140: ref, in_$i141: i64, in_$i143: i32, in_$i144: i32, in_$i145: i1, in_$i110: i32, in_vslice_dummy_var_103: i32) returns (out_$p112: ref, out_$p113: ref, out_$i114: i64, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$i122: i24, out_$i123: i24, out_$i124: i24, out_$p125: ref, out_$p126: ref, out_$i127: i8, out_$i128: i64, out_$i129: i64, out_$i130: i64, out_$i131: i1, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i135: i32, out_$p136: ref, out_$i137: i32, out_$p138: ref, out_$i139: i64, out_$p140: ref, out_$i141: i64, out_$i143: i32, out_$i144: i32, out_$i145: i1, out_$i110: i32, out_vslice_dummy_var_103: i32);
  modifies $M.8, $M.7, $M.6, $M.5, $M.4, $M.3;



implementation {:SIextraRecBound 9} skd_send_special_fitmsg_loop_$bb3(in_$p0: ref, in_$p2: ref, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i24, in_$i22: i24, in_$i23: i24, in_$p24: ref, in_$p25: ref, in_$i26: i8, in_$i27: i64, in_$i28: i64, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i64, in_$i38: i64, in_$p39: ref, in_$i40: i8, in_$i41: i32, in_$i42: i64, in_$i43: i64, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i47: i64, in_$i48: i64, in_$p49: ref, in_$i50: i8, in_$i51: i32, in_$i52: i64, in_$i53: i64, in_$p54: ref, in_$i55: i8, in_$i56: i32, in_$i57: i64, in_$i58: i64, in_$p59: ref, in_$i60: i8, in_$i61: i32, in_$i62: i64, in_$i63: i64, in_$p64: ref, in_$i65: i8, in_$i66: i32, in_$i67: i64, in_$i68: i64, in_$p69: ref, in_$i70: i8, in_$i71: i32, in_$i73: i1, in_$i74: i32, in_$i75: i32, in_$i76: i1, in_$i14: i32, in_vslice_dummy_var_101: i32) returns (out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i24, out_$i22: i24, out_$i23: i24, out_$p24: ref, out_$p25: ref, out_$i26: i8, out_$i27: i64, out_$i28: i64, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i64, out_$i38: i64, out_$p39: ref, out_$i40: i8, out_$i41: i32, out_$i42: i64, out_$i43: i64, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i47: i64, out_$i48: i64, out_$p49: ref, out_$i50: i8, out_$i51: i32, out_$i52: i64, out_$i53: i64, out_$p54: ref, out_$i55: i8, out_$i56: i32, out_$i57: i64, out_$i58: i64, out_$p59: ref, out_$i60: i8, out_$i61: i32, out_$i62: i64, out_$i63: i64, out_$p64: ref, out_$i65: i8, out_$i66: i32, out_$i67: i64, out_$i68: i64, out_$p69: ref, out_$i70: i8, out_$i71: i32, out_$i73: i1, out_$i74: i32, out_$i75: i32, out_$i76: i1, out_$i14: i32, out_vslice_dummy_var_101: i32)
{

  entry:
    out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i73, out_$i74, out_$i75, out_$i76, out_$i14, out_vslice_dummy_var_101 := in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$p24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$p31, in_$p32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$p59, in_$i60, in_$i61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$p69, in_$i70, in_$i71, in_$i73, in_$i74, in_$i75, in_$i76, in_$i14, in_vslice_dummy_var_101;
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1575;

  $bb11:
    assume out_$i76 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i75;
    goto $bb11_dummy;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    out_$i76 := $ule.i32(out_$i75, 127);
    goto corral_source_split_1650;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i32(out_$i74, 8);
    call {:si_unique_call 426} {:cexpr "i"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_1649;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1648;

  $bb9:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    out_$i74 := out_$i14;
    goto $bb10;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    out_$i74 := 56;
    goto $bb10;

  $bb8:
    assume out_$i73 == 1;
    goto corral_source_split_1646;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i14, 0);
    goto corral_source_split_1644;

  $bb6:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} out_vslice_dummy_var_101 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32(in_$p2, .str.80, out_$p32, .str.79, 2288, out_$i14, out_$i36, out_$i41, out_$i46, out_$i51, out_$i56, out_$i61, out_$i66, out_$i71);
    goto corral_source_split_1642;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i8.i32(out_$i70);
    goto corral_source_split_1641;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i8($M.1, out_$p69);
    goto corral_source_split_1640;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref(in_$p13, $mul.ref(out_$i68, 1));
    goto corral_source_split_1639;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i64(out_$i67, 7);
    goto corral_source_split_1638;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i14);
    goto corral_source_split_1637;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    out_$i66 := $zext.i8.i32(out_$i65);
    goto corral_source_split_1636;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i8($M.1, out_$p64);
    goto corral_source_split_1635;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(in_$p13, $mul.ref(out_$i63, 1));
    goto corral_source_split_1634;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i64(out_$i62, 6);
    goto corral_source_split_1633;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i14);
    goto corral_source_split_1632;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i8.i32(out_$i60);
    goto corral_source_split_1631;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i8($M.1, out_$p59);
    goto corral_source_split_1630;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref(in_$p13, $mul.ref(out_$i58, 1));
    goto corral_source_split_1629;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i64(out_$i57, 5);
    goto corral_source_split_1628;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i32.i64(out_$i14);
    goto corral_source_split_1627;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i8.i32(out_$i55);
    goto corral_source_split_1626;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i8($M.1, out_$p54);
    goto corral_source_split_1625;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(in_$p13, $mul.ref(out_$i53, 1));
    goto corral_source_split_1624;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    out_$i53 := $add.i64(out_$i52, 4);
    goto corral_source_split_1623;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i32.i64(out_$i14);
    goto corral_source_split_1622;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i8.i32(out_$i50);
    goto corral_source_split_1621;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i8($M.1, out_$p49);
    goto corral_source_split_1620;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(in_$p13, $mul.ref(out_$i48, 1));
    goto corral_source_split_1619;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i64(out_$i47, 3);
    goto corral_source_split_1618;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i14);
    goto corral_source_split_1617;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i8.i32(out_$i45);
    goto corral_source_split_1616;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i8($M.1, out_$p44);
    goto corral_source_split_1615;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref(in_$p13, $mul.ref(out_$i43, 1));
    goto corral_source_split_1614;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i64(out_$i42, 2);
    goto corral_source_split_1613;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(out_$i14);
    goto corral_source_split_1612;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i8.i32(out_$i40);
    goto corral_source_split_1611;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i8($M.1, out_$p39);
    goto corral_source_split_1610;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(in_$p13, $mul.ref(out_$i38, 1));
    goto corral_source_split_1609;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i64(out_$i37, 1);
    goto corral_source_split_1608;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i14);
    goto corral_source_split_1607;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i8.i32(out_$i35);
    goto corral_source_split_1606;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i8($M.1, out_$p34);
    goto corral_source_split_1605;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(in_$p13, $mul.ref(out_$i33, 1));
    goto corral_source_split_1604;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i14);
    goto corral_source_split_1603;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_1602;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_1601;

  $bb5:
    assume out_$i30 == 1;
    goto corral_source_split_1600;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, 0);
    goto corral_source_split_1598;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} out_$i29 := ldv__builtin_expect(out_$i28, 0);
    call {:si_unique_call 424} {:cexpr "tmp"} boogie_si_record_i64(out_$i29);
    goto corral_source_split_1597;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    out_$i28 := $and.i64(out_$i27, 1);
    goto corral_source_split_1596;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i8.i64(out_$i26);
    goto corral_source_split_1595;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i8($M.8, out_$p25);
    goto corral_source_split_1594;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1593;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p24, 0);
    goto corral_source_split_1592;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1591;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, out_$p20, out_$i23);
    goto corral_source_split_1590;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    out_$i23 := $or.i24(out_$i22, 2288);
    goto corral_source_split_1589;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    out_$i22 := $and.i24(out_$i21, $sub.i24(0, 262144));
    goto corral_source_split_1588;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i24($M.7, out_$p20);
    goto corral_source_split_1587;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_1586;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1585;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p18, .str.80);
    goto corral_source_split_1584;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1583;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p17, .str.29);
    goto corral_source_split_1582;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1581;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p16, .str.79);
    goto corral_source_split_1580;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1579;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p15, .str.27);
    goto corral_source_split_1578;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1577;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i73, out_$i74, out_$i75, out_$i76, out_$i14, out_vslice_dummy_var_101 := skd_send_special_fitmsg_loop_$bb3(in_$p0, in_$p2, in_$p13, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i73, out_$i74, out_$i75, out_$i76, out_$i14, out_vslice_dummy_var_101);
    return;

  exit:
    return;
}



procedure skd_send_special_fitmsg_loop_$bb3(in_$p0: ref, in_$p2: ref, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i24, in_$i22: i24, in_$i23: i24, in_$p24: ref, in_$p25: ref, in_$i26: i8, in_$i27: i64, in_$i28: i64, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i64, in_$i38: i64, in_$p39: ref, in_$i40: i8, in_$i41: i32, in_$i42: i64, in_$i43: i64, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i47: i64, in_$i48: i64, in_$p49: ref, in_$i50: i8, in_$i51: i32, in_$i52: i64, in_$i53: i64, in_$p54: ref, in_$i55: i8, in_$i56: i32, in_$i57: i64, in_$i58: i64, in_$p59: ref, in_$i60: i8, in_$i61: i32, in_$i62: i64, in_$i63: i64, in_$p64: ref, in_$i65: i8, in_$i66: i32, in_$i67: i64, in_$i68: i64, in_$p69: ref, in_$i70: i8, in_$i71: i32, in_$i73: i1, in_$i74: i32, in_$i75: i32, in_$i76: i1, in_$i14: i32, in_vslice_dummy_var_101: i32) returns (out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i24, out_$i22: i24, out_$i23: i24, out_$p24: ref, out_$p25: ref, out_$i26: i8, out_$i27: i64, out_$i28: i64, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i64, out_$i38: i64, out_$p39: ref, out_$i40: i8, out_$i41: i32, out_$i42: i64, out_$i43: i64, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i47: i64, out_$i48: i64, out_$p49: ref, out_$i50: i8, out_$i51: i32, out_$i52: i64, out_$i53: i64, out_$p54: ref, out_$i55: i8, out_$i56: i32, out_$i57: i64, out_$i58: i64, out_$p59: ref, out_$i60: i8, out_$i61: i32, out_$i62: i64, out_$i63: i64, out_$p64: ref, out_$i65: i8, out_$i66: i32, out_$i67: i64, out_$i68: i64, out_$p69: ref, out_$i70: i8, out_$i71: i32, out_$i73: i1, out_$i74: i32, out_$i75: i32, out_$i76: i1, out_$i14: i32, out_vslice_dummy_var_101: i32);
  modifies $M.8, $M.7, $M.6, $M.5, $M.4, $M.3;



implementation skd_acquire_irq_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p4: ref, in_$i5: i32, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$p17: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p37: ref, in_$i36: i32, in_$i39: i32, in_$p44: ref, in_$p46: ref, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$p70: ref, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_114: i32) returns (out_$p4: ref, out_$i5: i32, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$p17: ref, out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p37: ref, out_$i36: i32, out_$i39: i32, out_$p44: ref, out_$p46: ref, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$p70: ref, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_114: i32)
{

  entry:
    out_$p4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p17, out_$p19, out_$p21, out_$p22, out_$p23, out_$i24, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p37, out_$i36, out_$i39, out_$p44, out_$p46, out_$p66, out_$p67, out_$i68, out_$p70, out_vslice_dummy_var_105, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_114 := in_$p4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$p17, in_$p19, in_$p21, in_$p22, in_$p23, in_$i24, in_$i26, in_$i27, in_$p28, in_$p29, in_$i30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p37, in_$i36, in_$i39, in_$p44, in_$p46, in_$p66, in_$p67, in_$i68, in_$p70, in_vslice_dummy_var_105, in_vslice_dummy_var_108, in_vslice_dummy_var_109, in_vslice_dummy_var_110, in_vslice_dummy_var_114;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    out_$p4 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(40, 1));
    goto corral_source_split_1861;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p46, 0);
    goto corral_source_split_1926;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(40, 1));
    goto corral_source_split_1925;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} out_vslice_dummy_var_110 := printk.ref.ref.i32(.str.281, out_$p44, out_$i39);
    goto corral_source_split_1924;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} out_$p44 := skd_name(in_$p0);
    goto corral_source_split_1923;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1922;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i26;
    goto $bb21;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i34;
    goto $bb21;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} out_vslice_dummy_var_109 := printk.ref.ref.i32(.str.279, out_$p37, out_$i34);
    goto corral_source_split_1920;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} out_$p37 := skd_name(in_$p0);
    goto corral_source_split_1919;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} pci_disable_msi(in_$p2);
    goto corral_source_split_1918;

  $bb19:
    assume out_$i35 == 1;
    goto corral_source_split_1917;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i34;
    assume true;
    goto $bb19;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_1913;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} out_$i34 := devm_request_irq(out_$p28, out_$i30, skd_isr, 0, out_$p32, out_$p33);
    call {:si_unique_call 491} {:cexpr "rc"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_1912;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_1911;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_1910;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(220, 1));
    goto corral_source_split_1909;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.1, out_$p29);
    goto corral_source_split_1908;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_1907;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1906;

  $bb17:
    assume out_$i27 == 1;
    goto corral_source_split_1905;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    out_$i27 := $sgt.i32(out_$i26, 0);
    goto corral_source_split_1870;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} out_$i26 := pci_enable_msi_range(in_$p2, 1, 1);
    call {:si_unique_call 480} {:cexpr "rc"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_1869;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} out_vslice_dummy_var_105 := snprintf.ref.i64.ref.ref.i32(out_$p22, 30, .str.278, .str.27, out_$i24);
    goto corral_source_split_1868;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.1, out_$p23);
    goto corral_source_split_1867;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(180, 1));
    goto corral_source_split_1866;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_1865;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(220, 1));
    goto corral_source_split_1864;

  $bb5:
    assume out_$i7 == 1;
    goto corral_source_split_1863;

  $bb4:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    out_$i7 := $slt.i32(out_$i5, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i6 := $slt.i32(out_$i5, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    out_$i5 := $load.i32($M.1, out_$p4);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb18:
    assume !(out_$i27 == 1);
    goto corral_source_split_1915;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p19, 1);
    goto corral_source_split_1901;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(40, 1));
    goto corral_source_split_1900;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} out_vslice_dummy_var_108 := printk.ref.ref.i32(.str.277, out_$p17, out_$i10);
    goto corral_source_split_1899;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} out_$p17 := skd_name(in_$p0);
    goto corral_source_split_1898;

  $bb13:
    assume !(out_$i11 == 1);
    goto corral_source_split_1897;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i10;
    assume true;
    goto $bb13;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i10, 0);
    goto corral_source_split_1874;

  SeqInstr_78:
    call {:si_unique_call 482} {:cexpr "rc"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_1873;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} out_$i10 := skd_acquire_msix(in_$p0);
    goto SeqInstr_77;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_1872;

  $bb6:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i5, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p70, 0);
    goto corral_source_split_1947;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(40, 1));
    goto corral_source_split_1946;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} out_vslice_dummy_var_114 := printk.ref.ref.i32.i32(.str.285, out_$p66, out_$i68, 1);
    goto corral_source_split_1945;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.1, out_$p67);
    goto corral_source_split_1944;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(40, 1));
    goto corral_source_split_1943;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} out_$p66 := skd_name(in_$p0);
    goto corral_source_split_1942;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i8 == 1);
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i9 == 1);
    goto $bb9;

  $bb3:
    assume out_$i6 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p17, out_$p19, out_$p21, out_$p22, out_$p23, out_$i24, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p37, out_$i36, out_$i39, out_$p44, out_$p46, out_$p66, out_$p67, out_$i68, out_$p70, out_vslice_dummy_var_105, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_114 := skd_acquire_irq_loop_$bb1(in_$p0, in_$p2, out_$p4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p17, out_$p19, out_$p21, out_$p22, out_$p23, out_$i24, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p37, out_$i36, out_$i39, out_$p44, out_$p46, out_$p66, out_$p67, out_$i68, out_$p70, out_vslice_dummy_var_105, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_114);
    return;

  exit:
    return;
}



procedure skd_acquire_irq_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p4: ref, in_$i5: i32, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$p17: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p37: ref, in_$i36: i32, in_$i39: i32, in_$p44: ref, in_$p46: ref, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$p70: ref, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_114: i32) returns (out_$p4: ref, out_$i5: i32, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$p17: ref, out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p37: ref, out_$i36: i32, out_$i39: i32, out_$p44: ref, out_$p46: ref, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$p70: ref, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_114: i32);
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, assertsPassed;



implementation skd_release_msix_loop_$bb6(in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p9: ref, in_$i10: i32, in_$p32: ref) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p9: ref, out_$i10: i32, out_$p32: ref)
{

  entry:
    out_$p11, out_$p12, out_$i13, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p9, out_$i10, out_$p32 := in_$p11, in_$p12, in_$i13, in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$p20, in_$p21, in_$p22, in_$p23, in_$i24, in_$p25, in_$p26, in_$p27, in_$i28, in_$p29, in_$i30, in_$i31, in_$p9, in_$i10, in_$p32;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2373;

  $bb11:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$p9, out_$i10 := out_$p16, out_$i28;
    goto $bb11_dummy;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    out_$p32 := out_$p16;
    assume true;
    goto $bb11;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    out_$i31 := $ult.i32(out_$i28, out_$i30);
    goto corral_source_split_2399;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.1, out_$p29);
    goto corral_source_split_2398;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p16, $mul.ref(0, 1008)), $mul.ref(44, 1));
    goto corral_source_split_2397;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i10, 1);
    call {:si_unique_call 591} {:cexpr "i"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_2396;

  $bb9:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} devm_free_irq(out_$p22, out_$i24, out_$p27);
    goto corral_source_split_2394;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_2393;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.1, out_$p25);
    goto corral_source_split_2392;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 56)), $mul.ref(16, 1));
    goto corral_source_split_2391;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.1, out_$p23);
    goto corral_source_split_2390;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 56)), $mul.ref(4, 1));
    goto corral_source_split_2389;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2388;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.1, out_$p20);
    goto corral_source_split_2387;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p16, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_2386;

  $bb8:
    assume out_$i19 == 1;
    goto corral_source_split_2385;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_2383;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.1, out_$p17);
    goto corral_source_split_2382;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 56)), $mul.ref(0, 1));
    goto corral_source_split_2381;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.1, out_$p15);
    goto corral_source_split_2380;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 56)), $mul.ref(16, 1));
    goto corral_source_split_2379;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    goto corral_source_split_2378;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i10);
    goto corral_source_split_2377;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.1, out_$p11);
    goto corral_source_split_2376;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p9, $mul.ref(0, 1008)), $mul.ref(48, 1));
    goto corral_source_split_2375;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$i13, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p9, out_$i10, out_$p32 := skd_release_msix_loop_$bb6(out_$p11, out_$p12, out_$i13, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p9, out_$i10, out_$p32);
    return;

  exit:
    return;
}



procedure skd_release_msix_loop_$bb6(in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p9: ref, in_$i10: i32, in_$p32: ref) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p9: ref, out_$i10: i32, out_$p32: ref);



implementation skd_recover_requests_loop_$bb50(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p111: ref, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$p118: ref, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i124: i8, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i24, in_$i134: i24, in_$i135: i24, in_$p136: ref, in_$p137: ref, in_$i138: i8, in_$i139: i64, in_$i140: i64, in_$i141: i64, in_$i142: i1, in_$p143: ref, in_$p144: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$i152: i24, in_$i153: i24, in_$i154: i24, in_$p155: ref, in_$p156: ref, in_$i157: i8, in_$i158: i64, in_$i159: i64, in_$i160: i64, in_$i161: i1, in_$p162: ref, in_$p163: ref, in_$p166: ref, in_$i167: i32, in_$i168: i32, in_$i169: i1, in_$i114: i32, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32) returns (out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$p118: ref, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i124: i8, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i24, out_$i134: i24, out_$i135: i24, out_$p136: ref, out_$p137: ref, out_$i138: i8, out_$i139: i64, out_$i140: i64, out_$i141: i64, out_$i142: i1, out_$p143: ref, out_$p144: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$i152: i24, out_$i153: i24, out_$i154: i24, out_$p155: ref, out_$p156: ref, out_$i157: i8, out_$i158: i64, out_$i159: i64, out_$i160: i64, out_$i161: i1, out_$p162: ref, out_$p163: ref, out_$p166: ref, out_$i167: i32, out_$i168: i32, out_$i169: i1, out_$i114: i32, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32)
{

  entry:
    out_$p115, out_$p116, out_$i117, out_$p118, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i135, out_$p136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$p143, out_$p144, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$i152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p166, out_$i167, out_$i168, out_$i169, out_$i114, out_vslice_dummy_var_159, out_vslice_dummy_var_160 := in_$p115, in_$p116, in_$i117, in_$p118, in_$p120, in_$i121, in_$i122, in_$p123, in_$i124, in_$i125, in_$i126, in_$p127, in_$p128, in_$p129, in_$p130, in_$p131, in_$p132, in_$i133, in_$i134, in_$i135, in_$p136, in_$p137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$p143, in_$p144, in_$p146, in_$p147, in_$p148, in_$p149, in_$p150, in_$p151, in_$i152, in_$i153, in_$i154, in_$p155, in_$p156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$p162, in_$p163, in_$p166, in_$i167, in_$i168, in_$i169, in_$i114, in_vslice_dummy_var_159, in_vslice_dummy_var_160;
    goto $bb50, exit;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_3464;

  $bb64:
    assume out_$i169 == 1;
    assume {:verifier.code 0} true;
    out_$i114 := out_$i167;
    goto $bb64_dummy;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    out_$i169 := $sgt.i32(out_$i168, out_$i167);
    goto corral_source_split_3544;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    out_$i168 := $load.i32($M.1, in_$p111);
    goto corral_source_split_3543;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i167 := $add.i32(out_$i114, 1);
    call {:si_unique_call 765} {:cexpr "i"} boogie_si_record_i32(out_$i167);
    goto corral_source_split_3542;

  $bb53:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p166, 5);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} skd_release_special(in_$p0, out_$p118);
    goto corral_source_split_3533;

  $bb57:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} out_vslice_dummy_var_159 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref(in_$p2, .str.49, out_$p144, .str.45, 3343, out_$p118);
    goto corral_source_split_3531;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    out_$p144 := $bitcast.ref.ref(out_$p143);
    goto corral_source_split_3530;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_3529;

  $bb56:
    assume out_$i142 == 1;
    goto corral_source_split_3528;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    out_$i142 := $ne.i64(out_$i141, 0);
    goto corral_source_split_3502;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} out_$i141 := ldv__builtin_expect(out_$i140, 0);
    call {:si_unique_call 759} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i141);
    goto corral_source_split_3501;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    out_$i140 := $and.i64(out_$i139, 1);
    goto corral_source_split_3500;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    out_$i139 := $zext.i8.i64(out_$i138);
    goto corral_source_split_3499;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i8($M.8, out_$p137);
    goto corral_source_split_3498;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3497;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p136, 0);
    goto corral_source_split_3496;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3495;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, out_$p132, out_$i135);
    goto corral_source_split_3494;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    out_$i135 := $or.i24(out_$i134, 3343);
    goto corral_source_split_3493;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    out_$i134 := $and.i24(out_$i133, $sub.i24(0, 262144));
    goto corral_source_split_3492;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i24($M.7, out_$p132);
    goto corral_source_split_3491;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    out_$p132 := $bitcast.ref.ref(out_$p131);
    goto corral_source_split_3490;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3489;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p130, .str.49);
    goto corral_source_split_3488;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3487;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p129, .str.29);
    goto corral_source_split_3486;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3485;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p128, .str.45);
    goto corral_source_split_3484;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3483;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p127, .str.27);
    goto corral_source_split_3482;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3481;

  $bb54:
    assume out_$i126 == 1;
    goto corral_source_split_3480;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    out_$i126 := $ne.i32(out_$i125, 0);
    goto corral_source_split_3478;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    out_$i125 := $zext.i8.i32(out_$i124);
    goto corral_source_split_3477;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i8($M.1, out_$p123);
    goto corral_source_split_3476;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(out_$p116, $mul.ref(out_$i117, 168)), $mul.ref(128, 1));
    goto corral_source_split_3475;

  $bb52:
    assume out_$i122 == 1;
    goto corral_source_split_3474;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 2);
    goto corral_source_split_3472;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i32($M.1, out_$p120);
    goto corral_source_split_3471;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref($add.ref(out_$p116, $mul.ref(out_$i117, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3470;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref(out_$p116, $mul.ref(out_$i117, 168));
    goto corral_source_split_3469;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    out_$i117 := $sext.i32.i64(out_$i114);
    goto corral_source_split_3468;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    out_$p116 := $load.ref($M.1, out_$p115);
    goto corral_source_split_3467;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(344, 1));
    goto corral_source_split_3466;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb62:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref($add.ref(out_$p116, $mul.ref(out_$i117, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3540;

  $bb61:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} out_vslice_dummy_var_160 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref(in_$p3, .str.50, out_$p163, .str.45, 3348, out_$p118);
    goto corral_source_split_3538;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    out_$p163 := $bitcast.ref.ref(out_$p162);
    goto corral_source_split_3537;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_3536;

  $bb60:
    assume out_$i161 == 1;
    goto corral_source_split_3535;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    out_$i161 := $ne.i64(out_$i160, 0);
    goto corral_source_split_3526;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} out_$i160 := ldv__builtin_expect(out_$i159, 0);
    call {:si_unique_call 761} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i160);
    goto corral_source_split_3525;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    out_$i159 := $and.i64(out_$i158, 1);
    goto corral_source_split_3524;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    out_$i158 := $zext.i8.i64(out_$i157);
    goto corral_source_split_3523;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    out_$i157 := $load.i8($M.8, out_$p156);
    goto corral_source_split_3522;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3521;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p155, 0);
    goto corral_source_split_3520;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3519;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, out_$p151, out_$i154);
    goto corral_source_split_3518;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    out_$i154 := $or.i24(out_$i153, 3348);
    goto corral_source_split_3517;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    out_$i153 := $and.i24(out_$i152, $sub.i24(0, 262144));
    goto corral_source_split_3516;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i24($M.7, out_$p151);
    goto corral_source_split_3515;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    out_$p151 := $bitcast.ref.ref(out_$p150);
    goto corral_source_split_3514;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3513;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p149, .str.50);
    goto corral_source_split_3512;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3511;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p148, .str.29);
    goto corral_source_split_3510;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3509;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p147, .str.45);
    goto corral_source_split_3508;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3507;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p146, .str.27);
    goto corral_source_split_3506;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3505;

  $bb55:
    assume !(out_$i126 == 1);
    goto corral_source_split_3504;

  $bb64_dummy:
    call {:si_unique_call 1} out_$p115, out_$p116, out_$i117, out_$p118, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i135, out_$p136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$p143, out_$p144, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$i152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p166, out_$i167, out_$i168, out_$i169, out_$i114, out_vslice_dummy_var_159, out_vslice_dummy_var_160 := skd_recover_requests_loop_$bb50(in_$p0, in_$p2, in_$p3, in_$p111, out_$p115, out_$p116, out_$i117, out_$p118, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i135, out_$p136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$p143, out_$p144, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$i152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p166, out_$i167, out_$i168, out_$i169, out_$i114, out_vslice_dummy_var_159, out_vslice_dummy_var_160);
    return;

  exit:
    return;
}



procedure skd_recover_requests_loop_$bb50(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p111: ref, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$p118: ref, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i124: i8, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i24, in_$i134: i24, in_$i135: i24, in_$p136: ref, in_$p137: ref, in_$i138: i8, in_$i139: i64, in_$i140: i64, in_$i141: i64, in_$i142: i1, in_$p143: ref, in_$p144: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$i152: i24, in_$i153: i24, in_$i154: i24, in_$p155: ref, in_$p156: ref, in_$i157: i8, in_$i158: i64, in_$i159: i64, in_$i160: i64, in_$i161: i1, in_$p162: ref, in_$p163: ref, in_$p166: ref, in_$i167: i32, in_$i168: i32, in_$i169: i1, in_$i114: i32, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32) returns (out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$p118: ref, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i124: i8, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i24, out_$i134: i24, out_$i135: i24, out_$p136: ref, out_$p137: ref, out_$i138: i8, out_$i139: i64, out_$i140: i64, out_$i141: i64, out_$i142: i1, out_$p143: ref, out_$p144: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$i152: i24, out_$i153: i24, out_$i154: i24, out_$p155: ref, out_$p156: ref, out_$i157: i8, out_$i158: i64, out_$i159: i64, out_$i160: i64, out_$i161: i1, out_$p162: ref, out_$p163: ref, out_$p166: ref, out_$i167: i32, out_$i168: i32, out_$i169: i1, out_$i114: i32, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32);
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation skd_recover_requests_loop_$bb33(in_$p0: ref, in_$p75: ref, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$p82: ref, in_$p83: ref, in_$i84: i32, in_$i85: i1, in_$p86: ref, in_$i87: i32, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i64, in_$i92: i64, in_$i93: i1, in_$p95: ref, in_$p96: ref, in_$i97: i32, in_$i98: i32, in_$p99: ref, in_$i100: i1, in_$i101: i64, in_$p103: ref, in_$p104: ref, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$i78: i32, in_vslice_dummy_var_158: i32) returns (out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$p82: ref, out_$p83: ref, out_$i84: i32, out_$i85: i1, out_$p86: ref, out_$i87: i32, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i64, out_$i92: i64, out_$i93: i1, out_$p95: ref, out_$p96: ref, out_$i97: i32, out_$i98: i32, out_$p99: ref, out_$i100: i1, out_$i101: i64, out_$p103: ref, out_$p104: ref, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$i78: i32, out_vslice_dummy_var_158: i32)
{

  entry:
    out_$p79, out_$p80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i78, out_vslice_dummy_var_158 := in_$p79, in_$p80, in_$i81, in_$p82, in_$p83, in_$i84, in_$i85, in_$p86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$p95, in_$p96, in_$i97, in_$i98, in_$p99, in_$i100, in_$i101, in_$p103, in_$p104, in_$i105, in_$i106, in_$i107, in_$i78, in_vslice_dummy_var_158;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_3407;

  $bb44:
    assume out_$i107 == 1;
    assume {:verifier.code 0} true;
    out_$i78 := out_$i105;
    goto $bb44_dummy;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    out_$i107 := $ult.i32(out_$i105, out_$i106);
    goto corral_source_split_3450;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i32($M.1, in_$p75);
    goto corral_source_split_3449;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    out_$i105 := $add.i32(out_$i78, 1);
    call {:si_unique_call 757} {:cexpr "i"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_3448;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p104, $0.ref);
    goto corral_source_split_3447;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p80, $mul.ref(out_$i81, 48)), $mul.ref(8, 1));
    goto corral_source_split_3446;

  $bb42:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p103, out_$p82);
    goto corral_source_split_3444;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(out_$p80, $mul.ref(out_$i101, 48)), $mul.ref(8, 1));
    goto corral_source_split_3443;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    goto corral_source_split_3442;

  $bb41:
    assume out_$i100 == 1;
    out_$i101 := $add.i64(out_$i81, $sub.i64(0, 1));
    goto corral_source_split_3441;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i100 := $sgt.i32(out_$i78, 0);
    goto corral_source_split_3439;

  $bb36:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p99, out_$i98);
    goto corral_source_split_3437;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(out_$p80, $mul.ref(out_$i81, 48)), $mul.ref(16, 1));
    goto corral_source_split_3436;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    out_$i98 := $add.i32(out_$i97, 1024);
    goto corral_source_split_3435;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i32($M.1, out_$p96);
    goto corral_source_split_3434;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p80, $mul.ref(out_$i81, 48)), $mul.ref(16, 1));
    goto corral_source_split_3433;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p95, 0);
    goto corral_source_split_3432;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p80, $mul.ref(out_$i81, 48)), $mul.ref(0, 1));
    goto corral_source_split_3431;

  $bb38:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} out_vslice_dummy_var_158 := printk.ref.ref.ref.ref.i32(.str.43, .str.48, .str.29, .str.45, 3319);
    goto corral_source_split_3429;

  $bb37:
    assume out_$i93 == 1;
    goto corral_source_split_3428;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i64(out_$i92, 0);
    goto corral_source_split_3426;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} out_$i92 := ldv__builtin_expect(out_$i91, 0);
    call {:si_unique_call 755} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i92);
    goto corral_source_split_3425;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    out_$i91 := $sext.i32.i64(out_$i90);
    goto corral_source_split_3424;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    out_$i90 := $zext.i1.i32(out_$i89);
    goto corral_source_split_3423;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i88, 0);
    goto corral_source_split_3422;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    out_$i88 := $and.i32(out_$i87, 1024);
    goto corral_source_split_3421;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.1, out_$p86);
    goto corral_source_split_3420;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p80, $mul.ref(out_$i81, 48)), $mul.ref(16, 1));
    goto corral_source_split_3419;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} skd_log_skmsg(in_$p0, out_$p82, .str.47);
    goto corral_source_split_3418;

  $bb35:
    assume out_$i85 == 1;
    goto corral_source_split_3417;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i84, 1);
    goto corral_source_split_3415;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i32($M.1, out_$p83);
    goto corral_source_split_3414;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p80, $mul.ref(out_$i81, 48)), $mul.ref(0, 1));
    goto corral_source_split_3413;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref(out_$p80, $mul.ref(out_$i81, 48));
    goto corral_source_split_3412;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    out_$i81 := $sext.i32.i64(out_$i78);
    goto corral_source_split_3411;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.1, out_$p79);
    goto corral_source_split_3410;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(312, 1));
    goto corral_source_split_3409;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb44_dummy:
    call {:si_unique_call 1} out_$p79, out_$p80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i78, out_vslice_dummy_var_158 := skd_recover_requests_loop_$bb33(in_$p0, in_$p75, out_$p79, out_$p80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i78, out_vslice_dummy_var_158);
    return;

  exit:
    return;
}



procedure skd_recover_requests_loop_$bb33(in_$p0: ref, in_$p75: ref, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$p82: ref, in_$p83: ref, in_$i84: i32, in_$i85: i1, in_$p86: ref, in_$i87: i32, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i64, in_$i92: i64, in_$i93: i1, in_$p95: ref, in_$p96: ref, in_$i97: i32, in_$i98: i32, in_$p99: ref, in_$i100: i1, in_$i101: i64, in_$p103: ref, in_$p104: ref, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$i78: i32, in_vslice_dummy_var_158: i32) returns (out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$p82: ref, out_$p83: ref, out_$i84: i32, out_$i85: i1, out_$p86: ref, out_$i87: i32, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i64, out_$i92: i64, out_$i93: i1, out_$p95: ref, out_$p96: ref, out_$i97: i32, out_$i98: i32, out_$p99: ref, out_$i100: i1, out_$i101: i64, out_$p103: ref, out_$p104: ref, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$i78: i32, out_vslice_dummy_var_158: i32);
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation skd_recover_requests_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p4: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i21: i64, in_$i22: i64, in_$i23: i1, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$i29: i32, in_$i30: i64, in_$i31: i64, in_$i32: i1, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i16, in_$i60: i32, in_$i61: i32, in_$i62: i16, in_$p63: ref, in_$i64: i1, in_$i65: i64, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i7: i32, in_vslice_dummy_var_156: i32, in_vslice_dummy_var_157: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i21: i64, out_$i22: i64, out_$i23: i1, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$i29: i32, out_$i30: i64, out_$i31: i64, out_$i32: i1, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i16, out_$i60: i32, out_$i61: i32, out_$i62: i16, out_$p63: ref, out_$i64: i1, out_$i65: i64, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i7: i32, out_vslice_dummy_var_156: i32, out_vslice_dummy_var_157: i32)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i7, out_vslice_dummy_var_156, out_vslice_dummy_var_157 := in_$p8, in_$p9, in_$i10, in_$p11, in_$p12, in_$i13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p34, in_$i35, in_$i36, in_$i37, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$i50, in_$i51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$i59, in_$i60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$p67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i7, in_vslice_dummy_var_156, in_vslice_dummy_var_157;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3296;

  $bb27:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i69;
    goto $bb27_dummy;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    out_$i71 := $ult.i32(out_$i69, out_$i70);
    goto corral_source_split_3393;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.1, in_$p4);
    goto corral_source_split_3392;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i32(out_$i7, 1);
    call {:si_unique_call 752} {:cexpr "i"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_3391;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p68, $0.ref);
    goto corral_source_split_3390;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 128)), $mul.ref(8, 1));
    goto corral_source_split_3389;

  $bb25:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p67, out_$p11);
    goto corral_source_split_3387;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i65, 128)), $mul.ref(8, 1));
    goto corral_source_split_3386;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    goto corral_source_split_3385;

  $bb24:
    assume out_$i64 == 1;
    out_$i65 := $add.i64(out_$i10, $sub.i64(0, 1));
    goto corral_source_split_3384;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i64 := $sgt.i32(out_$i7, 0);
    goto corral_source_split_3382;

  $bb7:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p63, out_$i62);
    goto corral_source_split_3380;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 128)), $mul.ref(16, 1));
    goto corral_source_split_3379;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    out_$i62 := $trunc.i32.i16(out_$i61);
    goto corral_source_split_3378;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i60, 1024);
    goto corral_source_split_3377;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i16.i32(out_$i59);
    goto corral_source_split_3376;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i16($M.1, out_$p58);
    goto corral_source_split_3375;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 128)), $mul.ref(16, 1));
    goto corral_source_split_3374;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p57, 0);
    goto corral_source_split_3373;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 128)), $mul.ref(0, 1));
    goto corral_source_split_3372;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p56, $0.ref);
    goto corral_source_split_3371;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 128)), $mul.ref(24, 1));
    goto corral_source_split_3370;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} skd_end_request(in_$p0, out_$p11, $sub.i32(0, 5));
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} skd_end_request(in_$p0, out_$p11, $sub.i32(0, 5));
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} blk_requeue_request(out_$p53, out_$p55);
    goto corral_source_split_3366;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.1, out_$p54);
    goto corral_source_split_3365;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 128)), $mul.ref(24, 1));
    goto corral_source_split_3364;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.1, out_$p52);
    goto corral_source_split_3363;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(152, 1));
    goto corral_source_split_3362;

  $bb19:
    assume out_$i51 == 1;
    goto corral_source_split_3361;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    out_$i51 := $ule.i64(out_$i50, 1);
    goto corral_source_split_3357;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p49);
    goto corral_source_split_3356;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.1, out_$p48);
    goto corral_source_split_3355;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p47, $mul.ref(0, 368)), $mul.ref(248, 1));
    goto corral_source_split_3354;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.1, out_$p46);
    goto corral_source_split_3353;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 128)), $mul.ref(24, 1));
    goto corral_source_split_3352;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p45, out_$p42);
    goto corral_source_split_3351;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p44, $mul.ref(0, 368)), $mul.ref(248, 1));
    goto corral_source_split_3350;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.1, out_$p43);
    goto corral_source_split_3349;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 128)), $mul.ref(24, 1));
    goto corral_source_split_3348;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref(out_$p41, $mul.ref(1, 1));
    goto corral_source_split_3347;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.1, out_$p40);
    goto corral_source_split_3346;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p39, $mul.ref(0, 368)), $mul.ref(248, 1));
    goto corral_source_split_3345;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.1, out_$p38);
    goto corral_source_split_3344;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 128)), $mul.ref(24, 1));
    goto corral_source_split_3343;

  $bb17:
    assume out_$i37 == 1;
    goto corral_source_split_3342;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(in_$i1, 0);
    goto corral_source_split_3340;

  $bb15:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} skd_postop_sg_list(in_$p0, out_$p11);
    goto corral_source_split_3338;

  $bb14:
    assume out_$i36 == 1;
    goto corral_source_split_3337;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_3335;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.1, out_$p34);
    goto corral_source_split_3334;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 128)), $mul.ref(56, 1));
    goto corral_source_split_3333;

  $bb12:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} out_vslice_dummy_var_157 := printk.ref.ref.ref.ref.i32(.str.43, .str.46, .str.29, .str.45, 3290);
    goto corral_source_split_3331;

  $bb11:
    assume out_$i32 == 1;
    goto corral_source_split_3330;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, 0);
    goto corral_source_split_3328;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} out_$i31 := ldv__builtin_expect(out_$i30, 0);
    call {:si_unique_call 746} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_3327;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i29);
    goto corral_source_split_3326;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i1.i32(out_$i28);
    goto corral_source_split_3325;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i64(out_$i27, 0);
    goto corral_source_split_3324;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_3323;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.1, out_$p25);
    goto corral_source_split_3322;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 128)), $mul.ref(24, 1));
    goto corral_source_split_3321;

  $bb9:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} out_vslice_dummy_var_156 := printk.ref.ref.ref.ref.i32(.str.43, .str.44, .str.29, .str.45, 3289);
    goto corral_source_split_3319;

  $bb8:
    assume out_$i23 == 1;
    goto corral_source_split_3318;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i64(out_$i22, 0);
    goto corral_source_split_3316;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} out_$i22 := ldv__builtin_expect(out_$i21, 0);
    call {:si_unique_call 743} {:cexpr "tmp"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_3315;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i20);
    goto corral_source_split_3314;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i1.i32(out_$i19);
    goto corral_source_split_3313;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i18, 0);
    goto corral_source_split_3312;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    out_$i18 := $and.i32(out_$i17, 1024);
    goto corral_source_split_3311;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i16.i32(out_$i16);
    goto corral_source_split_3310;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i16($M.1, out_$p15);
    goto corral_source_split_3309;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 128)), $mul.ref(16, 1));
    goto corral_source_split_3308;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} skd_log_skreq(in_$p0, out_$p11, .str.42);
    goto corral_source_split_3307;

  $bb6:
    assume out_$i14 == 1;
    goto corral_source_split_3306;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, 2);
    goto corral_source_split_3304;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.1, out_$p12);
    goto corral_source_split_3303;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 128)), $mul.ref(0, 1));
    goto corral_source_split_3302;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref(out_$p9, $mul.ref(out_$i10, 128));
    goto corral_source_split_3301;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3300;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.1, out_$p8);
    goto corral_source_split_3299;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(328, 1));
    goto corral_source_split_3298;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb20:
    assume !(out_$i51 == 1);
    goto corral_source_split_3368;

  $bb18:
    assume !(out_$i37 == 1);
    goto corral_source_split_3359;

  $bb27_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i7, out_vslice_dummy_var_156, out_vslice_dummy_var_157 := skd_recover_requests_loop_$bb4(in_$p0, in_$i1, in_$p4, out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i7, out_vslice_dummy_var_156, out_vslice_dummy_var_157);
    return;

  exit:
    return;
}



procedure skd_recover_requests_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p4: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i21: i64, in_$i22: i64, in_$i23: i1, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$i29: i32, in_$i30: i64, in_$i31: i64, in_$i32: i1, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i16, in_$i60: i32, in_$i61: i32, in_$i62: i16, in_$p63: ref, in_$i64: i1, in_$i65: i64, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i7: i32, in_vslice_dummy_var_156: i32, in_vslice_dummy_var_157: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i21: i64, out_$i22: i64, out_$i23: i1, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$i29: i32, out_$i30: i64, out_$i31: i64, out_$i32: i1, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i16, out_$i60: i32, out_$i61: i32, out_$i62: i16, out_$p63: ref, out_$i64: i1, out_$i65: i64, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i7: i32, out_vslice_dummy_var_156: i32, out_vslice_dummy_var_157: i32);
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation skd_release_special_loop_$bb4(in_$p1: ref, in_$p4: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i7: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i7: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i7 := in_$p9, in_$p10, in_$i11, in_$p12, in_$p13, in_$i14, in_$i15, in_$i16, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4005;

  $bb6:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i14;
    goto $bb6_dummy;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    out_$i16 := $ult.i32(out_$i14, out_$i15);
    goto corral_source_split_4015;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.1, in_$p4);
    goto corral_source_split_4014;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i32(out_$i7, 1);
    call {:si_unique_call 837} {:cexpr "i"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_4013;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} __free_pages(out_$p13, 0);
    goto corral_source_split_4012;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} out_$p13 := sg_page(out_$p12);
    goto corral_source_split_4011;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p10, $mul.ref(out_$i11, 40));
    goto corral_source_split_4010;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4009;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.1, out_$p9);
    goto corral_source_split_4008;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_4007;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i7 := skd_release_special_loop_$bb4(in_$p1, in_$p4, out_$p9, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i7);
    return;

  exit:
    return;
}



procedure skd_release_special_loop_$bb4(in_$p1: ref, in_$p4: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i7: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i7: i32);



implementation sg_page_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} sg_page_loop_$bb7();
    return;

  exit:
    return;
}



procedure sg_page_loop_$bb7();



implementation sg_page_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} sg_page_loop_$bb3();
    return;

  exit:
    return;
}



procedure sg_page_loop_$bb3();



implementation dma_unmap_sg_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_sg_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_sg_attrs_loop_$bb3();



implementation skd_acquire_msix_loop_$bb30(in_$p0: ref, in_$p80: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$i92: i64, in_$p94: ref, in_$p95: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i32, in_$i102: i64, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$i111: i32, in_$p112: ref, in_$i113: i32, in_$p118: ref, in_$p119: ref, in_$i120: i32, in_$i121: i32, in_$i122: i1, in_$i83: i32, in_vslice_dummy_var_178: i32) returns (out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$i92: i64, out_$p94: ref, out_$p95: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i32, out_$i102: i64, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$i111: i32, out_$p112: ref, out_$i113: i32, out_$p118: ref, out_$p119: ref, out_$i120: i32, out_$i121: i32, out_$i122: i1, out_$i83: i32, out_vslice_dummy_var_178: i32)
{

  entry:
    out_$p84, out_$p85, out_$i86, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$p94, out_$p95, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$p118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i83, out_vslice_dummy_var_178 := in_$p84, in_$p85, in_$i86, in_$p87, in_$p88, in_$p89, in_$p90, in_$i91, in_$i92, in_$p94, in_$p95, in_$p97, in_$p98, in_$p99, in_$p100, in_$i101, in_$i102, in_$p104, in_$p105, in_$p106, in_$p107, in_$p108, in_$i109, in_$i110, in_$i111, in_$p112, in_$i113, in_$p118, in_$p119, in_$i120, in_$i121, in_$i122, in_$i83, in_vslice_dummy_var_178;
    goto $bb30, exit;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_4473;

  $bb35:
    assume out_$i122 == 1;
    assume {:verifier.code 0} true;
    out_$i83 := out_$i120;
    goto $bb35_dummy;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    out_$i122 := $ult.i32(out_$i120, out_$i121);
    goto corral_source_split_4514;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i32($M.1, in_$p80);
    goto corral_source_split_4513;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i120 := $add.i32(out_$i83, 1);
    call {:si_unique_call 905} {:cexpr "i"} boogie_si_record_i32(out_$i120);
    goto corral_source_split_4512;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p119, in_$p0);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(out_$p85, $mul.ref(out_$i86, 56)), $mul.ref(16, 1));
    goto corral_source_split_4510;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p118, 1);
    goto corral_source_split_4509;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(out_$p85, $mul.ref(out_$i86, 56)), $mul.ref(0, 1));
    goto corral_source_split_4508;

  $bb33:
    assume !(out_$i110 == 1);
    goto corral_source_split_4507;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    out_$i111, out_$p112, out_$i113 := out_$i83, out_$p87, out_$i109;
    assume true;
    goto $bb33;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    out_$i110 := $ne.i32(out_$i109, 0);
    goto corral_source_split_4499;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} out_$i109 := devm_request_irq(out_$p99, out_$i101, out_$p105, 0, out_$p107, out_$p108);
    call {:si_unique_call 902} {:cexpr "rc"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_4498;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    out_$p108 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_4497;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    out_$p107 := $bitcast.ref.ref(out_$p106);
    goto corral_source_split_4496;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p85, $mul.ref(out_$i86, 56)), $mul.ref(24, 1));
    goto corral_source_split_4495;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.24, out_$p104);
    goto corral_source_split_4494;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(out_$i102, 16)), $mul.ref(8, 1));
    goto corral_source_split_4493;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    out_$i102 := $sext.i32.i64(out_$i83);
    goto corral_source_split_4492;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i32($M.1, out_$p100);
    goto corral_source_split_4491;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p85, $mul.ref(out_$i86, 56)), $mul.ref(4, 1));
    goto corral_source_split_4490;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(out_$p98, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4489;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.1, out_$p97);
    goto corral_source_split_4488;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_4487;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} out_vslice_dummy_var_178 := snprintf.ref.i64.ref.ref.i32.ref(out_$p89, 30, .str.290, .str.27, out_$i91, out_$p95);
    goto corral_source_split_4486;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.23, out_$p94);
    goto corral_source_split_4485;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref($add.ref(msix_entries, $mul.ref(0, 208)), $mul.ref(out_$i92, 16)), $mul.ref(0, 1));
    goto corral_source_split_4484;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    out_$i92 := $sext.i32.i64(out_$i83);
    goto corral_source_split_4483;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i32($M.1, out_$p90);
    goto corral_source_split_4482;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(180, 1));
    goto corral_source_split_4481;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    out_$p89 := $bitcast.ref.ref(out_$p88);
    goto corral_source_split_4480;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p85, $mul.ref(out_$i86, 56)), $mul.ref(24, 1));
    goto corral_source_split_4479;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref(out_$p85, $mul.ref(out_$i86, 56));
    goto corral_source_split_4478;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    out_$i86 := $sext.i32.i64(out_$i83);
    goto corral_source_split_4477;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.1, out_$p84);
    goto corral_source_split_4476;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(48, 1));
    goto corral_source_split_4475;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb35_dummy:
    call {:si_unique_call 1} out_$p84, out_$p85, out_$i86, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$p94, out_$p95, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$p118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i83, out_vslice_dummy_var_178 := skd_acquire_msix_loop_$bb30(in_$p0, in_$p80, out_$p84, out_$p85, out_$i86, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$p94, out_$p95, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$p118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i83, out_vslice_dummy_var_178);
    return;

  exit:
    return;
}



procedure skd_acquire_msix_loop_$bb30(in_$p0: ref, in_$p80: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$i92: i64, in_$p94: ref, in_$p95: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i32, in_$i102: i64, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$i111: i32, in_$p112: ref, in_$i113: i32, in_$p118: ref, in_$p119: ref, in_$i120: i32, in_$i121: i32, in_$i122: i1, in_$i83: i32, in_vslice_dummy_var_178: i32) returns (out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$i92: i64, out_$p94: ref, out_$p95: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i32, out_$i102: i64, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$i111: i32, out_$p112: ref, out_$i113: i32, out_$p118: ref, out_$p119: ref, out_$i120: i32, out_$i121: i32, out_$i122: i1, out_$i83: i32, out_vslice_dummy_var_178: i32);
  modifies $M.1;



implementation skd_acquire_msix_loop_$bb19(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p6: ref, in_$p30: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i38: i64, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$i43: i64, in_$p45: ref, in_$i46: i16, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i24, in_$i58: i24, in_$i59: i24, in_$p60: ref, in_$p61: ref, in_$i62: i8, in_$i63: i64, in_$i64: i64, in_$i65: i64, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$p74: ref, in_$i75: i32, in_$i77: i32, in_$i78: i32, in_$i79: i1, in_$i33: i32, in_vslice_dummy_var_177: i32) returns (out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i38: i64, out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$i43: i64, out_$p45: ref, out_$i46: i16, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i24, out_$i58: i24, out_$i59: i24, out_$p60: ref, out_$p61: ref, out_$i62: i8, out_$i63: i64, out_$i64: i64, out_$i65: i64, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$p74: ref, out_$i75: i32, out_$i77: i32, out_$i78: i32, out_$i79: i1, out_$i33: i32, out_vslice_dummy_var_177: i32)
{

  entry:
    out_$p34, out_$p35, out_$i36, out_$i38, out_$p40, out_$i41, out_$p42, out_$i43, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$p74, out_$i75, out_$i77, out_$i78, out_$i79, out_$i33, out_vslice_dummy_var_177 := in_$p34, in_$p35, in_$i36, in_$i38, in_$p40, in_$i41, in_$p42, in_$i43, in_$p45, in_$i46, in_$i47, in_$p48, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$i59, in_$p60, in_$p61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$p67, in_$p68, in_$p69, in_$p70, in_$p71, in_$p72, in_$i73, in_$p74, in_$i75, in_$i77, in_$i78, in_$i79, in_$i33, in_vslice_dummy_var_177;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4403;

  $bb24:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := out_$i77;
    goto $bb24_dummy;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    out_$i79 := $ult.i32(out_$i77, out_$i78);
    goto corral_source_split_4463;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.1, in_$p30);
    goto corral_source_split_4462;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i77 := $add.i32(out_$i33, 1);
    call {:si_unique_call 899} {:cexpr "i"} boogie_si_record_i32(out_$i77);
    goto corral_source_split_4461;

  $bb22:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} out_vslice_dummy_var_177 := __dynamic_pr_debug.ref.ref.ref.ref.i32.ref.ref.i32.i32.i32(in_$p1, .str.289, out_$p69, .str.288, 4026, out_$p67, out_$p71, out_$i33, out_$i73, out_$i75);
    goto corral_source_split_4459;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.1, out_$p74);
    goto corral_source_split_4458;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p35, $mul.ref(out_$i36, 56)), $mul.ref(8, 1));
    goto corral_source_split_4457;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.1, out_$p72);
    goto corral_source_split_4456;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p35, $mul.ref(out_$i36, 56)), $mul.ref(4, 1));
    goto corral_source_split_4455;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    out_$p71 := $bitcast.ref.ref(out_$p70);
    goto corral_source_split_4454;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_4453;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    out_$p69 := $bitcast.ref.ref(out_$p68);
    goto corral_source_split_4452;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_4451;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} out_$p67 := pci_name(in_$p4);
    goto corral_source_split_4450;

  $bb21:
    assume out_$i66 == 1;
    goto corral_source_split_4449;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i64(out_$i65, 0);
    goto corral_source_split_4447;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} out_$i65 := ldv__builtin_expect(out_$i64, 0);
    call {:si_unique_call 896} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i65);
    goto corral_source_split_4446;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    out_$i64 := $and.i64(out_$i63, 1);
    goto corral_source_split_4445;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i8.i64(out_$i62);
    goto corral_source_split_4444;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i8($M.8, out_$p61);
    goto corral_source_split_4443;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4442;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p60, 0);
    goto corral_source_split_4441;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4440;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, out_$p56, out_$i59);
    goto corral_source_split_4439;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    out_$i59 := $or.i24(out_$i58, 4026);
    goto corral_source_split_4438;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    out_$i58 := $and.i24(out_$i57, $sub.i24(0, 262144));
    goto corral_source_split_4437;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i24($M.7, out_$p56);
    goto corral_source_split_4436;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    out_$p56 := $bitcast.ref.ref(out_$p55);
    goto corral_source_split_4435;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4434;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p54, .str.289);
    goto corral_source_split_4433;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4432;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p53, .str.29);
    goto corral_source_split_4431;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4430;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p52, .str.288);
    goto corral_source_split_4429;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4428;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p51, .str.27);
    goto corral_source_split_4427;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4426;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p50, 0);
    goto corral_source_split_4425;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p35, $mul.ref(out_$i36, 56)), $mul.ref(0, 1));
    goto corral_source_split_4424;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p49, $0.ref);
    goto corral_source_split_4423;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p35, $mul.ref(out_$i36, 56)), $mul.ref(16, 1));
    goto corral_source_split_4422;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p48, out_$i47);
    goto corral_source_split_4421;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p35, $mul.ref(out_$i36, 56)), $mul.ref(8, 1));
    goto corral_source_split_4420;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i16.i32(out_$i46);
    goto corral_source_split_4419;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i16($M.1, out_$p45);
    goto corral_source_split_4418;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p6, $mul.ref(out_$i43, 8)), $mul.ref(4, 1));
    goto corral_source_split_4417;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    goto corral_source_split_4416;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i33);
    goto corral_source_split_4415;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p42, out_$i41);
    goto corral_source_split_4414;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p35, $mul.ref(out_$i36, 56)), $mul.ref(4, 1));
    goto corral_source_split_4413;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.1, out_$p40);
    goto corral_source_split_4412;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p6, $mul.ref(out_$i38, 8)), $mul.ref(0, 1));
    goto corral_source_split_4411;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    goto corral_source_split_4410;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i33);
    goto corral_source_split_4409;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    goto corral_source_split_4408;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i32.i64(out_$i33);
    goto corral_source_split_4407;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.1, out_$p34);
    goto corral_source_split_4406;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(48, 1));
    goto corral_source_split_4405;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p34, out_$p35, out_$i36, out_$i38, out_$p40, out_$i41, out_$p42, out_$i43, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$p74, out_$i75, out_$i77, out_$i78, out_$i79, out_$i33, out_vslice_dummy_var_177 := skd_acquire_msix_loop_$bb19(in_$p0, in_$p1, in_$p4, in_$p6, in_$p30, out_$p34, out_$p35, out_$i36, out_$i38, out_$p40, out_$i41, out_$p42, out_$i43, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$p74, out_$i75, out_$i77, out_$i78, out_$i79, out_$i33, out_vslice_dummy_var_177);
    return;

  exit:
    return;
}



procedure skd_acquire_msix_loop_$bb19(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p6: ref, in_$p30: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i38: i64, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$i43: i64, in_$p45: ref, in_$i46: i16, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i24, in_$i58: i24, in_$i59: i24, in_$p60: ref, in_$p61: ref, in_$i62: i8, in_$i63: i64, in_$i64: i64, in_$i65: i64, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$p74: ref, in_$i75: i32, in_$i77: i32, in_$i78: i32, in_$i79: i1, in_$i33: i32, in_vslice_dummy_var_177: i32) returns (out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i38: i64, out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$i43: i64, out_$p45: ref, out_$i46: i16, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i24, out_$i58: i24, out_$i59: i24, out_$p60: ref, out_$p61: ref, out_$i62: i8, out_$i63: i64, out_$i64: i64, out_$i65: i64, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$p74: ref, out_$i75: i32, out_$i77: i32, out_$i78: i32, out_$i79: i1, out_$i33: i32, out_vslice_dummy_var_177: i32);
  modifies $M.8, $M.7, $M.6, $M.5, $M.4, $M.3, $M.1;



implementation skd_free_skspcl_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$i31: i64, in_$p33: ref, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p24: ref, out_$p25: ref, out_$p27: ref, out_$p28: ref, out_$p30: ref, out_$i31: i64, out_$p33: ref, out_$p35: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i8: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$p20, out_$p21, out_$p22, out_$i23, out_$p24, out_$p25, out_$p27, out_$p28, out_$p30, out_$i31, out_$p33, out_$p35, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i8 := in_$p9, in_$p10, in_$i11, in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$i19, in_$p20, in_$p21, in_$p22, in_$i23, in_$p24, in_$p25, in_$p27, in_$p28, in_$p30, in_$i31, in_$p33, in_$p35, in_$p37, in_$p38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i8;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5007;

  $bb13:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i40;
    goto $bb13_dummy;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    out_$i42 := $ugt.i32(out_$i41, out_$i40);
    goto corral_source_split_5047;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.1, in_$p5);
    goto corral_source_split_5046;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i8, 1);
    call {:si_unique_call 1033} {:cexpr "i"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_5045;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} kfree(out_$p39);
    goto corral_source_split_5044;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(out_$p38);
    goto corral_source_split_5043;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.1, out_$p37);
    goto corral_source_split_5042;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 168)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_5041;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p35, 0);
    goto corral_source_split_5040;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 168)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_5039;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p33, $0.ref);
    goto corral_source_split_5038;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 168)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_5037;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} skd_free_sg_list(in_$p0, out_$p28, 256, out_$i31);
    goto corral_source_split_5036;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i64($M.1, out_$p30);
    goto corral_source_split_5035;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 168)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_5034;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.1, out_$p27);
    goto corral_source_split_5033;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 168)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_5032;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p25, 0);
    goto corral_source_split_5031;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 168)), $mul.ref(160, 1));
    goto corral_source_split_5030;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p24, $0.ref);
    goto corral_source_split_5029;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 168)), $mul.ref(152, 1));
    goto corral_source_split_5028;

  $bb11:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} pci_free_consistent(out_$p18, out_$i19, out_$p21, out_$i23);
    goto corral_source_split_5026;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i64($M.1, out_$p22);
    goto corral_source_split_5025;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 168)), $mul.ref(160, 1));
    goto corral_source_split_5024;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.1, out_$p20);
    goto corral_source_split_5023;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 168)), $mul.ref(152, 1));
    goto corral_source_split_5022;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i32.i64(128);
    goto corral_source_split_5021;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.1, out_$p17);
    goto corral_source_split_5020;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_5019;

  $bb10:
    assume out_$i16 == 1;
    goto corral_source_split_5018;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_5016;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_5015;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.1, out_$p13);
    goto corral_source_split_5014;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 168)), $mul.ref(152, 1));
    goto corral_source_split_5013;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    goto corral_source_split_5012;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i32.i64(out_$i8);
    goto corral_source_split_5011;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.1, out_$p9);
    goto corral_source_split_5010;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(344, 1));
    goto corral_source_split_5009;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$p20, out_$p21, out_$p22, out_$i23, out_$p24, out_$p25, out_$p27, out_$p28, out_$p30, out_$i31, out_$p33, out_$p35, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i8 := skd_free_skspcl_loop_$bb8(in_$p0, in_$p5, out_$p9, out_$p10, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$p20, out_$p21, out_$p22, out_$i23, out_$p24, out_$p25, out_$p27, out_$p28, out_$p30, out_$i31, out_$p33, out_$p35, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i8);
    return;

  exit:
    return;
}



procedure skd_free_skspcl_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$i31: i64, in_$p33: ref, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p24: ref, out_$p25: ref, out_$p27: ref, out_$p28: ref, out_$p30: ref, out_$i31: i64, out_$p33: ref, out_$p35: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i8: i32);
  modifies $M.1;



implementation skd_free_skreq_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i8: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$p13, out_$p14, out_$p15, out_$i16, out_$p17, out_$i18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i8 := in_$p9, in_$p10, in_$i11, in_$p13, in_$p14, in_$p15, in_$i16, in_$p17, in_$i18, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i8;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5072;

  $bb10:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i24;
    goto $bb10_dummy;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    out_$i26 := $ugt.i32(out_$i25, out_$i24);
    goto corral_source_split_5095;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.1, in_$p5);
    goto corral_source_split_5094;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i8, 1);
    call {:si_unique_call 1037} {:cexpr "i"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_5093;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} kfree(out_$p23);
    goto corral_source_split_5092;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_5091;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.1, out_$p21);
    goto corral_source_split_5090;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 128)), $mul.ref(48, 1));
    goto corral_source_split_5089;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p20, 0);
    goto corral_source_split_5088;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 128)), $mul.ref(72, 1));
    goto corral_source_split_5087;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p19, $0.ref);
    goto corral_source_split_5086;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 128)), $mul.ref(64, 1));
    goto corral_source_split_5085;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} skd_free_sg_list(in_$p0, out_$p14, out_$i16, out_$i18);
    goto corral_source_split_5084;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i64($M.1, out_$p17);
    goto corral_source_split_5083;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 128)), $mul.ref(72, 1));
    goto corral_source_split_5082;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.1, out_$p15);
    goto corral_source_split_5081;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(892, 1));
    goto corral_source_split_5080;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.1, out_$p13);
    goto corral_source_split_5079;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 128)), $mul.ref(64, 1));
    goto corral_source_split_5078;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    goto corral_source_split_5077;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i32.i64(out_$i8);
    goto corral_source_split_5076;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.1, out_$p9);
    goto corral_source_split_5075;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(328, 1));
    goto corral_source_split_5074;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$p13, out_$p14, out_$p15, out_$i16, out_$p17, out_$i18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i8 := skd_free_skreq_loop_$bb8(in_$p0, in_$p5, out_$p9, out_$p10, out_$i11, out_$p13, out_$p14, out_$p15, out_$i16, out_$p17, out_$i18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i8);
    return;

  exit:
    return;
}



procedure skd_free_skreq_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i8: i32);
  modifies $M.1;



implementation skd_free_skmsg_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i64, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i64, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i8: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i8 := in_$p9, in_$p10, in_$i11, in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$p22, in_$p23, in_$p24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p34, in_$p35, in_$i36, in_$p37, in_$p38, in_$i39, in_$i40, in_$i41, in_$i8;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5120;

  $bb13:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i39;
    goto $bb13_dummy;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    out_$i41 := $ugt.i32(out_$i40, out_$i39);
    goto corral_source_split_5162;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.1, in_$p5);
    goto corral_source_split_5161;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i8, 1);
    call {:si_unique_call 1040} {:cexpr "i"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_5160;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p38, 0);
    goto corral_source_split_5159;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 48)), $mul.ref(40, 1));
    goto corral_source_split_5158;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p37, $0.ref);
    goto corral_source_split_5157;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 48)), $mul.ref(32, 1));
    goto corral_source_split_5156;

  $bb11:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} pci_free_consistent(out_$p32, 512, out_$p34, out_$i36);
    goto corral_source_split_5154;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i64($M.1, out_$p35);
    goto corral_source_split_5153;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 48)), $mul.ref(40, 1));
    goto corral_source_split_5152;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.1, out_$p33);
    goto corral_source_split_5151;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 48)), $mul.ref(32, 1));
    goto corral_source_split_5150;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.1, out_$p31);
    goto corral_source_split_5149;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_5148;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p30, out_$i29);
    goto corral_source_split_5147;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 48)), $mul.ref(40, 1));
    goto corral_source_split_5146;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i64(out_$i25, out_$i28);
    goto corral_source_split_5145;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i32.i64(out_$i27);
    goto corral_source_split_5144;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.1, out_$p26);
    goto corral_source_split_5143;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 48)), $mul.ref(28, 1));
    goto corral_source_split_5142;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.1, out_$p24);
    goto corral_source_split_5141;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 48)), $mul.ref(40, 1));
    goto corral_source_split_5140;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p23, out_$p22);
    goto corral_source_split_5139;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 48)), $mul.ref(32, 1));
    goto corral_source_split_5138;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(out_$p18, $mul.ref(out_$i21, 1));
    goto corral_source_split_5137;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i32.i64(out_$i20);
    goto corral_source_split_5136;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.1, out_$p19);
    goto corral_source_split_5135;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 48)), $mul.ref(28, 1));
    goto corral_source_split_5134;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.1, out_$p17);
    goto corral_source_split_5133;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 48)), $mul.ref(32, 1));
    goto corral_source_split_5132;

  $bb10:
    assume out_$i16 == 1;
    goto corral_source_split_5131;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_5129;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_5128;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.1, out_$p13);
    goto corral_source_split_5127;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 48)), $mul.ref(32, 1));
    goto corral_source_split_5126;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    goto corral_source_split_5125;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i32.i64(out_$i8);
    goto corral_source_split_5124;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.1, out_$p9);
    goto corral_source_split_5123;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(312, 1));
    goto corral_source_split_5122;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i8 := skd_free_skmsg_loop_$bb8(in_$p0, in_$p5, out_$p9, out_$p10, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i8);
    return;

  exit:
    return;
}



procedure skd_free_skmsg_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i64, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i64, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i8: i32);
  modifies $M.1;



implementation arch_local_save_flags_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_save_flags_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_save_flags_loop_$bb3();



implementation skd_cons_skmsg_loop_$bb11(in_$p0: ref, in_$p39: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i32, in_$i64: i32, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i64, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i64, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$p87: ref, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i43: i32, in_$i92: i32, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8) returns (out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i32, out_$i64: i32, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i64, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i64, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$p87: ref, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i43: i32, out_$i92: i32, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8)
{

  entry:
    out_$p44, out_$p45, out_$i46, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i43, out_$i92, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12 := in_$p44, in_$p45, in_$i46, in_$i48, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$i58, in_$i59, in_$p60, in_$p61, in_$i62, in_$i63, in_$i64, in_$p65, in_$p66, in_$p67, in_$p68, in_$p69, in_$p70, in_$p71, in_$i72, in_$i73, in_$p74, in_$p75, in_$p76, in_$i77, in_$i78, in_$p79, in_$p80, in_$i81, in_$i82, in_$p83, in_$p84, in_$p85, in_$i86, in_$p87, in_$p88, in_$i89, in_$i90, in_$i91, in_$i43, in_$i92, in_cmdloc_dummy_var_11, in_cmdloc_dummy_var_12;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5812;

  $bb16:
    assume out_$i91 == 1;
    assume {:verifier.code 0} true;
    out_$i43 := out_$i89;
    goto $bb16_dummy;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    out_$i92 := out_$i89;
    assume true;
    goto $bb16;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    out_$i91 := $ugt.i32(out_$i90, out_$i89);
    goto corral_source_split_5873;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i32($M.1, in_$p39);
    goto corral_source_split_5872;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i32(out_$i43, 1);
    call {:si_unique_call 1173} {:cexpr "i"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_5871;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p88, out_$p87);
    goto corral_source_split_5870;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 48)), $mul.ref(8, 1));
    goto corral_source_split_5869;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref(out_$p45, $mul.ref(out_$i86, 48));
    goto corral_source_split_5868;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_11 := $M.1;
    call {:si_unique_call 1172} out_cmdloc_dummy_var_12 := $memset.i8(out_cmdloc_dummy_var_11, out_$p85, 0, 512, $zext.i32.i64(1), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_12;
    out_$i86 := $add.i64(out_$i46, 1);
    goto corral_source_split_5867;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.1, out_$p84);
    goto corral_source_split_5866;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 48)), $mul.ref(32, 1));
    goto corral_source_split_5865;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p83, out_$i82);
    goto corral_source_split_5864;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 48)), $mul.ref(40, 1));
    goto corral_source_split_5863;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    out_$i82 := $and.i64(out_$i81, $sub.i64(0, 64));
    goto corral_source_split_5862;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i64($M.1, out_$p80);
    goto corral_source_split_5861;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 48)), $mul.ref(40, 1));
    goto corral_source_split_5860;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p79, out_$i78);
    goto corral_source_split_5859;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 48)), $mul.ref(40, 1));
    goto corral_source_split_5858;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    out_$i78 := $add.i64(out_$i77, 63);
    goto corral_source_split_5857;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i64($M.1, out_$p76);
    goto corral_source_split_5856;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 48)), $mul.ref(40, 1));
    goto corral_source_split_5855;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p75, out_$p74);
    goto corral_source_split_5854;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 48)), $mul.ref(32, 1));
    goto corral_source_split_5853;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    out_$p74 := $i2p.i64.ref(out_$i73);
    goto corral_source_split_5852;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    out_$i73 := $and.i64(out_$i72, $sub.i64(0, 64));
    goto corral_source_split_5851;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(out_$p71);
    goto corral_source_split_5850;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.1, out_$p70);
    goto corral_source_split_5849;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 48)), $mul.ref(32, 1));
    goto corral_source_split_5848;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p69, out_$p68);
    goto corral_source_split_5847;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 48)), $mul.ref(32, 1));
    goto corral_source_split_5846;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref(out_$p67, $mul.ref(63, 1));
    goto corral_source_split_5845;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.1, out_$p66);
    goto corral_source_split_5844;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 48)), $mul.ref(32, 1));
    goto corral_source_split_5843;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p65, out_$i64);
    goto corral_source_split_5842;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 48)), $mul.ref(28, 1));
    goto corral_source_split_5841;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    out_$i64 := $and.i32(out_$i63, 63);
    goto corral_source_split_5840;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    out_$i63 := $trunc.i64.i32(out_$i62);
    goto corral_source_split_5839;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(out_$p61);
    goto corral_source_split_5838;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.1, out_$p60);
    goto corral_source_split_5837;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 48)), $mul.ref(32, 1));
    goto corral_source_split_5836;

  $bb14:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i64(out_$i58, 0);
    goto corral_source_split_5832;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    out_$i58 := $p2i.ref.i64(out_$p57);
    goto corral_source_split_5831;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.1, out_$p56);
    goto corral_source_split_5830;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 48)), $mul.ref(32, 1));
    goto corral_source_split_5829;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p55, out_$p54);
    goto corral_source_split_5828;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 48)), $mul.ref(32, 1));
    goto corral_source_split_5827;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} out_$p54 := pci_alloc_consistent(out_$p52, 576, out_$p53);
    goto corral_source_split_5826;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 48)), $mul.ref(40, 1));
    goto corral_source_split_5825;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.1, out_$p51);
    goto corral_source_split_5824;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_5823;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p50, 0);
    goto corral_source_split_5822;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 48)), $mul.ref(0, 1));
    goto corral_source_split_5821;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p49, out_$i48);
    goto corral_source_split_5820;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 48)), $mul.ref(16, 1));
    goto corral_source_split_5819;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i43, 768);
    goto corral_source_split_5818;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    goto corral_source_split_5817;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i32.i64(out_$i43);
    goto corral_source_split_5816;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.1, out_$p44);
    goto corral_source_split_5815;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(312, 1));
    goto corral_source_split_5814;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p44, out_$p45, out_$i46, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i43, out_$i92, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12 := skd_cons_skmsg_loop_$bb11(in_$p0, in_$p39, out_$p44, out_$p45, out_$i46, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i43, out_$i92, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12);
    return;

  exit:
    return;
}



procedure skd_cons_skmsg_loop_$bb11(in_$p0: ref, in_$p39: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i32, in_$i64: i32, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i64, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i64, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$p87: ref, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i43: i32, in_$i92: i32, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8) returns (out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i32, out_$i64: i32, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i64, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i64, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$p87: ref, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i43: i32, out_$i92: i32, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8);
  modifies $M.1;



implementation skd_cons_skreq_loop_$bb14(in_$p0: ref, in_$p65: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i74: i16, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$i79: i64, in_$i80: i64, in_$p81: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$p92: ref, in_$i93: i32, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$i100: i1, in_$i101: i64, in_$p102: ref, in_$p103: ref, in_$i104: i32, in_$i105: i32, in_$i106: i1, in_$i69: i32, in_$i107: i32) returns (out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i74: i16, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$i79: i64, out_$i80: i64, out_$p81: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$p92: ref, out_$i93: i32, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$i100: i1, out_$i101: i64, out_$p102: ref, out_$p103: ref, out_$i104: i32, out_$i105: i32, out_$i106: i1, out_$i69: i32, out_$i107: i32)
{

  entry:
    out_$p70, out_$p71, out_$i72, out_$i74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p81, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$p90, out_$i91, out_$p92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$p102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i69, out_$i107 := in_$p70, in_$p71, in_$i72, in_$i74, in_$p75, in_$p76, in_$p77, in_$i78, in_$i79, in_$i80, in_$p81, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$p88, in_$p89, in_$p90, in_$i91, in_$p92, in_$i93, in_$p94, in_$p95, in_$p96, in_$p97, in_$p98, in_$i99, in_$i100, in_$i101, in_$p102, in_$p103, in_$i104, in_$i105, in_$i106, in_$i69, in_$i107;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5981;

  $bb22:
    assume out_$i106 == 1;
    assume {:verifier.code 0} true;
    out_$i69 := out_$i104;
    goto $bb22_dummy;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    out_$i107 := out_$i104;
    assume true;
    goto $bb22;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    out_$i106 := $ugt.i32(out_$i105, out_$i104);
    goto corral_source_split_6031;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i32($M.1, in_$p65);
    goto corral_source_split_6030;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    out_$i104 := $add.i32(out_$i69, 1);
    call {:si_unique_call 1186} {:cexpr "i"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_6029;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p103, out_$p102);
    goto corral_source_split_6028;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 128)), $mul.ref(8, 1));
    goto corral_source_split_6027;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref(out_$p71, $mul.ref(out_$i101, 128));
    goto corral_source_split_6026;

  $bb21:
    out_$i101 := $add.i64(out_$i72, 1);
    goto corral_source_split_6025;

  $bb20:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i64(out_$i99, 0);
    goto corral_source_split_6021;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    out_$i99 := $p2i.ref.i64(out_$p98);
    goto corral_source_split_6020;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.1, out_$p97);
    goto corral_source_split_6019;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 128)), $mul.ref(64, 1));
    goto corral_source_split_6018;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p96, out_$p95);
    goto corral_source_split_6017;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 128)), $mul.ref(64, 1));
    goto corral_source_split_6016;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} out_$p95 := skd_cons_sg_list(in_$p0, out_$i93, out_$p94);
    goto corral_source_split_6015;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 128)), $mul.ref(72, 1));
    goto corral_source_split_6014;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.1, out_$p92);
    goto corral_source_split_6013;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(892, 1));
    goto corral_source_split_6012;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} sg_init_table(out_$p89, out_$i91);
    goto corral_source_split_6011;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i32($M.1, out_$p90);
    goto corral_source_split_6010;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(892, 1));
    goto corral_source_split_6009;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    out_$p89 := $load.ref($M.1, out_$p88);
    goto corral_source_split_6008;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 128)), $mul.ref(48, 1));
    goto corral_source_split_6007;

  $bb17:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i64(out_$i86, 0);
    goto corral_source_split_6003;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    out_$i86 := $p2i.ref.i64(out_$p85);
    goto corral_source_split_6002;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.1, out_$p84);
    goto corral_source_split_6001;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 128)), $mul.ref(48, 1));
    goto corral_source_split_6000;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p83, out_$p81);
    goto corral_source_split_5999;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 128)), $mul.ref(48, 1));
    goto corral_source_split_5998;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    goto corral_source_split_5997;

  SeqInstr_180:
    goto corral_source_split_5996;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} out_$p81 := kzalloc(out_$i80, 208);
    goto SeqInstr_179;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    out_$i80 := $mul.i64(out_$i79, 40);
    goto corral_source_split_5995;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    out_$i79 := $sext.i32.i64(out_$i78);
    goto corral_source_split_5994;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.1, out_$p77);
    goto corral_source_split_5993;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(892, 1));
    goto corral_source_split_5992;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p76, 0);
    goto corral_source_split_5991;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 128)), $mul.ref(0, 1));
    goto corral_source_split_5990;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p75, out_$i74);
    goto corral_source_split_5989;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 128)), $mul.ref(16, 1));
    goto corral_source_split_5988;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    out_$i74 := $trunc.i32.i16(out_$i69);
    goto corral_source_split_5987;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    goto corral_source_split_5986;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i32.i64(out_$i69);
    goto corral_source_split_5985;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.1, out_$p70);
    goto corral_source_split_5984;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(328, 1));
    goto corral_source_split_5983;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p70, out_$p71, out_$i72, out_$i74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p81, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$p90, out_$i91, out_$p92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$p102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i69, out_$i107 := skd_cons_skreq_loop_$bb14(in_$p0, in_$p65, out_$p70, out_$p71, out_$i72, out_$i74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p81, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$p90, out_$i91, out_$p92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$p102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i69, out_$i107);
    return;

  exit:
    return;
}



procedure skd_cons_skreq_loop_$bb14(in_$p0: ref, in_$p65: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i74: i16, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$i79: i64, in_$i80: i64, in_$p81: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$p92: ref, in_$i93: i32, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$i100: i1, in_$i101: i64, in_$p102: ref, in_$p103: ref, in_$i104: i32, in_$i105: i32, in_$i106: i1, in_$i69: i32, in_$i107: i32) returns (out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i74: i16, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$i79: i64, out_$i80: i64, out_$p81: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$p92: ref, out_$i93: i32, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$i100: i1, out_$i101: i64, out_$p102: ref, out_$p103: ref, out_$i104: i32, out_$i105: i32, out_$i106: i1, out_$i69: i32, out_$i107: i32);
  modifies $M.1, assertsPassed;



implementation skd_cons_skspcl_loop_$bb11(in_$p0: ref, in_$p38: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i47: i16, in_$i48: i32, in_$i49: i32, in_$i50: i16, in_$p52: ref, in_$p54: ref, in_$i55: i64, in_$p57: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$i69: i1, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p73: ref, in_$p76: ref, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p83: ref, in_$p84: ref, in_$p86: ref, in_$p88: ref, in_$p89: ref, in_$i90: i64, in_$i91: i1, in_$i92: i32, in_$i93: i32, in_$i94: i1, in_$i42: i32, in_$i95: i32, in_cmdloc_dummy_var_13: [ref]i8, in_cmdloc_dummy_var_14: [ref]i8) returns (out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i47: i16, out_$i48: i32, out_$i49: i32, out_$i50: i16, out_$p52: ref, out_$p54: ref, out_$i55: i64, out_$p57: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$i69: i1, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p73: ref, out_$p76: ref, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p83: ref, out_$p84: ref, out_$p86: ref, out_$p88: ref, out_$p89: ref, out_$i90: i64, out_$i91: i1, out_$i92: i32, out_$i93: i32, out_$i94: i1, out_$i42: i32, out_$i95: i32, out_cmdloc_dummy_var_13: [ref]i8, out_cmdloc_dummy_var_14: [ref]i8)
{

  entry:
    out_$p43, out_$p44, out_$i45, out_$i47, out_$i48, out_$i49, out_$i50, out_$p52, out_$p54, out_$i55, out_$p57, out_$p59, out_$p60, out_$p61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i72, out_$p73, out_$p76, out_$p78, out_$p79, out_$i80, out_$i81, out_$p83, out_$p84, out_$p86, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i42, out_$i95, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14 := in_$p43, in_$p44, in_$i45, in_$i47, in_$i48, in_$i49, in_$i50, in_$p52, in_$p54, in_$i55, in_$p57, in_$p59, in_$p60, in_$p61, in_$i62, in_$p63, in_$p64, in_$p65, in_$p66, in_$p67, in_$i68, in_$i69, in_$p70, in_$p71, in_$i72, in_$p73, in_$p76, in_$p78, in_$p79, in_$i80, in_$i81, in_$p83, in_$p84, in_$p86, in_$p88, in_$p89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i42, in_$i95, in_cmdloc_dummy_var_13, in_cmdloc_dummy_var_14;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6103;

  $bb22:
    assume out_$i94 == 1;
    assume {:verifier.code 0} true;
    out_$i42 := out_$i92;
    goto $bb22_dummy;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    out_$i95 := out_$i92;
    assume true;
    goto $bb22;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    out_$i94 := $ugt.i32(out_$i93, out_$i92);
    goto corral_source_split_6163;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.1, in_$p38);
    goto corral_source_split_6162;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i92 := $add.i32(out_$i42, 1);
    call {:si_unique_call 1196} {:cexpr "i"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_6161;

  $bb20:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i64(out_$i90, 0);
    goto corral_source_split_6157;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    out_$i90 := $p2i.ref.i64(out_$p89);
    goto corral_source_split_6156;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    out_$p89 := $load.ref($M.1, out_$p88);
    goto corral_source_split_6155;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref($add.ref(out_$p44, $mul.ref(out_$i45, 168)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_6154;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p86, out_$p84);
    goto corral_source_split_6153;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref($add.ref(out_$p44, $mul.ref(out_$i45, 168)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_6152;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} out_$p84 := skd_cons_sg_list(in_$p0, 256, out_$p83);
    goto corral_source_split_6151;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref($add.ref(out_$p44, $mul.ref(out_$i45, 168)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_6150;

  $bb17:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i64(out_$i80, 0);
    goto corral_source_split_6146;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    out_$i80 := $p2i.ref.i64(out_$p79);
    goto corral_source_split_6145;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.1, out_$p78);
    goto corral_source_split_6144;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref(out_$p44, $mul.ref(out_$i45, 168)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_6143;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p76, out_$p73);
    goto corral_source_split_6142;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref($add.ref(out_$p44, $mul.ref(out_$i45, 168)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_6141;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    goto corral_source_split_6140;

  SeqInstr_186:
    goto corral_source_split_6139;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} out_$p73 := kzalloc(10240, 208);
    goto SeqInstr_185;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_13 := $M.1;
    call {:si_unique_call 1193} out_cmdloc_dummy_var_14 := $memset.i8(out_cmdloc_dummy_var_13, out_$p71, 0, out_$i72, $zext.i32.i64(1), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_14;
    goto corral_source_split_6138;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i32.i64(128);
    goto corral_source_split_6137;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.1, out_$p70);
    goto corral_source_split_6136;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p44, $mul.ref(out_$i45, 168)), $mul.ref(152, 1));
    goto corral_source_split_6135;

  $bb14:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i64(out_$i68, 0);
    goto corral_source_split_6131;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    out_$i68 := $p2i.ref.i64(out_$p67);
    goto corral_source_split_6130;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.1, out_$p66);
    goto corral_source_split_6129;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p44, $mul.ref(out_$i45, 168)), $mul.ref(152, 1));
    goto corral_source_split_6128;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p65, out_$p64);
    goto corral_source_split_6127;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p44, $mul.ref(out_$i45, 168)), $mul.ref(152, 1));
    goto corral_source_split_6126;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} out_$p64 := pci_alloc_consistent(out_$p61, out_$i62, out_$p63);
    goto corral_source_split_6125;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p44, $mul.ref(out_$i45, 168)), $mul.ref(160, 1));
    goto corral_source_split_6124;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i32.i64(128);
    goto corral_source_split_6123;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.1, out_$p60);
    goto corral_source_split_6122;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(56, 1));
    goto corral_source_split_6121;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p59, out_$p57);
    goto corral_source_split_6120;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref(out_$p44, $mul.ref(out_$i45, 168)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_6119;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p44, $mul.ref(out_$i55, 168)), $mul.ref(0, 1));
    goto corral_source_split_6118;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    goto corral_source_split_6117;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p54, 0);
    out_$i55 := $add.i64(out_$i45, 1);
    goto corral_source_split_6116;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref(out_$p44, $mul.ref(out_$i45, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6115;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p52, out_$i50);
    goto corral_source_split_6114;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref(out_$p44, $mul.ref(out_$i45, 168)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_6113;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    out_$i50 := $trunc.i32.i16(out_$i49);
    goto corral_source_split_6112;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i48, 512);
    goto corral_source_split_6111;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i16.i32(out_$i47);
    goto corral_source_split_6110;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    out_$i47 := $trunc.i32.i16(out_$i42);
    goto corral_source_split_6109;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    goto corral_source_split_6108;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i32.i64(out_$i42);
    goto corral_source_split_6107;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.1, out_$p43);
    goto corral_source_split_6106;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(344, 1));
    goto corral_source_split_6105;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p43, out_$p44, out_$i45, out_$i47, out_$i48, out_$i49, out_$i50, out_$p52, out_$p54, out_$i55, out_$p57, out_$p59, out_$p60, out_$p61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i72, out_$p73, out_$p76, out_$p78, out_$p79, out_$i80, out_$i81, out_$p83, out_$p84, out_$p86, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i42, out_$i95, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14 := skd_cons_skspcl_loop_$bb11(in_$p0, in_$p38, out_$p43, out_$p44, out_$i45, out_$i47, out_$i48, out_$i49, out_$i50, out_$p52, out_$p54, out_$i55, out_$p57, out_$p59, out_$p60, out_$p61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i72, out_$p73, out_$p76, out_$p78, out_$p79, out_$i80, out_$i81, out_$p83, out_$p84, out_$p86, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i42, out_$i95, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14);
    return;

  exit:
    return;
}



procedure skd_cons_skspcl_loop_$bb11(in_$p0: ref, in_$p38: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i47: i16, in_$i48: i32, in_$i49: i32, in_$i50: i16, in_$p52: ref, in_$p54: ref, in_$i55: i64, in_$p57: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$i69: i1, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p73: ref, in_$p76: ref, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p83: ref, in_$p84: ref, in_$p86: ref, in_$p88: ref, in_$p89: ref, in_$i90: i64, in_$i91: i1, in_$i92: i32, in_$i93: i32, in_$i94: i1, in_$i42: i32, in_$i95: i32, in_cmdloc_dummy_var_13: [ref]i8, in_cmdloc_dummy_var_14: [ref]i8) returns (out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i47: i16, out_$i48: i32, out_$i49: i32, out_$i50: i16, out_$p52: ref, out_$p54: ref, out_$i55: i64, out_$p57: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$i69: i1, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p73: ref, out_$p76: ref, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p83: ref, out_$p84: ref, out_$p86: ref, out_$p88: ref, out_$p89: ref, out_$i90: i64, out_$i91: i1, out_$i92: i32, out_$i93: i32, out_$i94: i1, out_$i42: i32, out_$i95: i32, out_cmdloc_dummy_var_13: [ref]i8, out_cmdloc_dummy_var_14: [ref]i8);
  modifies $M.1, assertsPassed;



implementation skd_cons_sg_list_loop_$bb6(in_$p8: ref, in_$i11: i64, in_$i14: i32, in_$i18: i32, in_$i19: i64, in_$i20: i64, in_$i21: i64, in_$i22: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$i17: i32, in_$i27: i32) returns (out_$i18: i32, out_$i19: i64, out_$i20: i64, out_$i21: i64, out_$i22: i64, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$i17: i32, out_$i27: i32)
{

  entry:
    out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i17, out_$i27 := in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$p24, in_$i25, in_$i26, in_$i17, in_$i27;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6385;

  $bb8:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := out_$i25;
    goto $bb8_dummy;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i25;
    assume true;
    goto $bb8;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    out_$i26 := $ugt.i32(in_$i14, out_$i25);
    goto corral_source_split_6396;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i17, 1);
    call {:si_unique_call 1239} {:cexpr "i"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_6395;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p24, out_$i21);
    goto corral_source_split_6394;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p8, $mul.ref(out_$i22, 32)), $mul.ref(24, 1));
    goto corral_source_split_6393;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    goto corral_source_split_6392;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i32.i64(out_$i17);
    goto corral_source_split_6391;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i64(in_$i11, out_$i20);
    goto corral_source_split_6390;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    out_$i20 := $mul.i64(out_$i19, 32);
    call {:si_unique_call 1238} {:cexpr "ndp_off"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_6389;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i32.i64(out_$i18);
    goto corral_source_split_6388;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i17, 1);
    goto corral_source_split_6387;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    call {:si_unique_call 1} out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i17, out_$i27 := skd_cons_sg_list_loop_$bb6(in_$p8, in_$i11, in_$i14, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i17, out_$i27);
    return;

  exit:
    return;
}



procedure skd_cons_sg_list_loop_$bb6(in_$p8: ref, in_$i11: i64, in_$i14: i32, in_$i18: i32, in_$i19: i64, in_$i20: i64, in_$i21: i64, in_$i22: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$i17: i32, in_$i27: i32) returns (out_$i18: i32, out_$i19: i64, out_$i20: i64, out_$i21: i64, out_$i22: i64, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$i17: i32, out_$i27: i32);
  modifies $M.1;



implementation skd_sg_io_get_and_check_args_loop_$bb111(in_$p406: ref, in_$p411: ref, in_$p412: ref, in_$p413: ref, in_$i414: i64, in_$p415: ref, in_$i416: i64, in_$p418: ref, in_$i419: i64, in_$i420: i1, in_$i421: i8, in_$i422: i1, in_$i423: i32, in_$i424: i64, in_$i425: i64, in_$i426: i1, in_$p427: ref, in_$i452: i32, in_$p453: ref, in_$i454: i32, in_$i455: i1, in_$p409: ref, in_$i410: i32) returns (out_$p411: ref, out_$p412: ref, out_$p413: ref, out_$i414: i64, out_$p415: ref, out_$i416: i64, out_$p418: ref, out_$i419: i64, out_$i420: i1, out_$i421: i8, out_$i422: i1, out_$i423: i32, out_$i424: i64, out_$i425: i64, out_$i426: i1, out_$p427: ref, out_$i452: i32, out_$p453: ref, out_$i454: i32, out_$i455: i1, out_$p409: ref, out_$i410: i32)
{

  entry:
    out_$p411, out_$p412, out_$p413, out_$i414, out_$p415, out_$i416, out_$p418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$p427, out_$i452, out_$p453, out_$i454, out_$i455, out_$p409, out_$i410 := in_$p411, in_$p412, in_$p413, in_$i414, in_$p415, in_$i416, in_$p418, in_$i419, in_$i420, in_$i421, in_$i422, in_$i423, in_$i424, in_$i425, in_$i426, in_$p427, in_$i452, in_$p453, in_$i454, in_$i455, in_$p409, in_$i410;
    goto $bb111, exit;

  $bb111:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7309;

  $bb122:
    assume out_$i455 == 1;
    assume {:verifier.code 0} true;
    out_$p409, out_$i410 := out_$p453, out_$i452;
    goto $bb122_dummy;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    out_$i455 := $ult.i32(out_$i452, out_$i454);
    goto corral_source_split_7367;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    out_$i454 := $load.i32($M.1, in_$p406);
    goto corral_source_split_7366;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    out_$p453 := $add.ref(out_$p409, $mul.ref(1, 16));
    goto corral_source_split_7365;

  $bb121:
    assume {:verifier.code 0} true;
    out_$i452 := $add.i32(out_$i410, 1);
    call {:si_unique_call 1397} {:cexpr "i"} boogie_si_record_i32(out_$i452);
    goto corral_source_split_7364;

  $bb117:
    assume !(out_$i426 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    out_$p427 := out_$p409;
    assume true;
    goto $bb117;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    out_$i426 := $eq.i64(out_$i425, 0);
    goto corral_source_split_7328;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} out_$i425 := ldv__builtin_expect(out_$i424, 1);
    call {:si_unique_call 1393} {:cexpr "tmp___27"} boogie_si_record_i64(out_$i425);
    goto corral_source_split_7327;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    out_$i424 := $sext.i32.i64(out_$i423);
    goto corral_source_split_7326;

  $bb115:
    assume {:verifier.code 0} true;
    goto corral_source_split_7325;

  $bb114:
    assume !(out_$i422 == 1);
    assume {:verifier.code 0} true;
    out_$i423 := 1;
    goto $bb115;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    out_$i423 := 0;
    goto $bb115;

  $bb113:
    assume out_$i422 == 1;
    goto corral_source_split_7323;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    out_$i422 := $trunc.i8.i1(out_$i421);
    goto corral_source_split_7321;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    out_$i421 := $zext.i1.i8(out_$i420);
    call {:si_unique_call 1391} {:cexpr "tmp___25"} boogie_si_record_i8(out_$i421);
    goto corral_source_split_7320;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} out_$i420 := __chk_range_not_ok(out_$i414, out_$i416, out_$i419);
    goto corral_source_split_7319;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    out_$i419 := $load.i64($M.1, out_$p418);
    goto corral_source_split_7318;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    out_$p418 := $add.ref($add.ref($add.ref(out_$p411, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_7317;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    out_$i416 := $load.i64($M.1, out_$p415);
    goto corral_source_split_7316;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    out_$p415 := $add.ref($add.ref(out_$p409, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7315;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    out_$i414 := $p2i.ref.i64(out_$p413);
    goto corral_source_split_7314;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    out_$p413 := $load.ref($M.1, out_$p412);
    goto corral_source_split_7313;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    out_$p412 := $add.ref($add.ref(out_$p409, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7312;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} out_$p411 := current_thread_info();
    goto corral_source_split_7311;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb122_dummy:
    call {:si_unique_call 1} out_$p411, out_$p412, out_$p413, out_$i414, out_$p415, out_$i416, out_$p418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$p427, out_$i452, out_$p453, out_$i454, out_$i455, out_$p409, out_$i410 := skd_sg_io_get_and_check_args_loop_$bb111(in_$p406, out_$p411, out_$p412, out_$p413, out_$i414, out_$p415, out_$i416, out_$p418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$p427, out_$i452, out_$p453, out_$i454, out_$i455, out_$p409, out_$i410);
    return;

  exit:
    return;
}



procedure skd_sg_io_get_and_check_args_loop_$bb111(in_$p406: ref, in_$p411: ref, in_$p412: ref, in_$p413: ref, in_$i414: i64, in_$p415: ref, in_$i416: i64, in_$p418: ref, in_$i419: i64, in_$i420: i1, in_$i421: i8, in_$i422: i1, in_$i423: i32, in_$i424: i64, in_$i425: i64, in_$i426: i1, in_$p427: ref, in_$i452: i32, in_$p453: ref, in_$i454: i32, in_$i455: i1, in_$p409: ref, in_$i410: i32) returns (out_$p411: ref, out_$p412: ref, out_$p413: ref, out_$i414: i64, out_$p415: ref, out_$i416: i64, out_$p418: ref, out_$i419: i64, out_$i420: i1, out_$i421: i8, out_$i422: i1, out_$i423: i32, out_$i424: i64, out_$i425: i64, out_$i426: i1, out_$p427: ref, out_$i452: i32, out_$p453: ref, out_$i454: i32, out_$i455: i1, out_$p409: ref, out_$i410: i32);



implementation skd_sg_io_get_and_check_args_loop_$bb95(in_$p302: ref, in_$p359: ref, in_$i366: i64, in_$p368: ref, in_$i369: i64, in_$i370: i64, in_$i371: i1, in_$i372: i64, in_$p374: ref, in_$i375: i64, in_$i376: i64, in_$i377: i32, in_$i378: i16, in_$i379: i32, in_$i380: i1, in_$i364: i64, in_$i365: i32, in_$i381: i64) returns (out_$i366: i64, out_$p368: ref, out_$i369: i64, out_$i370: i64, out_$i371: i1, out_$i372: i64, out_$p374: ref, out_$i375: i64, out_$i376: i64, out_$i377: i32, out_$i378: i16, out_$i379: i32, out_$i380: i1, out_$i364: i64, out_$i365: i32, out_$i381: i64)
{

  entry:
    out_$i366, out_$p368, out_$i369, out_$i370, out_$i371, out_$i372, out_$p374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i364, out_$i365, out_$i381 := in_$i366, in_$p368, in_$i369, in_$i370, in_$i371, in_$i372, in_$p374, in_$i375, in_$i376, in_$i377, in_$i378, in_$i379, in_$i380, in_$i364, in_$i365, in_$i381;
    goto $bb95, exit;

  $bb95:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7254;

  $bb100:
    assume out_$i380 == 1;
    assume {:verifier.code 0} true;
    out_$i364, out_$i365 := out_$i376, out_$i377;
    goto $bb100_dummy;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    out_$i381 := out_$i376;
    assume true;
    goto $bb100;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    out_$i380 := $sgt.i32(out_$i379, out_$i377);
    goto corral_source_split_7273;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    out_$i379 := $zext.i16.i32(out_$i378);
    goto corral_source_split_7272;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    out_$i378 := $load.i16($M.1, in_$p359);
    goto corral_source_split_7271;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    out_$i377 := $add.i32(out_$i365, 1);
    call {:si_unique_call 1386} {:cexpr "i"} boogie_si_record_i32(out_$i377);
    goto corral_source_split_7270;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    out_$i376 := $add.i64(out_$i375, out_$i364);
    call {:si_unique_call 1385} {:cexpr "iov_data_len"} boogie_si_record_i64(out_$i376);
    goto corral_source_split_7269;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    out_$i375 := $load.i64($M.1, out_$p374);
    goto corral_source_split_7268;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    out_$p374 := $add.ref($add.ref(in_$p302, $mul.ref(out_$i372, 16)), $mul.ref(8, 1));
    goto corral_source_split_7267;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    goto corral_source_split_7266;

  $bb99:
    assume {:verifier.code 0} true;
    out_$i372 := $sext.i32.i64(out_$i365);
    goto corral_source_split_7265;

  $bb98:
    assume !(out_$i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    out_$i371 := $ult.i64(out_$i370, out_$i364);
    goto corral_source_split_7261;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    out_$i370 := $add.i64(out_$i369, out_$i364);
    goto corral_source_split_7260;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    out_$i369 := $load.i64($M.1, out_$p368);
    goto corral_source_split_7259;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    out_$p368 := $add.ref($add.ref(in_$p302, $mul.ref(out_$i366, 16)), $mul.ref(8, 1));
    goto corral_source_split_7258;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    goto corral_source_split_7257;

  $bb96:
    assume {:verifier.code 0} true;
    out_$i366 := $sext.i32.i64(out_$i365);
    goto corral_source_split_7256;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb100_dummy:
    call {:si_unique_call 1} out_$i366, out_$p368, out_$i369, out_$i370, out_$i371, out_$i372, out_$p374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i364, out_$i365, out_$i381 := skd_sg_io_get_and_check_args_loop_$bb95(in_$p302, in_$p359, out_$i366, out_$p368, out_$i369, out_$i370, out_$i371, out_$i372, out_$p374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i364, out_$i365, out_$i381);
    return;

  exit:
    return;
}



procedure skd_sg_io_get_and_check_args_loop_$bb95(in_$p302: ref, in_$p359: ref, in_$i366: i64, in_$p368: ref, in_$i369: i64, in_$i370: i64, in_$i371: i1, in_$i372: i64, in_$p374: ref, in_$i375: i64, in_$i376: i64, in_$i377: i32, in_$i378: i16, in_$i379: i32, in_$i380: i1, in_$i364: i64, in_$i365: i32, in_$i381: i64) returns (out_$i366: i64, out_$p368: ref, out_$i369: i64, out_$i370: i64, out_$i371: i1, out_$i372: i64, out_$p374: ref, out_$i375: i64, out_$i376: i64, out_$i377: i32, out_$i378: i16, out_$i379: i32, out_$i380: i1, out_$i364: i64, out_$i365: i32, out_$i381: i64);



implementation skd_sg_io_obtain_skspcl_loop_$bb23(in_$p0: ref, in_$p3: ref, in_$i75: i64, in_$p76: ref, in_$i77: i64, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$i82: i8, in_$i83: i1, in_$i84: i1, in_$i85: i64, in_$i86: i1, in_$i88: i1, in_$i87: i1, in_$i89: i32, in_$i90: i1, in_$i91: i64, in_$i93: i1, in_$i94: i64, in_$i95: i64) returns (out_$i75: i64, out_$p76: ref, out_$i77: i64, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$i82: i8, out_$i83: i1, out_$i84: i1, out_$i85: i64, out_$i86: i1, out_$i88: i1, out_$i87: i1, out_$i89: i32, out_$i90: i1, out_$i91: i64, out_$i93: i1, out_$i94: i64, out_$i95: i64)
{

  entry:
    out_$i75, out_$p76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i88, out_$i87, out_$i89, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95 := in_$i75, in_$p76, in_$i77, in_$p78, in_$p79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i88, in_$i87, in_$i89, in_$i90, in_$i91, in_$i93, in_$i94, in_$i95;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_7472;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    out_$i75 := out_$i95;
    goto corral_source_split_7507_dummy;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} out_$i95 := schedule_timeout(out_$i85);
    call {:si_unique_call 1417} {:cexpr "__ret___0"} boogie_si_record_i64(out_$i95);
    goto corral_source_split_7507;

  $bb38:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    out_$i94 := out_$i77;
    assume true;
    goto $bb38;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i64(out_$i77, 0);
    goto corral_source_split_7503;

  $bb34:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    out_$i91 := out_$i85;
    assume true;
    goto $bb34;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i32(out_$i89, 0);
    goto corral_source_split_7492;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i1.i32(out_$i87);
    goto corral_source_split_7491;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_7490;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    out_$i87 := out_$i88;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    assume out_$i86 == 1;
    goto $bb31;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    out_$i87 := 1;
    assume true;
    goto $bb30, $bb32;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    out_$i86 := $trunc.i8.i1(out_$i82);
    goto corral_source_split_7488;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_7487;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i85 := out_$i75;
    goto $bb29;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    out_$i85 := 1;
    goto $bb29;

  $bb27:
    assume out_$i84 == 1;
    goto corral_source_split_7485;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i64(out_$i75, 0);
    goto corral_source_split_7483;

  $bb24:
    assume out_$i83 == 1;
    goto corral_source_split_7482;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    out_$i83 := $trunc.i8.i1(out_$i82);
    goto corral_source_split_7480;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i1.i8(out_$i81);
    call {:si_unique_call 1414} {:cexpr "__cond"} boogie_si_record_i8(out_$i82);
    goto corral_source_split_7479;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    out_$i81 := $ne.i64(out_$i80, 0);
    goto corral_source_split_7478;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    out_$i80 := $p2i.ref.i64(out_$p79);
    goto corral_source_split_7477;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.1, out_$p78);
    goto corral_source_split_7476;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(336, 1));
    goto corral_source_split_7475;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} out_$i77 := prepare_to_wait_event(out_$p76, in_$p3, 1);
    call {:si_unique_call 1413} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i77);
    goto corral_source_split_7474;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(664, 1));
    goto corral_source_split_7473;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i83 == 1);
    goto $bb26;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i84 == 1);
    goto $bb26;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i64(out_$i85, 0);
    goto corral_source_split_7495;

  $bb32:
    assume !(out_$i86 == 1);
    goto corral_source_split_7494;

  corral_source_split_7507_dummy:
    call {:si_unique_call 1} out_$i75, out_$p76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i88, out_$i87, out_$i89, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95 := skd_sg_io_obtain_skspcl_loop_$bb23(in_$p0, in_$p3, out_$i75, out_$p76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i88, out_$i87, out_$i89, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95);
    return;

  exit:
    return;
}



procedure skd_sg_io_obtain_skspcl_loop_$bb23(in_$p0: ref, in_$p3: ref, in_$i75: i64, in_$p76: ref, in_$i77: i64, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$i82: i8, in_$i83: i1, in_$i84: i1, in_$i85: i64, in_$i86: i1, in_$i88: i1, in_$i87: i1, in_$i89: i32, in_$i90: i1, in_$i91: i64, in_$i93: i1, in_$i94: i64, in_$i95: i64) returns (out_$i75: i64, out_$p76: ref, out_$i77: i64, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$i82: i8, out_$i83: i1, out_$i84: i1, out_$i85: i64, out_$i86: i1, out_$i88: i1, out_$i87: i1, out_$i89: i32, out_$i90: i1, out_$i91: i64, out_$i93: i1, out_$i94: i64, out_$i95: i64);



implementation skd_sg_io_obtain_skspcl_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p10: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i32, in_$i19: i16, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i24, in_$i40: i24, in_$i41: i24, in_$p42: ref, in_$p43: ref, in_$i44: i8, in_$i45: i64, in_$i46: i64, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$p53: ref, in_$i54: i32, in_$i55: i64, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$i60: i8, in_$i61: i1, in_$i62: i1, in_$i63: i64, in_$i64: i1, in_$i66: i1, in_$i65: i1, in_$i67: i32, in_$i68: i1, in_$p70: ref, in_$i71: i32, in_$i72: i64, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$p76: ref, in_$i77: i64, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$i82: i8, in_$i83: i1, in_$i84: i1, in_$i85: i64, in_$i86: i1, in_$i88: i1, in_$i87: i1, in_$i89: i32, in_$i90: i1, in_$i91: i64, in_$i93: i1, in_$i94: i64, in_$i95: i64, in_$i92: i64, in_$p96: ref, in_$i97: i64, in_$i98: i32, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i24, in_$i106: i24, in_$i107: i24, in_$p108: ref, in_$p109: ref, in_$i110: i8, in_$i111: i64, in_$i112: i64, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$i118: i1, in_$p119: ref, in_$i120: i32, in_vslice_dummy_var_232: i32, in_vslice_dummy_var_233: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p10: ref, out_$p11: ref, out_$p13: ref, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i32, out_$i19: i16, out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i24, out_$i40: i24, out_$i41: i24, out_$p42: ref, out_$p43: ref, out_$i44: i8, out_$i45: i64, out_$i46: i64, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$p53: ref, out_$i54: i32, out_$i55: i64, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$i60: i8, out_$i61: i1, out_$i62: i1, out_$i63: i64, out_$i64: i1, out_$i66: i1, out_$i65: i1, out_$i67: i32, out_$i68: i1, out_$p70: ref, out_$i71: i32, out_$i72: i64, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$p76: ref, out_$i77: i64, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$i82: i8, out_$i83: i1, out_$i84: i1, out_$i85: i64, out_$i86: i1, out_$i88: i1, out_$i87: i1, out_$i89: i32, out_$i90: i1, out_$i91: i64, out_$i93: i1, out_$i94: i64, out_$i95: i64, out_$i92: i64, out_$p96: ref, out_$i97: i64, out_$i98: i32, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i24, out_$i106: i24, out_$i107: i24, out_$p108: ref, out_$p109: ref, out_$i110: i8, out_$i111: i64, out_$i112: i64, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$i118: i1, out_$p119: ref, out_$i120: i32, out_vslice_dummy_var_232: i32, out_vslice_dummy_var_233: i32)
{

  entry:
    out_$p5, out_$p6, out_$i7, out_$i8, out_$p10, out_$p11, out_$p13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p21, out_$p23, out_$p24, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p53, out_$i54, out_$i55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i66, out_$i65, out_$i67, out_$i68, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$p76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i88, out_$i87, out_$i89, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95, out_$i92, out_$p96, out_$i97, out_$i98, out_$p99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$p108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i118, out_$p119, out_$i120, out_vslice_dummy_var_232, out_vslice_dummy_var_233 := in_$p5, in_$p6, in_$i7, in_$i8, in_$p10, in_$p11, in_$p13, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$p21, in_$p23, in_$p24, in_$p26, in_$p27, in_$i28, in_$i29, in_$p30, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$i41, in_$p42, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$p49, in_$p50, in_$p53, in_$i54, in_$i55, in_$p56, in_$p57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i66, in_$i65, in_$i67, in_$i68, in_$p70, in_$i71, in_$i72, in_$p73, in_$p74, in_$i75, in_$p76, in_$i77, in_$p78, in_$p79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i88, in_$i87, in_$i89, in_$i90, in_$i91, in_$i93, in_$i94, in_$i95, in_$i92, in_$p96, in_$i97, in_$i98, in_$p99, in_$p100, in_$p101, in_$p102, in_$p103, in_$p104, in_$i105, in_$i106, in_$i107, in_$p108, in_$p109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$p115, in_$p116, in_$i118, in_$p119, in_$i120, in_vslice_dummy_var_232, in_vslice_dummy_var_233;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} ldv_spin_lock();
    goto corral_source_split_7373;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb49_dummy;

  $bb45:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    out_$p119, out_$i120 := out_$p6, out_$i98;
    assume true;
    goto $bb45;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i118 := $sle.i32(out_$i98, 0);
    goto corral_source_split_7539;

  $bb42:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} out_vslice_dummy_var_233 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32(in_$p4, .str.123, out_$p116, .str.121, 1583, out_$i98);
    goto corral_source_split_7537;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    out_$p116 := $bitcast.ref.ref(out_$p115);
    goto corral_source_split_7536;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_7535;

  $bb41:
    assume out_$i114 == 1;
    goto corral_source_split_7534;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    out_$i114 := $ne.i64(out_$i113, 0);
    goto corral_source_split_7532;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} out_$i113 := ldv__builtin_expect(out_$i112, 0);
    call {:si_unique_call 1420} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i113);
    goto corral_source_split_7531;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    out_$i112 := $and.i64(out_$i111, 1);
    goto corral_source_split_7530;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    out_$i111 := $zext.i8.i64(out_$i110);
    goto corral_source_split_7529;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i8($M.8, out_$p109);
    goto corral_source_split_7528;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7527;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p108, 0);
    goto corral_source_split_7526;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7525;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, out_$p104, out_$i107);
    goto corral_source_split_7524;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    out_$i107 := $or.i24(out_$i106, 1583);
    goto corral_source_split_7523;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    out_$i106 := $and.i24(out_$i105, $sub.i24(0, 262144));
    goto corral_source_split_7522;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i24($M.7, out_$p104);
    goto corral_source_split_7521;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    out_$p104 := $bitcast.ref.ref(out_$p103);
    goto corral_source_split_7520;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7519;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p102, .str.123);
    goto corral_source_split_7518;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7517;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p101, .str.29);
    goto corral_source_split_7516;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7515;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p100, .str.121);
    goto corral_source_split_7514;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7513;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p99, .str.27);
    goto corral_source_split_7512;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7511;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    out_$i98 := $trunc.i64.i32(out_$i97);
    call {:si_unique_call 1418} {:cexpr "rc"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_7510;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_7509;

  $bb22:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    out_$i97 := out_$i63;
    goto $bb40;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    out_$i97 := out_$i92;
    goto $bb40;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} finish_wait(out_$p96, in_$p3);
    goto corral_source_split_7501;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(664, 1));
    goto corral_source_split_7500;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_7499;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    out_$i92 := out_$i94;
    goto $bb35;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    out_$i92 := out_$i91;
    goto $bb35;

  $bb33:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7497;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    out_$i91 := out_$i85;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i32(out_$i89, 0);
    goto corral_source_split_7492;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i1.i32(out_$i87);
    goto corral_source_split_7491;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_7490;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    out_$i87 := out_$i88;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    assume out_$i86 == 1;
    goto $bb31;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    out_$i87 := 1;
    assume true;
    goto $bb30, $bb32;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    out_$i86 := $trunc.i8.i1(out_$i82);
    goto corral_source_split_7488;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_7487;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i85 := out_$i75;
    goto $bb29;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    out_$i85 := 1;
    goto $bb29;

  $bb27:
    assume out_$i84 == 1;
    goto corral_source_split_7485;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i64(out_$i75, 0);
    goto corral_source_split_7483;

  $bb24:
    assume out_$i83 == 1;
    goto corral_source_split_7482;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    out_$i83 := $trunc.i8.i1(out_$i82);
    goto corral_source_split_7480;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i1.i8(out_$i81);
    call {:si_unique_call 1414} {:cexpr "__cond"} boogie_si_record_i8(out_$i82);
    goto corral_source_split_7479;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    out_$i81 := $ne.i64(out_$i80, 0);
    goto corral_source_split_7478;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    out_$i80 := $p2i.ref.i64(out_$p79);
    goto corral_source_split_7477;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.1, out_$p78);
    goto corral_source_split_7476;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(336, 1));
    goto corral_source_split_7475;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} out_$i77 := prepare_to_wait_event(out_$p76, in_$p3, 1);
    call {:si_unique_call 1413} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i77);
    goto corral_source_split_7474;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(664, 1));
    goto corral_source_split_7473;

  $bb23:
    call out_$i75, out_$p76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i88, out_$i87, out_$i89, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95 := skd_sg_io_obtain_skspcl_loop_$bb23(in_$p0, in_$p3, out_$i75, out_$p76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i88, out_$i87, out_$i89, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95);
    goto $bb23_last;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7472;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    out_$i75 := out_$i72;
    goto $bb23;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    out_$i75 := out_$i95;
    assume false;
    return;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} out_$i95 := schedule_timeout(out_$i85);
    call {:si_unique_call 1417} {:cexpr "__ret___0"} boogie_si_record_i64(out_$i95);
    goto corral_source_split_7507;

  $bb38:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    out_$i94 := out_$i77;
    assume true;
    goto $bb37, $bb38;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i64(out_$i77, 0);
    goto corral_source_split_7503;

  $bb34:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p74, 0);
    goto corral_source_split_7470;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7469;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} INIT_LIST_HEAD(out_$p73);
    goto corral_source_split_7468;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7467;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} out_$i72 := msecs_to_jiffies(out_$i71);
    call {:si_unique_call 1410} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i72);
    goto corral_source_split_7466;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.1, out_$p70);
    goto corral_source_split_7465;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(40, 1));
    goto corral_source_split_7464;

  $bb21:
    assume out_$i68 == 1;
    goto corral_source_split_7463;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i67, 0);
    goto corral_source_split_7458;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i1.i32(out_$i65);
    goto corral_source_split_7457;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_7456;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    out_$i65 := out_$i66;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    assume out_$i64 == 1;
    goto $bb19;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    out_$i65 := 1;
    assume true;
    goto $bb18, $bb20;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    out_$i64 := $trunc.i8.i1(out_$i60);
    goto corral_source_split_7454;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_7453;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i55;
    goto $bb17;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    out_$i63 := 1;
    goto $bb17;

  $bb15:
    assume out_$i62 == 1;
    goto corral_source_split_7451;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i64(out_$i55, 0);
    goto corral_source_split_7449;

  $bb12:
    assume out_$i61 == 1;
    goto corral_source_split_7448;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    out_$i61 := $trunc.i8.i1(out_$i60);
    goto corral_source_split_7446;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i1.i8(out_$i59);
    call {:si_unique_call 1408} {:cexpr "__cond___0"} boogie_si_record_i8(out_$i60);
    goto corral_source_split_7445;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i64(out_$i58, 0);
    goto corral_source_split_7444;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    out_$i58 := $p2i.ref.i64(out_$p57);
    goto corral_source_split_7443;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.1, out_$p56);
    goto corral_source_split_7442;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(336, 1));
    goto corral_source_split_7441;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} out_$i55 := msecs_to_jiffies(out_$i54);
    call {:si_unique_call 1407} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i55);
    goto corral_source_split_7440;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.1, out_$p53);
    goto corral_source_split_7439;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 160)), $mul.ref(16, 1)), $mul.ref(40, 1));
    goto corral_source_split_7438;

  $bb10:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} out_vslice_dummy_var_232 := __dynamic_pr_debug.ref.ref.ref.ref.i32(in_$p2, .str.122, out_$p50, .str.121, 1575);
    goto corral_source_split_7436;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_7435;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_7434;

  $bb9:
    assume out_$i48 == 1;
    goto corral_source_split_7433;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i64(out_$i47, 0);
    goto corral_source_split_7431;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} out_$i47 := ldv__builtin_expect(out_$i46, 0);
    call {:si_unique_call 1404} {:cexpr "tmp"} boogie_si_record_i64(out_$i47);
    goto corral_source_split_7430;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    out_$i46 := $and.i64(out_$i45, 1);
    goto corral_source_split_7429;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i8.i64(out_$i44);
    goto corral_source_split_7428;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i8($M.8, out_$p43);
    goto corral_source_split_7427;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7426;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p42, 0);
    goto corral_source_split_7425;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7424;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, out_$p38, out_$i41);
    goto corral_source_split_7423;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    out_$i41 := $or.i24(out_$i40, 1575);
    goto corral_source_split_7422;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    out_$i40 := $and.i24(out_$i39, $sub.i24(0, 262144));
    goto corral_source_split_7421;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i24($M.7, out_$p38);
    goto corral_source_split_7420;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_7419;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7418;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p36, .str.122);
    goto corral_source_split_7417;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7416;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p35, .str.29);
    goto corral_source_split_7415;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7414;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p34, .str.121);
    goto corral_source_split_7413;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7412;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p33, .str.27);
    goto corral_source_split_7411;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7410;

  $bb6:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    out_$p30 := out_$p6;
    assume true;
    goto $bb6;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, 0);
    goto corral_source_split_7402;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p6);
    goto corral_source_split_7401;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} spin_unlock_irqrestore(out_$p27, $u0);
    goto corral_source_split_7400;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(72, 1));
    goto corral_source_split_7399;

  $bb3:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    goto $bb4;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p26, 0);
    goto corral_source_split_7397;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(out_$p6, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_7396;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p24, 0);
    goto corral_source_split_7395;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p6, $mul.ref(0, 168)), $mul.ref(128, 1));
    goto corral_source_split_7394;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p23, 1);
    goto corral_source_split_7393;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p6, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7392;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p21, out_$i19);
    goto corral_source_split_7391;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p6, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_7390;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i32.i16(out_$i18);
    goto corral_source_split_7389;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i17, 1024);
    goto corral_source_split_7388;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i16.i32(out_$i16);
    goto corral_source_split_7387;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i16($M.1, out_$p15);
    goto corral_source_split_7386;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref(out_$p6, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_7385;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p13, out_$p11);
    goto corral_source_split_7384;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(336, 1));
    goto corral_source_split_7383;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    goto corral_source_split_7382;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.1, out_$p10);
    goto corral_source_split_7381;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref(out_$p6, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_7380;

  $bb2:
    assume out_$i8 == 1;
    goto corral_source_split_7379;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_7377;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64(out_$p6);
    goto corral_source_split_7376;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.1, out_$p5);
    goto corral_source_split_7375;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(336, 1));
    goto corral_source_split_7374;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i61 == 1);
    goto $bb14;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i62 == 1);
    goto $bb14;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i64(out_$i63, 0);
    goto corral_source_split_7461;

  $bb20:
    assume !(out_$i64 == 1);
    goto corral_source_split_7460;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i83 == 1);
    goto $bb26;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i84 == 1);
    goto $bb26;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i64(out_$i85, 0);
    goto corral_source_split_7495;

  $bb32:
    assume !(out_$i86 == 1);
    goto corral_source_split_7494;

  $bb37:
    assume out_$i93 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7505;

  $bb49_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$i7, out_$i8, out_$p10, out_$p11, out_$p13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p21, out_$p23, out_$p24, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p53, out_$i54, out_$i55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i66, out_$i65, out_$i67, out_$i68, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$p76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i88, out_$i87, out_$i89, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95, out_$i92, out_$p96, out_$i97, out_$i98, out_$p99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$p108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i118, out_$p119, out_$i120, out_vslice_dummy_var_232, out_vslice_dummy_var_233 := skd_sg_io_obtain_skspcl_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p10, out_$p11, out_$p13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p21, out_$p23, out_$p24, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p53, out_$i54, out_$i55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i66, out_$i65, out_$i67, out_$i68, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$p76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i88, out_$i87, out_$i89, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95, out_$i92, out_$p96, out_$i97, out_$i98, out_$p99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$p108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i118, out_$p119, out_$i120, out_vslice_dummy_var_232, out_vslice_dummy_var_233);
    return;

  exit:
    return;
}



procedure skd_sg_io_obtain_skspcl_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p10: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i32, in_$i19: i16, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i24, in_$i40: i24, in_$i41: i24, in_$p42: ref, in_$p43: ref, in_$i44: i8, in_$i45: i64, in_$i46: i64, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$p53: ref, in_$i54: i32, in_$i55: i64, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$i60: i8, in_$i61: i1, in_$i62: i1, in_$i63: i64, in_$i64: i1, in_$i66: i1, in_$i65: i1, in_$i67: i32, in_$i68: i1, in_$p70: ref, in_$i71: i32, in_$i72: i64, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$p76: ref, in_$i77: i64, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$i82: i8, in_$i83: i1, in_$i84: i1, in_$i85: i64, in_$i86: i1, in_$i88: i1, in_$i87: i1, in_$i89: i32, in_$i90: i1, in_$i91: i64, in_$i93: i1, in_$i94: i64, in_$i95: i64, in_$i92: i64, in_$p96: ref, in_$i97: i64, in_$i98: i32, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i24, in_$i106: i24, in_$i107: i24, in_$p108: ref, in_$p109: ref, in_$i110: i8, in_$i111: i64, in_$i112: i64, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$i118: i1, in_$p119: ref, in_$i120: i32, in_vslice_dummy_var_232: i32, in_vslice_dummy_var_233: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p10: ref, out_$p11: ref, out_$p13: ref, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i32, out_$i19: i16, out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i24, out_$i40: i24, out_$i41: i24, out_$p42: ref, out_$p43: ref, out_$i44: i8, out_$i45: i64, out_$i46: i64, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$p53: ref, out_$i54: i32, out_$i55: i64, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$i60: i8, out_$i61: i1, out_$i62: i1, out_$i63: i64, out_$i64: i1, out_$i66: i1, out_$i65: i1, out_$i67: i32, out_$i68: i1, out_$p70: ref, out_$i71: i32, out_$i72: i64, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$p76: ref, out_$i77: i64, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$i82: i8, out_$i83: i1, out_$i84: i1, out_$i85: i64, out_$i86: i1, out_$i88: i1, out_$i87: i1, out_$i89: i32, out_$i90: i1, out_$i91: i64, out_$i93: i1, out_$i94: i64, out_$i95: i64, out_$i92: i64, out_$p96: ref, out_$i97: i64, out_$i98: i32, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i24, out_$i106: i24, out_$i107: i24, out_$p108: ref, out_$p109: ref, out_$i110: i8, out_$i111: i64, out_$i112: i64, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$i118: i1, out_$p119: ref, out_$i120: i32, out_vslice_dummy_var_232: i32, out_vslice_dummy_var_233: i32);
  modifies $M.11, $M.8, $M.7, $M.6, $M.5, $M.4, $M.3, $M.1;



implementation skd_sg_io_copy_buffer_loop_$bb41(in_$p1: ref, in_$p3: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i32: i32, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i30: i32, in_$i21: i1, in_$i31: i32, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8) returns (out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i32: i32, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i30: i32, out_$i31: i32, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8)
{

  entry:
    out_$p27, out_$i28, out_$i29, out_$i32, out_$p33, out_$p34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i30, out_$i31, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27 := in_$p27, in_$i28, in_$i29, in_$i32, in_$p33, in_$p34, in_$i35, in_$p36, in_$p37, in_$p38, in_$i30, in_$i31, in_cmdloc_dummy_var_25, in_cmdloc_dummy_var_26, in_cmdloc_dummy_var_27;
    goto $bb41, exit;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_7671;

  $bb18:
    assume in_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i31 := out_$i32;
    goto $bb18_dummy;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_25 := $M.1;
    out_cmdloc_dummy_var_26 := $M.1;
    call {:si_unique_call 1429} out_cmdloc_dummy_var_27 := $memcpy.i8(out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_$p37, out_$p38, 16, $zext.i32.i64(8), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_27;
    goto corral_source_split_7597;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_7596;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_7595;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref(out_$p34, $mul.ref(out_$i35, 16));
    goto corral_source_split_7594;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i32.i64(out_$i31);
    goto corral_source_split_7593;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.1, out_$p33);
    goto corral_source_split_7592;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p1, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_7591;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i31, 1);
    call {:si_unique_call 1428} {:cexpr "iov_ix"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_7590;

  $bb16:
    assume out_$i29 == 1;
    goto corral_source_split_7589;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i31;
    assume true;
    goto $bb16;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i64(out_$i28, 0);
    goto corral_source_split_7587;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.1, out_$p27);
    goto corral_source_split_7586;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7585;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p27, out_$i28, out_$i29, out_$i32, out_$p33, out_$p34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i30, out_$i31, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27 := skd_sg_io_copy_buffer_loop_$bb41(in_$p1, in_$p3, out_$p27, out_$i28, out_$i29, out_$i32, out_$p33, out_$p34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i30, in_$i21, out_$i31, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27);
    return;

  exit:
    return;
}



procedure skd_sg_io_copy_buffer_loop_$bb41(in_$p1: ref, in_$p3: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i32: i32, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i30: i32, in_$i21: i1, in_$i31: i32, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8) returns (out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i32: i32, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i30: i32, out_$i31: i32, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8);
  modifies $M.1;



implementation skd_sg_io_copy_buffer_loop_$bb14(in_$p1: ref, in_$i2: i32, in_$p3: ref, in_$p5: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i32: i32, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i30: i32, in_$i39: i1, in_$i40: i32, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$p53: ref, in_$i54: i64, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i64: i32, in_$i68: i1, in_$i69: i32, in_$p70: ref, in_$i71: i64, in_$i72: i64, in_$i73: i64, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$p78: ref, in_$p79: ref, in_$i80: i32, in_$i81: i1, in_$i21: i1, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$p26: ref, in_$i31: i32, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8) returns (out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i32: i32, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i30: i32, out_$i39: i1, out_$i40: i32, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$p53: ref, out_$i54: i64, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i64: i32, out_$i68: i1, out_$i69: i32, out_$p70: ref, out_$i71: i64, out_$i72: i64, out_$i73: i64, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$p78: ref, out_$p79: ref, out_$i80: i32, out_$i81: i1, out_$i21: i1, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$p26: ref, out_$i31: i32, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8)
{

  entry:
    out_$p27, out_$i28, out_$i29, out_$i32, out_$p33, out_$p34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i30, out_$i39, out_$i40, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$p65, out_$p66, out_$i67, out_$i64, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i31, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27 := in_$p27, in_$i28, in_$i29, in_$i32, in_$p33, in_$p34, in_$i35, in_$p36, in_$p37, in_$p38, in_$i30, in_$i39, in_$i40, in_$p42, in_$p43, in_$i44, in_$p45, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$p62, in_$i63, in_$p65, in_$p66, in_$i67, in_$i64, in_$i68, in_$i69, in_$p70, in_$i71, in_$i72, in_$i73, in_$p74, in_$p75, in_$p76, in_$i77, in_$p78, in_$p79, in_$i80, in_$i81, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i31, in_cmdloc_dummy_var_25, in_cmdloc_dummy_var_26, in_cmdloc_dummy_var_27;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7583;

  $bb39:
    assume out_$i81 == 1;
    assume {:verifier.code 0} true;
    out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26 := out_$i81, out_$i69, out_$i80, out_$i30, out_$i49, out_$p48;
    goto $bb39_dummy;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    out_$i81 := $ne.i32(out_$i69, 0);
    goto corral_source_split_7667;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    out_$i80 := $sub.i32(out_$i50, out_$i59);
    call {:si_unique_call 1439} {:cexpr "buf_len"} boogie_si_record_i32(out_$i80);
    goto corral_source_split_7666;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p79, out_$p78);
    goto corral_source_split_7665;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7664;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref(out_$p76, $mul.ref(out_$i77, 1));
    goto corral_source_split_7663;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i32.i64(out_$i59);
    goto corral_source_split_7662;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.1, out_$p75);
    goto corral_source_split_7661;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7660;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p74, out_$i73);
    goto corral_source_split_7659;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7658;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    out_$i73 := $sub.i64(out_$i71, out_$i72);
    goto corral_source_split_7657;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i32.i64(out_$i59);
    goto corral_source_split_7656;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i64($M.1, out_$p70);
    goto corral_source_split_7655;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7654;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i69 := $sub.i32(out_$i22, out_$i59);
    call {:si_unique_call 1438} {:cexpr "resid"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_7653;

  $bb37:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i32(out_$i64, 0);
    goto corral_source_split_7649;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_7648;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} out_$i67 := __copy_to_user(out_$p66, out_$p48, out_$i59);
    call {:si_unique_call 1437} {:cexpr "rc"} boogie_si_record_i32(out_$i67);
    assume {:verifier.code 0} true;
    out_$i64 := out_$i67;
    goto $bb35;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    out_$i64 := out_$i63;
    goto $bb35;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} out_$i63 := __copy_from_user(out_$p48, out_$p62, out_$i59);
    call {:si_unique_call 1435} {:cexpr "rc"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_7642;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.1, out_$p61);
    goto corral_source_split_7641;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7640;

  $bb33:
    assume out_$i60 == 1;
    goto corral_source_split_7639;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(in_$i2, $sub.i32(0, 2));
    goto corral_source_split_7637;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_7636;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i50;
    goto $bb32;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i57;
    goto $bb32;

  $bb30:
    assume out_$i58 == 1;
    goto corral_source_split_7632;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    out_$i58 := $ult.i32(out_$i57, out_$i50);
    goto corral_source_split_7630;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_7629;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i55;
    goto $bb29;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i52;
    goto $bb29;

  $bb27:
    assume out_$i56 == 1;
    goto corral_source_split_7625;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    out_$i56 := $ult.i32(out_$i52, out_$i55);
    goto corral_source_split_7623;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    out_$i55 := $trunc.i64.i32(out_$i54);
    call {:si_unique_call 1433} {:cexpr "__min2___0"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_7622;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i64($M.1, out_$p53);
    goto corral_source_split_7621;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7620;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_7619;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i22;
    goto $bb26;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    out_$i52 := 4096;
    goto $bb26;

  $bb24:
    assume out_$i51 == 1;
    goto corral_source_split_7615;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    out_$i51 := $ult.i32(4096, out_$i22);
    goto corral_source_split_7613;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7612;

  $bb22:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$p48, out_$i49, out_$i50 := out_$p26, out_$i25, out_$i23;
    goto $bb23;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    out_$p48, out_$i49, out_$i50 := out_$p47, out_$i40, 4096;
    goto $bb23;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} out_$p47 := lowmem_page_address(out_$p46);
    goto corral_source_split_7610;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} out_$p46 := sg_page(out_$p45);
    goto corral_source_split_7609;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p43, $mul.ref(out_$i44, 40));
    goto corral_source_split_7608;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i32.i64(out_$i25);
    goto corral_source_split_7607;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.1, out_$p42);
    goto corral_source_split_7606;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_7605;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i25, 1);
    call {:si_unique_call 1430} {:cexpr "sksg_ix"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_7604;

  $bb21:
    assume out_$i39 == 1;
    goto corral_source_split_7603;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i23, 0);
    goto corral_source_split_7601;

  $bb17:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i31;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i64(out_$i28, 0);
    goto corral_source_split_7587;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.1, out_$p27);
    goto corral_source_split_7586;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7585;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb41:
    call out_$p27, out_$i28, out_$i29, out_$i32, out_$p33, out_$p34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i30, out_$i31, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27 := skd_sg_io_copy_buffer_loop_$bb41(in_$p1, in_$p3, out_$p27, out_$i28, out_$i29, out_$i32, out_$p33, out_$p34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i30, out_$i21, out_$i31, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27);
    goto $bb41_last;

  $bb41_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7671;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i24;
    goto $bb41;

  $bb18:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i31 := out_$i32;
    assume false;
    return;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_25 := $M.1;
    out_cmdloc_dummy_var_26 := $M.1;
    call {:si_unique_call 1429} out_cmdloc_dummy_var_27 := $memcpy.i8(out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_$p37, out_$p38, 16, $zext.i32.i64(8), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_27;
    goto corral_source_split_7597;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_7596;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_7595;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref(out_$p34, $mul.ref(out_$i35, 16));
    goto corral_source_split_7594;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i32.i64(out_$i31);
    goto corral_source_split_7593;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.1, out_$p33);
    goto corral_source_split_7592;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p1, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_7591;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i31, 1);
    call {:si_unique_call 1428} {:cexpr "iov_ix"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_7590;

  $bb16:
    assume out_$i29 == 1;
    goto corral_source_split_7589;

  $bb25:
    assume !(out_$i51 == 1);
    goto corral_source_split_7617;

  $bb28:
    assume !(out_$i56 == 1);
    goto corral_source_split_7627;

  $bb31:
    assume !(out_$i58 == 1);
    goto corral_source_split_7634;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.1, out_$p65);
    goto corral_source_split_7646;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7645;

  $bb34:
    assume !(out_$i60 == 1);
    goto corral_source_split_7644;

  $bb39_dummy:
    call {:si_unique_call 1} out_$p27, out_$i28, out_$i29, out_$i32, out_$p33, out_$p34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i30, out_$i39, out_$i40, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$p65, out_$p66, out_$i67, out_$i64, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i31, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27 := skd_sg_io_copy_buffer_loop_$bb14(in_$p1, in_$i2, in_$p3, in_$p5, out_$p27, out_$i28, out_$i29, out_$i32, out_$p33, out_$p34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i30, out_$i39, out_$i40, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$p65, out_$p66, out_$i67, out_$i64, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i31, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27);
    return;

  exit:
    return;
}



procedure skd_sg_io_copy_buffer_loop_$bb14(in_$p1: ref, in_$i2: i32, in_$p3: ref, in_$p5: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i32: i32, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i30: i32, in_$i39: i1, in_$i40: i32, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$p53: ref, in_$i54: i64, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i64: i32, in_$i68: i1, in_$i69: i32, in_$p70: ref, in_$i71: i64, in_$i72: i64, in_$i73: i64, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$p78: ref, in_$p79: ref, in_$i80: i32, in_$i81: i1, in_$i21: i1, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$p26: ref, in_$i31: i32, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8) returns (out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i32: i32, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i30: i32, out_$i39: i1, out_$i40: i32, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$p53: ref, out_$i54: i64, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i64: i32, out_$i68: i1, out_$i69: i32, out_$p70: ref, out_$i71: i64, out_$i72: i64, out_$i73: i64, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$p78: ref, out_$p79: ref, out_$i80: i32, out_$i81: i1, out_$i21: i1, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$p26: ref, out_$i31: i32, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8);
  modifies $M.1;



implementation skd_sg_io_await_loop_$bb12(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i31: i64, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$i40: i8, in_$i41: i1, in_$i42: i1, in_$i43: i64, in_$i44: i1, in_$i46: i1, in_$i45: i1, in_$i47: i32, in_$i48: i1, in_$i49: i64, in_$i51: i1, in_$i52: i64, in_$i53: i64) returns (out_$i31: i64, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$i40: i8, out_$i41: i1, out_$i42: i1, out_$i43: i64, out_$i44: i1, out_$i46: i1, out_$i45: i1, out_$i47: i32, out_$i48: i1, out_$i49: i64, out_$i51: i1, out_$i52: i64, out_$i53: i64)
{

  entry:
    out_$i31, out_$p32, out_$i33, out_$p34, out_$p35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i46, out_$i45, out_$i47, out_$i48, out_$i49, out_$i51, out_$i52, out_$i53 := in_$i31, in_$p32, in_$i33, in_$p34, in_$p35, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i46, in_$i45, in_$i47, in_$i48, in_$i49, in_$i51, in_$i52, in_$i53;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7763;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i53;
    goto corral_source_split_7799_dummy;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} out_$i53 := schedule_timeout(out_$i43);
    call {:si_unique_call 1463} {:cexpr "__ret___0"} boogie_si_record_i64(out_$i53);
    goto corral_source_split_7799;

  $bb27:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i33;
    assume true;
    goto $bb27;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i33, 0);
    goto corral_source_split_7795;

  $bb23:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i43;
    assume true;
    goto $bb23;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_7784;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i1.i32(out_$i45);
    goto corral_source_split_7783;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_7782;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i46;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    assume out_$i44 == 1;
    goto $bb20;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    out_$i45 := 1;
    assume true;
    goto $bb19, $bb21;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    out_$i44 := $trunc.i8.i1(out_$i40);
    goto corral_source_split_7780;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_7779;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i31;
    goto $bb18;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    out_$i43 := 1;
    goto $bb18;

  $bb16:
    assume out_$i42 == 1;
    goto corral_source_split_7777;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i64(out_$i31, 0);
    goto corral_source_split_7775;

  $bb13:
    assume out_$i41 == 1;
    goto corral_source_split_7774;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    out_$i41 := $trunc.i8.i1(out_$i40);
    goto corral_source_split_7772;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i1.i8(out_$i39);
    call {:si_unique_call 1460} {:cexpr "__cond"} boogie_si_record_i8(out_$i40);
    goto corral_source_split_7771;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 2);
    goto corral_source_split_7770;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.1, out_$p37);
    goto corral_source_split_7769;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(out_$p35, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7768;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.1, out_$p34);
    goto corral_source_split_7767;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_7766;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} out_$i33 := prepare_to_wait_event(out_$p32, in_$p2, 1);
    call {:si_unique_call 1459} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i33);
    goto corral_source_split_7765;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(664, 1));
    goto corral_source_split_7764;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb15;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i64(out_$i43, 0);
    goto corral_source_split_7787;

  $bb21:
    assume !(out_$i44 == 1);
    goto corral_source_split_7786;

  corral_source_split_7799_dummy:
    call {:si_unique_call 1} out_$i31, out_$p32, out_$i33, out_$p34, out_$p35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i46, out_$i45, out_$i47, out_$i48, out_$i49, out_$i51, out_$i52, out_$i53 := skd_sg_io_await_loop_$bb12(in_$p0, in_$p1, in_$p2, out_$i31, out_$p32, out_$i33, out_$p34, out_$p35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i46, out_$i45, out_$i47, out_$i48, out_$i49, out_$i51, out_$i52, out_$i53);
    return;

  exit:
    return;
}



procedure skd_sg_io_await_loop_$bb12(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i31: i64, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$i40: i8, in_$i41: i1, in_$i42: i1, in_$i43: i64, in_$i44: i1, in_$i46: i1, in_$i45: i1, in_$i47: i32, in_$i48: i1, in_$i49: i64, in_$i51: i1, in_$i52: i64, in_$i53: i64) returns (out_$i31: i64, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$i40: i8, out_$i41: i1, out_$i42: i1, out_$i43: i64, out_$i44: i1, out_$i46: i1, out_$i45: i1, out_$i47: i32, out_$i48: i1, out_$i49: i64, out_$i51: i1, out_$i52: i64, out_$i53: i64);



implementation skd_skreq_prep_buffering_loop_$bb27(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p91: ref, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i24, in_$i106: i24, in_$i107: i24, in_$p108: ref, in_$p109: ref, in_$i110: i8, in_$i111: i64, in_$i112: i64, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$p119: ref, in_$i120: i32, in_$p121: ref, in_$i122: i64, in_$p123: ref, in_$i124: i64, in_$i126: i32, in_$i127: i32, in_$i128: i1, in_$i94: i32, in_vslice_dummy_var_241: i32) returns (out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i24, out_$i106: i24, out_$i107: i24, out_$p108: ref, out_$p109: ref, out_$i110: i8, out_$i111: i64, out_$i112: i64, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$p119: ref, out_$i120: i32, out_$p121: ref, out_$i122: i64, out_$p123: ref, out_$i124: i64, out_$i126: i32, out_$i127: i32, out_$i128: i1, out_$i94: i32, out_vslice_dummy_var_241: i32)
{

  entry:
    out_$p95, out_$p96, out_$i97, out_$p99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$p108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p116, out_$p117, out_$i118, out_$p119, out_$i120, out_$p121, out_$i122, out_$p123, out_$i124, out_$i126, out_$i127, out_$i128, out_$i94, out_vslice_dummy_var_241 := in_$p95, in_$p96, in_$i97, in_$p99, in_$p100, in_$p101, in_$p102, in_$p103, in_$p104, in_$i105, in_$i106, in_$i107, in_$p108, in_$p109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$p115, in_$p116, in_$p117, in_$i118, in_$p119, in_$i120, in_$p121, in_$i122, in_$p123, in_$i124, in_$i126, in_$i127, in_$i128, in_$i94, in_vslice_dummy_var_241;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_8295;

  $bb32:
    assume out_$i128 == 1;
    assume {:verifier.code 0} true;
    out_$i94 := out_$i126;
    goto $bb32_dummy;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    out_$i128 := $ugt.i32(out_$i127, out_$i126);
    goto corral_source_split_8339;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    out_$i127 := $load.i32($M.1, in_$p91);
    goto corral_source_split_8338;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i126 := $add.i32(out_$i94, 1);
    call {:si_unique_call 1536} {:cexpr "i"} boogie_si_record_i32(out_$i126);
    goto corral_source_split_8337;

  $bb30:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} out_vslice_dummy_var_241 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32.i32.i32.i64.i64(in_$p4, .str.82, out_$p116, .str.124, 1670, out_$i94, out_$i118, out_$i120, out_$i122, out_$i124);
    goto corral_source_split_8335;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i64($M.1, out_$p123);
    goto corral_source_split_8334;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(out_$p96, $mul.ref(out_$i97, 32)), $mul.ref(24, 1));
    goto corral_source_split_8333;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i64($M.1, out_$p121);
    goto corral_source_split_8332;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(out_$p96, $mul.ref(out_$i97, 32)), $mul.ref(8, 1));
    goto corral_source_split_8331;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i32($M.1, out_$p119);
    goto corral_source_split_8330;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(out_$p96, $mul.ref(out_$i97, 32)), $mul.ref(0, 1));
    goto corral_source_split_8329;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i32($M.1, out_$p117);
    goto corral_source_split_8328;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(out_$p96, $mul.ref(out_$i97, 32)), $mul.ref(4, 1));
    goto corral_source_split_8327;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    out_$p116 := $bitcast.ref.ref(out_$p115);
    goto corral_source_split_8326;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1008)), $mul.ref(188, 1));
    goto corral_source_split_8325;

  $bb29:
    assume out_$i114 == 1;
    goto corral_source_split_8324;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    out_$i114 := $ne.i64(out_$i113, 0);
    goto corral_source_split_8322;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} out_$i113 := ldv__builtin_expect(out_$i112, 0);
    call {:si_unique_call 1534} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i113);
    goto corral_source_split_8321;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    out_$i112 := $and.i64(out_$i111, 1);
    goto corral_source_split_8320;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    out_$i111 := $zext.i8.i64(out_$i110);
    goto corral_source_split_8319;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i8($M.8, out_$p109);
    goto corral_source_split_8318;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8317;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p108, 0);
    goto corral_source_split_8316;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8315;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, out_$p104, out_$i107);
    goto corral_source_split_8314;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    out_$i107 := $or.i24(out_$i106, 1670);
    goto corral_source_split_8313;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    out_$i106 := $and.i24(out_$i105, $sub.i24(0, 262144));
    goto corral_source_split_8312;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i24($M.7, out_$p104);
    goto corral_source_split_8311;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    out_$p104 := $bitcast.ref.ref(out_$p103);
    goto corral_source_split_8310;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8309;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p102, .str.82);
    goto corral_source_split_8308;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8307;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p101, .str.29);
    goto corral_source_split_8306;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8305;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p100, .str.124);
    goto corral_source_split_8304;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8303;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p99, .str.27);
    goto corral_source_split_8302;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8301;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    goto corral_source_split_8300;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    out_$i97 := $zext.i32.i64(out_$i94);
    goto corral_source_split_8299;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    out_$p96 := $load.ref($M.1, out_$p95);
    goto corral_source_split_8298;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(in_$p1, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_8297;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb32_dummy:
    call {:si_unique_call 1} out_$p95, out_$p96, out_$i97, out_$p99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$p108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p116, out_$p117, out_$i118, out_$p119, out_$i120, out_$p121, out_$i122, out_$p123, out_$i124, out_$i126, out_$i127, out_$i128, out_$i94, out_vslice_dummy_var_241 := skd_skreq_prep_buffering_loop_$bb27(in_$p0, in_$p1, in_$p4, in_$p91, out_$p95, out_$p96, out_$i97, out_$p99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$p108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p116, out_$p117, out_$i118, out_$p119, out_$i120, out_$p121, out_$i122, out_$p123, out_$i124, out_$i126, out_$i127, out_$i128, out_$i94, out_vslice_dummy_var_241);
    return;

  exit:
    return;
}



procedure skd_skreq_prep_buffering_loop_$bb27(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p91: ref, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i24, in_$i106: i24, in_$i107: i24, in_$p108: ref, in_$p109: ref, in_$i110: i8, in_$i111: i64, in_$i112: i64, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$p119: ref, in_$i120: i32, in_$p121: ref, in_$i122: i64, in_$p123: ref, in_$i124: i64, in_$i126: i32, in_$i127: i32, in_$i128: i1, in_$i94: i32, in_vslice_dummy_var_241: i32) returns (out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i24, out_$i106: i24, out_$i107: i24, out_$p108: ref, out_$p109: ref, out_$i110: i8, out_$i111: i64, out_$i112: i64, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$p119: ref, out_$i120: i32, out_$p121: ref, out_$i122: i64, out_$p123: ref, out_$i124: i64, out_$i126: i32, out_$i127: i32, out_$i128: i1, out_$i94: i32, out_vslice_dummy_var_241: i32);
  modifies $M.8, $M.7, $M.6, $M.5, $M.4, $M.3;



implementation skd_skreq_prep_buffering_loop_$bb4(in_$p1: ref, in_$p12: ref, in_$i13: i32, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i22: i1, in_$i23: i32, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i32, in_$i36: i64, in_$i37: i64, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i11: i32) returns (out_$p12: ref, out_$i13: i32, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i22: i1, out_$i23: i32, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i32, out_$i36: i64, out_$i37: i64, out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i11: i32)
{

  entry:
    out_$p12, out_$i13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i11 := in_$p12, in_$i13, in_$p14, in_$p15, in_$i16, in_$p17, in_$p18, in_$p19, in_$i20, in_$i22, in_$i23, in_$p24, in_$i25, in_$i26, in_$p28, in_$p29, in_$i30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p43, in_$i44, in_$i45, in_$i11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_8175;

  $bb13:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i44;
    goto $bb13_dummy;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 0);
    goto corral_source_split_8224;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    out_$i44 := $sub.i32(out_$i11, out_$i23);
    call {:si_unique_call 1526} {:cexpr "resid"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_8223;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p43, out_$i42);
    goto corral_source_split_8222;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p1, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_8221;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i32(out_$i41, 1);
    goto corral_source_split_8220;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.1, out_$p40);
    goto corral_source_split_8219;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p1, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_8218;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p39, out_$i38);
    goto corral_source_split_8217;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i20, 32)), $mul.ref(24, 1));
    goto corral_source_split_8216;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i64(out_$i34, out_$i37);
    goto corral_source_split_8215;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    out_$i37 := $mul.i64(out_$i36, 32);
    goto corral_source_split_8214;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i32.i64(out_$i35);
    goto corral_source_split_8213;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i13, 1);
    goto corral_source_split_8212;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i64($M.1, out_$p33);
    goto corral_source_split_8211;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p1, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_8210;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p32, 0);
    goto corral_source_split_8209;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i20, 32)), $mul.ref(16, 1));
    goto corral_source_split_8208;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p31, out_$i30);
    goto corral_source_split_8207;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i20, 32)), $mul.ref(8, 1));
    goto corral_source_split_8206;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} out_$i30 := sg_phys(out_$p17);
    goto corral_source_split_8205;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p29, out_$i23);
    goto corral_source_split_8204;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i20, 32)), $mul.ref(4, 1));
    goto corral_source_split_8203;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p28, 0);
    goto corral_source_split_8202;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i20, 32)), $mul.ref(0, 1));
    goto corral_source_split_8201;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} sg_set_page(out_$p17, out_$p24, out_$i23, 0);
    goto corral_source_split_8200;

  $bb10:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i64(out_$i25, 0);
    goto corral_source_split_8194;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_8193;

  SeqInstr_204:
    goto corral_source_split_8192;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} out_$p24 := alloc_pages(208, 0);
    goto SeqInstr_203;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8191;

  $bb7:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := 4096;
    goto $bb8;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i11;
    goto $bb8;

  $bb6:
    assume out_$i22 == 1;
    goto corral_source_split_8189;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    out_$i22 := $ugt.i32(4096, out_$i11);
    goto corral_source_split_8187;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    goto corral_source_split_8186;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i32.i64(out_$i13);
    goto corral_source_split_8185;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.1, out_$p18);
    goto corral_source_split_8184;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p1, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_8183;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p15, $mul.ref(out_$i16, 40));
    goto corral_source_split_8182;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i32.i64(out_$i13);
    goto corral_source_split_8181;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.1, out_$p14);
    goto corral_source_split_8180;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p1, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_8179;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.1, out_$p12);
    call {:si_unique_call 1522} {:cexpr "ix"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_8178;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p1, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_8177;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p12, out_$i13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i11 := skd_skreq_prep_buffering_loop_$bb4(in_$p1, out_$p12, out_$i13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i11);
    return;

  exit:
    return;
}



procedure skd_skreq_prep_buffering_loop_$bb4(in_$p1: ref, in_$p12: ref, in_$i13: i32, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i22: i1, in_$i23: i32, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i32, in_$i36: i64, in_$i37: i64, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i11: i32) returns (out_$p12: ref, out_$i13: i32, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i22: i1, out_$i23: i32, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i32, out_$i36: i64, out_$i37: i64, out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i11: i32);
  modifies $M.1, assertsPassed;



implementation sg_assign_page_loop_$bb11()
{

  entry:
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb11_dummy:
    call {:si_unique_call 1} sg_assign_page_loop_$bb11();
    return;

  exit:
    return;
}



procedure sg_assign_page_loop_$bb11();



implementation sg_assign_page_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} sg_assign_page_loop_$bb7();
    return;

  exit:
    return;
}



procedure sg_assign_page_loop_$bb7();



implementation sg_assign_page_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} sg_assign_page_loop_$bb3();
    return;

  exit:
    return;
}



procedure sg_assign_page_loop_$bb3();



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i2: i64, in_$p4: ref, in_$i5: i32, in_$p7: ref, in_$i10: i32, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i32, in_$i72: i1, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$i85: i32, in_$i86: i32, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$i93: i1, in_$p94: ref, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_vslice_dummy_var_243: i32, in_vslice_dummy_var_244: i32) returns (out_$i10: i32, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i32, out_$i72: i1, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$i85: i32, out_$i86: i32, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$i93: i1, out_$p94: ref, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_vslice_dummy_var_243: i32, out_vslice_dummy_var_244: i32)
{

  entry:
    out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i28, out_$i29, out_$p30, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_vslice_dummy_var_243, out_vslice_dummy_var_244 := in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i28, in_$i29, in_$p30, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$p62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$p70, in_$i71, in_$i72, in_$p73, in_$i74, in_$i75, in_$p76, in_$p77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$p84, in_$i85, in_$i86, in_$i87, in_$i88, in_$p89, in_$i90, in_$i91, in_$i92, in_$i93, in_$p94, in_$i95, in_$i96, in_$i97, in_$i98, in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$p105, in_vslice_dummy_var_243, in_vslice_dummy_var_244;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1639} out_$i10 := __VERIFIER_nondet_int();
    call {:si_unique_call 1640} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i10);
    call {:si_unique_call 1641} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i10);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb36_dummy;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb17:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1646} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8609;

  SeqInstr_228:
    goto corral_source_split_8608;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} out_vslice_dummy_var_243 := skd_bdev_ioctl(out_$p25, out_$i26, in_$i5, in_$i2);
    goto SeqInstr_227;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.45, in_$p0);
    goto corral_source_split_8607;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    out_$p25 := $M.44;
    goto corral_source_split_8606;

  $bb26:
    assume out_$i24 == 1;
    goto corral_source_split_8605;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i23, 1);
    goto corral_source_split_8603;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    out_$i23 := $M.47;
    goto corral_source_split_8602;

  $bb24:
    assume out_$i22 == 1;
    goto corral_source_split_8601;

  $bb19:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i19, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i19, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_8595:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1642} out_$i19 := __VERIFIER_nondet_int();
    call {:si_unique_call 1643} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i19);
    call {:si_unique_call 1644} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i19);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i18 == 1;
    goto corral_source_split_8595;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i17, 0);
    goto corral_source_split_8593;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    out_$i17 := $M.47;
    goto corral_source_split_8592;

  $bb14:
    assume out_$i16 == 1;
    goto corral_source_split_8591;

  $bb12:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i10, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb3:
    assume out_$i11 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i10, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(out_$i10, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb31:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1648} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8614;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} out_vslice_dummy_var_244 := skd_bdev_getgeo(out_$p30, in_$p4);
    goto corral_source_split_8613;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    out_$p30 := $M.44;
    goto corral_source_split_8612;

  $bb30:
    assume out_$i29 == 1;
    goto corral_source_split_8611;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i28, 1);
    goto corral_source_split_8599;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    out_$i28 := $M.47;
    goto corral_source_split_8598;

  $bb21:
    assume out_$i21 == 1;
    goto corral_source_split_8597;

  $bb20:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i19, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} ldv_stop();
    goto corral_source_split_8616;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb22:
    assume {:verifier.code 0} true;
    assume !(out_$i21 == 1);
    goto $bb23;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb23;

  $bb38:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_231:
    goto corral_source_split_8619;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} choose_timer_1();
    goto SeqInstr_230;

  $bb37:
    assume out_$i33 == 1;
    goto corral_source_split_8618;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_8589;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    out_$i32 := $M.48;
    goto corral_source_split_8588;

  $bb13:
    assume !(out_$i15 == 1);
    goto corral_source_split_8587;

  $bb41:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb52;

  $bb54:
    assume {:verifier.code 0} true;
    assume !(out_$i43 == 1);
    goto $bb52;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 0);
    goto corral_source_split_8633;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    out_$i42 := $M.49;
    goto corral_source_split_8632;

  $bb50:
    assume out_$i41 == 1;
    goto corral_source_split_8631;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 3);
    goto corral_source_split_8629;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    out_$i40 := $M.50;
    goto corral_source_split_8628;

  $bb48:
    assume out_$i39 == 1;
    goto corral_source_split_8627;

  $bb43:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i36, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i37 := $slt.i32(out_$i36, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_8621:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1651} out_$i36 := __VERIFIER_nondet_int();
    call {:si_unique_call 1652} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i36);
    call {:si_unique_call 1653} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i36);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i35 == 1;
    goto corral_source_split_8621;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_8577;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    out_$i34 := $M.50;
    goto corral_source_split_8576;

  $bb5:
    assume out_$i12 == 1;
    goto corral_source_split_8575;

  $bb4:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i10, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb59:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb64:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_8655;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i49 := $M.53;
    goto corral_source_split_8654;

  $bb61:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} ldv_initialize_block_device_operations_4();
    goto corral_source_split_8652;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1662} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8651;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} ldv_initialize_pci_driver_3();
    goto corral_source_split_8650;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1660} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8649;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1659} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8648;

  $bb60:
    assume out_$i48 == 1;
    goto corral_source_split_8647;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i47, 0);
    goto corral_source_split_8645;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    out_$i47 := $M.53;
    goto corral_source_split_8644;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $M.53 := out_$i46;
    call {:si_unique_call 1658} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_8643;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} out_$i46 := skd_init();
    goto corral_source_split_8642;

  $bb58:
    assume out_$i45 == 1;
    goto corral_source_split_8641;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 1);
    goto corral_source_split_8625;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    out_$i44 := $M.50;
    goto corral_source_split_8624;

  $bb45:
    assume out_$i38 == 1;
    goto corral_source_split_8623;

  $bb44:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i36, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} ldv_stop();
    goto corral_source_split_8660;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb46:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb47;

  $bb49:
    assume {:verifier.code 0} true;
    assume !(out_$i39 == 1);
    goto $bb47;

  $bb71:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb87:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb89:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $M.49 := out_$i67;
    call {:si_unique_call 1672} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_8695;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i66, 1);
    goto corral_source_split_8694;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    out_$i66 := $M.49;
    goto corral_source_split_8693;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1671} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8692;

  $bb88:
    assume out_$i65 == 1;
    goto corral_source_split_8691;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 0);
    goto corral_source_split_8689;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    out_$i64 := $M.54;
    goto corral_source_split_8688;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $M.54 := out_$i63;
    call {:si_unique_call 1670} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_8687;

  SeqInstr_234:
    goto corral_source_split_8686;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} out_$i63 := skd_pci_probe(out_$p62, in_$p7);
    goto SeqInstr_233;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    out_$p62 := $M.43;
    goto corral_source_split_8685;

  $bb86:
    assume out_$i61 == 1;
    goto corral_source_split_8684;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, 1);
    goto corral_source_split_8682;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    out_$i60 := $M.51;
    goto corral_source_split_8681;

  $bb84:
    assume out_$i59 == 1;
    goto corral_source_split_8680;

  $bb82:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i53, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb73:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i58 := $slt.i32(out_$i53, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb72:
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i53, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_8662:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1666} out_$i53 := __VERIFIER_nondet_int();
    call {:si_unique_call 1667} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i53);
    call {:si_unique_call 1668} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i53);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb70:
    assume out_$i52 == 1;
    goto corral_source_split_8662;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, 0);
    goto corral_source_split_8581;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    out_$i51 := $M.51;
    goto corral_source_split_8580;

  $bb7:
    assume out_$i13 == 1;
    goto corral_source_split_8579;

  $bb6:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i10, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb97:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $M.51 := 3;
    call {:si_unique_call 1676} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8708;

  SeqInstr_240:
    goto corral_source_split_8707;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} skd_pci_shutdown(out_$p73);
    goto SeqInstr_239;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    out_$p73 := $M.43;
    goto corral_source_split_8706;

  $bb96:
    assume out_$i72 == 1;
    goto corral_source_split_8705;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i71, 2);
    goto corral_source_split_8703;

  $bb95:
    assume {:verifier.code 0} true;
    out_$i71 := $M.51;
    goto corral_source_split_8702;

  $bb94:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $M.51 := 3;
    call {:si_unique_call 1674} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8700;

  SeqInstr_237:
    goto corral_source_split_8699;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} skd_pci_shutdown(out_$p70);
    goto SeqInstr_236;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    out_$p70 := $M.43;
    goto corral_source_split_8698;

  $bb93:
    assume out_$i69 == 1;
    goto corral_source_split_8697;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 4);
    goto corral_source_split_8678;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    out_$i68 := $M.51;
    goto corral_source_split_8677;

  $bb83:
    assume !(out_$i58 == 1);
    goto corral_source_split_8676;

  $bb100:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb102:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $M.51 := 4;
    call {:si_unique_call 1679} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_8720;

  $bb101:
    assume out_$i81 == 1;
    goto corral_source_split_8719;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i80, 0);
    goto corral_source_split_8717;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    out_$i80 := $M.55;
    goto corral_source_split_8716;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $M.55 := out_$i79;
    call {:si_unique_call 1678} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_8715;

  SeqInstr_243:
    goto corral_source_split_8714;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} out_$i79 := skd_pci_suspend(out_$p76, out_$i78);
    goto SeqInstr_242;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.46, out_$p77);
    goto corral_source_split_8713;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8712;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    out_$p76 := $M.43;
    goto corral_source_split_8711;

  $bb99:
    assume out_$i75 == 1;
    goto corral_source_split_8710;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 2);
    goto corral_source_split_8666;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    out_$i74 := $M.51;
    goto corral_source_split_8665;

  $bb75:
    assume out_$i55 == 1;
    goto corral_source_split_8664;

  $bb74:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := $slt.i32(out_$i53, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb112:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $M.49 := out_$i96;
    call {:si_unique_call 1688} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_8750;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    out_$i96 := $sub.i32(out_$i95, 1);
    goto corral_source_split_8749;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    out_$i95 := $M.49;
    goto corral_source_split_8748;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1687} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8747;

  SeqInstr_252:
    goto corral_source_split_8746;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} skd_pci_remove(out_$p94);
    goto SeqInstr_251;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    out_$p94 := $M.43;
    goto corral_source_split_8745;

  $bb111:
    assume out_$i93 == 1;
    goto corral_source_split_8744;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i92, 2);
    goto corral_source_split_8742;

  $bb110:
    assume {:verifier.code 0} true;
    out_$i92 := $M.51;
    goto corral_source_split_8741;

  $bb109:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $M.49 := out_$i91;
    call {:si_unique_call 1685} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_8739;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    out_$i91 := $sub.i32(out_$i90, 1);
    goto corral_source_split_8738;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    out_$i90 := $M.49;
    goto corral_source_split_8737;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1684} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8736;

  SeqInstr_249:
    goto corral_source_split_8735;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} skd_pci_remove(out_$p89);
    goto SeqInstr_248;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    out_$p89 := $M.43;
    goto corral_source_split_8734;

  $bb108:
    assume out_$i88 == 1;
    goto corral_source_split_8733;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i87, 3);
    goto corral_source_split_8731;

  $bb107:
    assume {:verifier.code 0} true;
    out_$i87 := $M.51;
    goto corral_source_split_8730;

  $bb106:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $M.49 := out_$i86;
    call {:si_unique_call 1682} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_8728;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    out_$i86 := $sub.i32(out_$i85, 1);
    goto corral_source_split_8727;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    out_$i85 := $M.49;
    goto corral_source_split_8726;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1681} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8725;

  SeqInstr_246:
    goto corral_source_split_8724;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} skd_pci_remove(out_$p84);
    goto SeqInstr_245;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    out_$p84 := $M.43;
    goto corral_source_split_8723;

  $bb105:
    assume out_$i83 == 1;
    goto corral_source_split_8722;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i82, 4);
    goto corral_source_split_8670;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    out_$i82 := $M.51;
    goto corral_source_split_8669;

  $bb77:
    assume out_$i56 == 1;
    goto corral_source_split_8668;

  $bb76:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    out_$i56 := $slt.i32(out_$i53, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb115:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb117:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1691} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8760;

  $bb116:
    assume out_$i102 == 1;
    goto corral_source_split_8759;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i101, 0);
    goto corral_source_split_8757;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    out_$i101 := $M.56;
    goto corral_source_split_8756;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $M.56 := out_$i100;
    call {:si_unique_call 1690} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_8755;

  SeqInstr_255:
    goto corral_source_split_8754;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} out_$i100 := skd_pci_resume(out_$p99);
    goto SeqInstr_254;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    out_$p99 := $M.43;
    goto corral_source_split_8753;

  $bb114:
    assume out_$i98 == 1;
    goto corral_source_split_8752;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 4);
    goto corral_source_split_8674;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    out_$i97 := $M.51;
    goto corral_source_split_8673;

  $bb79:
    assume out_$i57 == 1;
    goto corral_source_split_8672;

  $bb78:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i53, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} ldv_stop();
    goto corral_source_split_8762;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb80:
    assume {:verifier.code 0} true;
    assume !(out_$i57 == 1);
    goto $bb81;

  $bb85:
    assume {:verifier.code 0} true;
    assume !(out_$i59 == 1);
    goto $bb81;

  $bb124:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    goto $bb125;

  SeqInstr_258:
    goto corral_source_split_8766;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} choose_timer_2(out_$p105);
    goto SeqInstr_257;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    out_$p105 := $M.20;
    goto corral_source_split_8765;

  $bb123:
    assume out_$i104 == 1;
    goto corral_source_split_8764;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    out_$i104 := $ne.i32(out_$i103, 0);
    goto corral_source_split_8585;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    out_$i103 := $M.52;
    goto corral_source_split_8584;

  $bb9:
    assume out_$i14 == 1;
    goto corral_source_split_8583;

  $bb8:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i10, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} ldv_stop();
    goto corral_source_split_8768;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i14 == 1);
    goto $bb11;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i16 == 1);
    goto $bb11;

  $bb36_dummy:
    call {:si_unique_call 1} out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i28, out_$i29, out_$p30, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_vslice_dummy_var_243, out_vslice_dummy_var_244 := main_loop_$bb1(in_$p0, in_$p1, in_$i2, in_$p4, in_$i5, in_$p7, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i28, out_$i29, out_$p30, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_vslice_dummy_var_243, out_vslice_dummy_var_244);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i2: i64, in_$p4: ref, in_$i5: i32, in_$p7: ref, in_$i10: i32, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i32, in_$i72: i1, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$i85: i32, in_$i86: i32, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$i93: i1, in_$p94: ref, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_vslice_dummy_var_243: i32, in_vslice_dummy_var_244: i32) returns (out_$i10: i32, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i32, out_$i72: i1, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$i85: i32, out_$i86: i32, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$i93: i1, out_$p94: ref, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_vslice_dummy_var_243: i32, out_vslice_dummy_var_244: i32);
  modifies $M.47, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.1, $CurrAddr, $M.11, assertsPassed, $M.12, $M.14, $M.16, $M.18, $M.13, $M.15, $M.17, $M.19, $M.10, $M.20, $M.44, $M.43, $M.51, $M.50, $M.53, $M.38, $M.22, $M.27, $M.40, $M.41, $M.26, $M.39, $M.49, $M.54, $M.2, $M.37, $M.55, $M.9, $M.36, $M.56;


