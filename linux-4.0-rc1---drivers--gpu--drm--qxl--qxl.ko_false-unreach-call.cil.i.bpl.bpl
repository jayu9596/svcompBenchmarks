var $M.2: [ref]i32;

var $M.6: [ref]i8;

var $M.32: [ref]ref;

var $M.33: [ref]ref;

var $M.34: [ref]ref;

var $M.35: i8;

var $M.36: i8;

var $M.37: i8;

var $M.38: [ref]i32;

var $M.39: [ref]i64;

var $M.40: i32;

var $M.41: i32;

var $M.42: [ref]i8;

var $M.43: [ref]i8;

var $M.44: i32;

var $M.45: i32;

var $M.46: [ref]ref;

var $M.47: [ref]i32;

var $M.48: [ref]i32;

var $M.49: i8;

var $M.50: i32;

var $M.51: i8;

var $M.52: i32;

var $M.53: i32;

var $M.54: i8;

var $M.55: i8;

var $M.56: [ref]i32;

var $M.57: [ref]ref;

var $M.58: [ref]i32;

var $M.59: [ref]i32;

var $M.60: [ref]i32;

var $M.61: [ref]i64;

var $M.62: [ref]i32;

var $M.63: [ref]i32;

var $M.64: i32;

var $M.65: i8;

var $M.66: i32;

var $M.67: [ref]i32;

var $M.68: [ref]i32;

var $M.69: [ref]i32;

var $M.70: [ref]i32;

var $M.71: [ref]i64;

var $M.72: i32;

var $M.73: [ref]ref;

var $M.74: [ref]i8;

var $M.75: i32;

var $M.76: ref;

var $M.77: [ref]i8;

var $M.78: [ref]i16;

var $M.79: [ref]i16;

var $M.80: [ref]i16;

var $M.81: [ref]i16;

var $M.82: [ref]ref;

var $M.83: [ref]i32;

var $M.84: [ref]i32;

var $M.85: [ref]ref;

var $M.86: [ref]ref;

var $M.87: [ref]i32;

var $M.88: [ref]i32;

var $M.89: [ref]ref;

var $M.90: [ref]ref;

var $M.91: [ref]ref;

var $M.92: [ref]i32;

var $M.93: i32;

var $M.94: [ref]ref;

var $M.95: [ref]ref;

var $M.96: [ref]i32;

var $M.97: [ref]i32;

var $M.98: [ref]ref;

var $M.99: [ref]ref;

var $M.100: [ref]ref;

var $M.101: [ref]ref;

var $M.102: [ref]ref;

var $M.103: [ref]ref;

var $M.104: [ref]i32;

var $M.105: [ref]i32;

var $M.106: [ref]i32;

var $M.107: [ref]i32;

var $M.108: [ref]i32;

var $M.109: [ref]i32;

var $M.110: [ref]ref;

var $M.111: [ref]i64;

var $M.112: [ref]i8;

var $M.113: [ref]ref;

var $M.114: [ref]ref;

var $M.115: i32;

var $M.121: i32;

var $M.122: i32;

var $M.124: [ref]ref;

var $M.125: [ref]ref;

var $M.126: [ref]ref;

var $M.127: [ref]ref;

var $M.128: [ref]ref;

var $M.129: [ref]ref;

var $M.130: [ref]ref;

var $M.131: [ref]ref;

var $M.132: [ref]ref;

var $M.133: [ref]ref;

var $M.134: [ref]ref;

var $M.135: [ref]ref;

var $M.136: [ref]ref;

var $M.137: [ref]ref;

var $M.138: [ref]ref;

var $M.139: [ref]ref;

var $M.140: [ref]ref;

var $M.141: [ref]ref;

var $M.142: [ref]ref;

var $M.143: [ref]ref;

var $M.144: [ref]ref;

var $M.145: [ref]ref;

var $M.146: [ref]ref;

var $M.147: [ref]ref;

var $M.148: [ref]ref;

var $M.149: [ref]ref;

var $M.150: [ref]ref;

var $M.151: [ref]ref;

var $M.152: [ref]ref;

var $M.153: [ref]ref;

var $M.154: [ref]ref;

var $M.155: [ref]ref;

var $M.156: [ref]ref;

var $M.157: [ref]ref;

var $M.158: [ref]ref;

var $M.159: [ref]ref;

var $M.160: [ref]ref;

var $M.161: [ref]ref;

var $M.162: [ref]ref;

var $M.163: [ref]ref;

var $M.164: [ref]ref;

var $M.165: [ref]ref;

var $M.166: [ref]ref;

var $M.167: [ref]ref;

var $M.168: [ref]ref;

var $M.169: [ref]ref;

var $M.170: [ref]ref;

var $M.171: [ref]i32;

var $M.172: [ref]ref;

var $M.173: [ref]ref;

var $M.174: [ref]ref;

var $M.175: [ref]ref;

var $M.176: [ref]ref;

var $M.177: [ref]ref;

var $M.178: [ref]ref;

var $M.179: [ref]ref;

var $M.180: [ref]ref;

var $M.181: [ref]i32;

var $M.182: [ref]i32;

var $M.183: i32;

var $M.184: i32;

var $M.185: [ref]ref;

var $M.186: [ref]ref;

var $M.187: [ref]ref;

var $M.188: [ref]ref;

var $M.189: i32;

var $M.190: i32;

var $M.191: i32;

var $M.192: i32;

var $M.193: i32;

var $M.194: i32;

var $M.195: i32;

var $M.196: i32;

var $M.197: i32;

var $M.198: i32;

var $M.199: i32;

var $M.200: i32;

var $M.201: i16;

var $M.202: i32;

var $M.203: i32;

var $M.204: i32;

var $M.205: i32;

var $M.206: i32;

var $M.207: [ref]i32;

var $M.208: [ref]i32;

var $M.209: [ref]ref;

var $M.210: [ref]i32;

var $M.211: [ref]ref;

var $M.271: [ref]i8;

var $M.403: [ref]i32;

var $M.404: [ref]i32;

var $M.405: [ref]i32;

var $M.406: [ref]i32;

var $M.407: [ref]i32;

var $M.408: [ref]i32;

var $M.409: [ref]i64;

var $M.410: [ref]i8;

var $M.411: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 1360305);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32896));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const qxl_num_crtc: ref;

axiom qxl_num_crtc == $sub.ref(0, 1028);

const qxl_log_level: ref;

axiom qxl_log_level == $sub.ref(0, 2056);

const {:count 7} qxl_ioctls: ref;

axiom qxl_ioctls == $sub.ref(0, 3304);

const {:count 10} .str.60: ref;

axiom .str.60 == $sub.ref(0, 4338);

const {:count 8} .str.61: ref;

axiom .str.61 == $sub.ref(0, 5370);

const {:count 15} .str.62: ref;

axiom .str.62 == $sub.ref(0, 6409);

const {:count 16} .str.63: ref;

axiom .str.63 == $sub.ref(0, 7449);

const {:count 13} .str.64: ref;

axiom .str.64 == $sub.ref(0, 8486);

const {:count 14} .str.65: ref;

axiom .str.65 == $sub.ref(0, 9524);

const {:count 15} .str.66: ref;

axiom .str.66 == $sub.ref(0, 10563);

const ldv_linux_lib_idr_idr_surf_id_idr_of_qxl_device: ref;

axiom ldv_linux_lib_idr_idr_surf_id_idr_of_qxl_device == $sub.ref(0, 11591);

const ldv_linux_lib_idr_idr_release_idr_of_qxl_device: ref;

axiom ldv_linux_lib_idr_idr_release_idr_of_qxl_device == $sub.ref(0, 12619);

const ldv_linux_kernel_sched_completion_completion: ref;

axiom ldv_linux_kernel_sched_completion_completion == $sub.ref(0, 13647);

const ldv_linux_kernel_locking_spinlock_spin_surf_id_idr_lock_of_qxl_device: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_surf_id_idr_lock_of_qxl_device == $sub.ref(0, 14675);

const ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct == $sub.ref(0, 15703);

const ldv_linux_kernel_locking_spinlock_spin_release_idr_lock_of_qxl_device: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_release_idr_lock_of_qxl_device == $sub.ref(0, 16731);

const ldv_linux_kernel_locking_spinlock_spin_ptl: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_ptl == $sub.ref(0, 17759);

const ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data == $sub.ref(0, 18787);

const ldv_linux_kernel_locking_spinlock_spin_lru_lock_of_ttm_bo_global: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lru_lock_of_ttm_bo_global == $sub.ref(0, 19815);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_ttm_mem_global: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_ttm_mem_global == $sub.ref(0, 20843);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_qxl_ring: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_qxl_ring == $sub.ref(0, 21871);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN == $sub.ref(0, 22899);

const ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 23927);

const ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode == $sub.ref(0, 24955);

const ldv_linux_kernel_locking_spinlock_spin_event_lock_of_drm_device: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_event_lock_of_drm_device == $sub.ref(0, 25983);

const ldv_linux_kernel_locking_spinlock_spin_delayed_ops_lock_of_qxl_fbdev: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_delayed_ops_lock_of_qxl_fbdev == $sub.ref(0, 27011);

const ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct == $sub.ref(0, 28039);

const __ldv_in_interrupt_context: ref;

axiom __ldv_in_interrupt_context == $sub.ref(0, 29064);

const ldv_linux_block_queue_queue_state: ref;

axiom ldv_linux_block_queue_queue_state == $sub.ref(0, 30092);

const ldv_linux_block_genhd_disk_state: ref;

axiom ldv_linux_block_genhd_disk_state == $sub.ref(0, 31120);

const qxl_fence_ops: ref;

axiom qxl_fence_ops == $sub.ref(0, 32216);

const {:count 3} release_size_per_bo: ref;

axiom release_size_per_bo == $sub.ref(0, 33252);

const {:count 3} releases_per_bo: ref;

axiom releases_per_bo == $sub.ref(0, 34288);

const {:count 2} qxl_debugfs_list: ref;

axiom qxl_debugfs_list == $sub.ref(0, 35376);

const qxl_defio: ref;

axiom qxl_defio == $sub.ref(0, 36600);

const qxlfb_ops: ref;

axiom qxlfb_ops == $sub.ref(0, 37816);

const qxl_fb_helper_funcs: ref;

axiom qxl_fb_helper_funcs == $sub.ref(0, 38872);

const qxl_backend_func: ref;

axiom qxl_backend_func == $sub.ref(0, 39920);

const qxl_bo_driver: ref;

axiom qxl_bo_driver == $sub.ref(0, 41048);

const qxl_connector_helper_funcs: ref;

axiom qxl_connector_helper_funcs == $sub.ref(0, 42096);

const qxl_enc_helper_funcs: ref;

axiom qxl_enc_helper_funcs == $sub.ref(0, 43216);

const qxl_enc_funcs: ref;

axiom qxl_enc_funcs == $sub.ref(0, 44256);

const qxl_connector_funcs: ref;

axiom qxl_connector_funcs == $sub.ref(0, 45384);

const qxl_crtc_helper_funcs: ref;

axiom qxl_crtc_helper_funcs == $sub.ref(0, 46520);

const qxl_crtc_funcs: ref;

axiom qxl_crtc_funcs == $sub.ref(0, 47664);

const qxl_mode_funcs: ref;

axiom qxl_mode_funcs == $sub.ref(0, 48720);

const qxl_fb_funcs: ref;

axiom qxl_fb_funcs == $sub.ref(0, 49768);

const qxl_modeset: ref;

axiom qxl_modeset == $sub.ref(0, 50796);

const qxl_pm_ops: ref;

axiom qxl_pm_ops == $sub.ref(0, 52004);

const {:count 3} pciidlist: ref;

axiom pciidlist == $sub.ref(0, 53124);

const qxl_pci_driver: ref;

axiom qxl_pci_driver == $sub.ref(0, 54460);

const qxl_fops: ref;

axiom qxl_fops == $sub.ref(0, 55724);

const qxl_driver: ref;

axiom qxl_driver == $sub.ref(0, 57228);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_update_lock_of_backlight_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_update_lock_of_backlight_device == $sub.ref(0, 58253);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_update_area_mutex_of_qxl_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_update_area_mutex_of_qxl_device == $sub.ref(0, 59278);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_surf_evict_mutex_of_qxl_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_surf_evict_mutex_of_qxl_device == $sub.ref(0, 60303);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_struct_mutex_of_drm_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_struct_mutex_of_drm_device == $sub.ref(0, 61328);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_release_mutex_of_qxl_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_release_mutex_of_qxl_device == $sub.ref(0, 62353);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_qxl_gem: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_qxl_gem == $sub.ref(0, 63378);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device == $sub.ref(0, 64403);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock_of_fb_info: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock_of_fb_info == $sub.ref(0, 65428);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock == $sub.ref(0, 66453);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode == $sub.ref(0, 67478);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_base_of_ww_mutex: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_base_of_ww_mutex == $sub.ref(0, 68503);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_async_io_mutex_of_qxl_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_async_io_mutex_of_qxl_device == $sub.ref(0, 69528);

const LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS: ref;

axiom LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS == $sub.ref(0, 70556);

const ttm_vm_ops: ref;

axiom ttm_vm_ops == $sub.ref(0, 71588);

const qxl_ttm_vm_ops: ref;

axiom qxl_ttm_vm_ops == $sub.ref(0, 72692);

const ldv_thread_9: ref;

axiom ldv_thread_9 == $sub.ref(0, 73732);

const ldv_thread_8: ref;

axiom ldv_thread_8 == $sub.ref(0, 74772);

const ldv_thread_7: ref;

axiom ldv_thread_7 == $sub.ref(0, 75812);

const ldv_thread_6: ref;

axiom ldv_thread_6 == $sub.ref(0, 76852);

const ldv_thread_5: ref;

axiom ldv_thread_5 == $sub.ref(0, 77892);

const ldv_thread_4: ref;

axiom ldv_thread_4 == $sub.ref(0, 78932);

const ldv_thread_3: ref;

axiom ldv_thread_3 == $sub.ref(0, 79972);

const ldv_thread_2: ref;

axiom ldv_thread_2 == $sub.ref(0, 81012);

const ldv_thread_18: ref;

axiom ldv_thread_18 == $sub.ref(0, 82052);

const ldv_thread_15: ref;

axiom ldv_thread_15 == $sub.ref(0, 83092);

const ldv_thread_14: ref;

axiom ldv_thread_14 == $sub.ref(0, 84132);

const ldv_thread_13: ref;

axiom ldv_thread_13 == $sub.ref(0, 85172);

const ldv_thread_12: ref;

axiom ldv_thread_12 == $sub.ref(0, 86212);

const ldv_thread_11: ref;

axiom ldv_thread_11 == $sub.ref(0, 87252);

const ldv_thread_10: ref;

axiom ldv_thread_10 == $sub.ref(0, 88292);

const ldv_thread_1: ref;

axiom ldv_thread_1 == $sub.ref(0, 89332);

const ldv_thread_0: ref;

axiom ldv_thread_0 == $sub.ref(0, 90372);

const {:count 3} __mod_pci__pciidlist_device_table: ref;

axiom __mod_pci__pciidlist_device_table == $sub.ref(0, 91492);

const ldv_linux_usb_urb_urb_state: ref;

axiom ldv_linux_usb_urb_urb_state == $sub.ref(0, 92520);

const ldv_linux_usb_register_probe_state: ref;

axiom ldv_linux_usb_register_probe_state == $sub.ref(0, 93548);

const ldv_linux_usb_gadget_usb_gadget: ref;

axiom ldv_linux_usb_gadget_usb_gadget == $sub.ref(0, 94576);

const ldv_linux_usb_coherent_coherent_state: ref;

axiom ldv_linux_usb_coherent_coherent_state == $sub.ref(0, 95604);

const locksocknumber: ref;

axiom locksocknumber == $sub.ref(0, 96632);

const rtnllocknumber: ref;

axiom rtnllocknumber == $sub.ref(0, 97660);

const ldv_linux_net_register_probe_state: ref;

axiom ldv_linux_net_register_probe_state == $sub.ref(0, 98688);

const ldv_linux_mmc_sdio_func_sdio_element: ref;

axiom ldv_linux_mmc_sdio_func_sdio_element == $sub.ref(0, 99714);

const ldv_linux_kernel_rcu_update_lock_rcu_nested: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_nested == $sub.ref(0, 100742);

const ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched == $sub.ref(0, 101770);

const ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh == $sub.ref(0, 102798);

const ldv_linux_kernel_rcu_srcu_srcu_nested: ref;

axiom ldv_linux_kernel_rcu_srcu_srcu_nested == $sub.ref(0, 103826);

const ldv_linux_kernel_module_module_refcounter: ref;

axiom ldv_linux_kernel_module_module_refcounter == $sub.ref(0, 104854);

const ldv_linux_kernel_locking_rwlock_wlock: ref;

axiom ldv_linux_kernel_locking_rwlock_wlock == $sub.ref(0, 105882);

const ldv_linux_kernel_locking_rwlock_rlock: ref;

axiom ldv_linux_kernel_locking_rwlock_rlock == $sub.ref(0, 106910);

const ldv_linux_fs_sysfs_sysfs: ref;

axiom ldv_linux_fs_sysfs_sysfs == $sub.ref(0, 107938);

const ldv_linux_fs_char_dev_usb_gadget_chrdev: ref;

axiom ldv_linux_fs_char_dev_usb_gadget_chrdev == $sub.ref(0, 108966);

const ldv_linux_drivers_base_class_usb_gadget_class: ref;

axiom ldv_linux_drivers_base_class_usb_gadget_class == $sub.ref(0, 109994);

const ldv_linux_block_request_blk_rq: ref;

axiom ldv_linux_block_request_blk_rq == $sub.ref(0, 111022);

const ldv_linux_arch_io_iomem: ref;

axiom ldv_linux_arch_io_iomem == $sub.ref(0, 112050);

const ldv_linux_alloc_usb_lock_lock: ref;

axiom ldv_linux_alloc_usb_lock_lock == $sub.ref(0, 113078);

const qxl_max_ioctls: ref;

axiom qxl_max_ioctls == $sub.ref(0, 114106);

const {:count 33} .str.7: ref;

axiom .str.7 == $sub.ref(0, 115163);

const {:count 21} .str.186: ref;

axiom .str.186 == $sub.ref(0, 116208);

const {:count 30} .str.31: ref;

axiom .str.31 == $sub.ref(0, 117262);

const {:count 48} .str.30: ref;

axiom .str.30 == $sub.ref(0, 118334);

const {:count 38} .str.24: ref;

axiom .str.24 == $sub.ref(0, 119396);

const oops_in_progress: ref;

axiom oops_in_progress == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const debug_locks_silent: ref;

axiom debug_locks_silent == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 25} .str.190: ref;

axiom .str.190 == $sub.ref(0, 120445);

const {:count 24} .str.191: ref;

axiom .str.191 == $sub.ref(0, 121493);

const {:count 14} .str.192: ref;

axiom .str.192 == $sub.ref(0, 122531);

const __tracepoint_fence_emit: ref;

axiom __tracepoint_fence_emit == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 29} .str.189: ref;

axiom .str.189 == $sub.ref(0, 123584);

const {:count 41} .str.176: ref;

axiom .str.176 == $sub.ref(0, 124649);

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const debug_locks: ref;

axiom debug_locks == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const rcu_sched_lock_map: ref;

axiom rcu_sched_lock_map == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 34} .str.171: ref;

axiom .str.171 == $sub.ref(0, 125707);

const {:count 30} .str.33: ref;

axiom .str.33 == $sub.ref(0, 126761);

const cpu_number: ref;

axiom cpu_number == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const kgdb_active: ref;

axiom kgdb_active == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

const {:count 22} .str.69: ref;

axiom .str.69 == $sub.ref(0, 127807);

const {:count 21} .str.170: ref;

axiom .str.170 == $sub.ref(0, 128852);

const {:count 15} .str.187: ref;

axiom .str.187 == $sub.ref(0, 129891);

const {:count 24} .str.188: ref;

axiom .str.188 == $sub.ref(0, 130939);

const {:count 39} .str.40: ref;

axiom .str.40 == $sub.ref(0, 132002);

const {:count 57} .str.41: ref;

axiom .str.41 == $sub.ref(0, 133083);

const {:count 19} .str.42: ref;

axiom .str.42 == $sub.ref(0, 134126);

const {:count 4} .str.74: ref;

axiom .str.74 == $sub.ref(0, 135154);

const {:count 7} .str.75: ref;

axiom .str.75 == $sub.ref(0, 136185);

const {:count 9} .str.76: ref;

axiom .str.76 == $sub.ref(0, 137218);

const {:count 31} .str.59: ref;

axiom .str.59 == $sub.ref(0, 138273);

const {:count 32} .str.71: ref;

axiom .str.71 == $sub.ref(0, 139329);

const {:count 16} .str.72: ref;

axiom .str.72 == $sub.ref(0, 140369);

const {:count 28} .str.51: ref;

axiom .str.51 == $sub.ref(0, 141421);

const {:count 16} .str.52: ref;

axiom .str.52 == $sub.ref(0, 142461);

const {:count 38} .str.53: ref;

axiom .str.53 == $sub.ref(0, 143523);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32848));

const {:count 27} .str.20: ref;

axiom .str.20 == $sub.ref(0, 144574);

const {:count 24} .str.26: ref;

axiom .str.26 == $sub.ref(0, 145622);

const {:count 30} .str.27: ref;

axiom .str.27 == $sub.ref(0, 146676);

const {:count 19} .str.113: ref;

axiom .str.113 == $sub.ref(0, 147719);

const {:count 32} .str.114: ref;

axiom .str.114 == $sub.ref(0, 148775);

const {:count 36} .str.23: ref;

axiom .str.23 == $sub.ref(0, 149835);

const drm_debug: ref;

axiom drm_debug == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32856));

const {:count 17} .str.124: ref;

axiom .str.124 == $sub.ref(0, 150876);

const {:count 2} .str.117: ref;

axiom .str.117 == $sub.ref(0, 151902);

const {:count 19} .str.125: ref;

axiom .str.125 == $sub.ref(0, 152945);

const {:count 20} .str.126: ref;

axiom .str.126 == $sub.ref(0, 153989);

const {:count 20} .str.127: ref;

axiom .str.127 == $sub.ref(0, 155033);

const {:count 21} .str.128: ref;

axiom .str.128 == $sub.ref(0, 156078);

const {:count 20} .str.115: ref;

axiom .str.115 == $sub.ref(0, 157122);

const {:count 27} .str.8: ref;

axiom .str.8 == $sub.ref(0, 158173);

const {:count 15} .str.25: ref;

axiom .str.25 == $sub.ref(0, 159212);

const {:count 17} .str.79: ref;

axiom .str.79 == $sub.ref(0, 160253);

const {:count 25} .str.80: ref;

axiom .str.80 == $sub.ref(0, 161302);

const {:count 21} .str.81: ref;

axiom .str.81 == $sub.ref(0, 162347);

const {:count 24} .str.82: ref;

axiom .str.82 == $sub.ref(0, 163395);

const {:count 6} .str.85: ref;

axiom .str.85 == $sub.ref(0, 164425);

const {:count 6} .str.86: ref;

axiom .str.86 == $sub.ref(0, 165455);

const {:count 16} .str.83: ref;

axiom .str.83 == $sub.ref(0, 166495);

const {:count 62} .str.84: ref;

axiom .str.84 == $sub.ref(0, 167581);

const {:count 24} .str.87: ref;

axiom .str.87 == $sub.ref(0, 168629);

const {:count 19} .str.88: ref;

axiom .str.88 == $sub.ref(0, 169672);

const {:count 34} .str.89: ref;

axiom .str.89 == $sub.ref(0, 170730);

const {:count 30} .str.90: ref;

axiom .str.90 == $sub.ref(0, 171784);

const {:count 34} .str.91: ref;

axiom .str.91 == $sub.ref(0, 172842);

const {:count 22} .str.92: ref;

axiom .str.92 == $sub.ref(0, 173888);

const {:count 34} .str.93: ref;

axiom .str.93 == $sub.ref(0, 174946);

const {:count 38} .str.94: ref;

axiom .str.94 == $sub.ref(0, 176008);

const {:count 13} .str.95: ref;

axiom .str.95 == $sub.ref(0, 177045);

const {:count 3} .str.96: ref;

axiom .str.96 == $sub.ref(0, 178072);

const {:count 7} .str.97: ref;

axiom .str.97 == $sub.ref(0, 179103);

const {:count 17} .str.98: ref;

axiom .str.98 == $sub.ref(0, 180144);

const {:count 17} .str.21: ref;

axiom .str.21 == $sub.ref(0, 181185);

const {:count 21} .str.67: ref;

axiom .str.67 == $sub.ref(0, 182230);

const {:count 34} .str.68: ref;

axiom .str.68 == $sub.ref(0, 183288);

const {:count 29} .str.172: ref;

axiom .str.172 == $sub.ref(0, 184341);

const {:count 28} .str.39: ref;

axiom .str.39 == $sub.ref(0, 185393);

const {:count 66} .str.159: ref;

axiom .str.159 == $sub.ref(0, 186483);

const {:count 13} .str.34: ref;

axiom .str.34 == $sub.ref(0, 187520);

const {:count 24} .str.35: ref;

axiom .str.35 == $sub.ref(0, 188568);

const {:count 25} .str.36: ref;

axiom .str.36 == $sub.ref(0, 189617);

const {:count 10} .str.37: ref;

axiom .str.37 == $sub.ref(0, 190651);

const {:count 20} .str.38: ref;

axiom .str.38 == $sub.ref(0, 191695);

const {:count 34} .str.70: ref;

axiom .str.70 == $sub.ref(0, 192753);

const {:count 20} .str.46: ref;

axiom .str.46 == $sub.ref(0, 193797);

const {:count 21} .str.54: ref;

axiom .str.54 == $sub.ref(0, 194842);

const {:count 20} .str.55: ref;

axiom .str.55 == $sub.ref(0, 195886);

const {:count 20} .str.56: ref;

axiom .str.56 == $sub.ref(0, 196930);

const {:count 37} .str.57: ref;

axiom .str.57 == $sub.ref(0, 197991);

const {:count 27} .str.58: ref;

axiom .str.58 == $sub.ref(0, 199042);

const {:count 55} .str.2: ref;

axiom .str.2 == $sub.ref(0, 200121);

const {:count 34} .str.109: ref;

axiom .str.109 == $sub.ref(0, 201179);

const {:count 44} .str.110: ref;

axiom .str.110 == $sub.ref(0, 202247);

const {:count 49} .str.111: ref;

axiom .str.111 == $sub.ref(0, 203320);

const {:count 18} .str.112: ref;

axiom .str.112 == $sub.ref(0, 204362);

const .str: ref;

axiom .str == $sub.ref(0, 205423);

const {:count 33} .str.1: ref;

axiom .str.1 == $sub.ref(0, 206480);

const {:count 22} .str.32: ref;

axiom .str.32 == $sub.ref(0, 207526);

const {:count 47} .str.13: ref;

axiom .str.13 == $sub.ref(0, 208597);

const {:count 32} .str.14: ref;

axiom .str.14 == $sub.ref(0, 209653);

const {:count 36} .str.15: ref;

axiom .str.15 == $sub.ref(0, 210713);

const {:count 37} .str.16: ref;

axiom .str.16 == $sub.ref(0, 211774);

const {:count 57} .str.17: ref;

axiom .str.17 == $sub.ref(0, 212855);

const {:count 40} .str.18: ref;

axiom .str.18 == $sub.ref(0, 213919);

const {:count 24} .str.19: ref;

axiom .str.19 == $sub.ref(0, 214967);

const {:count 11} .str.153: ref;

axiom .str.153 == $sub.ref(0, 216002);

const {:count 12} .str.154: ref;

axiom .str.154 == $sub.ref(0, 217038);

const {:count 47} .str.49: ref;

axiom .str.49 == $sub.ref(0, 218109);

const {:count 51} .str.50: ref;

axiom .str.50 == $sub.ref(0, 219184);

const {:count 52} .str.151: ref;

axiom .str.151 == $sub.ref(0, 220260);

const {:count 37} .str.152: ref;

axiom .str.152 == $sub.ref(0, 221321);

const {:count 22} .str.99: ref;

axiom .str.99 == $sub.ref(0, 222367);

const {:count 29} .str.100: ref;

axiom .str.100 == $sub.ref(0, 223420);

const {:count 42} .str.101: ref;

axiom .str.101 == $sub.ref(0, 224486);

const {:count 47} .str.102: ref;

axiom .str.102 == $sub.ref(0, 225557);

const {:count 35} .str.103: ref;

axiom .str.103 == $sub.ref(0, 226616);

const {:count 41} .str.104: ref;

axiom .str.104 == $sub.ref(0, 227681);

const {:count 32} .str.105: ref;

axiom .str.105 == $sub.ref(0, 228737);

const {:count 43} .str.106: ref;

axiom .str.106 == $sub.ref(0, 229804);

const {:count 14} .str.107: ref;

axiom .str.107 == $sub.ref(0, 230842);

const {:count 59} .str.108: ref;

axiom .str.108 == $sub.ref(0, 231925);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32864));

const {:count 49} .str.9: ref;

axiom .str.9 == $sub.ref(0, 232998);

const {:count 9} .str.10: ref;

axiom .str.10 == $sub.ref(0, 234031);

const {:count 53} .str.11: ref;

axiom .str.11 == $sub.ref(0, 235108);

const {:count 52} .str.12: ref;

axiom .str.12 == $sub.ref(0, 236184);

const {:count 85} .str.78: ref;

axiom .str.78 == $sub.ref(0, 237293);

const {:count 27} .str.129: ref;

axiom .str.129 == $sub.ref(0, 238344);

const {:count 34} .str.3: ref;

axiom .str.3 == $sub.ref(0, 239402);

const {:count 18} .str.4: ref;

axiom .str.4 == $sub.ref(0, 240444);

const {:count 25} .str.5: ref;

axiom .str.5 == $sub.ref(0, 241493);

const {:count 28} .str.6: ref;

axiom .str.6 == $sub.ref(0, 242545);

const {:count 22} .str.47: ref;

axiom .str.47 == $sub.ref(0, 243591);

const {:count 23} .str.48: ref;

axiom .str.48 == $sub.ref(0, 244638);

const {:count 24} .str.122: ref;

axiom .str.122 == $sub.ref(0, 245686);

const {:count 16} .str.123: ref;

axiom .str.123 == $sub.ref(0, 246726);

const {:count 18} .str.132: ref;

axiom .str.132 == $sub.ref(0, 247768);

const {:count 13} .str.133: ref;

axiom .str.133 == $sub.ref(0, 248805);

const {:count 27} .str.134: ref;

axiom .str.134 == $sub.ref(0, 249856);

const {:count 39} .str.135: ref;

axiom .str.135 == $sub.ref(0, 250919);

const {:count 31} .str.136: ref;

axiom .str.136 == $sub.ref(0, 251974);

const {:count 59} .str.137: ref;

axiom .str.137 == $sub.ref(0, 253057);

const {:count 28} .str.43: ref;

axiom .str.43 == $sub.ref(0, 254109);

const {:count 22} .str.44: ref;

axiom .str.44 == $sub.ref(0, 255155);

const {:count 25} .str.45: ref;

axiom .str.45 == $sub.ref(0, 256204);

const {:count 24} .str.130: ref;

axiom .str.130 == $sub.ref(0, 257252);

const {:count 20} .str.131: ref;

axiom .str.131 == $sub.ref(0, 258296);

const {:count 16} .str.140: ref;

axiom .str.140 == $sub.ref(0, 259336);

const {:count 17} .str.138: ref;

axiom .str.138 == $sub.ref(0, 260377);

const {:count 28} .str.139: ref;

axiom .str.139 == $sub.ref(0, 261429);

const {:count 22} .str.119: ref;

axiom .str.119 == $sub.ref(0, 262475);

const {:count 16} .str.120: ref;

axiom .str.120 == $sub.ref(0, 263515);

const {:count 19} .str.121: ref;

axiom .str.121 == $sub.ref(0, 264558);

const {:count 17} .str.116: ref;

axiom .str.116 == $sub.ref(0, 265599);

const {:count 14} .str.118: ref;

axiom .str.118 == $sub.ref(0, 266637);

const {:count 17} .str.142: ref;

axiom .str.142 == $sub.ref(0, 267678);

const {:count 15} .str.144: ref;

axiom .str.144 == $sub.ref(0, 268717);

const {:count 57} .str.145: ref;

axiom .str.145 == $sub.ref(0, 269798);

const {:count 28} .str.146: ref;

axiom .str.146 == $sub.ref(0, 270850);

const {:count 38} .str.147: ref;

axiom .str.147 == $sub.ref(0, 271912);

const {:count 46} .str.148: ref;

axiom .str.148 == $sub.ref(0, 272982);

const {:count 43} .str.149: ref;

axiom .str.149 == $sub.ref(0, 274049);

const {:count 16} .str.143: ref;

axiom .str.143 == $sub.ref(0, 275089);

const {:count 19} .str.141: ref;

axiom .str.141 == $sub.ref(0, 276132);

const {:count 13} .str.150: ref;

axiom .str.150 == $sub.ref(0, 277169);

const {:count 30} .str.155: ref;

axiom .str.155 == $sub.ref(0, 278223);

const ttm_bo_manager_func: ref;

axiom ttm_bo_manager_func == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32872));

const {:count 28} .str.158: ref;

axiom .str.158 == $sub.ref(0, 279275);

const {:count 48} .str.157: ref;

axiom .str.157 == $sub.ref(0, 280347);

const {:count 14} .str.162: ref;

axiom .str.162 == $sub.ref(0, 281385);

const {:count 13} .str.163: ref;

axiom .str.163 == $sub.ref(0, 282422);

const {:count 29} .str.22: ref;

axiom .str.22 == $sub.ref(0, 283475);

const {:count 68} .str.164: ref;

axiom .str.164 == $sub.ref(0, 284567);

const {:count 9} .str.165: ref;

axiom .str.165 == $sub.ref(0, 285600);

const {:count 39} .str.166: ref;

axiom .str.166 == $sub.ref(0, 286663);

const {:count 52} .str.167: ref;

axiom .str.167 == $sub.ref(0, 287739);

const {:count 38} .str.168: ref;

axiom .str.168 == $sub.ref(0, 288801);

const {:count 27} .str.161: ref;

axiom .str.161 == $sub.ref(0, 289852);

const {:count 13} .str.173: ref;

axiom .str.173 == $sub.ref(0, 290889);

const {:count 12} .str.174: ref;

axiom .str.174 == $sub.ref(0, 291925);

const {:count 34} .str.175: ref;

axiom .str.175 == $sub.ref(0, 292983);

const {:count 34} .str.177: ref;

axiom .str.177 == $sub.ref(0, 294041);

const {:count 4} .str.178: ref;

axiom .str.178 == $sub.ref(0, 295069);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32880));

const {:count 59} .str.194: ref;

axiom .str.194 == $sub.ref(0, 296152);

const {:count 8} .str.193: ref;

axiom .str.193 == $sub.ref(0, 297184);

const {:count 43} .str.185: ref;

axiom .str.185 == $sub.ref(0, 298251);

const {:count 27} .str.181: ref;

axiom .str.181 == $sub.ref(0, 299302);

const {:count 35} .str.182: ref;

axiom .str.182 == $sub.ref(0, 300361);

const {:count 18} .str.183: ref;

axiom .str.183 == $sub.ref(0, 301403);

const {:count 23} .str.184: ref;

axiom .str.184 == $sub.ref(0, 302450);

const kernel_stack: ref;

axiom kernel_stack == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32888));

const {:count 17} .str.179: ref;

axiom .str.179 == $sub.ref(0, 303491);

const {:count 16} .str.180: ref;

axiom .str.180 == $sub.ref(0, 304531);

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32896));

const {:count 38} .str.28: ref;

axiom .str.28 == $sub.ref(0, 305593);

const {:count 26} .str.29: ref;

axiom .str.29 == $sub.ref(0, 306643);

const .str.73: ref;

axiom .str.73 == $sub.ref(0, 307668);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 308700);

const {:count 3} .str.1.282: ref;

axiom .str.1.282 == $sub.ref(0, 309727);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 310765);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 311793);

const qxl_alloc_ioctl: ref;

axiom qxl_alloc_ioctl == $sub.ref(0, 312825);

procedure qxl_alloc_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const qxl_map_ioctl: ref;

axiom qxl_map_ioctl == $sub.ref(0, 313857);

procedure qxl_map_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const qxl_execbuffer_ioctl: ref;

axiom qxl_execbuffer_ioctl == $sub.ref(0, 314889);

procedure qxl_execbuffer_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const qxl_update_area_ioctl: ref;

axiom qxl_update_area_ioctl == $sub.ref(0, 315921);

procedure qxl_update_area_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const qxl_getparam_ioctl: ref;

axiom qxl_getparam_ioctl == $sub.ref(0, 316953);

procedure qxl_getparam_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const qxl_clientcap_ioctl: ref;

axiom qxl_clientcap_ioctl == $sub.ref(0, 317985);

procedure qxl_clientcap_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const qxl_alloc_surf_ioctl: ref;

axiom qxl_alloc_surf_ioctl == $sub.ref(0, 319017);

procedure qxl_alloc_surf_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 320049);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const qxl_gem_object_create_with_handle: ref;

axiom qxl_gem_object_create_with_handle == $sub.ref(0, 321081);

procedure qxl_gem_object_create_with_handle($p0: ref, $p1: ref, $i2: i32, $i3: i64, $p4: ref, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33, $M.32, $CurrAddr, $M.6, $M.36, $M.35, assertsPassed;



implementation qxl_gem_object_create_with_handle($p0: ref, $p1: ref, $i2: i32, $i3: i64, $p4: ref, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1} {:cexpr "qxl_gem_object_create_with_handle:arg:domain"} boogie_si_record_i32($i2);
    call {:si_unique_call 2} {:cexpr "qxl_gem_object_create_with_handle:arg:size"} boogie_si_record_i64($i3);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p5);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 4} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p6);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 7} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i3);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i21 := qxl_gem_object_create($p0, $i20, 0, $i2, 0, 0, $p4, $p7);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 10} {:cexpr "r"} boogie_si_record_i32($i21);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.32, $p7);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i25 := drm_gem_handle_create($p1, $p24, $p6);
    call {:si_unique_call 12} {:cexpr "r"} boogie_si_record_i32($i25);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.32, $p7);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $M.33 := $store.ref($M.33, $p5, $p29);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.32, $p7);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} drm_gem_object_unreference_unlocked___1($p30);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i23 := $i25;
    goto $bb9;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 12);
    goto $bb9;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i19 == 1;
    call {:si_unique_call 8} devirtbounce(0, .str.31, 81, 12);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb1:
    assume $i13 == 1;
    call {:si_unique_call 5} devirtbounce(0, .str.31, 80, 12);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const drm_err: ref;

axiom drm_err == $sub.ref(0, 322113);

procedure drm_err.ref.ref.i32($p0: ref, p.1: ref, p.2: i32);
  free requires assertsPassed;



implementation drm_err.ref.ref.i32($p0: ref, p.1: ref, p.2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_err.ref.i32($p0: ref, p.1: i32);
  free requires assertsPassed;



implementation drm_err.ref.i32($p0: ref, p.1: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_err.ref.ref($p0: ref, p.1: ref);
  free requires assertsPassed;



implementation drm_err.ref.ref($p0: ref, p.1: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_err.ref($p0: ref);
  free requires assertsPassed;



implementation drm_err.ref($p0: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_err.ref.i32.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation drm_err.ref.i32.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_err.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation drm_err.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 323145);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 15} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const qxl_gem_object_create: ref;

axiom qxl_gem_object_create == $sub.ref(0, 324177);

procedure qxl_gem_object_create($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i1, $i5: i1, $p6: ref, $p7: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32, $M.6, $CurrAddr, $M.36, assertsPassed;



implementation qxl_gem_object_create($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i1, $i5: i1, $p6: ref, $p7: ref) returns ($r: i32)
{
  var $p8: ref;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 17} {:cexpr "qxl_gem_object_create:arg:size"} boogie_si_record_i32($i1);
    call {:si_unique_call 18} {:cexpr "qxl_gem_object_create:arg:alignment"} boogie_si_record_i32($i2);
    call {:si_unique_call 19} {:cexpr "qxl_gem_object_create:arg:initial_domain"} boogie_si_record_i32($i3);
    call {:si_unique_call 20} {:cexpr "qxl_gem_object_create:arg:discardable"} boogie_si_record_i1($i4);
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i5);
    call {:si_unique_call 21} {:cexpr "qxl_gem_object_create:arg:kernel"} boogie_si_record_i1($i5);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p7, $0.ref);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i10 := $ule.i32($i2, 4095);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i1);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i9);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $i14 := qxl_bo_create($p0, $i12, $i13, 0, $i3, $p6, $p8);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 23} {:cexpr "r"} boogie_si_record_i32($i14);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.34, $p8);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1312)), $mul.ref(1016, 1));
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p7, $p19);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(2824, 1)), $mul.ref(0, 1));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} ldv_mutex_lock_112($p21);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.34, $p8);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1312)), $mul.ref(0, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(2824, 1)), $mul.ref(160, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} list_add_tail($p23, $p25);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(2824, 1)), $mul.ref(0, 1));
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} ldv_mutex_unlock_113($p27);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i14, $sub.i32(0, 512));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i17 := $i14;
    goto $bb9;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} drm_err.ref.i32.i32.i32.i32(.str.30, $i1, $i3, $i11, $i14);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i11 := 4096;
    goto $bb3;
}



const drm_gem_handle_create: ref;

axiom drm_gem_handle_create == $sub.ref(0, 325209);

procedure drm_gem_handle_create($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_gem_handle_create($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 1} true;
    call {:si_unique_call 28} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 29} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const drm_gem_object_unreference_unlocked___1: ref;

axiom drm_gem_object_unreference_unlocked___1 == $sub.ref(0, 326241);

procedure drm_gem_object_unreference_unlocked___1($p0: ref);
  free requires assertsPassed;
  modifies $M.35, $M.6, assertsPassed;



implementation drm_gem_object_unreference_unlocked___1($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i5 := atomic_add_unless___1($p4, $sub.i32(0, 1), 1);
    call {:si_unique_call 31} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 3144)), $mul.ref(96, 1));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} ldv_mutex_lock_110___1($p9);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $i12 := atomic_dec_and_test($p11);
    call {:si_unique_call 34} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $i16 := ldv__builtin_expect($i15, 1);
    call {:si_unique_call 36} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref(0, 3144)), $mul.ref(96, 1));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} ldv_mutex_unlock_111___1($p19);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} drm_gem_object_free($p18);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const atomic_add_unless___1: ref;

axiom atomic_add_unless___1 == $sub.ref(0, 327273);

procedure atomic_add_unless___1($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation atomic_add_unless___1($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} {:cexpr "atomic_add_unless___1:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 40} {:cexpr "atomic_add_unless___1:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $i3 := __atomic_add_unless___1($p0, $i1, $i2);
    call {:si_unique_call 42} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, $i2);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_mutex_lock_110___1: ref;

axiom ldv_mutex_lock_110___1 == $sub.ref(0, 328305);

procedure ldv_mutex_lock_110___1($p0: ref);
  free requires assertsPassed;
  modifies $M.35, assertsPassed;



implementation ldv_mutex_lock_110___1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} ldv_linux_kernel_locking_mutex_mutex_lock_struct_mutex_of_drm_device($p0);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 329337);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $i1 := ldv_linux_usb_dev_atomic_dec_and_test($p0);
    call {:si_unique_call 45} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const drm_gem_object_free: ref;

axiom drm_gem_object_free == $sub.ref(0, 330369);

procedure drm_gem_object_free($p0: ref);
  free requires assertsPassed;



implementation drm_gem_object_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_111___1: ref;

axiom ldv_mutex_unlock_111___1 == $sub.ref(0, 331401);

procedure ldv_mutex_unlock_111___1($p0: ref);
  free requires assertsPassed;
  modifies $M.35, assertsPassed;



implementation ldv_mutex_unlock_111___1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} ldv_linux_kernel_locking_mutex_mutex_unlock_struct_mutex_of_drm_device($p0);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_struct_mutex_of_drm_device: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_struct_mutex_of_drm_device == $sub.ref(0, 332433);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_struct_mutex_of_drm_device($p0: ref);
  free requires assertsPassed;
  modifies $M.35, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_struct_mutex_of_drm_device($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i1 := $M.35;
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $M.35 := 0;
    call {:si_unique_call 48} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_struct_mutex_of_drm_device"} boogie_si_record_i8(0);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock == $sub.ref(0, 333465);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 1} true;
    call {:si_unique_call 50} __VERIFIER_error();
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_usb_dev_atomic_dec_and_test: ref;

axiom ldv_linux_usb_dev_atomic_dec_and_test == $sub.ref(0, 334497);

procedure ldv_linux_usb_dev_atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation ldv_linux_usb_dev_atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, $p1);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $i3);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, $p5);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_struct_mutex_of_drm_device: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_struct_mutex_of_drm_device == $sub.ref(0, 335529);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_struct_mutex_of_drm_device($p0: ref);
  free requires assertsPassed;
  modifies $M.35, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_struct_mutex_of_drm_device($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i1 := $M.35;
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 52} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_struct_mutex_of_drm_device"} boogie_si_record_i8(1);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock == $sub.ref(0, 336561);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 1} true;
    call {:si_unique_call 54} __VERIFIER_error();
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __atomic_add_unless___1: ref;

axiom __atomic_add_unless___1 == $sub.ref(0, 337593);

procedure __atomic_add_unless___1($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation __atomic_add_unless___1($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i11: i32;
  var $i9: i32;
  var $i10: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} {:cexpr "__atomic_add_unless___1:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 56} {:cexpr "__atomic_add_unless___1:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $i3 := atomic_read($p0);
    call {:si_unique_call 58} {:cexpr "c"} boogie_si_record_i32($i3);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $i2);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 60} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i9 := $i3;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i10 := $i3;
    goto $bb4;

  $bb4:
    call $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25 := __atomic_add_unless___1_loop_$bb4($p0, $i1, $i2, $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i10, $i1);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $i14 := atomic_cmpxchg___1($p0, $i10, $i13);
    call {:si_unique_call 62} {:cexpr "old"} boogie_si_record_i32($i14);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, $i10);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 64} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i20 := $i10;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i14, $i2);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 66} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i11 := $i14;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i14;
    goto $bb11_dummy;

  $bb5:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i12 := $i20;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 338625);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, $p1);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const atomic_cmpxchg___1: ref;

axiom atomic_cmpxchg___1 == $sub.ref(0, 339657);

procedure atomic_cmpxchg___1($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation atomic_cmpxchg___1($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} {:cexpr "atomic_cmpxchg___1:arg:old"} boogie_si_record_i32($i1);
    call {:si_unique_call 68} {:cexpr "atomic_cmpxchg___1:arg:new"} boogie_si_record_i32($i2);
    call {:si_unique_call 69} {:cexpr "atomic_cmpxchg___1:arg:__old"} boogie_si_record_i32($i1);
    call {:si_unique_call 70} {:cexpr "atomic_cmpxchg___1:arg:__new"} boogie_si_record_i32($i2);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 71} $i10 := devirtbounce.3(0, $p9, $i2, $i1, $p9);
    call {:si_unique_call 72} {:cexpr "__ret"} boogie_si_record_i32($i10);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const __cmpxchg_wrong_size: ref;

axiom __cmpxchg_wrong_size == $sub.ref(0, 340689);

procedure __cmpxchg_wrong_size();



const qxl_bo_create: ref;

axiom qxl_bo_create == $sub.ref(0, 341721);

procedure qxl_bo_create($p0: ref, $i1: i64, $i2: i1, $i3: i1, $i4: i32, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, assertsPassed, $CurrAddr;



implementation qxl_bo_create($p0: ref, $i1: i64, $i2: i1, $i3: i1, $i4: i32, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $i7: i8;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i15: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} {:cexpr "qxl_bo_create:arg:size"} boogie_si_record_i64($i1);
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i2);
    call {:si_unique_call 78} {:cexpr "qxl_bo_create:arg:kernel"} boogie_si_record_i1($i2);
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i3);
    call {:si_unique_call 79} {:cexpr "qxl_bo_create:arg:pinned"} boogie_si_record_i1($i3);
    call {:si_unique_call 80} {:cexpr "qxl_bo_create:arg:domain"} boogie_si_record_i32($i4);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i7);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, $0.ref);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $p11 := kzalloc(1304, 208);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i1, 4095);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i17 := $udiv.i64($i16, 4096);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i18 := $mul.i64($i17, 4096);
    call {:si_unique_call 82} {:cexpr "size"} boogie_si_record_i64($i18);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p12, $mul.ref(0, 1312)), $mul.ref(1016, 1));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $i22 := drm_gem_object_init($p20, $p21, $i18);
    call {:si_unique_call 84} {:cexpr "r"} boogie_si_record_i32($i22);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 86} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p12, $mul.ref(0, 1312)), $mul.ref(1008, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p29, $i4);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i8);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p12, $mul.ref(0, 1312)), $mul.ref(992, 1));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p32, $i31);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p12, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p33, 0);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p12, $mul.ref(0, 1312)), $mul.ref(0, 1));
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} INIT_LIST_HEAD($p34);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p5);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i8);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} qxl_ttm_placement_from_domain($p12, $i4, $i40);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p12, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p12, $mul.ref(0, 1312)), $mul.ref(56, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i8.i1($i7);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i32($i45);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i48 := $xor.i1($i47, 1);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $i49 := ttm_bo_init($p42, $p43, $i18, $i10, $p44, 0, $i48, $0.ref, $i18, $0.ref, $0.ref, qxl_ttm_bo_destroy);
    call {:si_unique_call 92} {:cexpr "r"} boogie_si_record_i32($i49);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i32($i50);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i53 := ldv__builtin_expect($i52, 0);
    call {:si_unique_call 94} {:cexpr "tmp___1"} boogie_si_record_i64($i53);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, $p11);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb14:
    assume $i54 == 1;
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i49, $sub.i32(0, 512));
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i15 := $i49;
    goto $bb6;

  $bb16:
    assume $i55 == 1;
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(0, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.6, $p56);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} dev_err.ref.ref.i64.i32($p57, .str.24, $i18, $i4);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i36 == 1;
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p12, $mul.ref(0, 1312)), $mul.ref(1272, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p5);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.6;
    cmdloc_dummy_var_1 := $M.6;
    call {:si_unique_call 89} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p38, $p39, 24, $zext.i32.i64(8), 0 == 1);
    $M.6 := cmdloc_dummy_var_2;
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p12);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} kfree($p28);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i15 := $i22;
    goto $bb6;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb3;
}



const ldv_mutex_lock_112: ref;

axiom ldv_mutex_lock_112 == $sub.ref(0, 342753);

procedure ldv_mutex_lock_112($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_mutex_lock_112($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_qxl_gem($p0);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 343785);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} __list_add($p0, $p3, $p1);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_113: ref;

axiom ldv_mutex_unlock_113 == $sub.ref(0, 344817);

procedure ldv_mutex_unlock_113($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_mutex_unlock_113($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_qxl_gem($p0);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_qxl_gem: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_qxl_gem == $sub.ref(0, 345849);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_qxl_gem($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_qxl_gem($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i1 := $M.36;
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $M.36 := 0;
    call {:si_unique_call 100} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_qxl_gem"} boogie_si_record_i8(0);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 346881);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_qxl_gem: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_qxl_gem == $sub.ref(0, 347913);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_qxl_gem($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_qxl_gem($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i1 := $M.36;
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 102} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_qxl_gem"} boogie_si_record_i8(1);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 348945);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed, $M.6, $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 104} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $p2 := ldv_kzalloc($i0, $i1);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const drm_gem_object_init: ref;

axiom drm_gem_object_init == $sub.ref(0, 349977);

procedure drm_gem_object_init($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation drm_gem_object_init($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 106} {:cexpr "drm_gem_object_init:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 1} true;
    call {:si_unique_call 107} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 108} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 351009);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} free_($p0);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 352041);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1, $p0);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2, $p0);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 353073);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const qxl_ttm_placement_from_domain: ref;

axiom qxl_ttm_placement_from_domain == $sub.ref(0, 354105);

procedure qxl_ttm_placement_from_domain($p0: ref, $i1: i32, $i2: i1);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_ttm_placement_from_domain($p0: ref, $i1: i32, $i2: i1)
{
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $p6: ref;
  var $p9: ref;
  var $p10: ref;
  var $p13: ref;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $p43: ref;
  var $i44: i32;
  var $p46: ref;
  var $p48: ref;
  var $i49: i1;
  var $i51: i64;
  var $p54: ref;
  var $i55: i64;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} {:cexpr "qxl_ttm_placement_from_domain:arg:domain"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 111} {:cexpr "qxl_ttm_placement_from_domain:arg:pinned"} boogie_si_record_i1($i2);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i5 := (if $i4 == 1 then 2097152 else 0);
    call {:si_unique_call 112} {:cexpr "pflag"} boogie_si_record_i32($i5);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(16, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, $p6);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(16, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p13, $p10);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i1, 1);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i1, 2);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i21;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i1, 0);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i37 := $i29;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i44 := $i37;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p46, $i44);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p48, $i44);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i49 := $ult.i32(0, $i44);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i49 == 1;
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb16;

  $bb16:
    call $i51, $p54, $i55, $p58, $i59, $i60, $i50 := qxl_ttm_placement_from_domain_loop_$bb16($p0, $i44, $i51, $p54, $i55, $p58, $i59, $i60, $i50);
    goto $bb16_last;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i51 := $zext.i32.i64($i50);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref($i51, 12)), $mul.ref(0, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p54, 0);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i55 := $zext.i32.i64($i50);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref($i55, 12)), $mul.ref(4, 1));
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p58, 0);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i50, 1);
    call {:si_unique_call 117} {:cexpr "i"} boogie_si_record_i32($i59);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i60 := $ult.i32($i59, $i44);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i60 == 1);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb18:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i50 := $i59;
    goto $bb18_dummy;

  $bb10:
    assume $i38 == 1;
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i37, 1);
    call {:si_unique_call 116} {:cexpr "c"} boogie_si_record_i32($i39);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i37);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref($i40, 12)), $mul.ref(8, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p43, 458753);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i44 := $i39;
    goto $bb12;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i29, 1);
    call {:si_unique_call 115} {:cexpr "c"} boogie_si_record_i32($i31);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i5, 458753);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i29);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref($i33, 12)), $mul.ref(8, 1));
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p36, $i32);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i37 := $i31;
    goto $bb9;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i21, 1);
    call {:si_unique_call 114} {:cexpr "c"} boogie_si_record_i32($i23);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i5, 65544);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i21);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref($i25, 12)), $mul.ref(8, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p28, $i24);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i29 := $i23;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i15 := $add.i32(0, 1);
    call {:si_unique_call 113} {:cexpr "c"} boogie_si_record_i32($i15);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i5, 65540);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64(0);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref($i17, 12)), $mul.ref(8, 1));
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p20, $i16);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i21 := $i15;
    goto $bb3;

  $bb18_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_409;
}



const qxl_ttm_bo_destroy: ref;

axiom qxl_ttm_bo_destroy == $sub.ref(0, 355137);

procedure qxl_ttm_bo_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.36, $M.6, assertsPassed, $M.37, $M.38, $M.39, $CurrAddr, $M.46, $M.44, $M.42, $M.54, $M.40, $M.55, $M.52, $M.53, $M.49, $M.43, $M.41, $M.67, $M.68, $M.69, $M.70, $M.32, $M.72, $M.73, $M.74, $M.71, $M.64, $M.75, $M.35, $M.65;



implementation qxl_ttm_bo_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 88), 1312)), $mul.ref(1016, 1)), $mul.ref(8, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} qxl_surface_evict($p8, $p2, 0);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5336)), $mul.ref(2824, 1)), $mul.ref(0, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} ldv_mutex_lock_113($p10);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 88), 1312)), $mul.ref(0, 1));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} list_del_init($p11);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5336)), $mul.ref(2824, 1)), $mul.ref(0, 1));
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} ldv_mutex_unlock_114($p13);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 88), 1312)), $mul.ref(1016, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} drm_gem_object_release($p14);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p2);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} kfree($p15);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const ttm_bo_init: ref;

axiom ttm_bo_init == $sub.ref(0, 356169);

procedure ttm_bo_init($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref, $i5: i32, $i6: i1, $p7: ref, $i8: i64, $p9: ref, $p10: ref, $p11: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_init($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref, $i5: i32, $i6: i1, $p7: ref, $i8: i64, $p9: ref, $p10: ref, $p11: ref) returns ($r: i32)
{
  var $i12: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 124} {:cexpr "ttm_bo_init:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 125} {:cexpr "ttm_bo_init:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 126} {:cexpr "ttm_bo_init:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 127} {:cexpr "ttm_bo_init:arg:arg6"} boogie_si_record_i1($i6);
    call {:si_unique_call 128} {:cexpr "ttm_bo_init:arg:arg8"} boogie_si_record_i64($i8);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 1} true;
    call {:si_unique_call 129} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 130} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 357201);

procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i64.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i64.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    return;
}



const qxl_surface_evict: ref;

axiom qxl_surface_evict == $sub.ref(0, 358233);

procedure qxl_surface_evict($p0: ref, $p1: ref, $i2: i1);
  free requires assertsPassed;
  modifies $M.37, $M.6, assertsPassed, $M.38, $M.39, $CurrAddr, $M.46, $M.44, $M.42, $M.54, $M.40, $M.55, $M.52, $M.53, $M.49, $M.43, $M.41, $M.67, $M.68, $M.69, $M.70, $M.32, $M.72, $M.73, $M.74, $M.71, $M.64, $M.36, $M.75, $M.35, $M.65;



implementation qxl_surface_evict($p0: ref, $p1: ref, $i2: i1)
{
  var $i3: i8;
  var $p4: ref;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 131} {:cexpr "qxl_surface_evict:arg:do_update_area"} boogie_si_record_i1($i2);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4784, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} ldv_mutex_lock_142($p4);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i3);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} qxl_surface_evict_locked($p0, $p1, $i5);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4784, 1));
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} ldv_mutex_unlock_143($p6);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_113: ref;

axiom ldv_mutex_lock_113 == $sub.ref(0, 359265);

procedure ldv_mutex_lock_113($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_mutex_lock_113($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_qxl_gem($p0);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 360297);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} __list_del_entry($p0);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} INIT_LIST_HEAD($p0);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_114: ref;

axiom ldv_mutex_unlock_114 == $sub.ref(0, 361329);

procedure ldv_mutex_unlock_114($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_mutex_unlock_114($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_qxl_gem($p0);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const drm_gem_object_release: ref;

axiom drm_gem_object_release == $sub.ref(0, 362361);

procedure drm_gem_object_release($p0: ref);
  free requires assertsPassed;



implementation drm_gem_object_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 363393);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_142: ref;

axiom ldv_mutex_lock_142 == $sub.ref(0, 364425);

procedure ldv_mutex_lock_142($p0: ref);
  free requires assertsPassed;
  modifies $M.37, assertsPassed;



implementation ldv_mutex_lock_142($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} ldv_linux_kernel_locking_mutex_mutex_lock_surf_evict_mutex_of_qxl_device($p0);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const qxl_surface_evict_locked: ref;

axiom qxl_surface_evict_locked == $sub.ref(0, 365457);

procedure qxl_surface_evict_locked($p0: ref, $p1: ref, $i2: i1);
  free requires assertsPassed;
  modifies $M.6, $M.38, $M.39, $CurrAddr, $M.46, $M.44, $M.42, $M.54, assertsPassed, $M.40, $M.55, $M.52, $M.53, $M.49, $M.43, $M.41, $M.67, $M.68, $M.69, $M.70, $M.32, $M.37, $M.72, $M.73, $M.74, $M.71, $M.64, $M.36, $M.75, $M.35, $M.65;



implementation qxl_surface_evict_locked($p0: ref, $p1: ref, $i2: i1)
{
  var $i3: i8;
  var $i4: i1;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 140} {:cexpr "qxl_surface_evict_locked:arg:do_update_area"} boogie_si_record_i1($i2);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} vslice_dummy_var_71 := qxl_hw_surface_dealloc($p0, $p1);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} vslice_dummy_var_70 := qxl_update_surface($p0, $p1);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_143: ref;

axiom ldv_mutex_unlock_143 == $sub.ref(0, 366489);

procedure ldv_mutex_unlock_143($p0: ref);
  free requires assertsPassed;
  modifies $M.37, assertsPassed;



implementation ldv_mutex_unlock_143($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} ldv_linux_kernel_locking_mutex_mutex_unlock_surf_evict_mutex_of_qxl_device($p0);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_surf_evict_mutex_of_qxl_device: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_surf_evict_mutex_of_qxl_device == $sub.ref(0, 367521);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_surf_evict_mutex_of_qxl_device($p0: ref);
  free requires assertsPassed;
  modifies $M.37, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_surf_evict_mutex_of_qxl_device($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i1 := $M.37;
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $M.37 := 0;
    call {:si_unique_call 145} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_surf_evict_mutex_of_qxl_device"} boogie_si_record_i8(0);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;
}



const qxl_update_surface: ref;

axiom qxl_update_surface == $sub.ref(0, 368553);

procedure qxl_update_surface($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.54, assertsPassed, $M.55;



implementation qxl_update_surface($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p3, 0);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(4, 1));
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, $p5);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p7, $i6);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p8, 0);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(8, 1));
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p12, $i11);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i13, $i14, $i15 := qxl_update_surface_loop_$bb1($p0, $p1, $p2, $i13, $i14, $i15);
    goto $bb1_last;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 148} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, $sub.i32(0, 512));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb2:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2_dummy;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb2_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $i13 := qxl_io_update_area($p0, $p1, $p2);
    goto SeqInstr_97, SeqInstr_98;
}



const qxl_hw_surface_dealloc: ref;

axiom qxl_hw_surface_dealloc == $sub.ref(0, 369585);

procedure qxl_hw_surface_dealloc($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.38, $M.39, $CurrAddr, $M.46, $M.44, $M.42, assertsPassed, $M.40, $M.52, $M.53, $M.49, $M.43, $M.41, $M.67, $M.68, $M.69, $M.70, $M.32, $M.37, $M.72, $M.73, $M.74, $M.71, $M.64, $M.36, $M.75, $M.35, $M.54, $M.55, $M.65;



implementation qxl_hw_surface_dealloc($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $i6: i32;
  var vslice_dummy_var_72: ref;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1265, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.6, $p3);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} $i9 := qxl_alloc_surface_release_reserved($p0, 1, $p8, $p2);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 151} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p11, $0.ref);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} ldv_spin_lock_127($p12);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4592, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} vslice_dummy_var_72 := idr_replace($p13, $0.ref, $i15);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} ldv_spin_unlock_129($p17);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1265, 1));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p18, 0);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    call {:si_unique_call 155} {:cexpr "id"} boogie_si_record_i32($i20);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p21, 0);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p2);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 216)), $mul.ref(100, 1));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p23, $i20);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.6, $p2);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $p25 := qxl_release_map($p0, $p24);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p27, 1);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p26, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p28, $i20);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p2);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p26, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} qxl_release_unmap($p0, $p29, $p30);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.6, $p2);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} vslice_dummy_var_73 := qxl_push_command_ring_release($p0, $p31, 5, 0);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p2);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} qxl_release_fence_buffer_objects($p33);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb3;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const qxl_alloc_surface_release_reserved: ref;

axiom qxl_alloc_surface_release_reserved == $sub.ref(0, 370617);

procedure qxl_alloc_surface_release_reserved($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $CurrAddr, $M.42, $M.52, $M.53, $M.49, assertsPassed, $M.38, $M.39, $M.43, $M.37, $M.67, $M.68, $M.72, $M.73, $M.74, $M.69, $M.70, $M.32, $M.40, $M.44, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation qxl_alloc_surface_release_reserved($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i1;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i15: i32;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 161} {:cexpr "qxl_alloc_surface_release_reserved:arg:surface_cmd_type"} boogie_si_record_i32($i1);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 1);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $i35 := qxl_alloc_release_reserved($p0, 41, 1, $p3, $0.ref);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    call {:si_unique_call 171} {:cexpr "tmp___0"} boogie_si_record_i32($i35);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i15 := $i35;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p2);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $i12 := qxl_release_alloc($p0, 1, $p3);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    call {:si_unique_call 163} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    call {:si_unique_call 164} {:cexpr "idr_ret"} boogie_si_record_i32($i13);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.6, $p17);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $p21 := qxl_bo_ref($p20);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p4, $p21);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 216)), $mul.ref(96, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p22);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 64);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p3);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 216)), $mul.ref(96, 1));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p26, $i24);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.6, $p3);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p4);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} vslice_dummy_var_74 := qxl_release_list_add($p27, $p28);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.6, $p3);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $p31 := qxl_release_map($p0, $p30);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i13);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p31);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p33, $i32);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.6, $p3);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} qxl_release_unmap($p0, $p34, $p31);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} qxl_bo_unref($p4);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb8;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb8;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const ldv_spin_lock_127: ref;

axiom ldv_spin_lock_127 == $sub.ref(0, 371649);

procedure ldv_spin_lock_127($p0: ref);
  free requires assertsPassed;
  modifies $M.44, assertsPassed;



implementation ldv_spin_lock_127($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} ldv_linux_kernel_locking_spinlock_spin_lock_surf_id_idr_lock_of_qxl_device();
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} spin_lock($p0);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const idr_replace: ref;

axiom idr_replace == $sub.ref(0, 372681);

procedure idr_replace($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation idr_replace($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} {:cexpr "idr_replace:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $p3 := external_alloc();
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ldv_spin_unlock_129: ref;

axiom ldv_spin_unlock_129 == $sub.ref(0, 373713);

procedure ldv_spin_unlock_129($p0: ref);
  free requires assertsPassed;
  modifies $M.44, assertsPassed;



implementation ldv_spin_unlock_129($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} ldv_linux_kernel_locking_spinlock_spin_unlock_surf_id_idr_lock_of_qxl_device();
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} spin_unlock($p0);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const qxl_release_map: ref;

axiom qxl_release_map == $sub.ref(0, 374745);

procedure qxl_release_map($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.42, $M.6, $CurrAddr, $M.43, $M.46, $M.38, $M.39, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation qxl_release_map($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(96, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 4096);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $p14 := qxl_bo_kmap_atomic_page($p0, $p10, $i13);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(96, 1));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.6, $p18);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i19);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, $sub.i64(0, 4097));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p14, $mul.ref($i21, 1));
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p17 := $p22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $r := $p17;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p17 := $0.ref;
    goto $bb3;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const qxl_release_unmap: ref;

axiom qxl_release_unmap == $sub.ref(0, 375777);

procedure qxl_release_unmap($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $CurrAddr, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.43, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation qxl_release_unmap($p0: ref, $p1: ref, $p2: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(96, 1));
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, $sub.i64(0, 4097));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i17 := $sub.i64(0, $i16);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p12, $mul.ref($i17, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} qxl_bo_kunmap_atomic_page($p0, $p11, $p18);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;
}



const qxl_push_command_ring_release: ref;

axiom qxl_push_command_ring_release == $sub.ref(0, 376809);

procedure qxl_push_command_ring_release($p0: ref, $p1: ref, $i2: i32, $i3: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $M.39, $M.6, $CurrAddr, $M.41, $M.67, $M.68, assertsPassed, $M.46, $M.69, $M.70, $M.32, $M.42, $M.71, $M.43, $M.64, $M.36, $M.40, $M.52, $M.72, $M.35, $M.37, $M.44, $M.53, $M.75, $M.49, $M.73, $M.74, $M.55, $M.65, $M.54;



implementation qxl_push_command_ring_release($p0: ref, $p1: ref, $i2: i32, $i3: i1) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i8;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 181} {:cexpr "qxl_push_command_ring_release:arg:type"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i3);
    call {:si_unique_call 182} {:cexpr "qxl_push_command_ring_release:arg:interruptible"} boogie_si_record_i1($i3);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $M.38 := $store.i32($M.38, $p10, $i2);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(96, 1));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $i19 := qxl_bo_physical_address($p0, $p15, $i18);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $M.39 := $store.i64($M.39, $p20, $i19);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3064, 1));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p4);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i5);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $i25 := qxl_ring_push($p22, $p23, $i24);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    call {:si_unique_call 185} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const qxl_release_fence_buffer_objects: ref;

axiom qxl_release_fence_buffer_objects == $sub.ref(0, 377841);

procedure qxl_release_fence_buffer_objects($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.40, $M.46, $M.38, $M.39, $M.42, $M.67, $M.68, $CurrAddr, $M.37, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.44, $M.43, $M.41, $M.71, $M.75, $M.64, $M.36, $M.54, $M.35, $M.55, $M.65;



implementation qxl_release_fence_buffer_objects($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p38: ref;
  var $p51: ref;
  var $p52: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $i2 := list_is_singular($p1);
    call {:si_unique_call 187} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i5 := list_empty($p4);
    call {:si_unique_call 189} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p11);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 872)), $mul.ref(8, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref($sub.ref(0, 232), 5336)), $mul.ref(3120, 1));
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(88, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i20, $sub.i32(0, 268435456));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(0, 1)), $mul.ref(60, 1));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.6, $p23);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} fence_init($p17, qxl_fence_ops, $p18, $i21, $i24);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} trace_fence_emit($p25);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p12, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.6, $p26);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 592)), $mul.ref(480, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} ldv_spin_lock_108($p28);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.6, $p30);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i34, $i36);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p27, $mul.ref(0, 592)), $mul.ref(480, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} ldv_spin_unlock_109($p51);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(104, 1));
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} ww_acquire_fini($p52);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i37 == 1;
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p38 := $p31;
    goto $bb11;

  $bb11:
    call $p39, $p40, $p41, $p42, $p43, $p45, $p46, $p47, $p48, $i49, $i50, $p38 := qxl_release_fence_buffer_objects_loop_$bb11($p0, $i36, $p39, $p40, $p41, $p42, $p43, $p45, $p46, $p47, $p48, $i49, $i50, $p38);
    goto $bb11_last;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.6, $p39);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 872)), $mul.ref(448, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.6, $p41);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} reservation_object_add_shared_fence($p42, $p43);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} ttm_bo_add_to_lru($p40);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} __ttm_bo_unreserve($p40);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.6, $p45);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, $i36);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i50 == 1);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $p38 := $p46;
    goto $bb13_dummy;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_728;
}



const list_is_singular: ref;

axiom list_is_singular == $sub.ref(0, 378873);

procedure list_is_singular($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_is_singular($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i3: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $i1 := list_empty($p0);
    call {:si_unique_call 199} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i3);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i6, $i9);
    assume {:verifier.code 0} true;
    $i3 := $i10;
    goto $bb3;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 379905);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const fence_init: ref;

axiom fence_init == $sub.ref(0, 380937);

procedure fence_init($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32);
  free requires assertsPassed;



implementation fence_init($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} {:cexpr "fence_init:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 201} {:cexpr "fence_init:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    return;
}



const trace_fence_emit: ref;

axiom trace_fence_emit == $sub.ref(0, 381969);

procedure trace_fence_emit($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $M.67, $M.68, $CurrAddr, $M.37, $M.72, $M.52, $M.73, $M.74, $M.69, $M.70, $M.32, assertsPassed, $M.53, $M.49, $M.40, $M.44, $M.43, $M.41, $M.71, $M.75, $M.64, $M.36, $M.54, $M.35, $M.55, $M.65;



implementation trace_fence_emit($p0: ref)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $i1 := static_key_false($add.ref($add.ref(__tracepoint_fence_emit, $mul.ref(0, 56)), $mul.ref(8, 1)));
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 203} {:cexpr "tmp___1"} boogie_si_record_i8($i2);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} rcu_read_lock_sched_notrace();
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $i24 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 214} {:cexpr "tmp___2"} boogie_si_record_i32($i24);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} rcu_read_unlock_sched_notrace();
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i25 == 1;
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1(1);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i26 == 1);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i27 := rcu_read_lock_sched_held();
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    call {:si_unique_call 216} {:cexpr "tmp___3"} boogie_si_record_i32($i27);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i28 == 1;
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} lockdep_rcu_suspicious(.str.189, 81, .str.176);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb22;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} rcu_read_lock_sched_notrace();
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $add.ref($add.ref(__tracepoint_fence_emit, $mul.ref(0, 56)), $mul.ref(48, 1)));
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i5 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 206} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p4);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} rcu_read_unlock_sched_notrace();
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i11 == 1;
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p12 := $p4;
    goto $bb14;

  $bb14:
    call $p12, $p13, $p14, $p15, $p16, $p17, $p18, $p19, $p20, $i21, $i22 := trace_fence_emit_loop_$bb14($p0, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $p19, $p20, $i21, $i22);
    goto $bb14_last;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p12, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p14);
    call {:si_unique_call 210} devirtbounce.5($p17, $p16, $p0);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p12, $mul.ref(1, 16));
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p12, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $p12 := $p18;
    goto $bb15_dummy;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1(1);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $i8 := rcu_read_lock_sched_held();
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    call {:si_unique_call 208} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} lockdep_rcu_suspicious(.str.189, 81, .str.176);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb5;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_803;
}



const ldv_spin_lock_108: ref;

axiom ldv_spin_lock_108 == $sub.ref(0, 383001);

procedure ldv_spin_lock_108($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ldv_spin_lock_108($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} ldv_linux_kernel_locking_spinlock_spin_lock_lru_lock_of_ttm_bo_global();
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} spin_lock($p0);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;
}



const reservation_object_add_shared_fence: ref;

axiom reservation_object_add_shared_fence == $sub.ref(0, 384033);

procedure reservation_object_add_shared_fence($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation reservation_object_add_shared_fence($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    return;
}



const ttm_bo_add_to_lru: ref;

axiom ttm_bo_add_to_lru == $sub.ref(0, 385065);

procedure ttm_bo_add_to_lru($p0: ref);
  free requires assertsPassed;



implementation ttm_bo_add_to_lru($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    return;
}



const __ttm_bo_unreserve: ref;

axiom __ttm_bo_unreserve == $sub.ref(0, 386097);

procedure __ttm_bo_unreserve($p0: ref);
  free requires assertsPassed;



implementation __ttm_bo_unreserve($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(448, 1));
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} ww_mutex_unlock($p3);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_109: ref;

axiom ldv_spin_unlock_109 == $sub.ref(0, 387129);

procedure ldv_spin_unlock_109($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ldv_spin_unlock_109($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} ldv_linux_kernel_locking_spinlock_spin_unlock_lru_lock_of_ttm_bo_global();
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} spin_unlock($p0);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;
}



const ww_acquire_fini: ref;

axiom ww_acquire_fini == $sub.ref(0, 388161);

procedure ww_acquire_fini($p0: ref);
  free requires assertsPassed;



implementation ww_acquire_fini($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var vslice_dummy_var_75: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} lock_release($p1, 0, 0);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, oops_in_progress);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.6, $p4);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 226} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i11 := debug_locks_off();
    call {:si_unique_call 228} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.6, debug_locks_silent);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb7;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32(1, 0);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 230} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32(1, 0);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} vslice_dummy_var_75 := ldv__builtin_expect($i22, 0);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} warn_slowpath_fmt.ref.i32.ref.ref(.str.190, 175, .str.191, .str.192);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    goto $bb12;
}



const lock_release: ref;

axiom lock_release == $sub.ref(0, 389193);

procedure lock_release($p0: ref, $i1: i32, $i2: i64);
  free requires assertsPassed;



implementation lock_release($p0: ref, $i1: i32, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} {:cexpr "lock_release:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 234} {:cexpr "lock_release:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    return;
}



const debug_locks_off: ref;

axiom debug_locks_off == $sub.ref(0, 390225);

procedure debug_locks_off() returns ($r: i32);
  free requires assertsPassed;



implementation debug_locks_off() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 1} true;
    call {:si_unique_call 235} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 236} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 391257);

procedure warn_slowpath_fmt.ref.i32.ref.i64.ref.ref($p0: ref, $i1: i32, $p2: ref, p.3: i64, p.4: ref, p.5: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref.i64.ref.ref($p0: ref, $i1: i32, $p2: ref, p.3: i64, p.4: ref, p.5: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    return;
}



procedure warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    return;
}



procedure warn_slowpath_fmt.ref.i32.ref.ref($p0: ref, $i1: i32, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref.ref($p0: ref, $i1: i32, $p2: ref, p.3: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_lru_lock_of_ttm_bo_global: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_lru_lock_of_ttm_bo_global == $sub.ref(0, 392289);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_lru_lock_of_ttm_bo_global();
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_lru_lock_of_ttm_bo_global()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i0 := $M.40;
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i3 := $M.40;
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} ldv_assume($i5);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 242} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lru_lock_of_ttm_bo_global"} boogie_si_record_i32(1);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 393321);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} _raw_spin_unlock($p2);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 394353);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock: ref;

axiom ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock == $sub.ref(0, 395385);

procedure ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} {:cexpr "ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 1} true;
    call {:si_unique_call 245} __VERIFIER_error();
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assume: ref;

axiom ldv_assume == $sub.ref(0, 396417);

procedure ldv_assume($i0: i32);
  free requires assertsPassed;



implementation ldv_assume($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} {:cexpr "ldv_assume:arg:expression"} boogie_si_record_i32($i0);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call ldv_assume_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ww_mutex_unlock: ref;

axiom ww_mutex_unlock == $sub.ref(0, 397449);

procedure ww_mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation ww_mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_lru_lock_of_ttm_bo_global: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_lru_lock_of_ttm_bo_global == $sub.ref(0, 398481);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_lru_lock_of_ttm_bo_global();
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_lru_lock_of_ttm_bo_global()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i0 := $M.40;
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i3 := $M.40;
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} ldv_assume($i5);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 249} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lru_lock_of_ttm_bo_global"} boogie_si_record_i32(2);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 399513);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} _raw_spin_lock($p2);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 400545);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock: ref;

axiom ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock == $sub.ref(0, 401577);

procedure ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} {:cexpr "ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 1} true;
    call {:si_unique_call 252} __VERIFIER_error();
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const static_key_false: ref;

axiom static_key_false == $sub.ref(0, 402609);

procedure static_key_false($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation static_key_false($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $i1 := arch_static_branch($p0);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 254} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const rcu_read_lock_sched_notrace: ref;

axiom rcu_read_lock_sched_notrace == $sub.ref(0, 403641);

procedure rcu_read_lock_sched_notrace();
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $CurrAddr, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.43, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation rcu_read_lock_sched_notrace()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} __preempt_count_add___0(1);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    call {:si_unique_call 256} devirtbounce.6(0);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 404673);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 1} true;
    call {:si_unique_call 257} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 258} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rcu_read_lock_sched_held: ref;

axiom rcu_read_lock_sched_held == $sub.ref(0, 405705);

procedure rcu_read_lock_sched_held() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.41, $M.71, $M.43, $M.64, $M.36, assertsPassed, $M.40, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.75, $M.49, $M.73, $M.74, $M.55, $M.65, $M.54;



implementation rcu_read_lock_sched_held() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i19: i32;
  var $i20: i1;
  var $i22: i64;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i21: i32;
  var $i18: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 260} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $i3 := rcu_is_watching();
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 262} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i8 := rcu_lockdep_current_cpu_online();
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 264} {:cexpr "tmp___2"} boogie_si_record_i8($i9);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.6, debug_locks);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i17 == 1);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $i19 := preempt_count___1();
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    call {:si_unique_call 268} {:cexpr "tmp___4"} boogie_si_record_i32($i19);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i20 == 1);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $i22 := arch_local_save_flags();
    call {:si_unique_call 270} {:cexpr "_flags"} boogie_si_record_i64($i22);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $i23 := arch_irqs_disabled_flags($i22);
    call {:si_unique_call 272} {:cexpr "tmp___5"} boogie_si_record_i32($i23);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i21 := $i25;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i18 := $i21;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i2 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb28;

  $bb23:
    assume $i20 == 1;
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb25;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i17 == 1;
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb22;

  $bb17:
    assume $i14 == 1;
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $i15 := lock_is_held(rcu_sched_lock_map);
    call {:si_unique_call 266} {:cexpr "lockdep_opinion"} boogie_si_record_i32($i15);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb19;

  $bb14:
    assume $i12 == 1;
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb13;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb7;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i2 := 1;
    goto $bb3;
}



const lockdep_rcu_suspicious: ref;

axiom lockdep_rcu_suspicious == $sub.ref(0, 406737);

procedure lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} {:cexpr "lockdep_rcu_suspicious:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    return;
}



const rcu_read_unlock_sched_notrace: ref;

axiom rcu_read_unlock_sched_notrace == $sub.ref(0, 407769);

procedure rcu_read_unlock_sched_notrace();
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $CurrAddr, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.43, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation rcu_read_unlock_sched_notrace()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} devirtbounce.6(0);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} __preempt_count_sub___1(1);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;
}



const __preempt_count_sub___1: ref;

axiom __preempt_count_sub___1 == $sub.ref(0, 408801);

procedure __preempt_count_sub___1($i0: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $CurrAddr, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.43, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation __preempt_count_sub___1($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} {:cexpr "__preempt_count_sub___1:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32(0, 1);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i7 == 1);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i8 == 1);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, $i0);
    call {:si_unique_call 285} devirtbounce.8(0, __preempt_count, $i9, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i8 == 1;
    call {:si_unique_call 284} devirtbounce.7(0, __preempt_count, __preempt_count);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i7 == 1;
    call {:si_unique_call 283} devirtbounce.7(0, __preempt_count, __preempt_count);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_220:
    assume !assertsPassed;
    return;
}



const __bad_percpu_size: ref;

axiom __bad_percpu_size == $sub.ref(0, 409833);

procedure __bad_percpu_size();



const rcu_is_watching: ref;

axiom rcu_is_watching == $sub.ref(0, 410865);

procedure rcu_is_watching() returns ($r: i1);
  free requires assertsPassed;



implementation rcu_is_watching() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 1} true;
    call {:si_unique_call 290} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 291} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rcu_lockdep_current_cpu_online: ref;

axiom rcu_lockdep_current_cpu_online == $sub.ref(0, 411897);

procedure rcu_lockdep_current_cpu_online() returns ($r: i1);
  free requires assertsPassed;



implementation rcu_lockdep_current_cpu_online() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 1} true;
    call {:si_unique_call 292} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 293} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const lock_is_held: ref;

axiom lock_is_held == $sub.ref(0, 412929);

procedure lock_is_held($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation lock_is_held($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 1} true;
    call {:si_unique_call 294} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 295} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const preempt_count___1: ref;

axiom preempt_count___1 == $sub.ref(0, 413961);

procedure preempt_count___1() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.41, $M.71, $M.43, $M.64, $M.36, assertsPassed, $M.40, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.75, $M.49, $M.73, $M.74, $M.55, $M.65, $M.54;



implementation preempt_count___1() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call {:si_unique_call 296} $i2 := devirtbounce.9(0, __preempt_count);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    call {:si_unique_call 297} {:cexpr "pfo_ret__"} boogie_si_record_i32($i2);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i2, 2147483647);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 414993);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.6, pv_irq_ops);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 303} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call {:si_unique_call 305} $i7 := devirtbounce.10(0, 44, pv_irq_ops, 1);
    call {:si_unique_call 306} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 304} devirtbounce(0, .str.171, 804, 12);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 416025);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __preempt_count_add___0: ref;

axiom __preempt_count_add___0 == $sub.ref(0, 417057);

procedure __preempt_count_add___0($i0: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $CurrAddr, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.43, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation __preempt_count_add___0($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} {:cexpr "__preempt_count_add___0:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32(0, 1);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i5 == 1);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i6 == 1);
    call {:si_unique_call 317} devirtbounce.8(0, __preempt_count, $i0, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i6 == 1;
    call {:si_unique_call 316} devirtbounce.7(0, __preempt_count, __preempt_count);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i5 == 1;
    call {:si_unique_call 315} devirtbounce.7(0, __preempt_count, __preempt_count);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_256:
    assume !assertsPassed;
    return;
}



const arch_static_branch: ref;

axiom arch_static_branch == $sub.ref(0, 418089);

procedure arch_static_branch($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation arch_static_branch($p0: ref) returns ($r: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} devirtbounce.6(0);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const qxl_bo_physical_address: ref;

axiom qxl_bo_physical_address == $sub.ref(0, 419121);

procedure qxl_bo_physical_address($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation qxl_bo_physical_address($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i9: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p17: ref;
  var $i18: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} {:cexpr "qxl_bo_physical_address:arg:offset"} boogie_si_record_i64($i2);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1008, 1));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.6, $p3);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3106, 1));
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.6, $p10);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i9 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3096, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i9);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref($i15, 32)), $mul.ref(24, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.6, $p17);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(424, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.6, $p20);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, $i2);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i23 := $or.i64($i18, $i22);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3105, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.6, $p6);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;
}



const qxl_ring_push: ref;

axiom qxl_ring_push == $sub.ref(0, 420153);

procedure qxl_ring_push($p0: ref, $p1: ref, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.41, $M.67, $M.68, assertsPassed, $M.46, $M.69, $M.70, $M.32, $M.42, $M.71, $M.43, $M.64, $M.36, $M.40, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.75, $M.49, $M.73, $M.74, $M.55, $M.65, $M.54;



implementation qxl_ring_push($p0: ref, $p1: ref, $i2: i1) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i32;
  var $i41: i1;
  var $i42: i64;
  var $i44: i1;
  var $i45: i64;
  var $p46: ref;
  var $i47: i64;
  var $i48: i32;
  var $i49: i1;
  var $i43: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $i66: i64;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $i85: i64;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i64;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i100: i32;
  var $p101: ref;
  var $i55: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i2);
    call {:si_unique_call 326} {:cexpr "qxl_ring_push:arg:interruptible"} boogie_si_record_i1($i2);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_116___0($p9);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    $p10 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    $p12 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.6, $p12);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32($i11, $i13);
    $p15 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.6, $p15);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i14, $i16);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    $p72 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.6, $p72);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(12, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.6, $p74);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i75, $sub.i32(0, 1));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i73, $i76);
    call {:si_unique_call 367} {:cexpr "idx"} boogie_si_record_i32($i77);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.6, $p78);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 20)), $mul.ref(20, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.6, $p82);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i84 := $mul.i32($i77, $i83);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i84);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p81, $mul.ref($i85, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.6, $p87);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i88);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.6;
    cmdloc_dummy_var_4 := $M.6;
    call {:si_unique_call 368} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p86, $p1, $i89, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_5;
    $p90 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.6, $p90);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i91, 1);
    $p93 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p93, $i92);
    call {:si_unique_call 369} devirtbounce.6(0);
    $p94 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.6, $p94);
    $p96 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.6, $p96);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i95, $i97);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} ldv_spin_unlock_irqrestore_113___1($p101, $u1);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $r := $i55;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i98 == 1;
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.6, $p99);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} outb(0, $i100);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb1:
    assume $i17 == 1;
    $p18 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.6, $p18);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    $p21 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p21, $i20);
    call {:si_unique_call 328} devirtbounce.6(0);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} ldv_spin_unlock_irqrestore_113___1($p22, $u1);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $i23 := drm_can_sleep___0();
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 331} {:cexpr "tmp___6"} boogie_si_record_i8($i24);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i5);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} __might_sleep(.str.33, 129, 0);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $i56 := qxl_check_header($p0);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    call {:si_unique_call 343} {:cexpr "tmp___3"} boogie_si_record_i32($i56);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} INIT_LIST_HEAD($p58);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p59, 0);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.6, $p60);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $i62 := prepare_to_wait_event($p61, $p4, 2);
    call {:si_unique_call 358} {:cexpr "tmp___4"} boogie_si_record_i64($i62);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $i63 := qxl_check_header($p0);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    call {:si_unique_call 360} {:cexpr "tmp___5"} boogie_si_record_i32($i63);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb42, $bb44;

  $bb44:
    assume !($i64 == 1);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    call $p65, $i66, $i67, $i68 := qxl_ring_push_loop_$bb45($p0, $p4, $p60, $p65, $i66, $i67, $i68);
    goto $bb45_last;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} schedule();
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.6, $p60);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $i66 := prepare_to_wait_event($p65, $p4, 2);
    call {:si_unique_call 364} {:cexpr "tmp___4"} boogie_si_record_i64($i66);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $i67 := qxl_check_header($p0);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    call {:si_unique_call 366} {:cexpr "tmp___5"} boogie_si_record_i32($i67);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb49_dummy;

  $bb46:
    assume $i68 == 1;
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.6, $p69);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} finish_wait($p70, $p4);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_118___0($p71);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    goto $bb50;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb43;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i57 == 1;
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} __might_sleep(.str.33, 124, 0);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $i33 := qxl_check_header($p0);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    call {:si_unique_call 340} {:cexpr "tmp___2"} boogie_si_record_i32($i33);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb33:
    assume $i54 == 1;
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i55 := $i53;
    goto $bb35;

  $bb19:
    assume $i34 == 1;
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} INIT_LIST_HEAD($p35);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p36, 0);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.6, $p37);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i39 := prepare_to_wait_event($p38, $p3, 1);
    call {:si_unique_call 346} {:cexpr "tmp___0"} boogie_si_record_i64($i39);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $i40 := qxl_check_header($p0);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    call {:si_unique_call 348} {:cexpr "tmp___1"} boogie_si_record_i32($i40);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume !($i41 == 1);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i42 := $i39;
    goto $bb24;

  $bb24:
    call $i42, $i44, $i45, $p46, $i47, $i48, $i49 := qxl_ring_push_loop_$bb24($p0, $p3, $p37, $i42, $i44, $i45, $p46, $i47, $i48, $i49);
    goto $bb24_last;

  $bb27:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i42, 0);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i45 := $i42;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} schedule();
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.6, $p37);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $i47 := prepare_to_wait_event($p46, $p3, 1);
    call {:si_unique_call 353} {:cexpr "tmp___0"} boogie_si_record_i64($i47);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $i48 := qxl_check_header($p0);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    call {:si_unique_call 355} {:cexpr "tmp___1"} boogie_si_record_i32($i48);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb31;

  $bb31:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i42 := $i47;
    goto $bb31_dummy;

  $bb25:
    assume $i49 == 1;
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.6, $p50);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} finish_wait($p51, $p3);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i64.i32($i43);
    call {:si_unique_call 350} {:cexpr "__ret"} boogie_si_record_i32($i52);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb32;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i43 := $i45;
    goto $bb26;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb22;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i27 == 1;
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $i28 := qxl_check_header($p0);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    call {:si_unique_call 333} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call $i30, $i31 := qxl_ring_push_loop_$bb11($p0, $i30, $i31);
    goto $bb11_last;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} __const_udelay(4295);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $i30 := qxl_check_header($p0);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    call {:si_unique_call 336} {:cexpr "tmp"} boogie_si_record_i32($i30);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb13_dummy;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb5;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb49_dummy:
    assume false;
    return;

  $bb45_last:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb31_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb12;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_116___0: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_116___0 == $sub.ref(0, 421185);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_116___0($p0: ref);
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_116___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_qxl_ring();
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_irqrestore_113___1: ref;

axiom ldv_spin_unlock_irqrestore_113___1 == $sub.ref(0, 422217);

procedure ldv_spin_unlock_irqrestore_113___1($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation ldv_spin_unlock_irqrestore_113___1($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} {:cexpr "ldv_spin_unlock_irqrestore_113___1:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_qxl_ring();
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} spin_unlock_irqrestore($p0, $i1);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;
}



const drm_can_sleep___0: ref;

axiom drm_can_sleep___0 == $sub.ref(0, 423249);

procedure drm_can_sleep___0() returns ($r: i1);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.41, $M.71, $M.43, $M.64, $M.36, assertsPassed, $M.40, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.75, $M.49, $M.73, $M.74, $M.55, $M.65, $M.54;



implementation drm_can_sleep___0() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i64;
  var $i27: i32;
  var $i28: i1;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $i0 := preempt_count___0();
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    call {:si_unique_call 378} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i1 := $sext.i32.i64($i0);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i2 := $and.i64($i1, $sub.i64(0, 2097153));
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    call {:si_unique_call 391} $i17 := devirtbounce.9(0, cpu_number);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    call {:si_unique_call 392} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i17);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $i24 := atomic_read(kgdb_active);
    call {:si_unique_call 385} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i17, $i24);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i25 == 1);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i26 := arch_local_save_flags();
    call {:si_unique_call 404} {:cexpr "_flags"} boogie_si_record_i64($i26);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $i27 := arch_irqs_disabled_flags($i26);
    call {:si_unique_call 406} {:cexpr "tmp___1"} boogie_si_record_i32($i27);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb41:
    assume $i28 == 1;
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb39:
    assume $i25 == 1;
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  SeqInstr_313:
    assume !assertsPassed;
    return;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 424281);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    return;
}



const qxl_check_header: ref;

axiom qxl_check_header == $sub.ref(0, 425313);

procedure qxl_check_header($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.41, assertsPassed;



implementation qxl_check_header($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112___1($p4);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, $p5);
    $p7 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.6, $p7);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i6, $i8);
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i12 := $ult.i32($i9, $i11);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    call {:si_unique_call 409} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} ldv_spin_unlock_irqrestore_113___1($p19, $u1);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i14 == 1;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.6, $p15);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 1);
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p18, $i17);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_364:
    assume !assertsPassed;
    return;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 426345);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 412} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    return;
}



const prepare_to_wait_event: ref;

axiom prepare_to_wait_event == $sub.ref(0, 427377);

procedure prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 413} {:cexpr "prepare_to_wait_event:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 1} true;
    call {:si_unique_call 414} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 415} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 428409);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 429441);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_118___0: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_118___0 == $sub.ref(0, 430473);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_118___0($p0: ref);
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_118___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_qxl_ring();
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;
}



const outb: ref;

axiom outb == $sub.ref(0, 431505);

procedure outb($i0: i8, $i1: i32);
  free requires assertsPassed;



implementation outb($i0: i8, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} {:cexpr "outb:arg:value"} boogie_si_record_i8($i0);
    call {:si_unique_call 419} {:cexpr "outb:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 420} devirtbounce.11(0, $i0, $i1);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_qxl_ring: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_qxl_ring == $sub.ref(0, 432537);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_qxl_ring();
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_qxl_ring()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i0 := $M.41;
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i3 := $M.41;
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} ldv_assume($i5);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 423} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_qxl_ring"} boogie_si_record_i32(2);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;
}



const __ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom __ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 433569);

procedure __ldv_linux_kernel_locking_spinlock_spin_lock($p0: ref);
  free requires assertsPassed;



implementation __ldv_linux_kernel_locking_spinlock_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112___1: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112___1 == $sub.ref(0, 434601);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112___1($p0: ref);
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112___1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_qxl_ring();
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;
}



const preempt_count___0: ref;

axiom preempt_count___0 == $sub.ref(0, 435633);

procedure preempt_count___0() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.41, $M.71, $M.43, $M.64, $M.36, assertsPassed, $M.40, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.75, $M.49, $M.73, $M.74, $M.55, $M.65, $M.54;



implementation preempt_count___0() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call {:si_unique_call 426} $i2 := devirtbounce.9(0, __preempt_count);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    call {:si_unique_call 427} {:cexpr "pfo_ret__"} boogie_si_record_i32($i2);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i2, 2147483647);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_379:
    assume !assertsPassed;
    return;
}



const __bad_size_call_parameter: ref;

axiom __bad_size_call_parameter == $sub.ref(0, 436665);

procedure __bad_size_call_parameter();



const ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_qxl_ring: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_qxl_ring == $sub.ref(0, 437697);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_qxl_ring();
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_qxl_ring()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i0 := $M.41;
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i3 := $M.41;
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} ldv_assume($i5);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 434} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_qxl_ring"} boogie_si_record_i32(1);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 438729);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 439761);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    return;
}



const qxl_bo_kunmap_atomic_page: ref;

axiom qxl_bo_kunmap_atomic_page == $sub.ref(0, 440793);

procedure qxl_bo_kunmap_atomic_page($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $CurrAddr, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.43, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation qxl_bo_kunmap_atomic_page($p0: ref, $p1: ref, $p2: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var vslice_dummy_var_76: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(8, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2592)), $mul.ref(32, 1));
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(56, 1)), $mul.ref(36, 1));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p7, $mul.ref($i12, 256));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(56, 1)), $mul.ref(36, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 2);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(56, 1)), $mul.ref(36, 1));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.6, $p21);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 3);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} qxl_bo_kunmap($p1);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} io_mapping_unmap_atomic($p2);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} vslice_dummy_var_76 := ttm_mem_io_lock($p13, 0);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(8, 1));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.6, $p26);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(56, 1));
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} ttm_mem_io_free($p27, $p29);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} ttm_mem_io_unlock($p13);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const io_mapping_unmap_atomic: ref;

axiom io_mapping_unmap_atomic == $sub.ref(0, 441825);

procedure io_mapping_unmap_atomic($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $CurrAddr, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.43, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation io_mapping_unmap_atomic($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} pagefault_enable();
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;
}



const ttm_mem_io_lock: ref;

axiom ttm_mem_io_lock == $sub.ref(0, 442857);

procedure ttm_mem_io_lock($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_mem_io_lock($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 444} {:cexpr "ttm_mem_io_lock:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 1} true;
    call {:si_unique_call 445} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 446} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ttm_mem_io_free: ref;

axiom ttm_mem_io_free == $sub.ref(0, 443889);

procedure ttm_mem_io_free($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ttm_mem_io_free($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    return;
}



const ttm_mem_io_unlock: ref;

axiom ttm_mem_io_unlock == $sub.ref(0, 444921);

procedure ttm_mem_io_unlock($p0: ref);
  free requires assertsPassed;



implementation ttm_mem_io_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    return;
}



const qxl_bo_kunmap: ref;

axiom qxl_bo_kunmap == $sub.ref(0, 445953);

procedure qxl_bo_kunmap($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_bo_kunmap($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1000, 1));
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1000, 1));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p5, $0.ref);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(960, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} ttm_bo_kunmap($p6);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ttm_bo_kunmap: ref;

axiom ttm_bo_kunmap == $sub.ref(0, 446985);

procedure ttm_bo_kunmap($p0: ref);
  free requires assertsPassed;



implementation ttm_bo_kunmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    return;
}



const pagefault_enable: ref;

axiom pagefault_enable == $sub.ref(0, 448017);

procedure pagefault_enable();
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $CurrAddr, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.43, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation pagefault_enable()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} devirtbounce.6(0);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} __preempt_count_sub(1);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;
}



const __preempt_count_sub: ref;

axiom __preempt_count_sub == $sub.ref(0, 449049);

procedure __preempt_count_sub($i0: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $CurrAddr, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.43, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation __preempt_count_sub($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} {:cexpr "__preempt_count_sub:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32(0, 1);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i7 == 1);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i8 == 1);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, $i0);
    call {:si_unique_call 459} devirtbounce.8(0, __preempt_count, $i9, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i8 == 1;
    call {:si_unique_call 458} devirtbounce.7(0, __preempt_count, __preempt_count);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i7 == 1;
    call {:si_unique_call 457} devirtbounce.7(0, __preempt_count, __preempt_count);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_415:
    assume !assertsPassed;
    return;
}



const qxl_bo_kmap_atomic_page: ref;

axiom qxl_bo_kmap_atomic_page == $sub.ref(0, 450081);

procedure qxl_bo_kmap_atomic_page($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.42, $M.6, $CurrAddr, $M.43, $M.46, $M.38, $M.39, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation qxl_bo_kmap_atomic_page($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p22: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $i36: i32;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $p45: ref;
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 465} {:cexpr "qxl_bo_kmap_atomic_page:arg:page_offset___0"} boogie_si_record_i32($i2);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(8, 1));
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2592)), $mul.ref(32, 1));
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(56, 1)), $mul.ref(36, 1));
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p8, $mul.ref($i13, 256));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(56, 1)), $mul.ref(36, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.6, $p17);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 2);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(56, 1)), $mul.ref(36, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.6, $p25);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 3);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1000, 1));
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.6, $p46);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $i56 := qxl_bo_kmap($p1, $p3);
    call {:si_unique_call 472} {:cexpr "ret"} boogie_si_record_i32($i56);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.42, $p3);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i2);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i60 := $mul.i64($i59, 4096);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p58, $mul.ref($i60, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p3, $p61);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.42, $p3);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p45 := $p62;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $r := $p45;
    return;

  $bb12:
    assume $i57 == 1;
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p45 := $0.ref;
    goto $bb8;

  $bb9:
    assume $i49 == 1;
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1000, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.6, $p50);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i2);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i53 := $mul.i64($i52, 4096);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p51, $mul.ref($i53, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p3, $p54);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.42, $p3);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p45 := $p55;
    goto $bb8;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4952, 1));
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p22 := $p29;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} vslice_dummy_var_77 := ttm_mem_io_lock($p14, 0);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(8, 1));
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p32);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(56, 1));
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $i36 := ttm_mem_io_reserve($p33, $p35);
    call {:si_unique_call 468} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} ttm_mem_io_unlock($p14);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(56, 1)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.6, $p40);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i2);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i41, $i42);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $p44 := io_mapping_map_atomic_wc($p22, $i43);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p45 := $p44;
    goto $bb8;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4944, 1));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p22 := $p21;
    goto $bb3;
}



const ttm_mem_io_reserve: ref;

axiom ttm_mem_io_reserve == $sub.ref(0, 451113);

procedure ttm_mem_io_reserve($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_mem_io_reserve($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 1} true;
    call {:si_unique_call 473} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 474} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const io_mapping_map_atomic_wc: ref;

axiom io_mapping_map_atomic_wc == $sub.ref(0, 452145);

procedure io_mapping_map_atomic_wc($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $CurrAddr, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.43, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation io_mapping_map_atomic_wc($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} {:cexpr "io_mapping_map_atomic_wc:arg:offset"} boogie_si_record_i64($i1);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} pagefault_disable();
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($i1, 1));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;
}



const qxl_bo_kmap: ref;

axiom qxl_bo_kmap == $sub.ref(0, 453177);

procedure qxl_bo_kmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.6, $M.43, $CurrAddr;



implementation qxl_bo_kmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1000, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(32, 1));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.6, $p14);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(960, 1));
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $i17 := ttm_bo_kmap($p12, 0, $i15, $p16);
    call {:si_unique_call 479} {:cexpr "r"} boogie_si_record_i32($i17);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(960, 1));
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $p20 := ttm_kmap_obj_virtual($p19, $p2);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1000, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p21, $p20);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1000, 1));
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p1, $p25);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i11 := $i17;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p1);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1000, 1));
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p1, $p10);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ttm_bo_kmap: ref;

axiom ttm_bo_kmap == $sub.ref(0, 454209);

procedure ttm_bo_kmap($p0: ref, $i1: i64, $i2: i64, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_kmap($p0: ref, $i1: i64, $i2: i64, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 481} {:cexpr "ttm_bo_kmap:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 482} {:cexpr "ttm_bo_kmap:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 1} true;
    call {:si_unique_call 483} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 484} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ttm_kmap_obj_virtual: ref;

axiom ttm_kmap_obj_virtual == $sub.ref(0, 455241);

procedure ttm_kmap_obj_virtual($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.43;



implementation ttm_kmap_obj_virtual($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, $p2);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 128);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p1, $i6);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;
}



const pagefault_disable: ref;

axiom pagefault_disable == $sub.ref(0, 456273);

procedure pagefault_disable();
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $CurrAddr, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.43, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation pagefault_disable()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} __preempt_count_add(1);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    call {:si_unique_call 486} devirtbounce.6(0);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_433:
    assume !assertsPassed;
    return;
}



const __preempt_count_add: ref;

axiom __preempt_count_add == $sub.ref(0, 457305);

procedure __preempt_count_add($i0: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $CurrAddr, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.43, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation __preempt_count_add($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} {:cexpr "__preempt_count_add:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32(0, 1);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i5 == 1);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i6 == 1);
    call {:si_unique_call 496} devirtbounce.8(0, __preempt_count, $i0, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i6 == 1;
    call {:si_unique_call 495} devirtbounce.7(0, __preempt_count, __preempt_count);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i5 == 1;
    call {:si_unique_call 494} devirtbounce.7(0, __preempt_count, __preempt_count);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_448:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_surf_id_idr_lock_of_qxl_device: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_surf_id_idr_lock_of_qxl_device == $sub.ref(0, 458337);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_surf_id_idr_lock_of_qxl_device();
  free requires assertsPassed;
  modifies $M.44, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_surf_id_idr_lock_of_qxl_device()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i0 := $M.44;
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i3 := $M.44;
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} ldv_assume($i5);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 503} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_surf_id_idr_lock_of_qxl_device"} boogie_si_record_i32(1);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 459369);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 1} true;
    call {:si_unique_call 504} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 505} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_surf_id_idr_lock_of_qxl_device: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_surf_id_idr_lock_of_qxl_device == $sub.ref(0, 460401);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_surf_id_idr_lock_of_qxl_device();
  free requires assertsPassed;
  modifies $M.44, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_surf_id_idr_lock_of_qxl_device()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i0 := $M.44;
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i3 := $M.44;
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} ldv_assume($i5);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 508} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_surf_id_idr_lock_of_qxl_device"} boogie_si_record_i32(2);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_463:
    assume !assertsPassed;
    return;
}



const qxl_release_alloc: ref;

axiom qxl_release_alloc == $sub.ref(0, 461433);

procedure qxl_release_alloc($p0: ref, $i1: i32, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.6, $M.52, $M.53, assertsPassed, $M.46, $M.38, $M.39, $M.42, $CurrAddr, $M.37, $M.67, $M.68, $M.72, $M.73, $M.74, $M.69, $M.70, $M.32, $M.49, $M.40, $M.44, $M.43, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation qxl_release_alloc($p0: ref, $i1: i32, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} {:cexpr "qxl_release_alloc:arg:type"} boogie_si_record_i32($i1);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $p3 := kmalloc(216, 208);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, $0.ref);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(92, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p10, $i1);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(96, 1));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p11, 0);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(100, 1));
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p12, 0);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} INIT_LIST_HEAD($p13);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} idr_preload(208);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3312, 1));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} ldv_spin_lock_113($p14);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3192, 1));
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p4);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i17 := ldv_idr_alloc_114($p15, $p16, 1, 0, 0);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    call {:si_unique_call 516} {:cexpr "handle"} boogie_si_record_i32($i17);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3304, 1));
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.6, $p18);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3304, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p21, $i20);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3304, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p22);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(0, 1)), $mul.ref(60, 1));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p25, $i23);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3312, 1));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} ldv_spin_unlock_115($p26);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} rcu_read_unlock_sched_notrace();
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i17, 0);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2, $p3);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i30 := $M.45;
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i30, 0);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(88, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p32, $i17);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i17);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i7 := $i33;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} qxl_io_log.ref.ref.i32($p0, .str.188, $i17);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p4);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} kfree($p28);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2, $0.ref);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i17);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i7 := $i29;
    goto $bb3;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} drm_err.ref(.str.187);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  SeqInstr_466:
    assume !assertsPassed;
    return;
}



const qxl_bo_ref: ref;

axiom qxl_bo_ref == $sub.ref(0, 462465);

procedure qxl_bo_ref($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_bo_ref($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var vslice_dummy_var_78: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} vslice_dummy_var_78 := ttm_bo_reference($p1);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const qxl_release_list_add: ref;

axiom qxl_release_list_add == $sub.ref(0, 463497);

procedure qxl_release_list_add($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation qxl_release_list_add($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p12: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $i20: i32;
  var vslice_dummy_var_79: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i8, $i10);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $p30 := kmalloc(32, 208);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} vslice_dummy_var_79 := qxl_bo_ref($p1);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p37, $p35);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p39, 0);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} list_add_tail($p41, $p42);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 12);
    goto $bb8;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p12 := $p4;
    goto $bb4;

  $bb4:
    call $p14, $p15, $i16, $p17, $i18, $i19, $p23, $p24, $p25, $p27, $i28, $i29, $p12 := qxl_release_list_add_loop_$bb4($p1, $i10, $p14, $p15, $i16, $p17, $i18, $i19, $p23, $p24, $p25, $p27, $i28, $i29, $p12);
    goto $bb4_last;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i16, $i18);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.6, $p23);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, $i10);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $p12 := $p24;
    goto $bb10_dummy;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1911;
}



const qxl_bo_unref: ref;

axiom qxl_bo_unref == $sub.ref(0, 464529);

procedure qxl_bo_unref($p0: ref);
  free requires assertsPassed;
  modifies $M.46, $M.6, $CurrAddr;



implementation qxl_bo_unref($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p0);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p0);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $M.46 := $store.ref($M.46, $p1, $p6);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} ttm_bo_unref($p1);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.46, $p1);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p0, $0.ref);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_alloc_release_reserved: ref;

axiom qxl_alloc_release_reserved == $sub.ref(0, 465561);

procedure qxl_alloc_release_reserved($p0: ref, $i1: i64, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.42, $CurrAddr, $M.52, $M.53, $M.49, assertsPassed, $M.38, $M.39, $M.43, $M.37, $M.67, $M.68, $M.72, $M.73, $M.74, $M.69, $M.70, $M.32, $M.40, $M.44, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation qxl_alloc_release_reserved($p0: ref, $i1: i64, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i1;
  var $i8: i1;
  var $i10: i1;
  var $i9: i32;
  var $i7: i32;
  var $i12: i64;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $p33: ref;
  var $i34: i64;
  var $p36: ref;
  var $i37: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i64;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $p58: ref;
  var $i59: i32;
  var $i60: i64;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i64;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $p84: ref;
  var $p85: ref;
  var $i11: i32;
  var vslice_dummy_var_80: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 528} {:cexpr "qxl_alloc_release_reserved:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 529} {:cexpr "qxl_alloc_release_reserved:arg:type"} boogie_si_record_i32($i2);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 0);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 1);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, 2);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} drm_err.ref.i32(.str.69, $i2);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := 2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i12 := qxl_release_alloc($p0, $i2, $p3);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    call {:si_unique_call 531} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    call {:si_unique_call 532} {:cexpr "idr_ret"} boogie_si_record_i32($i13);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4960, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} ldv_mutex_lock_119($p17);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i7);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5144, 1)), $mul.ref($i18, 4));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.6, $p20);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 1);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i7);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref(releases_per_bo, $mul.ref(0, 12)), $mul.ref($i23, 4));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.47, $p24);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i26 := $sge.i32($i22, $i25);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i7);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5120, 1)), $mul.ref($i37, 8));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.6, $p39);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i7);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5120, 1)), $mul.ref($i51, 8));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.6, $p53);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $p55 := qxl_bo_ref($p54);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p5, $p55);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i7);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5144, 1)), $mul.ref($i56, 4));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.6, $p58);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i7);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref(release_size_per_bo, $mul.ref(0, 12)), $mul.ref($i60, 4));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.48, $p61);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i63 := $mul.i32($i59, $i62);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.6, $p3);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 216)), $mul.ref(96, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p65, $i63);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i7);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5144, 1)), $mul.ref($i66, 4));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.6, $p68);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i69, 1);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i7);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5144, 1)), $mul.ref($i71, 4));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p73, $i70);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p4);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4960, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} ldv_mutex_unlock_121($p77);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.6, $p3);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.6, $p5);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} vslice_dummy_var_80 := qxl_release_list_add($p78, $p79);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.6, $p3);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $p82 := qxl_release_map($p0, $p81);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i13);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p82);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p84, $i83);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.6, $p3);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} qxl_release_unmap($p0, $p85, $p82);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} qxl_bo_unref($p5);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i11 := $i50;
    goto $bb10;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i75 == 1;
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.6, $p5);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p4, $p76);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i42 == 1;
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5120, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i7);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p44, $mul.ref($i45, 8));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i47 := qxl_release_bo_alloc($p0, $p46);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    call {:si_unique_call 537} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i50 := $i47;
    goto $bb25;

  $bb22:
    assume $i48 == 1;
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4960, 1));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} ldv_mutex_unlock_120($p49);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i11 := $i47;
    goto $bb10;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i26 == 1;
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5120, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i7);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p28, $mul.ref($i29, 8));
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} qxl_bo_unref($p30);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i7);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5144, 1)), $mul.ref($i31, 4));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p33, 0);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i7);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5120, 1)), $mul.ref($i34, 8));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p36, $0.ref);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p4);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i11 := $i13;
    goto $bb10;

  $bb13:
    assume $i16 == 1;
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p4, $0.ref);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const ldv_mutex_lock_119: ref;

axiom ldv_mutex_lock_119 == $sub.ref(0, 466593);

procedure ldv_mutex_lock_119($p0: ref);
  free requires assertsPassed;
  modifies $M.49, assertsPassed;



implementation ldv_mutex_lock_119($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} ldv_linux_kernel_locking_mutex_mutex_lock_release_mutex_of_qxl_device($p0);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_508:
    assume !assertsPassed;
    return;
}



const qxl_release_bo_alloc: ref;

axiom qxl_release_bo_alloc == $sub.ref(0, 467625);

procedure qxl_release_bo_alloc($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, assertsPassed, $CurrAddr;



implementation qxl_release_bo_alloc($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $i2 := qxl_bo_create($p0, 4096, 0, 1, 1, $0.ref, $p1);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    call {:si_unique_call 547} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_511:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_120: ref;

axiom ldv_mutex_unlock_120 == $sub.ref(0, 468657);

procedure ldv_mutex_unlock_120($p0: ref);
  free requires assertsPassed;
  modifies $M.49, assertsPassed;



implementation ldv_mutex_unlock_120($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} ldv_linux_kernel_locking_mutex_mutex_unlock_release_mutex_of_qxl_device($p0);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_514:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_121: ref;

axiom ldv_mutex_unlock_121 == $sub.ref(0, 469689);

procedure ldv_mutex_unlock_121($p0: ref);
  free requires assertsPassed;
  modifies $M.49, assertsPassed;



implementation ldv_mutex_unlock_121($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} ldv_linux_kernel_locking_mutex_mutex_unlock_release_mutex_of_qxl_device($p0);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_517:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_release_mutex_of_qxl_device: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_release_mutex_of_qxl_device == $sub.ref(0, 470721);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_release_mutex_of_qxl_device($p0: ref);
  free requires assertsPassed;
  modifies $M.49, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_release_mutex_of_qxl_device($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i1 := $M.49;
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $M.49 := 0;
    call {:si_unique_call 551} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_release_mutex_of_qxl_device"} boogie_si_record_i8(0);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_520:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_release_mutex_of_qxl_device: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_release_mutex_of_qxl_device == $sub.ref(0, 471753);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_release_mutex_of_qxl_device($p0: ref);
  free requires assertsPassed;
  modifies $M.49, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_release_mutex_of_qxl_device($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i1 := $M.49;
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 553} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_release_mutex_of_qxl_device"} boogie_si_record_i8(1);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_523:
    assume !assertsPassed;
    return;
}



const ttm_bo_unref: ref;

axiom ttm_bo_unref == $sub.ref(0, 472785);

procedure ttm_bo_unref($p0: ref);
  free requires assertsPassed;



implementation ttm_bo_unref($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 473817);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 555} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} ldv_check_alloc_flags($i1);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $p2 := ldv_malloc_unknown_size();
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} ldv_after_alloc($p2);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_526:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 474849);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} ldv_linux_alloc_irq_check_alloc_flags($i0);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} ldv_linux_alloc_usb_lock_check_alloc_flags($i0);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  SeqInstr_529:
    assume !assertsPassed;
    return;
}



const ldv_malloc_unknown_size: ref;

axiom ldv_malloc_unknown_size == $sub.ref(0, 475881);

procedure ldv_malloc_unknown_size() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_malloc_unknown_size() returns ($r: ref)
{
  var $i0: i32;
  var $i1: i1;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $i0 := ldv_undef_int();
    call {:si_unique_call 563} {:cexpr "tmp___1"} boogie_si_record_i32($i0);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $p2 := external_allocated_data();
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} ldv_assume($i5);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $i6 := ldv_is_err($p2);
    call {:si_unique_call 567} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} ldv_assume($i8);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p9 := $p2;
    goto $bb3;
}



const ldv_after_alloc: ref;

axiom ldv_after_alloc == $sub.ref(0, 476913);

procedure ldv_after_alloc($p0: ref);
  free requires assertsPassed;



implementation ldv_after_alloc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    return;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 477945);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 1} true;
    call {:si_unique_call 569} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 570} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 571} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const external_allocated_data: ref;

axiom external_allocated_data == $sub.ref(0, 478977);

procedure external_allocated_data() returns ($r: ref);
  free requires assertsPassed;



implementation external_allocated_data() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $p0 := external_alloc();
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 480009);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 4294967295);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_linux_alloc_irq_check_alloc_flags: ref;

axiom ldv_linux_alloc_irq_check_alloc_flags == $sub.ref(0, 481041);

procedure ldv_linux_alloc_irq_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_irq_check_alloc_flags($i0: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i6: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} {:cexpr "ldv_linux_alloc_irq_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i1 := ldv_in_interrupt_context();
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 575} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 32);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i6);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} ldv_assert_linux_alloc_irq__wrong_flags($i8);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const ldv_linux_alloc_usb_lock_check_alloc_flags: ref;

axiom ldv_linux_alloc_usb_lock_check_alloc_flags == $sub.ref(0, 482073);

procedure ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i5: i1;
  var $i4: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} {:cexpr "ldv_linux_alloc_usb_lock_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i1 := $M.50;
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 16);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 32);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i4);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} ldv_assert_linux_alloc_usb_lock__wrong_flags($i6);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb4;
}



const ldv_assert_linux_alloc_usb_lock__wrong_flags: ref;

axiom ldv_assert_linux_alloc_usb_lock__wrong_flags == $sub.ref(0, 483105);

procedure ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} {:cexpr "ldv_assert_linux_alloc_usb_lock__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 1} true;
    call {:si_unique_call 580} __VERIFIER_error();
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_in_interrupt_context: ref;

axiom ldv_in_interrupt_context == $sub.ref(0, 484137);

procedure ldv_in_interrupt_context() returns ($r: i1);
  free requires assertsPassed;



implementation ldv_in_interrupt_context() returns ($r: i1)
{
  var $i0: i8;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i0 := $M.51;
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i8.i1($i0);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_assert_linux_alloc_irq__wrong_flags: ref;

axiom ldv_assert_linux_alloc_irq__wrong_flags == $sub.ref(0, 485169);

procedure ldv_assert_linux_alloc_irq__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_irq__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} {:cexpr "ldv_assert_linux_alloc_irq__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 1} true;
    call {:si_unique_call 582} __VERIFIER_error();
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ttm_bo_reference: ref;

axiom ttm_bo_reference == $sub.ref(0, 486201);

procedure ttm_bo_reference($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation ttm_bo_reference($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(48, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} kref_get($p1);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const kref_get: ref;

axiom kref_get == $sub.ref(0, 487233);

procedure kref_get($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation kref_get($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var vslice_dummy_var_81: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $i2 := atomic_add_return(1, $p1);
    call {:si_unique_call 585} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 1);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 586} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 588} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} vslice_dummy_var_81 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 589} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 591} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 594} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} warn_slowpath_null(.str.170, 47);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 488265);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $i2 := ldv_linux_usb_dev_atomic_add_return($i0, $p1);
    call {:si_unique_call 598} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 489297);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_usb_dev_atomic_add_return: ref;

axiom ldv_linux_usb_dev_atomic_add_return == $sub.ref(0, 490329);

procedure ldv_linux_usb_dev_atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation ldv_linux_usb_dev_atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} {:cexpr "ldv_linux_usb_dev_atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, $p2);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p5, $i4);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.6, $p6);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const idr_preload: ref;

axiom idr_preload == $sub.ref(0, 491361);

procedure idr_preload($i0: i32);
  free requires assertsPassed;



implementation idr_preload($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} {:cexpr "idr_preload:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_113: ref;

axiom ldv_spin_lock_113 == $sub.ref(0, 492393);

procedure ldv_spin_lock_113($p0: ref);
  free requires assertsPassed;
  modifies $M.52, assertsPassed;



implementation ldv_spin_lock_113($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} ldv_linux_kernel_locking_spinlock_spin_lock_release_idr_lock_of_qxl_device();
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} spin_lock($p0);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_547:
    assume !assertsPassed;
    return;
}



const ldv_idr_alloc_114: ref;

axiom ldv_idr_alloc_114 == $sub.ref(0, 493425);

procedure ldv_idr_alloc_114($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.53, assertsPassed;



implementation ldv_idr_alloc_114($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} {:cexpr "ldv_idr_alloc_114:arg:ldv_func_arg3"} boogie_si_record_i32($i2);
    call {:si_unique_call 605} {:cexpr "ldv_idr_alloc_114:arg:ldv_func_arg4"} boogie_si_record_i32($i3);
    call {:si_unique_call 606} {:cexpr "ldv_idr_alloc_114:arg:ldv_func_arg5"} boogie_si_record_i32($i4);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} ldv_linux_lib_idr_idr_alloc_release_idr_of_qxl_device();
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $i5 := ldv_undef_int();
    call {:si_unique_call 609} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_550:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_115: ref;

axiom ldv_spin_unlock_115 == $sub.ref(0, 494457);

procedure ldv_spin_unlock_115($p0: ref);
  free requires assertsPassed;
  modifies $M.52, assertsPassed;



implementation ldv_spin_unlock_115($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} ldv_linux_kernel_locking_spinlock_spin_unlock_release_idr_lock_of_qxl_device();
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} spin_unlock($p0);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_553:
    assume !assertsPassed;
    return;
}



const qxl_io_log: ref;

axiom qxl_io_log == $sub.ref(0, 495489);

procedure qxl_io_log.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var vslice_dummy_var_82: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} ldv__builtin_va_start($p4);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} vslice_dummy_var_82 := vsnprintf($p8, 4096, $p1, $p9);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} ldv__builtin_va_end($p12);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 7);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} outb(0, $i15);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.i64.i64.ref.ref($p0: ref, $p1: ref, p.2: i64, p.3: i64, p.4: ref, p.5: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.i64.i64.ref.ref($p0: ref, $p1: ref, p.2: i64, p.3: i64, p.4: ref, p.5: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var vslice_dummy_var_83: i32;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} ldv__builtin_va_start($p4);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} vslice_dummy_var_83 := vsnprintf($p8, 4096, $p1, $p9);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} ldv__builtin_va_end($p12);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 7);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} outb(0, $i15);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var vslice_dummy_var_84: i32;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} ldv__builtin_va_start($p4);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} vslice_dummy_var_84 := vsnprintf($p8, 4096, $p1, $p9);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} ldv__builtin_va_end($p12);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 7);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} outb(0, $i15);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var vslice_dummy_var_85: i32;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} ldv__builtin_va_start($p4);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} vslice_dummy_var_85 := vsnprintf($p8, 4096, $p1, $p9);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} ldv__builtin_va_end($p12);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 7);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} outb(0, $i15);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.ref.i64.ref($p0: ref, $p1: ref, p.2: ref, p.3: i64, p.4: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.ref.i64.ref($p0: ref, $p1: ref, p.2: ref, p.3: i64, p.4: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var vslice_dummy_var_86: i32;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} ldv__builtin_va_start($p4);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} vslice_dummy_var_86 := vsnprintf($p8, 4096, $p1, $p9);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} ldv__builtin_va_end($p12);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 7);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} outb(0, $i15);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var vslice_dummy_var_87: i32;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} ldv__builtin_va_start($p4);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} vslice_dummy_var_87 := vsnprintf($p8, 4096, $p1, $p9);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} ldv__builtin_va_end($p12);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 7);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} outb(0, $i15);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var vslice_dummy_var_88: i32;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} ldv__builtin_va_start($p4);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} vslice_dummy_var_88 := vsnprintf($p8, 4096, $p1, $p9);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} ldv__builtin_va_end($p12);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 7);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} outb(0, $i15);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var vslice_dummy_var_89: i32;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} ldv__builtin_va_start($p4);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} vslice_dummy_var_89 := vsnprintf($p8, 4096, $p1, $p9);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} ldv__builtin_va_end($p12);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 7);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} outb(0, $i15);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.ref.ref.i64($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i64);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.ref.ref.i64($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var vslice_dummy_var_90: i32;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} ldv__builtin_va_start($p4);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} vslice_dummy_var_90 := vsnprintf($p8, 4096, $p1, $p9);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} ldv__builtin_va_end($p12);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 7);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} outb(0, $i15);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var vslice_dummy_var_91: i32;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} ldv__builtin_va_start($p4);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} vslice_dummy_var_91 := vsnprintf($p8, 4096, $p1, $p9);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} ldv__builtin_va_end($p12);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 7);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} outb(0, $i15);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.i32.i64.i32($p0: ref, $p1: ref, p.2: i32, p.3: i64, p.4: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.i32.i64.i32($p0: ref, $p1: ref, p.2: i32, p.3: i64, p.4: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var vslice_dummy_var_92: i32;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} ldv__builtin_va_start($p4);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} vslice_dummy_var_92 := vsnprintf($p8, 4096, $p1, $p9);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} ldv__builtin_va_end($p12);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 7);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} outb(0, $i15);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var vslice_dummy_var_93: i32;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} ldv__builtin_va_start($p4);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} vslice_dummy_var_93 := vsnprintf($p8, 4096, $p1, $p9);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} ldv__builtin_va_end($p12);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 7);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} outb(0, $i15);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var vslice_dummy_var_94: i32;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} ldv__builtin_va_start($p4);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} vslice_dummy_var_94 := vsnprintf($p8, 4096, $p1, $p9);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} ldv__builtin_va_end($p12);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 7);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} outb(0, $i15);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var vslice_dummy_var_95: i32;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} ldv__builtin_va_start($p4);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} vslice_dummy_var_95 := vsnprintf($p8, 4096, $p1, $p9);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} ldv__builtin_va_end($p12);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 7);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} outb(0, $i15);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.i64($p0: ref, $p1: ref, p.2: i64);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.i64($p0: ref, $p1: ref, p.2: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var vslice_dummy_var_96: i32;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} ldv__builtin_va_start($p4);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} vslice_dummy_var_96 := vsnprintf($p8, 4096, $p1, $p9);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} ldv__builtin_va_end($p12);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 7);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} outb(0, $i15);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var vslice_dummy_var_97: i32;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} ldv__builtin_va_start($p4);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} vslice_dummy_var_97 := vsnprintf($p8, 4096, $p1, $p9);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} ldv__builtin_va_end($p12);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 7);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} outb(0, $i15);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var vslice_dummy_var_98: i32;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} ldv__builtin_va_start($p4);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} vslice_dummy_var_98 := vsnprintf($p8, 4096, $p1, $p9);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} ldv__builtin_va_end($p12);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 7);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} outb(0, $i15);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    return;
}



const ldv__builtin_va_start: ref;

axiom ldv__builtin_va_start == $sub.ref(0, 496521);

procedure ldv__builtin_va_start($p0: ref);
  free requires assertsPassed;



implementation ldv__builtin_va_start($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    return;
}



const vsnprintf: ref;

axiom vsnprintf == $sub.ref(0, 497553);

procedure vsnprintf($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32);



const ldv__builtin_va_end: ref;

axiom ldv__builtin_va_end == $sub.ref(0, 498585);

procedure ldv__builtin_va_end($p0: ref);
  free requires assertsPassed;



implementation ldv__builtin_va_end($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_release_idr_lock_of_qxl_device: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_release_idr_lock_of_qxl_device == $sub.ref(0, 499617);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_release_idr_lock_of_qxl_device();
  free requires assertsPassed;
  modifies $M.52, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_release_idr_lock_of_qxl_device()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i0 := $M.52;
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i3 := $M.52;
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} ldv_assume($i5);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 699} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_release_idr_lock_of_qxl_device"} boogie_si_record_i32(1);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_556:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_idr_alloc_release_idr_of_qxl_device: ref;

axiom ldv_linux_lib_idr_idr_alloc_release_idr_of_qxl_device == $sub.ref(0, 500649);

procedure ldv_linux_lib_idr_idr_alloc_release_idr_of_qxl_device();
  free requires assertsPassed;
  modifies $M.53, assertsPassed;



implementation ldv_linux_lib_idr_idr_alloc_release_idr_of_qxl_device()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i0 := $M.53;
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} ldv_assert_linux_lib_idr__not_initialized($i2);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i3 := $M.53;
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 3);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} ldv_assert_linux_lib_idr__destroyed_before_usage($i5);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 702} {:cexpr "ldv_linux_lib_idr_idr_release_idr_of_qxl_device"} boogie_si_record_i32(2);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  SeqInstr_559:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_lib_idr__not_initialized: ref;

axiom ldv_assert_linux_lib_idr__not_initialized == $sub.ref(0, 501681);

procedure ldv_assert_linux_lib_idr__not_initialized($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__not_initialized($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} {:cexpr "ldv_assert_linux_lib_idr__not_initialized:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 1} true;
    call {:si_unique_call 704} __VERIFIER_error();
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_lib_idr__destroyed_before_usage: ref;

axiom ldv_assert_linux_lib_idr__destroyed_before_usage == $sub.ref(0, 502713);

procedure ldv_assert_linux_lib_idr__destroyed_before_usage($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__destroyed_before_usage($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} {:cexpr "ldv_assert_linux_lib_idr__destroyed_before_usage:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 1} true;
    call {:si_unique_call 706} __VERIFIER_error();
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_release_idr_lock_of_qxl_device: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_release_idr_lock_of_qxl_device == $sub.ref(0, 503745);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_release_idr_lock_of_qxl_device();
  free requires assertsPassed;
  modifies $M.52, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_release_idr_lock_of_qxl_device()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i0 := $M.52;
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i3 := $M.52;
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} ldv_assume($i5);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 709} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_release_idr_lock_of_qxl_device"} boogie_si_record_i32(2);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_571:
    assume !assertsPassed;
    return;
}



const qxl_io_update_area: ref;

axiom qxl_io_update_area == $sub.ref(0, 504777);

procedure qxl_io_update_area($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.54, assertsPassed, $M.55;



implementation qxl_io_update_area($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i9: i32;
  var $p13: ref;
  var $i14: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i38: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1265, 1));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.6, $p3);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} drm_err.ref(.str.40);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1264, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.6, $p6);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    call {:si_unique_call 711} {:cexpr "surface_id"} boogie_si_record_i32($i11);
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(4, 1));
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    call {:si_unique_call 712} {:cexpr "surface_width"} boogie_si_record_i32($i14);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(8, 1));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    call {:si_unique_call 713} {:cexpr "surface_height"} boogie_si_record_i32($i17);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.6, $p18);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.6, $p21);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 0);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.6, $p24);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i26 := $ugt.i32($i25, $i14);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i26 == 1);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.6, $p27);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i29 := $ugt.i32($i28, $i17);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4432, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} ldv_mutex_lock_125($p39);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.6, $p40);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 5424)), $mul.ref(5264, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p2);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.6;
    cmdloc_dummy_var_7 := $M.6;
    call {:si_unique_call 716} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p43, $p44, 16, $zext.i32.i64(4), 0 == 1);
    $M.6 := cmdloc_dummy_var_8;
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.6, $p45);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 5424)), $mul.ref(5280, 1));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p47, $i9);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $i48 := wait_for_io_cmd_user($p0, 0, 16, 1);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    call {:si_unique_call 718} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4432, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} ldv_mutex_unlock_126($p49);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i38 := $i48;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.6, $p30);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.6, $p32);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.6, $p34);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.6, $p36);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} qxl_io_log.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32($p0, .str.41, .str.42, $i9, $i31, $i33, $i35, $i37, $i14, $i17);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 22);
    goto $bb16;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb8;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_125: ref;

axiom ldv_mutex_lock_125 == $sub.ref(0, 505809);

procedure ldv_mutex_lock_125($p0: ref);
  free requires assertsPassed;
  modifies $M.54, assertsPassed;



implementation ldv_mutex_lock_125($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} ldv_linux_kernel_locking_mutex_mutex_lock_update_area_mutex_of_qxl_device($p0);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_583:
    assume !assertsPassed;
    return;
}



const wait_for_io_cmd_user: ref;

axiom wait_for_io_cmd_user == $sub.ref(0, 506841);

procedure wait_for_io_cmd_user($p0: ref, $i1: i8, $i2: i64, $i3: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.55, assertsPassed;



implementation wait_for_io_cmd_user($p0: ref, $i1: i8, $i2: i64, $i3: i1) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i8;
  var $i24: i1;
  var $i25: i1;
  var $i26: i64;
  var $i27: i1;
  var $i29: i1;
  var $i28: i1;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i8;
  var $i41: i1;
  var $i42: i1;
  var $i43: i64;
  var $i44: i1;
  var $i46: i1;
  var $i45: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i64;
  var $i51: i1;
  var $i52: i64;
  var $i53: i64;
  var $i50: i64;
  var $p54: ref;
  var $i55: i64;
  var $i56: i32;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i61: i8;
  var $i62: i1;
  var $i63: i1;
  var $i64: i64;
  var $i65: i1;
  var $i67: i1;
  var $i66: i1;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p73: ref;
  var $i74: i64;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $i78: i8;
  var $i79: i1;
  var $i80: i1;
  var $i81: i64;
  var $i82: i1;
  var $i84: i1;
  var $i83: i1;
  var $i85: i32;
  var $i86: i1;
  var $i87: i64;
  var $i88: i64;
  var $p89: ref;
  var $i90: i64;
  var $i91: i32;
  var $i57: i32;
  var $i92: i1;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i8;
  var $i99: i32;
  var $i100: i32;
  var $p101: ref;
  var $i102: i1;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $i106: i8;
  var $i107: i1;
  var $i108: i1;
  var $i109: i64;
  var $i110: i1;
  var $i112: i1;
  var $i111: i1;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $p118: ref;
  var $i119: i64;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;
  var $i123: i8;
  var $i124: i1;
  var $i125: i1;
  var $i126: i64;
  var $i127: i1;
  var $i129: i1;
  var $i128: i1;
  var $i130: i32;
  var $i131: i1;
  var $i132: i64;
  var $i134: i1;
  var $i135: i64;
  var $i136: i64;
  var $i133: i64;
  var $p137: ref;
  var $i138: i64;
  var $i139: i32;
  var $p141: ref;
  var $i142: i32;
  var $i143: i1;
  var $i144: i8;
  var $i145: i1;
  var $i146: i1;
  var $i147: i64;
  var $i148: i1;
  var $i150: i1;
  var $i149: i1;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $p154: ref;
  var $i155: i64;
  var $p156: ref;
  var $i157: i64;
  var $p158: ref;
  var $i159: i32;
  var $i160: i1;
  var $i161: i8;
  var $i162: i1;
  var $i163: i1;
  var $i164: i64;
  var $i165: i1;
  var $i167: i1;
  var $i166: i1;
  var $i168: i32;
  var $i169: i1;
  var $i170: i64;
  var $i171: i64;
  var $p172: ref;
  var $i173: i64;
  var $i174: i32;
  var $i140: i32;
  var $i93: i32;
  var $i175: i1;
  var $i176: i32;
  var $p177: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 725} {:cexpr "wait_for_io_cmd_user:arg:val"} boogie_si_record_i8($i1);
    call {:si_unique_call 726} {:cexpr "wait_for_io_cmd_user:arg:port"} boogie_si_record_i64($i2);
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i3);
    call {:si_unique_call 727} {:cexpr "wait_for_io_cmd_user:arg:intr"} boogie_si_record_i1($i3);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, $i2);
    call {:si_unique_call 728} {:cexpr "addr"} boogie_si_record_i64($i12);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3384, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} ldv_mutex_lock_123($p13);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i15 := atomic_read($p14);
    call {:si_unique_call 731} {:cexpr "irq_num"} boogie_si_record_i32($i15);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3544, 1));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i32($i17, $i15);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i96 := $i15;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i1);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i8($i97);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i64.i32($i12);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} outb($i98, $i99);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i96, 1);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3544, 1));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p101, $i100);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i8.i1($i8);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i102 == 1);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} __might_sleep(.str.33, 308, 0);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $i142 := atomic_read($p141);
    call {:si_unique_call 769} {:cexpr "tmp___10"} boogie_si_record_i32($i142);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i143 := $sgt.i32($i142, $i96);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i144 := $zext.i1.i8($i143);
    call {:si_unique_call 770} {:cexpr "__cond___6"} boogie_si_record_i8($i144);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i8.i1($i144);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i145 == 1);
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i147 := 1250;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i148 := $trunc.i8.i1($i144);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i149 := 1;
    assume {:branchcond $i148} true;
    goto $bb104, $bb106;

  $bb106:
    assume !($i148 == 1);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i150 := $eq.i64($i147, 0);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i149 := $i150;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i151 := $zext.i1.i32($i149);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 0);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    $i173 := $i147;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i174 := $trunc.i64.i32($i173);
    call {:si_unique_call 790} {:cexpr "ret"} boogie_si_record_i32($i174);
    assume {:verifier.code 0} true;
    $i140 := $i174;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i93 := $i140;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i175 := $sgt.i32($i93, 0);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    $i176 := $i93;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3384, 1));
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} ldv_mutex_unlock_124($p177);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $r := $i176;
    return;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  $bb124:
    assume $i175 == 1;
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i176 := 0;
    goto $bb126;

  $bb107:
    assume $i152 == 1;
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} INIT_LIST_HEAD($p153);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p154, 0);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i155 := 1250;
    goto $bb109;

  $bb109:
    call $i155, $p156, $i157, $p158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i167, $i166, $i168, $i169, $i170, $i171 := wait_for_io_cmd_user_loop_$bb109($p0, $p7, $i96, $i155, $p156, $i157, $p158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i167, $i166, $i168, $i169, $i170, $i171);
    goto $bb109_last;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $i157 := prepare_to_wait_event($p156, $p7, 2);
    call {:si_unique_call 783} {:cexpr "tmp___8"} boogie_si_record_i64($i157);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $i159 := atomic_read($p158);
    call {:si_unique_call 785} {:cexpr "tmp___9"} boogie_si_record_i32($i159);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i160 := $sgt.i32($i159, $i96);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i161 := $zext.i1.i8($i160);
    call {:si_unique_call 786} {:cexpr "__cond___5"} boogie_si_record_i8($i161);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i162 := $trunc.i8.i1($i161);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i162 == 1);
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i164 := $i155;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i165 := $trunc.i8.i1($i161);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i166 := 1;
    assume true;
    goto $bb116, $bb118;

  $bb118:
    assume !($i165 == 1);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i167 := $eq.i64($i164, 0);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i166 := $i167;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i168 := $zext.i1.i32($i166);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i169 := $ne.i32($i168, 0);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i170 := $i164;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $i171 := schedule_timeout($i164);
    call {:si_unique_call 789} {:cexpr "__ret___6"} boogie_si_record_i64($i171);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i155 := $i171;
    goto corral_source_split_2995_dummy;

  $bb119:
    assume $i169 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} finish_wait($p172, $p7);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i173 := $i170;
    goto $bb123;

  $bb116:
    assume {:verifier.code 0} true;
    assume $i165 == 1;
    goto $bb117;

  $bb110:
    assume $i162 == 1;
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i163 := $eq.i64($i155, 0);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i163 == 1);
    goto $bb112;

  $bb113:
    assume $i163 == 1;
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i164 := 1;
    goto $bb115;

  $bb104:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb105;

  $bb98:
    assume $i145 == 1;
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i146 := $eq.i64(1250, 0);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb101, $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb100;

  $bb101:
    assume $i146 == 1;
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i147 := 1;
    goto $bb103;

  $bb66:
    assume $i102 == 1;
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} __might_sleep(.str.33, 305, 0);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $i104 := atomic_read($p103);
    call {:si_unique_call 765} {:cexpr "tmp___7"} boogie_si_record_i32($i104);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i105 := $sgt.i32($i104, $i96);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i106 := $zext.i1.i8($i105);
    call {:si_unique_call 766} {:cexpr "__cond___4"} boogie_si_record_i8($i106);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i8.i1($i106);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i109 := 1250;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i8.i1($i106);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i111 := 1;
    assume true;
    goto $bb74, $bb76;

  $bb76:
    assume !($i110 == 1);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i112 := $eq.i64($i109, 0);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i111 := $i112;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i113 := $zext.i1.i32($i111);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 0);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    $i138 := $i109;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i64.i32($i138);
    call {:si_unique_call 780} {:cexpr "ret"} boogie_si_record_i32($i139);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i140 := $i139;
    goto $bb97;

  $bb77:
    assume $i114 == 1;
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} INIT_LIST_HEAD($p115);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p116, 0);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i117 := 1250;
    goto $bb79;

  $bb79:
    call $i117, $p118, $i119, $p120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i129, $i128, $i130, $i131, $i132, $i134, $i135, $i136 := wait_for_io_cmd_user_loop_$bb79($p0, $p6, $i96, $i117, $p118, $i119, $p120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i129, $i128, $i130, $i131, $i132, $i134, $i135, $i136);
    goto $bb79_last;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $i119 := prepare_to_wait_event($p118, $p6, 1);
    call {:si_unique_call 773} {:cexpr "tmp___5"} boogie_si_record_i64($i119);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $i121 := atomic_read($p120);
    call {:si_unique_call 775} {:cexpr "tmp___6"} boogie_si_record_i32($i121);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i122 := $sgt.i32($i121, $i96);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i123 := $zext.i1.i8($i122);
    call {:si_unique_call 776} {:cexpr "__cond___3"} boogie_si_record_i8($i123);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i8.i1($i123);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    assume !($i124 == 1);
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i126 := $i117;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i8.i1($i123);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i128 := 1;
    assume true;
    goto $bb86, $bb88;

  $bb88:
    assume !($i127 == 1);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i129 := $eq.i64($i126, 0);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i128 := $i129;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i130 := $zext.i1.i32($i128);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i132 := $i126;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i134 := $ne.i64($i119, 0);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i135 := $i119;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} $i136 := schedule_timeout($i126);
    call {:si_unique_call 779} {:cexpr "__ret___4"} boogie_si_record_i64($i136);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i117 := $i136;
    goto corral_source_split_2938_dummy;

  $bb93:
    assume $i134 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i133 := $i135;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} finish_wait($p137, $p6);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i138 := $i133;
    goto $bb96;

  $bb89:
    assume $i131 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i133 := $i132;
    goto $bb91;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i127 == 1;
    goto $bb87;

  $bb80:
    assume $i124 == 1;
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i125 := $eq.i64($i117, 0);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !($i125 == 1);
    goto $bb82;

  $bb83:
    assume $i125 == 1;
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i126 := 1;
    goto $bb85;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i110 == 1;
    goto $bb75;

  $bb68:
    assume $i107 == 1;
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i108 := $eq.i64(1250, 0);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb70;

  $bb71:
    assume $i108 == 1;
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i109 := 1;
    goto $bb73;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i8);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} __might_sleep(.str.33, 295, 0);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $i59 := atomic_read($p58);
    call {:si_unique_call 738} {:cexpr "tmp___4"} boogie_si_record_i32($i59);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i60 := $sgt.i32($i59, $i15);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i8($i60);
    call {:si_unique_call 739} {:cexpr "__cond___2"} boogie_si_record_i8($i61);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i8.i1($i61);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i64 := 1250;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i8.i1($i61);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i66 := 1;
    assume true;
    goto $bb41, $bb43;

  $bb43:
    assume !($i65 == 1);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i67 := $eq.i64($i64, 0);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i66 := $i67;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i32($i66);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i90 := $i64;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i64.i32($i90);
    call {:si_unique_call 759} {:cexpr "ret"} boogie_si_record_i32($i91);
    assume {:verifier.code 0} true;
    $i57 := $i91;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i92 := $sle.i32($i57, 0);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i95 := atomic_read($p94);
    call {:si_unique_call 761} {:cexpr "irq_num"} boogie_si_record_i32($i95);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i96 := $i95;
    goto $bb65;

  $bb61:
    assume $i92 == 1;
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i93 := $i57;
    goto $bb63;

  $bb44:
    assume $i69 == 1;
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} INIT_LIST_HEAD($p70);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p71, 0);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i72 := 1250;
    goto $bb46;

  $bb46:
    call $i72, $p73, $i74, $p75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i84, $i83, $i85, $i86, $i87, $i88 := wait_for_io_cmd_user_loop_$bb46($p0, $p5, $i15, $i72, $p73, $i74, $p75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i84, $i83, $i85, $i86, $i87, $i88);
    goto $bb46_last;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $i74 := prepare_to_wait_event($p73, $p5, 2);
    call {:si_unique_call 752} {:cexpr "tmp___2"} boogie_si_record_i64($i74);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $i76 := atomic_read($p75);
    call {:si_unique_call 754} {:cexpr "tmp___3"} boogie_si_record_i32($i76);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i77 := $sgt.i32($i76, $i15);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i78 := $zext.i1.i8($i77);
    call {:si_unique_call 755} {:cexpr "__cond___1"} boogie_si_record_i8($i78);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i8.i1($i78);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i81 := $i72;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i8.i1($i78);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i83 := 1;
    assume true;
    goto $bb53, $bb55;

  $bb55:
    assume !($i82 == 1);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i84 := $eq.i64($i81, 0);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i83 := $i84;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i85 := $zext.i1.i32($i83);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i87 := $i81;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $i88 := schedule_timeout($i81);
    call {:si_unique_call 758} {:cexpr "__ret___2"} boogie_si_record_i64($i88);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i72 := $i88;
    goto corral_source_split_2845_dummy;

  $bb56:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} finish_wait($p89, $p5);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i90 := $i87;
    goto $bb60;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb54;

  $bb47:
    assume $i79 == 1;
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i80 := $eq.i64($i72, 0);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb49;

  $bb50:
    assume $i80 == 1;
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i81 := 1;
    goto $bb52;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb42;

  $bb35:
    assume $i62 == 1;
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64(1250, 0);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb37;

  $bb38:
    assume $i63 == 1;
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i64 := 1;
    goto $bb40;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} __might_sleep(.str.33, 292, 0);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $i21 := atomic_read($p20);
    call {:si_unique_call 734} {:cexpr "tmp___1"} boogie_si_record_i32($i21);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, $i15);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i22);
    call {:si_unique_call 735} {:cexpr "__cond___0"} boogie_si_record_i8($i23);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i26 := 1250;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i23);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i28 := 1;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i27 == 1);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i26, 0);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i28 := $i29;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i28);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i55 := $i26;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i64.i32($i55);
    call {:si_unique_call 749} {:cexpr "ret"} boogie_si_record_i32($i56);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb34;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} INIT_LIST_HEAD($p32);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p33, 0);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i34 := 1250;
    goto $bb16;

  $bb16:
    call $i34, $p35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i46, $i45, $i47, $i48, $i49, $i51, $i52, $i53 := wait_for_io_cmd_user_loop_$bb16($p0, $p4, $i15, $i34, $p35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i46, $i45, $i47, $i48, $i49, $i51, $i52, $i53);
    goto $bb16_last;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $i36 := prepare_to_wait_event($p35, $p4, 1);
    call {:si_unique_call 742} {:cexpr "tmp"} boogie_si_record_i64($i36);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $i38 := atomic_read($p37);
    call {:si_unique_call 744} {:cexpr "tmp___0"} boogie_si_record_i32($i38);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i39 := $sgt.i32($i38, $i15);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i8($i39);
    call {:si_unique_call 745} {:cexpr "__cond"} boogie_si_record_i8($i40);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i40);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i43 := $i34;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i8.i1($i40);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i45 := 1;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i44 == 1);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i43, 0);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i45 := $i46;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i45);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i49 := $i43;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i36, 0);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i52 := $i36;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $i53 := schedule_timeout($i43);
    call {:si_unique_call 748} {:cexpr "__ret___0"} boogie_si_record_i64($i53);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i34 := $i53;
    goto corral_source_split_2787_dummy;

  $bb30:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i50 := $i52;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} finish_wait($p54, $p4);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i55 := $i50;
    goto $bb33;

  $bb26:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb28;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb24;

  $bb17:
    assume $i41 == 1;
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i34, 0);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb19;

  $bb20:
    assume $i42 == 1;
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i43 := 1;
    goto $bb22;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb12;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64(1250, 0);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb7;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb10;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  corral_source_split_2995_dummy:
    assume false;
    return;

  $bb109_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2966;

  corral_source_split_2938_dummy:
    assume false;
    return;

  $bb79_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2904;

  corral_source_split_2845_dummy:
    assume false;
    return;

  $bb46_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2816;

  corral_source_split_2787_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2753;
}



const ldv_mutex_unlock_126: ref;

axiom ldv_mutex_unlock_126 == $sub.ref(0, 507873);

procedure ldv_mutex_unlock_126($p0: ref);
  free requires assertsPassed;
  modifies $M.54, assertsPassed;



implementation ldv_mutex_unlock_126($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} ldv_linux_kernel_locking_mutex_mutex_unlock_update_area_mutex_of_qxl_device($p0);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_592:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_update_area_mutex_of_qxl_device: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_update_area_mutex_of_qxl_device == $sub.ref(0, 508905);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_update_area_mutex_of_qxl_device($p0: ref);
  free requires assertsPassed;
  modifies $M.54, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_update_area_mutex_of_qxl_device($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i1 := $M.54;
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $M.54 := 0;
    call {:si_unique_call 794} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_update_area_mutex_of_qxl_device"} boogie_si_record_i8(0);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_595:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_123: ref;

axiom ldv_mutex_lock_123 == $sub.ref(0, 509937);

procedure ldv_mutex_lock_123($p0: ref);
  free requires assertsPassed;
  modifies $M.55, assertsPassed;



implementation ldv_mutex_lock_123($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} ldv_linux_kernel_locking_mutex_mutex_lock_async_io_mutex_of_qxl_device($p0);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_598:
    assume !assertsPassed;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 510969);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 796} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 1} true;
    call {:si_unique_call 797} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 798} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_unlock_124: ref;

axiom ldv_mutex_unlock_124 == $sub.ref(0, 512001);

procedure ldv_mutex_unlock_124($p0: ref);
  free requires assertsPassed;
  modifies $M.55, assertsPassed;



implementation ldv_mutex_unlock_124($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} ldv_linux_kernel_locking_mutex_mutex_unlock_async_io_mutex_of_qxl_device($p0);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_601:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_async_io_mutex_of_qxl_device: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_async_io_mutex_of_qxl_device == $sub.ref(0, 513033);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_async_io_mutex_of_qxl_device($p0: ref);
  free requires assertsPassed;
  modifies $M.55, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_async_io_mutex_of_qxl_device($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i1 := $M.55;
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $M.55 := 0;
    call {:si_unique_call 801} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_async_io_mutex_of_qxl_device"} boogie_si_record_i8(0);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_604:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_async_io_mutex_of_qxl_device: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_async_io_mutex_of_qxl_device == $sub.ref(0, 514065);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_async_io_mutex_of_qxl_device($p0: ref);
  free requires assertsPassed;
  modifies $M.55, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_async_io_mutex_of_qxl_device($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i1 := $M.55;
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 803} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_async_io_mutex_of_qxl_device"} boogie_si_record_i8(1);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_607:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_update_area_mutex_of_qxl_device: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_update_area_mutex_of_qxl_device == $sub.ref(0, 515097);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_update_area_mutex_of_qxl_device($p0: ref);
  free requires assertsPassed;
  modifies $M.54, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_update_area_mutex_of_qxl_device($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i1 := $M.54;
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 805} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_update_area_mutex_of_qxl_device"} boogie_si_record_i8(1);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_610:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_surf_evict_mutex_of_qxl_device: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_surf_evict_mutex_of_qxl_device == $sub.ref(0, 516129);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_surf_evict_mutex_of_qxl_device($p0: ref);
  free requires assertsPassed;
  modifies $M.37, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_surf_evict_mutex_of_qxl_device($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i1 := $M.37;
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 807} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_surf_evict_mutex_of_qxl_device"} boogie_si_record_i8(1);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_613:
    assume !assertsPassed;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 517161);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 808} $free($p0);
    return;
}



const ldv_kzalloc: ref;

axiom ldv_kzalloc == $sub.ref(0, 518193);

procedure ldv_kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed, $M.6, $CurrAddr;



implementation ldv_kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} {:cexpr "ldv_kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 810} {:cexpr "ldv_kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} ldv_check_alloc_flags($i1);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $p2 := ldv_zalloc($i0);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} ldv_after_alloc($p2);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_616:
    assume !assertsPassed;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 519225);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $p1 := ldv_calloc(1, $i0);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_calloc: ref;

axiom ldv_calloc == $sub.ref(0, 520257);

procedure ldv_calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation ldv_calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} {:cexpr "ldv_calloc:arg:nmemb"} boogie_si_record_i64($i0);
    call {:si_unique_call 817} {:cexpr "ldv_calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $i2 := ldv_undef_int();
    call {:si_unique_call 819} {:cexpr "tmp___1"} boogie_si_record_i32($i2);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $p4 := calloc($i0, $i1);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} ldv_assume($i7);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $i8 := ldv_is_err($p4);
    call {:si_unique_call 823} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} ldv_assume($i10);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb3;
}



const qxl_driver_load: ref;

axiom qxl_driver_load == $sub.ref(0, 521289);

procedure qxl_driver_load($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.32, $M.42, $CurrAddr, $M.64, $M.53, $M.75, $M.71, $M.43, assertsPassed, $M.36, $M.40, $M.55, $M.35, $M.65, $M.67, $M.68, $M.69, $M.70;



implementation qxl_driver_load($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i16: i32;
  var $i17: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i18: i32;
  var $i15: i32;
  var $p24: ref;
  var $i4: i32;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} {:cexpr "qxl_driver_load:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $i2 := drm_core_check_feature($p0, 8192);
    call {:si_unique_call 827} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $p5 := kzalloc(5336, 208);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p10, $p5);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3144)), $mul.ref(1144, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p11);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $i13 := qxl_device_init($p6, $p0, $p12, $i1);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    call {:si_unique_call 830} {:cexpr "r"} boogie_si_record_i32($i13);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} $i16 := drm_vblank_init($p0, 1);
    call {:si_unique_call 833} {:cexpr "r"} boogie_si_record_i32($i16);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $i19 := qxl_modeset_init($p6);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    call {:si_unique_call 836} {:cexpr "r"} boogie_si_record_i32($i19);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} drm_kms_helper_poll_init($p22);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb16:
    assume $i20 == 1;
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i18 := $i19;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} vslice_dummy_var_99 := qxl_driver_unload($p0);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i15 := $i18;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p6);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} kfree($p24);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i4 := $i15;
    goto $bb3;

  SeqInstr_625:
    assume !assertsPassed;
    return;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i17 == 1;
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i18 := $i16;
    goto $bb14;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb10;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_619:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 19);
    goto $bb3;
}



const qxl_driver_unload: ref;

axiom qxl_driver_unload == $sub.ref(0, 522321);

procedure qxl_driver_unload($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $CurrAddr, $M.64, $M.40, assertsPassed, $M.35, $M.65;



implementation qxl_driver_unload($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} drm_vblank_cleanup($p0);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} qxl_modeset_fini($p3);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} qxl_device_fini($p3);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} kfree($p6);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p7, $0.ref);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const drm_pci_set_busid: ref;

axiom drm_pci_set_busid == $sub.ref(0, 523353);

procedure drm_pci_set_busid($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_pci_set_busid($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 1} true;
    call {:si_unique_call 842} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 843} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const qxl_noop_get_vblank_counter: ref;

axiom qxl_noop_get_vblank_counter == $sub.ref(0, 524385);

procedure qxl_noop_get_vblank_counter($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_noop_get_vblank_counter($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p7: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} {:cexpr "qxl_noop_get_vblank_counter:arg:crtc"} boogie_si_record_i32($i1);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3144)), $mul.ref(888, 1));
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref($i4, 288)), $mul.ref(256, 1)), $mul.ref(0, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.6, $p7);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const qxl_noop_enable_vblank: ref;

axiom qxl_noop_enable_vblank == $sub.ref(0, 525417);

procedure qxl_noop_enable_vblank($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_noop_enable_vblank($p0: ref, $i1: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} {:cexpr "qxl_noop_enable_vblank:arg:crtc"} boogie_si_record_i32($i1);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const qxl_noop_disable_vblank: ref;

axiom qxl_noop_disable_vblank == $sub.ref(0, 526449);

procedure qxl_noop_disable_vblank($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation qxl_noop_disable_vblank($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} {:cexpr "qxl_noop_disable_vblank:arg:crtc"} boogie_si_record_i32($i1);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    return;
}



const qxl_irq_handler: ref;

axiom qxl_irq_handler == $sub.ref(0, 527481);

procedure qxl_irq_handler($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.56, $M.107, $M.108, $M.109, $M.110, $M.111, $CurrAddr, $M.41, assertsPassed;



implementation qxl_irq_handler($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i26: i32;
  var vslice_dummy_var_100: i1;
  var vslice_dummy_var_101: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} {:cexpr "qxl_irq_handler:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 5424)), $mul.ref(4, 1));
    call {:si_unique_call 848} $i19 := devirtbounce.12(0, $p18, 0, $p18);
    call {:si_unique_call 849} {:cexpr "__ret"} boogie_si_record_i32($i19);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i19, 0);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3548, 1));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} atomic_inc($p27);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i19, 1);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i19, 2);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i19, 4);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i19, 8);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i19, 32);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.6, $p51);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 5424)), $mul.ref(8, 1));
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $M.56 := $store.i32($M.56, $p53, 39);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.6, $p54);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i55, 3);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} outb(0, $i56);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb24:
    assume $i48 == 1;
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} qxl_io_log.ref.ref($p5, .str.53);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3832, 1));
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} vslice_dummy_var_101 := schedule_work($p49);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i42 == 1;
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3564, 1));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.6, $p43);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, 1);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3564, 1));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p46, $i45);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} qxl_io_log.ref.ref.ref($p5, .str.51, .str.52);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i38 == 1;
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} atomic_inc($p39);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} __wake_up($p40, 3, 0, $0.ref);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i34 == 1;
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3556, 1));
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} atomic_inc($p35);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3656, 1));
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} __wake_up($p36, 3, 0, $0.ref);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i29 == 1;
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3552, 1));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} atomic_inc($p30);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3568, 1));
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} __wake_up($p31, 3, 0, $0.ref);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} vslice_dummy_var_100 := qxl_queue_garbage_collect($p5, 0);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb10;
}



const qxl_debugfs_init: ref;

axiom qxl_debugfs_init == $sub.ref(0, 528513);

procedure qxl_debugfs_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_debugfs_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var vslice_dummy_var_102: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} vslice_dummy_var_102 := drm_debugfs_create_files(qxl_debugfs_list, 2, $p2, $p0);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const qxl_debugfs_takedown: ref;

axiom qxl_debugfs_takedown == $sub.ref(0, 529545);

procedure qxl_debugfs_takedown($p0: ref);
  free requires assertsPassed;



implementation qxl_debugfs_takedown($p0: ref)
{
  var vslice_dummy_var_103: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} vslice_dummy_var_103 := drm_debugfs_remove_files(qxl_debugfs_list, 2, $p0);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    return;
}



const qxl_gem_object_free: ref;

axiom qxl_gem_object_free == $sub.ref(0, 530577);

procedure qxl_gem_object_free($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $CurrAddr;



implementation qxl_gem_object_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1, $p3);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p1);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} qxl_bo_unref($p1);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_gem_object_open: ref;

axiom qxl_gem_object_open == $sub.ref(0, 531609);

procedure qxl_gem_object_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_gem_object_open($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const qxl_gem_object_close: ref;

axiom qxl_gem_object_close == $sub.ref(0, 532641);

procedure qxl_gem_object_close($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation qxl_gem_object_close($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    return;
}



const drm_gem_prime_handle_to_fd: ref;

axiom drm_gem_prime_handle_to_fd == $sub.ref(0, 533673);

procedure drm_gem_prime_handle_to_fd($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_gem_prime_handle_to_fd($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 870} {:cexpr "drm_gem_prime_handle_to_fd:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 871} {:cexpr "drm_gem_prime_handle_to_fd:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 1} true;
    call {:si_unique_call 872} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 873} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const drm_gem_prime_fd_to_handle: ref;

axiom drm_gem_prime_fd_to_handle == $sub.ref(0, 534705);

procedure drm_gem_prime_fd_to_handle($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_gem_prime_fd_to_handle($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 874} {:cexpr "drm_gem_prime_fd_to_handle:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 1} true;
    call {:si_unique_call 875} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 876} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const drm_gem_prime_export: ref;

axiom drm_gem_prime_export == $sub.ref(0, 535737);

procedure drm_gem_prime_export($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation drm_gem_prime_export($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} {:cexpr "drm_gem_prime_export:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $p3 := external_alloc();
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const drm_gem_prime_import: ref;

axiom drm_gem_prime_import == $sub.ref(0, 536769);

procedure drm_gem_prime_import($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation drm_gem_prime_import($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $p2 := external_alloc();
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const qxl_gem_prime_pin: ref;

axiom qxl_gem_prime_pin == $sub.ref(0, 537801);

procedure qxl_gem_prime_pin($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_gem_prime_pin($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var vslice_dummy_var_104: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32(1, 0);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $i4 := ldv__builtin_expect($i3, 0);
    call {:si_unique_call 881} {:cexpr "tmp___1"} boogie_si_record_i64($i4);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32(1, 0);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} vslice_dummy_var_104 := ldv__builtin_expect($i21, 0);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 38);
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1(1);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i7 := $xor.i1($i6, 1);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 882} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i8);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 884} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 887} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} warn_slowpath_fmt.ref.i32.ref(.str.71, 32, .str.72);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const qxl_gem_prime_unpin: ref;

axiom qxl_gem_prime_unpin == $sub.ref(0, 538833);

procedure qxl_gem_prime_unpin($p0: ref);
  free requires assertsPassed;



implementation qxl_gem_prime_unpin($p0: ref)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var vslice_dummy_var_105: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32(1, 0);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} $i4 := ldv__builtin_expect($i3, 0);
    call {:si_unique_call 890} {:cexpr "tmp___1"} boogie_si_record_i64($i4);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32(1, 0);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} vslice_dummy_var_105 := ldv__builtin_expect($i21, 0);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1(1);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i7 := $xor.i1($i6, 1);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 891} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i8);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 893} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 896} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} warn_slowpath_fmt.ref.i32.ref(.str.71, 38, .str.72);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const qxl_gem_prime_get_sg_table: ref;

axiom qxl_gem_prime_get_sg_table == $sub.ref(0, 539865);

procedure qxl_gem_prime_get_sg_table($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qxl_gem_prime_get_sg_table($p0: ref) returns ($r: ref)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_106: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32(1, 0);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $i4 := ldv__builtin_expect($i3, 0);
    call {:si_unique_call 899} {:cexpr "tmp___1"} boogie_si_record_i64($i4);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32(1, 0);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} vslice_dummy_var_106 := ldv__builtin_expect($i21, 0);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $p23 := ERR_PTR($sub.i64(0, 38));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $r := $p24;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1(1);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i7 := $xor.i1($i6, 1);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 900} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i8);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 902} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 905} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} warn_slowpath_fmt.ref.i32.ref(.str.71, 44, .str.72);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const qxl_gem_prime_import_sg_table: ref;

axiom qxl_gem_prime_import_sg_table == $sub.ref(0, 540897);

procedure qxl_gem_prime_import_sg_table($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qxl_gem_prime_import_sg_table($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $p25: ref;
  var $p26: ref;
  var vslice_dummy_var_107: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32(1, 0);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 909} {:cexpr "tmp___1"} boogie_si_record_i64($i6);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32(1, 0);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} vslice_dummy_var_107 := ldv__builtin_expect($i23, 0);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $p25 := ERR_PTR($sub.i64(0, 38));
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $r := $p26;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1(1);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i9 := $xor.i1($i8, 1);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 910} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i10);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 912} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i10, 0);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 915} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} warn_slowpath_fmt.ref.i32.ref(.str.71, 52, .str.72);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const qxl_gem_prime_vmap: ref;

axiom qxl_gem_prime_vmap == $sub.ref(0, 541929);

procedure qxl_gem_prime_vmap($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qxl_gem_prime_vmap($p0: ref) returns ($r: ref)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $p23: ref;
  var vslice_dummy_var_108: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32(1, 0);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $i4 := ldv__builtin_expect($i3, 0);
    call {:si_unique_call 919} {:cexpr "tmp___1"} boogie_si_record_i64($i4);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32(1, 0);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} vslice_dummy_var_108 := ldv__builtin_expect($i21, 0);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $p23 := ERR_PTR($sub.i64(0, 38));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $r := $p23;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1(1);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i7 := $xor.i1($i6, 1);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 920} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i8);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 922} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 925} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} warn_slowpath_fmt.ref.i32.ref(.str.71, 58, .str.72);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const qxl_gem_prime_vunmap: ref;

axiom qxl_gem_prime_vunmap == $sub.ref(0, 542961);

procedure qxl_gem_prime_vunmap($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation qxl_gem_prime_vunmap($p0: ref, $p1: ref)
{
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var vslice_dummy_var_109: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32(1, 0);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 929} {:cexpr "tmp___1"} boogie_si_record_i64($i5);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32(1, 0);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} vslice_dummy_var_109 := ldv__builtin_expect($i22, 0);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1(1);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i8 := $xor.i1($i7, 1);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 930} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 932} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 935} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} warn_slowpath_fmt.ref.i32.ref(.str.71, 64, .str.72);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const qxl_gem_prime_mmap: ref;

axiom qxl_gem_prime_mmap == $sub.ref(0, 543993);

procedure qxl_gem_prime_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_gem_prime_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var vslice_dummy_var_110: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32(1, 0);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 938} {:cexpr "tmp___1"} boogie_si_record_i64($i5);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32(1, 0);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} vslice_dummy_var_110 := ldv__builtin_expect($i22, 0);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $r := 38;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1(1);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i8 := $xor.i1($i7, 1);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 939} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 941} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 944} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} warn_slowpath_fmt.ref.i32.ref(.str.71, 70, .str.72);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const qxl_mode_dumb_create: ref;

axiom qxl_mode_dumb_create == $sub.ref(0, 545025);

procedure qxl_mode_dumb_create($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.61, $M.6, $M.33, $M.62, $M.63, $M.32, $CurrAddr, $M.36, $M.35, assertsPassed;



implementation qxl_mode_dumb_create($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $i33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $p5 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.57, $p6);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.58, $p9);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.59, $p11);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 1);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i14 := $udiv.i32($i13, 8);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i10, $i14);
    call {:si_unique_call 949} {:cexpr "pitch"} boogie_si_record_i32($i15);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.60, $p16);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i18 := $mul.i32($i15, $i17);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $M.61 := $store.i64($M.61, $p20, $i19);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.61, $p21);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 4095);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, $sub.i64(0, 4096));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $M.61 := $store.i64($M.61, $p25, $i24);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.59, $p26);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 16);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.59, $p29);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 32);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 22);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i32 := 32;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.58, $p34);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p36, $i35);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.60, $p37);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p39, $i38);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p40, $i15);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p41, $i32);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.61, $p42);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $i44 := qxl_gem_object_create_with_handle($p8, $p0, 1, $i43, $p5, $p3, $p4);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    call {:si_unique_call 951} {:cexpr "r"} boogie_si_record_i32($i44);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $M.62 := $store.i32($M.62, $p46, $i15);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.2, $p4);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $M.63 := $store.i32($M.63, $p48, $i47);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb11;

  $bb13:
    assume $i45 == 1;
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i33 := $i44;
    goto $bb11;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i32 := 80;
    goto $bb10;
}



const qxl_mode_dumb_mmap: ref;

axiom qxl_mode_dumb_mmap == $sub.ref(0, 546057);

procedure qxl_mode_dumb_mmap($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.35, assertsPassed;



implementation qxl_mode_dumb_mmap($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} {:cexpr "qxl_mode_dumb_mmap:arg:handle"} boogie_si_record_i32($i2);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 954} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} $p10 := drm_gem_object_lookup($p1, $p0, $i2);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p10);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $i16 := qxl_bo_mmap_offset($p15);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p3, $i16);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} drm_gem_object_unreference_unlocked___2($p10);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 2);
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    call {:si_unique_call 955} devirtbounce(0, .str.59, 78, 12);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const drm_gem_dumb_destroy: ref;

axiom drm_gem_dumb_destroy == $sub.ref(0, 547089);

procedure drm_gem_dumb_destroy($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_gem_dumb_destroy($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 959} {:cexpr "drm_gem_dumb_destroy:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 1} true;
    call {:si_unique_call 960} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 961} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const drm_gem_object_lookup: ref;

axiom drm_gem_object_lookup == $sub.ref(0, 548121);

procedure drm_gem_object_lookup($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation drm_gem_object_lookup($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} {:cexpr "drm_gem_object_lookup:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} $p3 := external_alloc();
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const qxl_bo_mmap_offset: ref;

axiom qxl_bo_mmap_offset == $sub.ref(0, 549153);

procedure qxl_bo_mmap_offset($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation qxl_bo_mmap_offset($p0: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(248, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $i3 := drm_vma_node_offset_addr($p2);
    call {:si_unique_call 965} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const drm_gem_object_unreference_unlocked___2: ref;

axiom drm_gem_object_unreference_unlocked___2 == $sub.ref(0, 550185);

procedure drm_gem_object_unreference_unlocked___2($p0: ref);
  free requires assertsPassed;
  modifies $M.35, $M.6, assertsPassed;



implementation drm_gem_object_unreference_unlocked___2($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $i5 := atomic_add_unless($p4, $sub.i32(0, 1), 1);
    call {:si_unique_call 967} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 3144)), $mul.ref(96, 1));
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} ldv_mutex_lock_110___2($p9);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $i12 := atomic_dec_and_test($p11);
    call {:si_unique_call 970} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} $i16 := ldv__builtin_expect($i15, 1);
    call {:si_unique_call 972} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref(0, 3144)), $mul.ref(96, 1));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} ldv_mutex_unlock_111___2($p19);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} drm_gem_object_free($p18);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_646:
    assume !assertsPassed;
    return;
}



const atomic_add_unless: ref;

axiom atomic_add_unless == $sub.ref(0, 551217);

procedure atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} {:cexpr "atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 976} {:cexpr "atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $i3 := __atomic_add_unless($p0, $i1, $i2);
    call {:si_unique_call 978} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, $i2);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_mutex_lock_110___2: ref;

axiom ldv_mutex_lock_110___2 == $sub.ref(0, 552249);

procedure ldv_mutex_lock_110___2($p0: ref);
  free requires assertsPassed;
  modifies $M.35, assertsPassed;



implementation ldv_mutex_lock_110___2($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} ldv_linux_kernel_locking_mutex_mutex_lock_struct_mutex_of_drm_device($p0);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_652:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_111___2: ref;

axiom ldv_mutex_unlock_111___2 == $sub.ref(0, 553281);

procedure ldv_mutex_unlock_111___2($p0: ref);
  free requires assertsPassed;
  modifies $M.35, assertsPassed;



implementation ldv_mutex_unlock_111___2($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} ldv_linux_kernel_locking_mutex_mutex_unlock_struct_mutex_of_drm_device($p0);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_655:
    assume !assertsPassed;
    return;
}



const __atomic_add_unless: ref;

axiom __atomic_add_unless == $sub.ref(0, 554313);

procedure __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i11: i32;
  var $i9: i32;
  var $i10: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} {:cexpr "__atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 982} {:cexpr "__atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $i3 := atomic_read($p0);
    call {:si_unique_call 984} {:cexpr "c"} boogie_si_record_i32($i3);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $i2);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 986} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i9 := $i3;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i10 := $i3;
    goto $bb4;

  $bb4:
    call $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25 := __atomic_add_unless_loop_$bb4($p0, $i1, $i2, $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i10, $i1);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $i14 := atomic_cmpxchg($p0, $i10, $i13);
    call {:si_unique_call 988} {:cexpr "old"} boogie_si_record_i32($i14);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, $i10);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 990} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i20 := $i10;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i14, $i2);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 992} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i11 := $i14;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i14;
    goto $bb11_dummy;

  $bb5:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i12 := $i20;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const atomic_cmpxchg: ref;

axiom atomic_cmpxchg == $sub.ref(0, 555345);

procedure atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} {:cexpr "atomic_cmpxchg:arg:old"} boogie_si_record_i32($i1);
    call {:si_unique_call 994} {:cexpr "atomic_cmpxchg:arg:new"} boogie_si_record_i32($i2);
    call {:si_unique_call 995} {:cexpr "atomic_cmpxchg:arg:__old"} boogie_si_record_i32($i1);
    call {:si_unique_call 996} {:cexpr "atomic_cmpxchg:arg:__new"} boogie_si_record_i32($i2);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 997} $i10 := devirtbounce.3(0, $p9, $i2, $i1, $p9);
    call {:si_unique_call 998} {:cexpr "__ret"} boogie_si_record_i32($i10);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const drm_vma_node_offset_addr: ref;

axiom drm_vma_node_offset_addr == $sub.ref(0, 556377);

procedure drm_vma_node_offset_addr($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation drm_vma_node_offset_addr($p0: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(72, 1)), $mul.ref(48, 1));
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.6, $p2);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 557409);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 558441);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(4294967295, $i0);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const drm_debugfs_remove_files: ref;

axiom drm_debugfs_remove_files == $sub.ref(0, 559473);

procedure drm_debugfs_remove_files($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_debugfs_remove_files($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1006} {:cexpr "drm_debugfs_remove_files:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1007} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1008} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const drm_debugfs_create_files: ref;

axiom drm_debugfs_create_files == $sub.ref(0, 560505);

procedure drm_debugfs_create_files($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_debugfs_create_files($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1009} {:cexpr "drm_debugfs_create_files:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1010} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1011} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __xchg_wrong_size: ref;

axiom __xchg_wrong_size == $sub.ref(0, 561537);

procedure __xchg_wrong_size();



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 562569);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation atomic_inc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} ldv_linux_usb_dev_atomic_inc($p0);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 563601);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1014} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    return;
}



const qxl_queue_garbage_collect: ref;

axiom qxl_queue_garbage_collect == $sub.ref(0, 564633);

procedure qxl_queue_garbage_collect($p0: ref, $i1: i1) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation qxl_queue_garbage_collect($p0: ref, $i1: i1) returns ($r: i1)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i11: i1;
  var $p12: ref;
  var $i14: i1;
  var vslice_dummy_var_111: i1;
  var vslice_dummy_var_112: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1015} {:cexpr "qxl_queue_garbage_collect:arg:flush"} boogie_si_record_i1($i1);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3056, 1));
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} $i5 := qxl_check_idle($p4);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    call {:si_unique_call 1017} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5160, 1));
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5168, 1));
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} vslice_dummy_var_111 := queue_work($p8, $p9);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5168, 1));
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} vslice_dummy_var_112 := flush_work($p12);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_658:
    assume !assertsPassed;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 565665);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.6, system_wq);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $i2 := queue_work($p1, $p0);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1021} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 566697);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} $i2 := queue_work_on(8192, $p0, $p1);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1023} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 567729);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1024} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1025} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1026} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const qxl_check_idle: ref;

axiom qxl_check_idle == $sub.ref(0, 568761);

procedure qxl_check_idle($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation qxl_check_idle($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114___0($p4);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, $p5);
    $p7 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.6, $p7);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i6, $i8);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 1028} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} ldv_spin_unlock_irqrestore_113___1($p11, $u1);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  SeqInstr_661:
    assume !assertsPassed;
    return;
}



const flush_work: ref;

axiom flush_work == $sub.ref(0, 569793);

procedure flush_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation flush_work($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1030} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1031} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114___0: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114___0 == $sub.ref(0, 570825);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114___0($p0: ref);
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_qxl_ring();
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_667:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_dev_atomic_inc: ref;

axiom ldv_linux_usb_dev_atomic_inc == $sub.ref(0, 571857);

procedure ldv_linux_usb_dev_atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation ldv_linux_usb_dev_atomic_inc($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, $p1);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 1);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $i3);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    return;
}



const drm_vblank_cleanup: ref;

axiom drm_vblank_cleanup == $sub.ref(0, 572889);

procedure drm_vblank_cleanup($p0: ref);
  free requires assertsPassed;



implementation drm_vblank_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    return;
}



const qxl_modeset_fini: ref;

axiom qxl_modeset_fini == $sub.ref(0, 573921);

procedure qxl_modeset_fini($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $CurrAddr, $M.40, $M.35, assertsPassed, $M.65;



implementation qxl_modeset_fini($p0: ref)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var vslice_dummy_var_113: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} qxl_fbdev_fini($p0);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} vslice_dummy_var_113 := qxl_destroy_monitors_object($p0);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(16, 1));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.6, $p3);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} drm_mode_config_cleanup($p7);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(16, 1));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p9, 0);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_673:
    assume !assertsPassed;
    return;

  SeqInstr_670:
    assume !assertsPassed;
    return;
}



const qxl_device_fini: ref;

axiom qxl_device_fini == $sub.ref(0, 574953);

procedure qxl_device_fini($p0: ref);
  free requires assertsPassed;
  modifies $M.46, $M.6, $CurrAddr, $M.64, assertsPassed;



implementation qxl_device_fini($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5120, 1)), $mul.ref(0, 8));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5120, 1)), $mul.ref(1, 8));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5160, 1));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} flush_workqueue($p17);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5160, 1));
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} destroy_workqueue($p19);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5160, 1));
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p20, $0.ref);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3064, 1));
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} qxl_ring_free($p22);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3072, 1));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.6, $p23);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} qxl_ring_free($p24);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3056, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.6, $p25);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} qxl_ring_free($p26);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} qxl_bo_fini($p0);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4952, 1));
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p27);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} io_mapping_free($p28);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4944, 1));
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.6, $p29);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} io_mapping_free($p30);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.6, $p31);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} ldv_iounmap_115($p33);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.6, $p34);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} ldv_iounmap_116($p36);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p37, $0.ref);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(8, 1));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p39, $0.ref);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(0, 1));
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p41, 0);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} qxl_debugfs_remove_files($p0);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5120, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(1, 8));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} qxl_bo_unref($p15);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5120, 1));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} qxl_bo_unref($p7);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const flush_workqueue: ref;

axiom flush_workqueue == $sub.ref(0, 575985);

procedure flush_workqueue($p0: ref);
  free requires assertsPassed;



implementation flush_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 577017);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    return;
}



const qxl_ring_free: ref;

axiom qxl_ring_free == $sub.ref(0, 578049);

procedure qxl_ring_free($p0: ref);
  free requires assertsPassed;



implementation qxl_ring_free($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} kfree($p1);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    return;
}



const qxl_bo_fini: ref;

axiom qxl_bo_fini == $sub.ref(0, 579081);

procedure qxl_bo_fini($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_bo_fini($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} qxl_ttm_fini($p0);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    return;
}



const io_mapping_free: ref;

axiom io_mapping_free == $sub.ref(0, 580113);

procedure io_mapping_free($p0: ref);
  free requires assertsPassed;
  modifies $M.64, assertsPassed;



implementation io_mapping_free($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} ldv_iounmap_112($p1);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_688:
    assume !assertsPassed;
    return;
}



const ldv_iounmap_115: ref;

axiom ldv_iounmap_115 == $sub.ref(0, 581145);

procedure ldv_iounmap_115($p0: ref);
  free requires assertsPassed;
  modifies $M.64, assertsPassed;



implementation ldv_iounmap_115($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} ldv_linux_arch_io_io_mem_unmap();
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_691:
    assume !assertsPassed;
    return;
}



const ldv_iounmap_116: ref;

axiom ldv_iounmap_116 == $sub.ref(0, 582177);

procedure ldv_iounmap_116($p0: ref);
  free requires assertsPassed;
  modifies $M.64, assertsPassed;



implementation ldv_iounmap_116($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} ldv_linux_arch_io_io_mem_unmap();
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_694:
    assume !assertsPassed;
    return;
}



const qxl_debugfs_remove_files: ref;

axiom qxl_debugfs_remove_files == $sub.ref(0, 583209);

procedure qxl_debugfs_remove_files($p0: ref);
  free requires assertsPassed;



implementation qxl_debugfs_remove_files($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i20: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i4: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4424, 1));
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, $p1);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i3 := $ult.i32(0, $i2);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i5, $p8, $p9, $i10, $p13, $i14, $p15, $p16, $p17, $p18, $i20, $p23, $p24, $i25, $p28, $i29, $p30, $p31, $p32, $p33, $i35, $i36, $i37, $i4, vslice_dummy_var_114, vslice_dummy_var_115 := qxl_debugfs_remove_files_loop_$bb4($p0, $p1, $i5, $p8, $p9, $i10, $p13, $i14, $p15, $p16, $p17, $p18, $i20, $p23, $p24, $i25, $p28, $i29, $p30, $p31, $p32, $p33, $i35, $i36, $i37, $i4, vslice_dummy_var_114, vslice_dummy_var_115);
    goto $bb4_last;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref($i5, 16)), $mul.ref(0, 1));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i4);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref($i10, 16)), $mul.ref(8, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 3144)), $mul.ref(48, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.6, $p17);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} vslice_dummy_var_114 := drm_debugfs_remove_files($p9, $i14, $p18);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i4);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref($i20, 16)), $mul.ref(0, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.6, $p23);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i4);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref($i25, 16)), $mul.ref(8, 1));
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.6, $p28);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.6, $p30);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 3144)), $mul.ref(56, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p32);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} vslice_dummy_var_115 := drm_debugfs_remove_files($p24, $i29, $p33);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i4, 1);
    call {:si_unique_call 1057} {:cexpr "i"} boogie_si_record_i32($i35);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.6, $p1);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i37 := $ult.i32($i35, $i36);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i37 == 1);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i35;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3904;
}



const ldv_linux_arch_io_io_mem_unmap: ref;

axiom ldv_linux_arch_io_io_mem_unmap == $sub.ref(0, 584241);

procedure ldv_linux_arch_io_io_mem_unmap();
  free requires assertsPassed;
  modifies $M.64, assertsPassed;



implementation ldv_linux_arch_io_io_mem_unmap()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i0 := $M.64;
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} ldv_assert_linux_arch_io__less_initial_decrement($i2);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i3 := $M.64;
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $M.64 := $i4;
    call {:si_unique_call 1059} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32($i4);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_697:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_arch_io__less_initial_decrement: ref;

axiom ldv_assert_linux_arch_io__less_initial_decrement == $sub.ref(0, 585273);

procedure ldv_assert_linux_arch_io__less_initial_decrement($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_arch_io__less_initial_decrement($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} {:cexpr "ldv_assert_linux_arch_io__less_initial_decrement:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1061} __VERIFIER_error();
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_iounmap_112: ref;

axiom ldv_iounmap_112 == $sub.ref(0, 586305);

procedure ldv_iounmap_112($p0: ref);
  free requires assertsPassed;
  modifies $M.64, assertsPassed;



implementation ldv_iounmap_112($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} ldv_linux_arch_io_io_mem_unmap();
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_703:
    assume !assertsPassed;
    return;
}



const qxl_ttm_fini: ref;

axiom qxl_ttm_fini == $sub.ref(0, 587337);

procedure qxl_ttm_fini($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_ttm_fini($p0: ref)
{
  var $p2: ref;
  var $p5: ref;
  var $p8: ref;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} vslice_dummy_var_116 := ttm_bo_clean_mm($p2, 2);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} vslice_dummy_var_117 := ttm_bo_clean_mm($p5, 3);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} vslice_dummy_var_118 := ttm_bo_device_release($p8);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} qxl_ttm_global_fini($p0);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} vslice_dummy_var_119 := printk.ref(.str.20);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    return;
}



const ttm_bo_clean_mm: ref;

axiom ttm_bo_clean_mm == $sub.ref(0, 588369);

procedure ttm_bo_clean_mm($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_clean_mm($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1068} {:cexpr "ttm_bo_clean_mm:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1069} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1070} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ttm_bo_device_release: ref;

axiom ttm_bo_device_release == $sub.ref(0, 589401);

procedure ttm_bo_device_release($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_device_release($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1071} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1072} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const qxl_ttm_global_fini: ref;

axiom qxl_ttm_global_fini == $sub.ref(0, 590433);

procedure qxl_ttm_global_fini($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_ttm_global_fini($p0: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(88, 1));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.6, $p2);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} drm_global_item_unref($p7);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(48, 1));
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} drm_global_item_unref($p9);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(88, 1));
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p11, 0);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const printk: ref;

axiom printk == $sub.ref(0, 591465);

procedure printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1075} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1076} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1077} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1078} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64.i64($p0: ref, p.1: i64, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64.i64($p0: ref, p.1: i64, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1079} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1080} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64($p0: ref, p.1: ref, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i64($p0: ref, p.1: ref, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1081} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1082} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1083} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1084} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64($p0: ref, p.1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64($p0: ref, p.1: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1085} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1086} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1087} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1088} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i64.i64($p0: ref, p.1: i32, p.2: i64, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i64.i64($p0: ref, p.1: i32, p.2: i64, p.3: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1089} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1090} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i64.i32($p0: ref, p.1: i32, p.2: i64, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i64.i32($p0: ref, p.1: i32, p.2: i64, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1091} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1092} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const drm_global_item_unref: ref;

axiom drm_global_item_unref == $sub.ref(0, 592497);

procedure drm_global_item_unref($p0: ref);
  free requires assertsPassed;



implementation drm_global_item_unref($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    return;
}



const qxl_fbdev_fini: ref;

axiom qxl_fbdev_fini == $sub.ref(0, 593529);

procedure qxl_fbdev_fini($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.35, $M.40, assertsPassed, $M.65;



implementation qxl_fbdev_fini($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var vslice_dummy_var_120: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(24, 1));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(24, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} vslice_dummy_var_120 := qxl_fbdev_destroy($p7, $p10);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(24, 1));
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} kfree($p15);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(24, 1));
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p17, $0.ref);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_706:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_destroy_monitors_object: ref;

axiom qxl_destroy_monitors_object == $sub.ref(0, 594561);

procedure qxl_destroy_monitors_object($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $CurrAddr, $M.40, assertsPassed, $M.65;



implementation qxl_destroy_monitors_object($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i11: i32;
  var vslice_dummy_var_121: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1, $0.ref);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 5424)), $mul.ref(5352, 1));
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p4, 0);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} qxl_bo_kunmap($p6);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $i9 := qxl_bo_reserve($p8, 0);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    call {:si_unique_call 1097} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} vslice_dummy_var_121 := qxl_bo_unpin($p13);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} qxl_bo_unreserve($p16);
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} qxl_bo_unref($p17);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb3;

  SeqInstr_709:
    assume !assertsPassed;
    return;
}



const drm_mode_config_cleanup: ref;

axiom drm_mode_config_cleanup == $sub.ref(0, 595593);

procedure drm_mode_config_cleanup($p0: ref);
  free requires assertsPassed;



implementation drm_mode_config_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    return;
}



const qxl_bo_reserve: ref;

axiom qxl_bo_reserve == $sub.ref(0, 596625);

procedure qxl_bo_reserve($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation qxl_bo_reserve($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1101} {:cexpr "qxl_bo_reserve:arg:no_wait"} boogie_si_record_i1($i1);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i2);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} $i5 := ttm_bo_reserve($p3, 1, $i4, 0, $0.ref);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    call {:si_unique_call 1103} {:cexpr "r"} boogie_si_record_i32($i5);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1105} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, $sub.i32(0, 512));
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i20 := $i5;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1016, 1)), $mul.ref(8, 1));
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 5336)), $mul.ref(0, 1));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} dev_err.ref.ref.ref($p19, .str.113, $p0);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_715:
    assume !assertsPassed;
    return;
}



const qxl_bo_unpin: ref;

axiom qxl_bo_unpin == $sub.ref(0, 597657);

procedure qxl_bo_unpin($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_bo_unpin($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i25: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i24: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1016, 1)), $mul.ref(8, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(992, 1));
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.6, $p7);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(992, 1));
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i14, 1);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(992, 1));
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p16, $i15);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(992, 1));
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.6, $p17);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.6, $p21);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i23 := $ult.i32(0, $i22);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(56, 1));
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} $i40 := ttm_bo_validate($p38, $p39, 0, 0);
    call {:si_unique_call 1110} {:cexpr "r"} boogie_si_record_i32($i40);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 1112} {:cexpr "tmp"} boogie_si_record_i64($i44);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i12 := $i40;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb16:
    assume $i45 == 1;
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 5336)), $mul.ref(0, 1));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.6, $p46);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} dev_err.ref.ref.ref($p47, .str.27, $p0);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb11;

  $bb11:
    call $i25, $p28, $i29, $i30, $i31, $p34, $i35, $i36, $i37, $i24 := qxl_bo_unpin_loop_$bb11($p0, $p21, $i25, $p28, $i29, $i30, $i31, $p34, $i35, $i36, $i37, $i24);
    goto $bb11_last;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref($i25, 12)), $mul.ref(8, 1));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.6, $p28);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, $sub.i32(0, 2097153));
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i24);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref($i31, 12)), $mul.ref(8, 1));
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p34, $i30);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i24, 1);
    call {:si_unique_call 1108} {:cexpr "i"} boogie_si_record_i32($i35);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.6, $p21);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i37 := $ult.i32($i35, $i36);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i24 := $i35;
    goto $bb13_dummy;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 5336)), $mul.ref(0, 1));
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} dev_warn.ref.ref.ref($p11, .str.26, $p0);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4119;
}



const qxl_bo_unreserve: ref;

axiom qxl_bo_unreserve == $sub.ref(0, 598689);

procedure qxl_bo_unreserve($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation qxl_bo_unreserve($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} ttm_bo_unreserve($p1);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_718:
    assume !assertsPassed;
    return;
}



const ttm_bo_unreserve: ref;

axiom ttm_bo_unreserve == $sub.ref(0, 599721);

procedure ttm_bo_unreserve($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ttm_bo_unreserve($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(56, 1)), $mul.ref(40, 1));
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, $p2);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 2097152);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} __ttm_bo_unreserve($p0);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 592)), $mul.ref(480, 1));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} ldv_spin_lock_108($p8);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} ttm_bo_add_to_lru($p0);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 592)), $mul.ref(480, 1));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} ldv_spin_unlock_109($p11);
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  SeqInstr_721:
    assume !assertsPassed;
    return;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 600753);

procedure dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    return;
}



const ttm_bo_validate: ref;

axiom ttm_bo_validate == $sub.ref(0, 601785);

procedure ttm_bo_validate($p0: ref, $p1: ref, $i2: i1, $i3: i1) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_validate($p0: ref, $p1: ref, $i2: i1, $i3: i1) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1119} {:cexpr "ttm_bo_validate:arg:arg2"} boogie_si_record_i1($i2);
    call {:si_unique_call 1120} {:cexpr "ttm_bo_validate:arg:arg3"} boogie_si_record_i1($i3);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1121} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1122} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ttm_bo_reserve: ref;

axiom ttm_bo_reserve == $sub.ref(0, 602817);

procedure ttm_bo_reserve($p0: ref, $i1: i1, $i2: i1, $i3: i1, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ttm_bo_reserve($p0: ref, $i1: i1, $i2: i1, $i3: i1, $p4: ref) returns ($r: i32)
{
  var $i5: i8;
  var $i6: i8;
  var $i7: i8;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var vslice_dummy_var_122: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i1);
    call {:si_unique_call 1123} {:cexpr "ttm_bo_reserve:arg:interruptible"} boogie_si_record_i1($i1);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i2);
    call {:si_unique_call 1124} {:cexpr "ttm_bo_reserve:arg:no_wait"} boogie_si_record_i1($i2);
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i3);
    call {:si_unique_call 1125} {:cexpr "ttm_bo_reserve:arg:use_ticket"} boogie_si_record_i1($i3);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $i10 := atomic_read($p9);
    call {:si_unique_call 1127} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 1128} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1130} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} vslice_dummy_var_122 := ldv__builtin_expect($i20, 0);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i5);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i6);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i7);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} $i25 := __ttm_bo_reserve($p0, $i22, $i23, $i24, $p4);
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    call {:si_unique_call 1134} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $i29 := ldv__builtin_expect($i28, 1);
    call {:si_unique_call 1136} {:cexpr "tmp___1"} boogie_si_record_i64($i29);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} ttm_bo_del_sub_from_lru($p0);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} warn_slowpath_null(.str.114, 855);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __ttm_bo_reserve: ref;

axiom __ttm_bo_reserve == $sub.ref(0, 603849);

procedure __ttm_bo_reserve($p0: ref, $i1: i1, $i2: i1, $i3: i1, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation __ttm_bo_reserve($p0: ref, $i1: i1, $i2: i1, $i3: i1, $p4: ref) returns ($r: i32)
{
  var $i5: i8;
  var $i6: i8;
  var $i7: i1;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i8;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i35: i32;
  var $i40: i1;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i1);
    call {:si_unique_call 1138} {:cexpr "__ttm_bo_reserve:arg:interruptible"} boogie_si_record_i1($i1);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i2);
    call {:si_unique_call 1139} {:cexpr "__ttm_bo_reserve:arg:no_wait"} boogie_si_record_i1($i2);
    call {:si_unique_call 1140} {:cexpr "__ttm_bo_reserve:arg:use_ticket"} boogie_si_record_i1($i3);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i5);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(448, 1));
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.6, $p36);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} $i39 := ww_mutex_lock($p38, $p4);
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    call {:si_unique_call 1153} {:cexpr "ret"} boogie_si_record_i32($i39);
    assume {:verifier.code 0} true;
    $i35 := $i39;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i35, $sub.i32(0, 4));
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i21 := $i35;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 512);
    goto $bb8;

  SeqInstr_736:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(448, 1));
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.6, $p31);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} $i34 := ww_mutex_lock_interruptible($p33, $p4);
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    call {:si_unique_call 1151} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb13;

  SeqInstr_733:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p4);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 1141} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i10);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 1143} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i10, 0);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 1146} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(448, 1));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $i25 := ww_mutex_trylock($p24);
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    call {:si_unique_call 1148} {:cexpr "tmp___1"} boogie_si_record_i32($i25);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 1149} {:cexpr "success"} boogie_si_record_i8($i27);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i29 := (if $i28 == 1 then 0 else $sub.i32(0, 16));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i21 := $i29;
    goto $bb8;

  SeqInstr_730:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 16);
    goto $bb8;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} warn_slowpath_null(.str.114, 787);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ttm_bo_del_sub_from_lru: ref;

axiom ttm_bo_del_sub_from_lru == $sub.ref(0, 604881);

procedure ttm_bo_del_sub_from_lru($p0: ref);
  free requires assertsPassed;



implementation ttm_bo_del_sub_from_lru($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    return;
}



const ww_mutex_trylock: ref;

axiom ww_mutex_trylock == $sub.ref(0, 605913);

procedure ww_mutex_trylock($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ww_mutex_trylock($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} $i2 := ldv_mutex_trylock_101($p1);
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    call {:si_unique_call 1155} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_739:
    assume !assertsPassed;
    return;
}



const ww_mutex_lock_interruptible: ref;

axiom ww_mutex_lock_interruptible == $sub.ref(0, 606945);

procedure ww_mutex_lock_interruptible($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ww_mutex_lock_interruptible($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $p6: ref;
  var $i7: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} $i7 := ldv_mutex_lock_interruptible_100($p6);
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    call {:si_unique_call 1159} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i5 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_742:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $i4 := __ww_mutex_lock_interruptible($p0, $p1);
    call {:si_unique_call 1157} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const ww_mutex_lock: ref;

axiom ww_mutex_lock == $sub.ref(0, 607977);

procedure ww_mutex_lock($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ww_mutex_lock($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $p6: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} ldv_mutex_lock_99($p6);
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_745:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} $i4 := __ww_mutex_lock($p0, $p1);
    call {:si_unique_call 1161} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const __ww_mutex_lock: ref;

axiom __ww_mutex_lock == $sub.ref(0, 609009);

procedure __ww_mutex_lock($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __ww_mutex_lock($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1163} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1164} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_lock_99: ref;

axiom ldv_mutex_lock_99 == $sub.ref(0, 610041);

procedure ldv_mutex_lock_99($p0: ref);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ldv_mutex_lock_99($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} ldv_linux_kernel_locking_mutex_mutex_lock_base_of_ww_mutex($p0);
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_748:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_base_of_ww_mutex: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_base_of_ww_mutex == $sub.ref(0, 611073);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_base_of_ww_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_base_of_ww_mutex($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i1 := $M.65;
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1167} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_base_of_ww_mutex"} boogie_si_record_i8(1);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_751:
    assume !assertsPassed;
    return;
}



const __ww_mutex_lock_interruptible: ref;

axiom __ww_mutex_lock_interruptible == $sub.ref(0, 612105);

procedure __ww_mutex_lock_interruptible($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __ww_mutex_lock_interruptible($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1168} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1169} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_lock_interruptible_100: ref;

axiom ldv_mutex_lock_interruptible_100 == $sub.ref(0, 613137);

procedure ldv_mutex_lock_interruptible_100($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ldv_mutex_lock_interruptible_100($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $i1 := ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_base_of_ww_mutex($p0);
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    call {:si_unique_call 1171} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_754:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_base_of_ww_mutex: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_base_of_ww_mutex == $sub.ref(0, 614169);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_base_of_ww_mutex($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_base_of_ww_mutex($p0: ref) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i1 := $M.65;
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $i5 := ldv_undef_int();
    call {:si_unique_call 1174} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 4);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1175} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_base_of_ww_mutex"} boogie_si_record_i8(1);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  SeqInstr_757:
    assume !assertsPassed;
    return;
}



const ldv_mutex_trylock_101: ref;

axiom ldv_mutex_trylock_101 == $sub.ref(0, 615201);

procedure ldv_mutex_trylock_101($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ldv_mutex_trylock_101($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} $i1 := ldv_linux_kernel_locking_mutex_mutex_trylock_base_of_ww_mutex($p0);
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    call {:si_unique_call 1177} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_760:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_trylock_base_of_ww_mutex: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_trylock_base_of_ww_mutex == $sub.ref(0, 616233);

procedure ldv_linux_kernel_locking_mutex_mutex_trylock_base_of_ww_mutex($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_trylock_base_of_ww_mutex($p0: ref) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i1 := $M.65;
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock_try($i4);
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $i5 := ldv_linux_kernel_locking_mutex_mutex_is_locked_base_of_ww_mutex($p0);
    call {:si_unique_call 1180} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1181} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_base_of_ww_mutex"} boogie_si_record_i8(1);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  SeqInstr_763:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock_try: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock_try == $sub.ref(0, 617265);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock_try($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock_try($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock_try:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1183} __VERIFIER_error();
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_766:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_kernel_locking_mutex_mutex_is_locked_base_of_ww_mutex: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_is_locked_base_of_ww_mutex == $sub.ref(0, 618297);

procedure ldv_linux_kernel_locking_mutex_mutex_is_locked_base_of_ww_mutex($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_is_locked_base_of_ww_mutex($p0: ref) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i1 := $M.65;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $i4 := ldv_undef_int();
    call {:si_unique_call 1185} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const qxl_fbdev_destroy: ref;

axiom qxl_fbdev_destroy == $sub.ref(0, 619329);

procedure qxl_fbdev_destroy($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.35, $M.40, assertsPassed, $M.65;



implementation qxl_fbdev_destroy($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var vslice_dummy_var_123: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 528)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 528)), $mul.ref(160, 1)), $mul.ref(136, 1));
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 528)), $mul.ref(0, 1));
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} drm_fb_helper_fini($p19);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 528)), $mul.ref(416, 1));
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} vfree($p21);
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 528)), $mul.ref(160, 1)), $mul.ref(0, 1));
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} drm_framebuffer_cleanup($p22);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i15 == 1;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 528)), $mul.ref(160, 1)), $mul.ref(136, 1));
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} qxlfb_destroy_pinned_object($p17);
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 528)), $mul.ref(160, 1)), $mul.ref(136, 1));
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p18, $0.ref);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_769:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 528)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} vslice_dummy_var_123 := unregister_framebuffer($p10);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} framebuffer_release($p10);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const unregister_framebuffer: ref;

axiom unregister_framebuffer == $sub.ref(0, 620361);

procedure unregister_framebuffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unregister_framebuffer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1192} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1193} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const framebuffer_release: ref;

axiom framebuffer_release == $sub.ref(0, 621393);

procedure framebuffer_release($p0: ref);
  free requires assertsPassed;



implementation framebuffer_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    return;
}



const qxlfb_destroy_pinned_object: ref;

axiom qxlfb_destroy_pinned_object == $sub.ref(0, 622425);

procedure qxlfb_destroy_pinned_object($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.35, $M.40, assertsPassed, $M.65;



implementation qxlfb_destroy_pinned_object($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var vslice_dummy_var_124: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} $i3 := qxl_bo_reserve___0($p2, 0);
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    call {:si_unique_call 1195} {:cexpr "ret"} boogie_si_record_i32($i3);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} $i7 := ldv__builtin_expect($i6, 1);
    call {:si_unique_call 1197} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} drm_gem_object_unreference_unlocked___0($p0);
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_778:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} qxl_bo_kunmap($p2);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} vslice_dummy_var_124 := qxl_bo_unpin($p2);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} qxl_bo_unreserve___0($p2);
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_775:
    assume !assertsPassed;
    return;

  SeqInstr_772:
    assume !assertsPassed;
    return;
}



const drm_fb_helper_fini: ref;

axiom drm_fb_helper_fini == $sub.ref(0, 623457);

procedure drm_fb_helper_fini($p0: ref);
  free requires assertsPassed;



implementation drm_fb_helper_fini($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    return;
}



const vfree: ref;

axiom vfree == $sub.ref(0, 624489);

procedure vfree($p0: ref);
  free requires assertsPassed;



implementation vfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    return;
}



const drm_framebuffer_cleanup: ref;

axiom drm_framebuffer_cleanup == $sub.ref(0, 625521);

procedure drm_framebuffer_cleanup($p0: ref);
  free requires assertsPassed;



implementation drm_framebuffer_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    return;
}



const qxl_bo_reserve___0: ref;

axiom qxl_bo_reserve___0 == $sub.ref(0, 626553);

procedure qxl_bo_reserve___0($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation qxl_bo_reserve___0($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1202} {:cexpr "qxl_bo_reserve___0:arg:no_wait"} boogie_si_record_i1($i1);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i2);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} $i5 := ttm_bo_reserve___0($p3, 1, $i4, 0, $0.ref);
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    call {:si_unique_call 1204} {:cexpr "r"} boogie_si_record_i32($i5);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1206} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, $sub.i32(0, 512));
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i20 := $i5;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1016, 1)), $mul.ref(8, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 5336)), $mul.ref(0, 1));
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} dev_err.ref.ref.ref($p19, .str.113, $p0);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_781:
    assume !assertsPassed;
    return;
}



const qxl_bo_unreserve___0: ref;

axiom qxl_bo_unreserve___0 == $sub.ref(0, 627585);

procedure qxl_bo_unreserve___0($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation qxl_bo_unreserve___0($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} ttm_bo_unreserve___0($p1);
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_784:
    assume !assertsPassed;
    return;
}



const drm_gem_object_unreference_unlocked___0: ref;

axiom drm_gem_object_unreference_unlocked___0 == $sub.ref(0, 628617);

procedure drm_gem_object_unreference_unlocked___0($p0: ref);
  free requires assertsPassed;
  modifies $M.35, $M.6, assertsPassed;



implementation drm_gem_object_unreference_unlocked___0($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} $i5 := atomic_add_unless($p4, $sub.i32(0, 1), 1);
    call {:si_unique_call 1210} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 3144)), $mul.ref(96, 1));
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} ldv_mutex_lock_110___0($p9);
    goto SeqInstr_787, SeqInstr_788;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  SeqInstr_789:
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} $i12 := atomic_dec_and_test($p11);
    call {:si_unique_call 1213} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} $i16 := ldv__builtin_expect($i15, 1);
    call {:si_unique_call 1215} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref(0, 3144)), $mul.ref(96, 1));
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} ldv_mutex_unlock_111___0($p19);
    goto SeqInstr_790, SeqInstr_791;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  SeqInstr_792:
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_790:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} drm_gem_object_free($p18);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_787:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_110___0: ref;

axiom ldv_mutex_lock_110___0 == $sub.ref(0, 629649);

procedure ldv_mutex_lock_110___0($p0: ref);
  free requires assertsPassed;
  modifies $M.35, assertsPassed;



implementation ldv_mutex_lock_110___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} ldv_linux_kernel_locking_mutex_mutex_lock_struct_mutex_of_drm_device($p0);
    goto SeqInstr_793, SeqInstr_794;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  SeqInstr_795:
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_793:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_111___0: ref;

axiom ldv_mutex_unlock_111___0 == $sub.ref(0, 630681);

procedure ldv_mutex_unlock_111___0($p0: ref);
  free requires assertsPassed;
  modifies $M.35, assertsPassed;



implementation ldv_mutex_unlock_111___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} ldv_linux_kernel_locking_mutex_mutex_unlock_struct_mutex_of_drm_device($p0);
    goto SeqInstr_796, SeqInstr_797;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  SeqInstr_798:
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_796:
    assume !assertsPassed;
    return;
}



const ttm_bo_unreserve___0: ref;

axiom ttm_bo_unreserve___0 == $sub.ref(0, 631713);

procedure ttm_bo_unreserve___0($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ttm_bo_unreserve___0($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(56, 1)), $mul.ref(40, 1));
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, $p2);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 2097152);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} __ttm_bo_unreserve($p0);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 592)), $mul.ref(480, 1));
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} ldv_spin_lock_108($p8);
    goto SeqInstr_799, SeqInstr_800;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  SeqInstr_801:
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} ttm_bo_add_to_lru($p0);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 592)), $mul.ref(480, 1));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} ldv_spin_unlock_109($p11);
    goto SeqInstr_802, SeqInstr_803;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  SeqInstr_804:
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_802:
    assume !assertsPassed;
    return;

  SeqInstr_799:
    assume !assertsPassed;
    return;
}



const ttm_bo_reserve___0: ref;

axiom ttm_bo_reserve___0 == $sub.ref(0, 632745);

procedure ttm_bo_reserve___0($p0: ref, $i1: i1, $i2: i1, $i3: i1, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ttm_bo_reserve___0($p0: ref, $i1: i1, $i2: i1, $i3: i1, $p4: ref) returns ($r: i32)
{
  var $i5: i8;
  var $i6: i8;
  var $i7: i8;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var vslice_dummy_var_125: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i1);
    call {:si_unique_call 1224} {:cexpr "ttm_bo_reserve___0:arg:interruptible"} boogie_si_record_i1($i1);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i2);
    call {:si_unique_call 1225} {:cexpr "ttm_bo_reserve___0:arg:no_wait"} boogie_si_record_i1($i2);
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i3);
    call {:si_unique_call 1226} {:cexpr "ttm_bo_reserve___0:arg:use_ticket"} boogie_si_record_i1($i3);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} $i10 := atomic_read($p9);
    call {:si_unique_call 1228} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 1229} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1231} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} vslice_dummy_var_125 := ldv__builtin_expect($i20, 0);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i5);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i6);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i7);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} $i25 := __ttm_bo_reserve___0($p0, $i22, $i23, $i24, $p4);
    goto SeqInstr_805, SeqInstr_806;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  SeqInstr_807:
    call {:si_unique_call 1235} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} $i29 := ldv__builtin_expect($i28, 1);
    call {:si_unique_call 1237} {:cexpr "tmp___1"} boogie_si_record_i64($i29);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} ttm_bo_del_sub_from_lru($p0);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_805:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} warn_slowpath_null(.str.114, 855);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __ttm_bo_reserve___0: ref;

axiom __ttm_bo_reserve___0 == $sub.ref(0, 633777);

procedure __ttm_bo_reserve___0($p0: ref, $i1: i1, $i2: i1, $i3: i1, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation __ttm_bo_reserve___0($p0: ref, $i1: i1, $i2: i1, $i3: i1, $p4: ref) returns ($r: i32)
{
  var $i5: i8;
  var $i6: i8;
  var $i7: i1;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i8;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i35: i32;
  var $i40: i1;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i1);
    call {:si_unique_call 1239} {:cexpr "__ttm_bo_reserve___0:arg:interruptible"} boogie_si_record_i1($i1);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i2);
    call {:si_unique_call 1240} {:cexpr "__ttm_bo_reserve___0:arg:no_wait"} boogie_si_record_i1($i2);
    call {:si_unique_call 1241} {:cexpr "__ttm_bo_reserve___0:arg:use_ticket"} boogie_si_record_i1($i3);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i5);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(448, 1));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.6, $p36);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} $i39 := ww_mutex_lock___0($p38, $p4);
    goto SeqInstr_814, SeqInstr_815;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  SeqInstr_816:
    call {:si_unique_call 1254} {:cexpr "ret"} boogie_si_record_i32($i39);
    assume {:verifier.code 0} true;
    $i35 := $i39;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i35, $sub.i32(0, 4));
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i21 := $i35;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 512);
    goto $bb8;

  SeqInstr_814:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(448, 1));
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.6, $p31);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} $i34 := ww_mutex_lock_interruptible___0($p33, $p4);
    goto SeqInstr_811, SeqInstr_812;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  SeqInstr_813:
    call {:si_unique_call 1252} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb13;

  SeqInstr_811:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p4);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 1242} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i10);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 1244} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i10, 0);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 1247} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(448, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} $i25 := ww_mutex_trylock___0($p24);
    goto SeqInstr_808, SeqInstr_809;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  SeqInstr_810:
    call {:si_unique_call 1249} {:cexpr "tmp___1"} boogie_si_record_i32($i25);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 1250} {:cexpr "success"} boogie_si_record_i8($i27);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i29 := (if $i28 == 1 then 0 else $sub.i32(0, 16));
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i21 := $i29;
    goto $bb8;

  SeqInstr_808:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 16);
    goto $bb8;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} warn_slowpath_null(.str.114, 787);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ww_mutex_trylock___0: ref;

axiom ww_mutex_trylock___0 == $sub.ref(0, 634809);

procedure ww_mutex_trylock___0($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ww_mutex_trylock___0($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $i2 := ldv_mutex_trylock_101___0($p1);
    goto SeqInstr_817, SeqInstr_818;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  SeqInstr_819:
    call {:si_unique_call 1256} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_817:
    assume !assertsPassed;
    return;
}



const ww_mutex_lock_interruptible___0: ref;

axiom ww_mutex_lock_interruptible___0 == $sub.ref(0, 635841);

procedure ww_mutex_lock_interruptible___0($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ww_mutex_lock_interruptible___0($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $p6: ref;
  var $i7: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} $i7 := ldv_mutex_lock_interruptible_100___0($p6);
    goto SeqInstr_820, SeqInstr_821;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  SeqInstr_822:
    call {:si_unique_call 1260} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i5 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_820:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} $i4 := __ww_mutex_lock_interruptible($p0, $p1);
    call {:si_unique_call 1258} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const ww_mutex_lock___0: ref;

axiom ww_mutex_lock___0 == $sub.ref(0, 636873);

procedure ww_mutex_lock___0($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ww_mutex_lock___0($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $p6: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} ldv_mutex_lock_99___0($p6);
    goto SeqInstr_823, SeqInstr_824;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  SeqInstr_825:
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_823:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} $i4 := __ww_mutex_lock($p0, $p1);
    call {:si_unique_call 1262} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const ldv_mutex_lock_99___0: ref;

axiom ldv_mutex_lock_99___0 == $sub.ref(0, 637905);

procedure ldv_mutex_lock_99___0($p0: ref);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ldv_mutex_lock_99___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} ldv_linux_kernel_locking_mutex_mutex_lock_base_of_ww_mutex($p0);
    goto SeqInstr_826, SeqInstr_827;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  SeqInstr_828:
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_826:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_100___0: ref;

axiom ldv_mutex_lock_interruptible_100___0 == $sub.ref(0, 638937);

procedure ldv_mutex_lock_interruptible_100___0($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ldv_mutex_lock_interruptible_100___0($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $i1 := ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_base_of_ww_mutex($p0);
    goto SeqInstr_829, SeqInstr_830;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  SeqInstr_831:
    call {:si_unique_call 1266} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_829:
    assume !assertsPassed;
    return;
}



const ldv_mutex_trylock_101___0: ref;

axiom ldv_mutex_trylock_101___0 == $sub.ref(0, 639969);

procedure ldv_mutex_trylock_101___0($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ldv_mutex_trylock_101___0($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} $i1 := ldv_linux_kernel_locking_mutex_mutex_trylock_base_of_ww_mutex($p0);
    goto SeqInstr_832, SeqInstr_833;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  SeqInstr_834:
    call {:si_unique_call 1268} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_832:
    assume !assertsPassed;
    return;
}



const drm_core_check_feature: ref;

axiom drm_core_check_feature == $sub.ref(0, 641001);

procedure drm_core_check_feature($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_core_check_feature($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} {:cexpr "drm_core_check_feature:arg:feature"} boogie_si_record_i32($i1);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3144)), $mul.ref(32, 1));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 480)), $mul.ref(432, 1));
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.6, $p4);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, $i1);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const qxl_device_init: ref;

axiom qxl_device_init == $sub.ref(0, 642033);

procedure qxl_device_init($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.64, $M.53, $M.75, assertsPassed, $M.55;



implementation qxl_device_init($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p39: ref;
  var $i40: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p48: ref;
  var $i49: i64;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p78: ref;
  var $i79: i64;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p87: ref;
  var $i88: i64;
  var $p91: ref;
  var $i92: i64;
  var $i93: i64;
  var $i94: i64;
  var $i95: i64;
  var $p96: ref;
  var $p97: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i1;
  var $p105: ref;
  var $i106: i64;
  var $p109: ref;
  var $i110: i64;
  var $i111: i1;
  var $p114: ref;
  var $i115: i64;
  var $p118: ref;
  var $i119: i64;
  var $i120: i64;
  var $i121: i1;
  var $i122: i64;
  var $p125: ref;
  var $i126: i64;
  var $p127: ref;
  var $i128: i64;
  var $p131: ref;
  var $i132: i64;
  var $i133: i1;
  var $i134: i64;
  var $p137: ref;
  var $i138: i64;
  var $i139: i64;
  var $p142: ref;
  var $i143: i64;
  var $i144: i1;
  var $i145: i64;
  var $p148: ref;
  var $i149: i64;
  var $i150: i64;
  var $p153: ref;
  var $i154: i64;
  var $i155: i64;
  var $i156: i64;
  var $i157: i64;
  var $p158: ref;
  var $p159: ref;
  var $i160: i64;
  var $p161: ref;
  var $i162: i64;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i64;
  var $i168: i1;
  var $i169: i64;
  var $p172: ref;
  var $i173: i64;
  var $p174: ref;
  var $i175: i64;
  var $p178: ref;
  var $i179: i64;
  var $i180: i1;
  var $i181: i64;
  var $p184: ref;
  var $i185: i64;
  var $i186: i64;
  var $p189: ref;
  var $i190: i64;
  var $i191: i1;
  var $i192: i64;
  var $p195: ref;
  var $i196: i64;
  var $i197: i64;
  var $p200: ref;
  var $i201: i64;
  var $i202: i64;
  var $i203: i64;
  var $i204: i64;
  var $p205: ref;
  var $p206: ref;
  var $i207: i64;
  var $p208: ref;
  var $i209: i64;
  var $p210: ref;
  var $p211: ref;
  var $i212: i32;
  var $i213: i32;
  var $i214: i32;
  var $i215: i1;
  var $i216: i32;
  var $i217: i64;
  var $i218: i64;
  var $i219: i1;
  var $p220: ref;
  var $i221: i64;
  var $p224: ref;
  var $i225: i64;
  var $p228: ref;
  var $i229: i64;
  var $i230: i1;
  var $p233: ref;
  var $i234: i64;
  var $p237: ref;
  var $i238: i64;
  var $i239: i1;
  var $p242: ref;
  var $i243: i64;
  var $p246: ref;
  var $i247: i64;
  var $i248: i64;
  var $i249: i64;
  var $i250: i32;
  var $i251: i32;
  var $i252: i32;
  var $p255: ref;
  var $i256: i64;
  var $i257: i1;
  var $p260: ref;
  var $i261: i64;
  var $p264: ref;
  var $i265: i64;
  var $i266: i1;
  var $p269: ref;
  var $i270: i64;
  var $p273: ref;
  var $i274: i64;
  var $i275: i64;
  var $i276: i64;
  var $i277: i32;
  var $i278: i32;
  var $i279: i32;
  var $p280: ref;
  var $i281: i64;
  var $i282: i64;
  var $p285: ref;
  var $i286: i64;
  var $p287: ref;
  var $i288: i64;
  var $i289: i32;
  var $i290: i32;
  var $p291: ref;
  var $i292: i64;
  var $i293: i32;
  var $i294: i32;
  var $i295: i1;
  var $p296: ref;
  var $p297: ref;
  var $i298: i64;
  var $p299: ref;
  var $i300: i64;
  var $p301: ref;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $i306: i64;
  var $i307: i1;
  var $i311: i32;
  var $i312: i1;
  var $p313: ref;
  var $i314: i64;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $i318: i32;
  var $i319: i64;
  var $i320: i64;
  var $p321: ref;
  var $p323: ref;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $i328: i32;
  var $p329: ref;
  var $p330: ref;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $p334: ref;
  var $p335: ref;
  var $i336: i32;
  var $p337: ref;
  var $p338: ref;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $i348: i8;
  var $p349: ref;
  var $p350: ref;
  var $p351: ref;
  var $p352: ref;
  var $i353: i8;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $i358: i8;
  var $p359: ref;
  var $p360: ref;
  var $i361: i8;
  var $i362: i32;
  var $p363: ref;
  var $i364: i8;
  var $i365: i32;
  var $i366: i32;
  var $i367: i64;
  var $i368: i64;
  var $p369: ref;
  var $p370: ref;
  var $i371: i8;
  var $i372: i64;
  var $i373: i64;
  var $p374: ref;
  var $p376: ref;
  var $p377: ref;
  var $p378: ref;
  var $p381: ref;
  var $p382: ref;
  var $p383: ref;
  var $p386: ref;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $p392: ref;
  var $p393: ref;
  var $p394: ref;
  var $i395: i32;
  var $i396: i1;
  var $p397: ref;
  var $i398: i64;
  var $p399: ref;
  var $i400: i64;
  var $p401: ref;
  var $p402: ref;
  var $p403: ref;
  var $i404: i32;
  var $i405: i64;
  var $i406: i64;
  var $i407: i8;
  var $p408: ref;
  var $p409: ref;
  var $i410: i64;
  var $p411: ref;
  var $i412: i64;
  var $p413: ref;
  var $i414: i64;
  var $i415: i64;
  var $i416: i8;
  var $p417: ref;
  var $p418: ref;
  var $i419: i8;
  var $i420: i32;
  var $p421: ref;
  var $i422: i64;
  var $p423: ref;
  var $p424: ref;
  var $p425: ref;
  var $i426: i32;
  var $p428: ref;
  var $i429: i8;
  var $i430: i32;
  var $p431: ref;
  var $i432: i64;
  var $p433: ref;
  var $i434: i64;
  var $p436: ref;
  var $p437: ref;
  var $p438: ref;
  var $p439: ref;
  var $p441: ref;
  var $p442: ref;
  var $p443: ref;
  var $p445: ref;
  var $p447: ref;
  var $p449: ref;
  var $i450: i32;
  var $i451: i1;
  var $i309: i32;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i1;
  var vslice_dummy_var_128: ref;
  var vslice_dummy_var_129: ref;
  var vslice_dummy_var_130: ref;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} $p11 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} $p12 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} $p13 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $p14 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1281} {:cexpr "qxl_device_init:arg:flags"} boogie_si_record_i64($i3);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(0, 1));
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p16, $p15);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p17, $p1);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(16, 1));
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p18, $p2);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(24, 1));
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p19, $i3);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(2824, 1)), $mul.ref(0, 1));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} __mutex_init($p21, .str.79, $p4);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4432, 1));
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} __mutex_init($p22, .str.80, $p5);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4960, 1));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} __mutex_init($p23, .str.81, $p6);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4784, 1));
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} __mutex_init($p24, .str.82, $p7);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(2824, 1)), $mul.ref(160, 1));
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} INIT_LIST_HEAD($p26);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(2, 56)), $mul.ref(0, 1));
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.6, $p29);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(64, 1));
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p31, $i30);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(2, 56)), $mul.ref(0, 1));
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.6, $p34);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i36 == 1);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(2, 56)), $mul.ref(8, 1));
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.6, $p39);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(2, 56)), $mul.ref(0, 1));
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.6, $p43);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i40, $i44);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i45 == 1);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i56 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(72, 1));
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p57, $i56);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.6, $p60);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(32, 1));
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p62, $i61);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(3, 56)), $mul.ref(0, 1));
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.6, $p65);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i64.i32($i66);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p68, $i67);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(32, 1));
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.6, $p69);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.6, $p73);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i75 == 1);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.6, $p78);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.6, $p82);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i79, $i83);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i84 == 1);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i95 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} $p96 := io_mapping_create_wc($i70, $i95);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4944, 1));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p97, $p96);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(4, 56)), $mul.ref(0, 1));
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.6, $p100);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i102 == 1);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(4, 56)), $mul.ref(8, 1));
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i106 := $load.i64($M.6, $p105);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(4, 56)), $mul.ref(0, 1));
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i110 := $load.i64($M.6, $p109);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i111 := $ne.i64($i106, $i110);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4952, 1));
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.6, $p165);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i167 := $p2i.ref.i64($p166);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i168 := $eq.i64($i167, 0);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    $i212 := 4;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.6, drm_debug);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i214 := $and.i32($i213, 4);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i215 := $ne.i32($i214, 0);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i216 := $zext.i1.i32($i215);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i217 := $sext.i32.i64($i216);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} $i218 := ldv__builtin_expect($i217, 0);
    call {:si_unique_call 1291} {:cexpr "tmp"} boogie_si_record_i64($i218);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i219 := $ne.i64($i218, 0);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(64, 1));
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i298 := $load.i64($M.6, $p297);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(72, 1));
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i300 := $load.i64($M.6, $p299);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} $p301 := ioremap($i298, $i300);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p303, $p301);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p305 := $load.ref($M.6, $p304);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i306 := $p2i.ref.i64($p305);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i307 := $eq.i64($i306, 0);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    assume {:branchcond $i307} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} vslice_dummy_var_127 := qxl_check_device($p0);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} $i311 := qxl_bo_init($p0);
    call {:si_unique_call 1297} {:cexpr "r"} boogie_si_record_i32($i311);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i312 := $ne.i32($i311, 0);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i312} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(32, 1));
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i314 := $load.i64($M.6, $p313);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p316 := $load.ref($M.6, $p315);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p316, $mul.ref(0, 1160)), $mul.ref(44, 1));
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i318 := $load.i32($M.6, $p317);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i319 := $zext.i32.i64($i318);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i320 := $add.i64($i314, $i319);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} $p321 := ioremap($i320, 5412);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p323, $p321);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p325 := $load.ref($M.6, $p324);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p325, $mul.ref(0, 5424)), $mul.ref(4108, 1));
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i328 := $load.i32($M.6, $p327);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3568, 1));
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $p330 := qxl_ring_create($p326, 16, 32, $i328, 0, $p329);
    goto SeqInstr_835, SeqInstr_836;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  SeqInstr_837:
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3064, 1));
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p331, $p330);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p333 := $load.ref($M.6, $p332);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p333, $mul.ref(0, 5424)), $mul.ref(4640, 1));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i336 := $load.i32($M.6, $p335);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3656, 1));
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} $p338 := qxl_ring_create($p334, 16, 32, $i336, 0, $p337);
    goto SeqInstr_838, SeqInstr_839;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  SeqInstr_840:
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3072, 1));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p339, $p338);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $p341 := $load.ref($M.6, $p340);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p341, $mul.ref(0, 5424)), $mul.ref(5176, 1));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} $p343 := qxl_ring_create($p342, 8, 8, 0, 1, $0.ref);
    goto SeqInstr_841, SeqInstr_842;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  SeqInstr_843:
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3056, 1));
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p344, $p343);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p346 := $load.ref($M.6, $p345);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p346, $mul.ref(0, 1160)), $mul.ref(65, 1));
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i348 := $load.i8($M.6, $p347);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3104, 1));
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p349, $i348);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $p351 := $load.ref($M.6, $p350);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($p351, $mul.ref(0, 1160)), $mul.ref(66, 1));
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i353 := $load.i8($M.6, $p352);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3108, 1));
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p354, $i353);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p356 := $load.ref($M.6, $p355);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p356, $mul.ref(0, 1160)), $mul.ref(67, 1));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i358 := $load.i8($M.6, $p357);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3107, 1));
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p359, $i358);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3107, 1));
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i361 := $load.i8($M.6, $p360);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i362 := $zext.i8.i32($i361);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3108, 1));
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i364 := $load.i8($M.6, $p363);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i365 := $zext.i8.i32($i364);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i366 := $add.i32($i362, $i365);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i367 := $zext.i32.i64($i366);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i368 := $lshr.i64($sub.i64(0, 1), $i367);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3112, 1));
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p369, $i368);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3104, 1));
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i371 := $load.i8($M.6, $p370);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i372 := $zext.i8.i64($i371);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i373 := $mul.i64($i372, 32);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} $p374 := kmalloc($i373, 208);
    goto SeqInstr_844, SeqInstr_845;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  SeqInstr_846:
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3096, 1));
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p376, $p374);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3192, 1));
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} ldv_idr_init_113($p377);
    goto SeqInstr_847, SeqInstr_848;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  SeqInstr_849:
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3312, 1));
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} vslice_dummy_var_128 := spinlock_check($p378);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3312, 1)), $mul.ref(0, 1));
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p382 := $bitcast.ref.ref($p381);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} __raw_spin_lock_init($p382, .str.89, $p8);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3120, 1));
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} vslice_dummy_var_129 := spinlock_check($p383);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3120, 1)), $mul.ref(0, 1));
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p387 := $bitcast.ref.ref($p386);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} __raw_spin_lock_init($p387, .str.90, $p9);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4592, 1));
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} ldv_idr_init_114($p388);
    goto SeqInstr_850, SeqInstr_851;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  SeqInstr_852:
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} vslice_dummy_var_130 := spinlock_check($p389);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1)), $mul.ref(0, 1));
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $p393 := $bitcast.ref.ref($p392);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} __raw_spin_lock_init($p393, .str.91, $p10);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3384, 1));
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} __mutex_init($p394, .str.92, $p11);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} qxl_io_reset($p0);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} $i395 := qxl_irq_init($p0);
    call {:si_unique_call 1315} {:cexpr "r"} boogie_si_record_i32($i395);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i396 := $ne.i32($i395, 0);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i396} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(32, 1));
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i398 := $load.i64($M.6, $p397);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(32, 1));
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i400 := $load.i64($M.6, $p399);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $p402 := $load.ref($M.6, $p401);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p402, $mul.ref(0, 1160)), $mul.ref(44, 1));
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i404 := $load.i32($M.6, $p403);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i405 := $zext.i32.i64($i404);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i406 := $add.i64($i400, $i405);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} $i407 := setup_slot($p0, 0, $i398, $i406);
    goto SeqInstr_853, SeqInstr_854;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  SeqInstr_855:
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3105, 1));
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p408, $i407);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(48, 1));
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i410 := $load.i64($M.6, $p409);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(48, 1));
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i412 := $load.i64($M.6, $p411);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(56, 1));
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i414 := $load.i64($M.6, $p413);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i415 := $add.i64($i412, $i414);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} $i416 := setup_slot($p0, 1, $i410, $i415);
    goto SeqInstr_856, SeqInstr_857;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  SeqInstr_858:
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3106, 1));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p417, $i416);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3105, 1));
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i419 := $load.i8($M.6, $p418);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i420 := $zext.i8.i32($i419);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(32, 1));
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i422 := $load.i64($M.6, $p421);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p424 := $load.ref($M.6, $p423);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p424, $mul.ref(0, 1160)), $mul.ref(44, 1));
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i426 := $load.i32($M.6, $p425);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} vslice_dummy_var_131 := printk.ref.i32.i64.i32(.str.93, $i420, $i422, $i426);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3106, 1));
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i429 := $load.i8($M.6, $p428);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i430 := $zext.i8.i32($i429);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(48, 1));
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i432 := $load.i64($M.6, $p431);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(56, 1));
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i434 := $load.i64($M.6, $p433);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} vslice_dummy_var_132 := printk.ref.i32.i64.i64(.str.94, $i430, $i432, $i434);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $p436 := __alloc_workqueue_key.ref.i32.i32.ref.ref.ref(.str.96, 131082, 1, $p12, .str.95, .str.97);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5160, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p437, $p436);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5168, 1));
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} __init_work($p438, 0);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($p14, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p439, 137438953408);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5168, 1)), $mul.ref(0, 1));
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $p442 := $bitcast.ref.ref($p441);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p443 := $bitcast.ref.ref($p14);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.6;
    cmdloc_dummy_var_10 := $M.6;
    call {:si_unique_call 1322} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p442, $p443, 8, $zext.i32.i64(8), 0 == 1);
    $M.6 := cmdloc_dummy_var_11;
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5168, 1)), $mul.ref(32, 1));
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} lockdep_init_map($p445, .str.98, $p13, 0);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5168, 1)), $mul.ref(8, 1));
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} INIT_LIST_HEAD($p447);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5168, 1)), $mul.ref(24, 1));
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p449, qxl_gc_work);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $i450 := qxl_fb_init($p0);
    call {:si_unique_call 1326} {:cexpr "r"} boogie_si_record_i32($i450);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i451 := $ne.i32($i450, 0);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    assume {:branchcond $i451} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i451 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i309 := 0;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $r := $i309;
    return;

  $bb62:
    assume $i451 == 1;
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i309 := $i450;
    goto $bb54;

  SeqInstr_856:
    assume !assertsPassed;
    return;

  SeqInstr_853:
    assume !assertsPassed;
    return;

  $bb59:
    assume $i396 == 1;
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i309 := $i395;
    goto $bb54;

  SeqInstr_850:
    assume !assertsPassed;
    return;

  SeqInstr_847:
    assume !assertsPassed;
    return;

  SeqInstr_844:
    assume !assertsPassed;
    return;

  SeqInstr_841:
    assume !assertsPassed;
    return;

  SeqInstr_838:
    assume !assertsPassed;
    return;

  SeqInstr_835:
    assume !assertsPassed;
    return;

  $bb56:
    assume $i312 == 1;
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} drm_err.ref.i32(.str.88, $i311);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i309 := $i311;
    goto $bb54;

  $bb52:
    assume $i307 == 1;
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} vslice_dummy_var_126 := printk.ref(.str.87);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i309 := $sub.i32(0, 12);
    goto $bb54;

  $bb37:
    assume $i219 == 1;
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(32, 1));
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i221 := $load.i64($M.6, $p220);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i225 := $load.i64($M.6, $p224);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i229 := $load.i64($M.6, $p228);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i230 := $ne.i64($i229, 0);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i230} true;
    goto $bb39, $bb41;

  $bb41:
    assume !($i230 == 1);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i234 := $load.i64($M.6, $p233);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i238 := $load.i64($M.6, $p237);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i239 := $ne.i64($i234, $i238);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i239} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i239 == 1);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i252 := 0;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i256 := $load.i64($M.6, $p255);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i257 := $ne.i64($i256, 0);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    assume {:branchcond $i257} true;
    goto $bb45, $bb47;

  $bb47:
    assume !($i257 == 1);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i261 := $load.i64($M.6, $p260);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i265 := $load.i64($M.6, $p264);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i266 := $ne.i64($i261, $i265);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i266} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i266 == 1);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i279 := 0;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(48, 1));
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i281 := $load.i64($M.6, $p280);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i282 := $sext.i32.i64($i212);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i282, 56)), $mul.ref(8, 1));
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i286 := $load.i64($M.6, $p285);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(56, 1));
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i288 := $load.i64($M.6, $p287);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i289 := $trunc.i64.i32($i288);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i290 := $sdiv.i32($i289, 1048576);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(56, 1));
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i292 := $load.i64($M.6, $p291);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i293 := $trunc.i64.i32($i292);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i294 := $sdiv.i32($i293, 1024);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i295 := $eq.i32($i212, 4);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p296 := (if $i295 == 1 then .str.85 else .str.86);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} drm_ut_debug_printk.ref.ref.i64.i64.i32.i32.i64.i64.i32.i32.ref(.str.83, .str.84, $i221, $i225, $i252, $i279, $i281, $i286, $i290, $i294, $p296);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i266 == 1;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i270 := $load.i64($M.6, $p269);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i274 := $load.i64($M.6, $p273);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i275 := $sub.i64($i270, $i274);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i276 := $add.i64($i275, 1);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i277 := $trunc.i64.i32($i276);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i278 := $sdiv.i32($i277, 1024);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i279 := $i278;
    goto $bb50;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i257 == 1;
    goto $bb46;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i239 == 1;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i243 := $load.i64($M.6, $p242);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i247 := $load.i64($M.6, $p246);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i248 := $sub.i64($i243, $i247);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i249 := $add.i64($i248, 1);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i250 := $trunc.i64.i32($i249);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i251 := $sdiv.i32($i250, 1048576);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i252 := $i251;
    goto $bb44;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i230 == 1;
    goto $bb40;

  $bb28:
    assume $i168 == 1;
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i169 := $sext.i32.i64(1);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i169, 56)), $mul.ref(0, 1));
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i173 := $load.i64($M.6, $p172);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(48, 1));
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p174, $i173);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i175 := $sext.i32.i64(1);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i175, 56)), $mul.ref(0, 1));
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i179 := $load.i64($M.6, $p178);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i180 := $ne.i64($i179, 0);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i180 == 1);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i181 := $sext.i32.i64(1);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i181, 56)), $mul.ref(8, 1));
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i185 := $load.i64($M.6, $p184);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i186 := $sext.i32.i64(1);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i186, 56)), $mul.ref(0, 1));
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i190 := $load.i64($M.6, $p189);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i191 := $ne.i64($i185, $i190);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i191 == 1);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i204 := 0;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(56, 1));
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p205, $i204);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(48, 1));
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i207 := $load.i64($M.6, $p206);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(56, 1));
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i209 := $load.i64($M.6, $p208);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} $p210 := io_mapping_create_wc($i207, $i209);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4952, 1));
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p211, $p210);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i212 := 1;
    goto $bb36;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i191 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i192 := $sext.i32.i64(1);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i192, 56)), $mul.ref(8, 1));
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i196 := $load.i64($M.6, $p195);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i197 := $sext.i32.i64(1);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i197, 56)), $mul.ref(0, 1));
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i201 := $load.i64($M.6, $p200);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i202 := $sub.i64($i196, $i201);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i203 := $add.i64($i202, 1);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i204 := $i203;
    goto $bb35;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i180 == 1;
    goto $bb31;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i111 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(4, 56)), $mul.ref(8, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i115 := $load.i64($M.6, $p114);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(4, 56)), $mul.ref(0, 1));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i119 := $load.i64($M.6, $p118);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i120 := $sub.i64($i115, $i119);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i121 := $ne.i64($i120, $sub.i64(0, 1));
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb18;

  $bb19:
    assume $i121 == 1;
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i122 := $sext.i32.i64(4);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i122, 56)), $mul.ref(0, 1));
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i126 := $load.i64($M.6, $p125);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(48, 1));
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p127, $i126);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i128 := $sext.i32.i64(4);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i128, 56)), $mul.ref(0, 1));
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i132 := $load.i64($M.6, $p131);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i133 := $ne.i64($i132, 0);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb21, $bb23;

  $bb23:
    assume !($i133 == 1);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i134 := $sext.i32.i64(4);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i134, 56)), $mul.ref(8, 1));
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i138 := $load.i64($M.6, $p137);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i139 := $sext.i32.i64(4);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i139, 56)), $mul.ref(0, 1));
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i143 := $load.i64($M.6, $p142);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i144 := $ne.i64($i138, $i143);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i144 == 1);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i157 := 0;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(56, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p158, $i157);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(48, 1));
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i160 := $load.i64($M.6, $p159);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(56, 1));
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i162 := $load.i64($M.6, $p161);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $p163 := io_mapping_create_wc($i160, $i162);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4952, 1));
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p164, $p163);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i145 := $sext.i32.i64(4);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i145, 56)), $mul.ref(8, 1));
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i149 := $load.i64($M.6, $p148);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i150 := $sext.i32.i64(4);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i150, 56)), $mul.ref(0, 1));
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i154 := $load.i64($M.6, $p153);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i155 := $sub.i64($i149, $i154);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i156 := $add.i64($i155, 1);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i157 := $i156;
    goto $bb26;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i133 == 1;
    goto $bb22;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb14;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i84 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.6, $p87);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.6, $p91);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i93 := $sub.i64($i88, $i92);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i94 := $add.i64($i93, 1);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i95 := $i94;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(2, 56)), $mul.ref(8, 1));
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.6, $p48);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(2, 56)), $mul.ref(0, 1));
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.6, $p52);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i54 := $sub.i64($i49, $i53);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 1);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i56 := $i55;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb2;
}



const drm_vblank_init: ref;

axiom drm_vblank_init == $sub.ref(0, 643065);

procedure drm_vblank_init($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_vblank_init($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1327} {:cexpr "drm_vblank_init:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1328} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1329} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const qxl_modeset_init: ref;

axiom qxl_modeset_init == $sub.ref(0, 644097);

procedure qxl_modeset_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.32, $M.42, $M.71, $M.43, $CurrAddr, $M.36, $M.40, assertsPassed, $M.65, $M.67, $M.68, $M.69, $M.70;



implementation qxl_modeset_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i38: i32;
  var $p49: ref;
  var $i5: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} drm_mode_config_init($p2);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} $i3 := qxl_create_monitors_object($p0);
    goto SeqInstr_859, SeqInstr_860;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  SeqInstr_861:
    call {:si_unique_call 1332} {:cexpr "ret"} boogie_si_record_i32($i3);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3144)), $mul.ref(1216, 1)), $mul.ref(1056, 1));
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, qxl_mode_funcs);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 3144)), $mul.ref(1216, 1)), $mul.ref(1040, 1));
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p13, 320);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 3144)), $mul.ref(1216, 1)), $mul.ref(1044, 1));
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p17, 200);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 3144)), $mul.ref(1216, 1)), $mul.ref(1048, 1));
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p21, 8192);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 3144)), $mul.ref(1216, 1)), $mul.ref(1052, 1));
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p25, 8192);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(32, 1));
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.6, $p26);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 3144)), $mul.ref(1216, 1)), $mul.ref(1064, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p31, $i27);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p32);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} vslice_dummy_var_133 := drm_mode_create_suggested_offset_properties($p33);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} vslice_dummy_var_134 := qxl_mode_create_hotplug_mode_update_property($p0);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i36 := $M.66;
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32(0, $i36);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(16, 1));
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p49, 1);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} vslice_dummy_var_137 := qxl_fbdev_init($p0);
    goto SeqInstr_868, SeqInstr_869;

  SeqInstr_869:
    assume assertsPassed;
    goto SeqInstr_870;

  SeqInstr_870:
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_868:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i37 == 1;
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb8;

  $bb8:
    call $p39, $p40, $p42, $p43, $i45, $i46, $i47, $i38, vslice_dummy_var_135, vslice_dummy_var_136 := qxl_modeset_init_loop_$bb8($p0, $p39, $p40, $p42, $p43, $i45, $i46, $i47, $i38, vslice_dummy_var_135, vslice_dummy_var_136);
    goto $bb8_last;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.6, $p39);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} vslice_dummy_var_135 := qdev_crtc_init($p40, $i38);
    goto SeqInstr_862, SeqInstr_863;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  SeqInstr_864:
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.6, $p42);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} vslice_dummy_var_136 := qdev_output_init($p43, $i38);
    goto SeqInstr_865, SeqInstr_866;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  SeqInstr_867:
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i38, 1);
    call {:si_unique_call 1337} {:cexpr "i"} boogie_si_record_i32($i45);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i46 := $M.66;
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i45, $i46);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i47 == 1);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i38 := $i45;
    goto $bb10_dummy;

  SeqInstr_865:
    assume !assertsPassed;
    return;

  SeqInstr_862:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;

  SeqInstr_859:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5143;
}



const drm_kms_helper_poll_init: ref;

axiom drm_kms_helper_poll_init == $sub.ref(0, 645129);

procedure drm_kms_helper_poll_init($p0: ref);
  free requires assertsPassed;



implementation drm_kms_helper_poll_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    return;
}



const drm_mode_config_init: ref;

axiom drm_mode_config_init == $sub.ref(0, 646161);

procedure drm_mode_config_init($p0: ref);
  free requires assertsPassed;



implementation drm_mode_config_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    return;
}



const qxl_create_monitors_object: ref;

axiom qxl_create_monitors_object == $sub.ref(0, 647193);

procedure qxl_create_monitors_object($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32, $M.6, $M.42, $M.71, $M.43, $CurrAddr, $M.36, $M.40, assertsPassed, $M.65;



implementation qxl_create_monitors_object($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i16;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i9: i32;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var vslice_dummy_var_138: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i2 := $M.66;
    call {:si_unique_call 1340} {:cexpr "max_allowed"} boogie_si_record_i32($i2);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i5 := $mul.i32($i4, 28);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 4);
    call {:si_unique_call 1341} {:cexpr "monitors_config_size"} boogie_si_record_i32($i6);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} $i7 := qxl_gem_object_create($p0, $i6, 0, 1, 0, 0, $0.ref, $p1);
    goto SeqInstr_871, SeqInstr_872;

  SeqInstr_872:
    assume assertsPassed;
    goto SeqInstr_873;

  SeqInstr_873:
    call {:si_unique_call 1343} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.32, $p1);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p13, $p12);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $i16 := qxl_bo_reserve($p15, 0);
    goto SeqInstr_874, SeqInstr_875;

  SeqInstr_875:
    assume assertsPassed;
    goto SeqInstr_876;

  SeqInstr_876:
    call {:si_unique_call 1346} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} $i20 := qxl_bo_pin($p19, 1, $0.ref);
    call {:si_unique_call 1348} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} qxl_bo_unreserve($p25);
    goto SeqInstr_880, SeqInstr_881;

  SeqInstr_881:
    assume assertsPassed;
    goto SeqInstr_882;

  SeqInstr_882:
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.6, $p26);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} vslice_dummy_var_138 := qxl_bo_kmap($p27, $0.ref);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.6, $p29);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 1312)), $mul.ref(1000, 1));
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.6, $p31);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p34, $p32);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.6, $p35);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} $i37 := qxl_bo_physical_address($p0, $p36, 0);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.6, $p38);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 5424)), $mul.ref(5352, 1));
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p40, $i37);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.6, $p41);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i6);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.6;
    call {:si_unique_call 1353} cmdloc_dummy_var_13 := $memset.i8(cmdloc_dummy_var_12, $p43, 0, $i44, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_13;
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i2);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.6, $p46);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p48, $i45);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_880:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} qxl_bo_unreserve($p23);
    goto SeqInstr_877, SeqInstr_878;

  SeqInstr_878:
    assume assertsPassed;
    goto SeqInstr_879;

  SeqInstr_879:
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i9 := $i20;
    goto $bb3;

  SeqInstr_877:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i9 := $i16;
    goto $bb3;

  SeqInstr_874:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} drm_err.ref.ref.i32(.str.7, .str.8, $i7);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_871:
    assume !assertsPassed;
    return;
}



const drm_mode_create_suggested_offset_properties: ref;

axiom drm_mode_create_suggested_offset_properties == $sub.ref(0, 648225);

procedure drm_mode_create_suggested_offset_properties($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_mode_create_suggested_offset_properties($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1354} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1355} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const qxl_mode_create_hotplug_mode_update_property: ref;

axiom qxl_mode_create_hotplug_mode_update_property == $sub.ref(0, 649257);

procedure qxl_mode_create_hotplug_mode_update_property($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_mode_create_hotplug_mode_update_property($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5328, 1));
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} $p7 := drm_property_create_range($p6, 4, .str.115, 0, 1);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5328, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, $p7);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qdev_crtc_init: ref;

axiom qdev_crtc_init == $sub.ref(0, 650289);

procedure qdev_crtc_init($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, assertsPassed, $CurrAddr;



implementation qdev_crtc_init($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i6: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} {:cexpr "qdev_crtc_init:arg:crtc_id"} boogie_si_record_i32($i1);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} $p2 := kzalloc(1176, 208);
    goto SeqInstr_883, SeqInstr_884;

  SeqInstr_884:
    assume assertsPassed;
    goto SeqInstr_885;

  SeqInstr_885:
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(0, 1));
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} vslice_dummy_var_139 := drm_crtc_init($p0, $p7, qxl_crtc_funcs);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(1160, 1));
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p9, $i1);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(0, 1));
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} vslice_dummy_var_140 := drm_mode_crtc_set_gamma_size($p10, 256);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(0, 1));
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} drm_crtc_helper_add($p12, qxl_crtc_helper_funcs);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_883:
    assume !assertsPassed;
    return;
}



const qdev_output_init: ref;

axiom qdev_output_init == $sub.ref(0, 651321);

procedure qdev_output_init($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, assertsPassed, $CurrAddr, $M.67, $M.68, $M.69, $M.70;



implementation qdev_output_init($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $i9: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} {:cexpr "qdev_output_init:arg:num_output"} boogie_si_record_i32($i1);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} $p5 := kzalloc(1024, 208);
    goto SeqInstr_886, SeqInstr_887;

  SeqInstr_887:
    assume assertsPassed;
    goto SeqInstr_888;

  SeqInstr_888:
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p10, $i1);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 1024)), $mul.ref(8, 1));
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 1024)), $mul.ref(928, 1));
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 1024)), $mul.ref(8, 1));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} vslice_dummy_var_141 := drm_connector_init($p0, $p13, qxl_connector_funcs, 15);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 1024)), $mul.ref(928, 1));
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} vslice_dummy_var_142 := drm_encoder_init($p0, $p15, qxl_enc_funcs, 5);
    $p17 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1024)), $mul.ref(8, 1)), $mul.ref(632, 1));
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p17, 1);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i18 := $shl.i32(1, $i1);
    $p19 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1024)), $mul.ref(928, 1)), $mul.ref(52, 1));
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p19, $i18);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 1024)), $mul.ref(8, 1));
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 1024)), $mul.ref(928, 1));
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} vslice_dummy_var_143 := drm_mode_connector_attach_encoder($p20, $p21);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} drm_encoder_helper_add($p12, qxl_enc_helper_funcs);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} drm_connector_helper_add($p11, qxl_connector_helper_funcs);
    $p23 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1024)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 5336)), $mul.ref(5328, 1));
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} drm_object_attach_property($p23, $p25, 0);
    $p26 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1024)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3144)), $mul.ref(1216, 1)), $mul.ref(1600, 1));
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} drm_object_attach_property($p26, $p29, 0);
    $p30 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1024)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3144)), $mul.ref(1216, 1)), $mul.ref(1608, 1));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p32);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} drm_object_attach_property($p30, $p33, 0);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} vslice_dummy_var_144 := ldv_drm_connector_register_115($p11);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_886:
    assume !assertsPassed;
    return;
}



const qxl_fbdev_init: ref;

axiom qxl_fbdev_init == $sub.ref(0, 652353);

procedure qxl_fbdev_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, assertsPassed;



implementation qxl_fbdev_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i29: i32;
  var $p33: ref;
  var $i25: i32;
  var $p34: ref;
  var $i6: i32;
  var vslice_dummy_var_145: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} $p2 := kzalloc(528, 208);
    goto SeqInstr_889, SeqInstr_890;

  SeqInstr_890:
    assume assertsPassed;
    goto SeqInstr_891;

  SeqInstr_891:
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 528)), $mul.ref(320, 1));
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p7, $p0);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(24, 1));
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, $p2);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 528)), $mul.ref(328, 1));
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} vslice_dummy_var_145 := spinlock_check($p10);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 528)), $mul.ref(328, 1)), $mul.ref(0, 1));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} __raw_spin_lock_init($p14, .str.23, $p1);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 528)), $mul.ref(400, 1));
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} INIT_LIST_HEAD($p15);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 528)), $mul.ref(0, 1));
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} drm_fb_helper_prepare($p17, $p18, qxl_fb_helper_funcs);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 528)), $mul.ref(0, 1));
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i22 := $M.66;
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} $i23 := drm_fb_helper_init($p20, $p21, $i22, 1);
    call {:si_unique_call 1380} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 528)), $mul.ref(0, 1));
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} $i27 := drm_fb_helper_single_add_all_connectors($p26);
    call {:si_unique_call 1383} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 528)), $mul.ref(0, 1));
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $i31 := drm_fb_helper_initial_config($p30, 32);
    call {:si_unique_call 1386} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i29 := $i31;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 528)), $mul.ref(0, 1));
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} drm_fb_helper_fini($p33);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i25 := $i29;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p3);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} kfree($p34);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i6 := $i25;
    goto $bb3;

  $bb9:
    assume $i28 == 1;
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb11;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i25 := $i23;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_889:
    assume !assertsPassed;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 653385);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 654417);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    return;
}



const drm_fb_helper_prepare: ref;

axiom drm_fb_helper_prepare == $sub.ref(0, 655449);

procedure drm_fb_helper_prepare($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation drm_fb_helper_prepare($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    return;
}



const drm_fb_helper_init: ref;

axiom drm_fb_helper_init == $sub.ref(0, 656481);

procedure drm_fb_helper_init($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_fb_helper_init($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1387} {:cexpr "drm_fb_helper_init:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1388} {:cexpr "drm_fb_helper_init:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1389} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1390} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const drm_fb_helper_single_add_all_connectors: ref;

axiom drm_fb_helper_single_add_all_connectors == $sub.ref(0, 657513);

procedure drm_fb_helper_single_add_all_connectors($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_fb_helper_single_add_all_connectors($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1391} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1392} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const drm_fb_helper_initial_config: ref;

axiom drm_fb_helper_initial_config == $sub.ref(0, 658545);

procedure drm_fb_helper_initial_config($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_fb_helper_initial_config($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1393} {:cexpr "drm_fb_helper_initial_config:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1394} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1395} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const drm_connector_init: ref;

axiom drm_connector_init == $sub.ref(0, 659577);

procedure drm_connector_init($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_connector_init($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1396} {:cexpr "drm_connector_init:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1397} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1398} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const drm_encoder_init: ref;

axiom drm_encoder_init == $sub.ref(0, 660609);

procedure drm_encoder_init($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_encoder_init($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1399} {:cexpr "drm_encoder_init:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1400} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1401} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const drm_mode_connector_attach_encoder: ref;

axiom drm_mode_connector_attach_encoder == $sub.ref(0, 661641);

procedure drm_mode_connector_attach_encoder($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_mode_connector_attach_encoder($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1402} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1403} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const drm_encoder_helper_add: ref;

axiom drm_encoder_helper_add == $sub.ref(0, 662673);

procedure drm_encoder_helper_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation drm_encoder_helper_add($p0: ref, $p1: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p3, $p1);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    return;
}



const drm_connector_helper_add: ref;

axiom drm_connector_helper_add == $sub.ref(0, 663705);

procedure drm_connector_helper_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation drm_connector_helper_add($p0: ref, $p1: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 920)), $mul.ref(640, 1));
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p3, $p1);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    return;
}



const drm_object_attach_property: ref;

axiom drm_object_attach_property == $sub.ref(0, 664737);

procedure drm_object_attach_property($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation drm_object_attach_property($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} {:cexpr "drm_object_attach_property:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    return;
}



const ldv_drm_connector_register_115: ref;

axiom ldv_drm_connector_register_115 == $sub.ref(0, 665769);

procedure ldv_drm_connector_register_115($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $CurrAddr, $M.69, $M.70;



implementation ldv_drm_connector_register_115($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} $i1 := drm_connector_register($p0);
    call {:si_unique_call 1406} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} $i2 := ldv_drm_connector_register($i1, $p0);
    call {:si_unique_call 1408} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const drm_connector_register: ref;

axiom drm_connector_register == $sub.ref(0, 666801);

procedure drm_connector_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_connector_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1409} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1410} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_drm_connector_register: ref;

axiom ldv_drm_connector_register == $sub.ref(0, 667833);

procedure ldv_drm_connector_register($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $CurrAddr, $M.69, $M.70;



implementation ldv_drm_connector_register($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} {:cexpr "ldv_drm_connector_register:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $i2 := ldv_undef_int();
    call {:si_unique_call 1413} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i0, 0);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} ldv_assume($i7);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 0);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} ldv_assume($i5);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} ldv_dispatch_register_17_2($p1);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_dispatch_register_17_2: ref;

axiom ldv_dispatch_register_17_2 == $sub.ref(0, 668865);

procedure ldv_dispatch_register_17_2($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $CurrAddr, $M.69, $M.70;



implementation ldv_dispatch_register_17_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} $p1 := ldv_xmalloc(16);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p3, $p0);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} ldv_struct_drm_connector_helper_funcs_dummy_resourceless_instance_5($p4);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    return;
}



const ldv_xmalloc: ref;

axiom ldv_xmalloc == $sub.ref(0, 669897);

procedure ldv_xmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_xmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} {:cexpr "ldv_xmalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} $p1 := malloc($i0);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} ldv_assume($i4);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} $i5 := ldv_is_err($p1);
    call {:si_unique_call 1423} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} ldv_assume($i7);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_struct_drm_connector_helper_funcs_dummy_resourceless_instance_5: ref;

axiom ldv_struct_drm_connector_helper_funcs_dummy_resourceless_instance_5 == $sub.ref(0, 670929);

procedure ldv_struct_drm_connector_helper_funcs_dummy_resourceless_instance_5($p0: ref);
  free requires assertsPassed;
  modifies $M.67, $M.68, $M.6, $M.69, $M.70, $CurrAddr;



implementation ldv_struct_drm_connector_helper_funcs_dummy_resourceless_instance_5($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i8, $i9, $i10, $i11, $i12 := ldv_struct_drm_connector_helper_funcs_dummy_resourceless_instance_5_loop_$bb4($p7, $i8, $i9, $i10, $i11, $i12);
    goto $bb4_last;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i8, 2);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i8, 3);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i12 := $i8;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 4);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} ldv_stop();
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} ldv_dummy_resourceless_instance_callback_5_3($u7, $p7);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} ldv_dummy_resourceless_instance_callback_5_7($u6, $p7);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} ldv_dummy_resourceless_instance_callback_5_8($u4, $p7, $u5);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} ldv_free($p6);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} $i8 := ldv_undef_int();
    call {:si_unique_call 1427} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_5454;
}



const ldv_free: ref;

axiom ldv_free == $sub.ref(0, 671961);

procedure ldv_free($p0: ref);
  free requires assertsPassed;



implementation ldv_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} free_($p0);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_5_8: ref;

axiom ldv_dummy_resourceless_instance_callback_5_8 == $sub.ref(0, 672993);

procedure ldv_dummy_resourceless_instance_callback_5_8($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_5_8($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_146: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} vslice_dummy_var_146 := qxl_conn_mode_valid($p1, $p2);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_5_7: ref;

axiom ldv_dummy_resourceless_instance_callback_5_7 == $sub.ref(0, 674025);

procedure ldv_dummy_resourceless_instance_callback_5_7($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.67, $M.68, $M.6, $M.69, $M.70, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_5_7($p0: ref, $p1: ref)
{
  var vslice_dummy_var_147: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} vslice_dummy_var_147 := qxl_conn_get_modes($p1);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_5_3: ref;

axiom ldv_dummy_resourceless_instance_callback_5_3 == $sub.ref(0, 675057);

procedure ldv_dummy_resourceless_instance_callback_5_3($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_5_3($p0: ref, $p1: ref)
{
  var vslice_dummy_var_148: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} vslice_dummy_var_148 := qxl_best_encoder($p1);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 676089);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const qxl_best_encoder: ref;

axiom qxl_best_encoder == $sub.ref(0, 677121);

procedure qxl_best_encoder($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qxl_best_encoder($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, drm_debug);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 1);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 1437} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 1024)), $mul.ref(928, 1));
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} drm_ut_debug_printk.ref.ref(.str.124, .str.117);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const drm_ut_debug_printk: ref;

axiom drm_ut_debug_printk == $sub.ref(0, 678153);

procedure drm_ut_debug_printk.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);



procedure drm_ut_debug_printk.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation drm_ut_debug_printk.ref.ref($p0: ref, $p1: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_ut_debug_printk.ref.ref.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32);
  free requires assertsPassed;



implementation drm_ut_debug_printk.ref.ref.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_ut_debug_printk.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation drm_ut_debug_printk.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_ut_debug_printk.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32);
  free requires assertsPassed;



implementation drm_ut_debug_printk.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_ut_debug_printk.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32);
  free requires assertsPassed;



implementation drm_ut_debug_printk.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_ut_debug_printk.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation drm_ut_debug_printk.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_ut_debug_printk.ref.ref.i64.i64.i32.i32.i64.i64.i32.i32.ref($p0: ref, $p1: ref, p.2: i64, p.3: i64, p.4: i32, p.5: i32, p.6: i64, p.7: i64, p.8: i32, p.9: i32, p.10: ref);
  free requires assertsPassed;



implementation drm_ut_debug_printk.ref.ref.i64.i64.i32.i32.i64.i64.i32.i32.ref($p0: ref, $p1: ref, p.2: i64, p.3: i64, p.4: i32, p.5: i32, p.6: i64, p.7: i64, p.8: i32, p.9: i32, p.10: ref)
{

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_ut_debug_printk.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation drm_ut_debug_printk.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32)
{

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_ut_debug_printk.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation drm_ut_debug_printk.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    return;
}



const qxl_conn_get_modes: ref;

axiom qxl_conn_get_modes == $sub.ref(0, 679185);

procedure qxl_conn_get_modes($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.67, $M.68, $M.6, $M.69, $M.70, $CurrAddr;



implementation qxl_conn_get_modes($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 920)), $mul.ref(0, 1));
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $M.67 := $store.i32($M.67, $p1, 1024);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $M.68 := $store.i32($M.68, $p2, 768);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.6, drm_debug);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 4);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 1442} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.6, $p17);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.67, $p1);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.68, $p2);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} $i33 := qxl_add_common_modes($p0, $i31, $i32);
    call {:si_unique_call 1447} {:cexpr "tmp___0"} boogie_si_record_i32($i33);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i30, $i33);
    call {:si_unique_call 1448} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $i29 := $i34;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.6, $p23);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb6;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} $i27 := qxl_add_monitors_config_modes($p0, $p1, $p2);
    call {:si_unique_call 1445} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i30 := $i27;
    goto $bb13;

  $bb9:
    assume $i28 == 1;
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb11;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} drm_ut_debug_printk.ref.ref.ref(.str.125, .str.126, $p16);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_add_monitors_config_modes: ref;

axiom qxl_add_monitors_config_modes == $sub.ref(0, 680217);

procedure qxl_add_monitors_config_modes($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68;



implementation qxl_add_monitors_config_modes($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 920)), $mul.ref(0, 1));
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 8), 1024)), $mul.ref(0, 1));
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    call {:si_unique_call 1449} {:cexpr "h"} boogie_si_record_i32($i11);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.6, $p17);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i11);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref($i21, 28)), $mul.ref(8, 1));
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.6, $p23);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p20, $mul.ref($i21, 28)), $mul.ref(12, 1));
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.6, $p25);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} $p27 := drm_cvt_mode($p4, $i24, $i26, 60, 0, 0, 0);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.6, $p28);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i29, 8);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p27, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p31, $i30);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p20, $mul.ref($i21, 28)), $mul.ref(8, 1));
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.6, $p32);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $M.67 := $store.i32($M.67, $p1, $i33);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p20, $mul.ref($i21, 28)), $mul.ref(12, 1));
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.6, $p34);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $M.68 := $store.i32($M.68, $p2, $i35);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} drm_mode_probed_add($p0, $p27);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;
}



const qxl_add_common_modes: ref;

axiom qxl_add_common_modes == $sub.ref(0, 681249);

procedure qxl_add_common_modes($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.69, $M.70, $M.6, $CurrAddr;



implementation qxl_add_common_modes($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $i76: i32;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $p95: ref;
  var $i96: i32;
  var $p98: ref;
  var $i99: i32;
  var $p100: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i1;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $p112: ref;
  var $p114: ref;
  var $i115: i32;
  var $p117: ref;
  var $i118: i32;
  var $p119: ref;
  var $p121: ref;
  var $i122: i32;
  var $i123: i1;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i32;
  var $i130: i32;
  var $p131: ref;
  var $p133: ref;
  var $i134: i32;
  var $p136: ref;
  var $i137: i32;
  var $p138: ref;
  var $p140: ref;
  var $i141: i32;
  var $i142: i1;
  var $p144: ref;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i148: i32;
  var $i149: i32;
  var $p150: ref;
  var $p152: ref;
  var $i153: i32;
  var $p155: ref;
  var $i156: i32;
  var $p157: ref;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $p163: ref;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $i167: i32;
  var $i168: i32;
  var $p169: ref;
  var $p171: ref;
  var $i172: i32;
  var $p174: ref;
  var $i175: i32;
  var $p176: ref;
  var $p178: ref;
  var $i179: i32;
  var $i180: i1;
  var $p182: ref;
  var $i183: i32;
  var $i184: i1;
  var $p185: ref;
  var $i186: i32;
  var $i187: i32;
  var $p188: ref;
  var $p190: ref;
  var $i191: i32;
  var $p193: ref;
  var $i194: i32;
  var $p195: ref;
  var $p197: ref;
  var $i198: i32;
  var $i199: i1;
  var $p201: ref;
  var $i202: i32;
  var $i203: i1;
  var $p204: ref;
  var $i205: i32;
  var $i206: i32;
  var $p207: ref;
  var $p209: ref;
  var $i210: i32;
  var $p212: ref;
  var $i213: i32;
  var $p214: ref;
  var $p216: ref;
  var $i217: i32;
  var $i218: i1;
  var $p220: ref;
  var $i221: i32;
  var $i222: i1;
  var $p223: ref;
  var $i224: i32;
  var $i225: i32;
  var $p226: ref;
  var $p228: ref;
  var $i229: i32;
  var $p231: ref;
  var $i232: i32;
  var $p233: ref;
  var $p235: ref;
  var $i236: i32;
  var $i237: i1;
  var $p239: ref;
  var $i240: i32;
  var $i241: i1;
  var $p242: ref;
  var $i243: i32;
  var $i244: i32;
  var $p245: ref;
  var $p247: ref;
  var $i248: i32;
  var $p250: ref;
  var $i251: i32;
  var $p252: ref;
  var $p254: ref;
  var $i255: i32;
  var $i256: i1;
  var $p258: ref;
  var $i259: i32;
  var $i260: i1;
  var $p261: ref;
  var $i262: i32;
  var $i263: i32;
  var $p264: ref;
  var $p266: ref;
  var $i267: i32;
  var $p269: ref;
  var $i270: i32;
  var $p271: ref;
  var $p273: ref;
  var $i274: i32;
  var $i275: i1;
  var $p277: ref;
  var $i278: i32;
  var $i279: i1;
  var $p280: ref;
  var $i281: i32;
  var $i282: i32;
  var $p283: ref;
  var $p285: ref;
  var $i286: i32;
  var $p288: ref;
  var $i289: i32;
  var $p290: ref;
  var $p292: ref;
  var $i293: i32;
  var $i294: i1;
  var $p296: ref;
  var $i297: i32;
  var $i298: i1;
  var $p299: ref;
  var $i300: i32;
  var $i301: i32;
  var $p302: ref;
  var $p304: ref;
  var $i305: i32;
  var $p307: ref;
  var $i308: i32;
  var $p309: ref;
  var $p311: ref;
  var $i312: i32;
  var $i313: i1;
  var $p315: ref;
  var $i316: i32;
  var $i317: i1;
  var $p318: ref;
  var $i319: i32;
  var $i320: i32;
  var $p321: ref;
  var $p323: ref;
  var $i324: i32;
  var $p326: ref;
  var $i327: i32;
  var $p328: ref;
  var $p330: ref;
  var $i331: i32;
  var $i332: i1;
  var $p334: ref;
  var $i335: i32;
  var $i336: i1;
  var $p337: ref;
  var $i338: i32;
  var $i339: i32;
  var $p340: ref;
  var $p342: ref;
  var $i343: i32;
  var $p345: ref;
  var $i346: i32;
  var $p347: ref;
  var $p349: ref;
  var $i350: i32;
  var $i351: i1;
  var $p353: ref;
  var $i354: i32;
  var $i355: i1;
  var $p356: ref;
  var $i357: i32;
  var $i358: i32;
  var $p359: ref;
  var $p361: ref;
  var $i362: i32;
  var $p364: ref;
  var $i365: i32;
  var $p366: ref;
  var $p368: ref;
  var $i369: i32;
  var $i370: i1;
  var $p372: ref;
  var $i373: i32;
  var $i374: i1;
  var $p375: ref;
  var $i376: i32;
  var $i377: i32;
  var $p378: ref;
  var $p380: ref;
  var $i381: i32;
  var $p383: ref;
  var $i384: i32;
  var $p385: ref;
  var $p387: ref;
  var $i388: i32;
  var $i389: i1;
  var $p391: ref;
  var $i392: i32;
  var $i393: i1;
  var $p394: ref;
  var $i395: i32;
  var $i396: i32;
  var $p397: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} $p3 := $alloc($mul.ref(136, $zext.i32.i64(1)));
    call {:si_unique_call 1453} {:cexpr "qxl_add_common_modes:arg:pwidth"} boogie_si_record_i32($i1);
    call {:si_unique_call 1454} {:cexpr "qxl_add_common_modes:arg:pheight"} boogie_si_record_i32($i2);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 920)), $mul.ref(0, 1));
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p7, 640);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $M.70 := $store.i32($M.70, $p9, 480);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p11, 720);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $M.70 := $store.i32($M.70, $p13, 480);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p15, 800);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $M.70 := $store.i32($M.70, $p17, 600);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(3, 8)), $mul.ref(0, 1));
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p19, 848);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(3, 8)), $mul.ref(4, 1));
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $M.70 := $store.i32($M.70, $p21, 480);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(4, 8)), $mul.ref(0, 1));
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p23, 1024);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(4, 8)), $mul.ref(4, 1));
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $M.70 := $store.i32($M.70, $p25, 768);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(5, 8)), $mul.ref(0, 1));
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p27, 1152);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(5, 8)), $mul.ref(4, 1));
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $M.70 := $store.i32($M.70, $p29, 768);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(6, 8)), $mul.ref(0, 1));
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p31, 1280);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(6, 8)), $mul.ref(4, 1));
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $M.70 := $store.i32($M.70, $p33, 720);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(7, 8)), $mul.ref(0, 1));
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p35, 1280);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(7, 8)), $mul.ref(4, 1));
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $M.70 := $store.i32($M.70, $p37, 800);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(8, 8)), $mul.ref(0, 1));
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p39, 1280);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(8, 8)), $mul.ref(4, 1));
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $M.70 := $store.i32($M.70, $p41, 854);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(9, 8)), $mul.ref(0, 1));
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p43, 1280);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(9, 8)), $mul.ref(4, 1));
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $M.70 := $store.i32($M.70, $p45, 960);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(10, 8)), $mul.ref(0, 1));
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p47, 1280);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(10, 8)), $mul.ref(4, 1));
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $M.70 := $store.i32($M.70, $p49, 1024);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(11, 8)), $mul.ref(0, 1));
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p51, 1440);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(11, 8)), $mul.ref(4, 1));
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $M.70 := $store.i32($M.70, $p53, 900);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(12, 8)), $mul.ref(0, 1));
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p55, 1400);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(12, 8)), $mul.ref(4, 1));
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $M.70 := $store.i32($M.70, $p57, 1050);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(13, 8)), $mul.ref(0, 1));
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p59, 1680);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(13, 8)), $mul.ref(4, 1));
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $M.70 := $store.i32($M.70, $p61, 1050);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(14, 8)), $mul.ref(0, 1));
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p63, 1600);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(14, 8)), $mul.ref(4, 1));
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $M.70 := $store.i32($M.70, $p65, 1200);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(15, 8)), $mul.ref(0, 1));
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p67, 1920);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(15, 8)), $mul.ref(4, 1));
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $M.70 := $store.i32($M.70, $p69, 1080);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(16, 8)), $mul.ref(0, 1));
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p71, 1920);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(16, 8)), $mul.ref(4, 1));
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $M.70 := $store.i32($M.70, $p73, 1200);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.69, $p75);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.70, $p78);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} $p80 := drm_cvt_mode($p5, $i76, $i79, 60, 0, 0, 0);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.69, $p82);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, $i1);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} drm_mode_probed_add($p0, $p80);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.69, $p95);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.70, $p98);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} $p100 := drm_cvt_mode($p5, $i96, $i99, 60, 0, 0, 0);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.69, $p102);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, $i1);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} drm_mode_probed_add($p0, $p100);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.69, $p114);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.70, $p117);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} $p119 := drm_cvt_mode($p5, $i115, $i118, 60, 0, 0, 0);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.69, $p121);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, $i1);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} drm_mode_probed_add($p0, $p119);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(3, 8)), $mul.ref(0, 1));
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.69, $p133);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(3, 8)), $mul.ref(4, 1));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.70, $p136);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} $p138 := drm_cvt_mode($p5, $i134, $i137, 60, 0, 0, 0);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(3, 8)), $mul.ref(0, 1));
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.69, $p140);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, $i1);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i142 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} drm_mode_probed_add($p0, $p138);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(4, 8)), $mul.ref(0, 1));
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.69, $p152);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(4, 8)), $mul.ref(4, 1));
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i156 := $load.i32($M.70, $p155);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} $p157 := drm_cvt_mode($p5, $i153, $i156, 60, 0, 0, 0);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(4, 8)), $mul.ref(0, 1));
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.69, $p159);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, $i1);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i161 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} drm_mode_probed_add($p0, $p157);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(5, 8)), $mul.ref(0, 1));
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.69, $p171);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(5, 8)), $mul.ref(4, 1));
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.70, $p174);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $p176 := drm_cvt_mode($p5, $i172, $i175, 60, 0, 0, 0);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(5, 8)), $mul.ref(0, 1));
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.69, $p178);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, $i1);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i180 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} drm_mode_probed_add($p0, $p176);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(6, 8)), $mul.ref(0, 1));
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.69, $p190);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(6, 8)), $mul.ref(4, 1));
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i194 := $load.i32($M.70, $p193);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} $p195 := drm_cvt_mode($p5, $i191, $i194, 60, 0, 0, 0);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(6, 8)), $mul.ref(0, 1));
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i198 := $load.i32($M.69, $p197);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i198, $i1);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    assume {:branchcond $i199} true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i199 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} drm_mode_probed_add($p0, $p195);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(7, 8)), $mul.ref(0, 1));
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i210 := $load.i32($M.69, $p209);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(7, 8)), $mul.ref(4, 1));
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.70, $p212);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} $p214 := drm_cvt_mode($p5, $i210, $i213, 60, 0, 0, 0);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(7, 8)), $mul.ref(0, 1));
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i217 := $load.i32($M.69, $p216);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, $i1);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i218} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i218 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} drm_mode_probed_add($p0, $p214);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(8, 8)), $mul.ref(0, 1));
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i229 := $load.i32($M.69, $p228);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(8, 8)), $mul.ref(4, 1));
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i232 := $load.i32($M.70, $p231);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} $p233 := drm_cvt_mode($p5, $i229, $i232, 60, 0, 0, 0);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(8, 8)), $mul.ref(0, 1));
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i236 := $load.i32($M.69, $p235);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i237 := $eq.i32($i236, $i1);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i237} true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i237 == 1);
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} drm_mode_probed_add($p0, $p233);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(9, 8)), $mul.ref(0, 1));
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i248 := $load.i32($M.69, $p247);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(9, 8)), $mul.ref(4, 1));
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i251 := $load.i32($M.70, $p250);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} $p252 := drm_cvt_mode($p5, $i248, $i251, 60, 0, 0, 0);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(9, 8)), $mul.ref(0, 1));
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i255 := $load.i32($M.69, $p254);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $i256 := $eq.i32($i255, $i1);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    assume {:branchcond $i256} true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i256 == 1);
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} drm_mode_probed_add($p0, $p252);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(10, 8)), $mul.ref(0, 1));
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i267 := $load.i32($M.69, $p266);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(10, 8)), $mul.ref(4, 1));
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i270 := $load.i32($M.70, $p269);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} $p271 := drm_cvt_mode($p5, $i267, $i270, 60, 0, 0, 0);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(10, 8)), $mul.ref(0, 1));
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i274 := $load.i32($M.69, $p273);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i275 := $eq.i32($i274, $i1);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    assume {:branchcond $i275} true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i275 == 1);
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} drm_mode_probed_add($p0, $p271);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(11, 8)), $mul.ref(0, 1));
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i286 := $load.i32($M.69, $p285);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(11, 8)), $mul.ref(4, 1));
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i289 := $load.i32($M.70, $p288);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} $p290 := drm_cvt_mode($p5, $i286, $i289, 60, 0, 0, 0);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(11, 8)), $mul.ref(0, 1));
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i293 := $load.i32($M.69, $p292);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i293, $i1);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i294} true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i294 == 1);
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} drm_mode_probed_add($p0, $p290);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(12, 8)), $mul.ref(0, 1));
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i305 := $load.i32($M.69, $p304);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(12, 8)), $mul.ref(4, 1));
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i308 := $load.i32($M.70, $p307);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} $p309 := drm_cvt_mode($p5, $i305, $i308, 60, 0, 0, 0);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(12, 8)), $mul.ref(0, 1));
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i312 := $load.i32($M.69, $p311);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i313 := $eq.i32($i312, $i1);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i313} true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i313 == 1);
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} drm_mode_probed_add($p0, $p309);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(13, 8)), $mul.ref(0, 1));
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i324 := $load.i32($M.69, $p323);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(13, 8)), $mul.ref(4, 1));
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $i327 := $load.i32($M.70, $p326);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} $p328 := drm_cvt_mode($p5, $i324, $i327, 60, 0, 0, 0);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(13, 8)), $mul.ref(0, 1));
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i331 := $load.i32($M.69, $p330);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i332 := $eq.i32($i331, $i1);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i332} true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i332 == 1);
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} drm_mode_probed_add($p0, $p328);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(14, 8)), $mul.ref(0, 1));
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i343 := $load.i32($M.69, $p342);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(14, 8)), $mul.ref(4, 1));
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i346 := $load.i32($M.70, $p345);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} $p347 := drm_cvt_mode($p5, $i343, $i346, 60, 0, 0, 0);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(14, 8)), $mul.ref(0, 1));
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.69, $p349);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $i351 := $eq.i32($i350, $i1);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    assume {:branchcond $i351} true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i351 == 1);
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} drm_mode_probed_add($p0, $p347);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(15, 8)), $mul.ref(0, 1));
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i362 := $load.i32($M.69, $p361);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(15, 8)), $mul.ref(4, 1));
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i365 := $load.i32($M.70, $p364);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} $p366 := drm_cvt_mode($p5, $i362, $i365, 60, 0, 0, 0);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(15, 8)), $mul.ref(0, 1));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i369 := $load.i32($M.69, $p368);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i370 := $eq.i32($i369, $i1);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i370} true;
    goto $bb109, $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    assume !($i370 == 1);
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} drm_mode_probed_add($p0, $p366);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(16, 8)), $mul.ref(0, 1));
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i381 := $load.i32($M.69, $p380);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(16, 8)), $mul.ref(4, 1));
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i384 := $load.i32($M.70, $p383);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} $p385 := drm_cvt_mode($p5, $i381, $i384, 60, 0, 0, 0);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(16, 8)), $mul.ref(0, 1));
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i388 := $load.i32($M.69, $p387);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i389 := $eq.i32($i388, $i1);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i389} true;
    goto $bb116, $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume !($i389 == 1);
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} drm_mode_probed_add($p0, $p385);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i93 := $add.i32(17, $sub.i32(0, 1));
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $r := $i93;
    return;

  $bb116:
    assume $i389 == 1;
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(16, 8)), $mul.ref(4, 1));
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i392 := $load.i32($M.70, $p391);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $i393 := $eq.i32($i392, $i2);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i393} true;
    goto $bb119, $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    assume !($i393 == 1);
    goto $bb118;

  $bb119:
    assume $i393 == 1;
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p385, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i395 := $load.i32($M.6, $p394);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i396 := $or.i32($i395, 8);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p385, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p397, $i396);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb109:
    assume $i370 == 1;
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(15, 8)), $mul.ref(4, 1));
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i373 := $load.i32($M.70, $p372);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i374 := $eq.i32($i373, $i2);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i374} true;
    goto $bb112, $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    assume !($i374 == 1);
    goto $bb111;

  $bb112:
    assume $i374 == 1;
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p366, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i376 := $load.i32($M.6, $p375);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i377 := $or.i32($i376, 8);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($p366, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p378, $i377);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb102:
    assume $i351 == 1;
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(14, 8)), $mul.ref(4, 1));
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i354 := $load.i32($M.70, $p353);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i355 := $eq.i32($i354, $i2);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb105, $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume !($i355 == 1);
    goto $bb104;

  $bb105:
    assume $i355 == 1;
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p347, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i357 := $load.i32($M.6, $p356);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i358 := $or.i32($i357, 8);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p347, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p359, $i358);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb95:
    assume $i332 == 1;
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(13, 8)), $mul.ref(4, 1));
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i335 := $load.i32($M.70, $p334);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i336 := $eq.i32($i335, $i2);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i336} true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i336 == 1);
    goto $bb97;

  $bb98:
    assume $i336 == 1;
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p328, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i338 := $load.i32($M.6, $p337);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i339 := $or.i32($i338, 8);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p328, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p340, $i339);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb88:
    assume $i313 == 1;
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(12, 8)), $mul.ref(4, 1));
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i316 := $load.i32($M.70, $p315);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i316, $i2);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    assume {:branchcond $i317} true;
    goto $bb91, $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume !($i317 == 1);
    goto $bb90;

  $bb91:
    assume $i317 == 1;
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p309, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i319 := $load.i32($M.6, $p318);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i320 := $or.i32($i319, 8);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p309, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p321, $i320);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb81:
    assume $i294 == 1;
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(11, 8)), $mul.ref(4, 1));
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i297 := $load.i32($M.70, $p296);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i298 := $eq.i32($i297, $i2);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i298} true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i298 == 1);
    goto $bb83;

  $bb84:
    assume $i298 == 1;
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p290, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i300 := $load.i32($M.6, $p299);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i301 := $or.i32($i300, 8);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p290, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p302, $i301);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb74:
    assume $i275 == 1;
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(10, 8)), $mul.ref(4, 1));
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $i278 := $load.i32($M.70, $p277);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i279 := $eq.i32($i278, $i2);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i279} true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i279 == 1);
    goto $bb76;

  $bb77:
    assume $i279 == 1;
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p271, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i281 := $load.i32($M.6, $p280);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $i282 := $or.i32($i281, 8);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p271, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p283, $i282);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb67:
    assume $i256 == 1;
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(9, 8)), $mul.ref(4, 1));
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i259 := $load.i32($M.70, $p258);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i259, $i2);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i260} true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i260 == 1);
    goto $bb69;

  $bb70:
    assume $i260 == 1;
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p252, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i262 := $load.i32($M.6, $p261);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i263 := $or.i32($i262, 8);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p252, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p264, $i263);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb60:
    assume $i237 == 1;
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(8, 8)), $mul.ref(4, 1));
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i240 := $load.i32($M.70, $p239);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i241 := $eq.i32($i240, $i2);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i241} true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i241 == 1);
    goto $bb62;

  $bb63:
    assume $i241 == 1;
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p233, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i243 := $load.i32($M.6, $p242);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i244 := $or.i32($i243, 8);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p233, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p245, $i244);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb53:
    assume $i218 == 1;
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(7, 8)), $mul.ref(4, 1));
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i221 := $load.i32($M.70, $p220);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i221, $i2);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i222} true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i222 == 1);
    goto $bb55;

  $bb56:
    assume $i222 == 1;
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p214, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i224 := $load.i32($M.6, $p223);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i225 := $or.i32($i224, 8);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p214, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p226, $i225);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb46:
    assume $i199 == 1;
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(6, 8)), $mul.ref(4, 1));
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i202 := $load.i32($M.70, $p201);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i202, $i2);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i203 == 1);
    goto $bb48;

  $bb49:
    assume $i203 == 1;
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p195, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i205 := $load.i32($M.6, $p204);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i206 := $or.i32($i205, 8);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p195, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p207, $i206);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb39:
    assume $i180 == 1;
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(5, 8)), $mul.ref(4, 1));
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.70, $p182);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, $i2);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i184 == 1);
    goto $bb41;

  $bb42:
    assume $i184 == 1;
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p176, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.6, $p185);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i187 := $or.i32($i186, 8);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p176, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p188, $i187);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb32:
    assume $i161 == 1;
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(4, 8)), $mul.ref(4, 1));
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.70, $p163);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, $i2);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i165 == 1);
    goto $bb34;

  $bb35:
    assume $i165 == 1;
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p157, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.6, $p166);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i168 := $or.i32($i167, 8);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p157, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p169, $i168);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb25:
    assume $i142 == 1;
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(3, 8)), $mul.ref(4, 1));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.70, $p144);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, $i2);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb27;

  $bb28:
    assume $i146 == 1;
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p138, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.6, $p147);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i149 := $or.i32($i148, 8);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p138, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p150, $i149);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb18:
    assume $i123 == 1;
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.70, $p125);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, $i2);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb20;

  $bb21:
    assume $i127 == 1;
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p119, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.6, $p128);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i130 := $or.i32($i129, 8);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p119, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p131, $i130);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb11:
    assume $i104 == 1;
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.70, $p106);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, $i2);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb13;

  $bb14:
    assume $i108 == 1;
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p100, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.6, $p109);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i111 := $or.i32($i110, 8);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p100, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p112, $i111);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb3:
    assume $i84 == 1;
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.70, $p86);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, $i2);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb5;

  $bb6:
    assume $i88 == 1;
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p80, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.6, $p89);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i91 := $or.i32($i90, 8);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p80, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p92, $i91);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const drm_cvt_mode: ref;

axiom drm_cvt_mode == $sub.ref(0, 682281);

procedure drm_cvt_mode($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i1, $i5: i1, $i6: i1) returns ($r: ref);
  free requires assertsPassed;



implementation drm_cvt_mode($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i1, $i5: i1, $i6: i1) returns ($r: ref)
{
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} {:cexpr "drm_cvt_mode:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1490} {:cexpr "drm_cvt_mode:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1491} {:cexpr "drm_cvt_mode:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1492} {:cexpr "drm_cvt_mode:arg:arg4"} boogie_si_record_i1($i4);
    call {:si_unique_call 1493} {:cexpr "drm_cvt_mode:arg:arg5"} boogie_si_record_i1($i5);
    call {:si_unique_call 1494} {:cexpr "drm_cvt_mode:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} $p7 := external_alloc();
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;
}



const drm_mode_probed_add: ref;

axiom drm_mode_probed_add == $sub.ref(0, 683313);

procedure drm_mode_probed_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation drm_mode_probed_add($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    return;
}



const qxl_conn_mode_valid: ref;

axiom qxl_conn_mode_valid == $sub.ref(0, 684345);

procedure qxl_conn_mode_valid($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_conn_mode_valid($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, drm_debug);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, 1);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1497} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(76, 1));
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(96, 1));
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(64, 1));
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} drm_ut_debug_printk.ref.ref.ref.i32.i32.i32(.str.127, .str.128, $p8, $i10, $i12, $i14);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 685377);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 1499} $r := $malloc($i0);
    return;
}



const drm_crtc_init: ref;

axiom drm_crtc_init == $sub.ref(0, 686409);

procedure drm_crtc_init($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_crtc_init($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1500} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1501} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const drm_mode_crtc_set_gamma_size: ref;

axiom drm_mode_crtc_set_gamma_size == $sub.ref(0, 687441);

procedure drm_mode_crtc_set_gamma_size($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_mode_crtc_set_gamma_size($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1502} {:cexpr "drm_mode_crtc_set_gamma_size:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1503} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1504} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const drm_crtc_helper_add: ref;

axiom drm_crtc_helper_add == $sub.ref(0, 688473);

procedure drm_crtc_helper_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation drm_crtc_helper_add($p0: ref, $p1: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(744, 1));
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p3, $p1);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    return;
}



const drm_property_create_range: ref;

axiom drm_property_create_range == $sub.ref(0, 689505);

procedure drm_property_create_range($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i64) returns ($r: ref);
  free requires assertsPassed;



implementation drm_property_create_range($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i64) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} {:cexpr "drm_property_create_range:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1506} {:cexpr "drm_property_create_range:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 1507} {:cexpr "drm_property_create_range:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} $p5 := external_alloc();
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const qxl_bo_pin: ref;

axiom qxl_bo_pin == $sub.ref(0, 690537);

procedure qxl_bo_pin($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.71;



implementation qxl_bo_pin($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i31: i64;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} {:cexpr "qxl_bo_pin:arg:domain"} boogie_si_record_i32($i1);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1016, 1)), $mul.ref(8, 1));
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(992, 1));
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} qxl_ttm_placement_from_domain($p0, $i1, 1);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(56, 1));
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} $i22 := ttm_bo_validate($p20, $p21, 0, 0);
    call {:si_unique_call 1513} {:cexpr "r"} boogie_si_record_i32($i22);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $i26 := ldv__builtin_expect($i25, 1);
    call {:si_unique_call 1515} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i22, 0);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 1518} {:cexpr "tmp___0"} boogie_si_record_i64($i35);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i19 := $i22;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p8, $mul.ref(0, 5336)), $mul.ref(0, 1));
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.6, $p37);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} dev_err.ref.ref.ref($p38, .str.25, $p0);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(992, 1));
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p28, 1);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p2);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} $i31 := qxl_bo_gpu_offset($p0);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $M.71 := $store.i64($M.71, $p2, $i31);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(992, 1));
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.6, $p12);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 1);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(992, 1));
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p15, $i14);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p2);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb6;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} $i18 := qxl_bo_gpu_offset($p0);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $M.71 := $store.i64($M.71, $p2, $i18);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 691569);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const qxl_bo_gpu_offset: ref;

axiom qxl_bo_gpu_offset == $sub.ref(0, 692601);

procedure qxl_bo_gpu_offset($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation qxl_bo_gpu_offset($p0: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(424, 1));
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.6, $p2);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 693633);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    return;
}



const io_mapping_create_wc: ref;

axiom io_mapping_create_wc == $sub.ref(0, 694665);

procedure io_mapping_create_wc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation io_mapping_create_wc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} {:cexpr "io_mapping_create_wc:arg:base"} boogie_si_record_i64($i0);
    call {:si_unique_call 1521} {:cexpr "io_mapping_create_wc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} $p2 := ioremap_wc($i0, $i1);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ioremap: ref;

axiom ioremap == $sub.ref(0, 695697);

procedure ioremap($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.64;



implementation ioremap($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} {:cexpr "ioremap:arg:offset"} boogie_si_record_i64($i0);
    call {:si_unique_call 1524} {:cexpr "ioremap:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} $p2 := ldv_linux_arch_io_io_mem_remap();
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const qxl_check_device: ref;

axiom qxl_check_device == $sub.ref(0, 696729);

procedure qxl_check_device($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_check_device($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p53: ref;
  var $i54: i32;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i66: i32;
  var $i8: i1;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(0, 1));
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.6, $p3);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 1330796625);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(4, 1));
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(8, 1));
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} vslice_dummy_var_149 := printk.ref.i32.i32(.str.100, $i10, $i12);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(12, 1));
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(16, 1));
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} vslice_dummy_var_150 := printk.ref.i32.i32(.str.101, $i15, $i17);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(20, 1));
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(24, 1));
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.6, $p21);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} vslice_dummy_var_151 := printk.ref.i32.i32(.str.102, $i20, $i22);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(28, 1));
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.6, $p24);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(32, 1));
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.6, $p26);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} vslice_dummy_var_152 := printk.ref.i32.i32(.str.103, $i25, $i27);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(40, 1));
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.6, $p29);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(36, 1));
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.6, $p31);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} vslice_dummy_var_153 := printk.ref.i32.i32(.str.104, $i30, $i32);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(40, 1));
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.6, $p34);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i35);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(40, 1));
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p37, $i36);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(44, 1));
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.6, $p38);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} vslice_dummy_var_154 := printk.ref.i32(.str.105, $i39);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(24, 1));
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.6, $p41);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i43 := $udiv.i32($i42, 4);
    call {:si_unique_call 1533} {:cexpr "mode_offset"} boogie_si_record_i32($i43);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p2);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i43);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p44, $mul.ref($i45, 4));
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.6, $p46);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(0, 1));
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p49, $i47);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(24, 1));
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.6, $p50);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(0, 1));
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.6, $p53);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} vslice_dummy_var_155 := printk.ref.i32.i32(.str.106, $i51, $i54);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p2);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i43);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 1);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p56, $mul.ref($i58, 32));
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(8, 1));
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p61, $p59);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(0, 1));
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.6, $p63);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i65 := $slt.i32(0, $i64);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i65 == 1;
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i66 := 0;
    goto $bb8;

  $bb8:
    call $p68, $p69, $p70, $i71, $p72, $i73, $i74, $i75, $i66 := qxl_check_device_loop_$bb8($p0, $p63, $p68, $p69, $p70, $i71, $p72, $i73, $i74, $i75, $i66);
    goto $bb8_last;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(8, 1));
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.6, $p68);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i66);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p70, $mul.ref($i71, 1));
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} qxl_dump_mode($p0, $p72);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i66, 1);
    call {:si_unique_call 1536} {:cexpr "i"} boogie_si_record_i32($i73);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.6, $p63);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i73, $i74);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i75 == 1);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i66 := $i73;
    goto $bb10_dummy;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(0, 1));
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.6, $p6);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} drm_err.ref.i32(.str.99, $i7);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6260;
}



const qxl_bo_init: ref;

axiom qxl_bo_init == $sub.ref(0, 697761);

procedure qxl_bo_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation qxl_bo_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} $i1 := qxl_ttm_init($p0);
    call {:si_unique_call 1538} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const qxl_ring_create: ref;

axiom qxl_ring_create == $sub.ref(0, 698793);

procedure qxl_ring_create($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i1, $p5: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, assertsPassed;



implementation qxl_ring_create($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i1, $p5: ref) returns ($r: ref)
{
  var $p6: ref;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $p20: ref;
  var $p23: ref;
  var $p24: ref;
  var $p12: ref;
  var vslice_dummy_var_156: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1540} {:cexpr "qxl_ring_create:arg:element_size"} boogie_si_record_i32($i1);
    call {:si_unique_call 1541} {:cexpr "qxl_ring_create:arg:n_elements"} boogie_si_record_i32($i2);
    call {:si_unique_call 1542} {:cexpr "qxl_ring_create:arg:prod_notify"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i4);
    call {:si_unique_call 1543} {:cexpr "qxl_ring_create:arg:set_prod_notify"} boogie_si_record_i1($i4);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} $p8 := kmalloc(104, 208);
    goto SeqInstr_892, SeqInstr_893;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  SeqInstr_894:
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p9, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p14, $p0);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p9, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p15, $i1);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 104)), $mul.ref(12, 1));
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p16, $i2);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p9, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p17, $i3);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p18, $p5);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i7);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p9, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} vslice_dummy_var_156 := spinlock_check($p20);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} __raw_spin_lock_init($p24, .str.32, $p6);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $p12 := $p8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} qxl_ring_init_hdr($p9);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb3;

  SeqInstr_892:
    assume !assertsPassed;
    return;
}



const ldv_idr_init_113: ref;

axiom ldv_idr_init_113 == $sub.ref(0, 699825);

procedure ldv_idr_init_113($p0: ref);
  free requires assertsPassed;
  modifies $M.53, assertsPassed;



implementation ldv_idr_init_113($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} ldv_linux_lib_idr_idr_init_release_idr_of_qxl_device();
    goto SeqInstr_895, SeqInstr_896;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  SeqInstr_897:
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_895:
    assume !assertsPassed;
    return;
}



const ldv_idr_init_114: ref;

axiom ldv_idr_init_114 == $sub.ref(0, 700857);

procedure ldv_idr_init_114($p0: ref);
  free requires assertsPassed;
  modifies $M.75, assertsPassed;



implementation ldv_idr_init_114($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} ldv_linux_lib_idr_idr_init_surf_id_idr_of_qxl_device();
    goto SeqInstr_898, SeqInstr_899;

  SeqInstr_899:
    assume assertsPassed;
    goto SeqInstr_900;

  SeqInstr_900:
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_898:
    assume !assertsPassed;
    return;
}



const qxl_io_reset: ref;

axiom qxl_io_reset == $sub.ref(0, 701889);

procedure qxl_io_reset($p0: ref);
  free requires assertsPassed;



implementation qxl_io_reset($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, $p1);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 5);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} outb(0, $i3);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    return;
}



const qxl_irq_init: ref;

axiom qxl_irq_init == $sub.ref(0, 702921);

procedure qxl_irq_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation qxl_irq_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $i43: i32;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3568, 1));
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} __init_waitqueue_head($p6, .str.54, $p1);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3656, 1));
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} __init_waitqueue_head($p7, .str.55, $p2);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} __init_waitqueue_head($p8, .str.56, $p3);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3832, 1));
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} __init_work($p9, 0);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p10, 137438953408);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3832, 1)), $mul.ref(0, 1));
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p5);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.6;
    cmdloc_dummy_var_15 := $M.6;
    call {:si_unique_call 1560} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p13, $p14, 8, $zext.i32.i64(8), 0 == 1);
    $M.6 := cmdloc_dummy_var_16;
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3832, 1)), $mul.ref(32, 1));
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} lockdep_init_map($p16, .str.57, $p4, 0);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3832, 1)), $mul.ref(8, 1));
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} INIT_LIST_HEAD($p18);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3832, 1)), $mul.ref(24, 1));
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p20, qxl_client_monitors_config_work_func);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3548, 1));
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} atomic_set($p21, 0);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3552, 1));
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} atomic_set($p22, 0);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3556, 1));
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} atomic_set($p23, 0);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} atomic_set($p24, 0);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3564, 1));
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p25, 0);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.6, $p26);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 3144)), $mul.ref(1144, 1));
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.6, $p30);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 2976)), $mul.ref(1572, 1));
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.6, $p32);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} $i34 := drm_irq_install($p27, $i33);
    call {:si_unique_call 1568} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.6, $p35);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 5424)), $mul.ref(8, 1));
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p37, 39);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i34, 0);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 1570} {:cexpr "tmp"} boogie_si_record_i64($i41);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $r := $i43;
    return;

  $bb1:
    assume $i42 == 1;
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} drm_err.ref.i32(.str.58, $i34);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $i43 := 1;
    goto $bb3;
}



const setup_slot: ref;

axiom setup_slot == $sub.ref(0, 703953);

procedure setup_slot($p0: ref, $i1: i8, $i2: i64, $i3: i64) returns ($r: i8);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.55, assertsPassed;



implementation setup_slot($p0: ref, $i1: i8, $i2: i64, $i3: i64) returns ($r: i8)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var $i31: i8;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} {:cexpr "setup_slot:arg:slot_index_offset"} boogie_si_record_i8($i1);
    call {:si_unique_call 1573} {:cexpr "setup_slot:arg:start_phys_addr"} boogie_si_record_i64($i2);
    call {:si_unique_call 1574} {:cexpr "setup_slot:arg:end_phys_addr"} boogie_si_record_i64($i3);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1160)), $mul.ref(64, 1));
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.6, $p6);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i1);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i8, $i9);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    call {:si_unique_call 1575} {:cexpr "slot_index"} boogie_si_record_i8($i11);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3096, 1));
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i11);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p13, $mul.ref($i14, 32));
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref($i14, 32)), $mul.ref(8, 1));
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p16, $i2);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p13, $mul.ref($i14, 32)), $mul.ref(16, 1));
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p17, $i3);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i11);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} setup_hw_slot($p0, $i18, $p15);
    goto SeqInstr_901, SeqInstr_902;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  SeqInstr_903:
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 1160)), $mul.ref(68, 1));
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.6, $p21);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p13, $mul.ref($i14, 32)), $mul.ref(0, 1));
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p23, $i22);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i11);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3108, 1));
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.6, $p25);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $i28 := $shl.i32($i24, $i27);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    call {:si_unique_call 1577} {:cexpr "high_bits"} boogie_si_record_i64($i29);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p13, $mul.ref($i14, 32)), $mul.ref(0, 1));
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.6, $p30);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i64($i31);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $i33 := $or.i64($i29, $i32);
    call {:si_unique_call 1578} {:cexpr "high_bits"} boogie_si_record_i64($i33);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3108, 1));
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.6, $p34);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3107, 1));
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.6, $p37);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i36, $i39);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(64, $i40);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $i42 := $zext.i32.i64($i41);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i43 := $shl.i64($i33, $i42);
    call {:si_unique_call 1579} {:cexpr "high_bits"} boogie_si_record_i64($i43);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p13, $mul.ref($i14, 32)), $mul.ref(24, 1));
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p44, $i43);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_901:
    assume !assertsPassed;
    return;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 704985);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1581} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} $p5 := external_alloc();
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 706017);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 707049);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    return;
}



const qxl_gc_work: ref;

axiom qxl_gc_work == $sub.ref(0, 708081);

procedure qxl_gc_work($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.42, $M.52, $M.46, $CurrAddr, $M.41, $M.44, assertsPassed, $M.53, $M.43, $M.75, $M.36, $M.38, $M.39, $M.72, $M.35, $M.40, $M.37, $M.67, $M.68, $M.73, $M.74, $M.69, $M.70, $M.32, $M.49, $M.55, $M.71, $M.65, $M.54, $M.64;



implementation qxl_gc_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var vslice_dummy_var_157: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 5168), 5336));
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} vslice_dummy_var_157 := qxl_garbage_collect($p2);
    goto SeqInstr_904, SeqInstr_905;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  SeqInstr_906:
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_904:
    assume !assertsPassed;
    return;
}



const qxl_fb_init: ref;

axiom qxl_fb_init == $sub.ref(0, 709113);

procedure qxl_fb_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation qxl_fb_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5248, 1));
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} __init_work($p3, 0);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p4, 137438953408);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5248, 1)), $mul.ref(0, 1));
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.6;
    cmdloc_dummy_var_18 := $M.6;
    call {:si_unique_call 1589} cmdloc_dummy_var_19 := $memcpy.i8(cmdloc_dummy_var_17, cmdloc_dummy_var_18, $p7, $p8, 8, $zext.i32.i64(8), 0 == 1);
    $M.6 := cmdloc_dummy_var_19;
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5248, 1)), $mul.ref(32, 1));
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} lockdep_init_map($p10, .str.21, $p1, 0);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5248, 1)), $mul.ref(8, 1));
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} INIT_LIST_HEAD($p12);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5248, 1)), $mul.ref(24, 1));
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p14, qxl_fb_work);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const qxl_fb_work: ref;

axiom qxl_fb_work == $sub.ref(0, 710145);

procedure qxl_fb_work($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.72, $M.46, $M.38, $M.39, assertsPassed, $CurrAddr, $M.42, $M.52, $M.53, $M.49, $M.40, $M.44, $M.73, $M.74, $M.43, $M.41, $M.67, $M.68, $M.75, $M.37, $M.69, $M.70, $M.32, $M.71, $M.36, $M.64, $M.35, $M.54, $M.55, $M.65;



implementation qxl_fb_work($p0: ref)
{
  var $p1: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p20: ref;
  var $p21: ref;
  var $p57: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5248), 5336)), $mul.ref(3000, 1)), $mul.ref(24, 1));
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 528)), $mul.ref(328, 1));
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_118($p6);
    goto SeqInstr_907, SeqInstr_908;

  SeqInstr_908:
    assume assertsPassed;
    goto SeqInstr_909;

  SeqInstr_909:
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 528)), $mul.ref(400, 1)), $mul.ref(0, 1));
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p10, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 528)), $mul.ref(400, 1));
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i16, $i18);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 528)), $mul.ref(328, 1));
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} ldv_spin_unlock_irqrestore_113___0($p57, $u1);
    goto SeqInstr_925, SeqInstr_926;

  SeqInstr_926:
    assume assertsPassed;
    goto SeqInstr_927;

  SeqInstr_927:
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_925:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $p20, $p21 := $p13, $p9;
    goto $bb4;

  $bb4:
    call $p22, $p23, $i24, $i25, $p26, $i27, $i28, $p29, $i30, $i31, $p33, $p34, $p35, $p36, $p38, $p39, $p40, $p41, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $p51, $p52, $p54, $i55, $i56, $p20, $p21 := qxl_fb_work_loop_$bb4($p5, $i18, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $p29, $i30, $i31, $p33, $p34, $p35, $p36, $p38, $p39, $p40, $p41, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $p51, $p52, $p54, $i55, $i56, $p20, $p21);
    goto $bb4_last;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 528)), $mul.ref(328, 1));
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} ldv_spin_unlock_irqrestore_113___0($p22, $u1);
    goto SeqInstr_910, SeqInstr_911;

  SeqInstr_911:
    assume assertsPassed;
    goto SeqInstr_912;

  SeqInstr_912:
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p21, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.6, $p23);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 1);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p21, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.6, $p26);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p21, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.6, $p29);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 3);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 528)), $mul.ref(328, 1));
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_120($p47);
    goto SeqInstr_922, SeqInstr_923;

  SeqInstr_923:
    assume assertsPassed;
    goto SeqInstr_924;

  SeqInstr_924:
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p21, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} list_del($p48);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p21);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} kfree($p49);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.6, $p51);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p20, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, $i18);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i56 == 1);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb20:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $p20, $p21 := $p52, $p20;
    goto $bb20_dummy;

  SeqInstr_922:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 528)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.6, $p43);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p21, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} qxl_fb_imageblit_internal($p44, $p46);
    goto SeqInstr_919, SeqInstr_920;

  SeqInstr_920:
    assume assertsPassed;
    goto SeqInstr_921;

  SeqInstr_921:
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_919:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i28 == 1;
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 528)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.6, $p38);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p21, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} qxl_fb_copyarea_internal($p39, $p41);
    goto SeqInstr_916, SeqInstr_917;

  SeqInstr_917:
    assume assertsPassed;
    goto SeqInstr_918;

  SeqInstr_918:
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_916:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 528)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.6, $p33);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p21, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} qxl_fb_fillrect_internal($p34, $p36);
    goto SeqInstr_913, SeqInstr_914;

  SeqInstr_914:
    assume assertsPassed;
    goto SeqInstr_915;

  SeqInstr_915:
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_913:
    assume !assertsPassed;
    return;

  SeqInstr_910:
    assume !assertsPassed;
    return;

  SeqInstr_907:
    assume !assertsPassed;
    return;

  $bb20_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6474;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_118: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_118 == $sub.ref(0, 711177);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_118($p0: ref);
  free requires assertsPassed;
  modifies $M.72, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_118($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} ldv_linux_kernel_locking_spinlock_spin_lock_delayed_ops_lock_of_qxl_fbdev();
    goto SeqInstr_928, SeqInstr_929;

  SeqInstr_929:
    assume assertsPassed;
    goto SeqInstr_930;

  SeqInstr_930:
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_928:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_irqrestore_113___0: ref;

axiom ldv_spin_unlock_irqrestore_113___0 == $sub.ref(0, 712209);

procedure ldv_spin_unlock_irqrestore_113___0($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.72, assertsPassed;



implementation ldv_spin_unlock_irqrestore_113___0($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} {:cexpr "ldv_spin_unlock_irqrestore_113___0:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} ldv_linux_kernel_locking_spinlock_spin_unlock_delayed_ops_lock_of_qxl_fbdev();
    goto SeqInstr_931, SeqInstr_932;

  SeqInstr_932:
    assume assertsPassed;
    goto SeqInstr_933;

  SeqInstr_933:
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} spin_unlock_irqrestore($p0, $i1);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_931:
    assume !assertsPassed;
    return;
}



const qxl_fb_fillrect_internal: ref;

axiom qxl_fb_fillrect_internal == $sub.ref(0, 713241);

procedure qxl_fb_fillrect_internal($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $CurrAddr, $M.42, $M.52, $M.53, $M.49, $M.40, $M.44, assertsPassed, $M.43, $M.41, $M.67, $M.68, $M.75, $M.37, $M.72, $M.73, $M.74, $M.69, $M.70, $M.32, $M.71, $M.36, $M.64, $M.35, $M.54, $M.55, $M.65;



implementation qxl_fb_fillrect_internal($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $p34: ref;
  var $i35: i32;
  var $i33: i32;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i16;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var vslice_dummy_var_158: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 528)), $mul.ref(320, 1));
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    call {:si_unique_call 1608} {:cexpr "x"} boogie_si_record_i32($i10);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    call {:si_unique_call 1609} {:cexpr "y"} boogie_si_record_i32($i12);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    call {:si_unique_call 1610} {:cexpr "width"} boogie_si_record_i32($i14);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.6, $p15);
    call {:si_unique_call 1611} {:cexpr "height"} boogie_si_record_i32($i16);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(36, 1));
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.6, $p18);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i20 == 1);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(36, 1));
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p22);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 4);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.6, $p34);
    call {:si_unique_call 1613} {:cexpr "color"} boogie_si_record_i32($i35);
    assume {:verifier.code 0} true;
    $i33 := $i35;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p36, $i10);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i10, $i14);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p38, $i37);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p39, $i12);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i12, $i16);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p41, $i40);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.6, $p42);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 1);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.6, $p45);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} vslice_dummy_var_158 := printk.ref(.str.159);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i48 := 8;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p50, $p8);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p2);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.6;
    cmdloc_dummy_var_21 := $M.6;
    call {:si_unique_call 1615} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p52, $p53, 16, $zext.i32.i64(4), 0 == 1);
    $M.6 := cmdloc_dummy_var_22;
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p54, $i33);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p55, $i48);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} qxl_draw_fill($p3);
    goto SeqInstr_934, SeqInstr_935;

  SeqInstr_935:
    assume assertsPassed;
    goto SeqInstr_936;

  SeqInstr_936:
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_934:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i47 == 1;
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i48 := 8;
    goto $bb16;

  $bb7:
    assume $i44 == 1;
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i48 := 64;
    goto $bb16;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1560, 1));
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.6, $p25);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.6, $p28);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p27, $mul.ref($i30, 4));
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.6, $p31);
    call {:si_unique_call 1612} {:cexpr "color"} boogie_si_record_i32($i32);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb2;
}



const qxl_fb_copyarea_internal: ref;

axiom qxl_fb_copyarea_internal == $sub.ref(0, 714273);

procedure qxl_fb_copyarea_internal($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $M.52, $CurrAddr, $M.53, $M.49, $M.40, $M.44, assertsPassed, $M.43, $M.41, $M.67, $M.68, $M.75, $M.37, $M.72, $M.73, $M.74, $M.69, $M.70, $M.32, $M.71, $M.36, $M.64, $M.35, $M.54, $M.55, $M.65;



implementation qxl_fb_copyarea_internal($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 528)), $mul.ref(320, 1));
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.6, $p7);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.6, $p15);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.6, $p17);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} qxl_draw_copyarea($p6, $i8, $i10, $i12, $i14, $i16, $i18);
    goto SeqInstr_937, SeqInstr_938;

  SeqInstr_938:
    assume assertsPassed;
    goto SeqInstr_939;

  SeqInstr_939:
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_937:
    assume !assertsPassed;
    return;
}



const qxl_fb_imageblit_internal: ref;

axiom qxl_fb_imageblit_internal == $sub.ref(0, 715305);

procedure qxl_fb_imageblit_internal($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.42, $M.38, $M.39, $M.46, $M.73, $M.74, $M.52, $M.43, $M.40, $M.53, $M.49, $M.44, assertsPassed, $M.41, $M.67, $M.68, $M.75, $M.69, $M.70, $M.32, $M.37, $M.72, $M.71, $M.36, $M.64, $M.35, $M.54, $M.55, $M.65;



implementation qxl_fb_imageblit_internal($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} $p2 := $alloc($mul.ref(160, $zext.i32.i64(1)));
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 528)), $mul.ref(320, 1));
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} qxl_fb_image_init($p2, $p7, $p0, $p1);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} qxl_fb_imageblit_safe($p2);
    goto SeqInstr_940, SeqInstr_941;

  SeqInstr_941:
    assume assertsPassed;
    goto SeqInstr_942;

  SeqInstr_942:
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_940:
    assume !assertsPassed;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_120: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_120 == $sub.ref(0, 716337);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_120($p0: ref);
  free requires assertsPassed;
  modifies $M.72, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_120($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} ldv_linux_kernel_locking_spinlock_spin_lock_delayed_ops_lock_of_qxl_fbdev();
    goto SeqInstr_943, SeqInstr_944;

  SeqInstr_944:
    assume assertsPassed;
    goto SeqInstr_945;

  SeqInstr_945:
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_943:
    assume !assertsPassed;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 717369);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_delayed_ops_lock_of_qxl_fbdev: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_delayed_ops_lock_of_qxl_fbdev == $sub.ref(0, 718401);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_delayed_ops_lock_of_qxl_fbdev();
  free requires assertsPassed;
  modifies $M.72, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_delayed_ops_lock_of_qxl_fbdev()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $i0 := $M.72;
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_946, SeqInstr_947;

  SeqInstr_947:
    assume assertsPassed;
    goto SeqInstr_948;

  SeqInstr_948:
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i3 := $M.72;
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} ldv_assume($i5);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $M.72 := 2;
    call {:si_unique_call 1625} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_delayed_ops_lock_of_qxl_fbdev"} boogie_si_record_i32(2);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_946:
    assume !assertsPassed;
    return;
}



const qxl_fb_image_init: ref;

axiom qxl_fb_image_init == $sub.ref(0, 719433);

procedure qxl_fb_image_init($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_fb_image_init($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p4, $p1);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p2);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.6, $p21);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p26, 4);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p3);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p3);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.6;
    cmdloc_dummy_var_27 := $M.6;
    call {:si_unique_call 1627} cmdloc_dummy_var_28 := $memcpy.i8(cmdloc_dummy_var_26, cmdloc_dummy_var_27, $p30, $p31, 80, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_28;
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p25, 1);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(36, 1));
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p10, $i9);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 2);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 4);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 1608)), $mul.ref(1560, 1));
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.6;
    cmdloc_dummy_var_24 := $M.6;
    call {:si_unique_call 1626} cmdloc_dummy_var_25 := $memcpy.i8(cmdloc_dummy_var_23, cmdloc_dummy_var_24, $p18, $p20, 64, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_25;
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb4;
}



const qxl_fb_imageblit_safe: ref;

axiom qxl_fb_imageblit_safe == $sub.ref(0, 720465);

procedure qxl_fb_imageblit_safe($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.42, $M.38, $M.39, $M.46, $M.73, $M.74, $CurrAddr, $M.52, $M.43, $M.40, $M.53, $M.49, $M.44, assertsPassed, $M.41, $M.67, $M.68, $M.75, $M.69, $M.70, $M.32, $M.37, $M.72, $M.71, $M.36, $M.64, $M.35, $M.54, $M.55, $M.65;



implementation qxl_fb_imageblit_safe($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} qxl_draw_opaque_fb($p0, 0);
    goto SeqInstr_949, SeqInstr_950;

  SeqInstr_950:
    assume assertsPassed;
    goto SeqInstr_951;

  SeqInstr_951:
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_949:
    assume !assertsPassed;
    return;
}



const qxl_draw_opaque_fb: ref;

axiom qxl_draw_opaque_fb == $sub.ref(0, 721497);

procedure qxl_draw_opaque_fb($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.6, $M.42, $M.38, $M.39, $M.46, $M.73, $M.74, $CurrAddr, $M.52, $M.43, $M.40, $M.53, $M.49, $M.44, assertsPassed, $M.41, $M.67, $M.68, $M.75, $M.69, $M.70, $M.32, $M.37, $M.72, $M.71, $M.36, $M.64, $M.35, $M.54, $M.55, $M.65;



implementation qxl_draw_opaque_fb($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p129: ref;
  var $i40: i32;
  var $p130: ref;
  var $i131: i64;
  var $i132: i1;
  var $i36: i32;
  var $p133: ref;
  var $i31: i32;
  var $i134: i1;
  var $p135: ref;
  var vslice_dummy_var_159: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1633} {:cexpr "qxl_draw_opaque_fb:arg:stride"} boogie_si_record_i32($i1);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    call {:si_unique_call 1634} {:cexpr "x"} boogie_si_record_i32($i10);
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(4, 1));
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    call {:si_unique_call 1635} {:cexpr "y"} boogie_si_record_i32($i12);
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(8, 1));
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    call {:si_unique_call 1636} {:cexpr "width"} boogie_si_record_i32($i14);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(12, 1));
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.6, $p15);
    call {:si_unique_call 1637} {:cexpr "height"} boogie_si_record_i32($i16);
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(32, 1));
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.6, $p17);
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(24, 1));
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.6, $p19);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    call {:si_unique_call 1638} {:cexpr "depth"} boogie_si_record_i32($i21);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p5, $0.ref);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i1, 0);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i25 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} $i26 := alloc_drawable($p7, $p3);
    goto SeqInstr_952, SeqInstr_953;

  SeqInstr_953:
    assume assertsPassed;
    goto SeqInstr_954;

  SeqInstr_954:
    call {:si_unique_call 1641} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p3);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} $i29 := qxl_image_alloc_objects($p7, $p28, $p4, $i16, $i25);
    goto SeqInstr_955, SeqInstr_956;

  SeqInstr_956:
    assume assertsPassed;
    goto SeqInstr_957;

  SeqInstr_957:
    call {:si_unique_call 1643} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i21, 1);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.6, $p3);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} $i38 := qxl_release_reserve_list($p37, 1);
    goto SeqInstr_961, SeqInstr_962;

  SeqInstr_962:
    assume assertsPassed;
    goto SeqInstr_963;

  SeqInstr_963:
    call {:si_unique_call 1648} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p41, $i10);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i10, $i14);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p43, $i42);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p44, $i12);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i12, $i16);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p46, $i45);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.6, $p3);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} $i48 := make_drawable($p7, 0, 3, $p2, $p47);
    goto SeqInstr_964, SeqInstr_965;

  SeqInstr_965:
    assume assertsPassed;
    goto SeqInstr_966;

  SeqInstr_966:
    call {:si_unique_call 1650} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.6, $p3);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.73, $p4);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} $i53 := qxl_image_init($p7, $p51, $p52, $p18, 0, 0, $i14, $i16, $i21, $i25);
    goto SeqInstr_967, SeqInstr_968;

  SeqInstr_968:
    assume assertsPassed;
    goto SeqInstr_969;

  SeqInstr_969:
    call {:si_unique_call 1653} {:cexpr "ret"} boogie_si_record_i32($i53);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i21, 1);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i74 := $i53;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.6, $p3);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} $p76 := qxl_release_map($p7, $p75);
    goto SeqInstr_979, SeqInstr_980;

  SeqInstr_980:
    assume assertsPassed;
    goto SeqInstr_981;

  SeqInstr_981:
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p79, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p81, 0);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p83, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p85, $i16);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p87, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p89, 0);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p91, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(12, 1));
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p93, $i14);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p96, 8);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p98, $mul.ref(0, 56)), $mul.ref(26, 1));
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p99, 0);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p101, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p103, 0);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($add.ref($p105, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p108, 0);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($add.ref($p110, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p113, 0);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p115, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(16, 1));
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p117, 0);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.73, $p4);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.6, $p119);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} $i121 := qxl_bo_physical_address($p7, $p120, 0);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p124, $i121);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.6, $p3);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} qxl_release_unmap($p7, $p125, $p126);
    goto SeqInstr_982, SeqInstr_983;

  SeqInstr_983:
    assume assertsPassed;
    goto SeqInstr_984;

  SeqInstr_984:
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.6, $p3);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} vslice_dummy_var_159 := qxl_push_command_ring_release($p7, $p127, 1, 0);
    goto SeqInstr_985, SeqInstr_986;

  SeqInstr_986:
    assume assertsPassed;
    goto SeqInstr_987;

  SeqInstr_987:
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.6, $p3);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} qxl_release_fence_buffer_objects($p129);
    goto SeqInstr_988, SeqInstr_989;

  SeqInstr_989:
    assume assertsPassed;
    goto SeqInstr_990;

  SeqInstr_990:
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $i40 := $i74;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.6, $p5);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i131 := $p2i.ref.i64($p130);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i132 := $ne.i64($i131, 0);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i36 := $i40;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.73, $p4);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} qxl_image_free_objects($p7, $p133);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i31 := $i36;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i31, 0);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb35:
    assume $i134 == 1;
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.6, $p3);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} free_drawable($p7, $p135);
    goto SeqInstr_991, SeqInstr_992;

  SeqInstr_992:
    assume assertsPassed;
    goto SeqInstr_993;

  SeqInstr_993:
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_991:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i132 == 1;
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} qxl_bo_unref($p5);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_988:
    assume !assertsPassed;
    return;

  SeqInstr_985:
    assume !assertsPassed;
    return;

  SeqInstr_982:
    assume !assertsPassed;
    return;

  SeqInstr_979:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i57 == 1;
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.6, $p5);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.6, $p3);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} $i60 := qxl_palette_create_1bit($p58, $p59, $p0);
    call {:si_unique_call 1657} {:cexpr "ret"} boogie_si_record_i32($i60);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.73, $p4);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.6, $p62);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} $p64 := qxl_bo_kmap_atomic_page($p7, $p63, 0);
    goto SeqInstr_973, SeqInstr_974;

  SeqInstr_974:
    assume assertsPassed;
    goto SeqInstr_975;

  SeqInstr_975:
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.6, $p5);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} $i67 := qxl_bo_physical_address($p7, $p66, 0);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p65, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p70, $i67);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.73, $p4);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.6, $p72);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} qxl_bo_kunmap_atomic_page($p7, $p73, $p64);
    goto SeqInstr_976, SeqInstr_977;

  SeqInstr_977:
    assume assertsPassed;
    goto SeqInstr_978;

  SeqInstr_978:
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i74 := $i60;
    goto $bb31;

  SeqInstr_976:
    assume !assertsPassed;
    return;

  SeqInstr_973:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i54 == 1;
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.6, $p3);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} qxl_release_backoff_reserve_list($p55);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.6, $p3);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} qxl_release_free($p7, $p56);
    goto SeqInstr_970, SeqInstr_971;

  SeqInstr_971:
    assume assertsPassed;
    goto SeqInstr_972;

  SeqInstr_972:
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_970:
    assume !assertsPassed;
    return;

  SeqInstr_967:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i49 == 1;
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.6, $p3);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} qxl_release_backoff_reserve_list($p50);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i40 := $i48;
    goto $bb21;

  SeqInstr_964:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i39 == 1;
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i40 := $i38;
    goto $bb21;

  SeqInstr_961:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p3);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} $i34 := alloc_palette_object($p7, $p33, $p5);
    goto SeqInstr_958, SeqInstr_959;

  SeqInstr_959:
    assume assertsPassed;
    goto SeqInstr_960;

  SeqInstr_960:
    call {:si_unique_call 1645} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i36 := $i34;
    goto $bb16;

  SeqInstr_958:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    goto $bb10;

  SeqInstr_955:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_952:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i23 := $mul.i32($i21, $i14);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i24 := $sdiv.i32($i23, 8);
    call {:si_unique_call 1639} {:cexpr "stride"} boogie_si_record_i32($i24);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb3;
}



const alloc_drawable: ref;

axiom alloc_drawable == $sub.ref(0, 722529);

procedure alloc_drawable($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.42, $CurrAddr, $M.52, $M.53, $M.49, assertsPassed, $M.38, $M.39, $M.43, $M.37, $M.67, $M.68, $M.72, $M.73, $M.74, $M.69, $M.70, $M.32, $M.40, $M.44, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation alloc_drawable($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} $i2 := qxl_alloc_release_reserved($p0, 191, 0, $p1, $0.ref);
    goto SeqInstr_994, SeqInstr_995;

  SeqInstr_995:
    assume assertsPassed;
    goto SeqInstr_996;

  SeqInstr_996:
    call {:si_unique_call 1669} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_994:
    assume !assertsPassed;
    return;
}



const qxl_image_alloc_objects: ref;

axiom qxl_image_alloc_objects == $sub.ref(0, 723561);

procedure qxl_image_alloc_objects($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.73, $CurrAddr, assertsPassed;



implementation qxl_image_alloc_objects($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} {:cexpr "qxl_image_alloc_objects:arg:height"} boogie_si_record_i32($i3);
    call {:si_unique_call 1671} {:cexpr "qxl_image_alloc_objects:arg:stride"} boogie_si_record_i32($i4);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} $p5 := kmalloc(24, 208);
    goto SeqInstr_997, SeqInstr_998;

  SeqInstr_998:
    assume assertsPassed;
    goto SeqInstr_999;

  SeqInstr_999:
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} INIT_LIST_HEAD($p10);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} $i12 := qxl_alloc_bo_reserved($p0, $p1, 48, $p11);
    goto SeqInstr_1000, SeqInstr_1001;

  SeqInstr_1001:
    assume assertsPassed;
    goto SeqInstr_1002;

  SeqInstr_1002:
    call {:si_unique_call 1675} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i4, $i3);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 20);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} $i17 := qxl_allocate_chunk($p0, $p1, $p6, $i16);
    goto SeqInstr_1003, SeqInstr_1004;

  SeqInstr_1004:
    assume assertsPassed;
    goto SeqInstr_1005;

  SeqInstr_1005:
    call {:si_unique_call 1678} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $M.73 := $store.ref($M.73, $p2, $p5);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} qxl_bo_unref($p19);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p6);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} kfree($p20);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i9 := $i17;
    goto $bb3;

  SeqInstr_1003:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p6);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} kfree($p14);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $i9 := $i12;
    goto $bb3;

  SeqInstr_1000:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_997:
    assume !assertsPassed;
    return;
}



const alloc_palette_object: ref;

axiom alloc_palette_object == $sub.ref(0, 724593);

procedure alloc_palette_object($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $CurrAddr, assertsPassed;



implementation alloc_palette_object($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} $i3 := qxl_alloc_bo_reserved($p0, $p1, 18, $p2);
    goto SeqInstr_1006, SeqInstr_1007;

  SeqInstr_1007:
    assume assertsPassed;
    goto SeqInstr_1008;

  SeqInstr_1008:
    call {:si_unique_call 1682} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_1006:
    assume !assertsPassed;
    return;
}



const qxl_release_reserve_list: ref;

axiom qxl_release_reserve_list == $sub.ref(0, 725625);

procedure qxl_release_reserve_list($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.38, $M.39, $M.44, $M.75, $M.46, $M.42, assertsPassed, $M.37, $CurrAddr, $M.40, $M.41, $M.52, $M.53, $M.49, $M.43, $M.67, $M.68, $M.69, $M.70, $M.32, $M.72, $M.73, $M.74, $M.71, $M.54, $M.64, $M.36, $M.65, $M.55, $M.35;



implementation qxl_release_reserve_list($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p25: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1683} {:cexpr "qxl_release_reserve_list:arg:no_intr"} boogie_si_record_i1($i1);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} $i4 := list_is_singular($p3);
    call {:si_unique_call 1685} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(104, 1));
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i2);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i12 := $xor.i1($i11, 1);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} $i13 := ttm_eu_reserve_buffers($p7, $p8, $i12, $0.ref);
    call {:si_unique_call 1687} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i21, $i23);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $p25 := $p17;
    goto $bb11;

  $bb11:
    call $p27, $p28, $p29, $p30, $i31, $i32, $i33, $p38, $p39, $p40, $p42, $i43, $i44, $p25 := qxl_release_reserve_list_loop_$bb11($i23, $p27, $p28, $p29, $p30, $i31, $i32, $i33, $p38, $p39, $p40, $p42, $i43, $i44, $p25);
    goto $bb11_last;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p27);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} $i31 := qxl_release_validate_bo($p30);
    goto SeqInstr_1009, SeqInstr_1010;

  SeqInstr_1010:
    assume assertsPassed;
    goto SeqInstr_1011;

  SeqInstr_1011:
    call {:si_unique_call 1689} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i33 := $i31;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p25, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.6, $p38);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p40, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, $i23);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i44 == 1);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb16:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $p25 := $p39;
    goto $bb16_dummy;

  $bb13:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(104, 1));
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} ttm_eu_backoff_reservation($p34, $p35);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i6 := $i33;
    goto $bb3;

  SeqInstr_1009:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $i6 := $i13;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6955;
}



const make_drawable: ref;

axiom make_drawable == $sub.ref(0, 726657);

procedure make_drawable($p0: ref, $i1: i32, $i2: i8, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.42, $CurrAddr, $M.43, $M.46, $M.38, $M.39, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation make_drawable($p0: ref, $i1: i32, $i2: i8, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i9: i32;
  var $p38: ref;
  var $p40: ref;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} {:cexpr "make_drawable:arg:surface"} boogie_si_record_i32($i1);
    call {:si_unique_call 1692} {:cexpr "make_drawable:arg:type"} boogie_si_record_i8($i2);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} $p5 := qxl_release_map($p0, $p4);
    goto SeqInstr_1012, SeqInstr_1013;

  SeqInstr_1013:
    assume assertsPassed;
    goto SeqInstr_1014;

  SeqInstr_1014:
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(13, 1));
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p10, $i2);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p11, $i1);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(12, 1));
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p12, 1);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(14, 1));
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p13, 0);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p15, 0);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p17, 0);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p19, 0);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p21, 0);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p23, 0);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(68, 1)), $mul.ref(0, 4));
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p25, $sub.i32(0, 1));
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(68, 1)), $mul.ref(1, 4));
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p38, $sub.i32(0, 1));
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(68, 1)), $mul.ref(2, 4));
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p40, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p3);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.6, $p31);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 1160)), $mul.ref(48, 1));
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.6, $p33);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(64, 1));
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p35, $i34);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} qxl_release_unmap($p0, $p4, $p36);
    goto SeqInstr_1015, SeqInstr_1016;

  SeqInstr_1016:
    assume assertsPassed;
    goto SeqInstr_1017;

  SeqInstr_1017:
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_1015:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p3);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.6;
    cmdloc_dummy_var_30 := $M.6;
    call {:si_unique_call 1694} cmdloc_dummy_var_31 := $memcpy.i8(cmdloc_dummy_var_29, cmdloc_dummy_var_30, $p29, $p30, 16, $zext.i32.i64(4), 0 == 1);
    $M.6 := cmdloc_dummy_var_31;
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_1012:
    assume !assertsPassed;
    return;
}



const qxl_release_backoff_reserve_list: ref;

axiom qxl_release_backoff_reserve_list == $sub.ref(0, 727689);

procedure qxl_release_backoff_reserve_list($p0: ref);
  free requires assertsPassed;



implementation qxl_release_backoff_reserve_list($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} $i2 := list_is_singular($p1);
    call {:si_unique_call 1697} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(104, 1));
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} ttm_eu_backoff_reservation($p4, $p5);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_image_init: ref;

axiom qxl_image_init == $sub.ref(0, 728721);

procedure qxl_image_init($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $i6: i32, $i7: i32, $i8: i32, $i9: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.6, $CurrAddr, $M.43, $M.46, $M.38, $M.39, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation qxl_image_init($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $i6: i32, $i7: i32, $i8: i32, $i9: i32) returns ($r: i32)
{
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} {:cexpr "qxl_image_init:arg:x"} boogie_si_record_i32($i4);
    call {:si_unique_call 1700} {:cexpr "qxl_image_init:arg:y"} boogie_si_record_i32($i5);
    call {:si_unique_call 1701} {:cexpr "qxl_image_init:arg:width"} boogie_si_record_i32($i6);
    call {:si_unique_call 1702} {:cexpr "qxl_image_init:arg:height"} boogie_si_record_i32($i7);
    call {:si_unique_call 1703} {:cexpr "qxl_image_init:arg:depth"} boogie_si_record_i32($i8);
    call {:si_unique_call 1704} {:cexpr "qxl_image_init:arg:stride"} boogie_si_record_i32($i9);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i10 := $mul.i32($i5, $i9);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $i11 := $sdiv.i32($i8, 8);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i4, $i11);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i10, $i12);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p3, $mul.ref($i14, 1));
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} $i16 := qxl_image_init_helper($p0, $p1, $p2, $p15, $i6, $i7, $i8, 0, $i9);
    goto SeqInstr_1018, SeqInstr_1019;

  SeqInstr_1019:
    assume assertsPassed;
    goto SeqInstr_1020;

  SeqInstr_1020:
    call {:si_unique_call 1706} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  SeqInstr_1018:
    assume !assertsPassed;
    return;
}



const qxl_release_free: ref;

axiom qxl_release_free == $sub.ref(0, 729753);

procedure qxl_release_free($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.52, $M.6, $M.46, $CurrAddr, $M.44, assertsPassed, $M.53, $M.75, $M.36, $M.42, $M.72, $M.38, $M.39, $M.35, $M.40, $M.37, $M.41, $M.43, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.65, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64;



implementation qxl_release_free($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var vslice_dummy_var_160: i64;
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i2 := $M.45;
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 0);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(100, 1));
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3312, 1));
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} ldv_spin_lock_113($p13);
    goto SeqInstr_1024, SeqInstr_1025;

  SeqInstr_1025:
    assume assertsPassed;
    goto SeqInstr_1026;

  SeqInstr_1026:
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3192, 1));
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(88, 1));
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.6, $p15);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} ldv_idr_remove_117($p14, $i16);
    goto SeqInstr_1027, SeqInstr_1028;

  SeqInstr_1028:
    assume assertsPassed;
    goto SeqInstr_1029;

  SeqInstr_1029:
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3312, 1));
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} ldv_spin_unlock_115($p17);
    goto SeqInstr_1030, SeqInstr_1031;

  SeqInstr_1031:
    assume assertsPassed;
    goto SeqInstr_1032;

  SeqInstr_1032:
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} qxl_release_free_list($p1);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p1);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} kfree($p39);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} $i24 := list_empty($p23);
    call {:si_unique_call 1713} {:cexpr "tmp"} boogie_si_record_i32($i24);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    call {:si_unique_call 1714} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i26);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 1716} {:cexpr "tmp___0"} boogie_si_record_i64($i30);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i26, 0);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} vslice_dummy_var_160 := ldv__builtin_expect($i34, 0);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} qxl_release_free_list($p1);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} vslice_dummy_var_161 := fence_signal($p36);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} fence_put($p38);
    goto SeqInstr_1033, SeqInstr_1034;

  SeqInstr_1034:
    assume assertsPassed;
    goto SeqInstr_1035;

  SeqInstr_1035:
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_1033:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i31 == 1;
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} warn_slowpath_null(.str.68, 192);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_1030:
    assume !assertsPassed;
    return;

  SeqInstr_1027:
    assume !assertsPassed;
    return;

  SeqInstr_1024:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(100, 1));
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} qxl_surface_id_dealloc($p0, $i12);
    goto SeqInstr_1021, SeqInstr_1022;

  SeqInstr_1022:
    assume assertsPassed;
    goto SeqInstr_1023;

  SeqInstr_1023:
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_1021:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(88, 1));
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.6, $p4);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(92, 1));
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.6, $p6);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} qxl_io_log.ref.ref.i32.i32($p0, .str.67, $i5, $i7);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_palette_create_1bit: ref;

axiom qxl_palette_create_1bit == $sub.ref(0, 730785);

procedure qxl_palette_create_1bit($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.6, $M.74, $M.43, $CurrAddr;



implementation qxl_palette_create_1bit($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i27: i32;
  var $i28: i32;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, $p5);
    call {:si_unique_call 1725} {:cexpr "visual"} boogie_si_record_i32($i6);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p3);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} $i10 := qxl_bo_kmap($p0, $p9);
    call {:si_unique_call 1727} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.42, $p3);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $M.74 := $store.i16($M.74, $p12, 2);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.42, $p3);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $M.74 := $store.i64($M.74, $p14, $u1);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i6, 2);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i15 == 1);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i6, 4);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    $p29 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(16, 1));
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.6, $p29);
    call {:si_unique_call 1730} {:cexpr "fgcolor"} boogie_si_record_i32($i30);
    $p31 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(20, 1));
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.6, $p31);
    call {:si_unique_call 1731} {:cexpr "bgcolor"} boogie_si_record_i32($i32);
    assume {:verifier.code 0} true;
    $i27, $i28 := $i30, $i32;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.42, $p3);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(12, 1)), $mul.ref(0, 4));
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $M.74 := $store.i32($M.74, $p35, $i28);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.42, $p3);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 16)), $mul.ref(12, 1)), $mul.ref(1, 4));
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $M.74 := $store.i32($M.74, $p38, $i27);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} qxl_bo_kunmap($p0);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  $bb2:
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(16, 1));
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.6, $p17);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p8, $mul.ref($i19, 4));
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.6, $p20);
    call {:si_unique_call 1728} {:cexpr "fgcolor"} boogie_si_record_i32($i21);
    $p22 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(20, 1));
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p22);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p8, $mul.ref($i24, 4));
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.6, $p25);
    call {:si_unique_call 1729} {:cexpr "bgcolor"} boogie_si_record_i32($i26);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $i27, $i28 := $i21, $i26;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;
}



const qxl_image_free_objects: ref;

axiom qxl_image_free_objects == $sub.ref(0, 731817);

procedure qxl_image_free_objects($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.46, $M.6, $CurrAddr;



implementation qxl_image_free_objects($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p15: ref;
  var $p16: ref;
  var $p26: ref;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i11, $i13);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} qxl_bo_unref($p26);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p1);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} kfree($p27);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $p15, $p16 := $p8, $p4;
    goto $bb4;

  $bb4:
    call $p17, $p18, $p20, $p21, $p23, $i24, $i25, $p15, $p16 := qxl_image_free_objects_loop_$bb4($i13, $p17, $p18, $p20, $p21, $p23, $i24, $i25, $p15, $p16);
    goto $bb4_last;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} qxl_bo_unref($p17);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p16);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} kfree($p18);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, $i13);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $p15, $p16 := $p21, $p15;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7170;
}



const free_drawable: ref;

axiom free_drawable == $sub.ref(0, 732849);

procedure free_drawable($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.52, $M.6, $M.46, $CurrAddr, $M.44, assertsPassed, $M.53, $M.75, $M.36, $M.42, $M.72, $M.38, $M.39, $M.35, $M.40, $M.37, $M.41, $M.43, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.65, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64;



implementation free_drawable($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} qxl_release_free($p0, $p1);
    goto SeqInstr_1036, SeqInstr_1037;

  SeqInstr_1037:
    assume assertsPassed;
    goto SeqInstr_1038;

  SeqInstr_1038:
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1036:
    assume !assertsPassed;
    return;
}



const qxl_surface_id_dealloc: ref;

axiom qxl_surface_id_dealloc == $sub.ref(0, 733881);

procedure qxl_surface_id_dealloc($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.44, assertsPassed, $M.75;



implementation qxl_surface_id_dealloc($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} {:cexpr "qxl_surface_id_dealloc:arg:surface_id"} boogie_si_record_i32($i1);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} ldv_spin_lock_127($p2);
    goto SeqInstr_1039, SeqInstr_1040;

  SeqInstr_1040:
    assume assertsPassed;
    goto SeqInstr_1041;

  SeqInstr_1041:
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4592, 1));
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} ldv_idr_remove_136($p3, $i1);
    goto SeqInstr_1042, SeqInstr_1043;

  SeqInstr_1043:
    assume assertsPassed;
    goto SeqInstr_1044;

  SeqInstr_1044:
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} ldv_spin_unlock_129($p4);
    goto SeqInstr_1045, SeqInstr_1046;

  SeqInstr_1046:
    assume assertsPassed;
    goto SeqInstr_1047;

  SeqInstr_1047:
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1045:
    assume !assertsPassed;
    return;

  SeqInstr_1042:
    assume !assertsPassed;
    return;

  SeqInstr_1039:
    assume !assertsPassed;
    return;
}



const ldv_idr_remove_117: ref;

axiom ldv_idr_remove_117 == $sub.ref(0, 734913);

procedure ldv_idr_remove_117($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.53, assertsPassed;



implementation ldv_idr_remove_117($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} {:cexpr "ldv_idr_remove_117:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} ldv_linux_lib_idr_idr_remove_release_idr_of_qxl_device();
    goto SeqInstr_1048, SeqInstr_1049;

  SeqInstr_1049:
    assume assertsPassed;
    goto SeqInstr_1050;

  SeqInstr_1050:
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1048:
    assume !assertsPassed;
    return;
}



const qxl_release_free_list: ref;

axiom qxl_release_free_list == $sub.ref(0, 735945);

procedure qxl_release_free_list($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $CurrAddr;



implementation qxl_release_free_list($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} $i3 := list_empty($p2);
    call {:si_unique_call 1746} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p6, $p7, $p8, $p10, $p11, $p12, $p13, $p15, $p16, $i17, $i18 := qxl_release_free_list_loop_$bb4($p0, $p1, $p2, $p6, $p7, $p8, $p10, $p11, $p12, $p13, $p15, $p16, $i17, $i18);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1, $p13);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} qxl_bo_unref($p1);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} list_del($p15);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p8);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} kfree($p16);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} $i17 := list_empty($p2);
    call {:si_unique_call 1751} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const fence_signal: ref;

axiom fence_signal == $sub.ref(0, 736977);

procedure fence_signal($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fence_signal($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1752} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1753} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fence_put: ref;

axiom fence_put == $sub.ref(0, 738009);

procedure fence_put($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.36, assertsPassed, $CurrAddr, $M.42, $M.52, $M.72, $M.38, $M.39, $M.35, $M.40, $M.37, $M.41, $M.44, $M.53, $M.43, $M.75, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.65, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64;



implementation fence_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var vslice_dummy_var_162: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} vslice_dummy_var_162 := kref_put___1($p3, fence_release);
    goto SeqInstr_1051, SeqInstr_1052;

  SeqInstr_1052:
    assume assertsPassed;
    goto SeqInstr_1053;

  SeqInstr_1053:
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1051:
    assume !assertsPassed;
    return;
}



const fence_release: ref;

axiom fence_release == $sub.ref(0, 739041);

procedure fence_release($p0: ref);



const kref_put___1: ref;

axiom kref_put___1 == $sub.ref(0, 740073);

procedure kref_put___1($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.36, assertsPassed, $CurrAddr, $M.42, $M.52, $M.72, $M.38, $M.39, $M.35, $M.40, $M.37, $M.41, $M.44, $M.53, $M.43, $M.75, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.65, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64;



implementation kref_put___1($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} $i2 := kref_sub___1($p0, 1, $p1);
    goto SeqInstr_1054, SeqInstr_1055;

  SeqInstr_1055:
    assume assertsPassed;
    goto SeqInstr_1056;

  SeqInstr_1056:
    call {:si_unique_call 1756} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_1054:
    assume !assertsPassed;
    return;
}



const kref_sub___1: ref;

axiom kref_sub___1 == $sub.ref(0, 741105);

procedure kref_sub___1($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.36, assertsPassed, $CurrAddr, $M.42, $M.52, $M.72, $M.38, $M.39, $M.35, $M.40, $M.37, $M.41, $M.44, $M.53, $M.43, $M.75, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.65, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64;



implementation kref_sub___1($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_163: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} {:cexpr "kref_sub___1:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 1758} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1760} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} vslice_dummy_var_163 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} $i16 := atomic_sub_and_test($i1, $p15);
    call {:si_unique_call 1764} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 1765} devirtbounce.13($p2, $p0);
    goto SeqInstr_1057, SeqInstr_1058;

  SeqInstr_1058:
    assume assertsPassed;
    goto SeqInstr_1059;

  SeqInstr_1059:
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  SeqInstr_1057:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} warn_slowpath_null(.str.170, 71);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_sub_and_test: ref;

axiom atomic_sub_and_test == $sub.ref(0, 742137);

procedure atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} {:cexpr "atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} $i2 := ldv_linux_usb_dev_atomic_sub_and_test($i0, $p1);
    call {:si_unique_call 1768} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_linux_usb_dev_atomic_sub_and_test: ref;

axiom ldv_linux_usb_dev_atomic_sub_and_test == $sub.ref(0, 743169);

procedure ldv_linux_usb_dev_atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation ldv_linux_usb_dev_atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} {:cexpr "ldv_linux_usb_dev_atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, $p2);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, $i0);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p5, $i4);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.6, $p6);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;
}



const ldv_linux_lib_idr_idr_remove_release_idr_of_qxl_device: ref;

axiom ldv_linux_lib_idr_idr_remove_release_idr_of_qxl_device == $sub.ref(0, 744201);

procedure ldv_linux_lib_idr_idr_remove_release_idr_of_qxl_device();
  free requires assertsPassed;
  modifies $M.53, assertsPassed;



implementation ldv_linux_lib_idr_idr_remove_release_idr_of_qxl_device()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i0 := $M.53;
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} ldv_assert_linux_lib_idr__not_initialized($i2);
    goto SeqInstr_1060, SeqInstr_1061;

  SeqInstr_1061:
    assume assertsPassed;
    goto SeqInstr_1062;

  SeqInstr_1062:
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i3 := $M.53;
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 3);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} ldv_assert_linux_lib_idr__destroyed_before_usage($i5);
    goto SeqInstr_1063, SeqInstr_1064;

  SeqInstr_1064:
    assume assertsPassed;
    goto SeqInstr_1065;

  SeqInstr_1065:
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1772} {:cexpr "ldv_linux_lib_idr_idr_release_idr_of_qxl_device"} boogie_si_record_i32(2);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1063:
    assume !assertsPassed;
    return;

  SeqInstr_1060:
    assume !assertsPassed;
    return;
}



const ldv_idr_remove_136: ref;

axiom ldv_idr_remove_136 == $sub.ref(0, 745233);

procedure ldv_idr_remove_136($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.75, assertsPassed;



implementation ldv_idr_remove_136($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} {:cexpr "ldv_idr_remove_136:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} ldv_linux_lib_idr_idr_remove_surf_id_idr_of_qxl_device();
    goto SeqInstr_1066, SeqInstr_1067;

  SeqInstr_1067:
    assume assertsPassed;
    goto SeqInstr_1068;

  SeqInstr_1068:
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1066:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_idr_remove_surf_id_idr_of_qxl_device: ref;

axiom ldv_linux_lib_idr_idr_remove_surf_id_idr_of_qxl_device == $sub.ref(0, 746265);

procedure ldv_linux_lib_idr_idr_remove_surf_id_idr_of_qxl_device();
  free requires assertsPassed;
  modifies $M.75, assertsPassed;



implementation ldv_linux_lib_idr_idr_remove_surf_id_idr_of_qxl_device()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i0 := $M.75;
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} ldv_assert_linux_lib_idr__not_initialized($i2);
    goto SeqInstr_1069, SeqInstr_1070;

  SeqInstr_1070:
    assume assertsPassed;
    goto SeqInstr_1071;

  SeqInstr_1071:
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i3 := $M.75;
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 3);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} ldv_assert_linux_lib_idr__destroyed_before_usage($i5);
    goto SeqInstr_1072, SeqInstr_1073;

  SeqInstr_1073:
    assume assertsPassed;
    goto SeqInstr_1074;

  SeqInstr_1074:
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $M.75 := 2;
    call {:si_unique_call 1777} {:cexpr "ldv_linux_lib_idr_idr_surf_id_idr_of_qxl_device"} boogie_si_record_i32(2);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1072:
    assume !assertsPassed;
    return;

  SeqInstr_1069:
    assume !assertsPassed;
    return;
}



const qxl_image_init_helper: ref;

axiom qxl_image_init_helper == $sub.ref(0, 747297);

procedure qxl_image_init_helper($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $i6: i32, $i7: i32, $i8: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.6, $CurrAddr, $M.43, $M.46, $M.38, $M.39, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation qxl_image_init_helper($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $i6: i32, $i7: i32, $i8: i32) returns ($r: i32)
{
  var $i9: i32;
  var $i10: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i30: i32;
  var $p31: ref;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i46: i1;
  var $i48: i32;
  var $i49: i64;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $p62: ref;
  var $i63: i64;
  var $p64: ref;
  var $i65: i64;
  var $i66: i32;
  var $i67: i64;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $i71: i32;
  var $i72: i1;
  var $i47: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p78: ref;
  var $p80: ref;
  var $p82: ref;
  var $p84: ref;
  var $p86: ref;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i99: i32;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} {:cexpr "qxl_image_init_helper:arg:width"} boogie_si_record_i32($i4);
    call {:si_unique_call 1779} {:cexpr "qxl_image_init_helper:arg:height"} boogie_si_record_i32($i5);
    call {:si_unique_call 1780} {:cexpr "qxl_image_init_helper:arg:depth"} boogie_si_record_i32($i6);
    call {:si_unique_call 1781} {:cexpr "qxl_image_init_helper:arg:hash"} boogie_si_record_i32($i7);
    call {:si_unique_call 1782} {:cexpr "qxl_image_init_helper:arg:stride"} boogie_si_record_i32($i8);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i9 := $mul.i32($i4, $i6);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i10 := $sdiv.i32($i9, 8);
    call {:si_unique_call 1783} {:cexpr "linesize"} boogie_si_record_i32($i10);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    call {:si_unique_call 1784} {:cexpr "qxl_image_init_helper:arg:chunk_stride"} boogie_si_record_i32($i8);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} $p17 := qxl_bo_kmap_atomic_page($p0, $p16, 0);
    goto SeqInstr_1075, SeqInstr_1076;

  SeqInstr_1076:
    assume assertsPassed;
    goto SeqInstr_1077;

  SeqInstr_1077:
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i19 := $mul.i32($i5, $i8);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p20, $i19);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p21, 0);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p22, 0);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} qxl_bo_kunmap_atomic_page($p0, $p16, $p17);
    goto SeqInstr_1078, SeqInstr_1079;

  SeqInstr_1079:
    assume assertsPassed;
    goto SeqInstr_1080;

  SeqInstr_1080:
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i8, $i10);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32(0, $i5);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} qxl_bo_kunmap($p16);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.6, $p73);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} $p75 := qxl_bo_kmap_atomic_page($p0, $p74, 0);
    goto SeqInstr_1087, SeqInstr_1088;

  SeqInstr_1088:
    assume assertsPassed;
    goto SeqInstr_1089;

  SeqInstr_1089:
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p78, 0);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p80, 0);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(9, 1));
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p82, 0);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p84, $i4);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p86, $i5);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i6, 1);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i6, 24);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i6, 32);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} drm_err.ref(.str.172);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i99 := $sub.i32(0, 22);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $r := $i99;
    return;

  $bb48:
    assume $i89 == 1;
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p98, 8);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p102, 4);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p104, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p105, $i4);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p108, $i5);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p111, $i8);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p113, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p114, 0);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} $i115 := qxl_bo_physical_address($p0, $p16, 0);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p117, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p118, $i115);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} qxl_bo_kunmap_atomic_page($p0, $p74, $p75);
    goto SeqInstr_1096, SeqInstr_1097;

  SeqInstr_1097:
    assume assertsPassed;
    goto SeqInstr_1098;

  SeqInstr_1098:
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $i99 := 0;
    goto $bb54;

  SeqInstr_1096:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i88 == 1;
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p95, 7);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb40:
    assume $i87 == 1;
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p92, 2);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    goto $bb53;

  SeqInstr_1087:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i46 == 1;
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb24;

  $bb24:
    call $i48, $i49, $p50, $i51, $i52, $i53, $i57, $i58, $i59, $i60, $i61, $p62, $i63, $p64, $i65, $i66, $i67, $p68, $i69, $i70, $i54, $i55, $p56, $i71, $i72, $i47, cmdloc_dummy_var_35, cmdloc_dummy_var_36, cmdloc_dummy_var_37 := qxl_image_init_helper_loop_$bb24($p0, $p3, $i5, $i8, $i10, $p16, $i48, $i49, $p50, $i51, $i52, $i53, $i57, $i58, $i59, $i60, $i61, $p62, $i63, $p64, $i65, $i66, $i67, $p68, $i69, $i70, $i54, $i55, $p56, $i71, $i72, $i47, cmdloc_dummy_var_35, cmdloc_dummy_var_36, cmdloc_dummy_var_37);
    goto $bb24_last;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i48 := $mul.i32($i47, $i8);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p3, $mul.ref($i49, 1));
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $i51 := $mul.i32($i47, $i8);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, 20);
    call {:si_unique_call 1795} {:cexpr "out_offset"} boogie_si_record_i32($i52);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $i53 := $sgt.i32($i10, 0);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i47, 1);
    call {:si_unique_call 1804} {:cexpr "i"} boogie_si_record_i32($i71);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i71, $i5);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i72 == 1);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb37:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i47 := $i71;
    goto $bb37_dummy;

  $bb26:
    assume $i53 == 1;
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i54, $i55, $p56 := $i52, $i10, $p50;
    goto $bb29;

  $bb29:
    call $i57, $i58, $i59, $i60, $i61, $p62, $i63, $p64, $i65, $i66, $i67, $p68, $i69, $i70, $i54, $i55, $p56, cmdloc_dummy_var_35, cmdloc_dummy_var_36, cmdloc_dummy_var_37 := qxl_image_init_helper_loop_$bb29($p0, $p16, $i57, $i58, $i59, $i60, $i61, $p62, $i63, $p64, $i65, $i66, $i67, $p68, $i69, $i70, $i54, $i55, $p56, cmdloc_dummy_var_35, cmdloc_dummy_var_36, cmdloc_dummy_var_37);
    goto $bb29_last;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i54, $sub.i32(0, 4096));
    call {:si_unique_call 1796} {:cexpr "page_base"} boogie_si_record_i32($i57);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i54, 4095);
    call {:si_unique_call 1797} {:cexpr "page_offset___0"} boogie_si_record_i32($i58);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i59 := $sub.i32(4096, $i58);
    call {:si_unique_call 1798} {:cexpr "_min1___0"} boogie_si_record_i32($i59);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i59, $i55);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i60 == 1);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i61 := $i55;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} $p62 := qxl_bo_kmap_atomic_page($p0, $p16, $i57);
    goto SeqInstr_1090, SeqInstr_1091;

  SeqInstr_1091:
    assume assertsPassed;
    goto SeqInstr_1092;

  SeqInstr_1092:
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $i63 := $zext.i32.i64($i58);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p62, $mul.ref($i63, 1));
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i61);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.6;
    cmdloc_dummy_var_36 := $M.6;
    call {:si_unique_call 1800} cmdloc_dummy_var_37 := $memcpy.i8(cmdloc_dummy_var_35, cmdloc_dummy_var_36, $p64, $p56, $i65, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_37;
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} qxl_bo_kunmap_atomic_page($p0, $p16, $p62);
    goto SeqInstr_1093, SeqInstr_1094;

  SeqInstr_1094:
    assume assertsPassed;
    goto SeqInstr_1095;

  SeqInstr_1095:
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i66 := $sub.i32($i55, $i61);
    call {:si_unique_call 1802} {:cexpr "remain"} boogie_si_record_i32($i66);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i61);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p56, $mul.ref($i67, 1));
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i54, $i61);
    call {:si_unique_call 1803} {:cexpr "out_offset"} boogie_si_record_i32($i69);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i70 := $sgt.i32($i66, 0);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i70 == 1);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb34:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i54, $i55, $p56 := $i69, $i66, $p68;
    goto $bb34_dummy;

  SeqInstr_1093:
    assume !assertsPassed;
    return;

  SeqInstr_1090:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i60 == 1;
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $i61 := $i59;
    goto $bb33;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i8, $i8);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb3;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i25 := $mul.i32($i10, $i5);
    call {:si_unique_call 1787} {:cexpr "remain"} boogie_si_record_i32($i25);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i25, 0);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i27, $i28, $p29 := 0, $i25, $p3;
    goto $bb9;

  $bb9:
    call $i30, $p31, $i32, $p33, $p34, $p36, $i37, $i38, $i39, $i40, $i41, $p42, $i43, $i44, $i45, $i27, $i28, $p29, cmdloc_dummy_var_32, cmdloc_dummy_var_33, cmdloc_dummy_var_34 := qxl_image_init_helper_loop_$bb9($p0, $p16, $i30, $p31, $i32, $p33, $p34, $p36, $i37, $i38, $i39, $i40, $i41, $p42, $i43, $i44, $i45, $i27, $i28, $p29, cmdloc_dummy_var_32, cmdloc_dummy_var_33, cmdloc_dummy_var_34);
    goto $bb9_last;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i30 := $shl.i32($i27, 12);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} $p31 := qxl_bo_kmap_atomic_page($p0, $p16, $i30);
    goto SeqInstr_1081, SeqInstr_1082;

  SeqInstr_1082:
    assume assertsPassed;
    goto SeqInstr_1083;

  SeqInstr_1083:
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i27, 0);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $p36, $i37 := $p31, 4096;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, $i28);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i39 := $i28;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.6;
    cmdloc_dummy_var_33 := $M.6;
    call {:si_unique_call 1789} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p36, $p29, $i40, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_34;
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} qxl_bo_kunmap_atomic_page($p0, $p16, $p31);
    goto SeqInstr_1084, SeqInstr_1085;

  SeqInstr_1085:
    assume assertsPassed;
    goto SeqInstr_1086;

  SeqInstr_1086:
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i39);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p29, $mul.ref($i41, 1));
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32($i28, $i39);
    call {:si_unique_call 1791} {:cexpr "remain"} boogie_si_record_i32($i43);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i27, 1);
    call {:si_unique_call 1792} {:cexpr "page"} boogie_si_record_i32($i44);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i45 := $sgt.i32($i43, 0);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i45 == 1);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb17:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i27, $i28, $p29 := $i44, $i43, $p42;
    goto $bb17_dummy;

  SeqInstr_1084:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i38 == 1;
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $i39 := $i37;
    goto $bb16;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p31);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 24)), $mul.ref(24, 1));
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $p36, $i37 := $p34, 4076;
    goto $bb13;

  SeqInstr_1081:
    assume !assertsPassed;
    return;

  SeqInstr_1078:
    assume !assertsPassed;
    return;

  SeqInstr_1075:
    assume !assertsPassed;
    return;

  $bb34_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7401;

  $bb37_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7390;

  $bb17_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7341;
}



const ttm_eu_backoff_reservation: ref;

axiom ttm_eu_backoff_reservation == $sub.ref(0, 748329);

procedure ttm_eu_backoff_reservation($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ttm_eu_backoff_reservation($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    return;
}



const ttm_eu_reserve_buffers: ref;

axiom ttm_eu_reserve_buffers == $sub.ref(0, 749361);

procedure ttm_eu_reserve_buffers($p0: ref, $p1: ref, $i2: i1, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_eu_reserve_buffers($p0: ref, $p1: ref, $i2: i1, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1808} {:cexpr "ttm_eu_reserve_buffers:arg:arg2"} boogie_si_record_i1($i2);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1809} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1810} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const qxl_release_validate_bo: ref;

axiom qxl_release_validate_bo == $sub.ref(0, 750393);

procedure qxl_release_validate_bo($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.38, $M.39, $M.44, $M.75, $M.46, $M.42, assertsPassed, $M.37, $CurrAddr, $M.40, $M.41, $M.52, $M.53, $M.49, $M.43, $M.67, $M.68, $M.69, $M.70, $M.32, $M.72, $M.73, $M.74, $M.71, $M.54, $M.64, $M.36, $M.65, $M.55, $M.35;



implementation qxl_release_validate_bo($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(992, 1));
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, $p1);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(448, 1));
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} $i14 := reservation_object_reserve_shared($p13);
    call {:si_unique_call 1815} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1016, 1)), $mul.ref(8, 1));
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.6, $p17);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} $i22 := qxl_bo_check_id($p21, $p0);
    goto SeqInstr_1099, SeqInstr_1100;

  SeqInstr_1100:
    assume assertsPassed;
    goto SeqInstr_1101;

  SeqInstr_1101:
    call {:si_unique_call 1817} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $i10 := $i22;
    goto $bb5;

  SeqInstr_1099:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $i10 := $i14;
    goto $bb5;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1008, 1));
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.6, $p4);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} qxl_ttm_placement_from_domain($p0, $i5, 0);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(56, 1));
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} $i8 := ttm_bo_validate($p6, $p7, 1, 0);
    call {:si_unique_call 1813} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb5;
}



const reservation_object_reserve_shared: ref;

axiom reservation_object_reserve_shared == $sub.ref(0, 751425);

procedure reservation_object_reserve_shared($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reservation_object_reserve_shared($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1818} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1819} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const qxl_bo_check_id: ref;

axiom qxl_bo_check_id == $sub.ref(0, 752457);

procedure qxl_bo_check_id($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.38, $M.39, $M.44, $M.75, $M.46, $M.42, assertsPassed, $M.37, $CurrAddr, $M.40, $M.41, $M.52, $M.53, $M.49, $M.43, $M.67, $M.68, $M.69, $M.70, $M.32, $M.72, $M.73, $M.74, $M.71, $M.54, $M.64, $M.36, $M.65, $M.55, $M.35;



implementation qxl_bo_check_id($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1008, 1));
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, $p2);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, $p5);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} $i8 := qxl_surface_id_alloc($p0, $p1);
    goto SeqInstr_1102, SeqInstr_1103;

  SeqInstr_1103:
    assume assertsPassed;
    goto SeqInstr_1104;

  SeqInstr_1104:
    call {:si_unique_call 1821} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} $i11 := qxl_hw_surface_alloc($p0, $p1, $0.ref);
    goto SeqInstr_1105, SeqInstr_1106;

  SeqInstr_1106:
    assume assertsPassed;
    goto SeqInstr_1107;

  SeqInstr_1107:
    call {:si_unique_call 1823} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i10 := $i11;
    goto $bb8;

  SeqInstr_1105:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb8;

  SeqInstr_1102:
    assume !assertsPassed;
    return;
}



const qxl_surface_id_alloc: ref;

axiom qxl_surface_id_alloc == $sub.ref(0, 753489);

procedure qxl_surface_id_alloc($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.44, $M.75, assertsPassed, $M.37, $M.41, $M.46, $M.38, $M.39, $M.42, $CurrAddr, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, $M.40, $M.69, $M.70, $M.32, $M.53, $M.49, $M.43, $M.54, $M.71, $M.65, $M.55, $M.64, $M.36, $M.35;



implementation qxl_surface_id_alloc($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i1;
  var $i8: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i15: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i9: i32;
  var vslice_dummy_var_164: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb1;

  $bb1:
    call $i2, $p3, $p4, $i5, $p6, $i7, $i8, $p10, $p11, $p12, $i13, $i14, $i16, $p17, $p18, $p19, $i15, vslice_dummy_var_164 := qxl_surface_id_alloc_loop_$bb1($p0, $i2, $p3, $p4, $i5, $p6, $i7, $i8, $p10, $p11, $p12, $i13, $i14, $i16, $p17, $p18, $p19, $i15, vslice_dummy_var_164);
    goto $bb1_last;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} idr_preload(32);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} ldv_spin_lock_127($p3);
    goto SeqInstr_1108, SeqInstr_1109;

  SeqInstr_1109:
    assume assertsPassed;
    goto SeqInstr_1110;

  SeqInstr_1110:
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4592, 1));
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} $i5 := ldv_idr_alloc_128($p4, $0.ref, 1, 0, 0);
    goto SeqInstr_1111, SeqInstr_1112;

  SeqInstr_1112:
    assume assertsPassed;
    goto SeqInstr_1113;

  SeqInstr_1113:
    call {:si_unique_call 1827} {:cexpr "idr_ret"} boogie_si_record_i32($i5);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} ldv_spin_unlock_129($p6);
    goto SeqInstr_1114, SeqInstr_1115;

  SeqInstr_1115:
    assume assertsPassed;
    goto SeqInstr_1116;

  SeqInstr_1116:
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} idr_preload_end();
    goto SeqInstr_1117, SeqInstr_1118;

  SeqInstr_1118:
    assume assertsPassed;
    goto SeqInstr_1119;

  SeqInstr_1119:
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, 0);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $i8 := $i5;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1160)), $mul.ref(52, 1));
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.6, $p12);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i14 := $uge.i32($i5, $i13);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $i15 := $i5;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p21, $i15);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} ldv_spin_lock_127($p22);
    goto SeqInstr_1132, SeqInstr_1133;

  SeqInstr_1133:
    assume assertsPassed;
    goto SeqInstr_1134;

  SeqInstr_1134:
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4776, 1));
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p23, $i15);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} ldv_spin_unlock_129($p24);
    goto SeqInstr_1135, SeqInstr_1136;

  SeqInstr_1136:
    assume assertsPassed;
    goto SeqInstr_1137;

  SeqInstr_1137:
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_1135:
    assume !assertsPassed;
    return;

  SeqInstr_1132:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i2, 1);
    call {:si_unique_call 1830} {:cexpr "count"} boogie_si_record_i32($i16);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} ldv_spin_lock_127($p17);
    goto SeqInstr_1120, SeqInstr_1121;

  SeqInstr_1121:
    assume assertsPassed;
    goto SeqInstr_1122;

  SeqInstr_1122:
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4592, 1));
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} ldv_idr_remove_131($p18, $i5);
    goto SeqInstr_1123, SeqInstr_1124;

  SeqInstr_1124:
    assume assertsPassed;
    goto SeqInstr_1125;

  SeqInstr_1125:
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} ldv_spin_unlock_129($p19);
    goto SeqInstr_1126, SeqInstr_1127;

  SeqInstr_1127:
    assume assertsPassed;
    goto SeqInstr_1128;

  SeqInstr_1128:
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} vslice_dummy_var_164 := qxl_reap_surface_id($p0, 2);
    goto SeqInstr_1129, SeqInstr_1130;

  SeqInstr_1130:
    assume assertsPassed;
    goto SeqInstr_1131;

  SeqInstr_1131:
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $i2 := $i16;
    goto corral_source_split_7585_dummy;

  SeqInstr_1129:
    assume !assertsPassed;
    return;

  SeqInstr_1126:
    assume !assertsPassed;
    return;

  SeqInstr_1123:
    assume !assertsPassed;
    return;

  SeqInstr_1120:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb4;

  SeqInstr_1117:
    assume !assertsPassed;
    return;

  SeqInstr_1114:
    assume !assertsPassed;
    return;

  SeqInstr_1111:
    assume !assertsPassed;
    return;

  SeqInstr_1108:
    assume !assertsPassed;
    return;

  corral_source_split_7585_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7556;
}



const qxl_hw_surface_alloc: ref;

axiom qxl_hw_surface_alloc == $sub.ref(0, 754521);

procedure qxl_hw_surface_alloc($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.38, $M.39, $M.46, $M.42, $M.44, $CurrAddr, $M.40, assertsPassed, $M.52, $M.53, $M.49, $M.43, $M.41, $M.67, $M.68, $M.75, $M.69, $M.70, $M.32, $M.37, $M.72, $M.73, $M.74, $M.71, $M.64, $M.36, $M.35, $M.54, $M.55, $M.65;



implementation qxl_hw_surface_alloc($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i49: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $p57: ref;
  var $i58: i64;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $i70: i32;
  var $i71: i64;
  var $p73: ref;
  var $p74: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i64;
  var $i80: i64;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $p105: ref;
  var $i7: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1265, 1));
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.6, $p4);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} $i8 := qxl_alloc_surface_release_reserved($p0, 0, $0.ref, $p3);
    goto SeqInstr_1138, SeqInstr_1139;

  SeqInstr_1139:
    assume assertsPassed;
    goto SeqInstr_1140;

  SeqInstr_1140:
    call {:si_unique_call 1839} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p3);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} $i11 := qxl_release_reserve_list($p10, 1);
    goto SeqInstr_1141, SeqInstr_1142;

  SeqInstr_1142:
    assume assertsPassed;
    goto SeqInstr_1143;

  SeqInstr_1143:
    call {:si_unique_call 1841} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p3);
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} $p14 := qxl_release_map($p0, $p13);
    goto SeqInstr_1144, SeqInstr_1145;

  SeqInstr_1145:
    assume assertsPassed;
    goto SeqInstr_1146;

  SeqInstr_1146:
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p16, 0);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(0, 1));
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.6, $p18);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p22, $i19);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(4, 1));
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.6, $p24);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p28, $i25);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(8, 1));
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.6, $p30);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p34, $i31);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(12, 1));
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.6, $p36);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p40, $i37);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p2);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i42 == 1);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} $i84 := qxl_bo_physical_address($p0, $p1, 0);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p87, $i84);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.6, $p88);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p90, $i89);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.6, $p3);
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} qxl_release_unmap($p0, $p91, $p92);
    goto SeqInstr_1147, SeqInstr_1148;

  SeqInstr_1148:
    assume assertsPassed;
    goto SeqInstr_1149;

  SeqInstr_1149:
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.6, $p3);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p94, $p93);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.6, $p3);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} vslice_dummy_var_165 := qxl_push_command_ring_release($p0, $p95, 5, 0);
    goto SeqInstr_1150, SeqInstr_1151;

  SeqInstr_1151:
    assume assertsPassed;
    goto SeqInstr_1152;

  SeqInstr_1152:
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.6, $p3);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} qxl_release_fence_buffer_objects($p97);
    goto SeqInstr_1153, SeqInstr_1154;

  SeqInstr_1154:
    assume assertsPassed;
    goto SeqInstr_1155;

  SeqInstr_1155:
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1265, 1));
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p98, 1);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} ldv_spin_lock_127($p99);
    goto SeqInstr_1156, SeqInstr_1157;

  SeqInstr_1157:
    assume assertsPassed;
    goto SeqInstr_1158;

  SeqInstr_1158:
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4592, 1));
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p1);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.6, $p102);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} vslice_dummy_var_166 := idr_replace($p100, $p101, $i103);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} ldv_spin_unlock_129($p105);
    goto SeqInstr_1159, SeqInstr_1160;

  SeqInstr_1160:
    assume assertsPassed;
    goto SeqInstr_1161;

  SeqInstr_1161:
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_1159:
    assume !assertsPassed;
    return;

  SeqInstr_1156:
    assume !assertsPassed;
    return;

  SeqInstr_1153:
    assume !assertsPassed;
    return;

  SeqInstr_1150:
    assume !assertsPassed;
    return;

  SeqInstr_1147:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i42 == 1;
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1008, 1));
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.6, $p43);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 1);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i45 == 1);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3106, 1));
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.6, $p50);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $i49 := $i52;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3096, 1));
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.6, $p53);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i49);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p54, $mul.ref($i55, 32)), $mul.ref(24, 1));
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.6, $p57);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p61, $i58);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.6, $p64);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.6, $p66);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i68 := $shl.i64($i67, 12);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(36, 1));
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.6, $p69);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $i71 := $zext.i32.i64($i70);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(8, 1));
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.6, $p73);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($add.ref($p74, $mul.ref(0, 2592)), $mul.ref(32, 1)), $mul.ref($i71, 256)), $mul.ref(16, 1));
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.6, $p77);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i79 := $add.i64($i68, $i78);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $i80 := $or.i64($i65, $i79);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p83, $i80);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i45 == 1;
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3105, 1));
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.6, $p46);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $i49 := $i48;
    goto $bb15;

  SeqInstr_1144:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $i7 := $i11;
    goto $bb3;

  SeqInstr_1141:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $i7 := $i8;
    goto $bb3;

  SeqInstr_1138:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const ldv_idr_alloc_128: ref;

axiom ldv_idr_alloc_128 == $sub.ref(0, 755553);

procedure ldv_idr_alloc_128($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.75, assertsPassed;



implementation ldv_idr_alloc_128($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} {:cexpr "ldv_idr_alloc_128:arg:ldv_func_arg3"} boogie_si_record_i32($i2);
    call {:si_unique_call 1851} {:cexpr "ldv_idr_alloc_128:arg:ldv_func_arg4"} boogie_si_record_i32($i3);
    call {:si_unique_call 1852} {:cexpr "ldv_idr_alloc_128:arg:ldv_func_arg5"} boogie_si_record_i32($i4);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} ldv_linux_lib_idr_idr_alloc_surf_id_idr_of_qxl_device();
    goto SeqInstr_1162, SeqInstr_1163;

  SeqInstr_1163:
    assume assertsPassed;
    goto SeqInstr_1164;

  SeqInstr_1164:
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} $i5 := ldv_undef_int();
    call {:si_unique_call 1855} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_1162:
    assume !assertsPassed;
    return;
}



const idr_preload_end: ref;

axiom idr_preload_end == $sub.ref(0, 756585);

procedure idr_preload_end();
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $CurrAddr, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.43, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation idr_preload_end()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} devirtbounce.6(0);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} __preempt_count_sub___0(1);
    goto SeqInstr_1165, SeqInstr_1166;

  SeqInstr_1166:
    assume assertsPassed;
    goto SeqInstr_1167;

  SeqInstr_1167:
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1165:
    assume !assertsPassed;
    return;
}



const ldv_idr_remove_131: ref;

axiom ldv_idr_remove_131 == $sub.ref(0, 757617);

procedure ldv_idr_remove_131($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.75, assertsPassed;



implementation ldv_idr_remove_131($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} {:cexpr "ldv_idr_remove_131:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} ldv_linux_lib_idr_idr_remove_surf_id_idr_of_qxl_device();
    goto SeqInstr_1168, SeqInstr_1169;

  SeqInstr_1169:
    assume assertsPassed;
    goto SeqInstr_1170;

  SeqInstr_1170:
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1168:
    assume !assertsPassed;
    return;
}



const qxl_reap_surface_id: ref;

axiom qxl_reap_surface_id == $sub.ref(0, 758649);

procedure qxl_reap_surface_id($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.37, $M.44, assertsPassed, $M.75, $M.6, $M.41, $M.38, $M.39, $M.40, $CurrAddr, $M.46, $M.42, $M.54, $M.65, $M.55, $M.52, $M.53, $M.49, $M.43, $M.67, $M.68, $M.69, $M.70, $M.32, $M.72, $M.73, $M.74, $M.71, $M.64, $M.36, $M.35;



implementation qxl_reap_surface_id($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i8;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p31: ref;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i30: i32;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i17: i32;
  var $i18: i32;
  var $i46: i32;
  var $i16: i32;
  var $i39: i32;
  var $i47: i1;
  var $i49: i1;
  var $i48: i32;
  var $p50: ref;
  var $i51: i1;
  var vslice_dummy_var_167: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} {:cexpr "qxl_reap_surface_id:arg:max_to_reap"} boogie_si_record_i32($i1);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4784, 1));
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} ldv_mutex_lock_146($p2);
    goto SeqInstr_1171, SeqInstr_1172;

  SeqInstr_1172:
    assume assertsPassed;
    goto SeqInstr_1173;

  SeqInstr_1173:
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $i3, $i4 := 0, 0;
    goto $bb1;

  $bb1:
    call $i3, $i4, $p5, $p6, $i7, $i8, $p9, $p10, $p11, $p12, $i13, $i14, $i15, $p19, $p20, $p21, $i22, $i23, $p24, $p25, $p26, $p27, $i28, $i29, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i30, $i40, $p41, $p42, $i43, $i44, $i45, $i17, $i18, $i46, $i16, $i39, $i47, $i49, $i48 := qxl_reap_surface_id_loop_$bb1($p0, $i1, $i3, $i4, $p5, $p6, $i7, $i8, $p9, $p10, $p11, $p12, $i13, $i14, $i15, $p19, $p20, $p21, $i22, $i23, $p24, $p25, $p26, $p27, $i28, $i29, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i30, $i40, $p41, $p42, $i43, $i44, $i45, $i17, $i18, $i46, $i16, $i39, $i47, $i49, $i48);
    goto $bb1_last;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} ldv_spin_lock_127($p5);
    goto SeqInstr_1174, SeqInstr_1175;

  SeqInstr_1175:
    assume assertsPassed;
    goto SeqInstr_1176;

  SeqInstr_1176:
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4776, 1));
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.6, $p6);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 1);
    call {:si_unique_call 1863} {:cexpr "start"} boogie_si_record_i32($i8);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} ldv_spin_unlock_129($p9);
    goto SeqInstr_1177, SeqInstr_1178;

  SeqInstr_1178:
    assume assertsPassed;
    goto SeqInstr_1179;

  SeqInstr_1179:
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1160)), $mul.ref(52, 1));
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.6, $p12);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i8, $i13);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $i15 := $ult.i32($i8, $i14);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $i16 := $i3;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i39 := $i16;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i39, 0);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $i48 := $i39;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4784, 1));
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} ldv_mutex_unlock_152($p50);
    goto SeqInstr_1192, SeqInstr_1193;

  SeqInstr_1193:
    assume assertsPassed;
    goto SeqInstr_1194;

  SeqInstr_1194:
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i48, 0);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb27:
    assume $i51 == 1;
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} usleep_range(500, 1000);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} vslice_dummy_var_167 := qxl_queue_garbage_collect($p0, 1);
    goto SeqInstr_1195, SeqInstr_1196;

  SeqInstr_1196:
    assume assertsPassed;
    goto SeqInstr_1197;

  SeqInstr_1197:
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_1195:
    assume !assertsPassed;
    return;

  SeqInstr_1192:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i47 == 1;
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i8.i1($i4);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $i48 := $i39;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i3, $i4 := $i39, 1;
    goto $bb25_dummy;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb23;

  $bb2:
    assume $i15 == 1;
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $i17, $i18 := $i3, $i8;
    goto $bb5;

  $bb5:
    call $p19, $p20, $p21, $i22, $i23, $p24, $p25, $p26, $p27, $i28, $i29, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i30, $i40, $p41, $p42, $i43, $i44, $i45, $i17, $i18, $i46 := qxl_reap_surface_id_loop_$bb5($p0, $i1, $i4, $i8, $p10, $p19, $p20, $p21, $i22, $i23, $p24, $p25, $p26, $p27, $i28, $i29, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i30, $i40, $p41, $p42, $i43, $i44, $i45, $i17, $i18, $i46);
    goto $bb5_last;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 1160)), $mul.ref(52, 1));
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.6, $p21);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $i23 := $urem.i32($i18, $i22);
    call {:si_unique_call 1865} {:cexpr "surfid"} boogie_si_record_i32($i23);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} ldv_spin_lock_127($p24);
    goto SeqInstr_1180, SeqInstr_1181;

  SeqInstr_1181:
    assume assertsPassed;
    goto SeqInstr_1182;

  SeqInstr_1182:
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4592, 1));
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} $p26 := ldv_idr_find_150($p25, $i23);
    goto SeqInstr_1183, SeqInstr_1184;

  SeqInstr_1184:
    assume assertsPassed;
    goto SeqInstr_1185;

  SeqInstr_1185:
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} ldv_spin_unlock_129($p27);
    goto SeqInstr_1186, SeqInstr_1187;

  SeqInstr_1187:
    assume assertsPassed;
    goto SeqInstr_1188;

  SeqInstr_1188:
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p26);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p26);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i4);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} $i33 := qxl_reap_surf($p0, $p31, $i32);
    goto SeqInstr_1189, SeqInstr_1190;

  SeqInstr_1190:
    assume assertsPassed;
    goto SeqInstr_1191;

  SeqInstr_1191:
    call {:si_unique_call 1871} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i36 := $i17;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $i37 := $sge.i32($i36, $i1);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $i38 := $i36;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i30 := $i36;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i18, 1);
    call {:si_unique_call 1869} {:cexpr "i"} boogie_si_record_i32($i40);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.6, $p10);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 1160)), $mul.ref(52, 1));
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.6, $p42);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i8, $i43);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $i45 := $ult.i32($i40, $i44);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $i46 := $i30;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i16 := $i46;
    goto $bb4;

  $bb18:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i17, $i18 := $i30, $i40;
    goto $bb18_dummy;

  $bb14:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb16;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i17, 1);
    call {:si_unique_call 1872} {:cexpr "num_reaped"} boogie_si_record_i32($i35);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb13;

  SeqInstr_1189:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $i30 := $i17;
    goto $bb9;

  SeqInstr_1186:
    assume !assertsPassed;
    return;

  SeqInstr_1183:
    assume !assertsPassed;
    return;

  SeqInstr_1180:
    assume !assertsPassed;
    return;

  SeqInstr_1177:
    assume !assertsPassed;
    return;

  SeqInstr_1174:
    assume !assertsPassed;
    return;

  SeqInstr_1171:
    assume !assertsPassed;
    return;

  $bb18_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7758;

  $bb25_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7741;
}



const ldv_mutex_lock_146: ref;

axiom ldv_mutex_lock_146 == $sub.ref(0, 759681);

procedure ldv_mutex_lock_146($p0: ref);
  free requires assertsPassed;
  modifies $M.37, assertsPassed;



implementation ldv_mutex_lock_146($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} ldv_linux_kernel_locking_mutex_mutex_lock_surf_evict_mutex_of_qxl_device($p0);
    goto SeqInstr_1198, SeqInstr_1199;

  SeqInstr_1199:
    assume assertsPassed;
    goto SeqInstr_1200;

  SeqInstr_1200:
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1198:
    assume !assertsPassed;
    return;
}



const ldv_idr_find_150: ref;

axiom ldv_idr_find_150 == $sub.ref(0, 760713);

procedure ldv_idr_find_150($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.75, assertsPassed;



implementation ldv_idr_find_150($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} {:cexpr "ldv_idr_find_150:arg:id"} boogie_si_record_i32($i1);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} ldv_linux_lib_idr_idr_find_surf_id_idr_of_qxl_device();
    goto SeqInstr_1201, SeqInstr_1202;

  SeqInstr_1202:
    assume assertsPassed;
    goto SeqInstr_1203;

  SeqInstr_1203:
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} $p2 := ldv_undef_ptr();
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_1201:
    assume !assertsPassed;
    return;
}



const qxl_reap_surf: ref;

axiom qxl_reap_surf == $sub.ref(0, 761745);

procedure qxl_reap_surf($p0: ref, $p1: ref, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.37, $M.6, assertsPassed, $M.38, $M.39, $M.40, $CurrAddr, $M.46, $M.44, $M.42, $M.54, $M.65, $M.55, $M.52, $M.53, $M.49, $M.43, $M.41, $M.67, $M.68, $M.69, $M.70, $M.32, $M.72, $M.73, $M.74, $M.71, $M.64, $M.36, $M.75, $M.35;



implementation qxl_reap_surf($p0: ref, $p1: ref, $i2: i1) returns ($r: i32)
{
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1880} {:cexpr "qxl_reap_surf:arg:stall"} boogie_si_record_i1($i2);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} $i4 := qxl_bo_reserve___1($p1, 0);
    goto SeqInstr_1204, SeqInstr_1205;

  SeqInstr_1205:
    assume assertsPassed;
    goto SeqInstr_1206;

  SeqInstr_1206:
    call {:si_unique_call 1882} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, $sub.i32(0, 16));
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i3);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i3);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i13 := $xor.i1($i12, 1);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} $i14 := ttm_bo_wait($p9, 1, 1, $i13);
    call {:si_unique_call 1885} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i3);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i14, $sub.i32(0, 16));
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} qxl_surface_evict_locked($p0, $p1, 1);
    goto SeqInstr_1216, SeqInstr_1217;

  SeqInstr_1217:
    assume assertsPassed;
    goto SeqInstr_1218;

  SeqInstr_1218:
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} qxl_bo_unreserve___1($p1);
    goto SeqInstr_1219, SeqInstr_1220;

  SeqInstr_1220:
    assume assertsPassed;
    goto SeqInstr_1221;

  SeqInstr_1221:
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_1219:
    assume !assertsPassed;
    return;

  SeqInstr_1216:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} qxl_bo_unreserve___1($p1);
    goto SeqInstr_1213, SeqInstr_1214;

  SeqInstr_1214:
    assume assertsPassed;
    goto SeqInstr_1215;

  SeqInstr_1215:
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 16);
    goto $bb3;

  SeqInstr_1213:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4784, 1));
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} ldv_mutex_lock_145($p16);
    goto SeqInstr_1210, SeqInstr_1211;

  SeqInstr_1211:
    assume assertsPassed;
    goto SeqInstr_1212;

  SeqInstr_1212:
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_1210:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4784, 1));
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} ldv_mutex_unlock_144($p8);
    goto SeqInstr_1207, SeqInstr_1208;

  SeqInstr_1208:
    assume assertsPassed;
    goto SeqInstr_1209;

  SeqInstr_1209:
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_1207:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 16);
    goto $bb3;

  SeqInstr_1204:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_152: ref;

axiom ldv_mutex_unlock_152 == $sub.ref(0, 762777);

procedure ldv_mutex_unlock_152($p0: ref);
  free requires assertsPassed;
  modifies $M.37, assertsPassed;



implementation ldv_mutex_unlock_152($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} ldv_linux_kernel_locking_mutex_mutex_unlock_surf_evict_mutex_of_qxl_device($p0);
    goto SeqInstr_1222, SeqInstr_1223;

  SeqInstr_1223:
    assume assertsPassed;
    goto SeqInstr_1224;

  SeqInstr_1224:
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1222:
    assume !assertsPassed;
    return;
}



const usleep_range: ref;

axiom usleep_range == $sub.ref(0, 763809);

procedure usleep_range($i0: i64, $i1: i64);
  free requires assertsPassed;



implementation usleep_range($i0: i64, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} {:cexpr "usleep_range:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1892} {:cexpr "usleep_range:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    return;
}



const qxl_bo_reserve___1: ref;

axiom qxl_bo_reserve___1 == $sub.ref(0, 764841);

procedure qxl_bo_reserve___1($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation qxl_bo_reserve___1($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1893} {:cexpr "qxl_bo_reserve___1:arg:no_wait"} boogie_si_record_i1($i1);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i2);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} $i5 := ttm_bo_reserve___1($p3, 1, $i4, 0, $0.ref);
    goto SeqInstr_1225, SeqInstr_1226;

  SeqInstr_1226:
    assume assertsPassed;
    goto SeqInstr_1227;

  SeqInstr_1227:
    call {:si_unique_call 1895} {:cexpr "r"} boogie_si_record_i32($i5);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1897} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, $sub.i32(0, 512));
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i20 := $i5;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1016, 1)), $mul.ref(8, 1));
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 5336)), $mul.ref(0, 1));
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} dev_err.ref.ref.ref($p19, .str.113, $p0);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_1225:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_144: ref;

axiom ldv_mutex_unlock_144 == $sub.ref(0, 765873);

procedure ldv_mutex_unlock_144($p0: ref);
  free requires assertsPassed;
  modifies $M.37, assertsPassed;



implementation ldv_mutex_unlock_144($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} ldv_linux_kernel_locking_mutex_mutex_unlock_surf_evict_mutex_of_qxl_device($p0);
    goto SeqInstr_1228, SeqInstr_1229;

  SeqInstr_1229:
    assume assertsPassed;
    goto SeqInstr_1230;

  SeqInstr_1230:
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1228:
    assume !assertsPassed;
    return;
}



const ttm_bo_wait: ref;

axiom ttm_bo_wait == $sub.ref(0, 766905);

procedure ttm_bo_wait($p0: ref, $i1: i1, $i2: i1, $i3: i1) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_wait($p0: ref, $i1: i1, $i2: i1, $i3: i1) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1900} {:cexpr "ttm_bo_wait:arg:arg1"} boogie_si_record_i1($i1);
    call {:si_unique_call 1901} {:cexpr "ttm_bo_wait:arg:arg2"} boogie_si_record_i1($i2);
    call {:si_unique_call 1902} {:cexpr "ttm_bo_wait:arg:arg3"} boogie_si_record_i1($i3);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1903} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1904} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_mutex_lock_145: ref;

axiom ldv_mutex_lock_145 == $sub.ref(0, 767937);

procedure ldv_mutex_lock_145($p0: ref);
  free requires assertsPassed;
  modifies $M.37, assertsPassed;



implementation ldv_mutex_lock_145($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} ldv_linux_kernel_locking_mutex_mutex_lock_surf_evict_mutex_of_qxl_device($p0);
    goto SeqInstr_1231, SeqInstr_1232;

  SeqInstr_1232:
    assume assertsPassed;
    goto SeqInstr_1233;

  SeqInstr_1233:
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1231:
    assume !assertsPassed;
    return;
}



const qxl_bo_unreserve___1: ref;

axiom qxl_bo_unreserve___1 == $sub.ref(0, 768969);

procedure qxl_bo_unreserve___1($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation qxl_bo_unreserve___1($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} ttm_bo_unreserve___1($p1);
    goto SeqInstr_1234, SeqInstr_1235;

  SeqInstr_1235:
    assume assertsPassed;
    goto SeqInstr_1236;

  SeqInstr_1236:
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1234:
    assume !assertsPassed;
    return;
}



const ttm_bo_unreserve___1: ref;

axiom ttm_bo_unreserve___1 == $sub.ref(0, 770001);

procedure ttm_bo_unreserve___1($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ttm_bo_unreserve___1($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(56, 1)), $mul.ref(40, 1));
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, $p2);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 2097152);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} __ttm_bo_unreserve($p0);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 592)), $mul.ref(480, 1));
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} ldv_spin_lock_108($p8);
    goto SeqInstr_1237, SeqInstr_1238;

  SeqInstr_1238:
    assume assertsPassed;
    goto SeqInstr_1239;

  SeqInstr_1239:
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} ttm_bo_add_to_lru($p0);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 592)), $mul.ref(480, 1));
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} ldv_spin_unlock_109($p11);
    goto SeqInstr_1240, SeqInstr_1241;

  SeqInstr_1241:
    assume assertsPassed;
    goto SeqInstr_1242;

  SeqInstr_1242:
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1240:
    assume !assertsPassed;
    return;

  SeqInstr_1237:
    assume !assertsPassed;
    return;
}



const ttm_bo_reserve___1: ref;

axiom ttm_bo_reserve___1 == $sub.ref(0, 771033);

procedure ttm_bo_reserve___1($p0: ref, $i1: i1, $i2: i1, $i3: i1, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ttm_bo_reserve___1($p0: ref, $i1: i1, $i2: i1, $i3: i1, $p4: ref) returns ($r: i32)
{
  var $i5: i8;
  var $i6: i8;
  var $i7: i8;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var vslice_dummy_var_168: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i1);
    call {:si_unique_call 1911} {:cexpr "ttm_bo_reserve___1:arg:interruptible"} boogie_si_record_i1($i1);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i2);
    call {:si_unique_call 1912} {:cexpr "ttm_bo_reserve___1:arg:no_wait"} boogie_si_record_i1($i2);
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i3);
    call {:si_unique_call 1913} {:cexpr "ttm_bo_reserve___1:arg:use_ticket"} boogie_si_record_i1($i3);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} $i10 := atomic_read($p9);
    call {:si_unique_call 1915} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 1916} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1918} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} vslice_dummy_var_168 := ldv__builtin_expect($i20, 0);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i5);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i6);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i7);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} $i25 := __ttm_bo_reserve___1($p0, $i22, $i23, $i24, $p4);
    goto SeqInstr_1243, SeqInstr_1244;

  SeqInstr_1244:
    assume assertsPassed;
    goto SeqInstr_1245;

  SeqInstr_1245:
    call {:si_unique_call 1922} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} $i29 := ldv__builtin_expect($i28, 1);
    call {:si_unique_call 1924} {:cexpr "tmp___1"} boogie_si_record_i64($i29);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} ttm_bo_del_sub_from_lru($p0);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_1243:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} warn_slowpath_null(.str.114, 855);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __ttm_bo_reserve___1: ref;

axiom __ttm_bo_reserve___1 == $sub.ref(0, 772065);

procedure __ttm_bo_reserve___1($p0: ref, $i1: i1, $i2: i1, $i3: i1, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation __ttm_bo_reserve___1($p0: ref, $i1: i1, $i2: i1, $i3: i1, $p4: ref) returns ($r: i32)
{
  var $i5: i8;
  var $i6: i8;
  var $i7: i1;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i8;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i35: i32;
  var $i40: i1;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i1);
    call {:si_unique_call 1926} {:cexpr "__ttm_bo_reserve___1:arg:interruptible"} boogie_si_record_i1($i1);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i2);
    call {:si_unique_call 1927} {:cexpr "__ttm_bo_reserve___1:arg:no_wait"} boogie_si_record_i1($i2);
    call {:si_unique_call 1928} {:cexpr "__ttm_bo_reserve___1:arg:use_ticket"} boogie_si_record_i1($i3);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i5);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(448, 1));
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.6, $p36);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} $i39 := ww_mutex_lock___1($p38, $p4);
    goto SeqInstr_1252, SeqInstr_1253;

  SeqInstr_1253:
    assume assertsPassed;
    goto SeqInstr_1254;

  SeqInstr_1254:
    call {:si_unique_call 1941} {:cexpr "ret"} boogie_si_record_i32($i39);
    assume {:verifier.code 0} true;
    $i35 := $i39;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i35, $sub.i32(0, 4));
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i21 := $i35;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 512);
    goto $bb8;

  SeqInstr_1252:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(448, 1));
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.6, $p31);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1938} $i34 := ww_mutex_lock_interruptible___1($p33, $p4);
    goto SeqInstr_1249, SeqInstr_1250;

  SeqInstr_1250:
    assume assertsPassed;
    goto SeqInstr_1251;

  SeqInstr_1251:
    call {:si_unique_call 1939} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb13;

  SeqInstr_1249:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p4);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 1929} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i10);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 1931} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i10, 0);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 1934} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(448, 1));
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} $i25 := ww_mutex_trylock___1($p24);
    goto SeqInstr_1246, SeqInstr_1247;

  SeqInstr_1247:
    assume assertsPassed;
    goto SeqInstr_1248;

  SeqInstr_1248:
    call {:si_unique_call 1936} {:cexpr "tmp___1"} boogie_si_record_i32($i25);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 1937} {:cexpr "success"} boogie_si_record_i8($i27);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $i29 := (if $i28 == 1 then 0 else $sub.i32(0, 16));
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i21 := $i29;
    goto $bb8;

  SeqInstr_1246:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 16);
    goto $bb8;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} warn_slowpath_null(.str.114, 787);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ww_mutex_trylock___1: ref;

axiom ww_mutex_trylock___1 == $sub.ref(0, 773097);

procedure ww_mutex_trylock___1($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ww_mutex_trylock___1($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1942} $i2 := ldv_mutex_trylock_101___1($p1);
    goto SeqInstr_1255, SeqInstr_1256;

  SeqInstr_1256:
    assume assertsPassed;
    goto SeqInstr_1257;

  SeqInstr_1257:
    call {:si_unique_call 1943} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_1255:
    assume !assertsPassed;
    return;
}



const ww_mutex_lock_interruptible___1: ref;

axiom ww_mutex_lock_interruptible___1 == $sub.ref(0, 774129);

procedure ww_mutex_lock_interruptible___1($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ww_mutex_lock_interruptible___1($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $p6: ref;
  var $i7: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} $i7 := ldv_mutex_lock_interruptible_100___1($p6);
    goto SeqInstr_1258, SeqInstr_1259;

  SeqInstr_1259:
    assume assertsPassed;
    goto SeqInstr_1260;

  SeqInstr_1260:
    call {:si_unique_call 1947} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $i5 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_1258:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} $i4 := __ww_mutex_lock_interruptible($p0, $p1);
    call {:si_unique_call 1945} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const ww_mutex_lock___1: ref;

axiom ww_mutex_lock___1 == $sub.ref(0, 775161);

procedure ww_mutex_lock___1($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ww_mutex_lock___1($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $p6: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1950} ldv_mutex_lock_99___1($p6);
    goto SeqInstr_1261, SeqInstr_1262;

  SeqInstr_1262:
    assume assertsPassed;
    goto SeqInstr_1263;

  SeqInstr_1263:
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_1261:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} $i4 := __ww_mutex_lock($p0, $p1);
    call {:si_unique_call 1949} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const ldv_mutex_lock_99___1: ref;

axiom ldv_mutex_lock_99___1 == $sub.ref(0, 776193);

procedure ldv_mutex_lock_99___1($p0: ref);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ldv_mutex_lock_99___1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} ldv_linux_kernel_locking_mutex_mutex_lock_base_of_ww_mutex($p0);
    goto SeqInstr_1264, SeqInstr_1265;

  SeqInstr_1265:
    assume assertsPassed;
    goto SeqInstr_1266;

  SeqInstr_1266:
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1264:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_100___1: ref;

axiom ldv_mutex_lock_interruptible_100___1 == $sub.ref(0, 777225);

procedure ldv_mutex_lock_interruptible_100___1($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ldv_mutex_lock_interruptible_100___1($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} $i1 := ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_base_of_ww_mutex($p0);
    goto SeqInstr_1267, SeqInstr_1268;

  SeqInstr_1268:
    assume assertsPassed;
    goto SeqInstr_1269;

  SeqInstr_1269:
    call {:si_unique_call 1953} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_1267:
    assume !assertsPassed;
    return;
}



const ldv_mutex_trylock_101___1: ref;

axiom ldv_mutex_trylock_101___1 == $sub.ref(0, 778257);

procedure ldv_mutex_trylock_101___1($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ldv_mutex_trylock_101___1($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1954} $i1 := ldv_linux_kernel_locking_mutex_mutex_trylock_base_of_ww_mutex($p0);
    goto SeqInstr_1270, SeqInstr_1271;

  SeqInstr_1271:
    assume assertsPassed;
    goto SeqInstr_1272;

  SeqInstr_1272:
    call {:si_unique_call 1955} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_1270:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_idr_find_surf_id_idr_of_qxl_device: ref;

axiom ldv_linux_lib_idr_idr_find_surf_id_idr_of_qxl_device == $sub.ref(0, 779289);

procedure ldv_linux_lib_idr_idr_find_surf_id_idr_of_qxl_device();
  free requires assertsPassed;
  modifies $M.75, assertsPassed;



implementation ldv_linux_lib_idr_idr_find_surf_id_idr_of_qxl_device()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $i0 := $M.75;
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} ldv_assert_linux_lib_idr__not_initialized($i2);
    goto SeqInstr_1273, SeqInstr_1274;

  SeqInstr_1274:
    assume assertsPassed;
    goto SeqInstr_1275;

  SeqInstr_1275:
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $i3 := $M.75;
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 3);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} ldv_assert_linux_lib_idr__destroyed_before_usage($i5);
    goto SeqInstr_1276, SeqInstr_1277;

  SeqInstr_1277:
    assume assertsPassed;
    goto SeqInstr_1278;

  SeqInstr_1278:
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $M.75 := 2;
    call {:si_unique_call 1958} {:cexpr "ldv_linux_lib_idr_idr_surf_id_idr_of_qxl_device"} boogie_si_record_i32(2);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1276:
    assume !assertsPassed;
    return;

  SeqInstr_1273:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 780321);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1959} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1960} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __preempt_count_sub___0: ref;

axiom __preempt_count_sub___0 == $sub.ref(0, 781353);

procedure __preempt_count_sub___0($i0: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $CurrAddr, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.43, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation __preempt_count_sub___0($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} {:cexpr "__preempt_count_sub___0:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32(0, 1);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i7 == 1);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i8 == 1);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, $i0);
    call {:si_unique_call 1970} devirtbounce.8(0, __preempt_count, $i9, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i8 == 1;
    call {:si_unique_call 1969} devirtbounce.7(0, __preempt_count, __preempt_count);
    goto SeqInstr_1294, SeqInstr_1295;

  SeqInstr_1295:
    assume assertsPassed;
    goto SeqInstr_1296;

  SeqInstr_1296:
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_1294:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i7 == 1;
    call {:si_unique_call 1968} devirtbounce.7(0, __preempt_count, __preempt_count);
    goto SeqInstr_1291, SeqInstr_1292;

  SeqInstr_1292:
    assume assertsPassed;
    goto SeqInstr_1293;

  SeqInstr_1293:
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_1291:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_idr_alloc_surf_id_idr_of_qxl_device: ref;

axiom ldv_linux_lib_idr_idr_alloc_surf_id_idr_of_qxl_device == $sub.ref(0, 782385);

procedure ldv_linux_lib_idr_idr_alloc_surf_id_idr_of_qxl_device();
  free requires assertsPassed;
  modifies $M.75, assertsPassed;



implementation ldv_linux_lib_idr_idr_alloc_surf_id_idr_of_qxl_device()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $i0 := $M.75;
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} ldv_assert_linux_lib_idr__not_initialized($i2);
    goto SeqInstr_1303, SeqInstr_1304;

  SeqInstr_1304:
    assume assertsPassed;
    goto SeqInstr_1305;

  SeqInstr_1305:
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $i3 := $M.75;
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 3);
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} ldv_assert_linux_lib_idr__destroyed_before_usage($i5);
    goto SeqInstr_1306, SeqInstr_1307;

  SeqInstr_1307:
    assume assertsPassed;
    goto SeqInstr_1308;

  SeqInstr_1308:
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $M.75 := 2;
    call {:si_unique_call 1977} {:cexpr "ldv_linux_lib_idr_idr_surf_id_idr_of_qxl_device"} boogie_si_record_i32(2);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1306:
    assume !assertsPassed;
    return;

  SeqInstr_1303:
    assume !assertsPassed;
    return;
}



const qxl_alloc_bo_reserved: ref;

axiom qxl_alloc_bo_reserved == $sub.ref(0, 783417);

procedure qxl_alloc_bo_reserved($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $CurrAddr, assertsPassed;



implementation qxl_alloc_bo_reserved($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1979} {:cexpr "qxl_alloc_bo_reserved:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} $i5 := qxl_bo_create($p0, $i2, 0, 0, 1, $0.ref, $p4);
    goto SeqInstr_1309, SeqInstr_1310;

  SeqInstr_1310:
    assume assertsPassed;
    goto SeqInstr_1311;

  SeqInstr_1311:
    call {:si_unique_call 1981} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p4);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} $i9 := qxl_release_list_add($p1, $p8);
    goto SeqInstr_1312, SeqInstr_1313;

  SeqInstr_1313:
    assume assertsPassed;
    goto SeqInstr_1314;

  SeqInstr_1314:
    call {:si_unique_call 1984} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p4);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p3, $p11);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} qxl_bo_unref($p4);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb3;

  SeqInstr_1312:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} drm_err.ref(.str.39);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;

  SeqInstr_1309:
    assume !assertsPassed;
    return;
}



const qxl_allocate_chunk: ref;

axiom qxl_allocate_chunk == $sub.ref(0, 784449);

procedure qxl_allocate_chunk($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $CurrAddr, assertsPassed;



implementation qxl_allocate_chunk($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} {:cexpr "qxl_allocate_chunk:arg:chunk_size"} boogie_si_record_i32($i3);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} $p4 := kmalloc(24, 208);
    goto SeqInstr_1315, SeqInstr_1316;

  SeqInstr_1316:
    assume assertsPassed;
    goto SeqInstr_1317;

  SeqInstr_1317:
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i3);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} $i11 := qxl_alloc_bo_reserved($p0, $p1, $i9, $p10);
    goto SeqInstr_1318, SeqInstr_1319;

  SeqInstr_1319:
    assume assertsPassed;
    goto SeqInstr_1320;

  SeqInstr_1320:
    call {:si_unique_call 1989} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} list_add_tail($p14, $p15);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p5);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} kfree($p13);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $i8 := $i11;
    goto $bb3;

  SeqInstr_1318:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_1315:
    assume !assertsPassed;
    return;
}



const qxl_draw_copyarea: ref;

axiom qxl_draw_copyarea == $sub.ref(0, 785481);

procedure qxl_draw_copyarea($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $M.52, $CurrAddr, $M.53, $M.49, $M.40, $M.44, assertsPassed, $M.43, $M.41, $M.67, $M.68, $M.75, $M.37, $M.72, $M.73, $M.74, $M.69, $M.70, $M.32, $M.71, $M.36, $M.64, $M.35, $M.54, $M.55, $M.65;



implementation qxl_draw_copyarea($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32)
{
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $i14: i32;
  var $i41: i1;
  var $p42: ref;
  var vslice_dummy_var_169: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} $p7 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1994} {:cexpr "qxl_draw_copyarea:arg:width"} boogie_si_record_i32($i1);
    call {:si_unique_call 1995} {:cexpr "qxl_draw_copyarea:arg:height"} boogie_si_record_i32($i2);
    call {:si_unique_call 1996} {:cexpr "qxl_draw_copyarea:arg:sx"} boogie_si_record_i32($i3);
    call {:si_unique_call 1997} {:cexpr "qxl_draw_copyarea:arg:sy"} boogie_si_record_i32($i4);
    call {:si_unique_call 1998} {:cexpr "qxl_draw_copyarea:arg:dx"} boogie_si_record_i32($i5);
    call {:si_unique_call 1999} {:cexpr "qxl_draw_copyarea:arg:dy"} boogie_si_record_i32($i6);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2000} $i9 := alloc_drawable($p0, $p8);
    goto SeqInstr_1321, SeqInstr_1322;

  SeqInstr_1322:
    assume assertsPassed;
    goto SeqInstr_1323;

  SeqInstr_1323:
    call {:si_unique_call 2001} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p8);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2002} $i12 := qxl_release_reserve_list($p11, 1);
    goto SeqInstr_1324, SeqInstr_1325;

  SeqInstr_1325:
    assume assertsPassed;
    goto SeqInstr_1326;

  SeqInstr_1326:
    call {:si_unique_call 2003} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p15, $i5);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p16, $i6);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i5, $i1);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p18, $i17);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i6, $i2);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p20, $i19);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p8);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} $i22 := make_drawable($p0, 0, 4, $p7, $p21);
    goto SeqInstr_1327, SeqInstr_1328;

  SeqInstr_1328:
    assume assertsPassed;
    goto SeqInstr_1329;

  SeqInstr_1329:
    call {:si_unique_call 2005} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p8);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} $p26 := qxl_release_map($p0, $p25);
    goto SeqInstr_1330, SeqInstr_1331;

  SeqInstr_1331:
    assume assertsPassed;
    goto SeqInstr_1332;

  SeqInstr_1332:
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p31, $i3);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p27, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p35, $i4);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.6, $p8);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p27, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2008} qxl_release_unmap($p0, $p36, $p37);
    goto SeqInstr_1333, SeqInstr_1334;

  SeqInstr_1334:
    assume assertsPassed;
    goto SeqInstr_1335;

  SeqInstr_1335:
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.6, $p8);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} vslice_dummy_var_169 := qxl_push_command_ring_release($p0, $p38, 1, 0);
    goto SeqInstr_1336, SeqInstr_1337;

  SeqInstr_1337:
    assume assertsPassed;
    goto SeqInstr_1338;

  SeqInstr_1338:
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.6, $p8);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2010} qxl_release_fence_buffer_objects($p40);
    goto SeqInstr_1339, SeqInstr_1340;

  SeqInstr_1340:
    assume assertsPassed;
    goto SeqInstr_1341;

  SeqInstr_1341:
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i14 := $i22;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i14, 0);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i41 == 1;
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.6, $p8);
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2011} free_drawable($p0, $p42);
    goto SeqInstr_1342, SeqInstr_1343;

  SeqInstr_1343:
    assume assertsPassed;
    goto SeqInstr_1344;

  SeqInstr_1344:
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_1342:
    assume !assertsPassed;
    return;

  SeqInstr_1339:
    assume !assertsPassed;
    return;

  SeqInstr_1336:
    assume !assertsPassed;
    return;

  SeqInstr_1333:
    assume !assertsPassed;
    return;

  SeqInstr_1330:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i23 == 1;
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.6, $p8);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} qxl_release_backoff_reserve_list($p24);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $i14 := $i22;
    goto $bb7;

  SeqInstr_1327:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb7;

  SeqInstr_1324:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1321:
    assume !assertsPassed;
    return;
}



const qxl_draw_fill: ref;

axiom qxl_draw_fill == $sub.ref(0, 786513);

procedure qxl_draw_fill($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $M.52, $CurrAddr, $M.53, $M.49, $M.40, $M.44, assertsPassed, $M.43, $M.41, $M.67, $M.68, $M.75, $M.37, $M.72, $M.73, $M.74, $M.69, $M.70, $M.32, $M.71, $M.36, $M.64, $M.35, $M.54, $M.55, $M.65;



implementation qxl_draw_fill($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $i17: i32;
  var $i60: i1;
  var $p61: ref;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var vslice_dummy_var_170: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p5);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.6;
    cmdloc_dummy_var_39 := $M.6;
    call {:si_unique_call 2014} cmdloc_dummy_var_40 := $memcpy.i8(cmdloc_dummy_var_38, cmdloc_dummy_var_39, $p6, $p7, 16, $zext.i32.i64(4), 0 == 1);
    $M.6 := cmdloc_dummy_var_40;
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    call {:si_unique_call 2015} {:cexpr "color"} boogie_si_record_i32($i9);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.6, $p10);
    call {:si_unique_call 2016} {:cexpr "rop"} boogie_si_record_i16($i11);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2017} $i12 := alloc_drawable($p4, $p2);
    goto SeqInstr_1345, SeqInstr_1346;

  SeqInstr_1346:
    assume assertsPassed;
    goto SeqInstr_1347;

  SeqInstr_1347:
    call {:si_unique_call 2018} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p2);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} $i15 := qxl_release_reserve_list($p14, 1);
    goto SeqInstr_1348, SeqInstr_1349;

  SeqInstr_1349:
    assume assertsPassed;
    goto SeqInstr_1350;

  SeqInstr_1350:
    call {:si_unique_call 2020} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.6, $p2);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} $i19 := make_drawable($p4, 0, 1, $p1, $p18);
    goto SeqInstr_1351, SeqInstr_1352;

  SeqInstr_1352:
    assume assertsPassed;
    goto SeqInstr_1353;

  SeqInstr_1353:
    call {:si_unique_call 2022} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p2);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} $p23 := qxl_release_map($p4, $p22);
    goto SeqInstr_1354, SeqInstr_1355;

  SeqInstr_1355:
    assume assertsPassed;
    goto SeqInstr_1356;

  SeqInstr_1356:
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p28, 1);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p24, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p33, $i9);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p24, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p36, $i11);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p24, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p40, 0);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p24, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p42, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p45, 0);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p24, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p47, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p50, 0);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p24, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p52, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(16, 1));
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p54, 0);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.6, $p2);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p24, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} qxl_release_unmap($p4, $p55, $p56);
    goto SeqInstr_1357, SeqInstr_1358;

  SeqInstr_1358:
    assume assertsPassed;
    goto SeqInstr_1359;

  SeqInstr_1359:
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.6, $p2);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} vslice_dummy_var_170 := qxl_push_command_ring_release($p4, $p57, 1, 0);
    goto SeqInstr_1360, SeqInstr_1361;

  SeqInstr_1361:
    assume assertsPassed;
    goto SeqInstr_1362;

  SeqInstr_1362:
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.6, $p2);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} qxl_release_fence_buffer_objects($p59);
    goto SeqInstr_1363, SeqInstr_1364;

  SeqInstr_1364:
    assume assertsPassed;
    goto SeqInstr_1365;

  SeqInstr_1365:
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $i17 := $i19;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i17, 0);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i60 == 1;
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.6, $p2);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2028} free_drawable($p4, $p61);
    goto SeqInstr_1366, SeqInstr_1367;

  SeqInstr_1367:
    assume assertsPassed;
    goto SeqInstr_1368;

  SeqInstr_1368:
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_1366:
    assume !assertsPassed;
    return;

  SeqInstr_1363:
    assume !assertsPassed;
    return;

  SeqInstr_1360:
    assume !assertsPassed;
    return;

  SeqInstr_1357:
    assume !assertsPassed;
    return;

  SeqInstr_1354:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i20 == 1;
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p2);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} qxl_release_backoff_reserve_list($p21);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $i17 := $i19;
    goto $bb7;

  SeqInstr_1351:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    goto $bb7;

  SeqInstr_1348:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1345:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_delayed_ops_lock_of_qxl_fbdev: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_delayed_ops_lock_of_qxl_fbdev == $sub.ref(0, 787545);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_delayed_ops_lock_of_qxl_fbdev();
  free requires assertsPassed;
  modifies $M.72, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_delayed_ops_lock_of_qxl_fbdev()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $i0 := $M.72;
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_1369, SeqInstr_1370;

  SeqInstr_1370:
    assume assertsPassed;
    goto SeqInstr_1371;

  SeqInstr_1371:
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i3 := $M.72;
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} ldv_assume($i5);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 2031} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_delayed_ops_lock_of_qxl_fbdev"} boogie_si_record_i32(1);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1369:
    assume !assertsPassed;
    return;
}



const qxl_garbage_collect: ref;

axiom qxl_garbage_collect == $sub.ref(0, 788577);

procedure qxl_garbage_collect($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.42, $M.52, $M.46, $CurrAddr, $M.41, $M.44, assertsPassed, $M.53, $M.43, $M.75, $M.36, $M.38, $M.39, $M.72, $M.35, $M.40, $M.37, $M.67, $M.68, $M.73, $M.74, $M.69, $M.70, $M.32, $M.49, $M.55, $M.71, $M.65, $M.54, $M.64;



implementation qxl_garbage_collect($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i32;
  var $i27: i1;
  var $i28: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i64;
  var $i40: i1;
  var $i16: i32;
  var $i41: i32;
  var $i15: i32;
  var $i22: i32;
  var $p42: ref;
  var $i43: i1;
  var $i44: i8;
  var $i45: i1;
  var $i9: i32;
  var $i46: i32;
  var $i8: i32;
  var $i47: i32;
  var $i48: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2032} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3056, 1));
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} $i5 := qxl_ring_pop($p3, $p4);
    goto SeqInstr_1372, SeqInstr_1373;

  SeqInstr_1373:
    assume assertsPassed;
    goto SeqInstr_1374;

  SeqInstr_1374:
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 2034} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $i8 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i47 := $M.45;
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $i48 := $sgt.i32($i47, 0);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb42:
    assume $i48 == 1;
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} qxl_io_log.ref.ref.ref.i32($p0, .str.37, .str.38, $i8);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb4;

  $bb4:
    call $i10, $i11, $i12, $i13, $i14, $i17, $p18, $i19, $i20, $i21, $p23, $p24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $i38, $i39, $i40, $i16, $i41, $i15, $i22, $p42, $i43, $i44, $i45, $i9, $i46 := qxl_garbage_collect_loop_$bb4($p0, $p1, $p2, $p4, $i10, $i11, $i12, $i13, $i14, $i17, $p18, $i19, $i20, $i21, $p23, $p24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $i38, $i39, $i40, $i16, $i41, $i15, $i22, $p42, $i43, $i44, $i45, $i9, $i46);
    goto $bb4_last;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i10 := $M.45;
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 0);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.6, $p1);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $i15 := $i9;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i22 := $i15;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.6, $p2);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} $i43 := qxl_ring_pop($p42, $p4);
    goto SeqInstr_1378, SeqInstr_1379;

  SeqInstr_1379:
    assume assertsPassed;
    goto SeqInstr_1380;

  SeqInstr_1380:
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i8($i43);
    call {:si_unique_call 2038} {:cexpr "tmp"} boogie_si_record_i8($i44);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i8.i1($i44);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $i46 := $i22;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $i8 := $i46;
    goto $bb3;

  $bb39:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i22;
    goto $bb39_dummy;

  SeqInstr_1378:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $i16 := $i9;
    goto $bb12;

  $bb12:
    call $i17, $p18, $i19, $i20, $i21, $p23, $p24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $i38, $i39, $i40, $i16, $i41 := qxl_garbage_collect_loop_$bb12($p0, $p1, $i17, $p18, $i19, $i20, $i21, $p23, $p24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $i38, $i39, $i40, $i16, $i41);
    goto $bb12_last;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.6, $p1);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} $p18 := qxl_release_from_id_locked($p0, $i17);
    goto SeqInstr_1375, SeqInstr_1376;

  SeqInstr_1376:
    assume assertsPassed;
    goto SeqInstr_1377;

  SeqInstr_1377:
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $i21 := $i16;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} $p23 := qxl_release_map($p0, $p18);
    goto SeqInstr_1381, SeqInstr_1382;

  SeqInstr_1382:
    assume assertsPassed;
    goto SeqInstr_1383;

  SeqInstr_1383:
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.6, $p24);
    call {:si_unique_call 2040} {:cexpr "next_id"} boogie_si_record_i64($i25);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} qxl_release_unmap($p0, $p18, $p23);
    goto SeqInstr_1384, SeqInstr_1385;

  SeqInstr_1385:
    assume assertsPassed;
    goto SeqInstr_1386;

  SeqInstr_1386:
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $i26 := $M.45;
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $i27 := $sgt.i32($i26, 0);
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p18, $mul.ref(0, 216)), $mul.ref(92, 1));
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.6, $p29);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p18, $mul.ref(0, 216)), $mul.ref(92, 1));
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.6, $p32);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 1);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p18, $mul.ref(0, 216)), $mul.ref(92, 1));
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.6, $p35);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 2);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} drm_err.ref(.str.36);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p1, $i25);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} qxl_release_free($p0, $p18);
    goto SeqInstr_1387, SeqInstr_1388;

  SeqInstr_1388:
    assume assertsPassed;
    goto SeqInstr_1389;

  SeqInstr_1389:
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i16, 1);
    call {:si_unique_call 2045} {:cexpr "i"} boogie_si_record_i32($i38);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.6, $p1);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $i41 := $i38;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $i15 := $i41;
    goto $bb11;

  $bb36:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i38;
    goto $bb36_dummy;

  SeqInstr_1387:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i37 == 1;
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb25:
    assume $i34 == 1;
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb21:
    assume $i31 == 1;
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb18:
    assume $i27 == 1;
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.6, $p1);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} qxl_io_log.ref.ref.i64.i64($p0, .str.35, $i28, $i25);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_1384:
    assume !assertsPassed;
    return;

  SeqInstr_1381:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb16;

  SeqInstr_1375:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.6, $p1);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} qxl_io_log.ref.ref.i64($p0, .str.34, $i12);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_1372:
    assume !assertsPassed;
    return;

  $bb36_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8322;

  $bb39_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8308;
}



const qxl_release_from_id_locked: ref;

axiom qxl_release_from_id_locked == $sub.ref(0, 789609);

procedure qxl_release_from_id_locked($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.52, assertsPassed, $M.53;



implementation qxl_release_from_id_locked($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} {:cexpr "qxl_release_from_id_locked:arg:id"} boogie_si_record_i64($i1);
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3312, 1));
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} ldv_spin_lock_113($p2);
    goto SeqInstr_1390, SeqInstr_1391;

  SeqInstr_1391:
    assume assertsPassed;
    goto SeqInstr_1392;

  SeqInstr_1392:
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3192, 1));
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i1);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} $p5 := ldv_idr_find_123($p3, $i4);
    goto SeqInstr_1393, SeqInstr_1394;

  SeqInstr_1394:
    assume assertsPassed;
    goto SeqInstr_1395;

  SeqInstr_1395:
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3312, 1));
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} ldv_spin_unlock_115($p7);
    goto SeqInstr_1396, SeqInstr_1397;

  SeqInstr_1397:
    assume assertsPassed;
    goto SeqInstr_1398;

  SeqInstr_1398:
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p6);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $p5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} drm_err.ref(.str.70);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $p10 := $0.ref;
    goto $bb3;

  SeqInstr_1396:
    assume !assertsPassed;
    return;

  SeqInstr_1393:
    assume !assertsPassed;
    return;

  SeqInstr_1390:
    assume !assertsPassed;
    return;
}



const qxl_ring_pop: ref;

axiom qxl_ring_pop == $sub.ref(0, 790641);

procedure qxl_ring_pop($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.6, $M.41, assertsPassed;



implementation qxl_ring_pop($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i16: i1;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_120___0($p5);
    goto SeqInstr_1399, SeqInstr_1400;

  SeqInstr_1400:
    assume assertsPassed;
    goto SeqInstr_1401;

  SeqInstr_1401:
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.6, $p6);
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i7, $i9);
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p17 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.6, $p17);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(12, 1));
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, $sub.i32(0, 1));
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i18, $i21);
    call {:si_unique_call 2054} {:cexpr "idx"} boogie_si_record_i32($i22);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.6, $p23);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 20)), $mul.ref(20, 1));
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.6, $p27);
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $i29 := $mul.i32($i22, $i28);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p26, $mul.ref($i30, 1));
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.6, $p32);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_41 := $M.6;
    cmdloc_dummy_var_42 := $M.6;
    call {:si_unique_call 2055} cmdloc_dummy_var_43 := $memcpy.i8(cmdloc_dummy_var_41, cmdloc_dummy_var_42, $p1, $p31, $i34, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_43;
    $p35 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.6, $p35);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 1);
    $p38 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p38, $i37);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} ldv_spin_unlock_irqrestore_113___1($p39, $u1);
    goto SeqInstr_1405, SeqInstr_1406;

  SeqInstr_1406:
    assume assertsPassed;
    goto SeqInstr_1407;

  SeqInstr_1407:
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  SeqInstr_1405:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 1);
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p14, $i13);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} ldv_spin_unlock_irqrestore_113___1($p15, $u1);
    goto SeqInstr_1402, SeqInstr_1403;

  SeqInstr_1403:
    assume assertsPassed;
    goto SeqInstr_1404;

  SeqInstr_1404:
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  SeqInstr_1402:
    assume !assertsPassed;
    return;

  SeqInstr_1399:
    assume !assertsPassed;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_120___0: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_120___0 == $sub.ref(0, 791673);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_120___0($p0: ref);
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_120___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_qxl_ring();
    goto SeqInstr_1408, SeqInstr_1409;

  SeqInstr_1409:
    assume assertsPassed;
    goto SeqInstr_1410;

  SeqInstr_1410:
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1408:
    assume !assertsPassed;
    return;
}



const ldv_idr_find_123: ref;

axiom ldv_idr_find_123 == $sub.ref(0, 792705);

procedure ldv_idr_find_123($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.53, assertsPassed;



implementation ldv_idr_find_123($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} {:cexpr "ldv_idr_find_123:arg:id"} boogie_si_record_i32($i1);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} ldv_linux_lib_idr_idr_find_release_idr_of_qxl_device();
    goto SeqInstr_1411, SeqInstr_1412;

  SeqInstr_1412:
    assume assertsPassed;
    goto SeqInstr_1413;

  SeqInstr_1413:
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} $p2 := ldv_undef_ptr();
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_1411:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_idr_find_release_idr_of_qxl_device: ref;

axiom ldv_linux_lib_idr_idr_find_release_idr_of_qxl_device == $sub.ref(0, 793737);

procedure ldv_linux_lib_idr_idr_find_release_idr_of_qxl_device();
  free requires assertsPassed;
  modifies $M.53, assertsPassed;



implementation ldv_linux_lib_idr_idr_find_release_idr_of_qxl_device()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i0 := $M.53;
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} ldv_assert_linux_lib_idr__not_initialized($i2);
    goto SeqInstr_1414, SeqInstr_1415;

  SeqInstr_1415:
    assume assertsPassed;
    goto SeqInstr_1416;

  SeqInstr_1416:
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $i3 := $M.53;
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 3);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} ldv_assert_linux_lib_idr__destroyed_before_usage($i5);
    goto SeqInstr_1417, SeqInstr_1418;

  SeqInstr_1418:
    assume assertsPassed;
    goto SeqInstr_1419;

  SeqInstr_1419:
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 2064} {:cexpr "ldv_linux_lib_idr_idr_release_idr_of_qxl_device"} boogie_si_record_i32(2);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1417:
    assume !assertsPassed;
    return;

  SeqInstr_1414:
    assume !assertsPassed;
    return;
}



const setup_hw_slot: ref;

axiom setup_hw_slot == $sub.ref(0, 794769);

procedure setup_hw_slot($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.55, assertsPassed;



implementation setup_hw_slot($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} {:cexpr "setup_hw_slot:arg:slot_index"} boogie_si_record_i32($i1);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.6, $p3);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 5424)), $mul.ref(5288, 1)), $mul.ref(0, 1));
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p8, $i4);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.6, $p9);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p11);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 5424)), $mul.ref(5288, 1)), $mul.ref(8, 1));
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p14, $i10);
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i1);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2066} qxl_io_memslot_add($p0, $i17);
    goto SeqInstr_1420, SeqInstr_1421;

  SeqInstr_1421:
    assume assertsPassed;
    goto SeqInstr_1422;

  SeqInstr_1422:
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1420:
    assume !assertsPassed;
    return;
}



const qxl_io_memslot_add: ref;

axiom qxl_io_memslot_add == $sub.ref(0, 795801);

procedure qxl_io_memslot_add($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.55, assertsPassed;



implementation qxl_io_memslot_add($p0: ref, $i1: i8)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} {:cexpr "qxl_io_memslot_add:arg:id"} boogie_si_record_i8($i1);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $i2 := $M.45;
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 0);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i1);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} wait_for_io_cmd($p0, $i6, 17);
    goto SeqInstr_1423, SeqInstr_1424;

  SeqInstr_1424:
    assume assertsPassed;
    goto SeqInstr_1425;

  SeqInstr_1425:
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1423:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i1);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} qxl_io_log.ref.ref.i32($p0, .str.46, $i4);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wait_for_io_cmd: ref;

axiom wait_for_io_cmd == $sub.ref(0, 796833);

procedure wait_for_io_cmd($p0: ref, $i1: i8, $i2: i64);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.55, assertsPassed;



implementation wait_for_io_cmd($p0: ref, $i1: i8, $i2: i64)
{
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2070} {:cexpr "wait_for_io_cmd:arg:val"} boogie_si_record_i8($i1);
    call {:si_unique_call 2071} {:cexpr "wait_for_io_cmd:arg:port"} boogie_si_record_i64($i2);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i3, $i4, $i5, $i6 := wait_for_io_cmd_loop_$bb1($p0, $i1, $i2, $i3, $i4, $i5, $i6);
    goto $bb1_last;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2072} $i5 := wait_for_io_cmd_user($p0, $i4, $i2, 0);
    goto SeqInstr_1426, SeqInstr_1427;

  SeqInstr_1427:
    assume assertsPassed;
    goto SeqInstr_1428;

  SeqInstr_1428:
    call {:si_unique_call 2073} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, $sub.i32(0, 512));
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2_dummy;

  SeqInstr_1426:
    assume !assertsPassed;
    return;

  $bb2_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i1);
    goto corral_source_split_8496;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 797865);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    return;
}



const qxl_client_monitors_config_work_func: ref;

axiom qxl_client_monitors_config_work_func == $sub.ref(0, 798897);

procedure qxl_client_monitors_config_work_func($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, assertsPassed;



implementation qxl_client_monitors_config_work_func($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 3832), 5336));
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2074} qxl_display_read_client_monitors_config($p2);
    goto SeqInstr_1429, SeqInstr_1430;

  SeqInstr_1430:
    assume assertsPassed;
    goto SeqInstr_1431;

  SeqInstr_1431:
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1429:
    assume !assertsPassed;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 799929);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p2, $i1);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    return;
}



const drm_irq_install: ref;

axiom drm_irq_install == $sub.ref(0, 800961);

procedure drm_irq_install($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_irq_install($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2076} {:cexpr "drm_irq_install:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2077} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2078} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const qxl_display_read_client_monitors_config: ref;

axiom qxl_display_read_client_monitors_config == $sub.ref(0, 801993);

procedure qxl_display_read_client_monitors_config($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, assertsPassed;



implementation qxl_display_read_client_monitors_config($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} $i3 := qxl_display_copy_rom_client_monitors_config($p0);
    goto SeqInstr_1432, SeqInstr_1433;

  SeqInstr_1433:
    assume assertsPassed;
    goto SeqInstr_1434;

  SeqInstr_1434:
    call {:si_unique_call 2080} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} drm_modeset_lock_all($p2);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} qxl_update_offset_props($p0);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} drm_modeset_unlock_all($p2);
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} $i9 := drm_helper_hpd_irq_event($p8);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 2088} {:cexpr "tmp___0"} boogie_si_record_i8($i10);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i13 == 1;
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2089} drm_kms_helper_hotplug_event($p15);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i11 == 1;
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb11;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i5, $i6 := qxl_display_read_client_monitors_config_loop_$bb4($p0, $i5, $i6);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} qxl_io_log.ref.ref($p0, .str.2);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} $i5 := qxl_display_copy_rom_client_monitors_config($p0);
    goto SeqInstr_1435, SeqInstr_1436;

  SeqInstr_1436:
    assume assertsPassed;
    goto SeqInstr_1437;

  SeqInstr_1437:
    call {:si_unique_call 2083} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb6_dummy;

  SeqInstr_1435:
    assume !assertsPassed;
    return;

  SeqInstr_1432:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const qxl_display_copy_rom_client_monitors_config: ref;

axiom qxl_display_copy_rom_client_monitors_config == $sub.ref(0, 803025);

procedure qxl_display_copy_rom_client_monitors_config($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, assertsPassed;



implementation qxl_display_copy_rom_client_monitors_config($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $i50: i16;
  var $i51: i32;
  var $i45: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i16;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i16;
  var $i63: i32;
  var $i64: i1;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i64;
  var $i105: i64;
  var $i106: i1;
  var $p107: ref;
  var $i108: i32;
  var $p109: ref;
  var $i110: i32;
  var $p111: ref;
  var $i112: i32;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $p116: ref;
  var $p117: ref;
  var $i118: i16;
  var $i119: i32;
  var $i120: i1;
  var $i65: i32;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(132, 1)), $mul.ref(0, 1));
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.6, $p4);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    call {:si_unique_call 2090} {:cexpr "num_monitors"} boogie_si_record_i32($i6);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1160)), $mul.ref(132, 1));
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} $i11 := crc32_le(0, $p10, 1028);
    call {:si_unique_call 2092} {:cexpr "crc"} boogie_si_record_i32($i11);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1160)), $mul.ref(128, 1));
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i11, $i15);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.6, $p24);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $i27 := $sgt.i32($i6, $i26);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i27 == 1);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.6, $p46);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p47, $mul.ref(0, 1160)), $mul.ref(132, 1)), $mul.ref(0, 1));
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.6, $p49);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    call {:si_unique_call 2096} {:cexpr "num_monitors"} boogie_si_record_i32($i51);
    assume {:verifier.code 0} true;
    $i45 := $i51;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} qxl_alloc_client_monitors_config($p0, $i45);
    goto SeqInstr_1438, SeqInstr_1439;

  SeqInstr_1439:
    assume assertsPassed;
    goto SeqInstr_1440;

  SeqInstr_1440:
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.6, $p52);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.6, $p54);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.6, $p56);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p58, $i55);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.6, $p59);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.6, $p61);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $i64 := $slt.i32(0, $i63);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb11:
    assume $i64 == 1;
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $i65 := 0;
    goto $bb14;

  $bb14:
    call $p66, $p67, $p69, $p70, $i71, $p73, $p74, $p75, $p76, $i77, $p79, $i80, $p81, $p82, $i83, $p84, $p85, $i86, $p87, $i88, $i89, $p90, $p91, $i92, $p93, $i94, $i95, $p96, $p97, $p98, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $p107, $i108, $p109, $i110, $p111, $i112, $p113, $i114, $i115, $p116, $p117, $i118, $i119, $i120, $i65 := qxl_display_copy_rom_client_monitors_config_loop_$bb14($p0, $p59, $p66, $p67, $p69, $p70, $i71, $p73, $p74, $p75, $p76, $i77, $p79, $i80, $p81, $p82, $i83, $p84, $p85, $i86, $p87, $i88, $i89, $p90, $p91, $i92, $p93, $i94, $i95, $p96, $p97, $p98, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $p107, $i108, $p109, $i110, $p111, $i112, $p113, $i114, $i115, $p116, $p117, $i118, $i119, $i120, $i65);
    goto $bb14_last;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.6, $p66);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p67, $mul.ref(0, 1160)), $mul.ref(132, 1)), $mul.ref(4, 1));
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i65);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.6, $p73);
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i65);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p70, $mul.ref($i71, 16)), $mul.ref(4, 1));
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.6, $p79);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p76, $mul.ref($i77, 28)), $mul.ref(16, 1));
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p81, $i80);
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p70, $mul.ref($i71, 16)), $mul.ref(0, 1));
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.6, $p82);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p76, $mul.ref($i77, 28)), $mul.ref(20, 1));
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p84, $i83);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p70, $mul.ref($i71, 16)), $mul.ref(12, 1));
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.6, $p85);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p70, $mul.ref($i71, 16)), $mul.ref(4, 1));
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.6, $p87);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $i89 := $sub.i32($i86, $i88);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p76, $mul.ref($i77, 28)), $mul.ref(8, 1));
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p90, $i89);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p70, $mul.ref($i71, 16)), $mul.ref(8, 1));
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.6, $p91);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p70, $mul.ref($i71, 16)), $mul.ref(0, 1));
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.6, $p93);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $i95 := $sub.i32($i92, $i94);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p76, $mul.ref($i77, 28)), $mul.ref(12, 1));
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p96, $i95);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p76, $mul.ref($i77, 28)), $mul.ref(4, 1));
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p97, 0);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p76, $mul.ref($i77, 28)), $mul.ref(0, 1));
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p98, $i65);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p76, $mul.ref($i77, 28)), $mul.ref(24, 1));
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p99, 0);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.6, drm_debug);
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $i101 := $and.i32($i100, 4);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $i103 := $zext.i1.i32($i102);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i103);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2100} $i105 := ldv__builtin_expect($i104, 0);
    call {:si_unique_call 2101} {:cexpr "tmp___0"} boogie_si_record_i64($i105);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, 0);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i115 := $add.i32($i65, 1);
    call {:si_unique_call 2103} {:cexpr "i"} boogie_si_record_i32($i115);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.6, $p59);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p116, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $i118 := $load.i16($M.6, $p117);
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $i119 := $zext.i16.i32($i118);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $i120 := $slt.i32($i115, $i119);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i120 == 1);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb19:
    assume $i120 == 1;
    assume {:verifier.code 0} true;
    $i65 := $i115;
    goto $bb19_dummy;

  $bb16:
    assume $i106 == 1;
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p76, $mul.ref($i77, 28)), $mul.ref(8, 1));
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.6, $p107);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p76, $mul.ref($i77, 28)), $mul.ref(12, 1));
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.6, $p109);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p76, $mul.ref($i77, 28)), $mul.ref(16, 1));
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.6, $p111);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p76, $mul.ref($i77, 28)), $mul.ref(20, 1));
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.6, $p113);
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2102} drm_ut_debug_printk.ref.ref.i32.i32.i32.i32(.str.110, .str.112, $i108, $i110, $i112, $i114);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_1438:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.6, drm_debug);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 4);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2094} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 2095} {:cexpr "tmp"} boogie_si_record_i64($i33);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.6, $p40);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.6, $p42);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    call {:si_unique_call 2098} {:cexpr "num_monitors"} boogie_si_record_i32($i44);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb10;

  $bb7:
    assume $i34 == 1;
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.6, $p35);
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.6, $p37);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} drm_ut_debug_printk.ref.ref.i32.i32(.str.110, .str.111, $i39, $i6);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.6, $p17);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1160)), $mul.ref(128, 1));
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} qxl_io_log.ref.ref.i32.i64.i32($p0, .str.109, $i11, 1028, $i20);
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8629;
}



const drm_modeset_lock_all: ref;

axiom drm_modeset_lock_all == $sub.ref(0, 804057);

procedure drm_modeset_lock_all($p0: ref);
  free requires assertsPassed;



implementation drm_modeset_lock_all($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    return;
}



const qxl_update_offset_props: ref;

axiom qxl_update_offset_props == $sub.ref(0, 805089);

procedure qxl_update_offset_props($p0: ref);
  free requires assertsPassed;



implementation qxl_update_offset_props($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p15: ref;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 3144)), $mul.ref(1216, 1)), $mul.ref(936, 1)), $mul.ref(0, 1));
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 24), 920));
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 24), 920)), $mul.ref(24, 1));
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3144)), $mul.ref(1216, 1)), $mul.ref(936, 1));
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i10, $i13);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $p15 := $p8;
    goto $bb4;

  $bb4:
    call $p16, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $p26, $p28, $p29, $p30, $i31, $i32, $p34, $p36, $p37, $p38, $i39, $i40, $p43, $p44, $p45, $p46, $p47, $i48, $i49, $p15, vslice_dummy_var_171, vslice_dummy_var_172 := qxl_update_offset_props_loop_$bb4($p0, $p2, $i13, $p16, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $p26, $p28, $p29, $p30, $i31, $i32, $p34, $p36, $p37, $p38, $i39, $i40, $p43, $p44, $p45, $p46, $p47, $i48, $i49, $p15, vslice_dummy_var_171, vslice_dummy_var_172);
    goto $bb4_last;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p16, $mul.ref($sub.ref(0, 8), 1024)), $mul.ref(0, 1));
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p22);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p15, $mul.ref(0, 920)), $mul.ref(40, 1));
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3144)), $mul.ref(1216, 1)), $mul.ref(1600, 1));
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p21, $mul.ref($i24, 28)), $mul.ref(16, 1));
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.6, $p30);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i31);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2104} vslice_dummy_var_171 := drm_object_property_set_value($p26, $p29, $i32);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p15, $mul.ref(0, 920)), $mul.ref(40, 1));
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3144)), $mul.ref(1216, 1)), $mul.ref(1608, 1));
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.6, $p36);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p21, $mul.ref($i24, 28)), $mul.ref(20, 1));
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.6, $p38);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i39);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} vslice_dummy_var_172 := drm_object_property_set_value($p34, $p37, $i40);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.6, $p43);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p45, $mul.ref($sub.ref(0, 24), 920));
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p45, $mul.ref($sub.ref(0, 24), 920)), $mul.ref(24, 1));
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, $i13);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i49 == 1);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $p15 := $p46;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8716;
}



const drm_modeset_unlock_all: ref;

axiom drm_modeset_unlock_all == $sub.ref(0, 806121);

procedure drm_modeset_unlock_all($p0: ref);
  free requires assertsPassed;



implementation drm_modeset_unlock_all($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    return;
}



const drm_helper_hpd_irq_event: ref;

axiom drm_helper_hpd_irq_event == $sub.ref(0, 807153);

procedure drm_helper_hpd_irq_event($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation drm_helper_hpd_irq_event($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2106} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 2107} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const drm_kms_helper_hotplug_event: ref;

axiom drm_kms_helper_hotplug_event == $sub.ref(0, 808185);

procedure drm_kms_helper_hotplug_event($p0: ref);
  free requires assertsPassed;



implementation drm_kms_helper_hotplug_event($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    return;
}



const drm_object_property_set_value: ref;

axiom drm_object_property_set_value == $sub.ref(0, 809217);

procedure drm_object_property_set_value($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation drm_object_property_set_value($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2108} {:cexpr "drm_object_property_set_value:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2109} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2110} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const crc32_le: ref;

axiom crc32_le == $sub.ref(0, 810249);

procedure crc32_le($i0: i32, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation crc32_le($i0: i32, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2111} {:cexpr "crc32_le:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2112} {:cexpr "crc32_le:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2113} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 2114} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const qxl_alloc_client_monitors_config: ref;

axiom qxl_alloc_client_monitors_config == $sub.ref(0, 811281);

procedure qxl_alloc_client_monitors_config($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, assertsPassed;



implementation qxl_alloc_client_monitors_config($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i16;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} {:cexpr "qxl_alloc_client_monitors_config:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i1);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.6, $p31);
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p33, $i30);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i1);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $i21 := $mul.i64($i20, 28);
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 4);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} $p23 := kzalloc($i22, 208);
    goto SeqInstr_1441, SeqInstr_1442;

  SeqInstr_1442:
    assume assertsPassed;
    goto SeqInstr_1443;

  SeqInstr_1443:
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p25, $p23);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.6, $p26);
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i29 == 1;
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} qxl_io_log.ref.ref.ref.i32($p0, .str, .str.1, $i1);
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_1441:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.6, $p8);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i32($i1, $i10);
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} kfree($p14);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p15, $0.ref);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_linux_lib_idr_idr_init_surf_id_idr_of_qxl_device: ref;

axiom ldv_linux_lib_idr_idr_init_surf_id_idr_of_qxl_device == $sub.ref(0, 812313);

procedure ldv_linux_lib_idr_idr_init_surf_id_idr_of_qxl_device();
  free requires assertsPassed;
  modifies $M.75, assertsPassed;



implementation ldv_linux_lib_idr_idr_init_surf_id_idr_of_qxl_device()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $i0 := $M.75;
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} ldv_assert_linux_lib_idr__double_init($i2);
    goto SeqInstr_1444, SeqInstr_1445;

  SeqInstr_1445:
    assume assertsPassed;
    goto SeqInstr_1446;

  SeqInstr_1446:
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 2120} {:cexpr "ldv_linux_lib_idr_idr_surf_id_idr_of_qxl_device"} boogie_si_record_i32(1);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1444:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_lib_idr__double_init: ref;

axiom ldv_assert_linux_lib_idr__double_init == $sub.ref(0, 813345);

procedure ldv_assert_linux_lib_idr__double_init($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__double_init($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} {:cexpr "ldv_assert_linux_lib_idr__double_init:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2122} __VERIFIER_error();
    goto SeqInstr_1447, SeqInstr_1448;

  SeqInstr_1448:
    assume assertsPassed;
    goto SeqInstr_1449;

  SeqInstr_1449:
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1447:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_lib_idr_idr_init_release_idr_of_qxl_device: ref;

axiom ldv_linux_lib_idr_idr_init_release_idr_of_qxl_device == $sub.ref(0, 814377);

procedure ldv_linux_lib_idr_idr_init_release_idr_of_qxl_device();
  free requires assertsPassed;
  modifies $M.53, assertsPassed;



implementation ldv_linux_lib_idr_idr_init_release_idr_of_qxl_device()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $i0 := $M.53;
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} ldv_assert_linux_lib_idr__double_init($i2);
    goto SeqInstr_1450, SeqInstr_1451;

  SeqInstr_1451:
    assume assertsPassed;
    goto SeqInstr_1452;

  SeqInstr_1452:
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 2124} {:cexpr "ldv_linux_lib_idr_idr_release_idr_of_qxl_device"} boogie_si_record_i32(1);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1450:
    assume !assertsPassed;
    return;
}



const qxl_ring_init_hdr: ref;

axiom qxl_ring_init_hdr == $sub.ref(0, 815409);

procedure qxl_ring_init_hdr($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_ring_init_hdr($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(12, 1));
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, $p1);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p6, $i2);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    return;
}



const qxl_ttm_init: ref;

axiom qxl_ttm_init == $sub.ref(0, 816441);

procedure qxl_ttm_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation qxl_ttm_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p5: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p26: ref;
  var $i27: i64;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i64;
  var $i39: i32;
  var $i40: i32;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $p46: ref;
  var $i47: i64;
  var $i48: i32;
  var $i49: i32;
  var $i51: i32;
  var $i52: i1;
  var $i3: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} $i1 := qxl_ttm_global_init($p0);
    call {:si_unique_call 2126} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1));
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 3144)), $mul.ref(80, 1));
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 976)), $mul.ref(48, 1));
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} $i18 := ttm_bo_device_init($p5, $p11, qxl_bo_driver, $p17, 1048576, 0);
    call {:si_unique_call 2128} {:cexpr "r"} boogie_si_record_i32($i18);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 1160)), $mul.ref(44, 1));
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p22);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $i24 := $udiv.i32($i23, 4096);
    call {:si_unique_call 2130} {:cexpr "num_io_pages"} boogie_si_record_i32($i24);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1));
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i24);
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} $i28 := ttm_bo_init_mm($p26, 2, $i27);
    call {:si_unique_call 2132} {:cexpr "r"} boogie_si_record_i32($i28);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1));
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(56, 1));
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.6, $p32);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $i34 := $udiv.i64($i33, 4096);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} $i35 := ttm_bo_init_mm($p31, 3, $i34);
    call {:si_unique_call 2135} {:cexpr "r"} boogie_si_record_i32($i35);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(40, 1));
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.6, $p37);
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i64.i32($i38);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $i40 := $udiv.i32($i39, 1048576);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} vslice_dummy_var_173 := printk.ref.i32(.str.16, $i40);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $i42 := $zext.i32.i64($i24);
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $i43 := $mul.i64($i42, 4096);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $i44 := $udiv.i64($i43, 1048576);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2138} vslice_dummy_var_174 := printk.ref.i64(.str.17, $i44);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(56, 1));
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.6, $p46);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i64.i32($i47);
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $i49 := $udiv.i32($i48, 1048576);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} vslice_dummy_var_175 := printk.ref.i32(.str.18, $i49);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2140} $i51 := qxl_ttm_debugfs_init($p0);
    call {:si_unique_call 2141} {:cexpr "r"} boogie_si_record_i32($i51);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb14:
    assume $i52 == 1;
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2142} drm_err.ref(.str.19);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $i3 := $i51;
    goto $bb3;

  $bb11:
    assume $i36 == 1;
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2136} drm_err.ref(.str.15);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $i3 := $i35;
    goto $bb3;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} drm_err.ref(.str.14);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $i3 := $i28;
    goto $bb3;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} drm_err.ref.i32(.str.13, $i18);
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $i3 := $i18;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const qxl_ttm_global_init: ref;

axiom qxl_ttm_global_init == $sub.ref(0, 817473);

procedure qxl_ttm_global_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_ttm_global_init($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p14: ref;
  var $p15: ref;
  var $p19: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p32: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(88, 1));
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p2, 0);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(48, 1));
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p5, 0);
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p6, 504);
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p7, qxl_ttm_mem_global_init);
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(48, 1)), $mul.ref(32, 1));
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, qxl_ttm_mem_global_release);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} $i9 := drm_global_item_ref($p4);
    call {:si_unique_call 2144} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p19, $p15);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    $p23 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p23, 1);
    $p24 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p24, 592);
    $p25 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p25, ttm_bo_global_init);
    $p26 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p26, ttm_bo_global_release);
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2146} $i27 := drm_global_item_ref($p22);
    call {:si_unique_call 2147} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(88, 1));
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p32, 1);
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2148} drm_err.ref(.str.152);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(48, 1));
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} drm_global_item_unref($p30);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $i11 := $i27;
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} drm_err.ref(.str.151);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb3;
}



const ttm_bo_device_init: ref;

axiom ttm_bo_device_init == $sub.ref(0, 818505);

procedure ttm_bo_device_init($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64, $i5: i1) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_device_init($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64, $i5: i1) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2150} {:cexpr "ttm_bo_device_init:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2151} {:cexpr "ttm_bo_device_init:arg:arg5"} boogie_si_record_i1($i5);
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2152} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 2153} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ttm_bo_init_mm: ref;

axiom ttm_bo_init_mm == $sub.ref(0, 819537);

procedure ttm_bo_init_mm($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_init_mm($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2154} {:cexpr "ttm_bo_init_mm:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2155} {:cexpr "ttm_bo_init_mm:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2156} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2157} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const qxl_ttm_debugfs_init: ref;

axiom qxl_ttm_debugfs_init == $sub.ref(0, 820569);

procedure qxl_ttm_debugfs_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation qxl_ttm_debugfs_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2158} $p1 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} $p2 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb3, $bb4;

  $bb4:
    assume !(1 == 1);
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2161} vslice_dummy_var_177 := sprintf.ref.ref($p5, .str.154);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, $p2);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p11, qxl_mm_dump_table);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p13, 0);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb6, $bb7;

  $bb7:
    assume !(1 == 1);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(32, 1)), $mul.ref(3, 256)), $mul.ref(48, 1));
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.6, $p26);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p29, $p27);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb11, $bb12;

  $bb12:
    assume !(0 == 1);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p2);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref(1, 1));
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} vslice_dummy_var_179 := sprintf.ref.ref($p33, .str.154);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p2);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref(1, 1));
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1));
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p41, $p39);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1));
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p43, qxl_mm_dump_table);
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1));
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p45, 0);
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb14, $bb15;

  $bb15:
    assume !(0 == 1);
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(32, 1)), $mul.ref(3, 256)), $mul.ref(48, 1));
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.6, $p50);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1));
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p53, $p51);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p1);
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2162} $i31 := qxl_debugfs_add_files($p0, $p30, 2);
    call {:si_unique_call 2163} {:cexpr "tmp"} boogie_si_record_i32($i31);
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb14:
    assume 0 == 1;
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(32, 1)), $mul.ref(2, 256)), $mul.ref(48, 1));
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.6, $p58);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1));
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p61, $p59);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume 0 == 1;
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p2);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref(1, 1));
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2164} vslice_dummy_var_178 := sprintf.ref.ref($p36, .str.153);
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume 1 == 1;
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(32, 1)), $mul.ref(2, 256)), $mul.ref(48, 1));
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p21, $p19);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume 1 == 1;
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} vslice_dummy_var_176 := sprintf.ref.ref($p3, .str.153);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 821601);

procedure sprintf.ref.ref($p0: ref, $p1: ref) returns ($r: i32);



const qxl_mm_dump_table: ref;

axiom qxl_mm_dump_table == $sub.ref(0, 822633);

procedure qxl_mm_dump_table($p0: ref, $p1: ref) returns ($r: i32);



const qxl_debugfs_add_files: ref;

axiom qxl_debugfs_add_files == $sub.ref(0, 823665);

procedure qxl_debugfs_add_files($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_debugfs_add_files($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i6: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i15: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2166} {:cexpr "qxl_debugfs_add_files:arg:nfiles"} boogie_si_record_i32($i2);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4424, 1));
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.6, $p3);
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $i5 := $ult.i32(0, $i4);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4424, 1));
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 1);
    call {:si_unique_call 2168} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i32($i21, 32);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4424, 1));
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.6, $p23);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref($i25, 16)), $mul.ref(0, 1));
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p28, $p1);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4424, 1));
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.6, $p29);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i30);
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref($i31, 16)), $mul.ref(8, 1));
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p34, $i2);
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4424, 1));
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p35, $i21);
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.6, $p36);
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 3144)), $mul.ref(48, 1));
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.6, $p38);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.6, $p40);
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.6, $p42);
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 3144)), $mul.ref(48, 1));
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.6, $p44);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} vslice_dummy_var_180 := drm_debugfs_create_files($p1, $i2, $p41, $p45);
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.6, $p47);
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 3144)), $mul.ref(56, 1));
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.6, $p49);
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.6, $p51);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.6, $p53);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 3144)), $mul.ref(56, 1));
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.6, $p55);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} vslice_dummy_var_181 := drm_debugfs_create_files($p1, $i2, $p52, $p56);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb13:
    assume $i22 == 1;
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2169} drm_err.ref(.str.49);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} drm_err.ref(.str.50);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb8;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $i7, $p10, $p11, $i12, $i13, $i14, $i16, $i17, $i18, $i6 := qxl_debugfs_add_files_loop_$bb4($p0, $p1, $p3, $i7, $p10, $p11, $i12, $i13, $i14, $i16, $i17, $i18, $i6);
    goto $bb4_last;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref($i7, 16)), $mul.ref(0, 1));
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i12, $i13);
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i6, 1);
    call {:si_unique_call 2167} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p3);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $i18 := $ult.i32($i16, $i17);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i16;
    goto $bb10_dummy;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9019;
}



const drm_mm_dump_table: ref;

axiom drm_mm_dump_table == $sub.ref(0, 824697);

procedure drm_mm_dump_table($p0: ref, $p1: ref) returns ($r: i32);



const qxl_ttm_mem_global_init: ref;

axiom qxl_ttm_mem_global_init == $sub.ref(0, 825729);

procedure qxl_ttm_mem_global_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_ttm_mem_global_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} $i4 := ttm_mem_global_init($p3);
    call {:si_unique_call 2174} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const qxl_ttm_mem_global_release: ref;

axiom qxl_ttm_mem_global_release == $sub.ref(0, 826761);

procedure qxl_ttm_mem_global_release($p0: ref);
  free requires assertsPassed;



implementation qxl_ttm_mem_global_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} ttm_mem_global_release($p3);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    return;
}



const drm_global_item_ref: ref;

axiom drm_global_item_ref == $sub.ref(0, 827793);

procedure drm_global_item_ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_global_item_ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2176} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2177} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ttm_bo_global_init: ref;

axiom ttm_bo_global_init == $sub.ref(0, 828825);

procedure ttm_bo_global_init($p0: ref) returns ($r: i32);



const ttm_bo_global_release: ref;

axiom ttm_bo_global_release == $sub.ref(0, 829857);

procedure ttm_bo_global_release($p0: ref);



const ttm_mem_global_release: ref;

axiom ttm_mem_global_release == $sub.ref(0, 830889);

procedure ttm_mem_global_release($p0: ref);
  free requires assertsPassed;



implementation ttm_mem_global_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    return;
}



const ttm_mem_global_init: ref;

axiom ttm_mem_global_init == $sub.ref(0, 831921);

procedure ttm_mem_global_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_mem_global_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2178} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2179} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const qxl_dump_mode: ref;

axiom qxl_dump_mode == $sub.ref(0, 832953);

procedure qxl_dump_mode($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation qxl_dump_mode($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, drm_debug);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 4);
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2180} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 2181} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.6, $p12);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.6, $p18);
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.6, $p20);
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p22);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.6, $p24);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2182} drm_ut_debug_printk.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32(.str.107, .str.108, $i11, $i13, $i15, $i17, $i19, $i21, $i23, $i25);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_arch_io_io_mem_remap: ref;

axiom ldv_linux_arch_io_io_mem_remap == $sub.ref(0, 833985);

procedure ldv_linux_arch_io_io_mem_remap() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.64;



implementation ldv_linux_arch_io_io_mem_remap() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} $p0 := ldv_undef_ptr();
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $i3 := $M.64;
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $M.64 := $i4;
    call {:si_unique_call 2184} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32($i4);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ioremap_wc: ref;

axiom ioremap_wc == $sub.ref(0, 835017);

procedure ioremap_wc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap_wc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} {:cexpr "ioremap_wc:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 2186} {:cexpr "ioremap_wc:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2187} $p2 := external_alloc();
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const drm_read: ref;

axiom drm_read == $sub.ref(0, 836049);

procedure drm_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation drm_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2188} {:cexpr "drm_read:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2189} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 2190} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const drm_poll: ref;

axiom drm_poll == $sub.ref(0, 837081);

procedure drm_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2191} $i2 := __VERIFIER_nondet_uint();
    call {:si_unique_call 2192} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i2);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const drm_ioctl: ref;

axiom drm_ioctl == $sub.ref(0, 838113);

procedure drm_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation drm_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2193} {:cexpr "drm_ioctl:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2194} {:cexpr "drm_ioctl:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2195} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 2196} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const qxl_mmap: ref;

axiom qxl_mmap == $sub.ref(0, 839145);

procedure qxl_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.76, $M.6, $CurrAddr;



implementation qxl_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i12: i32;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var vslice_dummy_var_182: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.6, $p2);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $i4 := $ule.i64($i3, 1048575);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2197} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 2198} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 728)), $mul.ref(40, 1));
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i25 := $M.45;
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i25, 0);
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1));
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2202} $i33 := ttm_bo_mmap($p0, $p1, $p32);
    call {:si_unique_call 2203} {:cexpr "r"} boogie_si_record_i32($i33);
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2204} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 2205} {:cexpr "tmp___0"} boogie_si_record_i64($i37);
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p39 := $M.76;
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2206} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 2207} {:cexpr "tmp___1"} boogie_si_record_i64($i44);
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p50, qxl_ttm_vm_ops);
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb14:
    assume $i45 == 1;
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.6, $p46);
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $M.76 := $p47;
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    $p48 := $M.76;
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_44 := $M.6;
    cmdloc_dummy_var_45 := $M.6;
    call {:si_unique_call 2208} cmdloc_dummy_var_46 := $memcpy.i8(cmdloc_dummy_var_44, cmdloc_dummy_var_45, qxl_ttm_vm_ops, $p49, 80, $zext.i32.i64(8), 0 == 1);
    $M.6 := cmdloc_dummy_var_46;
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_ttm_vm_ops, $mul.ref(0, 80)), $mul.ref(16, 1)), qxl_ttm_fault);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $i12 := $i33;
    goto $bb3;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p27);
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.6, $p29);
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2201} qxl_io_log.ref.ref.ref.ref.i64($p22, .str.12, .str.10, $p28, $i30);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2200} drm_err.ref(.str.11);
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.6, $p9);
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2199} vslice_dummy_var_182 := printk.ref.ref.i64(.str.9, .str.10, $i10);
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;
}



const drm_open: ref;

axiom drm_open == $sub.ref(0, 840177);

procedure drm_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2209} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2210} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const drm_release: ref;

axiom drm_release == $sub.ref(0, 841209);

procedure drm_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2211} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2212} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ttm_bo_mmap: ref;

axiom ttm_bo_mmap == $sub.ref(0, 842241);

procedure ttm_bo_mmap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_mmap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2213} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2214} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const qxl_ttm_fault: ref;

axiom qxl_ttm_fault == $sub.ref(0, 843273);

procedure qxl_ttm_fault($p0: ref, $p1: ref) returns ($r: i32);



const qxl_pci_probe: ref;

axiom qxl_pci_probe == $sub.ref(0, 844305);

procedure qxl_pci_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_pci_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(72, 1));
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.6, $p2);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    $i5 := $ule.i32($i4, 3);
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2216} $i7 := drm_get_pci_dev($p0, $p1, qxl_driver);
    call {:si_unique_call 2217} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2215} drm_err.ref(.str.78);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const qxl_pci_remove: ref;

axiom qxl_pci_remove == $sub.ref(0, 845337);

procedure qxl_pci_remove($p0: ref);
  free requires assertsPassed;



implementation qxl_pci_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2219} drm_put_dev($p2);
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    return;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 846369);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const drm_put_dev: ref;

axiom drm_put_dev == $sub.ref(0, 847401);

procedure drm_put_dev($p0: ref);
  free requires assertsPassed;



implementation drm_put_dev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 848433);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(512, 1));
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const drm_get_pci_dev: ref;

axiom drm_get_pci_dev == $sub.ref(0, 849465);

procedure drm_get_pci_dev($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_get_pci_dev($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2221} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2222} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const qxl_pm_suspend: ref;

axiom qxl_pm_suspend == $sub.ref(0, 850497);

procedure qxl_pm_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.41, $M.36, $CurrAddr, assertsPassed, $M.42, $M.52, $M.72, $M.38, $M.39, $M.35, $M.40, $M.37, $M.44, $M.53, $M.43, $M.75, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.65, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64;



implementation qxl_pm_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var vslice_dummy_var_183: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 152), 2976));
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2223} $p3 := pci_get_drvdata($p2);
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2224} $i5 := qxl_drm_freeze($p4);
    goto SeqInstr_1453, SeqInstr_1454;

  SeqInstr_1454:
    assume assertsPassed;
    goto SeqInstr_1455;

  SeqInstr_1455:
    call {:si_unique_call 2225} {:cexpr "error"} boogie_si_record_i32($i5);
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2226} pci_disable_device($p2);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2227} vslice_dummy_var_183 := pci_set_power_state($p2, 3);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;

  SeqInstr_1453:
    assume !assertsPassed;
    return;
}



const qxl_pm_resume: ref;

axiom qxl_pm_resume == $sub.ref(0, 851529);

procedure qxl_pm_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.32, $M.42, $M.71, $M.43, $CurrAddr, $M.36, $M.40, assertsPassed, $M.55, $M.65;



implementation qxl_pm_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i8: i32;
  var vslice_dummy_var_184: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 152), 2976));
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2228} $p3 := pci_get_drvdata($p2);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2229} vslice_dummy_var_184 := pci_set_power_state($p2, 0);
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2230} pci_restore_state($p2);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2231} $i6 := pci_enable_device($p2);
    call {:si_unique_call 2232} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} $i9 := qxl_drm_resume($p4, 0);
    goto SeqInstr_1456, SeqInstr_1457;

  SeqInstr_1457:
    assume assertsPassed;
    goto SeqInstr_1458;

  SeqInstr_1458:
    call {:si_unique_call 2234} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    $i8 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_1456:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 5);
    goto $bb3;
}



const qxl_pm_freeze: ref;

axiom qxl_pm_freeze == $sub.ref(0, 852561);

procedure qxl_pm_freeze($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.41, $M.36, $CurrAddr, assertsPassed, $M.42, $M.52, $M.72, $M.38, $M.39, $M.35, $M.40, $M.37, $M.44, $M.53, $M.43, $M.75, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.65, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64;



implementation qxl_pm_freeze($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 152), 2976));
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2235} $p3 := pci_get_drvdata($p2);
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2236} $i5 := qxl_drm_freeze($p4);
    goto SeqInstr_1459, SeqInstr_1460;

  SeqInstr_1460:
    assume assertsPassed;
    goto SeqInstr_1461;

  SeqInstr_1461:
    call {:si_unique_call 2237} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_1459:
    assume !assertsPassed;
    return;
}



const qxl_pm_thaw: ref;

axiom qxl_pm_thaw == $sub.ref(0, 853593);

procedure qxl_pm_thaw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.32, $M.42, $M.71, $M.43, $CurrAddr, $M.36, $M.40, assertsPassed, $M.55, $M.65;



implementation qxl_pm_thaw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 152), 2976));
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2238} $p3 := pci_get_drvdata($p2);
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2239} $i5 := qxl_drm_resume($p4, 1);
    goto SeqInstr_1462, SeqInstr_1463;

  SeqInstr_1463:
    assume assertsPassed;
    goto SeqInstr_1464;

  SeqInstr_1464:
    call {:si_unique_call 2240} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_1462:
    assume !assertsPassed;
    return;
}



const qxl_pm_restore: ref;

axiom qxl_pm_restore == $sub.ref(0, 854625);

procedure qxl_pm_restore($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.32, $M.42, $M.71, $M.43, $CurrAddr, $M.36, $M.40, assertsPassed, $M.55, $M.65;



implementation qxl_pm_restore($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 152), 2976));
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2241} $p3 := pci_get_drvdata($p2);
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2242} qxl_io_reset($p7);
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2243} $i8 := qxl_drm_resume($p4, 0);
    goto SeqInstr_1465, SeqInstr_1466;

  SeqInstr_1466:
    assume assertsPassed;
    goto SeqInstr_1467;

  SeqInstr_1467:
    call {:si_unique_call 2244} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_1465:
    assume !assertsPassed;
    return;
}



const qxl_drm_resume: ref;

axiom qxl_drm_resume == $sub.ref(0, 855657);

procedure qxl_drm_resume($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.32, $M.42, $M.71, $M.43, $CurrAddr, $M.36, $M.40, assertsPassed, $M.55, $M.65;



implementation qxl_drm_resume($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var vslice_dummy_var_185: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2245} {:cexpr "qxl_drm_resume:arg:thaw"} boogie_si_record_i1($i1);
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 5424)), $mul.ref(8, 1));
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p8, 39);
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i2);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2246} qxl_reinit_memslots($p5);
    goto SeqInstr_1468, SeqInstr_1469;

  SeqInstr_1469:
    assume assertsPassed;
    goto SeqInstr_1470;

  SeqInstr_1470:
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3056, 1));
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2247} qxl_ring_init_hdr($p11);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} vslice_dummy_var_185 := qxl_create_monitors_object($p5);
    goto SeqInstr_1471, SeqInstr_1472;

  SeqInstr_1472:
    assume assertsPassed;
    goto SeqInstr_1473;

  SeqInstr_1473:
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2249} drm_helper_resume_force_mode($p0);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2250} console_lock();
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2251} qxl_fbdev_set_suspend($p5, 0);
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2252} console_unlock();
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2253} drm_kms_helper_poll_enable($p0);
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_1471:
    assume !assertsPassed;
    return;

  SeqInstr_1468:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_reinit_memslots: ref;

axiom qxl_reinit_memslots == $sub.ref(0, 856689);

procedure qxl_reinit_memslots($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.55, assertsPassed;



implementation qxl_reinit_memslots($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3105, 1));
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.6, $p1);
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3096, 1));
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3105, 1));
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.6, $p6);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i64($i7);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p5, $mul.ref($i8, 32));
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} setup_hw_slot($p0, $i3, $p9);
    goto SeqInstr_1474, SeqInstr_1475;

  SeqInstr_1475:
    assume assertsPassed;
    goto SeqInstr_1476;

  SeqInstr_1476:
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3106, 1));
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.6, $p10);
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3096, 1));
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3106, 1));
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p14, $mul.ref($i17, 32));
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2255} setup_hw_slot($p0, $i12, $p18);
    goto SeqInstr_1477, SeqInstr_1478;

  SeqInstr_1478:
    assume assertsPassed;
    goto SeqInstr_1479;

  SeqInstr_1479:
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1477:
    assume !assertsPassed;
    return;

  SeqInstr_1474:
    assume !assertsPassed;
    return;
}



const drm_helper_resume_force_mode: ref;

axiom drm_helper_resume_force_mode == $sub.ref(0, 857721);

procedure drm_helper_resume_force_mode($p0: ref);
  free requires assertsPassed;



implementation drm_helper_resume_force_mode($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    return;
}



const console_lock: ref;

axiom console_lock == $sub.ref(0, 858753);

procedure console_lock();
  free requires assertsPassed;



implementation console_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    return;
}



const qxl_fbdev_set_suspend: ref;

axiom qxl_fbdev_set_suspend == $sub.ref(0, 859785);

procedure qxl_fbdev_set_suspend($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation qxl_fbdev_set_suspend($p0: ref, $i1: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2256} {:cexpr "qxl_fbdev_set_suspend:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(24, 1));
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 528)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2257} fb_set_suspend($p7, $i1);
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    return;
}



const console_unlock: ref;

axiom console_unlock == $sub.ref(0, 860817);

procedure console_unlock();
  free requires assertsPassed;



implementation console_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    return;
}



const drm_kms_helper_poll_enable: ref;

axiom drm_kms_helper_poll_enable == $sub.ref(0, 861849);

procedure drm_kms_helper_poll_enable($p0: ref);
  free requires assertsPassed;



implementation drm_kms_helper_poll_enable($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    return;
}



const fb_set_suspend: ref;

axiom fb_set_suspend == $sub.ref(0, 862881);

procedure fb_set_suspend($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation fb_set_suspend($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2258} {:cexpr "fb_set_suspend:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    return;
}



const qxl_drm_freeze: ref;

axiom qxl_drm_freeze == $sub.ref(0, 863913);

procedure qxl_drm_freeze($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.41, $M.36, $CurrAddr, assertsPassed, $M.42, $M.52, $M.72, $M.38, $M.39, $M.35, $M.40, $M.37, $M.44, $M.53, $M.43, $M.75, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.65, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64;



implementation qxl_drm_freeze($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p18: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i1;
  var vslice_dummy_var_190: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3144)), $mul.ref(1144, 1));
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2259} drm_kms_helper_poll_disable($p0);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} console_lock();
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2261} qxl_fbdev_set_suspend($p5, 1);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2262} console_unlock();
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3144)), $mul.ref(1216, 1)), $mul.ref(1008, 1)), $mul.ref(0, 1));
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 16), 1160));
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 16), 1160)), $mul.ref(16, 1));
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3144)), $mul.ref(1216, 1)), $mul.ref(1008, 1));
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i13, $i16);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} vslice_dummy_var_186 := qxl_destroy_monitors_object($p5);
    goto SeqInstr_1483, SeqInstr_1484;

  SeqInstr_1484:
    assume assertsPassed;
    goto SeqInstr_1485;

  SeqInstr_1485:
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2265} vslice_dummy_var_187 := qxl_surf_evict($p5);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} vslice_dummy_var_188 := qxl_vram_evict($p5);
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3064, 1));
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.6, $p38);
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2267} $i40 := qxl_check_idle($p39);
    goto SeqInstr_1486, SeqInstr_1487;

  SeqInstr_1487:
    assume assertsPassed;
    goto SeqInstr_1488;

  SeqInstr_1488:
    call {:si_unique_call 2268} {:cexpr "tmp"} boogie_si_record_i32($i40);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3056, 1));
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.6, $p45);
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2271} $i47 := qxl_check_idle($p46);
    goto SeqInstr_1492, SeqInstr_1493;

  SeqInstr_1493:
    assume assertsPassed;
    goto SeqInstr_1494;

  SeqInstr_1494:
    call {:si_unique_call 2272} {:cexpr "tmp___0"} boogie_si_record_i32($i47);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} vslice_dummy_var_190 := pci_save_state($p2);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb20:
    assume $i48 == 1;
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    call $p50, $i51, $i52, vslice_dummy_var_189 := qxl_drm_freeze_loop_$bb23($p5, $p45, $p50, $i51, $i52, vslice_dummy_var_189);
    goto $bb23_last;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2273} vslice_dummy_var_189 := qxl_queue_garbage_collect($p5, 1);
    goto SeqInstr_1495, SeqInstr_1496;

  SeqInstr_1496:
    assume assertsPassed;
    goto SeqInstr_1497;

  SeqInstr_1497:
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.6, $p45);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} $i51 := qxl_check_idle($p50);
    goto SeqInstr_1498, SeqInstr_1499;

  SeqInstr_1499:
    assume assertsPassed;
    goto SeqInstr_1500;

  SeqInstr_1500:
    call {:si_unique_call 2275} {:cexpr "tmp___0"} boogie_si_record_i32($i51);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i52 == 1);
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb25_dummy;

  SeqInstr_1498:
    assume !assertsPassed;
    return;

  SeqInstr_1495:
    assume !assertsPassed;
    return;

  SeqInstr_1492:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i41 == 1;
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call $p42, $i43, $i44 := qxl_drm_freeze_loop_$bb15($p38, $p42, $i43, $i44);
    goto $bb15_last;

  $bb16:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.6, $p38);
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2269} $i43 := qxl_check_idle($p42);
    goto SeqInstr_1489, SeqInstr_1490;

  SeqInstr_1490:
    assume assertsPassed;
    goto SeqInstr_1491;

  SeqInstr_1491:
    call {:si_unique_call 2270} {:cexpr "tmp"} boogie_si_record_i32($i43);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i44 == 1);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb17_dummy;

  SeqInstr_1489:
    assume !assertsPassed;
    return;

  SeqInstr_1486:
    assume !assertsPassed;
    return;

  SeqInstr_1483:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    $p18 := $p11;
    goto $bb4;

  $bb4:
    call $p19, $p20, $p21, $p22, $i23, $i24, $p25, $p26, $p28, $p29, $p30, $p31, $p32, $i33, $i34, $p18 := qxl_drm_freeze_loop_$bb4($i16, $p19, $p20, $p21, $p22, $i23, $i24, $p25, $p26, $p28, $p29, $p30, $p31, $p32, $i33, $i34, $p18);
    goto $bb4_last;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1160)), $mul.ref(744, 1));
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p18, $mul.ref(0, 1160)), $mul.ref(264, 1));
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.6, $p22);
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 1160)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref($sub.ref(0, 16), 1160));
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p30, $mul.ref($sub.ref(0, 16), 1160)), $mul.ref(16, 1));
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, $i16);
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i34 == 1);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $p18 := $p31;
    goto $bb9_dummy;

  $bb6:
    assume $i24 == 1;
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p21, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.6, $p25);
    call {:si_unique_call 2263} devirtbounce.15($p26, $p18);
    goto SeqInstr_1480, SeqInstr_1481;

  SeqInstr_1481:
    assume assertsPassed;
    goto SeqInstr_1482;

  SeqInstr_1482:
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_1480:
    assume !assertsPassed;
    return;

  $bb25_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb17_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9405;
}



const drm_kms_helper_poll_disable: ref;

axiom drm_kms_helper_poll_disable == $sub.ref(0, 864945);

procedure drm_kms_helper_poll_disable($p0: ref);
  free requires assertsPassed;



implementation drm_kms_helper_poll_disable($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    return;
}



const qxl_surf_evict: ref;

axiom qxl_surf_evict == $sub.ref(0, 865977);

procedure qxl_surf_evict($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_surf_evict($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1));
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2277} $i3 := ttm_bo_evict_mm($p2, 3);
    call {:si_unique_call 2278} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const qxl_vram_evict: ref;

axiom qxl_vram_evict == $sub.ref(0, 867009);

procedure qxl_vram_evict($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_vram_evict($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1));
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2279} $i3 := ttm_bo_evict_mm($p2, 2);
    call {:si_unique_call 2280} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_save_state: ref;

axiom pci_save_state == $sub.ref(0, 868041);

procedure pci_save_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_save_state($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2281} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2282} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ttm_bo_evict_mm: ref;

axiom ttm_bo_evict_mm == $sub.ref(0, 869073);

procedure ttm_bo_evict_mm($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_evict_mm($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2283} {:cexpr "ttm_bo_evict_mm:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2284} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2285} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_set_power_state: ref;

axiom pci_set_power_state == $sub.ref(0, 870105);

procedure pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2286} {:cexpr "pci_set_power_state:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2287} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2288} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_restore_state: ref;

axiom pci_restore_state == $sub.ref(0, 871137);

procedure pci_restore_state($p0: ref);
  free requires assertsPassed;



implementation pci_restore_state($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 872169);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2289} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2290} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 873201);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    return;
}



const qxl_user_framebuffer_destroy: ref;

axiom qxl_user_framebuffer_destroy == $sub.ref(0, 874233);

procedure qxl_user_framebuffer_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.35, $M.6, assertsPassed;



implementation qxl_user_framebuffer_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2292} drm_framebuffer_cleanup($p0);
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2293} kfree($p8);
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2291} drm_gem_object_unreference_unlocked($p7);
    goto SeqInstr_1501, SeqInstr_1502;

  SeqInstr_1502:
    assume assertsPassed;
    goto SeqInstr_1503;

  SeqInstr_1503:
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1501:
    assume !assertsPassed;
    return;
}



const qxl_framebuffer_surface_dirty: ref;

axiom qxl_framebuffer_surface_dirty == $sub.ref(0, 875265);

procedure qxl_framebuffer_surface_dirty($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.78, $M.79, $M.80, $M.81, $M.6, $M.46, $M.73, $M.42, $M.38, $M.39, $CurrAddr, $M.43, $M.52, $M.53, $M.49, $M.40, $M.44, assertsPassed, $M.41, $M.67, $M.68, $M.75, $M.37, $M.72, $M.74, $M.69, $M.70, $M.32, $M.71, $M.36, $M.64, $M.35, $M.54, $M.55, $M.65;



implementation qxl_framebuffer_surface_dirty($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i16;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i16;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i16;
  var $p37: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $p46: ref;
  var $p47: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2294} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2295} {:cexpr "qxl_framebuffer_surface_dirty:arg:flags"} boogie_si_record_i32($i2);
    call {:si_unique_call 2296} {:cexpr "qxl_framebuffer_surface_dirty:arg:color"} boogie_si_record_i32($i3);
    call {:si_unique_call 2297} {:cexpr "qxl_framebuffer_surface_dirty:arg:num_clips"} boogie_si_record_i32($i5);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.77, $p9);
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p11);
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.77, $p14);
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2298} drm_modeset_lock_all($p15);
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.77, $p16);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p18, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1264, 1));
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.6, $p20);
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i21);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.77, $p23);
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2299} drm_modeset_unlock_all($p24);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i5, 0);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i2, 1);
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i44, $i45 := $i5, 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p38, $i39, $i40 := $p4, $i44, $i45;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2300} qxl_draw_dirty_fb($p13, $p7, $p19, $i2, $i3, $p38, $i39, $i40);
    goto SeqInstr_1504, SeqInstr_1505;

  SeqInstr_1505:
    assume assertsPassed;
    goto SeqInstr_1506;

  SeqInstr_1506:
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.77, $p46);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2301} drm_modeset_unlock_all($p47);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1504:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i42 == 1;
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $i43 := $udiv.i32($i5, 2);
    call {:si_unique_call 2302} {:cexpr "num_clips"} boogie_si_record_i32($i43);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    $i44, $i45 := $i43, 2;
    goto $bb10;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    $M.78 := $store.i16($M.78, $p26, 0);
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.78, $p27);
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    $M.79 := $store.i16($M.79, $p29, $i28);
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(88, 1));
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.77, $p30);
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $M.80 := $store.i16($M.80, $p33, $i32);
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(92, 1));
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.77, $p34);
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $M.81 := $store.i16($M.81, $p37, $i36);
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $p38, $i39, $i40 := $p6, 1, 1;
    goto $bb7;
}



const qxl_draw_dirty_fb: ref;

axiom qxl_draw_dirty_fb == $sub.ref(0, 876297);

procedure qxl_draw_dirty_fb($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $p5: ref, $i6: i32, $i7: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.73, $M.42, $M.38, $M.39, $M.43, $M.52, $CurrAddr, $M.53, $M.49, $M.40, $M.44, assertsPassed, $M.41, $M.67, $M.68, $M.75, $M.37, $M.72, $M.74, $M.69, $M.70, $M.32, $M.71, $M.36, $M.64, $M.35, $M.54, $M.55, $M.65;



implementation qxl_draw_dirty_fb($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $p5: ref, $i6: i32, $i7: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $i36: i1;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $p62: ref;
  var $i63: i16;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i32;
  var $i68: i64;
  var $p69: ref;
  var $i70: i1;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i64;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $i166: i1;
  var $p169: ref;
  var $i170: i16;
  var $i171: i32;
  var $i172: i64;
  var $p174: ref;
  var $p175: ref;
  var $i176: i16;
  var $i177: i32;
  var $i178: i64;
  var $p180: ref;
  var $p181: ref;
  var $i182: i16;
  var $i183: i32;
  var $i184: i64;
  var $p186: ref;
  var $p187: ref;
  var $i188: i16;
  var $i189: i32;
  var $i190: i64;
  var $p192: ref;
  var $i193: i32;
  var $i194: i64;
  var $p195: ref;
  var $i196: i1;
  var $i167: i32;
  var $p168: ref;
  var $p197: ref;
  var $p198: ref;
  var $p200: ref;
  var $i96: i32;
  var $i201: i1;
  var $p202: ref;
  var $i88: i32;
  var $p203: ref;
  var $i84: i32;
  var $i80: i32;
  var $i204: i1;
  var $p205: ref;
  var vslice_dummy_var_191: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2303} $p8 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2304} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2305} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2306} $p11 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2307} $p12 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2308} {:cexpr "qxl_draw_dirty_fb:arg:flags"} boogie_si_record_i32($i3);
    call {:si_unique_call 2309} {:cexpr "qxl_draw_dirty_fb:arg:color"} boogie_si_record_i32($i4);
    call {:si_unique_call 2310} {:cexpr "qxl_draw_dirty_fb:arg:num_clips"} boogie_si_record_i32($i6);
    call {:si_unique_call 2311} {:cexpr "qxl_draw_dirty_fb:arg:inc"} boogie_si_record_i32($i7);
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(0, 4));
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.77, $p15);
    call {:si_unique_call 2312} {:cexpr "stride"} boogie_si_record_i32($i16);
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(100, 1));
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.77, $p18);
    call {:si_unique_call 2313} {:cexpr "depth"} boogie_si_record_i32($i19);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2314} $i20 := alloc_drawable($p0, $p10);
    goto SeqInstr_1507, SeqInstr_1508;

  SeqInstr_1508:
    assume assertsPassed;
    goto SeqInstr_1509;

  SeqInstr_1509:
    call {:si_unique_call 2315} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.79, $p22);
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    call {:si_unique_call 2316} {:cexpr "left"} boogie_si_record_i32($i24);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.80, $p25);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    call {:si_unique_call 2317} {:cexpr "right"} boogie_si_record_i32($i27);
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.78, $p28);
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    call {:si_unique_call 2318} {:cexpr "top"} boogie_si_record_i32($i30);
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.81, $p31);
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    call {:si_unique_call 2319} {:cexpr "bottom"} boogie_si_record_i32($i33);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i7);
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p5, $mul.ref($i34, 8));
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    $i36 := $ult.i32(1, $i6);
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39, $i40 := $i24, $i27, $i30, $i33;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32($i38, $i37);
    call {:si_unique_call 2325} {:cexpr "width"} boogie_si_record_i32($i75);
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    $i76 := $sub.i32($i40, $i39);
    call {:si_unique_call 2326} {:cexpr "height"} boogie_si_record_i32($i76);
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.6, $p10);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2327} $i78 := alloc_clips($p0, $p77, $i6, $p11);
    goto SeqInstr_1510, SeqInstr_1511;

  SeqInstr_1511:
    assume assertsPassed;
    goto SeqInstr_1512;

  SeqInstr_1512:
    call {:si_unique_call 2328} {:cexpr "ret"} boogie_si_record_i32($i78);
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.6, $p10);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2329} $i82 := qxl_image_alloc_objects($p0, $p81, $p12, $i76, $i16);
    goto SeqInstr_1513, SeqInstr_1514;

  SeqInstr_1514:
    assume assertsPassed;
    goto SeqInstr_1515;

  SeqInstr_1515:
    call {:si_unique_call 2330} {:cexpr "ret"} boogie_si_record_i32($i82);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.6, $p10);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} $i86 := qxl_release_reserve_list($p85, 1);
    goto SeqInstr_1516, SeqInstr_1517;

  SeqInstr_1517:
    assume assertsPassed;
    goto SeqInstr_1518;

  SeqInstr_1518:
    call {:si_unique_call 2333} {:cexpr "ret"} boogie_si_record_i32($i86);
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p89, $i37);
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p90, $i38);
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p91, $i39);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p92, $i40);
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.6, $p10);
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2335} $i94 := make_drawable($p0, 0, 3, $p8, $p93);
    goto SeqInstr_1519, SeqInstr_1520;

  SeqInstr_1520:
    assume assertsPassed;
    goto SeqInstr_1521;

  SeqInstr_1521:
    call {:si_unique_call 2336} {:cexpr "ret"} boogie_si_record_i32($i94);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2337} $i97 := qxl_bo_kmap($p2, $p9);
    call {:si_unique_call 2338} {:cexpr "ret"} boogie_si_record_i32($i97);
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.6, $p10);
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.73, $p12);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.42, $p9);
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2339} $i102 := qxl_image_init($p0, $p99, $p100, $p101, $i37, $i39, $i75, $i76, $i19, $i16);
    goto SeqInstr_1522, SeqInstr_1523;

  SeqInstr_1523:
    assume assertsPassed;
    goto SeqInstr_1524;

  SeqInstr_1524:
    call {:si_unique_call 2340} {:cexpr "ret"} boogie_si_record_i32($i102);
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} qxl_bo_kunmap($p2);
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.6, $p11);
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2342} $p105 := drawable_set_clipping($p0, $u8, $i6, $p104);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p105);
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    $i107 := $eq.i64($i106, 0);
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.6, $p10);
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2343} $p109 := qxl_release_map($p0, $p108);
    goto SeqInstr_1525, SeqInstr_1526;

  SeqInstr_1526:
    assume assertsPassed;
    goto SeqInstr_1527;

  SeqInstr_1527:
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p112, 1);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.6, $p11);
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2344} $i114 := qxl_bo_physical_address($p0, $p113, 0);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p116, $i114);
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p117);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p118, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p120, 0);
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p122, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p124, $i76);
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p125);
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p126, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p128, 0);
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p129);
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p130, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(12, 1));
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p132, $i75);
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p133);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p134, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p135, 8);
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p136);
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 56)), $mul.ref(26, 1));
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p138, 0);
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p140, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p142, 0);
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($add.ref($p144, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p147, 0);
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p148);
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($add.ref($p149, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p152, 0);
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p153);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p154, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(16, 1));
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p156, 0);
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.73, $p12);
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p157, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.6, $p158);
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2345} $i160 := qxl_bo_physical_address($p0, $p159, 0);
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p161);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p162, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p163, $i160);
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.6, $p10);
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2346} qxl_release_unmap($p0, $p164, $p165);
    goto SeqInstr_1528, SeqInstr_1529;

  SeqInstr_1529:
    assume assertsPassed;
    goto SeqInstr_1530;

  SeqInstr_1530:
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    $i166 := $ult.i32(0, $i6);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i166 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p197 := $load.ref($M.6, $p11);
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2348} qxl_bo_kunmap($p197);
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.6, $p10);
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} vslice_dummy_var_191 := qxl_push_command_ring_release($p0, $p198, 1, 0);
    goto SeqInstr_1531, SeqInstr_1532;

  SeqInstr_1532:
    assume assertsPassed;
    goto SeqInstr_1533;

  SeqInstr_1533:
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    $p200 := $load.ref($M.6, $p10);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2350} qxl_release_fence_buffer_objects($p200);
    goto SeqInstr_1534, SeqInstr_1535;

  SeqInstr_1535:
    assume assertsPassed;
    goto SeqInstr_1536;

  SeqInstr_1536:
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $i96 := $i102;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    $i201 := $ne.i32($i96, 0);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i201} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i88 := $i96;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    $p203 := $load.ref($M.73, $p12);
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2334} qxl_image_free_objects($p0, $p203);
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $i84 := $i88;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2331} qxl_bo_unref($p11);
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    $i80 := $i84;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    $i204 := $ne.i32($i80, 0);
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i204} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb61:
    assume $i204 == 1;
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.6, $p10);
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2352} free_drawable($p0, $p205);
    goto SeqInstr_1537, SeqInstr_1538;

  SeqInstr_1538:
    assume assertsPassed;
    goto SeqInstr_1539;

  SeqInstr_1539:
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    goto $bb63;

  SeqInstr_1537:
    assume !assertsPassed;
    return;

  $bb58:
    assume $i201 == 1;
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $p202 := $load.ref($M.6, $p10);
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2351} qxl_release_backoff_reserve_list($p202);
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_1534:
    assume !assertsPassed;
    return;

  SeqInstr_1531:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i166 == 1;
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    $i167, $p168 := 0, $p5;
    goto $bb53;

  $bb53:
    call $p169, $i170, $i171, $i172, $p174, $p175, $i176, $i177, $i178, $p180, $p181, $i182, $i183, $i184, $p186, $p187, $i188, $i189, $i190, $p192, $i193, $i194, $p195, $i196, $i167, $p168 := qxl_draw_dirty_fb_loop_$bb53($i6, $i7, $p105, $p169, $i170, $i171, $i172, $p174, $p175, $i176, $i177, $i178, $p180, $p181, $i182, $i183, $i184, $p186, $p187, $i188, $i189, $i190, $p192, $i193, $i194, $p195, $i196, $i167, $p168);
    goto $bb53_last;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p168, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    $i170 := $load.i16($M.79, $p169);
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $i171 := $zext.i16.i32($i170);
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    $i172 := $sext.i32.i64($i167);
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p105, $mul.ref($i172, 16)), $mul.ref(4, 1));
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p174, $i171);
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p168, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    $i176 := $load.i16($M.80, $p175);
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $i177 := $zext.i16.i32($i176);
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    $i178 := $sext.i32.i64($i167);
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p105, $mul.ref($i178, 16)), $mul.ref(12, 1));
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p180, $i177);
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p168, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    $i182 := $load.i16($M.78, $p181);
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    $i183 := $zext.i16.i32($i182);
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $i184 := $sext.i32.i64($i167);
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p105, $mul.ref($i184, 16)), $mul.ref(0, 1));
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p186, $i183);
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p168, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    $i188 := $load.i16($M.81, $p187);
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    $i189 := $zext.i16.i32($i188);
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    $i190 := $sext.i32.i64($i167);
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p105, $mul.ref($i190, 16)), $mul.ref(8, 1));
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p192, $i189);
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    $i193 := $add.i32($i167, 1);
    call {:si_unique_call 2347} {:cexpr "i"} boogie_si_record_i32($i193);
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    $i194 := $sext.i32.i64($i7);
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($p168, $mul.ref($i194, 8));
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $i196 := $ult.i32($i193, $i6);
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i196 == 1);
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb55:
    assume $i196 == 1;
    assume {:verifier.code 0} true;
    $i167, $p168 := $i193, $p195;
    goto $bb55_dummy;

  SeqInstr_1528:
    assume !assertsPassed;
    return;

  SeqInstr_1525:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i107 == 1;
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    $i96 := $i102;
    goto $bb39;

  $bb44:
    assume $i103 == 1;
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $i96 := $i102;
    goto $bb39;

  SeqInstr_1522:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i98 == 1;
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    $i96 := $i97;
    goto $bb39;

  $bb37:
    assume $i95 == 1;
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $i96 := $i94;
    goto $bb39;

  SeqInstr_1519:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i87 == 1;
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $i88 := $i86;
    goto $bb35;

  SeqInstr_1516:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i83 == 1;
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $i84 := $i82;
    goto $bb31;

  SeqInstr_1513:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i79 == 1;
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $i80 := $i78;
    goto $bb27;

  SeqInstr_1510:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i36 == 1;
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    $i41, $i42, $i43, $i44, $i45, $p46 := $i33, $i30, $i27, $i24, 1, $p35;
    goto $bb8;

  $bb8:
    call $p47, $i48, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $i56, $p57, $i58, $i59, $i60, $i61, $p62, $i63, $i64, $i65, $i66, $i67, $i68, $p69, $i70, $i41, $i42, $i43, $i44, $i45, $p46, $i71, $i72, $i73, $i74 := qxl_draw_dirty_fb_loop_$bb8($i6, $i7, $p47, $i48, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $i56, $p57, $i58, $i59, $i60, $i61, $p62, $i63, $i64, $i65, $i66, $i67, $i68, $p69, $i70, $i41, $i42, $i43, $i44, $i45, $p46, $i71, $i72, $i73, $i74);
    goto $bb8_last;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.79, $p47);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    call {:si_unique_call 2320} {:cexpr "__min2"} boogie_si_record_i32($i49);
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i44, $i49);
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i50 == 1);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $i51 := $i49;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p46, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.80, $p52);
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    call {:si_unique_call 2321} {:cexpr "__max2"} boogie_si_record_i32($i54);
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    $i55 := $sgt.i32($i43, $i54);
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i55 == 1);
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    $i56 := $i54;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p46, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.78, $p57);
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    call {:si_unique_call 2322} {:cexpr "__min2___0"} boogie_si_record_i32($i59);
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i42, $i59);
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i60 == 1);
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    $i61 := $i59;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p46, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.81, $p62);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i63);
    call {:si_unique_call 2323} {:cexpr "__max2___0"} boogie_si_record_i32($i64);
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $i65 := $sgt.i32($i41, $i64);
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i65 == 1);
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    $i66 := $i64;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i45, 1);
    call {:si_unique_call 2324} {:cexpr "i"} boogie_si_record_i32($i67);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i7);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p46, $mul.ref($i68, 8));
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    $i70 := $ult.i32($i67, $i6);
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $i71, $i72, $i73, $i74 := $i51, $i56, $i61, $i66;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39, $i40 := $i71, $i72, $i73, $i74;
    goto $bb7;

  $bb22:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i41, $i42, $i43, $i44, $i45, $p46 := $i66, $i61, $i56, $i51, $i67, $p69;
    goto $bb22_dummy;

  $bb19:
    assume $i65 == 1;
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    $i66 := $i41;
    goto $bb21;

  $bb16:
    assume $i60 == 1;
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    $i61 := $i42;
    goto $bb18;

  $bb13:
    assume $i55 == 1;
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    $i56 := $i43;
    goto $bb15;

  $bb10:
    assume $i50 == 1;
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    $i51 := $i44;
    goto $bb12;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1507:
    assume !assertsPassed;
    return;

  $bb55_dummy:
    assume false;
    return;

  $bb53_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9767;

  $bb22_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9586;
}



const alloc_clips: ref;

axiom alloc_clips == $sub.ref(0, 877329);

procedure alloc_clips($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $CurrAddr, assertsPassed;



implementation alloc_clips($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2353} {:cexpr "alloc_clips:arg:num_clips"} boogie_si_record_i32($i2);
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i2, 16);
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 24);
    call {:si_unique_call 2354} {:cexpr "size"} boogie_si_record_i32($i5);
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2355} $i7 := qxl_alloc_bo_reserved($p0, $p1, $i6, $p3);
    goto SeqInstr_1540, SeqInstr_1541;

  SeqInstr_1541:
    assume assertsPassed;
    goto SeqInstr_1542;

  SeqInstr_1542:
    call {:si_unique_call 2356} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_1540:
    assume !assertsPassed;
    return;
}



const drawable_set_clipping: ref;

axiom drawable_set_clipping == $sub.ref(0, 878361);

procedure drawable_set_clipping($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.42, $M.6, $M.43, $CurrAddr;



implementation drawable_set_clipping($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2357} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2358} {:cexpr "drawable_set_clipping:arg:num_clips"} boogie_si_record_i32($i2);
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2359} $i6 := qxl_bo_kmap($p3, $p5);
    call {:si_unique_call 2360} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.42, $p4);
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p10, $i2);
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.42, $p4);
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p13, 0);
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.42, $p4);
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p16, 0);
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i2, 16);
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.42, $p4);
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p20, $i17);
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.42, $p4);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    $p8 := $p23;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;
}



const drm_gem_object_unreference_unlocked: ref;

axiom drm_gem_object_unreference_unlocked == $sub.ref(0, 879393);

procedure drm_gem_object_unreference_unlocked($p0: ref);
  free requires assertsPassed;
  modifies $M.35, $M.6, assertsPassed;



implementation drm_gem_object_unreference_unlocked($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2361} $i5 := atomic_add_unless($p4, $sub.i32(0, 1), 1);
    call {:si_unique_call 2362} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 3144)), $mul.ref(96, 1));
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2363} ldv_mutex_lock_110($p9);
    goto SeqInstr_1543, SeqInstr_1544;

  SeqInstr_1544:
    assume assertsPassed;
    goto SeqInstr_1545;

  SeqInstr_1545:
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2364} $i12 := atomic_dec_and_test($p11);
    call {:si_unique_call 2365} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2366} $i16 := ldv__builtin_expect($i15, 1);
    call {:si_unique_call 2367} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref(0, 3144)), $mul.ref(96, 1));
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} ldv_mutex_unlock_111($p19);
    goto SeqInstr_1546, SeqInstr_1547;

  SeqInstr_1547:
    assume assertsPassed;
    goto SeqInstr_1548;

  SeqInstr_1548:
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_1546:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2368} drm_gem_object_free($p18);
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_1543:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_110: ref;

axiom ldv_mutex_lock_110 == $sub.ref(0, 880425);

procedure ldv_mutex_lock_110($p0: ref);
  free requires assertsPassed;
  modifies $M.35, assertsPassed;



implementation ldv_mutex_lock_110($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2370} ldv_linux_kernel_locking_mutex_mutex_lock_struct_mutex_of_drm_device($p0);
    goto SeqInstr_1549, SeqInstr_1550;

  SeqInstr_1550:
    assume assertsPassed;
    goto SeqInstr_1551;

  SeqInstr_1551:
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1549:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_111: ref;

axiom ldv_mutex_unlock_111 == $sub.ref(0, 881457);

procedure ldv_mutex_unlock_111($p0: ref);
  free requires assertsPassed;
  modifies $M.35, assertsPassed;



implementation ldv_mutex_unlock_111($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2371} ldv_linux_kernel_locking_mutex_mutex_unlock_struct_mutex_of_drm_device($p0);
    goto SeqInstr_1552, SeqInstr_1553;

  SeqInstr_1553:
    assume assertsPassed;
    goto SeqInstr_1554;

  SeqInstr_1554:
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1552:
    assume !assertsPassed;
    return;
}



const qxl_user_framebuffer_create: ref;

axiom qxl_user_framebuffer_create == $sub.ref(0, 882489);

procedure qxl_user_framebuffer_create($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $M.35, assertsPassed, $CurrAddr;



implementation qxl_user_framebuffer_create($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(20, 1)), $mul.ref(0, 4));
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.6, $p4);
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2372} $p6 := drm_gem_object_lookup($p0, $p1, $i5);
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2373} $p7 := kzalloc(144, 208);
    goto SeqInstr_1555, SeqInstr_1556;

  SeqInstr_1556:
    assume assertsPassed;
    goto SeqInstr_1557;

  SeqInstr_1557:
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2374} $i12 := qxl_framebuffer_init($p0, $p8, $p2, $p6);
    call {:si_unique_call 2375} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    $p11 := $p7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p8);
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2376} kfree($p14);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2377} drm_gem_object_unreference_unlocked($p6);
    goto SeqInstr_1558, SeqInstr_1559;

  SeqInstr_1559:
    assume assertsPassed;
    goto SeqInstr_1560;

  SeqInstr_1560:
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;

  SeqInstr_1558:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;

  SeqInstr_1555:
    assume !assertsPassed;
    return;
}



const qxl_framebuffer_init: ref;

axiom qxl_framebuffer_init == $sub.ref(0, 883521);

procedure qxl_framebuffer_init($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_framebuffer_init($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p10: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p4, $p3);
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2378} $i6 := drm_framebuffer_init($p0, $p5, qxl_fb_funcs);
    call {:si_unique_call 2379} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2380} drm_helper_mode_fill_fb_struct($p10, $p2);
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, $0.ref);
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    $i9 := $i6;
    goto $bb3;
}



const drm_framebuffer_init: ref;

axiom drm_framebuffer_init == $sub.ref(0, 884553);

procedure drm_framebuffer_init($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_framebuffer_init($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2381} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2382} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const drm_helper_mode_fill_fb_struct: ref;

axiom drm_helper_mode_fill_fb_struct == $sub.ref(0, 885585);

procedure drm_helper_mode_fill_fb_struct($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation drm_helper_mode_fill_fb_struct($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    return;
}



const qxl_crtc_cursor_set2: ref;

axiom qxl_crtc_cursor_set2 == $sub.ref(0, 886617);

procedure qxl_crtc_cursor_set2($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.71, $M.42, $M.46, $M.35, $M.43, $M.52, $CurrAddr, $M.40, $M.53, $M.49, $M.44, assertsPassed, $M.41, $M.67, $M.68, $M.38, $M.39, $M.75, $M.69, $M.70, $M.32, $M.37, $M.72, $M.73, $M.74, $M.65, $M.36, $M.64, $M.54, $M.55;



implementation qxl_crtc_cursor_set2($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32) returns ($r: i32)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i1;
  var $i18: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i35: i32;
  var $i36: i1;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $i64: i16;
  var $p65: ref;
  var $p67: ref;
  var $i68: i16;
  var $p69: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p76: ref;
  var $p77: ref;
  var $p79: ref;
  var $p80: ref;
  var $p82: ref;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i16;
  var $p97: ref;
  var $p98: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i16;
  var $p104: ref;
  var $p105: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;
  var $p124: ref;
  var $i47: i32;
  var $i43: i32;
  var $p125: ref;
  var $i37: i32;
  var $i34: i32;
  var $i29: i32;
  var $i19: i32;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;
  var vslice_dummy_var_194: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2383} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2384} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2385} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2386} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2387} {:cexpr "qxl_crtc_cursor_set2:arg:handle"} boogie_si_record_i32($i2);
    call {:si_unique_call 2388} {:cexpr "qxl_crtc_cursor_set2:arg:width"} boogie_si_record_i32($i3);
    call {:si_unique_call 2389} {:cexpr "qxl_crtc_cursor_set2:arg:height"} boogie_si_record_i32($i4);
    call {:si_unique_call 2390} {:cexpr "qxl_crtc_cursor_set2:arg:hot_x"} boogie_si_record_i32($i5);
    call {:si_unique_call 2391} {:cexpr "qxl_crtc_cursor_set2:arg:hot_y"} boogie_si_record_i32($i6);
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(0, 1));
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.82, $p11);
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p0);
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i2, 0);
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(0, 1));
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.82, $p20);
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} $p22 := drm_gem_object_lookup($p21, $p1, $i2);
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p22);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2396} $i27 := qxl_bo_reserve($p26, 0);
    goto SeqInstr_1564, SeqInstr_1565;

  SeqInstr_1565:
    assume assertsPassed;
    goto SeqInstr_1566;

  SeqInstr_1566:
    call {:si_unique_call 2397} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2399} $i30 := qxl_bo_pin($p26, 0, $0.ref);
    call {:si_unique_call 2400} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2401} qxl_bo_unreserve($p26);
    goto SeqInstr_1570, SeqInstr_1571;

  SeqInstr_1571:
    assume assertsPassed;
    goto SeqInstr_1572;

  SeqInstr_1572:
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2402} $i32 := qxl_bo_kmap($p26, $p10);
    call {:si_unique_call 2403} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2405} $i35 := qxl_alloc_release_reserved($p15, 150, 2, $p9, $0.ref);
    goto SeqInstr_1573, SeqInstr_1574;

  SeqInstr_1574:
    assume assertsPassed;
    goto SeqInstr_1575;

  SeqInstr_1575:
    call {:si_unique_call 2406} {:cexpr "ret"} boogie_si_record_i32($i35);
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.6, $p9);
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64(16384);
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 42);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2408} $i41 := qxl_alloc_bo_reserved($p15, $p38, $i40, $p8);
    goto SeqInstr_1576, SeqInstr_1577;

  SeqInstr_1577:
    assume assertsPassed;
    goto SeqInstr_1578;

  SeqInstr_1578:
    call {:si_unique_call 2409} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.6, $p9);
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2411} $i45 := qxl_release_reserve_list($p44, 0);
    goto SeqInstr_1582, SeqInstr_1583;

  SeqInstr_1583:
    assume assertsPassed;
    goto SeqInstr_1584;

  SeqInstr_1584:
    call {:si_unique_call 2412} {:cexpr "ret"} boogie_si_record_i32($i45);
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.6, $p8);
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p7);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2414} $i50 := qxl_bo_kmap($p48, $p49);
    call {:si_unique_call 2415} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.42, $p7);
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p52, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p54, 0);
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.42, $p7);
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p55, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p57, 0);
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.42, $p7);
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p58, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p60, 64);
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.42, $p7);
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p61, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p63, 64);
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i5);
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.42, $p7);
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p65, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(14, 1));
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p67, $i64);
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i16($i6);
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.42, $p7);
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p69, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p71, $i68);
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.42, $p7);
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p73, 16384);
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.42, $p7);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p74, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(16, 1));
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p76, 0);
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.42, $p7);
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p77, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p79, 0);
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.42, $p7);
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p80, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p82, 16384);
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.42, $p7);
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p83, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(24, 1));
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.42, $p10);
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    $i88 := $sext.i32.i64(16384);
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_47 := $M.6;
    cmdloc_dummy_var_48 := $M.6;
    call {:si_unique_call 2417} cmdloc_dummy_var_49 := $memcpy.i8(cmdloc_dummy_var_47, cmdloc_dummy_var_48, $p86, $p87, $i88, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_49;
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.6, $p8);
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2418} qxl_bo_kunmap($p89);
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2419} qxl_bo_kunmap($p26);
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.6, $p9);
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2420} $p91 := qxl_release_map($p15, $p90);
    goto SeqInstr_1585, SeqInstr_1586;

  SeqInstr_1586:
    assume assertsPassed;
    goto SeqInstr_1587;

  SeqInstr_1587:
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p93, 0);
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p16, $mul.ref(0, 1176)), $mul.ref(1164, 1));
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.83, $p94);
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i16($i95);
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p92, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p98, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p100, $i96);
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p16, $mul.ref(0, 1176)), $mul.ref(1168, 1));
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.84, $p101);
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i16($i102);
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p92, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p105, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p107, $i103);
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.6, $p8);
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2421} $i109 := qxl_bo_physical_address($p15, $p108, 0);
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p92, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p111, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p112, $i109);
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p92, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p115, 1);
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.6, $p9);
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p92, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2422} qxl_release_unmap($p15, $p116, $p117);
    goto SeqInstr_1588, SeqInstr_1589;

  SeqInstr_1589:
    assume assertsPassed;
    goto SeqInstr_1590;

  SeqInstr_1590:
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.6, $p9);
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2423} vslice_dummy_var_193 := qxl_push_cursor_ring_release($p15, $p118, 3, 0);
    goto SeqInstr_1591, SeqInstr_1592;

  SeqInstr_1592:
    assume assertsPassed;
    goto SeqInstr_1593;

  SeqInstr_1593:
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.6, $p9);
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2424} qxl_release_fence_buffer_objects($p120);
    goto SeqInstr_1594, SeqInstr_1595;

  SeqInstr_1595:
    assume assertsPassed;
    goto SeqInstr_1596;

  SeqInstr_1596:
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2425} $i121 := qxl_bo_reserve($p26, 0);
    goto SeqInstr_1597, SeqInstr_1598;

  SeqInstr_1598:
    assume assertsPassed;
    goto SeqInstr_1599;

  SeqInstr_1599:
    call {:si_unique_call 2426} {:cexpr "ret"} boogie_si_record_i32($i121);
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 0);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2429} drm_gem_object_unreference_unlocked($p22);
    goto SeqInstr_1603, SeqInstr_1604;

  SeqInstr_1604:
    assume assertsPassed;
    goto SeqInstr_1605;

  SeqInstr_1605:
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2430} qxl_bo_unref($p8);
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $i19 := $i121;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  SeqInstr_1603:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i122 == 1;
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2427} vslice_dummy_var_194 := qxl_bo_unpin($p26);
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2428} qxl_bo_unreserve($p26);
    goto SeqInstr_1600, SeqInstr_1601;

  SeqInstr_1601:
    assume assertsPassed;
    goto SeqInstr_1602;

  SeqInstr_1602:
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_1600:
    assume !assertsPassed;
    return;

  SeqInstr_1597:
    assume !assertsPassed;
    return;

  SeqInstr_1594:
    assume !assertsPassed;
    return;

  SeqInstr_1591:
    assume !assertsPassed;
    return;

  SeqInstr_1588:
    assume !assertsPassed;
    return;

  SeqInstr_1585:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i51 == 1;
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.6, $p9);
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2416} qxl_release_backoff_reserve_list($p124);
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    $i47 := $i50;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2413} qxl_bo_unref($p8);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    $i43 := $i47;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.6, $p9);
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2410} qxl_release_free($p15, $p125);
    goto SeqInstr_1579, SeqInstr_1580;

  SeqInstr_1580:
    assume assertsPassed;
    goto SeqInstr_1581;

  SeqInstr_1581:
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    $i37 := $i43;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2407} qxl_bo_kunmap($p26);
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    $i34 := $i37;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2404} vslice_dummy_var_192 := qxl_bo_unpin($p26);
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    $i29 := $i34;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2398} drm_gem_object_unreference_unlocked($p22);
    goto SeqInstr_1567, SeqInstr_1568;

  SeqInstr_1568:
    assume assertsPassed;
    goto SeqInstr_1569;

  SeqInstr_1569:
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    $i19 := $i29;
    goto $bb3;

  SeqInstr_1567:
    assume !assertsPassed;
    return;

  SeqInstr_1579:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i46 == 1;
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    $i47 := $i45;
    goto $bb29;

  SeqInstr_1582:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i42 == 1;
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    $i43 := $i41;
    goto $bb25;

  SeqInstr_1576:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    $i37 := $i35;
    goto $bb21;

  SeqInstr_1573:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i33 == 1;
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    $i34 := $i32;
    goto $bb17;

  $bb12:
    assume $i31 == 1;
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    $i29 := $i30;
    goto $bb10;

  SeqInstr_1570:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb10;

  SeqInstr_1564:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2395} drm_err.ref(.str.129);
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 2);
    goto $bb3;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2392} $i18 := qxl_hide_cursor($p15);
    goto SeqInstr_1561, SeqInstr_1562;

  SeqInstr_1562:
    assume assertsPassed;
    goto SeqInstr_1563;

  SeqInstr_1563:
    call {:si_unique_call 2393} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb3;

  SeqInstr_1561:
    assume !assertsPassed;
    return;
}



const qxl_crtc_cursor_move: ref;

axiom qxl_crtc_cursor_move == $sub.ref(0, 887649);

procedure qxl_crtc_cursor_move($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.87, $M.88, $M.42, $M.52, $CurrAddr, $M.53, $M.49, $M.44, assertsPassed, $M.40, $M.38, $M.39, $M.43, $M.75, $M.41, $M.67, $M.68, $M.37, $M.72, $M.73, $M.74, $M.69, $M.70, $M.32, $M.36, $M.71, $M.35, $M.64, $M.54, $M.55, $M.65;



implementation qxl_crtc_cursor_move($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i16;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i16;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $i12: i32;
  var vslice_dummy_var_195: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2431} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2432} {:cexpr "qxl_crtc_cursor_move:arg:x"} boogie_si_record_i32($i1);
    call {:si_unique_call 2433} {:cexpr "qxl_crtc_cursor_move:arg:y"} boogie_si_record_i32($i2);
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(0, 1));
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.85, $p4);
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.86, $p6);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2434} $i10 := qxl_alloc_release_reserved($p8, 150, 2, $p3, $0.ref);
    goto SeqInstr_1606, SeqInstr_1607;

  SeqInstr_1607:
    assume assertsPassed;
    goto SeqInstr_1608;

  SeqInstr_1608:
    call {:si_unique_call 2435} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p3);
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2436} $i14 := qxl_release_reserve_list($p13, 1);
    goto SeqInstr_1609, SeqInstr_1610;

  SeqInstr_1610:
    assume assertsPassed;
    goto SeqInstr_1611;

  SeqInstr_1611:
    call {:si_unique_call 2437} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p9, $mul.ref(0, 1176)), $mul.ref(1164, 1));
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    $M.87 := $store.i32($M.87, $p17, $i1);
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref(0, 1176)), $mul.ref(1168, 1));
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    $M.88 := $store.i32($M.88, $p18, $i2);
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p3);
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2439} $p20 := qxl_release_map($p8, $p19);
    goto SeqInstr_1615, SeqInstr_1616;

  SeqInstr_1616:
    assume assertsPassed;
    goto SeqInstr_1617;

  SeqInstr_1617:
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p22, 1);
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p9, $mul.ref(0, 1176)), $mul.ref(1164, 1));
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.87, $p23);
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p28, $i25);
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p9, $mul.ref(0, 1176)), $mul.ref(1168, 1));
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.88, $p29);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p34, $i31);
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.6, $p3);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2440} qxl_release_unmap($p8, $p35, $p36);
    goto SeqInstr_1618, SeqInstr_1619;

  SeqInstr_1619:
    assume assertsPassed;
    goto SeqInstr_1620;

  SeqInstr_1620:
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.6, $p3);
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2441} vslice_dummy_var_195 := qxl_push_cursor_ring_release($p8, $p37, 3, 0);
    goto SeqInstr_1621, SeqInstr_1622;

  SeqInstr_1622:
    assume assertsPassed;
    goto SeqInstr_1623;

  SeqInstr_1623:
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.6, $p3);
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2442} qxl_release_fence_buffer_objects($p39);
    goto SeqInstr_1624, SeqInstr_1625;

  SeqInstr_1625:
    assume assertsPassed;
    goto SeqInstr_1626;

  SeqInstr_1626:
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_1624:
    assume !assertsPassed;
    return;

  SeqInstr_1621:
    assume !assertsPassed;
    return;

  SeqInstr_1618:
    assume !assertsPassed;
    return;

  SeqInstr_1615:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p3);
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2438} qxl_release_free($p8, $p16);
    goto SeqInstr_1612, SeqInstr_1613;

  SeqInstr_1613:
    assume assertsPassed;
    goto SeqInstr_1614;

  SeqInstr_1614:
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    $i12 := $i14;
    goto $bb3;

  SeqInstr_1612:
    assume !assertsPassed;
    return;

  SeqInstr_1609:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb3;

  SeqInstr_1606:
    assume !assertsPassed;
    return;
}



const qxl_crtc_destroy: ref;

axiom qxl_crtc_destroy == $sub.ref(0, 888681);

procedure qxl_crtc_destroy($p0: ref);
  free requires assertsPassed;



implementation qxl_crtc_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2443} drm_crtc_cleanup($p0);
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2444} kfree($p2);
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    return;
}



const drm_crtc_helper_set_config: ref;

axiom drm_crtc_helper_set_config == $sub.ref(0, 889713);

procedure drm_crtc_helper_set_config($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_crtc_helper_set_config($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2445} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2446} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const qxl_crtc_page_flip: ref;

axiom qxl_crtc_page_flip == $sub.ref(0, 890745);

procedure qxl_crtc_page_flip($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.79, $M.78, $M.80, $M.81, $M.91, $M.6, $M.46, $M.73, $M.42, $M.38, $M.39, $M.43, $M.52, $CurrAddr, $M.53, $M.49, $M.40, $M.44, assertsPassed, $M.93, $M.41, $M.67, $M.68, $M.75, $M.37, $M.72, $M.74, $M.69, $M.70, $M.32, $M.65, $M.71, $M.36, $M.64, $M.35, $M.54, $M.55;



implementation qxl_crtc_page_flip($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i16;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i16;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $i44: i32;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i42: i32;
  var vslice_dummy_var_196: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2447} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2448} {:cexpr "qxl_crtc_page_flip:arg:page_flip_flags"} boogie_si_record_i32($i3);
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(0, 1));
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.89, $p5);
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(240, 1));
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.90, $p12);
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 704)), $mul.ref(264, 1));
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.91, $p14);
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.77, $p17);
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p11, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.77, $p21);
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    $M.79 := $store.i16($M.79, $p25, 0);
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    $M.78 := $store.i16($M.78, $p26, 0);
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(88, 1));
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.77, $p27);
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    $M.80 := $store.i16($M.80, $p30, $i29);
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(92, 1));
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.77, $p31);
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i32);
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    $M.81 := $store.i16($M.81, $p34, $i33);
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(240, 1));
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.90, $p35);
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 704)), $mul.ref(264, 1));
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    $M.91 := $store.ref($M.91, $p37, $p1);
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p19, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1264, 1));
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p38, 0);
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p23, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1264, 1));
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p39, 1);
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2449} $i40 := qxl_bo_reserve($p24, 0);
    goto SeqInstr_1627, SeqInstr_1628;

  SeqInstr_1628:
    assume assertsPassed;
    goto SeqInstr_1629;

  SeqInstr_1629:
    call {:si_unique_call 2450} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2451} qxl_draw_dirty_fb($p9, $p11, $p24, 0, 0, $p4, 1, 1);
    goto SeqInstr_1630, SeqInstr_1631;

  SeqInstr_1631:
    assume assertsPassed;
    goto SeqInstr_1632;

  SeqInstr_1632:
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p10, $mul.ref(0, 1176)), $mul.ref(1160, 1));
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.92, $p43);
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2452} vslice_dummy_var_196 := drm_vblank_get($p6, $i44);
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p2);
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p10, $mul.ref(0, 1176)), $mul.ref(1160, 1));
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.92, $p52);
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2456} drm_vblank_put($p6, $i53);
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} qxl_bo_unreserve($p24);
    goto SeqInstr_1639, SeqInstr_1640;

  SeqInstr_1640:
    assume assertsPassed;
    goto SeqInstr_1641;

  SeqInstr_1641:
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  SeqInstr_1639:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i47 == 1;
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref(0, 3144)), $mul.ref(1064, 1));
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2453} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112($p48);
    goto SeqInstr_1633, SeqInstr_1634;

  SeqInstr_1634:
    assume assertsPassed;
    goto SeqInstr_1635;

  SeqInstr_1635:
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p10, $mul.ref(0, 1176)), $mul.ref(1160, 1));
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.92, $p49);
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2454} drm_send_vblank_event($p6, $i50, $p2);
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p6, $mul.ref(0, 3144)), $mul.ref(1064, 1));
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2455} ldv_spin_unlock_irqrestore_113($p51, $u1);
    goto SeqInstr_1636, SeqInstr_1637;

  SeqInstr_1637:
    assume assertsPassed;
    goto SeqInstr_1638;

  SeqInstr_1638:
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_1636:
    assume !assertsPassed;
    return;

  SeqInstr_1633:
    assume !assertsPassed;
    return;

  SeqInstr_1630:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i41 == 1;
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    $i42 := $i40;
    goto $bb3;

  SeqInstr_1627:
    assume !assertsPassed;
    return;
}



const drm_vblank_get: ref;

axiom drm_vblank_get == $sub.ref(0, 891777);

procedure drm_vblank_get($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_vblank_get($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2458} {:cexpr "drm_vblank_get:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2459} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2460} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112 == $sub.ref(0, 892809);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112($p0: ref);
  free requires assertsPassed;
  modifies $M.93, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2461} ldv_linux_kernel_locking_spinlock_spin_lock_event_lock_of_drm_device();
    goto SeqInstr_1642, SeqInstr_1643;

  SeqInstr_1643:
    assume assertsPassed;
    goto SeqInstr_1644;

  SeqInstr_1644:
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2462} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1642:
    assume !assertsPassed;
    return;
}



const drm_send_vblank_event: ref;

axiom drm_send_vblank_event == $sub.ref(0, 893841);

procedure drm_send_vblank_event($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation drm_send_vblank_event($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2463} {:cexpr "drm_send_vblank_event:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_113: ref;

axiom ldv_spin_unlock_irqrestore_113 == $sub.ref(0, 894873);

procedure ldv_spin_unlock_irqrestore_113($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.93, assertsPassed;



implementation ldv_spin_unlock_irqrestore_113($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2464} {:cexpr "ldv_spin_unlock_irqrestore_113:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2465} ldv_linux_kernel_locking_spinlock_spin_unlock_event_lock_of_drm_device();
    goto SeqInstr_1645, SeqInstr_1646;

  SeqInstr_1646:
    assume assertsPassed;
    goto SeqInstr_1647;

  SeqInstr_1647:
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2466} spin_unlock_irqrestore($p0, $i1);
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1645:
    assume !assertsPassed;
    return;
}



const drm_vblank_put: ref;

axiom drm_vblank_put == $sub.ref(0, 895905);

procedure drm_vblank_put($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation drm_vblank_put($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2467} {:cexpr "drm_vblank_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_event_lock_of_drm_device: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_event_lock_of_drm_device == $sub.ref(0, 896937);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_event_lock_of_drm_device();
  free requires assertsPassed;
  modifies $M.93, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_event_lock_of_drm_device()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $i0 := $M.93;
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2468} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_1648, SeqInstr_1649;

  SeqInstr_1649:
    assume assertsPassed;
    goto SeqInstr_1650;

  SeqInstr_1650:
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    $i3 := $M.93;
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2469} ldv_assume($i5);
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 2470} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_event_lock_of_drm_device"} boogie_si_record_i32(1);
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1648:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_event_lock_of_drm_device: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_event_lock_of_drm_device == $sub.ref(0, 897969);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_event_lock_of_drm_device();
  free requires assertsPassed;
  modifies $M.93, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_event_lock_of_drm_device()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    $i0 := $M.93;
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2471} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_1651, SeqInstr_1652;

  SeqInstr_1652:
    assume assertsPassed;
    goto SeqInstr_1653;

  SeqInstr_1653:
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    $i3 := $M.93;
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2472} ldv_assume($i5);
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    $M.93 := 2;
    call {:si_unique_call 2473} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_event_lock_of_drm_device"} boogie_si_record_i32(2);
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1651:
    assume !assertsPassed;
    return;
}



const drm_crtc_cleanup: ref;

axiom drm_crtc_cleanup == $sub.ref(0, 899001);

procedure drm_crtc_cleanup($p0: ref);
  free requires assertsPassed;



implementation drm_crtc_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    return;
}



const qxl_push_cursor_ring_release: ref;

axiom qxl_push_cursor_ring_release == $sub.ref(0, 900033);

procedure qxl_push_cursor_ring_release($p0: ref, $p1: ref, $i2: i32, $i3: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.41, $M.67, $M.68, assertsPassed, $M.46, $M.69, $M.70, $M.32, $M.42, $M.71, $M.43, $M.64, $M.36, $M.40, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.75, $M.49, $M.73, $M.74, $M.55, $M.65, $M.54;



implementation qxl_push_cursor_ring_release($p0: ref, $p1: ref, $i2: i32, $i3: i1) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i8;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2474} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 2475} {:cexpr "qxl_push_cursor_ring_release:arg:type"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i3);
    call {:si_unique_call 2476} {:cexpr "qxl_push_cursor_ring_release:arg:interruptible"} boogie_si_record_i1($i3);
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p10, $i2);
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(96, 1));
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2477} $i19 := qxl_bo_physical_address($p0, $p15, $i18);
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p20, $i19);
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3072, 1));
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p4);
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i5);
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2478} $i25 := qxl_ring_push($p22, $p23, $i24);
    goto SeqInstr_1654, SeqInstr_1655;

  SeqInstr_1655:
    assume assertsPassed;
    goto SeqInstr_1656;

  SeqInstr_1656:
    call {:si_unique_call 2479} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  SeqInstr_1654:
    assume !assertsPassed;
    return;
}



const qxl_hide_cursor: ref;

axiom qxl_hide_cursor == $sub.ref(0, 901065);

procedure qxl_hide_cursor($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.42, $M.52, $CurrAddr, $M.53, $M.49, $M.44, assertsPassed, $M.41, $M.67, $M.68, $M.40, $M.38, $M.39, $M.43, $M.75, $M.69, $M.70, $M.32, $M.37, $M.72, $M.73, $M.74, $M.71, $M.36, $M.64, $M.35, $M.54, $M.55, $M.65;



implementation qxl_hide_cursor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $i4: i32;
  var vslice_dummy_var_197: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2480} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2481} $i2 := qxl_alloc_release_reserved($p0, 150, 2, $p1, $0.ref);
    goto SeqInstr_1657, SeqInstr_1658;

  SeqInstr_1658:
    assume assertsPassed;
    goto SeqInstr_1659;

  SeqInstr_1659:
    call {:si_unique_call 2482} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p1);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2483} $i6 := qxl_release_reserve_list($p5, 1);
    goto SeqInstr_1660, SeqInstr_1661;

  SeqInstr_1661:
    assume assertsPassed;
    goto SeqInstr_1662;

  SeqInstr_1662:
    call {:si_unique_call 2484} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p1);
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2486} $p10 := qxl_release_map($p0, $p9);
    goto SeqInstr_1666, SeqInstr_1667;

  SeqInstr_1667:
    assume assertsPassed;
    goto SeqInstr_1668;

  SeqInstr_1668:
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p12, 2);
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p1);
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2487} qxl_release_unmap($p0, $p13, $p14);
    goto SeqInstr_1669, SeqInstr_1670;

  SeqInstr_1670:
    assume assertsPassed;
    goto SeqInstr_1671;

  SeqInstr_1671:
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p1);
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2488} vslice_dummy_var_197 := qxl_push_cursor_ring_release($p0, $p15, 3, 0);
    goto SeqInstr_1672, SeqInstr_1673;

  SeqInstr_1673:
    assume assertsPassed;
    goto SeqInstr_1674;

  SeqInstr_1674:
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p1);
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2489} qxl_release_fence_buffer_objects($p17);
    goto SeqInstr_1675, SeqInstr_1676;

  SeqInstr_1676:
    assume assertsPassed;
    goto SeqInstr_1677;

  SeqInstr_1677:
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_1675:
    assume !assertsPassed;
    return;

  SeqInstr_1672:
    assume !assertsPassed;
    return;

  SeqInstr_1669:
    assume !assertsPassed;
    return;

  SeqInstr_1666:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p1);
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2485} qxl_release_free($p0, $p8);
    goto SeqInstr_1663, SeqInstr_1664;

  SeqInstr_1664:
    assume assertsPassed;
    goto SeqInstr_1665;

  SeqInstr_1665:
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;

  SeqInstr_1663:
    assume !assertsPassed;
    return;

  SeqInstr_1660:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;

  SeqInstr_1657:
    assume !assertsPassed;
    return;
}



const qxl_crtc_dpms: ref;

axiom qxl_crtc_dpms == $sub.ref(0, 902097);

procedure qxl_crtc_dpms($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation qxl_crtc_dpms($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2490} {:cexpr "qxl_crtc_dpms:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    return;
}



const qxl_crtc_prepare: ref;

axiom qxl_crtc_prepare == $sub.ref(0, 903129);

procedure qxl_crtc_prepare($p0: ref);
  free requires assertsPassed;



implementation qxl_crtc_prepare($p0: ref)
{
  var $i1: i32;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i8;
  var $i18: i1;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.6, drm_debug);
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 1);
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2491} $i4 := ldv__builtin_expect($i3, 0);
    call {:si_unique_call 2492} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(272, 1)), $mul.ref(76, 1));
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.6, $p7);
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(272, 1)), $mul.ref(96, 1));
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(692, 1));
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.6, $p12);
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(696, 1));
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(264, 1));
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2493} drm_ut_debug_printk.ref.ref.i32.i32.i32.i32.i32(.str.138, .str.139, $i8, $i11, $i13, $i15, $i19);
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_crtc_commit: ref;

axiom qxl_crtc_commit == $sub.ref(0, 904161);

procedure qxl_crtc_commit($p0: ref);
  free requires assertsPassed;



implementation qxl_crtc_commit($p0: ref)
{
  var $i1: i32;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.6, drm_debug);
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 1);
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2494} $i4 := ldv__builtin_expect($i3, 0);
    call {:si_unique_call 2495} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2496} drm_ut_debug_printk.ref.ref(.str.140, .str.117);
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_crtc_mode_fixup: ref;

axiom qxl_crtc_mode_fixup == $sub.ref(0, 905193);

procedure qxl_crtc_mode_fixup($p0: ref, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_crtc_mode_fixup($p0: ref, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(0, 1));
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.94, $p3);
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.95, $p5);
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(76, 1));
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.96, $p8);
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(96, 1));
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.97, $p10);
    goto corral_source_split_10369;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(76, 1));
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.6, $p12);
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(96, 1));
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2497} qxl_io_log.ref.ref.ref.i32.i32.i32.i32($p7, .str.130, .str.131, $i9, $i11, $i13, $i15);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const qxl_crtc_mode_set: ref;

axiom qxl_crtc_mode_set == $sub.ref(0, 906225);

procedure qxl_crtc_mode_set($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.71, $M.40, $CurrAddr, $M.55, assertsPassed, $M.65;



implementation qxl_crtc_mode_set($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i59: i8;
  var $p61: ref;
  var $i62: i32;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i64;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $i77: i1;
  var $p79: ref;
  var $i80: i32;
  var $p82: ref;
  var $i83: i32;
  var $p85: ref;
  var $i86: i32;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $i92: i8;
  var $i93: i1;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i64;
  var $i99: i64;
  var $i100: i1;
  var $p101: ref;
  var $i102: i32;
  var $p103: ref;
  var $i104: i32;
  var $p106: ref;
  var $i107: i32;
  var $i105: i32;
  var $i108: i64;
  var $i109: i1;
  var $i110: i64;
  var $i111: i64;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $p116: ref;
  var $i117: i32;
  var $p118: ref;
  var $i119: i32;
  var $p120: ref;
  var $i121: i32;
  var $i25: i32;
  var vslice_dummy_var_198: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2498} {:cexpr "qxl_crtc_mode_set:arg:x"} boogie_si_record_i32($i3);
    call {:si_unique_call 2499} {:cexpr "qxl_crtc_mode_set:arg:y"} boogie_si_record_i32($i4);
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(0, 1));
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.98, $p6);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.99, $p8);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(240, 1));
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.100, $p12);
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 704)), $mul.ref(264, 1));
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.101, $p14);
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p5);
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $p33 := $0.ref;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(240, 1));
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.100, $p34);
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 704)), $mul.ref(264, 1));
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.101, $p36);
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.103, $p39);
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.6, drm_debug);
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    $i45 := $and.i64($i44, 1);
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} $i46 := ldv__builtin_expect($i45, 0);
    call {:si_unique_call 2504} {:cexpr "tmp___0"} boogie_si_record_i64($i46);
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p11, $mul.ref(0, 1176)), $mul.ref(1160, 1));
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.106, $p56);
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 0);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1272, 1)), $mul.ref(12, 1));
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.6, $p61);
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1272, 1)), $mul.ref(8, 1));
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.6, $p64);
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    $i66 := $mul.i32($i62, $i65);
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    $i67 := $zext.i32.i64($i66);
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p10, $mul.ref(0, 5336)), $mul.ref(40, 1));
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.6, $p68);
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    $i70 := $ugt.i64($i67, $i69);
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2507} $i71 := qxl_bo_reserve($p42, 0);
    goto SeqInstr_1678, SeqInstr_1679;

  SeqInstr_1679:
    assume assertsPassed;
    goto SeqInstr_1680;

  SeqInstr_1680:
    call {:si_unique_call 2508} {:cexpr "ret"} boogie_si_record_i32($i71);
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1008, 1));
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.6, $p73);
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2509} $i75 := qxl_bo_pin($p42, $i74, $0.ref);
    call {:si_unique_call 2510} {:cexpr "ret"} boogie_si_record_i32($i75);
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2512} qxl_bo_unreserve($p42);
    goto SeqInstr_1684, SeqInstr_1685;

  SeqInstr_1685:
    assume assertsPassed;
    goto SeqInstr_1686;

  SeqInstr_1686:
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i8.i1($i59);
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1264, 1));
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.6, $p91);
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i8.i1($i92);
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i93 == 1);
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1296, 1));
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.6, $p106);
    call {:si_unique_call 2518} {:cexpr "surf_id"} boogie_si_record_i32($i107);
    assume {:verifier.code 0} true;
    $i105 := $i107;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p33);
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    $i109 := $ne.i64($i108, 0);
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p11, $mul.ref(0, 1176)), $mul.ref(1160, 1));
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.106, $p116);
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(76, 1));
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.104, $p118);
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(96, 1));
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.105, $p120);
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2524} qxl_monitors_config_set($p10, $i117, $i3, $i4, $i119, $i121, $i105);
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb35:
    assume $i109 == 1;
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p33);
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p42);
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    $i112 := $ne.i64($i110, $i111);
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i112 == 1);
    goto $bb37;

  $bb38:
    assume $i112 == 1;
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p33, $mul.ref(0, 1312)), $mul.ref(1264, 1));
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p113, 0);
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2520} $i114 := qxl_bo_reserve($p33, 0);
    goto SeqInstr_1693, SeqInstr_1694;

  SeqInstr_1694:
    assume assertsPassed;
    goto SeqInstr_1695;

  SeqInstr_1695:
    call {:si_unique_call 2521} {:cexpr "ret"} boogie_si_record_i32($i114);
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2522} vslice_dummy_var_198 := qxl_bo_unpin($p33);
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2523} qxl_bo_unreserve($p33);
    goto SeqInstr_1696, SeqInstr_1697;

  SeqInstr_1697:
    assume assertsPassed;
    goto SeqInstr_1698;

  SeqInstr_1698:
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_1696:
    assume !assertsPassed;
    return;

  SeqInstr_1693:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i93 == 1;
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.6, drm_debug);
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i94, 4);
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    $i97 := $zext.i1.i32($i96);
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    $i98 := $sext.i32.i64($i97);
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2516} $i99 := ldv__builtin_expect($i98, 0);
    call {:si_unique_call 2517} {:cexpr "tmp___1"} boogie_si_record_i64($i99);
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i99, 0);
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i105 := 0;
    goto $bb34;

  $bb31:
    assume $i100 == 1;
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1296, 1));
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.6, $p101);
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p11, $mul.ref(0, 1176)), $mul.ref(1160, 1));
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.106, $p103);
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2519} drm_ut_debug_printk.ref.ref.i32.i32(.str.132, .str.137, $i102, $i104);
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb26:
    assume $i77 == 1;
    goto corral_source_split_10477;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2513} qxl_io_destroy_primary($p10);
    goto SeqInstr_1687, SeqInstr_1688;

  SeqInstr_1688:
    assume assertsPassed;
    goto SeqInstr_1689;

  SeqInstr_1689:
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1272, 1)), $mul.ref(4, 1));
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.6, $p79);
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1272, 1)), $mul.ref(8, 1));
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.6, $p82);
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1272, 1)), $mul.ref(12, 1));
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.6, $p85);
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1272, 1)), $mul.ref(0, 1));
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.6, $p88);
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2514} qxl_io_log.ref.ref.i32.i32.i32.i32($p10, .str.136, $i80, $i83, $i86, $i89);
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2515} qxl_io_create_primary($p10, 0, $p42);
    goto SeqInstr_1690, SeqInstr_1691;

  SeqInstr_1691:
    assume assertsPassed;
    goto SeqInstr_1692;

  SeqInstr_1692:
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1264, 1));
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p90, 1);
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_1690:
    assume !assertsPassed;
    return;

  SeqInstr_1687:
    assume !assertsPassed;
    return;

  SeqInstr_1684:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i76 == 1;
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2511} qxl_bo_unreserve($p42);
    goto SeqInstr_1681, SeqInstr_1682;

  SeqInstr_1682:
    assume assertsPassed;
    goto SeqInstr_1683;

  SeqInstr_1683:
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 22);
    goto $bb6;

  SeqInstr_1681:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i72 == 1;
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    $i25 := $i71;
    goto $bb6;

  SeqInstr_1678:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i70 == 1;
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2506} drm_err.ref(.str.135);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 22);
    goto $bb6;

  $bb14:
    assume $i58 == 1;
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    $i59 := 1;
    goto $bb16;

  $bb11:
    assume $i47 == 1;
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(76, 1));
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.104, $p48);
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(96, 1));
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.105, $p50);
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(76, 1));
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.6, $p52);
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(96, 1));
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.6, $p54);
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} drm_ut_debug_printk.ref.ref.i32.i32.i32.i32.i32.i32(.str.132, .str.134, $i3, $i4, $i49, $i51, $i53, $i55);
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p5);
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.102, $p29);
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    $p33 := $p32;
    goto $bb10;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.6, drm_debug);
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 4);
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2500} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 2501} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb6;

  $bb3:
    assume $i24 == 1;
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2502} drm_ut_debug_printk.ref.ref(.str.132, .str.133);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const qxl_crtc_disable: ref;

axiom qxl_crtc_disable == $sub.ref(0, 907257);

procedure qxl_crtc_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.40, $CurrAddr, assertsPassed, $M.55, $M.65;



implementation qxl_crtc_disable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var vslice_dummy_var_199: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(0, 1));
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(240, 1));
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 704)), $mul.ref(264, 1));
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 1176)), $mul.ref(1160, 1));
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.6, $p27);
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2529} qxl_monitors_config_set($p6, $i28, 0, 0, 0, 0, 0);
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2530} qxl_send_monitors_config($p6);
    goto SeqInstr_1705, SeqInstr_1706;

  SeqInstr_1706:
    assume assertsPassed;
    goto SeqInstr_1707;

  SeqInstr_1707:
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1705:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(240, 1));
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 704)), $mul.ref(264, 1));
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2525} $i22 := qxl_bo_reserve($p21, 0);
    goto SeqInstr_1699, SeqInstr_1700;

  SeqInstr_1700:
    assume assertsPassed;
    goto SeqInstr_1701;

  SeqInstr_1701:
    call {:si_unique_call 2526} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2527} vslice_dummy_var_199 := qxl_bo_unpin($p21);
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2528} qxl_bo_unreserve($p21);
    goto SeqInstr_1702, SeqInstr_1703;

  SeqInstr_1703:
    assume assertsPassed;
    goto SeqInstr_1704;

  SeqInstr_1704:
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(240, 1));
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 704)), $mul.ref(264, 1));
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p26, $0.ref);
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1702:
    assume !assertsPassed;
    return;

  SeqInstr_1699:
    assume !assertsPassed;
    return;
}



const qxl_monitors_config_set: ref;

axiom qxl_monitors_config_set == $sub.ref(0, 908289);

procedure qxl_monitors_config_set($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_monitors_config_set($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32)
{
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $p43: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2531} {:cexpr "qxl_monitors_config_set:arg:index"} boogie_si_record_i32($i1);
    call {:si_unique_call 2532} {:cexpr "qxl_monitors_config_set:arg:x"} boogie_si_record_i32($i2);
    call {:si_unique_call 2533} {:cexpr "qxl_monitors_config_set:arg:y"} boogie_si_record_i32($i3);
    call {:si_unique_call 2534} {:cexpr "qxl_monitors_config_set:arg:width"} boogie_si_record_i32($i4);
    call {:si_unique_call 2535} {:cexpr "qxl_monitors_config_set:arg:height"} boogie_si_record_i32($i5);
    call {:si_unique_call 2536} {:cexpr "qxl_monitors_config_set:arg:surf_id"} boogie_si_record_i32($i6);
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.6, drm_debug);
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 4);
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2537} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 2538} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i1);
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref($i14, 28)), $mul.ref(16, 1));
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p19, $i2);
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i1);
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p22, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref($i20, 28)), $mul.ref(20, 1));
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p25, $i3);
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i1);
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p27);
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p28, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref($i26, 28)), $mul.ref(8, 1));
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p31, $i4);
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i1);
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.6, $p33);
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p34, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref($i32, 28)), $mul.ref(12, 1));
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p37, $i5);
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i1);
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.6, $p39);
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p40, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref($i38, 28)), $mul.ref(4, 1));
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p43, $i6);
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_10585;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2539} drm_ut_debug_printk.ref.ref.i32.i32.i32.i32.i32(.str.122, .str.123, $i1, $i4, $i5, $i2, $i3);
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_send_monitors_config: ref;

axiom qxl_send_monitors_config == $sub.ref(0, 909321);

procedure qxl_send_monitors_config($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.55, assertsPassed;



implementation qxl_send_monitors_config($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i32: i32;
  var $p33: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i1;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 5424)), $mul.ref(5352, 1));
    goto corral_source_split_10617;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.6, $p3);
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2540} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 2541} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.6, $p12);
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.6, $p18);
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32(0, $i20);
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2546} qxl_io_monitors_config($p0);
    goto SeqInstr_1708, SeqInstr_1709;

  SeqInstr_1709:
    assume assertsPassed;
    goto SeqInstr_1710;

  SeqInstr_1710:
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1708:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb11;

  $bb11:
    call $p23, $p24, $p25, $p26, $i27, $p28, $p29, $i30, $i31, $p34, $i35, $i36, $p37, $i38, $i39, $p40, $i41, $i42, $i32, $p33, $i51, $p52, $p53, $i54, $i55, $i56, $i22 := qxl_send_monitors_config_loop_$bb11($p0, $p16, $p23, $p24, $p25, $p26, $i27, $p28, $p29, $i30, $i31, $p34, $i35, $i36, $p37, $i38, $i39, $p40, $i41, $i42, $i32, $p33, $i51, $p52, $p53, $i54, $i55, $i56, $i22);
    goto $bb11_last;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.6, $p23);
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i22);
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p26, $mul.ref($i27, 28));
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p26, $mul.ref($i27, 28)), $mul.ref(20, 1));
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.6, $p29);
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    $i31 := $ugt.i32($i30, 8192);
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $i32, $p33 := $i22, $p28;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i31 == 1);
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p26, $mul.ref($i27, 28)), $mul.ref(16, 1));
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.6, $p34);
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    $i36 := $ugt.i32($i35, 8192);
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $i32, $p33 := $i22, $p28;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i36 == 1);
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p26, $mul.ref($i27, 28)), $mul.ref(8, 1));
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.6, $p37);
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    $i39 := $ugt.i32($i38, 8192);
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    $i32, $p33 := $i22, $p28;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i39 == 1);
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p26, $mul.ref($i27, 28)), $mul.ref(12, 1));
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.6, $p40);
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    $i42 := $ugt.i32($i41, 8192);
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    $i32, $p33 := $i22, $p28;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i22, 1);
    call {:si_unique_call 2545} {:cexpr "i"} boogie_si_record_i32($i51);
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.6, $p16);
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.6, $p53);
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i51, $i55);
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i56 == 1);
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb23:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i22 := $i51;
    goto $bb23_dummy;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p33, $mul.ref(0, 28)), $mul.ref(8, 1));
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.6, $p43);
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p33, $mul.ref(0, 28)), $mul.ref(12, 1));
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.6, $p45);
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p33, $mul.ref(0, 28)), $mul.ref(16, 1));
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.6, $p47);
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p33, $mul.ref(0, 28)), $mul.ref(20, 1));
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.6, $p49);
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2544} drm_err.ref.i32.i32.i32.i32.i32(.str.6, $i32, $i44, $i46, $i48, $i50);
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb14;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb14;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} qxl_io_log.ref.ref.ref($p0, .str.4, .str.5);
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    call {:si_unique_call 2542} devirtbounce(0, .str.3, 552, 12);
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb23_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10646;
}



const qxl_io_monitors_config: ref;

axiom qxl_io_monitors_config == $sub.ref(0, 910353);

procedure qxl_io_monitors_config($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.55, assertsPassed;



implementation qxl_io_monitors_config($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i16;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p11);
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.6, $p45);
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32(0, 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.6, $p62);
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i78 := $sub.i32(0, 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2547} qxl_io_log.ref.ref.ref.i32.i32.i32.i32.i32($p0, .str.47, .str.48, $i10, $i27, $i44, $i61, $i78);
    goto corral_source_split_10791;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2548} wait_for_io_cmd($p0, 0, 24);
    goto SeqInstr_1711, SeqInstr_1712;

  SeqInstr_1712:
    assume assertsPassed;
    goto SeqInstr_1713;

  SeqInstr_1713:
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1711:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i65 == 1;
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.6, $p66);
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    $i69 := $load.i16($M.6, $p68);
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i69);
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb24;

  $bb25:
    assume $i71 == 1;
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.6, $p72);
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($add.ref($p73, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref(0, 28)), $mul.ref(20, 1));
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.6, $p76);
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    $i78 := $i77;
    goto $bb27;

  $bb16:
    assume $i48 == 1;
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.6, $p49);
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.6, $p51);
    goto corral_source_split_10760;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb18;

  $bb19:
    assume $i54 == 1;
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.6, $p55);
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($p56, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref(0, 28)), $mul.ref(16, 1));
    goto corral_source_split_10767;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.6, $p59);
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    $i61 := $i60;
    goto $bb21;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p32);
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.6, $p34);
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb12;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.6, $p38);
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p39, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref(0, 28)), $mul.ref(12, 1));
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.6, $p42);
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb15;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.6, $p17);
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb6;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p22, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref(0, 28)), $mul.ref(8, 1));
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.6, $p25);
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.6, $p7);
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const qxl_io_destroy_primary: ref;

axiom qxl_io_destroy_primary == $sub.ref(0, 911385);

procedure qxl_io_destroy_primary($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.55, assertsPassed;



implementation qxl_io_destroy_primary($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2549} wait_for_io_cmd($p0, 0, 19);
    goto SeqInstr_1714, SeqInstr_1715;

  SeqInstr_1715:
    assume assertsPassed;
    goto SeqInstr_1716;

  SeqInstr_1716:
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1714:
    assume !assertsPassed;
    return;
}



const qxl_io_create_primary: ref;

axiom qxl_io_create_primary == $sub.ref(0, 912417);

procedure qxl_io_create_primary($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.55, assertsPassed;



implementation qxl_io_create_primary($p0: ref, $i1: i32, $p2: ref)
{
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2550} {:cexpr "qxl_io_create_primary:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    $i3 := $M.45;
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_10807;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(0, 1));
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    $p13 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5424)), $mul.ref(5304, 1)), $mul.ref(12, 1));
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p13, $i12);
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(4, 1));
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.6, $p15);
    $p17 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5424)), $mul.ref(5304, 1)), $mul.ref(0, 1));
    goto corral_source_split_10813;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p17, $i16);
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(8, 1));
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    $p21 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5424)), $mul.ref(5304, 1)), $mul.ref(4, 1));
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p21, $i20);
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(12, 1));
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.6, $p23);
    $p25 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5424)), $mul.ref(5304, 1)), $mul.ref(8, 1));
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p25, $i24);
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i1);
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2552} $i27 := qxl_bo_physical_address($p0, $p2, $i26);
    $p28 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5424)), $mul.ref(5304, 1)), $mul.ref(32, 1));
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p28, $i27);
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    $i29 := $M.45;
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    $i30 := $sgt.i32($i29, 0);
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p35 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5424)), $mul.ref(5304, 1)), $mul.ref(24, 1));
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p35, 1);
    $p36 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5424)), $mul.ref(5304, 1)), $mul.ref(28, 1));
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p36, 0);
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2554} wait_for_io_cmd($p0, 0, 18);
    goto SeqInstr_1717, SeqInstr_1718;

  SeqInstr_1718:
    assume assertsPassed;
    goto SeqInstr_1719;

  SeqInstr_1719:
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1717:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i30 == 1;
    $p31 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5424)), $mul.ref(5304, 1)), $mul.ref(32, 1));
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.6, $p31);
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 1312)), $mul.ref(1000, 1));
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.6, $p33);
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2553} qxl_io_log.ref.ref.ref.i64.ref($p0, .str.45, .str.44, $i32, $p34);
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2551} qxl_io_log.ref.ref.ref.ref.ref($p0, .str.43, .str.44, $p0, $p6);
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const drm_helper_connector_dpms: ref;

axiom drm_helper_connector_dpms == $sub.ref(0, 913449);

procedure drm_helper_connector_dpms($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation drm_helper_connector_dpms($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2555} {:cexpr "drm_helper_connector_dpms:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10838;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    return;
}



const qxl_conn_save: ref;

axiom qxl_conn_save == $sub.ref(0, 914481);

procedure qxl_conn_save($p0: ref);
  free requires assertsPassed;



implementation qxl_conn_save($p0: ref)
{
  var $i1: i32;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.6, drm_debug);
    goto corral_source_split_10841;

  corral_source_split_10841:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 1);
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2556} $i4 := ldv__builtin_expect($i3, 0);
    call {:si_unique_call 2557} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_10845;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_10847;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2558} drm_ut_debug_printk.ref.ref(.str.118, .str.117);
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_conn_restore: ref;

axiom qxl_conn_restore == $sub.ref(0, 915513);

procedure qxl_conn_restore($p0: ref);
  free requires assertsPassed;



implementation qxl_conn_restore($p0: ref)
{
  var $i1: i32;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.6, drm_debug);
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 1);
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} $i4 := ldv__builtin_expect($i3, 0);
    call {:si_unique_call 2560} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_10855;

  corral_source_split_10855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} drm_ut_debug_printk.ref.ref(.str.116, .str.117);
    goto corral_source_split_10858;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_conn_detect: ref;

axiom qxl_conn_detect == $sub.ref(0, 916545);

procedure qxl_conn_detect($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_conn_detect($p0: ref, $i1: i1) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $p32: ref;
  var $i33: i1;
  var $i34: i8;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i12: i32;
  var $i38: i32;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2562} {:cexpr "qxl_conn_detect:arg:force"} boogie_si_record_i1($i1);
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 920)), $mul.ref(0, 1));
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1024)), $mul.ref(0, 1));
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i12 := $i37;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.6, drm_debug);
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 1);
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2563} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 2564} {:cexpr "tmp___1"} boogie_si_record_i64($i41);
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i12, 0);
    goto corral_source_split_10919;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i12, 0);
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    $i49 := (if $i48 == 1 then 1 else 2);
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    $r := $i49;
    return;

  $bb16:
    assume $i45 == 1;
    goto corral_source_split_10921;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1024)), $mul.ref(0, 1));
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.6, $p46);
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2568} qxl_monitors_config_set($p8, $i47, 0, 0, 0, 0, 0);
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i42 == 1;
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1024)), $mul.ref(0, 1));
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.6, $p43);
    goto corral_source_split_10916;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2567} drm_ut_debug_printk.ref.ref.i32.i32(.str.120, .str.121, $i44, $i12);
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.6, $p17);
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.6, $p19);
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1024)), $mul.ref(0, 1));
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p22);
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    $i24 := $sgt.i32($i21, $i23);
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb6;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p8, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.6, $p25);
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1024)), $mul.ref(0, 1));
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.6, $p29);
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p28, $mul.ref($i31, 28));
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2565} $i33 := qxl_head_enabled($p32);
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i8($i33);
    call {:si_unique_call 2566} {:cexpr "tmp"} boogie_si_record_i8($i34);
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb12;

  $bb9:
    assume $i35 == 1;
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    $i36 := 1;
    goto $bb11;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb3;
}



const drm_helper_probe_single_connector_modes_nomerge: ref;

axiom drm_helper_probe_single_connector_modes_nomerge == $sub.ref(0, 917577);

procedure drm_helper_probe_single_connector_modes_nomerge($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_helper_probe_single_connector_modes_nomerge($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2569} {:cexpr "drm_helper_probe_single_connector_modes_nomerge:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2570} {:cexpr "drm_helper_probe_single_connector_modes_nomerge:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2571} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2572} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_10930;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const qxl_conn_set_property: ref;

axiom qxl_conn_set_property == $sub.ref(0, 918609);

procedure qxl_conn_set_property($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_conn_set_property($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2573} {:cexpr "qxl_conn_set_property:arg:value"} boogie_si_record_i64($i2);
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, drm_debug);
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 1);
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2574} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 2575} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2576} drm_ut_debug_printk.ref.ref(.str.119, .str.117);
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_conn_destroy: ref;

axiom qxl_conn_destroy == $sub.ref(0, 919641);

procedure qxl_conn_destroy($p0: ref);
  free requires assertsPassed;



implementation qxl_conn_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 8), 1024));
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2577} ldv_drm_connector_unregister_114($p0);
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2578} drm_connector_cleanup($p0);
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2579} kfree($p3);
    goto corral_source_split_10948;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    return;
}



const ldv_drm_connector_unregister_114: ref;

axiom ldv_drm_connector_unregister_114 == $sub.ref(0, 920673);

procedure ldv_drm_connector_unregister_114($p0: ref);
  free requires assertsPassed;



implementation ldv_drm_connector_unregister_114($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2580} drm_connector_unregister($p0);
    goto corral_source_split_10951;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2581} ldv_drm_connector_unregister($0.ref, $p0);
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    return;
}



const drm_connector_cleanup: ref;

axiom drm_connector_cleanup == $sub.ref(0, 921705);

procedure drm_connector_cleanup($p0: ref);
  free requires assertsPassed;



implementation drm_connector_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10954;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    return;
}



const drm_connector_unregister: ref;

axiom drm_connector_unregister == $sub.ref(0, 922737);

procedure drm_connector_unregister($p0: ref);
  free requires assertsPassed;



implementation drm_connector_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    return;
}



const ldv_drm_connector_unregister: ref;

axiom ldv_drm_connector_unregister == $sub.ref(0, 923769);

procedure ldv_drm_connector_unregister($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_drm_connector_unregister($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2582} ldv_dispatch_deregister_16_1($p1);
    goto corral_source_split_10959;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_16_1: ref;

axiom ldv_dispatch_deregister_16_1 == $sub.ref(0, 924801);

procedure ldv_dispatch_deregister_16_1($p0: ref);
  free requires assertsPassed;



implementation ldv_dispatch_deregister_16_1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    return;
}



const qxl_head_enabled: ref;

axiom qxl_head_enabled == $sub.ref(0, 925833);

procedure qxl_head_enabled($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation qxl_head_enabled($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 28)), $mul.ref(8, 1));
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, $p1);
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 28)), $mul.ref(12, 1));
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, $p5);
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    assume {:verifier.code 0} true;
    $i4 := $i7;
    goto $bb3;
}



const qxl_enc_destroy: ref;

axiom qxl_enc_destroy == $sub.ref(0, 926865);

procedure qxl_enc_destroy($p0: ref);
  free requires assertsPassed;



implementation qxl_enc_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2583} drm_encoder_cleanup($p0);
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    return;
}



const drm_encoder_cleanup: ref;

axiom drm_encoder_cleanup == $sub.ref(0, 927897);

procedure drm_encoder_cleanup($p0: ref);
  free requires assertsPassed;



implementation drm_encoder_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10977;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    return;
}



const qxl_enc_dpms: ref;

axiom qxl_enc_dpms == $sub.ref(0, 928929);

procedure qxl_enc_dpms($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation qxl_enc_dpms($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2584} {:cexpr "qxl_enc_dpms:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, drm_debug);
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, 1);
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2585} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 2586} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2587} drm_ut_debug_printk.ref.ref(.str.150, .str.117);
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_enc_mode_fixup: ref;

axiom qxl_enc_mode_fixup == $sub.ref(0, 929961);

procedure qxl_enc_mode_fixup($p0: ref, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation qxl_enc_mode_fixup($p0: ref, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, drm_debug);
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 1);
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2588} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 2589} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2590} drm_ut_debug_printk.ref.ref(.str.141, .str.117);
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_enc_prepare: ref;

axiom qxl_enc_prepare == $sub.ref(0, 930993);

procedure qxl_enc_prepare($p0: ref);
  free requires assertsPassed;



implementation qxl_enc_prepare($p0: ref)
{
  var $i1: i32;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.6, drm_debug);
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 1);
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2591} $i4 := ldv__builtin_expect($i3, 0);
    call {:si_unique_call 2592} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2593} drm_ut_debug_printk.ref.ref(.str.143, .str.117);
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_enc_commit: ref;

axiom qxl_enc_commit == $sub.ref(0, 932025);

procedure qxl_enc_commit($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.55, assertsPassed;



implementation qxl_enc_commit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} qxl_write_monitors_config_for_encoder($p5, $p0);
    goto SeqInstr_1720, SeqInstr_1721;

  SeqInstr_1721:
    assume assertsPassed;
    goto SeqInstr_1722;

  SeqInstr_1722:
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, drm_debug);
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_11017;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    $i8 := $and.i64($i7, 1);
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2595} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 2596} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2597} drm_ut_debug_printk.ref.ref(.str.144, .str.117);
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1720:
    assume !assertsPassed;
    return;
}



const qxl_enc_mode_set: ref;

axiom qxl_enc_mode_set == $sub.ref(0, 933057);

procedure qxl_enc_mode_set($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation qxl_enc_mode_set($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, drm_debug);
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 1);
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2598} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 2599} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_11029;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2600} drm_ut_debug_printk.ref.ref(.str.142, .str.117);
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_write_monitors_config_for_encoder: ref;

axiom qxl_write_monitors_config_for_encoder == $sub.ref(0, 934089);

procedure qxl_write_monitors_config_for_encoder($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.55, assertsPassed;



implementation qxl_write_monitors_config_for_encoder($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i16;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i82: i16;
  var $i83: i32;
  var $i84: i32;
  var $i85: i16;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i64;
  var $i98: i64;
  var $i99: i1;
  var $p100: ref;
  var $i101: i32;
  var $p102: ref;
  var $i103: i32;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i16;
  var $i112: i32;
  var $p113: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2601} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 2602} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 928), 1024)), $mul.ref(0, 1));
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    call {:si_unique_call 2604} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.6, $p18);
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    $i21 := $sle.i32($i20, $i11);
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.6, $p34);
    goto corral_source_split_11082;

  corral_source_split_11082:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i11, 0);
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.6, $p44);
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i11);
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(0, 1));
    goto corral_source_split_11107;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p50, $i11);
    goto corral_source_split_11108;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.6, $p51);
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 1160)), $mul.ref(264, 1));
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.6, $p53);
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i8.i1($i54);
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i55 == 1);
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(8, 1));
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p89, 0);
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(12, 1));
    goto corral_source_split_11148;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p90, 0);
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(16, 1));
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p91, 0);
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(20, 1));
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p92, 0);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.6, drm_debug);
    goto corral_source_split_11164;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    $i94 := $and.i32($i93, 4);
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    $i96 := $zext.i1.i32($i95);
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    $i97 := $sext.i32.i64($i96);
    goto corral_source_split_11168;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2610} $i98 := ldv__builtin_expect($i97, 0);
    call {:si_unique_call 2611} {:cexpr "tmp___1"} boogie_si_record_i64($i98);
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i98, 0);
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(24, 1));
    goto corral_source_split_11188;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p113, 0);
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2613} qxl_send_monitors_config($p0);
    goto SeqInstr_1723, SeqInstr_1724;

  SeqInstr_1724:
    assume assertsPassed;
    goto SeqInstr_1725;

  SeqInstr_1725:
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1723:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i99 == 1;
    goto corral_source_split_11172;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(16, 1));
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.6, $p100);
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(20, 1));
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.6, $p102);
    goto corral_source_split_11176;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(8, 1));
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.6, $p104);
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(12, 1));
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.6, $p106);
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_11181;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.6, $p108);
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    $i111 := $load.i16($M.6, $p110);
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    $i112 := $zext.i16.i32($i111);
    goto corral_source_split_11185;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2612} drm_ut_debug_printk.ref.ref.i32.i32.i32.i32.i32.i32(.str.147, .str.149, $i11, $i101, $i103, $i105, $i107, $i112);
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume $i55 == 1;
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.6, $p56);
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p57, $mul.ref(0, 1160)), $mul.ref(272, 1)), $mul.ref(76, 1));
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.6, $p59);
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(8, 1));
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p61, $i60);
    $p62 := $add.ref($add.ref($add.ref($p57, $mul.ref(0, 1160)), $mul.ref(272, 1)), $mul.ref(96, 1));
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.6, $p62);
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(12, 1));
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p64, $i63);
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.6, $p65);
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 1160)), $mul.ref(692, 1));
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.6, $p67);
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(16, 1));
    goto corral_source_split_11129;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p69, $i68);
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_11131;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.6, $p70);
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 1160)), $mul.ref(696, 1));
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.6, $p72);
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(20, 1));
    goto corral_source_split_11135;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p74, $i73);
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.6, $p75);
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    $i78 := $load.i16($M.6, $p77);
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i32($i78);
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    $i80 := $add.i32($i11, 1);
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i79, $i80);
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i81 == 1;
    goto corral_source_split_11154;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i16($i11);
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i82);
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i83, 1);
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i16($i84);
    goto corral_source_split_11158;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.6, $p86);
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p88, $i85);
    goto corral_source_split_11162;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb17:
    assume $i38 == 1;
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.6, drm_debug);
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    $i41 := $and.i64($i40, 1);
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2607} $i42 := ldv__builtin_expect($i41, 0);
    call {:si_unique_call 2608} {:cexpr "tmp___0"} boogie_si_record_i64($i42);
    goto corral_source_split_11095;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i43 == 1;
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2609} drm_ut_debug_printk.ref.ref(.str.147, .str.148);
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2606} drm_err.ref.ref(.str.146, $p1);
    goto corral_source_split_11087;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_11056;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2605} drm_err.ref.ref.i32(.str.145, $p23, $i33);
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.6, $p30);
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_11074;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb5;

  $bb1:
    assume $i9 == 1;
    call {:si_unique_call 2603} devirtbounce(0, .str.3, 747, 12);
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const qxl_ttm_tt_create: ref;

axiom qxl_ttm_tt_create == $sub.ref(0, 935121);

procedure qxl_ttm_tt_create($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed, $CurrAddr;



implementation qxl_ttm_tt_create($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2614} {:cexpr "qxl_ttm_tt_create:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 2615} {:cexpr "qxl_ttm_tt_create:arg:page_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2616} $p4 := qxl_get_qdev($p0);
    goto corral_source_split_11193;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2617} $p5 := kzalloc(128, 208);
    goto SeqInstr_1726, SeqInstr_1727;

  SeqInstr_1727:
    assume assertsPassed;
    goto SeqInstr_1728;

  SeqInstr_1728:
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_11197;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p12, qxl_backend_func);
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(112, 1));
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p13, $p4);
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2618} $i15 := ttm_dma_tt_init($p14, $p0, $i1, $i2, $p3);
    call {:si_unique_call 2619} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_11208;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    $p9 := $p5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11201;

  corral_source_split_11201:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p6);
    goto corral_source_split_11212;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2620} kfree($p17);
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  SeqInstr_1726:
    assume !assertsPassed;
    return;
}



const qxl_ttm_tt_populate: ref;

axiom qxl_ttm_tt_populate == $sub.ref(0, 936153);

procedure qxl_ttm_tt_populate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_ttm_tt_populate($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(76, 1));
    goto corral_source_split_11218;

  corral_source_split_11218:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, $p1);
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 2);
    goto corral_source_split_11220;

  corral_source_split_11220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2621} $i5 := ttm_pool_populate($p0);
    call {:si_unique_call 2622} {:cexpr "r"} boogie_si_record_i32($i5);
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11224;

  corral_source_split_11224:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const qxl_ttm_tt_unpopulate: ref;

axiom qxl_ttm_tt_unpopulate == $sub.ref(0, 937185);

procedure qxl_ttm_tt_unpopulate($p0: ref);
  free requires assertsPassed;



implementation qxl_ttm_tt_unpopulate($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2623} ttm_pool_unpopulate($p0);
    goto corral_source_split_11232;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    return;
}



const qxl_invalidate_caches: ref;

axiom qxl_invalidate_caches == $sub.ref(0, 938217);

procedure qxl_invalidate_caches($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_invalidate_caches($p0: ref, $i1: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2624} {:cexpr "qxl_invalidate_caches:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const qxl_init_mem_type: ref;

axiom qxl_init_mem_type == $sub.ref(0, 939249);

procedure qxl_init_mem_type($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.107, $M.108, $M.109, $M.110, $M.111;



implementation qxl_init_mem_type($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2625} {:cexpr "qxl_init_mem_type:arg:type"} boogie_si_record_i32($i1);
    goto corral_source_split_11236;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_11237;

  corral_source_split_11237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 2);
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 3);
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2626} drm_err.ref.i32(.str.158, $i1);
    goto corral_source_split_11267;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_11269;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb9:
    assume $i5 == 1;
    goto corral_source_split_11254;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(40, 1));
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    $M.110 := $store.ref($M.110, $p9, ttm_bo_manager_func);
    goto corral_source_split_11257;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(16, 1));
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    $M.111 := $store.i64($M.111, $p10, 0);
    goto corral_source_split_11259;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(12, 1));
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    $M.107 := $store.i32($M.107, $p11, 3);
    goto corral_source_split_11261;

  corral_source_split_11261:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(32, 1));
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    $M.108 := $store.i32($M.108, $p12, 458752);
    goto corral_source_split_11263;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(36, 1));
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    $M.109 := $store.i32($M.109, $p13, 65536);
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb15;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(12, 1));
    goto corral_source_split_11241;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    $M.107 := $store.i32($M.107, $p6, 2);
    goto corral_source_split_11242;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(32, 1));
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    $M.108 := $store.i32($M.108, $p7, 458752);
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(36, 1));
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    $M.109 := $store.i32($M.109, $p8, 65536);
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    goto $bb14;
}



const qxl_evict_flags: ref;

axiom qxl_evict_flags == $sub.ref(0, 940281);

procedure qxl_evict_flags($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation qxl_evict_flags($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2627} $p2 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_11271;

  corral_source_split_11271:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p3, 0);
    goto corral_source_split_11273;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, 0);
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p5, 458753);
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2628} $i6 := qxl_ttm_bo_is_qxl_bo($p0);
    goto corral_source_split_11278;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 2629} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11284;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p0);
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_11298;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2630} qxl_ttm_placement_from_domain($p16, 0, 0);
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p15, $mul.ref($sub.ref(0, 88), 1312)), $mul.ref(56, 1));
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_11301;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p17);
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_50 := $M.6;
    cmdloc_dummy_var_51 := $M.6;
    call {:si_unique_call 2631} cmdloc_dummy_var_52 := $memcpy.i8(cmdloc_dummy_var_50, cmdloc_dummy_var_51, $p18, $p19, 32, $zext.i32.i64(8), 0 == 1);
    $M.6 := cmdloc_dummy_var_52;
    goto corral_source_split_11303;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_11288;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p11, $p2);
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_11290;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p12, $p2);
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_11292;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p13, 1);
    goto corral_source_split_11293;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p14, 1);
    goto corral_source_split_11295;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;
}



const qxl_bo_move: ref;

axiom qxl_bo_move == $sub.ref(0, 941313);

procedure qxl_bo_move($p0: ref, $i1: i1, $i2: i1, $i3: i1, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.112;



implementation qxl_bo_move($p0: ref, $i1: i1, $i2: i1, $i3: i1, $p4: ref) returns ($r: i32)
{
  var $i5: i8;
  var $i6: i8;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i1);
    call {:si_unique_call 2632} {:cexpr "qxl_bo_move:arg:evict"} boogie_si_record_i1($i1);
    call {:si_unique_call 2633} {:cexpr "qxl_bo_move:arg:interruptible"} boogie_si_record_i1($i2);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i3);
    call {:si_unique_call 2634} {:cexpr "qxl_bo_move:arg:no_wait_gpu"} boogie_si_record_i1($i3);
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(56, 1)), $mul.ref(36, 1));
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.112, $p8);
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_11308;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i5);
    goto corral_source_split_11321;

  corral_source_split_11321:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i6);
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2636} $i18 := ttm_bo_move_memcpy($p0, $i16, $i17, $p4);
    call {:si_unique_call 2637} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_11323;

  corral_source_split_11323:
    assume {:verifier.code 0} true;
    $i15 := $i18;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(160, 1));
    goto corral_source_split_11311;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.113, $p11);
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_11313;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_11316;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2635} qxl_move_null($p0, $p4);
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;
}



const qxl_verify_access: ref;

axiom qxl_verify_access == $sub.ref(0, 942345);

procedure qxl_verify_access($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_verify_access($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_11326;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    goto corral_source_split_11327;

  corral_source_split_11327:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 88), 1312)), $mul.ref(1016, 1)), $mul.ref(24, 1));
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2638} $i6 := drm_vma_node_verify_access($p5, $p1);
    call {:si_unique_call 2639} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_11329;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const qxl_bo_move_notify: ref;

axiom qxl_bo_move_notify == $sub.ref(0, 943377);

procedure qxl_bo_move_notify($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.37, $M.6, assertsPassed, $M.38, $M.39, $CurrAddr, $M.46, $M.44, $M.42, $M.54, $M.40, $M.55, $M.52, $M.53, $M.49, $M.43, $M.41, $M.67, $M.68, $M.69, $M.70, $M.32, $M.72, $M.73, $M.74, $M.71, $M.64, $M.36, $M.75, $M.35, $M.65;



implementation qxl_bo_move_notify($p0: ref, $p1: ref)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i64;
  var $i23: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2640} $i2 := qxl_ttm_bo_is_qxl_bo($p0);
    goto corral_source_split_11332;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 2641} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_11333;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_11339;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_11343;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p7, $mul.ref($sub.ref(0, 88), 1312)), $mul.ref(1016, 1)), $mul.ref(8, 1));
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_11347;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_11348;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(56, 1)), $mul.ref(36, 1));
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_11351;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_11352;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_11354;

  corral_source_split_11354:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 88), 1312)), $mul.ref(1296, 1));
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    goto corral_source_split_11356;

  corral_source_split_11356:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb10;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_11359;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_11361;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2642} qxl_surface_evict($p14, $p8, $i23);
    goto SeqInstr_1729, SeqInstr_1730;

  SeqInstr_1730:
    assume assertsPassed;
    goto SeqInstr_1731;

  SeqInstr_1731:
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_1729:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_11341;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_11336;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const qxl_ttm_io_mem_reserve: ref;

axiom qxl_ttm_io_mem_reserve == $sub.ref(0, 944409);

procedure qxl_ttm_io_mem_reserve($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_ttm_io_mem_reserve($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i64;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $p57: ref;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11364;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2592)), $mul.ref(32, 1));
    goto corral_source_split_11365;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(36, 1));
    goto corral_source_split_11367;

  corral_source_split_11367:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.6, $p4);
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_11369;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    goto corral_source_split_11370;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2643} $p8 := qxl_get_qdev($p0);
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_11372;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p10, $0.ref);
    goto corral_source_split_11373;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p12, 0);
    goto corral_source_split_11375;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.6, $p13);
    goto corral_source_split_11377;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    $i15 := $shl.i64($i14, 12);
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_11379;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p17, $i15);
    goto corral_source_split_11380;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_11381;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p19, 0);
    goto corral_source_split_11382;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(48, 1)), $mul.ref(32, 1));
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p21, 0);
    goto corral_source_split_11384;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref($i6, 256)), $mul.ref(12, 1));
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p22);
    goto corral_source_split_11386;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 2);
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_11388;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(36, 1));
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.6, $p27);
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_11396;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(36, 1));
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.6, $p30);
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 2);
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(36, 1));
    goto corral_source_split_11418;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.6, $p33);
    goto corral_source_split_11419;

  corral_source_split_11419:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 3);
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11392;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb13:
    assume $i35 == 1;
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(48, 1)), $mul.ref(32, 1));
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p48, 1);
    goto corral_source_split_11425;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p8, $mul.ref(0, 5336)), $mul.ref(48, 1));
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.6, $p49);
    goto corral_source_split_11427;

  corral_source_split_11427:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_11428;

  corral_source_split_11428:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p52, $i50);
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_11430;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.6, $p53);
    goto corral_source_split_11431;

  corral_source_split_11431:
    assume {:verifier.code 0} true;
    $i55 := $shl.i64($i54, 12);
    goto corral_source_split_11432;

  corral_source_split_11432:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_11433;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p57, $i55);
    goto corral_source_split_11434;

  corral_source_split_11434:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb3;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(48, 1)), $mul.ref(32, 1));
    goto corral_source_split_11406;

  corral_source_split_11406:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p37, 1);
    goto corral_source_split_11407;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p8, $mul.ref(0, 5336)), $mul.ref(32, 1));
    goto corral_source_split_11408;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.6, $p38);
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_11410;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p41, $i39);
    goto corral_source_split_11411;

  corral_source_split_11411:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_11412;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.6, $p42);
    goto corral_source_split_11413;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    $i44 := $shl.i64($i43, 12);
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_11415;

  corral_source_split_11415:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p46, $i44);
    goto corral_source_split_11416;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb5:
    assume $i29 == 1;
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb3;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 22);
    goto $bb3;
}



const qxl_ttm_io_mem_free: ref;

axiom qxl_ttm_io_mem_free == $sub.ref(0, 945441);

procedure qxl_ttm_io_mem_free($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation qxl_ttm_io_mem_free($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11436;

  corral_source_split_11436:
    assume {:verifier.code 0} true;
    return;
}



const qxl_get_qdev: ref;

axiom qxl_get_qdev == $sub.ref(0, 946473);

procedure qxl_get_qdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qxl_get_qdev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11438;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11439;

  corral_source_split_11439:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 96), 2688));
    goto corral_source_split_11440;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 136), 5336));
    goto corral_source_split_11442;

  corral_source_split_11442:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const qxl_ttm_bo_is_qxl_bo: ref;

axiom qxl_ttm_bo_is_qxl_bo == $sub.ref(0, 947505);

procedure qxl_ttm_bo_is_qxl_bo($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation qxl_ttm_bo_is_qxl_bo($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11444;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_11445;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_11446;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_11447;

  corral_source_split_11447:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(qxl_ttm_bo_destroy));
    goto corral_source_split_11448;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11452;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_11450;

  corral_source_split_11450:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;
}



const drm_vma_node_verify_access: ref;

axiom drm_vma_node_verify_access == $sub.ref(0, 948537);

procedure drm_vma_node_verify_access($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_vma_node_verify_access($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11454;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2644} $i2 := drm_vma_node_is_allowed($p0, $p1);
    goto corral_source_split_11455;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 2645} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_11456;

  corral_source_split_11456:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_11457;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    $i5 := (if $i4 == 1 then 0 else $sub.i32(0, 13));
    goto corral_source_split_11458;

  corral_source_split_11458:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const drm_vma_node_is_allowed: ref;

axiom drm_vma_node_is_allowed == $sub.ref(0, 949569);

procedure drm_vma_node_is_allowed($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation drm_vma_node_is_allowed($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11460;

  corral_source_split_11460:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2646} $i2 := __VERIFIER_nondet_bool();
    call {:si_unique_call 2647} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i2);
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const qxl_move_null: ref;

axiom qxl_move_null == $sub.ref(0, 950601);

procedure qxl_move_null($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.112;



implementation qxl_move_null($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11463;

  corral_source_split_11463:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(56, 1));
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_11464;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.112, $p3);
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_11466;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_11467;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_11469;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2648} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 2649} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_11470;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_11476;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.112;
    cmdloc_dummy_var_54 := $M.112;
    call {:si_unique_call 2651} cmdloc_dummy_var_55 := $memcpy.i8(cmdloc_dummy_var_53, cmdloc_dummy_var_54, $p11, $p12, 96, $zext.i32.i64(8), 0 == 1);
    $M.112 := cmdloc_dummy_var_55;
    goto corral_source_split_11477;

  corral_source_split_11477:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_11478;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    $M.112 := $store.ref($M.112, $p13, $0.ref);
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 2650} devirtbounce(0, .str.155, 342, 12);
    goto corral_source_split_11473;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const ttm_bo_move_memcpy: ref;

axiom ttm_bo_move_memcpy == $sub.ref(0, 951633);

procedure ttm_bo_move_memcpy($p0: ref, $i1: i1, $i2: i1, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_move_memcpy($p0: ref, $i1: i1, $i2: i1, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2652} {:cexpr "ttm_bo_move_memcpy:arg:arg1"} boogie_si_record_i1($i1);
    call {:si_unique_call 2653} {:cexpr "ttm_bo_move_memcpy:arg:arg2"} boogie_si_record_i1($i2);
    goto corral_source_split_11481;

  corral_source_split_11481:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2654} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 2655} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ttm_pool_unpopulate: ref;

axiom ttm_pool_unpopulate == $sub.ref(0, 952665);

procedure ttm_pool_unpopulate($p0: ref);
  free requires assertsPassed;



implementation ttm_pool_unpopulate($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    return;
}



const ttm_pool_populate: ref;

axiom ttm_pool_populate == $sub.ref(0, 953697);

procedure ttm_pool_populate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_pool_populate($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11486;

  corral_source_split_11486:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2656} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2657} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_11487;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ttm_dma_tt_init: ref;

axiom ttm_dma_tt_init == $sub.ref(0, 954729);

procedure ttm_dma_tt_init($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_dma_tt_init($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2658} {:cexpr "ttm_dma_tt_init:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 2659} {:cexpr "ttm_dma_tt_init:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_11489;

  corral_source_split_11489:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2660} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 2661} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_11490;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const qxl_ttm_backend_bind: ref;

axiom qxl_ttm_backend_bind == $sub.ref(0, 955761);

procedure qxl_ttm_backend_bind($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_ttm_backend_bind($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var vslice_dummy_var_200: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11492;

  corral_source_split_11492:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_11493;

  corral_source_split_11493:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.6, $p3);
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    $i5 := $shl.i64($i4, 12);
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_11497;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p6, $i5);
    goto corral_source_split_11498;

  corral_source_split_11498:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_11499;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.6, $p7);
    goto corral_source_split_11500;

  corral_source_split_11500:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 1);
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_11503;

  corral_source_split_11503:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32(1, 0);
    goto corral_source_split_11504;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_11505;

  corral_source_split_11505:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_11506;

  corral_source_split_11506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2662} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 2663} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_11507;

  corral_source_split_11507:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_11508;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32(1, 0);
    goto corral_source_split_11515;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_11516;

  corral_source_split_11516:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_11517;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2665} vslice_dummy_var_200 := ldv__builtin_expect($i19, 0);
    goto corral_source_split_11518;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_11511;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.6, $p15);
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2664} warn_slowpath_fmt.ref.i32.ref.i64.ref.ref(.str.155, 271, .str.157, $i16, $p1, $p0);
    goto corral_source_split_11513;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const qxl_ttm_backend_unbind: ref;

axiom qxl_ttm_backend_unbind == $sub.ref(0, 956793);

procedure qxl_ttm_backend_unbind($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_ttm_backend_unbind($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11520;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 1);
    return;
}



const qxl_ttm_backend_destroy: ref;

axiom qxl_ttm_backend_destroy == $sub.ref(0, 957825);

procedure qxl_ttm_backend_destroy($p0: ref);
  free requires assertsPassed;



implementation qxl_ttm_backend_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11522;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11523;

  corral_source_split_11523:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_11524;

  corral_source_split_11524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2666} ttm_dma_tt_fini($p2);
    goto corral_source_split_11525;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_11526;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2667} kfree($p3);
    goto corral_source_split_11527;

  corral_source_split_11527:
    assume {:verifier.code 0} true;
    return;
}



const ttm_dma_tt_fini: ref;

axiom ttm_dma_tt_fini == $sub.ref(0, 958857);

procedure ttm_dma_tt_fini($p0: ref);
  free requires assertsPassed;



implementation ttm_dma_tt_fini($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11529;

  corral_source_split_11529:
    assume {:verifier.code 0} true;
    return;
}



const qxl_fb_find_or_create_single: ref;

axiom qxl_fb_find_or_create_single == $sub.ref(0, 959889);

procedure qxl_fb_find_or_create_single($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.114, $M.6, $M.32, $M.71, $M.42, $CurrAddr, $M.43, $M.40, $M.36, $M.35, assertsPassed, $M.65, $M.46, $M.52, $M.72, $M.38, $M.39, $M.37, $M.41, $M.44, $M.53, $M.75, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.54, $M.69, $M.70, $M.64;



implementation qxl_fb_find_or_create_single($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11531;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_11532;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_11533;

  corral_source_split_11533:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_11534;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_11535;

  corral_source_split_11535:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_11538;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} $i7 := qxlfb_create($p2, $p1);
    goto SeqInstr_1732, SeqInstr_1733;

  SeqInstr_1733:
    assume assertsPassed;
    goto SeqInstr_1734;

  SeqInstr_1734:
    call {:si_unique_call 2669} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_11539;

  corral_source_split_11539:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_11540;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb7;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb5;

  SeqInstr_1732:
    assume !assertsPassed;
    return;
}



const qxlfb_create: ref;

axiom qxlfb_create == $sub.ref(0, 960921);

procedure qxlfb_create($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.114, $M.6, $M.32, $M.71, $M.42, $CurrAddr, $M.43, $M.40, $M.36, $M.35, assertsPassed, $M.65, $M.46, $M.52, $M.72, $M.38, $M.39, $M.37, $M.41, $M.44, $M.53, $M.75, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.54, $M.69, $M.70, $M.64;



implementation qxlfb_create($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $p41: ref;
  var $i42: i32;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $i53: i32;
  var $i54: i64;
  var $i55: i64;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p76: ref;
  var $p78: ref;
  var $p80: ref;
  var $p81: ref;
  var $p83: ref;
  var $p84: ref;
  var $p87: ref;
  var $i88: i32;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i32;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $p113: ref;
  var $i114: i32;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $p124: ref;
  var $i125: i64;
  var $p126: ref;
  var $p127: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $p133: ref;
  var $p134: ref;
  var $p137: ref;
  var $p139: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $i145: i1;
  var $p146: ref;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p154: ref;
  var $i155: i64;
  var $p156: ref;
  var $i157: i64;
  var $p159: ref;
  var $i160: i32;
  var $p162: ref;
  var $i163: i32;
  var $p164: ref;
  var $i165: i32;
  var $p166: ref;
  var $i167: i32;
  var $p66: ref;
  var $i67: i32;
  var $i170: i64;
  var $i171: i1;
  var $i172: i32;
  var $i173: i1;
  var $i174: i32;
  var $i175: i64;
  var $i176: i64;
  var $i177: i1;
  var $i179: i32;
  var $i180: i64;
  var $i181: i1;
  var $i182: i1;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $i169: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: ref;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2670} $p2 := $alloc($mul.ref(68, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2671} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11548;

  corral_source_split_11548:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(320, 1));
    goto corral_source_split_11549;

  corral_source_split_11549:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    $M.114 := $store.ref($M.114, $p3, $0.ref);
    goto corral_source_split_11551;

  corral_source_split_11551:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(16, 1));
    goto corral_source_split_11552;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_11553;

  corral_source_split_11553:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_11554;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_11555;

  corral_source_split_11555:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    call {:si_unique_call 2672} {:cexpr "bpp"} boogie_si_record_i32($i10);
    goto corral_source_split_11556;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_11557;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    call {:si_unique_call 2673} {:cexpr "depth"} boogie_si_record_i32($i12);
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_11559;

  corral_source_split_11559:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_11560;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(4, 1));
    goto corral_source_split_11561;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p15, $i14);
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_11563;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_11564;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(8, 1));
    goto corral_source_split_11565;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p18, $i17);
    goto corral_source_split_11566;

  corral_source_split_11566:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(4, 1));
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    goto corral_source_split_11568;

  corral_source_split_11568:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i10, 1);
    goto corral_source_split_11569;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    $i22 := $sdiv.i32($i21, 8);
    goto corral_source_split_11570;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    $i23 := $mul.i32($i20, $i22);
    goto corral_source_split_11571;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 63);
    goto corral_source_split_11572;

  corral_source_split_11572:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, $sub.i32(0, 64));
    goto corral_source_split_11573;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(36, 1)), $mul.ref(0, 4));
    goto corral_source_split_11574;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p27, $i25);
    goto corral_source_split_11575;

  corral_source_split_11575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2674} $i28 := drm_mode_legacy_fb_format($i10, $i12);
    goto corral_source_split_11576;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(12, 1));
    goto corral_source_split_11577;

  corral_source_split_11577:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p29, $i28);
    goto corral_source_split_11578;

  corral_source_split_11578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2675} $i30 := qxlfb_create_pinned_object($p0, $p2, $p3);
    goto SeqInstr_1735, SeqInstr_1736;

  SeqInstr_1736:
    assume assertsPassed;
    goto SeqInstr_1737;

  SeqInstr_1737:
    call {:si_unique_call 2676} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_11579;

  corral_source_split_11579:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.114, $p3);
    goto corral_source_split_11580;

  corral_source_split_11580:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_11581;

  corral_source_split_11581:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_11582;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    $i34 := $M.45;
    goto corral_source_split_11583;

  corral_source_split_11583:
    assume {:verifier.code 0} true;
    $i35 := $sgt.i32($i34, 0);
    goto corral_source_split_11584;

  corral_source_split_11584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(36, 1)), $mul.ref(0, 4));
    goto corral_source_split_11595;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.6, $p44);
    goto corral_source_split_11596;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(8, 1));
    goto corral_source_split_11597;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.6, $p46);
    goto corral_source_split_11598;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    $i48 := $mul.i32($i45, $i47);
    goto corral_source_split_11599;

  corral_source_split_11599:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i48);
    goto corral_source_split_11600;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2678} $p50 := ldv_vmalloc_122($i49);
    goto SeqInstr_1738, SeqInstr_1739;

  SeqInstr_1739:
    assume assertsPassed;
    goto SeqInstr_1740;

  SeqInstr_1740:
    goto corral_source_split_11601;

  corral_source_split_11601:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_11602;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, 0);
    goto corral_source_split_11603;

  corral_source_split_11603:
    assume {:verifier.code 0} true;
    $i53 := $zext.i1.i32($i52);
    goto corral_source_split_11604;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i53);
    goto corral_source_split_11605;

  corral_source_split_11605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2679} $i55 := ldv__builtin_expect($i54, 0);
    call {:si_unique_call 2680} {:cexpr "tmp"} boogie_si_record_i64($i55);
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_11607;

  corral_source_split_11607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i57 := $M.45;
    goto corral_source_split_11611;

  corral_source_split_11611:
    assume {:verifier.code 0} true;
    $i58 := $sgt.i32($i57, 0);
    goto corral_source_split_11612;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2687} $p63 := framebuffer_alloc(0, $p8);
    goto corral_source_split_11621;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_11622;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    $i65 := $eq.i64($i64, 0);
    goto corral_source_split_11623;

  corral_source_split_11623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_11631;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_11632;

  corral_source_split_11632:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p69, $p0);
    goto corral_source_split_11633;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_11634;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.6, $p70);
    goto corral_source_split_11635;

  corral_source_split_11635:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(160, 1));
    goto corral_source_split_11636;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.114, $p3);
    goto corral_source_split_11637;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2688} vslice_dummy_var_201 := qxl_framebuffer_init($p71, $p72, $p2, $p73);
    goto corral_source_split_11638;

  corral_source_split_11638:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(160, 1)), $mul.ref(0, 1));
    goto corral_source_split_11639;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_11640;

  corral_source_split_11640:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p78, $p76);
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_11642;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p80, $p63);
    goto corral_source_split_11643;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(416, 1));
    goto corral_source_split_11644;

  corral_source_split_11644:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p81, $p50);
    goto corral_source_split_11645;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_11647;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2689} vslice_dummy_var_202 := strcpy($p84, .str.165);
    $p87 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(0, 4));
    goto corral_source_split_11648;

  corral_source_split_11648:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.6, $p87);
    $p89 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_11649;

  corral_source_split_11649:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.6, $p89);
    goto corral_source_split_11650;

  corral_source_split_11650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2690} drm_fb_helper_fill_fix($p63, $i88, $i90);
    goto corral_source_split_11651;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_11652;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p91, 769);
    goto corral_source_split_11653;

  corral_source_split_11653:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_11654;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p92, qxlfb_ops);
    goto corral_source_split_11655;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(32, 1));
    goto corral_source_split_11656;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    $i94 := $load.i64($M.6, $p93);
    goto corral_source_split_11657;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(16, 1));
    goto corral_source_split_11658;

  corral_source_split_11658:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p96, $i94);
    goto corral_source_split_11659;

  corral_source_split_11659:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.114, $p3);
    goto corral_source_split_11660;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 248)), $mul.ref(200, 1));
    goto corral_source_split_11661;

  corral_source_split_11661:
    assume {:verifier.code 0} true;
    $i99 := $load.i64($M.6, $p98);
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i64.i32($i99);
    goto corral_source_split_11663;

  corral_source_split_11663:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(24, 1));
    goto corral_source_split_11664;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p102, $i100);
    goto corral_source_split_11665;

  corral_source_split_11665:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(416, 1));
    goto corral_source_split_11666;

  corral_source_split_11666:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.6, $p103);
    goto corral_source_split_11667;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(1544, 1));
    goto corral_source_split_11668;

  corral_source_split_11668:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p105, $p104);
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.114, $p3);
    goto corral_source_split_11670;

  corral_source_split_11670:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 248)), $mul.ref(200, 1));
    goto corral_source_split_11671;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    $i108 := $load.i64($M.6, $p107);
    goto corral_source_split_11672;

  corral_source_split_11672:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(1552, 1));
    goto corral_source_split_11673;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p109, $i108);
    goto corral_source_split_11674;

  corral_source_split_11674:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(0, 1));
    goto corral_source_split_11675;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_11676;

  corral_source_split_11676:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.6, $p111);
    goto corral_source_split_11677;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_11678;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.6, $p113);
    goto corral_source_split_11679;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2691} drm_fb_helper_fill_var($p63, $p110, $i112, $i114);
    goto corral_source_split_11680;

  corral_source_split_11680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} $p115 := alloc_apertures(1);
    goto SeqInstr_1741, SeqInstr_1742;

  SeqInstr_1742:
    assume assertsPassed;
    goto SeqInstr_1743;

  SeqInstr_1743:
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(1592, 1));
    goto corral_source_split_11682;

  corral_source_split_11682:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p116, $p115);
    goto corral_source_split_11683;

  corral_source_split_11683:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(1592, 1));
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.6, $p117);
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p118);
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    $i120 := $eq.i64($i119, 0);
    goto corral_source_split_11687;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_11691;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.6, $p121);
    goto corral_source_split_11692;

  corral_source_split_11692:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p122, $mul.ref(0, 3144)), $mul.ref(1216, 1)), $mul.ref(1064, 1));
    goto corral_source_split_11693;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    $i125 := $load.i64($M.6, $p124);
    goto corral_source_split_11694;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(1592, 1));
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.6, $p126);
    goto corral_source_split_11696;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($add.ref($p127, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p130, $i125);
    goto corral_source_split_11698;

  corral_source_split_11698:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(40, 1));
    goto corral_source_split_11699;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    $i132 := $load.i64($M.6, $p131);
    goto corral_source_split_11700;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(1592, 1));
    goto corral_source_split_11701;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.6, $p133);
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($add.ref($p134, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_11703;

  corral_source_split_11703:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p137, $i132);
    goto corral_source_split_11704;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(56, 1));
    goto corral_source_split_11705;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p139, 0);
    goto corral_source_split_11706;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(64, 1));
    goto corral_source_split_11707;

  corral_source_split_11707:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p141, 0);
    goto corral_source_split_11708;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(1544, 1));
    goto corral_source_split_11709;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.6, $p142);
    goto corral_source_split_11710;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    $i144 := $p2i.ref.i64($p143);
    goto corral_source_split_11711;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    $i145 := $eq.i64($i144, 0);
    goto corral_source_split_11712;

  corral_source_split_11712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(912, 1));
    goto corral_source_split_11716;

  corral_source_split_11716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2693} $i147 := fb_alloc_cmap($p146, 256, 0);
    call {:si_unique_call 2694} {:cexpr "ret"} boogie_si_record_i32($i147);
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i147, 0);
    goto corral_source_split_11718;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(1496, 1));
    goto corral_source_split_11722;

  corral_source_split_11722:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p149, qxl_defio);
    goto corral_source_split_11723;

  corral_source_split_11723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2695} fb_deferred_io_init($p63);
    goto corral_source_split_11724;

  corral_source_split_11724:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3032, 1));
    goto corral_source_split_11725;

  corral_source_split_11725:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p150, $p63);
    goto corral_source_split_11726;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(160, 1));
    goto corral_source_split_11727;

  corral_source_split_11727:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3040, 1));
    goto corral_source_split_11728;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p152, $p151);
    goto corral_source_split_11729;

  corral_source_split_11729:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(16, 1));
    goto corral_source_split_11730;

  corral_source_split_11730:
    assume {:verifier.code 0} true;
    $i155 := $load.i64($M.6, $p154);
    goto corral_source_split_11731;

  corral_source_split_11731:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(1552, 1));
    goto corral_source_split_11732;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    $i157 := $load.i64($M.6, $p156);
    goto corral_source_split_11733;

  corral_source_split_11733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2696} vslice_dummy_var_203 := printk.ref.i64.i64(.str.166, $i155, $i157);
    $p159 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_11734;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.6, $p159);
    $p162 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(0, 4));
    goto corral_source_split_11735;

  corral_source_split_11735:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.6, $p162);
    $p164 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_11736;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.6, $p164);
    $p166 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(92, 1));
    goto corral_source_split_11737;

  corral_source_split_11737:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.6, $p166);
    goto corral_source_split_11738;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2697} vslice_dummy_var_204 := printk.ref.i32.i32.i32.i32(.str.167, $i160, $i163, $i165, $i167);
    goto corral_source_split_11739;

  corral_source_split_11739:
    assume {:verifier.code 0} true;
    $i169 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_11741;

  corral_source_split_11741:
    assume {:verifier.code 0} true;
    $r := $i169;
    return;

  $bb20:
    assume $i148 == 1;
    goto corral_source_split_11720;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    $p66, $i67 := $p76, $sub.i32(0, 12);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11627;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    $i170 := $p2i.ref.i64($p33);
    goto corral_source_split_11628;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    $i171 := $ne.i64($i170, 0);
    goto corral_source_split_11629;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    $i179 := $i67;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_11756;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    $i180 := $p2i.ref.i64($p66);
    goto corral_source_split_11757;

  corral_source_split_11757:
    assume {:verifier.code 0} true;
    $i181 := $ne.i64($i180, 0);
    goto corral_source_split_11758;

  corral_source_split_11758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i181 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.114, $p3);
    goto corral_source_split_11770;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2708} drm_gem_object_unreference($p185);
    goto SeqInstr_1753, SeqInstr_1754;

  SeqInstr_1754:
    assume assertsPassed;
    goto SeqInstr_1755;

  SeqInstr_1755:
    goto corral_source_split_11771;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    $i169 := $i179;
    goto $bb23;

  SeqInstr_1753:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i181 == 1;
    goto corral_source_split_11760;

  corral_source_split_11760:
    assume {:verifier.code 0} true;
    $i182 := $ne.i32($i179, 0);
    goto corral_source_split_11761;

  corral_source_split_11761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i182 == 1);
    goto $bb32;

  $bb33:
    assume $i182 == 1;
    goto corral_source_split_11763;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.114, $p3);
    goto corral_source_split_11764;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2705} drm_gem_object_unreference($p183);
    goto SeqInstr_1750, SeqInstr_1751;

  SeqInstr_1751:
    assume assertsPassed;
    goto SeqInstr_1752;

  SeqInstr_1752:
    goto corral_source_split_11765;

  corral_source_split_11765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2706} drm_framebuffer_cleanup($p66);
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p66);
    goto corral_source_split_11767;

  corral_source_split_11767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2707} kfree($p184);
    goto corral_source_split_11768;

  corral_source_split_11768:
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_1750:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i171 == 1;
    goto corral_source_split_11743;

  corral_source_split_11743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2698} $i172 := qxl_bo_reserve___0($p33, 0);
    goto SeqInstr_1744, SeqInstr_1745;

  SeqInstr_1745:
    assume assertsPassed;
    goto SeqInstr_1746;

  SeqInstr_1746:
    call {:si_unique_call 2699} {:cexpr "ret"} boogie_si_record_i32($i172);
    goto corral_source_split_11744;

  corral_source_split_11744:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 0);
    goto corral_source_split_11745;

  corral_source_split_11745:
    assume {:verifier.code 0} true;
    $i174 := $zext.i1.i32($i173);
    goto corral_source_split_11746;

  corral_source_split_11746:
    assume {:verifier.code 0} true;
    $i175 := $sext.i32.i64($i174);
    goto corral_source_split_11747;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2700} $i176 := ldv__builtin_expect($i175, 1);
    call {:si_unique_call 2701} {:cexpr "tmp___2"} boogie_si_record_i64($i176);
    goto corral_source_split_11748;

  corral_source_split_11748:
    assume {:verifier.code 0} true;
    $i177 := $ne.i64($i176, 0);
    goto corral_source_split_11749;

  corral_source_split_11749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i179 := $i172;
    goto $bb29;

  $bb26:
    assume $i177 == 1;
    goto corral_source_split_11751;

  corral_source_split_11751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2702} qxl_bo_kunmap($p33);
    goto corral_source_split_11752;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2703} vslice_dummy_var_205 := qxl_bo_unpin($p33);
    goto corral_source_split_11753;

  corral_source_split_11753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2704} qxl_bo_unreserve___0($p33);
    goto SeqInstr_1747, SeqInstr_1748;

  SeqInstr_1748:
    assume assertsPassed;
    goto SeqInstr_1749;

  SeqInstr_1749:
    goto corral_source_split_11754;

  corral_source_split_11754:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_1747:
    assume !assertsPassed;
    return;

  SeqInstr_1744:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i145 == 1;
    goto corral_source_split_11714;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    $p66, $i67 := $p76, $sub.i32(0, 28);
    goto $bb12;

  $bb14:
    assume $i120 == 1;
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    $p66, $i67 := $p76, $sub.i32(0, 12);
    goto $bb12;

  SeqInstr_1741:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i65 == 1;
    goto corral_source_split_11625;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    $p66, $i67 := $0.ref, $sub.i32(0, 12);
    goto $bb12;

  $bb7:
    assume $i58 == 1;
    goto corral_source_split_11614;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2682} $i59 := qxl_bo_mmap_offset($p33);
    call {:si_unique_call 2683} {:cexpr "tmp___0"} boogie_si_record_i64($i59);
    goto corral_source_split_11615;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2684} $i60 := qxl_bo_gpu_offset($p33);
    call {:si_unique_call 2685} {:cexpr "tmp___1"} boogie_si_record_i64($i60);
    goto corral_source_split_11616;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p32, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1000, 1));
    goto corral_source_split_11617;

  corral_source_split_11617:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.6, $p61);
    goto corral_source_split_11618;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2686} qxl_io_log.ref.ref.i64.i64.ref.ref($p5, .str.164, $i60, $i59, $p62, $p50);
    goto corral_source_split_11619;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i56 == 1;
    call {:si_unique_call 2681} devirtbounce(0, .str.22, 530, 12);
    goto corral_source_split_11609;

  corral_source_split_11609:
    assume {:verifier.code 0} true;
    assume false;
    return;

  SeqInstr_1738:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i35 == 1;
    goto corral_source_split_11586;

  corral_source_split_11586:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(4, 1));
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.6, $p36);
    goto corral_source_split_11588;

  corral_source_split_11588:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(8, 1));
    goto corral_source_split_11589;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.6, $p38);
    goto corral_source_split_11590;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(36, 1)), $mul.ref(0, 4));
    goto corral_source_split_11591;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.6, $p41);
    goto corral_source_split_11592;

  corral_source_split_11592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2677} qxl_io_log.ref.ref.ref.i32.i32.i32($p5, .str.162, .str.163, $i37, $i39, $i42);
    goto corral_source_split_11593;

  corral_source_split_11593:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1735:
    assume !assertsPassed;
    return;
}



const drm_mode_legacy_fb_format: ref;

axiom drm_mode_legacy_fb_format == $sub.ref(0, 961953);

procedure drm_mode_legacy_fb_format($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_mode_legacy_fb_format($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2709} {:cexpr "drm_mode_legacy_fb_format:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2710} {:cexpr "drm_mode_legacy_fb_format:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_11773;

  corral_source_split_11773:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2711} $i2 := __VERIFIER_nondet_uint();
    call {:si_unique_call 2712} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i2);
    goto corral_source_split_11774;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const qxlfb_create_pinned_object: ref;

axiom qxlfb_create_pinned_object == $sub.ref(0, 962985);

procedure qxlfb_create_pinned_object($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32, $M.6, $M.114, $M.71, $M.42, $M.43, $CurrAddr, $M.36, $M.35, $M.40, assertsPassed, $M.65;



implementation qxlfb_create_pinned_object($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $p37: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i46: i32;
  var $p52: ref;
  var $i21: i32;
  var vslice_dummy_var_206: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2713} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2714} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2715} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_11776;

  corral_source_split_11776:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(320, 1));
    goto corral_source_split_11777;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_11778;

  corral_source_split_11778:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p3, $0.ref);
    goto corral_source_split_11779;

  corral_source_split_11779:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 68)), $mul.ref(8, 1));
    goto corral_source_split_11780;

  corral_source_split_11780:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    call {:si_unique_call 2716} {:cexpr "height"} boogie_si_record_i32($i9);
    goto corral_source_split_11781;

  corral_source_split_11781:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 68)), $mul.ref(12, 1));
    goto corral_source_split_11782;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    goto corral_source_split_11783;

  corral_source_split_11783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2717} drm_fb_get_bpp_depth($i11, $p4, $p5);
    goto corral_source_split_11784;

  corral_source_split_11784:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 68)), $mul.ref(36, 1)), $mul.ref(0, 4));
    goto corral_source_split_11785;

  corral_source_split_11785:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_11786;

  corral_source_split_11786:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i14, $i9);
    call {:si_unique_call 2718} {:cexpr "size"} boogie_si_record_i32($i15);
    goto corral_source_split_11787;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 4095);
    goto corral_source_split_11788;

  corral_source_split_11788:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, $sub.i32(0, 4096));
    call {:si_unique_call 2719} {:cexpr "aligned_size"} boogie_si_record_i32($i17);
    goto corral_source_split_11789;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2720} $i18 := qxl_gem_object_create($p7, $i17, 0, 2, 0, 0, $0.ref, $p3);
    goto SeqInstr_1756, SeqInstr_1757;

  SeqInstr_1757:
    assume assertsPassed;
    goto SeqInstr_1758;

  SeqInstr_1758:
    call {:si_unique_call 2721} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_11790;

  corral_source_split_11790:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_11791;

  corral_source_split_11791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.32, $p3);
    goto corral_source_split_11798;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_11799;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_11800;

  corral_source_split_11800:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 68)), $mul.ref(4, 1));
    goto corral_source_split_11801;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.6, $p25);
    goto corral_source_split_11802;

  corral_source_split_11802:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p23, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1272, 1)), $mul.ref(4, 1));
    goto corral_source_split_11803;

  corral_source_split_11803:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p28, $i26);
    goto corral_source_split_11804;

  corral_source_split_11804:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 68)), $mul.ref(8, 1));
    goto corral_source_split_11805;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.6, $p29);
    goto corral_source_split_11806;

  corral_source_split_11806:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p23, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1272, 1)), $mul.ref(8, 1));
    goto corral_source_split_11807;

  corral_source_split_11807:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p32, $i30);
    goto corral_source_split_11808;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 68)), $mul.ref(36, 1)), $mul.ref(0, 4));
    goto corral_source_split_11809;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.6, $p34);
    goto corral_source_split_11810;

  corral_source_split_11810:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p23, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1272, 1)), $mul.ref(12, 1));
    goto corral_source_split_11811;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p37, $i35);
    goto corral_source_split_11812;

  corral_source_split_11812:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p23, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1272, 1)), $mul.ref(0, 1));
    goto corral_source_split_11813;

  corral_source_split_11813:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p39, 32);
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2723} $i40 := qxl_bo_reserve___0($p24, 0);
    goto SeqInstr_1759, SeqInstr_1760;

  SeqInstr_1760:
    assume assertsPassed;
    goto SeqInstr_1761;

  SeqInstr_1761:
    call {:si_unique_call 2724} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_11815;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_11816;

  corral_source_split_11816:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    goto corral_source_split_11817;

  corral_source_split_11817:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_11818;

  corral_source_split_11818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2725} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 2726} {:cexpr "tmp"} boogie_si_record_i64($i44);
    goto corral_source_split_11819;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_11820;

  corral_source_split_11820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2728} $i47 := qxl_bo_pin($p24, 2, $0.ref);
    call {:si_unique_call 2729} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_11829;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_11830;

  corral_source_split_11830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2731} $i49 := qxl_bo_kmap($p24, $0.ref);
    call {:si_unique_call 2732} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_11835;

  corral_source_split_11835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2733} qxl_bo_unreserve___0($p24);
    goto SeqInstr_1768, SeqInstr_1769;

  SeqInstr_1769:
    assume assertsPassed;
    goto SeqInstr_1770;

  SeqInstr_1770:
    goto corral_source_split_11836;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_11837;

  corral_source_split_11837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.32, $p3);
    goto corral_source_split_11841;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    $M.114 := $store.ref($M.114, $p2, $p51);
    goto corral_source_split_11842;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11796;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb12:
    assume $i50 == 1;
    goto corral_source_split_11839;

  corral_source_split_11839:
    assume {:verifier.code 0} true;
    $i46 := $i49;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_11824;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.32, $p3);
    goto corral_source_split_11825;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2727} qxlfb_destroy_pinned_object($p52);
    goto SeqInstr_1762, SeqInstr_1763;

  SeqInstr_1763:
    assume assertsPassed;
    goto SeqInstr_1764;

  SeqInstr_1764:
    goto corral_source_split_11826;

  corral_source_split_11826:
    assume {:verifier.code 0} true;
    $M.114 := $store.ref($M.114, $p2, $0.ref);
    goto corral_source_split_11827;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    $i21 := $i46;
    goto $bb3;

  SeqInstr_1762:
    assume !assertsPassed;
    return;

  SeqInstr_1768:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i48 == 1;
    goto corral_source_split_11832;

  corral_source_split_11832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2730} qxl_bo_unreserve___0($p24);
    goto SeqInstr_1765, SeqInstr_1766;

  SeqInstr_1766:
    assume assertsPassed;
    goto SeqInstr_1767;

  SeqInstr_1767:
    goto corral_source_split_11833;

  corral_source_split_11833:
    assume {:verifier.code 0} true;
    $i46 := $i47;
    goto $bb7;

  SeqInstr_1765:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i45 == 1;
    goto corral_source_split_11822;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    $i46 := $i40;
    goto $bb7;

  SeqInstr_1759:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_11793;

  corral_source_split_11793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2722} vslice_dummy_var_206 := printk.ref.i32(.str.168, $i17);
    goto corral_source_split_11794;

  corral_source_split_11794:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_1756:
    assume !assertsPassed;
    return;
}



const ldv_vmalloc_122: ref;

axiom ldv_vmalloc_122 == $sub.ref(0, 964017);

procedure ldv_vmalloc_122($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_vmalloc_122($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2734} {:cexpr "ldv_vmalloc_122:arg:ldv_func_arg1"} boogie_si_record_i64($i0);
    goto corral_source_split_11844;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2735} ldv_check_alloc_nonatomic();
    goto SeqInstr_1771, SeqInstr_1772;

  SeqInstr_1772:
    assume assertsPassed;
    goto SeqInstr_1773;

  SeqInstr_1773:
    goto corral_source_split_11845;

  corral_source_split_11845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2736} $p1 := ldv_malloc_unknown_size();
    goto corral_source_split_11846;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  SeqInstr_1771:
    assume !assertsPassed;
    return;
}



const framebuffer_alloc: ref;

axiom framebuffer_alloc == $sub.ref(0, 965049);

procedure framebuffer_alloc($i0: i64, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation framebuffer_alloc($i0: i64, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2737} {:cexpr "framebuffer_alloc:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_11848;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2738} $p2 := external_alloc();
    goto corral_source_split_11849;

  corral_source_split_11849:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_11850;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 966081);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const drm_fb_helper_fill_fix: ref;

axiom drm_fb_helper_fill_fix == $sub.ref(0, 967113);

procedure drm_fb_helper_fill_fix($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation drm_fb_helper_fill_fix($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2739} {:cexpr "drm_fb_helper_fill_fix:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2740} {:cexpr "drm_fb_helper_fill_fix:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11852;

  corral_source_split_11852:
    assume {:verifier.code 0} true;
    return;
}



const drm_fb_helper_fill_var: ref;

axiom drm_fb_helper_fill_var == $sub.ref(0, 968145);

procedure drm_fb_helper_fill_var($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;



implementation drm_fb_helper_fill_var($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2741} {:cexpr "drm_fb_helper_fill_var:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 2742} {:cexpr "drm_fb_helper_fill_var:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_11854;

  corral_source_split_11854:
    assume {:verifier.code 0} true;
    return;
}



const alloc_apertures: ref;

axiom alloc_apertures == $sub.ref(0, 969177);

procedure alloc_apertures($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed, $CurrAddr;



implementation alloc_apertures($i0: i32) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2743} {:cexpr "alloc_apertures:arg:max_num"} boogie_si_record_i32($i0);
    goto corral_source_split_11856;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    goto corral_source_split_11857;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    $i2 := $mul.i64($i1, 16);
    goto corral_source_split_11858;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 8);
    goto corral_source_split_11859;

  corral_source_split_11859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2744} $p4 := kzalloc($i3, 208);
    goto SeqInstr_1774, SeqInstr_1775;

  SeqInstr_1775:
    assume assertsPassed;
    goto SeqInstr_1776;

  SeqInstr_1776:
    goto corral_source_split_11860;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_11861;

  corral_source_split_11861:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_11862;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_11863;

  corral_source_split_11863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_11869;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p9, $i0);
    goto corral_source_split_11870;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    $p8 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11867;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_11865;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  SeqInstr_1774:
    assume !assertsPassed;
    return;
}



const fb_alloc_cmap: ref;

axiom fb_alloc_cmap == $sub.ref(0, 970209);

procedure fb_alloc_cmap($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fb_alloc_cmap($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2745} {:cexpr "fb_alloc_cmap:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2746} {:cexpr "fb_alloc_cmap:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11872;

  corral_source_split_11872:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2747} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2748} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_11873;

  corral_source_split_11873:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const fb_deferred_io_init: ref;

axiom fb_deferred_io_init == $sub.ref(0, 971241);

procedure fb_deferred_io_init($p0: ref);
  free requires assertsPassed;



implementation fb_deferred_io_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11875;

  corral_source_split_11875:
    assume {:verifier.code 0} true;
    return;
}



const drm_gem_object_unreference: ref;

axiom drm_gem_object_unreference == $sub.ref(0, 972273);

procedure drm_gem_object_unreference($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.36, assertsPassed, $CurrAddr, $M.42, $M.52, $M.72, $M.38, $M.39, $M.35, $M.40, $M.37, $M.41, $M.44, $M.53, $M.43, $M.75, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.65, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64;



implementation drm_gem_object_unreference($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var vslice_dummy_var_207: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11877;

  corral_source_split_11877:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_11878;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_11879;

  corral_source_split_11879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11881;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_11882;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2749} vslice_dummy_var_207 := kref_put($p3, drm_gem_object_free);
    goto SeqInstr_1777, SeqInstr_1778;

  SeqInstr_1778:
    assume assertsPassed;
    goto SeqInstr_1779;

  SeqInstr_1779:
    goto corral_source_split_11883;

  corral_source_split_11883:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1777:
    assume !assertsPassed;
    return;
}



const kref_put: ref;

axiom kref_put == $sub.ref(0, 973305);

procedure kref_put($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.36, assertsPassed, $CurrAddr, $M.42, $M.52, $M.72, $M.38, $M.39, $M.35, $M.40, $M.37, $M.41, $M.44, $M.53, $M.43, $M.75, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.65, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64;



implementation kref_put($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11885;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2750} $i2 := kref_sub($p0, 1, $p1);
    goto SeqInstr_1780, SeqInstr_1781;

  SeqInstr_1781:
    assume assertsPassed;
    goto SeqInstr_1782;

  SeqInstr_1782:
    call {:si_unique_call 2751} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_11886;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_1780:
    assume !assertsPassed;
    return;
}



const kref_sub: ref;

axiom kref_sub == $sub.ref(0, 974337);

procedure kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.36, assertsPassed, $CurrAddr, $M.42, $M.52, $M.72, $M.38, $M.39, $M.35, $M.40, $M.37, $M.41, $M.44, $M.53, $M.43, $M.75, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.65, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64;



implementation kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_208: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2752} {:cexpr "kref_sub:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_11888;

  corral_source_split_11888:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_11889;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_11890;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 2753} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_11891;

  corral_source_split_11891:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_11892;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_11893;

  corral_source_split_11893:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_11894;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2754} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 2755} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_11895;

  corral_source_split_11895:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_11896;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_11901;

  corral_source_split_11901:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_11903;

  corral_source_split_11903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2757} vslice_dummy_var_208 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_11904;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11905;

  corral_source_split_11905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2758} $i16 := atomic_sub_and_test($i1, $p15);
    call {:si_unique_call 2759} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_11906;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_11907;

  corral_source_split_11907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_11911;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 2760} devirtbounce.13($p2, $p0);
    goto SeqInstr_1783, SeqInstr_1784;

  SeqInstr_1784:
    assume assertsPassed;
    goto SeqInstr_1785;

  SeqInstr_1785:
    goto corral_source_split_11909;

  corral_source_split_11909:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  SeqInstr_1783:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_11898;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2756} warn_slowpath_null(.str.170, 71);
    goto corral_source_split_11899;

  corral_source_split_11899:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_check_alloc_nonatomic: ref;

axiom ldv_check_alloc_nonatomic == $sub.ref(0, 975369);

procedure ldv_check_alloc_nonatomic();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_nonatomic()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11913;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2761} ldv_linux_alloc_irq_check_alloc_nonatomic();
    goto SeqInstr_1786, SeqInstr_1787;

  SeqInstr_1787:
    assume assertsPassed;
    goto SeqInstr_1788;

  SeqInstr_1788:
    goto corral_source_split_11914;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2762} ldv_linux_alloc_usb_lock_check_alloc_nonatomic();
    goto SeqInstr_1789, SeqInstr_1790;

  SeqInstr_1790:
    assume assertsPassed;
    goto SeqInstr_1791;

  SeqInstr_1791:
    goto corral_source_split_11915;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1789:
    assume !assertsPassed;
    return;

  SeqInstr_1786:
    assume !assertsPassed;
    return;
}



const ldv_linux_alloc_irq_check_alloc_nonatomic: ref;

axiom ldv_linux_alloc_irq_check_alloc_nonatomic == $sub.ref(0, 976401);

procedure ldv_linux_alloc_irq_check_alloc_nonatomic();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_irq_check_alloc_nonatomic()
{
  var $i0: i1;
  var $i1: i8;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11917;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2763} $i0 := ldv_in_interrupt_context();
    goto corral_source_split_11918;

  corral_source_split_11918:
    assume {:verifier.code 0} true;
    $i1 := $zext.i1.i8($i0);
    call {:si_unique_call 2764} {:cexpr "tmp"} boogie_si_record_i8($i1);
    goto corral_source_split_11919;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_11920;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11922;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2765} ldv_assert_linux_alloc_irq__nonatomic(0);
    goto SeqInstr_1792, SeqInstr_1793;

  SeqInstr_1793:
    assume assertsPassed;
    goto SeqInstr_1794;

  SeqInstr_1794:
    goto corral_source_split_11923;

  corral_source_split_11923:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1792:
    assume !assertsPassed;
    return;
}



const ldv_linux_alloc_usb_lock_check_alloc_nonatomic: ref;

axiom ldv_linux_alloc_usb_lock_check_alloc_nonatomic == $sub.ref(0, 977433);

procedure ldv_linux_alloc_usb_lock_check_alloc_nonatomic();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_usb_lock_check_alloc_nonatomic()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11925;

  corral_source_split_11925:
    assume {:verifier.code 0} true;
    $i0 := $M.50;
    goto corral_source_split_11926;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_11927;

  corral_source_split_11927:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11928;

  corral_source_split_11928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2766} ldv_assert_linux_alloc_usb_lock__nonatomic($i2);
    goto SeqInstr_1795, SeqInstr_1796;

  SeqInstr_1796:
    assume assertsPassed;
    goto SeqInstr_1797;

  SeqInstr_1797:
    goto corral_source_split_11929;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1795:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_alloc_usb_lock__nonatomic: ref;

axiom ldv_assert_linux_alloc_usb_lock__nonatomic == $sub.ref(0, 978465);

procedure ldv_assert_linux_alloc_usb_lock__nonatomic($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_usb_lock__nonatomic($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2767} {:cexpr "ldv_assert_linux_alloc_usb_lock__nonatomic:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11931;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11932;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11934;

  corral_source_split_11934:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2768} __VERIFIER_error();
    goto SeqInstr_1798, SeqInstr_1799;

  SeqInstr_1799:
    assume assertsPassed;
    goto SeqInstr_1800;

  SeqInstr_1800:
    goto corral_source_split_11935;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1798:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_alloc_irq__nonatomic: ref;

axiom ldv_assert_linux_alloc_irq__nonatomic == $sub.ref(0, 979497);

procedure ldv_assert_linux_alloc_irq__nonatomic($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_irq__nonatomic($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2769} {:cexpr "ldv_assert_linux_alloc_irq__nonatomic:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11937;

  corral_source_split_11937:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11938;

  corral_source_split_11938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11940;

  corral_source_split_11940:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2770} __VERIFIER_error();
    goto SeqInstr_1801, SeqInstr_1802;

  SeqInstr_1802:
    assume assertsPassed;
    goto SeqInstr_1803;

  SeqInstr_1803:
    goto corral_source_split_11941;

  corral_source_split_11941:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1801:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const drm_fb_get_bpp_depth: ref;

axiom drm_fb_get_bpp_depth == $sub.ref(0, 980529);

procedure drm_fb_get_bpp_depth($i0: i32, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation drm_fb_get_bpp_depth($i0: i32, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2771} {:cexpr "drm_fb_get_bpp_depth:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_11943;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    return;
}



const drm_fb_helper_check_var: ref;

axiom drm_fb_helper_check_var == $sub.ref(0, 981561);

procedure drm_fb_helper_check_var($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_fb_helper_check_var($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11945;

  corral_source_split_11945:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2772} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2773} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11946;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const drm_fb_helper_set_par: ref;

axiom drm_fb_helper_set_par == $sub.ref(0, 982593);

procedure drm_fb_helper_set_par($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_fb_helper_set_par($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11948;

  corral_source_split_11948:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2774} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2775} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_11949;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const drm_fb_helper_setcmap: ref;

axiom drm_fb_helper_setcmap == $sub.ref(0, 983625);

procedure drm_fb_helper_setcmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_fb_helper_setcmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11951;

  corral_source_split_11951:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2776} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2777} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11952;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const drm_fb_helper_blank: ref;

axiom drm_fb_helper_blank == $sub.ref(0, 984657);

procedure drm_fb_helper_blank($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_fb_helper_blank($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2778} {:cexpr "drm_fb_helper_blank:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_11954;

  corral_source_split_11954:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2779} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2780} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11955;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const drm_fb_helper_pan_display: ref;

axiom drm_fb_helper_pan_display == $sub.ref(0, 985689);

procedure drm_fb_helper_pan_display($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_fb_helper_pan_display($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11957;

  corral_source_split_11957:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2781} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2782} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11958;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const qxl_fb_fillrect: ref;

axiom qxl_fb_fillrect == $sub.ref(0, 986721);

procedure qxl_fb_fillrect($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.67, $M.68, $M.72, $CurrAddr, $M.42, $M.52, $M.69, $M.70, $M.32, assertsPassed, $M.53, $M.49, $M.40, $M.44, $M.41, $M.71, $M.43, $M.75, $M.64, $M.36, $M.37, $M.73, $M.74, $M.35, $M.55, $M.65, $M.54;



implementation qxl_fb_fillrect($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p14: ref;
  var vslice_dummy_var_209: i1;
  var vslice_dummy_var_210: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11960;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_11961;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_11962;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11963;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 528)), $mul.ref(320, 1));
    goto corral_source_split_11964;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_11965;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2783} $i7 := drm_can_sleep();
    goto SeqInstr_1804, SeqInstr_1805;

  SeqInstr_1805:
    assume assertsPassed;
    goto SeqInstr_1806;

  SeqInstr_1806:
    goto corral_source_split_11966;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 2784} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_11967;

  corral_source_split_11967:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_11968;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11972;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_11973;

  corral_source_split_11973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 5336)), $mul.ref(5248, 1));
    goto corral_source_split_11980;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2787} vslice_dummy_var_210 := flush_work($p14);
    goto corral_source_split_11981;

  corral_source_split_11981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2788} qxl_fb_fillrect_internal($p0, $p1);
    goto SeqInstr_1810, SeqInstr_1811;

  SeqInstr_1811:
    assume assertsPassed;
    goto SeqInstr_1812;

  SeqInstr_1812:
    goto corral_source_split_11982;

  corral_source_split_11982:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1810:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_11975;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2785} qxl_fb_delayed_fillrect($p4, $p1);
    goto SeqInstr_1807, SeqInstr_1808;

  SeqInstr_1808:
    assume assertsPassed;
    goto SeqInstr_1809;

  SeqInstr_1809:
    goto corral_source_split_11976;

  corral_source_split_11976:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 5336)), $mul.ref(5248, 1));
    goto corral_source_split_11977;

  corral_source_split_11977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2786} vslice_dummy_var_209 := schedule_work($p12);
    goto corral_source_split_11978;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_1807:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_11970;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  SeqInstr_1804:
    assume !assertsPassed;
    return;
}



const qxl_fb_copyarea: ref;

axiom qxl_fb_copyarea == $sub.ref(0, 987753);

procedure qxl_fb_copyarea($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.67, $M.68, $M.72, $M.42, $M.52, $M.69, $M.70, $M.32, assertsPassed, $CurrAddr, $M.53, $M.49, $M.40, $M.44, $M.41, $M.71, $M.43, $M.75, $M.64, $M.36, $M.37, $M.73, $M.74, $M.35, $M.55, $M.65, $M.54;



implementation qxl_fb_copyarea($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p14: ref;
  var vslice_dummy_var_211: i1;
  var vslice_dummy_var_212: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11984;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_11985;

  corral_source_split_11985:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_11986;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11987;

  corral_source_split_11987:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 528)), $mul.ref(320, 1));
    goto corral_source_split_11988;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_11989;

  corral_source_split_11989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2789} $i7 := drm_can_sleep();
    goto SeqInstr_1813, SeqInstr_1814;

  SeqInstr_1814:
    assume assertsPassed;
    goto SeqInstr_1815;

  SeqInstr_1815:
    goto corral_source_split_11990;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 2790} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_11991;

  corral_source_split_11991:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_11992;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11996;

  corral_source_split_11996:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_11997;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 5336)), $mul.ref(5248, 1));
    goto corral_source_split_12004;

  corral_source_split_12004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2793} vslice_dummy_var_212 := flush_work($p14);
    goto corral_source_split_12005;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2794} qxl_fb_copyarea_internal($p0, $p1);
    goto SeqInstr_1819, SeqInstr_1820;

  SeqInstr_1820:
    assume assertsPassed;
    goto SeqInstr_1821;

  SeqInstr_1821:
    goto corral_source_split_12006;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1819:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_11999;

  corral_source_split_11999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2791} qxl_fb_delayed_copyarea($p4, $p1);
    goto SeqInstr_1816, SeqInstr_1817;

  SeqInstr_1817:
    assume assertsPassed;
    goto SeqInstr_1818;

  SeqInstr_1818:
    goto corral_source_split_12000;

  corral_source_split_12000:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 5336)), $mul.ref(5248, 1));
    goto corral_source_split_12001;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2792} vslice_dummy_var_211 := schedule_work($p12);
    goto corral_source_split_12002;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_1816:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_11994;

  corral_source_split_11994:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  SeqInstr_1813:
    assume !assertsPassed;
    return;
}



const qxl_fb_imageblit: ref;

axiom qxl_fb_imageblit == $sub.ref(0, 988785);

procedure qxl_fb_imageblit($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.72, $CurrAddr, $M.42, $M.38, $M.39, $M.46, $M.69, $M.70, $M.32, assertsPassed, $M.73, $M.74, $M.41, $M.71, $M.43, $M.52, $M.40, $M.64, $M.36, $M.53, $M.49, $M.44, $M.35, $M.75, $M.37, $M.55, $M.65, $M.54;



implementation qxl_fb_imageblit($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p14: ref;
  var vslice_dummy_var_213: i1;
  var vslice_dummy_var_214: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12008;

  corral_source_split_12008:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_12009;

  corral_source_split_12009:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_12010;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_12011;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 528)), $mul.ref(320, 1));
    goto corral_source_split_12012;

  corral_source_split_12012:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_12013;

  corral_source_split_12013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2795} $i7 := drm_can_sleep();
    goto SeqInstr_1822, SeqInstr_1823;

  SeqInstr_1823:
    assume assertsPassed;
    goto SeqInstr_1824;

  SeqInstr_1824:
    goto corral_source_split_12014;

  corral_source_split_12014:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 2796} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_12015;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_12016;

  corral_source_split_12016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12020;

  corral_source_split_12020:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_12021;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 5336)), $mul.ref(5248, 1));
    goto corral_source_split_12028;

  corral_source_split_12028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2799} vslice_dummy_var_214 := flush_work($p14);
    goto corral_source_split_12029;

  corral_source_split_12029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2800} qxl_fb_imageblit_internal($p0, $p1);
    goto SeqInstr_1828, SeqInstr_1829;

  SeqInstr_1829:
    assume assertsPassed;
    goto SeqInstr_1830;

  SeqInstr_1830:
    goto corral_source_split_12030;

  corral_source_split_12030:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1828:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_12023;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2797} qxl_fb_delayed_imageblit($p4, $p1);
    goto SeqInstr_1825, SeqInstr_1826;

  SeqInstr_1826:
    assume assertsPassed;
    goto SeqInstr_1827;

  SeqInstr_1827:
    goto corral_source_split_12024;

  corral_source_split_12024:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 5336)), $mul.ref(5248, 1));
    goto corral_source_split_12025;

  corral_source_split_12025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2798} vslice_dummy_var_213 := schedule_work($p12);
    goto corral_source_split_12026;

  corral_source_split_12026:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_1825:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_12018;

  corral_source_split_12018:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  SeqInstr_1822:
    assume !assertsPassed;
    return;
}



const drm_fb_helper_debug_enter: ref;

axiom drm_fb_helper_debug_enter == $sub.ref(0, 989817);

procedure drm_fb_helper_debug_enter($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_fb_helper_debug_enter($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12032;

  corral_source_split_12032:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2801} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2802} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const drm_fb_helper_debug_leave: ref;

axiom drm_fb_helper_debug_leave == $sub.ref(0, 990849);

procedure drm_fb_helper_debug_leave($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_fb_helper_debug_leave($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12035;

  corral_source_split_12035:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2803} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2804} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_12036;

  corral_source_split_12036:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const drm_can_sleep: ref;

axiom drm_can_sleep == $sub.ref(0, 991881);

procedure drm_can_sleep() returns ($r: i1);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.41, $M.71, $M.43, $M.64, $M.36, assertsPassed, $M.40, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.75, $M.49, $M.73, $M.74, $M.55, $M.65, $M.54;



implementation drm_can_sleep() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i64;
  var $i27: i32;
  var $i28: i1;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12038;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2805} $i0 := preempt_count();
    goto SeqInstr_1831, SeqInstr_1832;

  SeqInstr_1832:
    assume assertsPassed;
    goto SeqInstr_1833;

  SeqInstr_1833:
    call {:si_unique_call 2806} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_12039;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    $i1 := $sext.i32.i64($i0);
    goto corral_source_split_12040;

  corral_source_split_12040:
    assume {:verifier.code 0} true;
    $i2 := $and.i64($i1, $sub.i64(0, 2097153));
    goto corral_source_split_12041;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_12042;

  corral_source_split_12042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_12046;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    call {:si_unique_call 2819} $i17 := devirtbounce.9(0, cpu_number);
    goto SeqInstr_1858, SeqInstr_1859;

  SeqInstr_1859:
    assume assertsPassed;
    goto SeqInstr_1860;

  SeqInstr_1860:
    call {:si_unique_call 2820} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i17);
    goto corral_source_split_12087;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2812} $i24 := atomic_read(kgdb_active);
    call {:si_unique_call 2813} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_12067;

  corral_source_split_12067:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i17, $i24);
    goto corral_source_split_12068;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i25 == 1);
    goto corral_source_split_12121;

  corral_source_split_12121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2831} $i26 := arch_local_save_flags();
    call {:si_unique_call 2832} {:cexpr "_flags"} boogie_si_record_i64($i26);
    goto corral_source_split_12122;

  corral_source_split_12122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2833} $i27 := arch_irqs_disabled_flags($i26);
    call {:si_unique_call 2834} {:cexpr "tmp___1"} boogie_si_record_i32($i27);
    goto corral_source_split_12123;

  corral_source_split_12123:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_12124;

  corral_source_split_12124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12048;

  corral_source_split_12048:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb41:
    assume $i28 == 1;
    goto corral_source_split_12126;

  corral_source_split_12126:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb39:
    assume $i25 == 1;
    goto corral_source_split_12119;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  SeqInstr_1858:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_12044;

  corral_source_split_12044:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  SeqInstr_1831:
    assume !assertsPassed;
    return;
}



const qxl_fb_delayed_imageblit: ref;

axiom qxl_fb_delayed_imageblit == $sub.ref(0, 992913);

procedure qxl_fb_delayed_imageblit($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.72, assertsPassed;



implementation qxl_fb_delayed_imageblit($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12128;

  corral_source_split_12128:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_12129;

  corral_source_split_12129:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, $p2);
    goto corral_source_split_12130;

  corral_source_split_12130:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_12131;

  corral_source_split_12131:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.6, $p4);
    goto corral_source_split_12132;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i3, $i5);
    goto corral_source_split_12133;

  corral_source_split_12133:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_12134;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.6, $p7);
    goto corral_source_split_12135;

  corral_source_split_12135:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_12136;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i32($i9, 7);
    goto corral_source_split_12137;

  corral_source_split_12137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_12145;

  corral_source_split_12145:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12147;

  corral_source_split_12147:
    assume {:verifier.code 0} true;
    $i16 := $mul.i32($i6, $i15);
    call {:si_unique_call 2835} {:cexpr "size"} boogie_si_record_i32($i16);
    goto corral_source_split_12148;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_12149;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 112);
    goto corral_source_split_12150;

  corral_source_split_12150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2836} $p19 := kmalloc($i18, 544);
    goto SeqInstr_1882, SeqInstr_1883;

  SeqInstr_1883:
    assume assertsPassed;
    goto SeqInstr_1884;

  SeqInstr_1884:
    goto corral_source_split_12151;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_12152;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_12153;

  corral_source_split_12153:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_12154;

  corral_source_split_12154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_12158;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_12159;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_12160;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p1);
    goto corral_source_split_12161;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_56 := $M.6;
    cmdloc_dummy_var_57 := $M.6;
    call {:si_unique_call 2837} cmdloc_dummy_var_58 := $memcpy.i8(cmdloc_dummy_var_56, cmdloc_dummy_var_57, $p25, $p26, 80, $zext.i32.i64(8), 0 == 1);
    $M.6 := cmdloc_dummy_var_58;
    goto corral_source_split_12162;

  corral_source_split_12162:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p20);
    goto corral_source_split_12163;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(1, 1));
    goto corral_source_split_12164;

  corral_source_split_12164:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p20, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_12165;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p29, $p28);
    goto corral_source_split_12166;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p20, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_12167;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p30, 3);
    goto corral_source_split_12168;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p20, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_12169;

  corral_source_split_12169:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.6, $p31);
    goto corral_source_split_12170;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_12171;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.6, $p33);
    goto corral_source_split_12172;

  corral_source_split_12172:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i16);
    goto corral_source_split_12173;

  corral_source_split_12173:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_59 := $M.6;
    cmdloc_dummy_var_60 := $M.6;
    call {:si_unique_call 2838} cmdloc_dummy_var_61 := $memcpy.i8(cmdloc_dummy_var_59, cmdloc_dummy_var_60, $p32, $p34, $i35, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_61;
    goto corral_source_split_12174;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p20, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_12175;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.6, $p36);
    goto corral_source_split_12176;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p20, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_12177;

  corral_source_split_12177:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_12178;

  corral_source_split_12178:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_12179;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p40, $p37);
    goto corral_source_split_12180;

  corral_source_split_12180:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(328, 1));
    goto corral_source_split_12181;

  corral_source_split_12181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2839} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_116($p41);
    goto SeqInstr_1885, SeqInstr_1886;

  SeqInstr_1886:
    assume assertsPassed;
    goto SeqInstr_1887;

  SeqInstr_1887:
    goto corral_source_split_12182;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p20, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_12183;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(400, 1));
    goto corral_source_split_12184;

  corral_source_split_12184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2840} list_add_tail($p42, $p43);
    goto corral_source_split_12185;

  corral_source_split_12185:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(328, 1));
    goto corral_source_split_12186;

  corral_source_split_12186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2841} ldv_spin_unlock_irqrestore_113___0($p44, $u1);
    goto SeqInstr_1888, SeqInstr_1889;

  SeqInstr_1889:
    assume assertsPassed;
    goto SeqInstr_1890;

  SeqInstr_1890:
    goto corral_source_split_12187;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1888:
    assume !assertsPassed;
    return;

  SeqInstr_1885:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_12156;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_1882:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_12139;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_12140;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.6, $p11);
    goto corral_source_split_12141;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_12142;

  corral_source_split_12142:
    assume {:verifier.code 0} true;
    $i14 := $udiv.i32($i13, 8);
    goto corral_source_split_12143;

  corral_source_split_12143:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb3;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_116: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_116 == $sub.ref(0, 993945);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_116($p0: ref);
  free requires assertsPassed;
  modifies $M.72, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_116($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12189;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2842} ldv_linux_kernel_locking_spinlock_spin_lock_delayed_ops_lock_of_qxl_fbdev();
    goto SeqInstr_1891, SeqInstr_1892;

  SeqInstr_1892:
    assume assertsPassed;
    goto SeqInstr_1893;

  SeqInstr_1893:
    goto corral_source_split_12190;

  corral_source_split_12190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2843} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_12191;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1891:
    assume !assertsPassed;
    return;
}



const preempt_count: ref;

axiom preempt_count == $sub.ref(0, 994977);

procedure preempt_count() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.41, $M.71, $M.43, $M.64, $M.36, assertsPassed, $M.40, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.75, $M.49, $M.73, $M.74, $M.55, $M.65, $M.54;



implementation preempt_count() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12193;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call {:si_unique_call 2844} $i2 := devirtbounce.9(0, __preempt_count);
    goto SeqInstr_1894, SeqInstr_1895;

  SeqInstr_1895:
    assume assertsPassed;
    goto SeqInstr_1896;

  SeqInstr_1896:
    call {:si_unique_call 2845} {:cexpr "pfo_ret__"} boogie_si_record_i32($i2);
    goto corral_source_split_12195;

  corral_source_split_12195:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i2, 2147483647);
    goto corral_source_split_12200;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_1894:
    assume !assertsPassed;
    return;
}



const qxl_fb_delayed_copyarea: ref;

axiom qxl_fb_delayed_copyarea == $sub.ref(0, 996009);

procedure qxl_fb_delayed_copyarea($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.72, assertsPassed;



implementation qxl_fb_delayed_copyarea($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12210;

  corral_source_split_12210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2850} $p2 := kmalloc(112, 544);
    goto SeqInstr_1906, SeqInstr_1907;

  SeqInstr_1907:
    assume assertsPassed;
    goto SeqInstr_1908;

  SeqInstr_1908:
    goto corral_source_split_12211;

  corral_source_split_12211:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_12212;

  corral_source_split_12212:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_12213;

  corral_source_split_12213:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_12214;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_12218;

  corral_source_split_12218:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_12219;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_12220;

  corral_source_split_12220:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_12221;

  corral_source_split_12221:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_62 := $M.6;
    cmdloc_dummy_var_63 := $M.6;
    call {:si_unique_call 2851} cmdloc_dummy_var_64 := $memcpy.i8(cmdloc_dummy_var_62, cmdloc_dummy_var_63, $p8, $p9, 24, $zext.i32.i64(4), 0 == 1);
    $M.6 := cmdloc_dummy_var_64;
    goto corral_source_split_12222;

  corral_source_split_12222:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_12223;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p10, $0.ref);
    goto corral_source_split_12224;

  corral_source_split_12224:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_12225;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p11, 2);
    goto corral_source_split_12226;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(328, 1));
    goto corral_source_split_12227;

  corral_source_split_12227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2852} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114($p12);
    goto SeqInstr_1909, SeqInstr_1910;

  SeqInstr_1910:
    assume assertsPassed;
    goto SeqInstr_1911;

  SeqInstr_1911:
    goto corral_source_split_12228;

  corral_source_split_12228:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_12229;

  corral_source_split_12229:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(400, 1));
    goto corral_source_split_12230;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2853} list_add_tail($p13, $p14);
    goto corral_source_split_12231;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(328, 1));
    goto corral_source_split_12232;

  corral_source_split_12232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2854} ldv_spin_unlock_irqrestore_113___0($p15, $u1);
    goto SeqInstr_1912, SeqInstr_1913;

  SeqInstr_1913:
    assume assertsPassed;
    goto SeqInstr_1914;

  SeqInstr_1914:
    goto corral_source_split_12233;

  corral_source_split_12233:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1912:
    assume !assertsPassed;
    return;

  SeqInstr_1909:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_12216;

  corral_source_split_12216:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1906:
    assume !assertsPassed;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114 == $sub.ref(0, 997041);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114($p0: ref);
  free requires assertsPassed;
  modifies $M.72, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12235;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2855} ldv_linux_kernel_locking_spinlock_spin_lock_delayed_ops_lock_of_qxl_fbdev();
    goto SeqInstr_1915, SeqInstr_1916;

  SeqInstr_1916:
    assume assertsPassed;
    goto SeqInstr_1917;

  SeqInstr_1917:
    goto corral_source_split_12236;

  corral_source_split_12236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2856} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_12237;

  corral_source_split_12237:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1915:
    assume !assertsPassed;
    return;
}



const qxl_fb_delayed_fillrect: ref;

axiom qxl_fb_delayed_fillrect == $sub.ref(0, 998073);

procedure qxl_fb_delayed_fillrect($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.72, assertsPassed;



implementation qxl_fb_delayed_fillrect($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12239;

  corral_source_split_12239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2857} $p2 := kmalloc(112, 544);
    goto SeqInstr_1918, SeqInstr_1919;

  SeqInstr_1919:
    assume assertsPassed;
    goto SeqInstr_1920;

  SeqInstr_1920:
    goto corral_source_split_12240;

  corral_source_split_12240:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_12241;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_12242;

  corral_source_split_12242:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_12243;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_12247;

  corral_source_split_12247:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_12248;

  corral_source_split_12248:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_12249;

  corral_source_split_12249:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_12250;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_65 := $M.6;
    cmdloc_dummy_var_66 := $M.6;
    call {:si_unique_call 2858} cmdloc_dummy_var_67 := $memcpy.i8(cmdloc_dummy_var_65, cmdloc_dummy_var_66, $p8, $p9, 24, $zext.i32.i64(4), 0 == 1);
    $M.6 := cmdloc_dummy_var_67;
    goto corral_source_split_12251;

  corral_source_split_12251:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_12252;

  corral_source_split_12252:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p10, $0.ref);
    goto corral_source_split_12253;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_12254;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p11, 1);
    goto corral_source_split_12255;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(328, 1));
    goto corral_source_split_12256;

  corral_source_split_12256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2859} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112___0($p12);
    goto SeqInstr_1921, SeqInstr_1922;

  SeqInstr_1922:
    assume assertsPassed;
    goto SeqInstr_1923;

  SeqInstr_1923:
    goto corral_source_split_12257;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_12258;

  corral_source_split_12258:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(400, 1));
    goto corral_source_split_12259;

  corral_source_split_12259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2860} list_add_tail($p13, $p14);
    goto corral_source_split_12260;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 528)), $mul.ref(328, 1));
    goto corral_source_split_12261;

  corral_source_split_12261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2861} ldv_spin_unlock_irqrestore_113___0($p15, $u1);
    goto SeqInstr_1924, SeqInstr_1925;

  SeqInstr_1925:
    assume assertsPassed;
    goto SeqInstr_1926;

  SeqInstr_1926:
    goto corral_source_split_12262;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1924:
    assume !assertsPassed;
    return;

  SeqInstr_1921:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_12245;

  corral_source_split_12245:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1918:
    assume !assertsPassed;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112___0: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112___0 == $sub.ref(0, 999105);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112___0($p0: ref);
  free requires assertsPassed;
  modifies $M.72, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12264;

  corral_source_split_12264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2862} ldv_linux_kernel_locking_spinlock_spin_lock_delayed_ops_lock_of_qxl_fbdev();
    goto SeqInstr_1927, SeqInstr_1928;

  SeqInstr_1928:
    assume assertsPassed;
    goto SeqInstr_1929;

  SeqInstr_1929:
    goto corral_source_split_12265;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2863} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_12266;

  corral_source_split_12266:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1927:
    assume !assertsPassed;
    return;
}



const qxl_deferred_io: ref;

axiom qxl_deferred_io == $sub.ref(0, 1000137);

procedure qxl_deferred_io($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.42, $M.38, $M.39, $M.46, $M.73, $M.74, $CurrAddr, $M.52, $M.43, $M.40, $M.53, $M.49, $M.44, assertsPassed, $M.41, $M.67, $M.68, $M.75, $M.69, $M.70, $M.32, $M.37, $M.72, $M.71, $M.36, $M.64, $M.35, $M.54, $M.55, $M.65;



implementation qxl_deferred_io($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i64;
  var $i27: i1;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i39: i64;
  var $i40: i64;
  var $i14: i64;
  var $i15: i64;
  var $i41: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i64;
  var $i46: i64;
  var $i47: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i64;
  var $i52: i64;
  var $i53: i32;
  var $i54: i32;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $i61: i32;
  var $p63: ref;
  var $p65: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12268;

  corral_source_split_12268:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_12269;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_12270;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_12271;

  corral_source_split_12271:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12272;

  corral_source_split_12272:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_12273;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_12274;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 32), 64));
    goto corral_source_split_12275;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 32), 64)), $mul.ref(32, 1));
    goto corral_source_split_12276;

  corral_source_split_12276:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_12277;

  corral_source_split_12277:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_12278;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p1);
    goto corral_source_split_12279;

  corral_source_split_12279:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i11, $i12);
    goto corral_source_split_12280;

  corral_source_split_12280:
    assume {:verifier.code 0} true;
    $i14, $i15 := $sub.i64(0, 1), 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i41 := $ult.i64($i14, $i15);
    goto corral_source_split_12318;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2868} qxl_fb_dirty_flush($p0);
    goto SeqInstr_1930, SeqInstr_1931;

  SeqInstr_1931:
    assume assertsPassed;
    goto SeqInstr_1932;

  SeqInstr_1932:
    goto corral_source_split_12343;

  corral_source_split_12343:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1930:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i41 == 1;
    goto corral_source_split_12320;

  corral_source_split_12320:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_12321;

  corral_source_split_12321:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.6, $p43);
    goto corral_source_split_12322;

  corral_source_split_12322:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i44);
    goto corral_source_split_12323;

  corral_source_split_12323:
    assume {:verifier.code 0} true;
    $i46 := $udiv.i64($i14, $i45);
    goto corral_source_split_12324;

  corral_source_split_12324:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i64.i32($i46);
    call {:si_unique_call 2866} {:cexpr "y1"} boogie_si_record_i32($i47);
    goto corral_source_split_12325;

  corral_source_split_12325:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_12326;

  corral_source_split_12326:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.6, $p49);
    goto corral_source_split_12327;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    $i51 := $zext.i32.i64($i50);
    goto corral_source_split_12328;

  corral_source_split_12328:
    assume {:verifier.code 0} true;
    $i52 := $udiv.i64($i15, $i51);
    goto corral_source_split_12329;

  corral_source_split_12329:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i52);
    goto corral_source_split_12330;

  corral_source_split_12330:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, 1);
    call {:si_unique_call 2867} {:cexpr "y2"} boogie_si_record_i32($i54);
    goto corral_source_split_12331;

  corral_source_split_12331:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 528)), $mul.ref(432, 1)), $mul.ref(76, 1));
    goto corral_source_split_12332;

  corral_source_split_12332:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p56, 0);
    goto corral_source_split_12333;

  corral_source_split_12333:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 528)), $mul.ref(432, 1)), $mul.ref(80, 1));
    goto corral_source_split_12334;

  corral_source_split_12334:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p58, $i47);
    goto corral_source_split_12335;

  corral_source_split_12335:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(0, 1));
    goto corral_source_split_12336;

  corral_source_split_12336:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.6, $p60);
    goto corral_source_split_12337;

  corral_source_split_12337:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 528)), $mul.ref(432, 1)), $mul.ref(84, 1));
    goto corral_source_split_12338;

  corral_source_split_12338:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p63, $i61);
    goto corral_source_split_12339;

  corral_source_split_12339:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 528)), $mul.ref(432, 1)), $mul.ref(88, 1));
    goto corral_source_split_12340;

  corral_source_split_12340:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p65, $i54);
    goto corral_source_split_12341;

  corral_source_split_12341:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_12282;

  corral_source_split_12282:
    assume {:verifier.code 0} true;
    $p16, $i17, $i18 := $p8, 0, $sub.i64(0, 1);
    goto $bb4;

  $bb4:
    call $p20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $p29, $p30, $p31, $p32, $p33, $p34, $p35, $p36, $i37, $i38, $p16, $i17, $i18, $i39, $i40 := qxl_deferred_io_loop_$bb4($i12, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $p29, $p30, $p31, $p32, $p33, $p34, $p35, $p36, $i37, $i38, $p16, $i17, $i18, $i39, $i40);
    goto $bb4_last;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_12286;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_12287;

  corral_source_split_12287:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.6, $p21);
    goto corral_source_split_12288;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    $i23 := $shl.i64($i22, 12);
    call {:si_unique_call 2864} {:cexpr "start"} boogie_si_record_i64($i23);
    goto corral_source_split_12289;

  corral_source_split_12289:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 4095);
    call {:si_unique_call 2865} {:cexpr "end"} boogie_si_record_i64($i24);
    goto corral_source_split_12290;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    $i25 := $ult.i64($i18, $i23);
    goto corral_source_split_12291;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    goto corral_source_split_12295;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    $i26 := $i23;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_12297;

  corral_source_split_12297:
    assume {:verifier.code 0} true;
    $i27 := $ugt.i64($i17, $i24);
    goto corral_source_split_12298;

  corral_source_split_12298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    goto corral_source_split_12302;

  corral_source_split_12302:
    assume {:verifier.code 0} true;
    $i28 := $i24;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_12304;

  corral_source_split_12304:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p16, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_12305;

  corral_source_split_12305:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_12306;

  corral_source_split_12306:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12307;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.6, $p31);
    goto corral_source_split_12308;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_12309;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p33, $mul.ref($sub.ref(0, 32), 64));
    goto corral_source_split_12310;

  corral_source_split_12310:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p33, $mul.ref($sub.ref(0, 32), 64)), $mul.ref(32, 1));
    goto corral_source_split_12311;

  corral_source_split_12311:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_12312;

  corral_source_split_12312:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_12313;

  corral_source_split_12313:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, $i12);
    goto corral_source_split_12314;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    $i39, $i40 := $i26, $i28;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12316;

  corral_source_split_12316:
    assume {:verifier.code 0} true;
    $i14, $i15 := $i39, $i40;
    goto $bb3;

  $bb12:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $p16, $i17, $i18 := $p34, $i28, $i26;
    goto $bb12_dummy;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_12300;

  corral_source_split_12300:
    assume {:verifier.code 0} true;
    $i28 := $i17;
    goto $bb11;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    $i26 := $i18;
    goto $bb8;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12284;
}



const qxl_fb_dirty_flush: ref;

axiom qxl_fb_dirty_flush == $sub.ref(0, 1001169);

procedure qxl_fb_dirty_flush($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.42, $M.38, $M.39, $M.46, $M.73, $M.74, $CurrAddr, $M.52, $M.43, $M.40, $M.53, $M.49, $M.44, assertsPassed, $M.41, $M.67, $M.68, $M.75, $M.69, $M.70, $M.32, $M.37, $M.72, $M.71, $M.36, $M.64, $M.35, $M.54, $M.55, $M.65;



implementation qxl_fb_dirty_flush($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $i18: i32;
  var $p20: ref;
  var $i21: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i64;
  var $i50: i32;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p62: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2869} $p1 := $alloc($mul.ref(160, $zext.i32.i64(1)));
    goto corral_source_split_12345;

  corral_source_split_12345:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_12346;

  corral_source_split_12346:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_12347;

  corral_source_split_12347:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_12348;

  corral_source_split_12348:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 528)), $mul.ref(320, 1));
    goto corral_source_split_12349;

  corral_source_split_12349:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_12350;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    goto corral_source_split_12351;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 528)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(0, 4));
    goto corral_source_split_12352;

  corral_source_split_12352:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    call {:si_unique_call 2870} {:cexpr "stride"} boogie_si_record_i32($i12);
    goto corral_source_split_12353;

  corral_source_split_12353:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 528)), $mul.ref(432, 1)), $mul.ref(76, 1));
    goto corral_source_split_12354;

  corral_source_split_12354:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    call {:si_unique_call 2871} {:cexpr "x1"} boogie_si_record_i32($i15);
    goto corral_source_split_12355;

  corral_source_split_12355:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 528)), $mul.ref(432, 1)), $mul.ref(84, 1));
    goto corral_source_split_12356;

  corral_source_split_12356:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.6, $p17);
    call {:si_unique_call 2872} {:cexpr "x2"} boogie_si_record_i32($i18);
    goto corral_source_split_12357;

  corral_source_split_12357:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 528)), $mul.ref(432, 1)), $mul.ref(80, 1));
    goto corral_source_split_12358;

  corral_source_split_12358:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.6, $p20);
    call {:si_unique_call 2873} {:cexpr "y1"} boogie_si_record_i32($i21);
    goto corral_source_split_12359;

  corral_source_split_12359:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 528)), $mul.ref(432, 1)), $mul.ref(88, 1));
    goto corral_source_split_12360;

  corral_source_split_12360:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.6, $p23);
    call {:si_unique_call 2874} {:cexpr "y2"} boogie_si_record_i32($i24);
    goto corral_source_split_12361;

  corral_source_split_12361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2875} qxl_io_log.ref.ref.i32.i32.i32.i32($p6, .str.161, $i15, $i18, $i21, $i24);
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_12362;

  corral_source_split_12362:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p25, $i15);
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(4, 1));
    goto corral_source_split_12363;

  corral_source_split_12363:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p26, $i21);
    goto corral_source_split_12364;

  corral_source_split_12364:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32($i18, $i15);
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(8, 1));
    goto corral_source_split_12365;

  corral_source_split_12365:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p28, $i27);
    goto corral_source_split_12366;

  corral_source_split_12366:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i24, $i21);
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(12, 1));
    goto corral_source_split_12367;

  corral_source_split_12367:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p30, $i29);
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(16, 1));
    goto corral_source_split_12368;

  corral_source_split_12368:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p31, $sub.i32(0, 1));
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(20, 1));
    goto corral_source_split_12369;

  corral_source_split_12369:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p32, 0);
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(24, 1));
    goto corral_source_split_12370;

  corral_source_split_12370:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p33, 32);
    $p35 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_12371;

  corral_source_split_12371:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p35, 0);
    $p37 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(40, 1)), $mul.ref(4, 1));
    goto corral_source_split_12372;

  corral_source_split_12372:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p37, 0);
    $p39 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_12373;

  corral_source_split_12373:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p39, $0.ref);
    $p41 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_12374;

  corral_source_split_12374:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p41, $0.ref);
    $p43 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_12375;

  corral_source_split_12375:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p43, $0.ref);
    $p45 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(40, 1)), $mul.ref(32, 1));
    goto corral_source_split_12376;

  corral_source_split_12376:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p45, $0.ref);
    goto corral_source_split_12377;

  corral_source_split_12377:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 528)), $mul.ref(416, 1));
    goto corral_source_split_12378;

  corral_source_split_12378:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.6, $p46);
    goto corral_source_split_12379;

  corral_source_split_12379:
    assume {:verifier.code 0} true;
    $i48 := $mul.i32($i15, 4);
    goto corral_source_split_12380;

  corral_source_split_12380:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i48);
    goto corral_source_split_12381;

  corral_source_split_12381:
    assume {:verifier.code 0} true;
    $i50 := $mul.i32($i12, $i21);
    goto corral_source_split_12382;

  corral_source_split_12382:
    assume {:verifier.code 0} true;
    $i51 := $zext.i32.i64($i50);
    goto corral_source_split_12383;

  corral_source_split_12383:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i49, $i51);
    goto corral_source_split_12384;

  corral_source_split_12384:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p47, $mul.ref($i52, 1));
    $p54 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(32, 1));
    goto corral_source_split_12385;

  corral_source_split_12385:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p54, $p53);
    goto corral_source_split_12386;

  corral_source_split_12386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2876} qxl_fb_image_init($p1, $p6, $p0, $0.ref);
    goto corral_source_split_12387;

  corral_source_split_12387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2877} qxl_draw_opaque_fb($p1, $i12);
    goto SeqInstr_1933, SeqInstr_1934;

  SeqInstr_1934:
    assume assertsPassed;
    goto SeqInstr_1935;

  SeqInstr_1935:
    goto corral_source_split_12388;

  corral_source_split_12388:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 528)), $mul.ref(432, 1)), $mul.ref(76, 1));
    goto corral_source_split_12389;

  corral_source_split_12389:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p56, 0);
    goto corral_source_split_12390;

  corral_source_split_12390:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 528)), $mul.ref(432, 1)), $mul.ref(84, 1));
    goto corral_source_split_12391;

  corral_source_split_12391:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p58, 0);
    goto corral_source_split_12392;

  corral_source_split_12392:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 528)), $mul.ref(432, 1)), $mul.ref(80, 1));
    goto corral_source_split_12393;

  corral_source_split_12393:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p60, 0);
    goto corral_source_split_12394;

  corral_source_split_12394:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 528)), $mul.ref(432, 1)), $mul.ref(88, 1));
    goto corral_source_split_12395;

  corral_source_split_12395:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p62, 0);
    goto corral_source_split_12396;

  corral_source_split_12396:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1933:
    assume !assertsPassed;
    return;
}



const qxl_debugfs_irq_received: ref;

axiom qxl_debugfs_irq_received == $sub.ref(0, 1002201);

procedure qxl_debugfs_irq_received($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_debugfs_irq_received($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;
  var $p21: ref;
  var $i22: i32;
  var $p24: ref;
  var $i25: i32;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i32;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12398;

  corral_source_split_12398:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(248, 1));
    goto corral_source_split_12399;

  corral_source_split_12399:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_12400;

  corral_source_split_12400:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_12401;

  corral_source_split_12401:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12402;

  corral_source_split_12402:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_12403;

  corral_source_split_12403:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_12404;

  corral_source_split_12404:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_12405;

  corral_source_split_12405:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_12406;

  corral_source_split_12406:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_12407;

  corral_source_split_12407:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_12408;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 5336)), $mul.ref(3548, 1));
    goto corral_source_split_12409;

  corral_source_split_12409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2878} $i13 := atomic_read($p12);
    call {:si_unique_call 2879} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_12410;

  corral_source_split_12410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2880} vslice_dummy_var_215 := seq_printf.ref.ref.i32($p0, .str.178, $i13);
    goto corral_source_split_12411;

  corral_source_split_12411:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p11, $mul.ref(0, 5336)), $mul.ref(3552, 1));
    goto corral_source_split_12412;

  corral_source_split_12412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2881} $i16 := atomic_read($p15);
    call {:si_unique_call 2882} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_12413;

  corral_source_split_12413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2883} vslice_dummy_var_216 := seq_printf.ref.ref.i32($p0, .str.178, $i16);
    goto corral_source_split_12414;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 5336)), $mul.ref(3556, 1));
    goto corral_source_split_12415;

  corral_source_split_12415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2884} $i19 := atomic_read($p18);
    call {:si_unique_call 2885} {:cexpr "tmp___1"} boogie_si_record_i32($i19);
    goto corral_source_split_12416;

  corral_source_split_12416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2886} vslice_dummy_var_217 := seq_printf.ref.ref.i32($p0, .str.178, $i19);
    goto corral_source_split_12417;

  corral_source_split_12417:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p11, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_12418;

  corral_source_split_12418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2887} $i22 := atomic_read($p21);
    call {:si_unique_call 2888} {:cexpr "tmp___2"} boogie_si_record_i32($i22);
    goto corral_source_split_12419;

  corral_source_split_12419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2889} vslice_dummy_var_218 := seq_printf.ref.ref.i32($p0, .str.178, $i22);
    goto corral_source_split_12420;

  corral_source_split_12420:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p11, $mul.ref(0, 5336)), $mul.ref(3564, 1));
    goto corral_source_split_12421;

  corral_source_split_12421:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.6, $p24);
    goto corral_source_split_12422;

  corral_source_split_12422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2890} vslice_dummy_var_219 := seq_printf.ref.ref.i32($p0, .str.178, $i25);
    goto corral_source_split_12423;

  corral_source_split_12423:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const qxl_debugfs_buffers_info: ref;

axiom qxl_debugfs_buffers_info == $sub.ref(0, 1003233);

procedure qxl_debugfs_buffers_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.115, assertsPassed;



implementation qxl_debugfs_buffers_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $i43: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p23: ref;
  var vslice_dummy_var_220: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12425;

  corral_source_split_12425:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(248, 1));
    goto corral_source_split_12426;

  corral_source_split_12426:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_12427;

  corral_source_split_12427:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_12428;

  corral_source_split_12428:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12429;

  corral_source_split_12429:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_12430;

  corral_source_split_12430:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_12431;

  corral_source_split_12431:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_12432;

  corral_source_split_12432:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 3144)), $mul.ref(40, 1));
    goto corral_source_split_12433;

  corral_source_split_12433:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_12434;

  corral_source_split_12434:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 5336)), $mul.ref(2824, 1)), $mul.ref(160, 1)), $mul.ref(0, 1));
    goto corral_source_split_12436;

  corral_source_split_12436:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_12437;

  corral_source_split_12437:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_12438;

  corral_source_split_12438:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1312)), $mul.ref(0, 1));
    goto corral_source_split_12439;

  corral_source_split_12439:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_12440;

  corral_source_split_12440:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 5336)), $mul.ref(2824, 1)), $mul.ref(160, 1));
    goto corral_source_split_12441;

  corral_source_split_12441:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_12442;

  corral_source_split_12442:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i18, $i21);
    goto corral_source_split_12443;

  corral_source_split_12443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_12445;

  corral_source_split_12445:
    assume {:verifier.code 0} true;
    $p23 := $p15;
    goto $bb4;

  $bb4:
    call $p25, $p26, $p27, $p28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $p40, $i41, $p42, $i43, $p46, $p47, $p48, $p49, $i50, $i51, $p23, vslice_dummy_var_220 := qxl_debugfs_buffers_info_loop_$bb4($p0, $i21, $p25, $p26, $p27, $p28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $p40, $i41, $p42, $i43, $p46, $p47, $p48, $p49, $i50, $i51, $p23, vslice_dummy_var_220);
    goto $bb4_last;

  corral_source_split_12447:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2891} rcu_read_lock();
    goto corral_source_split_12449;

  corral_source_split_12449:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(448, 1));
    goto corral_source_split_12450;

  corral_source_split_12450:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.6, $p25);
    goto corral_source_split_12451;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 256)), $mul.ref(240, 1));
    goto corral_source_split_12452;

  corral_source_split_12452:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p27);
    goto corral_source_split_12453;

  corral_source_split_12453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2892} $i29 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 2893} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_12454;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_12455;

  corral_source_split_12455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p28);
    goto corral_source_split_12467;

  corral_source_split_12467:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_12468;

  corral_source_split_12468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i35 == 1);
    goto corral_source_split_12474;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_12476;

  corral_source_split_12476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2897} rcu_read_unlock();
    goto SeqInstr_1936, SeqInstr_1937;

  SeqInstr_1937:
    assume assertsPassed;
    goto SeqInstr_1938;

  SeqInstr_1938:
    goto corral_source_split_12477;

  corral_source_split_12477:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 1312)), $mul.ref(1016, 1)), $mul.ref(200, 1));
    goto corral_source_split_12478;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.6, $p40);
    goto corral_source_split_12479;

  corral_source_split_12479:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p23, $mul.ref(0, 1312)), $mul.ref(992, 1));
    goto corral_source_split_12480;

  corral_source_split_12480:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.6, $p42);
    goto corral_source_split_12481;

  corral_source_split_12481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2898} vslice_dummy_var_220 := seq_printf.ref.ref.i64.i32.i32($p0, .str.177, $i41, $i43, $i38);
    goto corral_source_split_12482;

  corral_source_split_12482:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 1312)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_12483;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.6, $p46);
    goto corral_source_split_12484;

  corral_source_split_12484:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_12485;

  corral_source_split_12485:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 1312)), $mul.ref(0, 1));
    goto corral_source_split_12486;

  corral_source_split_12486:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_12487;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, $i21);
    goto corral_source_split_12488;

  corral_source_split_12488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i51 == 1);
    goto corral_source_split_12490;

  corral_source_split_12490:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $p23 := $p47;
    goto $bb18_dummy;

  SeqInstr_1936:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i35 == 1;
    goto corral_source_split_12470;

  corral_source_split_12470:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p28, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12471;

  corral_source_split_12471:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.6, $p36);
    goto corral_source_split_12472;

  corral_source_split_12472:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb17;

  $bb6:
    assume $i30 == 1;
    goto corral_source_split_12457;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1(1);
    goto corral_source_split_12458;

  corral_source_split_12458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i31 == 1);
    goto corral_source_split_12460;

  corral_source_split_12460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2894} $i32 := rcu_read_lock_held();
    call {:si_unique_call 2895} {:cexpr "tmp___0"} boogie_si_record_i32($i32);
    goto corral_source_split_12461;

  corral_source_split_12461:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_12462;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_12464;

  corral_source_split_12464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2896} lockdep_rcu_suspicious(.str.175, 65, .str.176);
    goto corral_source_split_12465;

  corral_source_split_12465:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb8;

  $bb18_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_12447;
}



const rcu_read_lock: ref;

axiom rcu_read_lock == $sub.ref(0, 1004265);

procedure rcu_read_lock();
  free requires assertsPassed;
  modifies $M.115;



implementation rcu_read_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12492;

  corral_source_split_12492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2899} ldv_linux_kernel_rcu_update_lock_rcu_read_lock();
    goto corral_source_split_12493;

  corral_source_split_12493:
    assume {:verifier.code 0} true;
    return;
}



const rcu_read_lock_held: ref;

axiom rcu_read_lock_held == $sub.ref(0, 1005297);

procedure rcu_read_lock_held() returns ($r: i32);
  free requires assertsPassed;



implementation rcu_read_lock_held() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12495;

  corral_source_split_12495:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2900} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2901} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12496;

  corral_source_split_12496:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rcu_read_unlock: ref;

axiom rcu_read_unlock == $sub.ref(0, 1006329);

procedure rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.115, assertsPassed;



implementation rcu_read_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12498;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2902} ldv_linux_kernel_rcu_update_lock_rcu_read_unlock();
    goto SeqInstr_1939, SeqInstr_1940;

  SeqInstr_1940:
    assume assertsPassed;
    goto SeqInstr_1941;

  SeqInstr_1941:
    goto corral_source_split_12499;

  corral_source_split_12499:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1939:
    assume !assertsPassed;
    return;
}



const seq_printf: ref;

axiom seq_printf == $sub.ref(0, 1007361);

procedure seq_printf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12501;

  corral_source_split_12501:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2903} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2904} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_12502;

  corral_source_split_12502:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i64.i32.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i64.i32.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_12504;

  corral_source_split_12504:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2905} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2906} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_12505;

  corral_source_split_12505:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_linux_kernel_rcu_update_lock_rcu_read_unlock: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_read_unlock == $sub.ref(0, 1008393);

procedure ldv_linux_kernel_rcu_update_lock_rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.115, assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_rcu_read_unlock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12507;

  corral_source_split_12507:
    assume {:verifier.code 0} true;
    $i0 := $M.115;
    goto corral_source_split_12508;

  corral_source_split_12508:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_12509;

  corral_source_split_12509:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12510;

  corral_source_split_12510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2907} ldv_assert_linux_kernel_rcu_update_lock__more_unlocks($i2);
    goto SeqInstr_1942, SeqInstr_1943;

  SeqInstr_1943:
    assume assertsPassed;
    goto SeqInstr_1944;

  SeqInstr_1944:
    goto corral_source_split_12511;

  corral_source_split_12511:
    assume {:verifier.code 0} true;
    $i3 := $M.115;
    goto corral_source_split_12512;

  corral_source_split_12512:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    goto corral_source_split_12513;

  corral_source_split_12513:
    assume {:verifier.code 0} true;
    $M.115 := $i4;
    call {:si_unique_call 2908} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32($i4);
    goto corral_source_split_12514;

  corral_source_split_12514:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1942:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_rcu_update_lock__more_unlocks: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock__more_unlocks == $sub.ref(0, 1009425);

procedure ldv_assert_linux_kernel_rcu_update_lock__more_unlocks($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock__more_unlocks($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2909} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock__more_unlocks:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12516;

  corral_source_split_12516:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12517;

  corral_source_split_12517:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12519;

  corral_source_split_12519:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2910} __VERIFIER_error();
    goto SeqInstr_1945, SeqInstr_1946;

  SeqInstr_1946:
    assume assertsPassed;
    goto SeqInstr_1947;

  SeqInstr_1947:
    goto corral_source_split_12520;

  corral_source_split_12520:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1945:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_kernel_rcu_update_lock_rcu_read_lock: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_read_lock == $sub.ref(0, 1010457);

procedure ldv_linux_kernel_rcu_update_lock_rcu_read_lock();
  free requires assertsPassed;
  modifies $M.115;



implementation ldv_linux_kernel_rcu_update_lock_rcu_read_lock()
{
  var $i0: i32;
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12522;

  corral_source_split_12522:
    assume {:verifier.code 0} true;
    $i0 := $M.115;
    goto corral_source_split_12523;

  corral_source_split_12523:
    assume {:verifier.code 0} true;
    $i1 := $add.i32($i0, 1);
    goto corral_source_split_12524;

  corral_source_split_12524:
    assume {:verifier.code 0} true;
    $M.115 := $i1;
    call {:si_unique_call 2911} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32($i1);
    goto corral_source_split_12525;

  corral_source_split_12525:
    assume {:verifier.code 0} true;
    return;
}



const qxl_get_driver_name: ref;

axiom qxl_get_driver_name == $sub.ref(0, 1011489);

procedure qxl_get_driver_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qxl_get_driver_name($p0: ref) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12527;

  corral_source_split_12527:
    assume {:verifier.code 0} true;
    $r := .str.74;
    return;
}



const qxl_get_timeline_name: ref;

axiom qxl_get_timeline_name == $sub.ref(0, 1012521);

procedure qxl_get_timeline_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qxl_get_timeline_name($p0: ref) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12529;

  corral_source_split_12529:
    assume {:verifier.code 0} true;
    $r := .str.193;
    return;
}



const qxl_nop_signaling: ref;

axiom qxl_nop_signaling == $sub.ref(0, 1013553);

procedure qxl_nop_signaling($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation qxl_nop_signaling($p0: ref) returns ($r: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12531;

  corral_source_split_12531:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const qxl_fence_wait: ref;

axiom qxl_fence_wait == $sub.ref(0, 1014585);

procedure qxl_fence_wait($p0: ref, $i1: i1, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation qxl_fence_wait($p0: ref, $i1: i1, $i2: i64) returns ($r: i64)
{
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i8;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $i26: i1;
  var $i27: i8;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i8;
  var $i50: i1;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $i54: i64;
  var $i35: i64;
  var $i55: i1;
  var $i56: i8;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $i61: i8;
  var $i62: i1;
  var $i63: i1;
  var $i64: i8;
  var $i65: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i1;
  var $i69: i8;
  var $i70: i1;
  var $i71: i1;
  var $i72: i8;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $i76: i1;
  var $i77: i8;
  var $i78: i1;
  var $i79: i1;
  var $i80: i8;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $i84: i1;
  var $i85: i8;
  var $i86: i1;
  var $i87: i1;
  var $i88: i8;
  var $i89: i1;
  var $i90: i32;
  var $i91: i1;
  var $i92: i1;
  var $i93: i8;
  var $i94: i1;
  var $i95: i1;
  var $i96: i8;
  var $i97: i1;
  var $i98: i32;
  var $i99: i1;
  var $i100: i1;
  var $i101: i8;
  var $i102: i1;
  var $i103: i1;
  var $i104: i8;
  var $i105: i1;
  var $i106: i32;
  var $i107: i1;
  var $i108: i1;
  var $i109: i8;
  var $i110: i1;
  var $i111: i1;
  var $i112: i8;
  var $i113: i1;
  var $i114: i32;
  var $i115: i1;
  var $i116: i1;
  var $i117: i8;
  var $i118: i1;
  var $i119: i1;
  var $i120: i8;
  var $i121: i1;
  var $i122: i32;
  var $i123: i1;
  var $i124: i1;
  var $i125: i8;
  var $i126: i1;
  var $i127: i1;
  var $i128: i8;
  var $i129: i1;
  var $i130: i32;
  var $i131: i1;
  var $i132: i1;
  var $i133: i8;
  var $i134: i1;
  var vslice_dummy_var_221: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2912} {:cexpr "qxl_fence_wait:arg:intr"} boogie_si_record_i1($i1);
    call {:si_unique_call 2913} {:cexpr "qxl_fence_wait:arg:timeout"} boogie_si_record_i64($i2);
    goto corral_source_split_12533;

  corral_source_split_12533:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.6, jiffies);
    goto corral_source_split_12534;

  corral_source_split_12534:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, $i2);
    call {:si_unique_call 2914} {:cexpr "end"} boogie_si_record_i64($i4);
    goto corral_source_split_12535;

  corral_source_split_12535:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_12536;

  corral_source_split_12536:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_12537;

  corral_source_split_12537:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_12538;

  corral_source_split_12538:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 3120), 5336));
    goto corral_source_split_12539;

  corral_source_split_12539:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_12540;

  corral_source_split_12540:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 216)), $mul.ref(92, 1));
    goto corral_source_split_12541;

  corral_source_split_12541:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    goto corral_source_split_12542;

  corral_source_split_12542:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_12543;

  corral_source_split_12543:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 2915} {:cexpr "have_drawable_releases"} boogie_si_record_i8($i13);
    goto corral_source_split_12544;

  corral_source_split_12544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2916} $i14 := fence_is_signaled($p0);
    goto corral_source_split_12545;

  corral_source_split_12545:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    call {:si_unique_call 2917} {:cexpr "tmp"} boogie_si_record_i8($i15);
    goto corral_source_split_12546;

  corral_source_split_12546:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_12547;

  corral_source_split_12547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i16 == 1);
    goto corral_source_split_12549;

  corral_source_split_12549:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb4;

  $bb4:
    call $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i36, $i37, $i38, $i47, $i48, $i49, $i50, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134 := qxl_fence_wait_loop_$bb4($p0, $i4, $p8, $i13, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i36, $i37, $i38, $i47, $i48, $i49, $i50, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2919} qxl_io_notify_oom($p8);
    goto corral_source_split_12557;

  corral_source_split_12557:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2920} $i18 := qxl_queue_garbage_collect($p8, 1);
    goto SeqInstr_1948, SeqInstr_1949;

  SeqInstr_1949:
    assume assertsPassed;
    goto SeqInstr_1950;

  SeqInstr_1950:
    goto corral_source_split_12559;

  corral_source_split_12559:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i8($i18);
    call {:si_unique_call 2921} {:cexpr "tmp___0"} boogie_si_record_i8($i19);
    goto corral_source_split_12560;

  corral_source_split_12560:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_12561;

  corral_source_split_12561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_12565;

  corral_source_split_12565:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_12566;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2924} $i23 := fence_is_signaled($p0);
    goto corral_source_split_12572;

  corral_source_split_12572:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 2925} {:cexpr "tmp___2"} boogie_si_record_i8($i24);
    goto corral_source_split_12573;

  corral_source_split_12573:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_12574;

  corral_source_split_12574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2926} $i55 := qxl_queue_garbage_collect($p8, 1);
    goto SeqInstr_1951, SeqInstr_1952;

  SeqInstr_1952:
    assume assertsPassed;
    goto SeqInstr_1953;

  SeqInstr_1953:
    goto corral_source_split_12576;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    $i56 := $zext.i1.i8($i55);
    goto corral_source_split_12577;

  corral_source_split_12577:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i8.i1($i56);
    goto corral_source_split_12578;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := 1;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_12626;

  corral_source_split_12626:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_12627;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2932} $i60 := fence_is_signaled($p0);
    goto corral_source_split_12629;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i8($i60);
    goto corral_source_split_12630;

  corral_source_split_12630:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i8.i1($i61);
    goto corral_source_split_12631;

  corral_source_split_12631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2933} $i63 := qxl_queue_garbage_collect($p8, 1);
    goto SeqInstr_1954, SeqInstr_1955;

  SeqInstr_1955:
    assume assertsPassed;
    goto SeqInstr_1956;

  SeqInstr_1956:
    goto corral_source_split_12633;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    $i64 := $zext.i1.i8($i63);
    goto corral_source_split_12634;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i8.i1($i64);
    goto corral_source_split_12635;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := 1;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_12639;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_12640;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2934} $i68 := fence_is_signaled($p0);
    goto corral_source_split_12642;

  corral_source_split_12642:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i8($i68);
    goto corral_source_split_12643;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i8.i1($i69);
    goto corral_source_split_12644;

  corral_source_split_12644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2935} $i71 := qxl_queue_garbage_collect($p8, 1);
    goto SeqInstr_1957, SeqInstr_1958;

  SeqInstr_1958:
    assume assertsPassed;
    goto SeqInstr_1959;

  SeqInstr_1959:
    goto corral_source_split_12646;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    $i72 := $zext.i1.i8($i71);
    goto corral_source_split_12647;

  corral_source_split_12647:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i8.i1($i72);
    goto corral_source_split_12648;

  corral_source_split_12648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := 1;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto corral_source_split_12652;

  corral_source_split_12652:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_12653;

  corral_source_split_12653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2936} $i76 := fence_is_signaled($p0);
    goto corral_source_split_12655;

  corral_source_split_12655:
    assume {:verifier.code 0} true;
    $i77 := $zext.i1.i8($i76);
    goto corral_source_split_12656;

  corral_source_split_12656:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i8.i1($i77);
    goto corral_source_split_12657;

  corral_source_split_12657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2937} $i79 := qxl_queue_garbage_collect($p8, 1);
    goto SeqInstr_1960, SeqInstr_1961;

  SeqInstr_1961:
    assume assertsPassed;
    goto SeqInstr_1962;

  SeqInstr_1962:
    goto corral_source_split_12659;

  corral_source_split_12659:
    assume {:verifier.code 0} true;
    $i80 := $zext.i1.i8($i79);
    goto corral_source_split_12660;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i8.i1($i80);
    goto corral_source_split_12661;

  corral_source_split_12661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i82 := 1;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_12665;

  corral_source_split_12665:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_12666;

  corral_source_split_12666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2938} $i84 := fence_is_signaled($p0);
    goto corral_source_split_12668;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    $i85 := $zext.i1.i8($i84);
    goto corral_source_split_12669;

  corral_source_split_12669:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i8.i1($i85);
    goto corral_source_split_12670;

  corral_source_split_12670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2939} $i87 := qxl_queue_garbage_collect($p8, 1);
    goto SeqInstr_1963, SeqInstr_1964;

  SeqInstr_1964:
    assume assertsPassed;
    goto SeqInstr_1965;

  SeqInstr_1965:
    goto corral_source_split_12672;

  corral_source_split_12672:
    assume {:verifier.code 0} true;
    $i88 := $zext.i1.i8($i87);
    goto corral_source_split_12673;

  corral_source_split_12673:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i8.i1($i88);
    goto corral_source_split_12674;

  corral_source_split_12674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    $i90 := 1;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto corral_source_split_12678;

  corral_source_split_12678:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_12679;

  corral_source_split_12679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2940} $i92 := fence_is_signaled($p0);
    goto corral_source_split_12681;

  corral_source_split_12681:
    assume {:verifier.code 0} true;
    $i93 := $zext.i1.i8($i92);
    goto corral_source_split_12682;

  corral_source_split_12682:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i8.i1($i93);
    goto corral_source_split_12683;

  corral_source_split_12683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2941} $i95 := qxl_queue_garbage_collect($p8, 1);
    goto SeqInstr_1966, SeqInstr_1967;

  SeqInstr_1967:
    assume assertsPassed;
    goto SeqInstr_1968;

  SeqInstr_1968:
    goto corral_source_split_12685;

  corral_source_split_12685:
    assume {:verifier.code 0} true;
    $i96 := $zext.i1.i8($i95);
    goto corral_source_split_12686;

  corral_source_split_12686:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i8.i1($i96);
    goto corral_source_split_12687;

  corral_source_split_12687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $i98 := 1;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto corral_source_split_12691;

  corral_source_split_12691:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_12692;

  corral_source_split_12692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2942} $i100 := fence_is_signaled($p0);
    goto corral_source_split_12694;

  corral_source_split_12694:
    assume {:verifier.code 0} true;
    $i101 := $zext.i1.i8($i100);
    goto corral_source_split_12695;

  corral_source_split_12695:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i8.i1($i101);
    goto corral_source_split_12696;

  corral_source_split_12696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2943} $i103 := qxl_queue_garbage_collect($p8, 1);
    goto SeqInstr_1969, SeqInstr_1970;

  SeqInstr_1970:
    assume assertsPassed;
    goto SeqInstr_1971;

  SeqInstr_1971:
    goto corral_source_split_12698;

  corral_source_split_12698:
    assume {:verifier.code 0} true;
    $i104 := $zext.i1.i8($i103);
    goto corral_source_split_12699;

  corral_source_split_12699:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i8.i1($i104);
    goto corral_source_split_12700;

  corral_source_split_12700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i106 := 1;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto corral_source_split_12704;

  corral_source_split_12704:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_12705;

  corral_source_split_12705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2944} $i108 := fence_is_signaled($p0);
    goto corral_source_split_12707;

  corral_source_split_12707:
    assume {:verifier.code 0} true;
    $i109 := $zext.i1.i8($i108);
    goto corral_source_split_12708;

  corral_source_split_12708:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i8.i1($i109);
    goto corral_source_split_12709;

  corral_source_split_12709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2945} $i111 := qxl_queue_garbage_collect($p8, 1);
    goto SeqInstr_1972, SeqInstr_1973;

  SeqInstr_1973:
    assume assertsPassed;
    goto SeqInstr_1974;

  SeqInstr_1974:
    goto corral_source_split_12711;

  corral_source_split_12711:
    assume {:verifier.code 0} true;
    $i112 := $zext.i1.i8($i111);
    goto corral_source_split_12712;

  corral_source_split_12712:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i8.i1($i112);
    goto corral_source_split_12713;

  corral_source_split_12713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    $i114 := 1;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto corral_source_split_12717;

  corral_source_split_12717:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_12718;

  corral_source_split_12718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2946} $i116 := fence_is_signaled($p0);
    goto corral_source_split_12720;

  corral_source_split_12720:
    assume {:verifier.code 0} true;
    $i117 := $zext.i1.i8($i116);
    goto corral_source_split_12721;

  corral_source_split_12721:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i8.i1($i117);
    goto corral_source_split_12722;

  corral_source_split_12722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2947} $i119 := qxl_queue_garbage_collect($p8, 1);
    goto SeqInstr_1975, SeqInstr_1976;

  SeqInstr_1976:
    assume assertsPassed;
    goto SeqInstr_1977;

  SeqInstr_1977:
    goto corral_source_split_12724;

  corral_source_split_12724:
    assume {:verifier.code 0} true;
    $i120 := $zext.i1.i8($i119);
    goto corral_source_split_12725;

  corral_source_split_12725:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i8.i1($i120);
    goto corral_source_split_12726;

  corral_source_split_12726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    $i122 := 1;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto corral_source_split_12730;

  corral_source_split_12730:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i122, 0);
    goto corral_source_split_12731;

  corral_source_split_12731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2948} $i124 := fence_is_signaled($p0);
    goto corral_source_split_12733;

  corral_source_split_12733:
    assume {:verifier.code 0} true;
    $i125 := $zext.i1.i8($i124);
    goto corral_source_split_12734;

  corral_source_split_12734:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i8.i1($i125);
    goto corral_source_split_12735;

  corral_source_split_12735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2949} $i127 := qxl_queue_garbage_collect($p8, 1);
    goto SeqInstr_1978, SeqInstr_1979;

  SeqInstr_1979:
    assume assertsPassed;
    goto SeqInstr_1980;

  SeqInstr_1980:
    goto corral_source_split_12737;

  corral_source_split_12737:
    assume {:verifier.code 0} true;
    $i128 := $zext.i1.i8($i127);
    goto corral_source_split_12738;

  corral_source_split_12738:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i8.i1($i128);
    goto corral_source_split_12739;

  corral_source_split_12739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    $i130 := 1;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto corral_source_split_12743;

  corral_source_split_12743:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_12744;

  corral_source_split_12744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2950} $i132 := fence_is_signaled($p0);
    goto corral_source_split_12746;

  corral_source_split_12746:
    assume {:verifier.code 0} true;
    $i133 := $zext.i1.i8($i132);
    goto corral_source_split_12747;

  corral_source_split_12747:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i8.i1($i133);
    goto corral_source_split_12748;

  corral_source_split_12748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2922} $i26 := fence_is_signaled($p0);
    goto corral_source_split_12568;

  corral_source_split_12568:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 2923} {:cexpr "tmp___3"} boogie_si_record_i8($i27);
    goto corral_source_split_12569;

  corral_source_split_12569:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_12570;

  corral_source_split_12570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i13);
    goto corral_source_split_12582;

  corral_source_split_12582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb29;

  $bb29:
    assume !($i29 == 1);
    goto corral_source_split_12586;

  corral_source_split_12586:
    assume {:verifier.code 0} true;
    $i30 := $sle.i32($i17, 3);
    goto corral_source_split_12587;

  corral_source_split_12587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.6, jiffies);
    call {:si_unique_call 2918} {:cexpr "cur"} boogie_si_record_i64($i51);
    goto corral_source_split_12553;

  corral_source_split_12553:
    assume {:verifier.code 0} true;
    $i52 := $sub.i64($i4, $i51);
    goto corral_source_split_12554;

  corral_source_split_12554:
    assume {:verifier.code 0} true;
    $i53 := $slt.i64($i52, 0);
    goto corral_source_split_12555;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i54 := $sub.i64($i4, $i51);
    goto corral_source_split_12622;

  corral_source_split_12622:
    assume {:verifier.code 0} true;
    $i35 := $i54;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_12598;

  corral_source_split_12598:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;

  $bb47:
    assume $i53 == 1;
    goto corral_source_split_12620;

  corral_source_split_12620:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb37;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i17, 2);
    goto corral_source_split_12584;

  corral_source_split_12584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.6, jiffies);
    goto corral_source_split_12592;

  corral_source_split_12592:
    assume {:verifier.code 0} true;
    $i33 := $sub.i64($i4, $i32);
    goto corral_source_split_12593;

  corral_source_split_12593:
    assume {:verifier.code 0} true;
    $i34 := $slt.i64($i33, 0);
    goto corral_source_split_12594;

  corral_source_split_12594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i13);
    goto corral_source_split_12600;

  corral_source_split_12600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i17, 1);
    call {:si_unique_call 2929} {:cexpr "sc"} boogie_si_record_i32($i47);
    goto corral_source_split_12615;

  corral_source_split_12615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2930} $i48 := fence_is_signaled($p0);
    goto corral_source_split_12616;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i8($i48);
    call {:si_unique_call 2931} {:cexpr "tmp"} boogie_si_record_i8($i49);
    goto corral_source_split_12617;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i8.i1($i49);
    goto corral_source_split_12618;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb45;

  $bb45:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i47;
    goto $bb45_dummy;

  $bb5:
    assume $i50 == 1;
    goto corral_source_split_12551;

  corral_source_split_12551:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb39:
    assume $i36 == 1;
    goto corral_source_split_12602;

  corral_source_split_12602:
    assume {:verifier.code 0} true;
    $i37 := $sgt.i32($i17, 300);
    goto corral_source_split_12603;

  corral_source_split_12603:
    assume {:verifier.code 0} true;
    $i38 := $i17;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb41;

  $bb42:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_12605;

  corral_source_split_12605:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_12606;

  corral_source_split_12606:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.6, $p39);
    goto corral_source_split_12607;

  corral_source_split_12607:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_12608;

  corral_source_split_12608:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.6, $p41);
    goto corral_source_split_12609;

  corral_source_split_12609:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_12610;

  corral_source_split_12610:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.6, $p43);
    goto corral_source_split_12611;

  corral_source_split_12611:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 268435455);
    goto corral_source_split_12612;

  corral_source_split_12612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2928} vslice_dummy_var_221 := printk.ref.i32.i32.i32.i32(.str.194, $i40, $i42, $i45, $i38);
    goto corral_source_split_12613;

  corral_source_split_12613:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb35:
    assume $i34 == 1;
    goto corral_source_split_12596;

  corral_source_split_12596:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb37;

  $bb32:
    assume $i31 == 1;
    goto corral_source_split_12589;

  corral_source_split_12589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2927} usleep_range(500, 1000);
    goto corral_source_split_12590;

  corral_source_split_12590:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb28;

  $bb24:
    assume $i28 == 1;
    goto corral_source_split_12580;

  corral_source_split_12580:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb146:
    assume {:verifier.code 0} true;
    assume $i134 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb143:
    assume {:verifier.code 0} true;
    assume $i131 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb140:
    assume $i129 == 1;
    goto corral_source_split_12741;

  corral_source_split_12741:
    assume {:verifier.code 0} true;
    $i130 := 0;
    goto $bb142;

  SeqInstr_1978:
    assume !assertsPassed;
    return;

  $bb136:
    assume {:verifier.code 0} true;
    assume $i126 == 1;
    goto $bb19;

  $bb133:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb14;

  $bb130:
    assume $i121 == 1;
    goto corral_source_split_12728;

  corral_source_split_12728:
    assume {:verifier.code 0} true;
    $i122 := 0;
    goto $bb132;

  SeqInstr_1975:
    assume !assertsPassed;
    return;

  $bb126:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb19;

  $bb123:
    assume {:verifier.code 0} true;
    assume $i115 == 1;
    goto $bb14;

  $bb120:
    assume $i113 == 1;
    goto corral_source_split_12715;

  corral_source_split_12715:
    assume {:verifier.code 0} true;
    $i114 := 0;
    goto $bb122;

  SeqInstr_1972:
    assume !assertsPassed;
    return;

  $bb116:
    assume {:verifier.code 0} true;
    assume $i110 == 1;
    goto $bb19;

  $bb113:
    assume {:verifier.code 0} true;
    assume $i107 == 1;
    goto $bb14;

  $bb110:
    assume $i105 == 1;
    goto corral_source_split_12702;

  corral_source_split_12702:
    assume {:verifier.code 0} true;
    $i106 := 0;
    goto $bb112;

  SeqInstr_1969:
    assume !assertsPassed;
    return;

  $bb106:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb19;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i99 == 1;
    goto $bb14;

  $bb100:
    assume $i97 == 1;
    goto corral_source_split_12689;

  corral_source_split_12689:
    assume {:verifier.code 0} true;
    $i98 := 0;
    goto $bb102;

  SeqInstr_1966:
    assume !assertsPassed;
    return;

  $bb96:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb19;

  $bb93:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb14;

  $bb90:
    assume $i89 == 1;
    goto corral_source_split_12676;

  corral_source_split_12676:
    assume {:verifier.code 0} true;
    $i90 := 0;
    goto $bb92;

  SeqInstr_1963:
    assume !assertsPassed;
    return;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb19;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb14;

  $bb80:
    assume $i81 == 1;
    goto corral_source_split_12663;

  corral_source_split_12663:
    assume {:verifier.code 0} true;
    $i82 := 0;
    goto $bb82;

  SeqInstr_1960:
    assume !assertsPassed;
    return;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb19;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb14;

  $bb70:
    assume $i73 == 1;
    goto corral_source_split_12650;

  corral_source_split_12650:
    assume {:verifier.code 0} true;
    $i74 := 0;
    goto $bb72;

  SeqInstr_1957:
    assume !assertsPassed;
    return;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb19;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb14;

  $bb60:
    assume $i65 == 1;
    goto corral_source_split_12637;

  corral_source_split_12637:
    assume {:verifier.code 0} true;
    $i66 := 0;
    goto $bb62;

  SeqInstr_1954:
    assume !assertsPassed;
    return;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb19;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb14;

  $bb50:
    assume $i57 == 1;
    goto corral_source_split_12624;

  corral_source_split_12624:
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb52;

  SeqInstr_1951:
    assume !assertsPassed;
    return;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb19;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb14;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_12563;

  corral_source_split_12563:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb12;

  SeqInstr_1948:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  $bb45_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const fence_is_signaled: ref;

axiom fence_is_signaled == $sub.ref(0, 1015617);

procedure fence_is_signaled($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation fence_is_signaled($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $i16: i8;
  var $i17: i1;
  var $i4: i1;
  var vslice_dummy_var_222: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12750;

  corral_source_split_12750:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_12751;

  corral_source_split_12751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2951} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 2952} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_12752;

  corral_source_split_12752:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_12753;

  corral_source_split_12753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_12759;

  corral_source_split_12759:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_12760;

  corral_source_split_12760:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_12761;

  corral_source_split_12761:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_12762;

  corral_source_split_12762:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_12763;

  corral_source_split_12763:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_12764;

  corral_source_split_12764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12757;

  corral_source_split_12757:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_12766;

  corral_source_split_12766:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_12767;

  corral_source_split_12767:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p11);
    goto corral_source_split_12768;

  corral_source_split_12768:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_12769;

  corral_source_split_12769:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    call {:si_unique_call 2953} $i15 := devirtbounce.16($p14, $p0);
    goto corral_source_split_12770;

  corral_source_split_12770:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i8($i15);
    call {:si_unique_call 2954} {:cexpr "tmp___0"} boogie_si_record_i8($i16);
    goto corral_source_split_12771;

  corral_source_split_12771:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_12772;

  corral_source_split_12772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_12774;

  corral_source_split_12774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2955} vslice_dummy_var_222 := fence_signal($p0);
    goto corral_source_split_12775;

  corral_source_split_12775:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_12755;

  corral_source_split_12755:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;
}



const qxl_io_notify_oom: ref;

axiom qxl_io_notify_oom == $sub.ref(0, 1016649);

procedure qxl_io_notify_oom($p0: ref);
  free requires assertsPassed;



implementation qxl_io_notify_oom($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12777;

  corral_source_split_12777:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_12778;

  corral_source_split_12778:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, $p1);
    goto corral_source_split_12779;

  corral_source_split_12779:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 4);
    goto corral_source_split_12780;

  corral_source_split_12780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2956} outb(0, $i3);
    goto corral_source_split_12781;

  corral_source_split_12781:
    assume {:verifier.code 0} true;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 1017681);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2957} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_12783;

  corral_source_split_12783:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_12784;

  corral_source_split_12784:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_12785;

  corral_source_split_12785:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.6, $p3);
    goto corral_source_split_12786;

  corral_source_split_12786:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_12787;

  corral_source_split_12787:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_12788;

  corral_source_split_12788:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_12789;

  corral_source_split_12789:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_12790;

  corral_source_split_12790:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_12791;

  corral_source_split_12791:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_12792;

  corral_source_split_12792:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const qxl_bo_reserve___2: ref;

axiom qxl_bo_reserve___2 == $sub.ref(0, 1018713);

procedure qxl_bo_reserve___2($p0: ref, $i1: i1) returns ($r: i32);



const qxl_bo_unreserve___2: ref;

axiom qxl_bo_unreserve___2 == $sub.ref(0, 1019745);

procedure qxl_bo_unreserve___2($p0: ref);



const drm_gem_object_unreference_unlocked___3: ref;

axiom drm_gem_object_unreference_unlocked___3 == $sub.ref(0, 1020777);

procedure drm_gem_object_unreference_unlocked___3($p0: ref);



const ldv_mutex_lock_110___3: ref;

axiom ldv_mutex_lock_110___3 == $sub.ref(0, 1021809);

procedure ldv_mutex_lock_110___3($p0: ref);



const ldv_mutex_unlock_111___3: ref;

axiom ldv_mutex_unlock_111___3 == $sub.ref(0, 1022841);

procedure ldv_mutex_unlock_111___3($p0: ref);



const ttm_bo_unreserve___2: ref;

axiom ttm_bo_unreserve___2 == $sub.ref(0, 1023873);

procedure ttm_bo_unreserve___2($p0: ref);



const ttm_bo_reserve___2: ref;

axiom ttm_bo_reserve___2 == $sub.ref(0, 1024905);

procedure ttm_bo_reserve___2($p0: ref, $i1: i1, $i2: i1, $i3: i1, $p4: ref) returns ($r: i32);



const __ttm_bo_reserve___2: ref;

axiom __ttm_bo_reserve___2 == $sub.ref(0, 1025937);

procedure __ttm_bo_reserve___2($p0: ref, $i1: i1, $i2: i1, $i3: i1, $p4: ref) returns ($r: i32);



const ww_mutex_trylock___2: ref;

axiom ww_mutex_trylock___2 == $sub.ref(0, 1026969);

procedure ww_mutex_trylock___2($p0: ref) returns ($r: i32);



const ww_mutex_lock_interruptible___2: ref;

axiom ww_mutex_lock_interruptible___2 == $sub.ref(0, 1028001);

procedure ww_mutex_lock_interruptible___2($p0: ref, $p1: ref) returns ($r: i32);



const ww_mutex_lock___2: ref;

axiom ww_mutex_lock___2 == $sub.ref(0, 1029033);

procedure ww_mutex_lock___2($p0: ref, $p1: ref) returns ($r: i32);



const ldv_mutex_lock_99___2: ref;

axiom ldv_mutex_lock_99___2 == $sub.ref(0, 1030065);

procedure ldv_mutex_lock_99___2($p0: ref);



const ldv_mutex_lock_interruptible_100___2: ref;

axiom ldv_mutex_lock_interruptible_100___2 == $sub.ref(0, 1031097);

procedure ldv_mutex_lock_interruptible_100___2($p0: ref) returns ($r: i32);



const ldv_mutex_trylock_101___2: ref;

axiom ldv_mutex_trylock_101___2 == $sub.ref(0, 1032129);

procedure ldv_mutex_trylock_101___2($p0: ref) returns ($r: i32);



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 1033161);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);



const qxl_process_single_command: ref;

axiom qxl_process_single_command == $sub.ref(0, 1034193);

procedure qxl_process_single_command($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const current_thread_info: ref;

axiom current_thread_info == $sub.ref(0, 1035225);

procedure current_thread_info() returns ($r: ref);



const __chk_range_not_ok: ref;

axiom __chk_range_not_ok == $sub.ref(0, 1036257);

procedure __chk_range_not_ok($i0: i64, $i1: i64, $i2: i64) returns ($r: i1);



const __copy_from_user_inatomic_nocache: ref;

axiom __copy_from_user_inatomic_nocache == $sub.ref(0, 1037289);

procedure __copy_from_user_inatomic_nocache($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const qxlhw_handle_to_bo: ref;

axiom qxlhw_handle_to_bo == $sub.ref(0, 1038321);

procedure qxlhw_handle_to_bo($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: ref);



const apply_reloc: ref;

axiom apply_reloc == $sub.ref(0, 1039353);

procedure apply_reloc($p0: ref, $p1: ref);



const apply_surf_reloc: ref;

axiom apply_surf_reloc == $sub.ref(0, 1040385);

procedure apply_surf_reloc($p0: ref, $p1: ref);



const __copy_user_nocache: ref;

axiom __copy_user_nocache == $sub.ref(0, 1041417);

procedure __copy_user_nocache($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i64);



const might_fault: ref;

axiom might_fault == $sub.ref(0, 1042449);

procedure might_fault();



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 1043481);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 1044513);

procedure __copy_from_user_overflow();



const ldv_EMGentry_exit_qxl_exit_18_2: ref;

axiom ldv_EMGentry_exit_qxl_exit_18_2 == $sub.ref(0, 1045545);

procedure ldv_EMGentry_exit_qxl_exit_18_2($p0: ref);
  free requires assertsPassed;



implementation ldv_EMGentry_exit_qxl_exit_18_2($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12794;

  corral_source_split_12794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2958} qxl_exit();
    goto corral_source_split_12795;

  corral_source_split_12795:
    assume {:verifier.code 0} true;
    return;
}



const qxl_exit: ref;

axiom qxl_exit == $sub.ref(0, 1046577);

procedure qxl_exit();
  free requires assertsPassed;



implementation qxl_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12797;

  corral_source_split_12797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2959} drm_pci_exit(qxl_driver, qxl_pci_driver);
    goto corral_source_split_12798;

  corral_source_split_12798:
    assume {:verifier.code 0} true;
    return;
}



const drm_pci_exit: ref;

axiom drm_pci_exit == $sub.ref(0, 1047609);

procedure drm_pci_exit($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation drm_pci_exit($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12800;

  corral_source_split_12800:
    assume {:verifier.code 0} true;
    return;
}



const ldv_EMGentry_init_qxl_init_18_33: ref;

axiom ldv_EMGentry_init_qxl_init_18_33 == $sub.ref(0, 1048641);

procedure ldv_EMGentry_init_qxl_init_18_33($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_EMGentry_init_qxl_init_18_33($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12802;

  corral_source_split_12802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2960} $i1 := qxl_init();
    call {:si_unique_call 2961} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_12803;

  corral_source_split_12803:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const qxl_init: ref;

axiom qxl_init == $sub.ref(0, 1049673);

procedure qxl_init() returns ($r: i32);
  free requires assertsPassed;



implementation qxl_init() returns ($r: i32)
{
  var $i0: i1;
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12805;

  corral_source_split_12805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2962} $i0 := vgacon_text_force();
    goto corral_source_split_12806;

  corral_source_split_12806:
    assume {:verifier.code 0} true;
    $i1 := $zext.i1.i8($i0);
    call {:si_unique_call 2963} {:cexpr "tmp"} boogie_si_record_i8($i1);
    goto corral_source_split_12807;

  corral_source_split_12807:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_12808;

  corral_source_split_12808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.121;
    goto corral_source_split_12818;

  corral_source_split_12818:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_12819;

  corral_source_split_12819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.122;
    goto corral_source_split_12823;

  corral_source_split_12823:
    assume {:verifier.code 0} true;
    goto corral_source_split_12824;

  corral_source_split_12824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2964} $i9 := drm_pci_init(qxl_driver, qxl_pci_driver);
    call {:si_unique_call 2965} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_12825;

  corral_source_split_12825:
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_12816;

  corral_source_split_12816:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_12821;

  corral_source_split_12821:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_12810;

  corral_source_split_12810:
    assume {:verifier.code 0} true;
    $i3 := $M.121;
    goto corral_source_split_12811;

  corral_source_split_12811:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $sub.i32(0, 1));
    goto corral_source_split_12812;

  corral_source_split_12812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_12814;

  corral_source_split_12814:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb6;
}



const vgacon_text_force: ref;

axiom vgacon_text_force == $sub.ref(0, 1050705);

procedure vgacon_text_force() returns ($r: i1);
  free requires assertsPassed;



implementation vgacon_text_force() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12827;

  corral_source_split_12827:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2966} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 2967} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_12828;

  corral_source_split_12828:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const drm_pci_init: ref;

axiom drm_pci_init == $sub.ref(0, 1051737);

procedure drm_pci_init($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_pci_init($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12830;

  corral_source_split_12830:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2968} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2969} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_12831;

  corral_source_split_12831:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_10_18_4: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_10_18_4 == $sub.ref(0, 1052769);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_10_18_4();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_10_18_4()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12833;

  corral_source_split_12833:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_11_18_5: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_11_18_5 == $sub.ref(0, 1053801);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_11_18_5();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_11_18_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12835;

  corral_source_split_12835:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_12_18_6: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_12_18_6 == $sub.ref(0, 1054833);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_12_18_6();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_12_18_6()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12837;

  corral_source_split_12837:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_13_18_7: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_13_18_7 == $sub.ref(0, 1055865);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_13_18_7();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_13_18_7()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12839;

  corral_source_split_12839:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_14_18_8: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_14_18_8 == $sub.ref(0, 1056897);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_14_18_8();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_14_18_8()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12841;

  corral_source_split_12841:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_15_18_9: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_15_18_9 == $sub.ref(0, 1057929);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_15_18_9();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_15_18_9()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12843;

  corral_source_split_12843:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_16_18_10: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_16_18_10 == $sub.ref(0, 1058961);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_16_18_10();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_16_18_10()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12845;

  corral_source_split_12845:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_17_18_11: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_17_18_11 == $sub.ref(0, 1059993);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_17_18_11();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_17_18_11()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12847;

  corral_source_split_12847:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_5_18_12: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_5_18_12 == $sub.ref(0, 1061025);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_5_18_12();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_5_18_12()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12849;

  corral_source_split_12849:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_9_18_13: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_9_18_13 == $sub.ref(0, 1062057);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_9_18_13();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_9_18_13()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12851;

  corral_source_split_12851:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_file_operations_instance_1_18_14: ref;

axiom ldv_dispatch_deregister_file_operations_instance_1_18_14 == $sub.ref(0, 1063089);

procedure ldv_dispatch_deregister_file_operations_instance_1_18_14();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_file_operations_instance_1_18_14()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12853;

  corral_source_split_12853:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_pci_instance_2_18_15: ref;

axiom ldv_dispatch_deregister_pci_instance_2_18_15 == $sub.ref(0, 1064121);

procedure ldv_dispatch_deregister_pci_instance_2_18_15();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_pci_instance_2_18_15()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12855;

  corral_source_split_12855:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_platform_instance_4_18_16: ref;

axiom ldv_dispatch_deregister_platform_instance_4_18_16 == $sub.ref(0, 1065153);

procedure ldv_dispatch_deregister_platform_instance_4_18_16();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_platform_instance_4_18_16()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12857;

  corral_source_split_12857:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_pm_deregister_3_5: ref;

axiom ldv_dispatch_pm_deregister_3_5 == $sub.ref(0, 1066185);

procedure ldv_dispatch_pm_deregister_3_5();
  free requires assertsPassed;



implementation ldv_dispatch_pm_deregister_3_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12859;

  corral_source_split_12859:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_pm_register_3_6: ref;

axiom ldv_dispatch_pm_register_3_6 == $sub.ref(0, 1067217);

procedure ldv_dispatch_pm_register_3_6();
  free requires assertsPassed;
  modifies $CurrAddr, $M.6, $M.67, $M.68, $M.46, $M.32, $M.42, $M.69, $M.70, $M.41, $M.71, $M.43, $M.36, assertsPassed, $M.40, $M.35, $M.72, $M.38, $M.39, $M.52, $M.64, $M.37, $M.44, $M.53, $M.55, $M.49, $M.73, $M.74, $M.75, $M.65, $M.54;



implementation ldv_dispatch_pm_register_3_6()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12861;

  corral_source_split_12861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2970} $p0 := ldv_xmalloc(4);
    goto corral_source_split_12862;

  corral_source_split_12862:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_12863;

  corral_source_split_12863:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_12864;

  corral_source_split_12864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2971} ldv_pm_pm_ops_instance_2($p2);
    goto SeqInstr_1981, SeqInstr_1982;

  SeqInstr_1982:
    assume assertsPassed;
    goto SeqInstr_1983;

  SeqInstr_1983:
    goto corral_source_split_12865;

  corral_source_split_12865:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1981:
    assume !assertsPassed;
    return;
}



const ldv_pm_pm_ops_instance_2: ref;

axiom ldv_pm_pm_ops_instance_2 == $sub.ref(0, 1068249);

procedure ldv_pm_pm_ops_instance_2($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.32, $M.42, $M.69, $M.70, $M.41, $M.71, $M.43, $M.36, $CurrAddr, assertsPassed, $M.40, $M.35, $M.72, $M.38, $M.39, $M.52, $M.64, $M.37, $M.44, $M.53, $M.55, $M.49, $M.73, $M.74, $M.75, $M.65, $M.54;



implementation ldv_pm_pm_ops_instance_2($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12867;

  corral_source_split_12867:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $p7, $p8, $i9, $i10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $i31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $p45, $p46, $i47, $i48, $p49, $p50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $p58, $i59, $i60, $p61, $p62, $p63, $p64, $p65, $p66, $i67, $i68, $p69, $p70, $i71, $i72, $p73, $p74, $p75, $p76, $i77, $i78, $p79, $p80, $p81, $p82, $i83, $i84, $p85, $p86, $p87, $p88, $i89, $i90, $p91, $p92, $p93, $p94, $p95, $p96, $i97, $i98, $p99, $p100, $i101, $i102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $p110, $p111, $p112, $i113, $i114, $p115, $p116, $p117, $p118, $i119, $i120, $p121, $p122, $p123, $p124, $p125, $p126, $i127, $i128, $p129, $p130 := ldv_pm_pm_ops_instance_2_loop_$bb1($i1, $i2, $i3, $i4, $i5, $p7, $p8, $i9, $i10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $i31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $p45, $p46, $i47, $i48, $p49, $p50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $p58, $i59, $i60, $p61, $p62, $p63, $p64, $p65, $p66, $i67, $i68, $p69, $p70, $i71, $i72, $p73, $p74, $p75, $p76, $i77, $i78, $p79, $p80, $p81, $p82, $i83, $i84, $p85, $p86, $p87, $p88, $i89, $i90, $p91, $p92, $p93, $p94, $p95, $p96, $i97, $i98, $p99, $p100, $i101, $i102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $p110, $p111, $p112, $i113, $i114, $p115, $p116, $p117, $p118, $i119, $i120, $p121, $p122, $p123, $p124, $p125, $p126, $i127, $i128, $p129, $p130);
    goto $bb1_last;

  corral_source_split_12869:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_12870;

  corral_source_split_12870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_12879;

  corral_source_split_12879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_12888;

  corral_source_split_12888:
    assume {:verifier.code 0} true;
    $i5 := $i1;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 4);
    goto corral_source_split_12897;

  corral_source_split_12897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2974} ldv_stop();
    goto corral_source_split_12901;

  corral_source_split_12901:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i6 == 1;
    goto corral_source_split_12899;

  corral_source_split_12899:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_12890;

  corral_source_split_12890:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_12892;

  corral_source_split_12892:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.130, $p25);
    goto corral_source_split_12893;

  corral_source_split_12893:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_12894;

  corral_source_split_12894:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_12895;

  corral_source_split_12895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2979} $i31 := ldv_undef_int();
    call {:si_unique_call 2980} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_12928;

  corral_source_split_12928:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 1);
    goto corral_source_split_12929;

  corral_source_split_12929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i31, 2);
    goto corral_source_split_12939;

  corral_source_split_12939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i31, 3);
    goto corral_source_split_12949;

  corral_source_split_12949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2990} ldv_stop();
    goto corral_source_split_12959;

  corral_source_split_12959:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_13007;

  corral_source_split_13007:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.162, $p125);
    goto corral_source_split_13008;

  corral_source_split_13008:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_13009;

  corral_source_split_13009:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i127, 0);
    goto corral_source_split_13010;

  corral_source_split_13010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  $bb92:
    assume $i128 == 1;
    goto corral_source_split_13104;

  corral_source_split_13104:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_13105;

  corral_source_split_13105:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.163, $p129);
    goto corral_source_split_13106;

  corral_source_split_13106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3006} ldv_pm_ops_instance_complete_2_3($p130, $u11);
    goto SeqInstr_2050, SeqInstr_2051;

  SeqInstr_2051:
    assume assertsPassed;
    goto SeqInstr_2052;

  SeqInstr_2052:
    goto corral_source_split_13107;

  corral_source_split_13107:
    assume {:verifier.code 0} true;
    goto $bb94;

  SeqInstr_2050:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i34 == 1;
    goto corral_source_split_12951;

  corral_source_split_12951:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_12953;

  corral_source_split_12953:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.152, $p95);
    goto corral_source_split_12954;

  corral_source_split_12954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2987} ldv_pm_ops_instance_poweroff_2_9($p96, $u11);
    goto SeqInstr_2002, SeqInstr_2003;

  SeqInstr_2003:
    assume assertsPassed;
    goto SeqInstr_2004;

  SeqInstr_2004:
    goto corral_source_split_12955;

  corral_source_split_12955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2988} $i97 := ldv_undef_int();
    call {:si_unique_call 2989} {:cexpr "tmp___3"} boogie_si_record_i32($i97);
    goto corral_source_split_12956;

  corral_source_split_12956:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_12957;

  corral_source_split_12957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i98 == 1);
    goto corral_source_split_13064;

  corral_source_split_13064:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_13065;

  corral_source_split_13065:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.157, $p111);
    goto corral_source_split_13066;

  corral_source_split_13066:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p112);
    goto corral_source_split_13067;

  corral_source_split_13067:
    assume {:verifier.code 0} true;
    $i114 := $ne.i64($i113, 0);
    goto corral_source_split_13068;

  corral_source_split_13068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_13094;

  corral_source_split_13094:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.159, $p117);
    goto corral_source_split_13095;

  corral_source_split_13095:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p118);
    goto corral_source_split_13096;

  corral_source_split_13096:
    assume {:verifier.code 0} true;
    $i120 := $ne.i64($i119, 0);
    goto corral_source_split_13097;

  corral_source_split_13097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_13085;

  corral_source_split_13085:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.161, $p123);
    goto corral_source_split_13086;

  corral_source_split_13086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3003} ldv_pm_ops_instance_restore_2_4($p124, $u11);
    goto SeqInstr_2041, SeqInstr_2042;

  SeqInstr_2042:
    assume assertsPassed;
    goto SeqInstr_2043;

  SeqInstr_2043:
    goto corral_source_split_13087;

  corral_source_split_13087:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_2041:
    assume !assertsPassed;
    return;

  $bb88:
    assume $i120 == 1;
    goto corral_source_split_13099;

  corral_source_split_13099:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_13100;

  corral_source_split_13100:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.160, $p121);
    goto corral_source_split_13101;

  corral_source_split_13101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3005} ldv_pm_ops_instance_restore_noirq_2_5($p122, $u11);
    goto SeqInstr_2047, SeqInstr_2048;

  SeqInstr_2048:
    assume assertsPassed;
    goto SeqInstr_2049;

  SeqInstr_2049:
    goto corral_source_split_13102;

  corral_source_split_13102:
    assume {:verifier.code 0} true;
    goto $bb90;

  SeqInstr_2047:
    assume !assertsPassed;
    return;

  $bb85:
    assume $i114 == 1;
    goto corral_source_split_13089;

  corral_source_split_13089:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_13090;

  corral_source_split_13090:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.158, $p115);
    goto corral_source_split_13091;

  corral_source_split_13091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3004} ldv_pm_ops_instance_poweroff_noirq_2_6($p116, $u11);
    goto SeqInstr_2044, SeqInstr_2045;

  SeqInstr_2045:
    assume assertsPassed;
    goto SeqInstr_2046;

  SeqInstr_2046:
    goto corral_source_split_13092;

  corral_source_split_13092:
    assume {:verifier.code 0} true;
    goto $bb87;

  SeqInstr_2044:
    assume !assertsPassed;
    return;

  $bb76:
    assume $i98 == 1;
    goto corral_source_split_13058;

  corral_source_split_13058:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_13059;

  corral_source_split_13059:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.153, $p99);
    goto corral_source_split_13060;

  corral_source_split_13060:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p100);
    goto corral_source_split_13061;

  corral_source_split_13061:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_13062;

  corral_source_split_13062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_13075;

  corral_source_split_13075:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.155, $p105);
    goto corral_source_split_13076;

  corral_source_split_13076:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_13077;

  corral_source_split_13077:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_13078;

  corral_source_split_13078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb81:
    assume $i108 == 1;
    goto corral_source_split_13080;

  corral_source_split_13080:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_13081;

  corral_source_split_13081:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.156, $p109);
    goto corral_source_split_13082;

  corral_source_split_13082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3002} ldv_pm_ops_instance_restore_early_2_7($p110, $u11);
    goto SeqInstr_2038, SeqInstr_2039;

  SeqInstr_2039:
    assume assertsPassed;
    goto SeqInstr_2040;

  SeqInstr_2040:
    goto corral_source_split_13083;

  corral_source_split_13083:
    assume {:verifier.code 0} true;
    goto $bb83;

  SeqInstr_2038:
    assume !assertsPassed;
    return;

  $bb78:
    assume $i102 == 1;
    goto corral_source_split_13070;

  corral_source_split_13070:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_13071;

  corral_source_split_13071:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.154, $p103);
    goto corral_source_split_13072;

  corral_source_split_13072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3001} ldv_pm_ops_instance_poweroff_late_2_8($p104, $u11);
    goto SeqInstr_2035, SeqInstr_2036;

  SeqInstr_2036:
    assume assertsPassed;
    goto SeqInstr_2037;

  SeqInstr_2037:
    goto corral_source_split_13073;

  corral_source_split_13073:
    assume {:verifier.code 0} true;
    goto $bb80;

  SeqInstr_2035:
    assume !assertsPassed;
    return;

  SeqInstr_2002:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i33 == 1;
    goto corral_source_split_12941;

  corral_source_split_12941:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_12943;

  corral_source_split_12943:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.142, $p65);
    goto corral_source_split_12944;

  corral_source_split_12944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2984} ldv_pm_ops_instance_freeze_2_15($p66, $u11);
    goto SeqInstr_1999, SeqInstr_2000;

  SeqInstr_2000:
    assume assertsPassed;
    goto SeqInstr_2001;

  SeqInstr_2001:
    goto corral_source_split_12945;

  corral_source_split_12945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2985} $i67 := ldv_undef_int();
    call {:si_unique_call 2986} {:cexpr "tmp___2"} boogie_si_record_i32($i67);
    goto corral_source_split_12946;

  corral_source_split_12946:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_12947;

  corral_source_split_12947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i68 == 1);
    goto corral_source_split_13018;

  corral_source_split_13018:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_13019;

  corral_source_split_13019:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.147, $p81);
    goto corral_source_split_13020;

  corral_source_split_13020:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_13021;

  corral_source_split_13021:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_13022;

  corral_source_split_13022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_13048;

  corral_source_split_13048:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.149, $p87);
    goto corral_source_split_13049;

  corral_source_split_13049:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_13050;

  corral_source_split_13050:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, 0);
    goto corral_source_split_13051;

  corral_source_split_13051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_13039;

  corral_source_split_13039:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.151, $p93);
    goto corral_source_split_13040;

  corral_source_split_13040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2998} ldv_pm_ops_instance_thaw_2_10($p94, $u11);
    goto SeqInstr_2026, SeqInstr_2027;

  SeqInstr_2027:
    assume assertsPassed;
    goto SeqInstr_2028;

  SeqInstr_2028:
    goto corral_source_split_13041;

  corral_source_split_13041:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_2026:
    assume !assertsPassed;
    return;

  $bb73:
    assume $i90 == 1;
    goto corral_source_split_13053;

  corral_source_split_13053:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_13054;

  corral_source_split_13054:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.150, $p91);
    goto corral_source_split_13055;

  corral_source_split_13055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3000} ldv_pm_ops_instance_thaw_noirq_2_11($p92, $u11);
    goto SeqInstr_2032, SeqInstr_2033;

  SeqInstr_2033:
    assume assertsPassed;
    goto SeqInstr_2034;

  SeqInstr_2034:
    goto corral_source_split_13056;

  corral_source_split_13056:
    assume {:verifier.code 0} true;
    goto $bb75;

  SeqInstr_2032:
    assume !assertsPassed;
    return;

  $bb70:
    assume $i84 == 1;
    goto corral_source_split_13043;

  corral_source_split_13043:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_13044;

  corral_source_split_13044:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.148, $p85);
    goto corral_source_split_13045;

  corral_source_split_13045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2999} ldv_pm_ops_instance_freeze_noirq_2_12($p86, $u11);
    goto SeqInstr_2029, SeqInstr_2030;

  SeqInstr_2030:
    assume assertsPassed;
    goto SeqInstr_2031;

  SeqInstr_2031:
    goto corral_source_split_13046;

  corral_source_split_13046:
    assume {:verifier.code 0} true;
    goto $bb72;

  SeqInstr_2029:
    assume !assertsPassed;
    return;

  $bb61:
    assume $i68 == 1;
    goto corral_source_split_13012;

  corral_source_split_13012:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_13013;

  corral_source_split_13013:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.143, $p69);
    goto corral_source_split_13014;

  corral_source_split_13014:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_13015;

  corral_source_split_13015:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_13016;

  corral_source_split_13016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_13029;

  corral_source_split_13029:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.145, $p75);
    goto corral_source_split_13030;

  corral_source_split_13030:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_13031;

  corral_source_split_13031:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_13032;

  corral_source_split_13032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb66:
    assume $i78 == 1;
    goto corral_source_split_13034;

  corral_source_split_13034:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_13035;

  corral_source_split_13035:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.146, $p79);
    goto corral_source_split_13036;

  corral_source_split_13036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2997} ldv_pm_ops_instance_thaw_early_2_13($p80, $u11);
    goto SeqInstr_2023, SeqInstr_2024;

  SeqInstr_2024:
    assume assertsPassed;
    goto SeqInstr_2025;

  SeqInstr_2025:
    goto corral_source_split_13037;

  corral_source_split_13037:
    assume {:verifier.code 0} true;
    goto $bb68;

  SeqInstr_2023:
    assume !assertsPassed;
    return;

  $bb63:
    assume $i72 == 1;
    goto corral_source_split_13024;

  corral_source_split_13024:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_13025;

  corral_source_split_13025:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.144, $p73);
    goto corral_source_split_13026;

  corral_source_split_13026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2996} ldv_pm_ops_instance_freeze_late_2_14($p74, $u11);
    goto SeqInstr_2020, SeqInstr_2021;

  SeqInstr_2021:
    assume assertsPassed;
    goto SeqInstr_2022;

  SeqInstr_2022:
    goto corral_source_split_13027;

  corral_source_split_13027:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_2020:
    assume !assertsPassed;
    return;

  SeqInstr_1999:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i32 == 1;
    goto corral_source_split_12931;

  corral_source_split_12931:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_12933;

  corral_source_split_12933:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.132, $p35);
    goto corral_source_split_12934;

  corral_source_split_12934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2981} ldv_pm_ops_instance_suspend_2_21($p36, $u11);
    goto SeqInstr_1996, SeqInstr_1997;

  SeqInstr_1997:
    assume assertsPassed;
    goto SeqInstr_1998;

  SeqInstr_1998:
    goto corral_source_split_12935;

  corral_source_split_12935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2982} $i37 := ldv_undef_int();
    call {:si_unique_call 2983} {:cexpr "tmp___1"} boogie_si_record_i32($i37);
    goto corral_source_split_12936;

  corral_source_split_12936:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_12937;

  corral_source_split_12937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i38 == 1);
    goto corral_source_split_12967;

  corral_source_split_12967:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_12968;

  corral_source_split_12968:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.137, $p51);
    goto corral_source_split_12969;

  corral_source_split_12969:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_12970;

  corral_source_split_12970:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_12971;

  corral_source_split_12971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_12997;

  corral_source_split_12997:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.139, $p57);
    goto corral_source_split_12998;

  corral_source_split_12998:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_12999;

  corral_source_split_12999:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_13000;

  corral_source_split_13000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_12988;

  corral_source_split_12988:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.141, $p63);
    goto corral_source_split_12989;

  corral_source_split_12989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2993} ldv_pm_ops_instance_resume_2_16($p64, $u11);
    goto SeqInstr_2011, SeqInstr_2012;

  SeqInstr_2012:
    assume assertsPassed;
    goto SeqInstr_2013;

  SeqInstr_2013:
    goto corral_source_split_12990;

  corral_source_split_12990:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_2011:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i60 == 1;
    goto corral_source_split_13002;

  corral_source_split_13002:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_13003;

  corral_source_split_13003:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.140, $p61);
    goto corral_source_split_13004;

  corral_source_split_13004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2995} ldv_pm_ops_instance_resume_early_2_17($p62, $u11);
    goto SeqInstr_2017, SeqInstr_2018;

  SeqInstr_2018:
    assume assertsPassed;
    goto SeqInstr_2019;

  SeqInstr_2019:
    goto corral_source_split_13005;

  corral_source_split_13005:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_2017:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i54 == 1;
    goto corral_source_split_12992;

  corral_source_split_12992:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_12993;

  corral_source_split_12993:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.138, $p55);
    goto corral_source_split_12994;

  corral_source_split_12994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2994} ldv_pm_ops_instance_suspend_late_2_18($p56, $u11);
    goto SeqInstr_2014, SeqInstr_2015;

  SeqInstr_2015:
    assume assertsPassed;
    goto SeqInstr_2016;

  SeqInstr_2016:
    goto corral_source_split_12995;

  corral_source_split_12995:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_2014:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i38 == 1;
    goto corral_source_split_12961;

  corral_source_split_12961:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_12962;

  corral_source_split_12962:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.133, $p39);
    goto corral_source_split_12963;

  corral_source_split_12963:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_12964;

  corral_source_split_12964:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_12965;

  corral_source_split_12965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_12978;

  corral_source_split_12978:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.135, $p45);
    goto corral_source_split_12979;

  corral_source_split_12979:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_12980;

  corral_source_split_12980:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_12981;

  corral_source_split_12981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb50:
    assume $i48 == 1;
    goto corral_source_split_12983;

  corral_source_split_12983:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_12984;

  corral_source_split_12984:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.136, $p49);
    goto corral_source_split_12985;

  corral_source_split_12985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2992} ldv_pm_ops_instance_resume_noirq_2_19($p50, $u11);
    goto SeqInstr_2008, SeqInstr_2009;

  SeqInstr_2009:
    assume assertsPassed;
    goto SeqInstr_2010;

  SeqInstr_2010:
    goto corral_source_split_12986;

  corral_source_split_12986:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_2008:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i42 == 1;
    goto corral_source_split_12973;

  corral_source_split_12973:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_12974;

  corral_source_split_12974:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.134, $p43);
    goto corral_source_split_12975;

  corral_source_split_12975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2991} ldv_pm_ops_instance_suspend_noirq_2_20($p44, $u11);
    goto SeqInstr_2005, SeqInstr_2006;

  SeqInstr_2006:
    assume assertsPassed;
    goto SeqInstr_2007;

  SeqInstr_2007:
    goto corral_source_split_12976;

  corral_source_split_12976:
    assume {:verifier.code 0} true;
    goto $bb49;

  SeqInstr_2005:
    assume !assertsPassed;
    return;

  SeqInstr_1996:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i28 == 1;
    goto corral_source_split_12923;

  corral_source_split_12923:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_12924;

  corral_source_split_12924:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.131, $p29);
    goto corral_source_split_12925;

  corral_source_split_12925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2978} ldv_pm_ops_instance_prepare_2_22($p30, $u11);
    goto SeqInstr_1993, SeqInstr_1994;

  SeqInstr_1994:
    assume assertsPassed;
    goto SeqInstr_1995;

  SeqInstr_1995:
    goto corral_source_split_12926;

  corral_source_split_12926:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_1993:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_12881;

  corral_source_split_12881:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_12883;

  corral_source_split_12883:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.126, $p13);
    goto corral_source_split_12884;

  corral_source_split_12884:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_12885;

  corral_source_split_12885:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_12886;

  corral_source_split_12886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_12913;

  corral_source_split_12913:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.128, $p19);
    goto corral_source_split_12914;

  corral_source_split_12914:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_12915;

  corral_source_split_12915:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_12916;

  corral_source_split_12916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26:
    assume $i22 == 1;
    goto corral_source_split_12918;

  corral_source_split_12918:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_12919;

  corral_source_split_12919:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.129, $p23);
    goto corral_source_split_12920;

  corral_source_split_12920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2977} ldv_pm_ops_instance_runtime_resume_2_24($p24, $u11);
    goto SeqInstr_1990, SeqInstr_1991;

  SeqInstr_1991:
    assume assertsPassed;
    goto SeqInstr_1992;

  SeqInstr_1992:
    goto corral_source_split_12921;

  corral_source_split_12921:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_1990:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i16 == 1;
    goto corral_source_split_12908;

  corral_source_split_12908:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_12909;

  corral_source_split_12909:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.127, $p17);
    goto corral_source_split_12910;

  corral_source_split_12910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2976} ldv_pm_ops_instance_runtime_suspend_2_25($p18, $u11);
    goto SeqInstr_1987, SeqInstr_1988;

  SeqInstr_1988:
    assume assertsPassed;
    goto SeqInstr_1989;

  SeqInstr_1989:
    goto corral_source_split_12911;

  corral_source_split_12911:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_1987:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_12872;

  corral_source_split_12872:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_12874;

  corral_source_split_12874:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.124, $p7);
    goto corral_source_split_12875;

  corral_source_split_12875:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_12876;

  corral_source_split_12876:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_12877;

  corral_source_split_12877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i10 == 1;
    goto corral_source_split_12903;

  corral_source_split_12903:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_12904;

  corral_source_split_12904:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.125, $p11);
    goto corral_source_split_12905;

  corral_source_split_12905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2975} ldv_pm_ops_instance_runtime_idle_2_27($p12, $u11);
    goto SeqInstr_1984, SeqInstr_1985;

  SeqInstr_1985:
    assume assertsPassed;
    goto SeqInstr_1986;

  SeqInstr_1986:
    goto corral_source_split_12906;

  corral_source_split_12906:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_1984:
    assume !assertsPassed;
    return;

  $bb22_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2972} $i1 := ldv_undef_int();
    call {:si_unique_call 2973} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_12869;
}



const ldv_pm_ops_instance_runtime_idle_2_27: ref;

axiom ldv_pm_ops_instance_runtime_idle_2_27 == $sub.ref(0, 1069281);

procedure ldv_pm_ops_instance_runtime_idle_2_27($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation ldv_pm_ops_instance_runtime_idle_2_27($p0: ref, $p1: ref)
{
  var vslice_dummy_var_223: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3007} vslice_dummy_var_223 := devirtbounce.18($p0, $p1);
    goto SeqInstr_2053, SeqInstr_2054;

  SeqInstr_2054:
    assume assertsPassed;
    goto SeqInstr_2055;

  SeqInstr_2055:
    goto corral_source_split_13109;

  corral_source_split_13109:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2053:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_runtime_suspend_2_25: ref;

axiom ldv_pm_ops_instance_runtime_suspend_2_25 == $sub.ref(0, 1070313);

procedure ldv_pm_ops_instance_runtime_suspend_2_25($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation ldv_pm_ops_instance_runtime_suspend_2_25($p0: ref, $p1: ref)
{
  var vslice_dummy_var_224: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3008} vslice_dummy_var_224 := devirtbounce.18($p0, $p1);
    goto SeqInstr_2056, SeqInstr_2057;

  SeqInstr_2057:
    assume assertsPassed;
    goto SeqInstr_2058;

  SeqInstr_2058:
    goto corral_source_split_13111;

  corral_source_split_13111:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2056:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_runtime_resume_2_24: ref;

axiom ldv_pm_ops_instance_runtime_resume_2_24 == $sub.ref(0, 1071345);

procedure ldv_pm_ops_instance_runtime_resume_2_24($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation ldv_pm_ops_instance_runtime_resume_2_24($p0: ref, $p1: ref)
{
  var vslice_dummy_var_225: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3009} vslice_dummy_var_225 := devirtbounce.18($p0, $p1);
    goto SeqInstr_2059, SeqInstr_2060;

  SeqInstr_2060:
    assume assertsPassed;
    goto SeqInstr_2061;

  SeqInstr_2061:
    goto corral_source_split_13113;

  corral_source_split_13113:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2059:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_prepare_2_22: ref;

axiom ldv_pm_ops_instance_prepare_2_22 == $sub.ref(0, 1072377);

procedure ldv_pm_ops_instance_prepare_2_22($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation ldv_pm_ops_instance_prepare_2_22($p0: ref, $p1: ref)
{
  var vslice_dummy_var_226: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3010} vslice_dummy_var_226 := devirtbounce.18($p0, $p1);
    goto SeqInstr_2062, SeqInstr_2063;

  SeqInstr_2063:
    assume assertsPassed;
    goto SeqInstr_2064;

  SeqInstr_2064:
    goto corral_source_split_13115;

  corral_source_split_13115:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2062:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_2_21: ref;

axiom ldv_pm_ops_instance_suspend_2_21 == $sub.ref(0, 1073409);

procedure ldv_pm_ops_instance_suspend_2_21($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.41, $M.36, $CurrAddr, assertsPassed, $M.42, $M.52, $M.72, $M.38, $M.39, $M.35, $M.40, $M.37, $M.44, $M.53, $M.43, $M.75, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.65, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64;



implementation ldv_pm_ops_instance_suspend_2_21($p0: ref, $p1: ref)
{
  var vslice_dummy_var_227: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13117;

  corral_source_split_13117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3011} vslice_dummy_var_227 := qxl_pm_suspend($p1);
    goto SeqInstr_2065, SeqInstr_2066;

  SeqInstr_2066:
    assume assertsPassed;
    goto SeqInstr_2067;

  SeqInstr_2067:
    goto corral_source_split_13118;

  corral_source_split_13118:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2065:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_noirq_2_20: ref;

axiom ldv_pm_ops_instance_suspend_noirq_2_20 == $sub.ref(0, 1074441);

procedure ldv_pm_ops_instance_suspend_noirq_2_20($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation ldv_pm_ops_instance_suspend_noirq_2_20($p0: ref, $p1: ref)
{
  var vslice_dummy_var_228: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3012} vslice_dummy_var_228 := devirtbounce.18($p0, $p1);
    goto SeqInstr_2068, SeqInstr_2069;

  SeqInstr_2069:
    assume assertsPassed;
    goto SeqInstr_2070;

  SeqInstr_2070:
    goto corral_source_split_13120;

  corral_source_split_13120:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2068:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_noirq_2_19: ref;

axiom ldv_pm_ops_instance_resume_noirq_2_19 == $sub.ref(0, 1075473);

procedure ldv_pm_ops_instance_resume_noirq_2_19($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation ldv_pm_ops_instance_resume_noirq_2_19($p0: ref, $p1: ref)
{
  var vslice_dummy_var_229: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3013} vslice_dummy_var_229 := devirtbounce.18($p0, $p1);
    goto SeqInstr_2071, SeqInstr_2072;

  SeqInstr_2072:
    assume assertsPassed;
    goto SeqInstr_2073;

  SeqInstr_2073:
    goto corral_source_split_13122;

  corral_source_split_13122:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2071:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_late_2_18: ref;

axiom ldv_pm_ops_instance_suspend_late_2_18 == $sub.ref(0, 1076505);

procedure ldv_pm_ops_instance_suspend_late_2_18($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation ldv_pm_ops_instance_suspend_late_2_18($p0: ref, $p1: ref)
{
  var vslice_dummy_var_230: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3014} vslice_dummy_var_230 := devirtbounce.18($p0, $p1);
    goto SeqInstr_2074, SeqInstr_2075;

  SeqInstr_2075:
    assume assertsPassed;
    goto SeqInstr_2076;

  SeqInstr_2076:
    goto corral_source_split_13124;

  corral_source_split_13124:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2074:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_early_2_17: ref;

axiom ldv_pm_ops_instance_resume_early_2_17 == $sub.ref(0, 1077537);

procedure ldv_pm_ops_instance_resume_early_2_17($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation ldv_pm_ops_instance_resume_early_2_17($p0: ref, $p1: ref)
{
  var vslice_dummy_var_231: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3015} vslice_dummy_var_231 := devirtbounce.18($p0, $p1);
    goto SeqInstr_2077, SeqInstr_2078;

  SeqInstr_2078:
    assume assertsPassed;
    goto SeqInstr_2079;

  SeqInstr_2079:
    goto corral_source_split_13126;

  corral_source_split_13126:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2077:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_2_16: ref;

axiom ldv_pm_ops_instance_resume_2_16 == $sub.ref(0, 1078569);

procedure ldv_pm_ops_instance_resume_2_16($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.32, $M.42, $M.71, $M.43, $CurrAddr, $M.36, $M.40, assertsPassed, $M.55, $M.65;



implementation ldv_pm_ops_instance_resume_2_16($p0: ref, $p1: ref)
{
  var vslice_dummy_var_232: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13128;

  corral_source_split_13128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3016} vslice_dummy_var_232 := qxl_pm_resume($p1);
    goto SeqInstr_2080, SeqInstr_2081;

  SeqInstr_2081:
    assume assertsPassed;
    goto SeqInstr_2082;

  SeqInstr_2082:
    goto corral_source_split_13129;

  corral_source_split_13129:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2080:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_2_15: ref;

axiom ldv_pm_ops_instance_freeze_2_15 == $sub.ref(0, 1079601);

procedure ldv_pm_ops_instance_freeze_2_15($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.41, $M.36, $CurrAddr, assertsPassed, $M.42, $M.52, $M.72, $M.38, $M.39, $M.35, $M.40, $M.37, $M.44, $M.53, $M.43, $M.75, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.65, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64;



implementation ldv_pm_ops_instance_freeze_2_15($p0: ref, $p1: ref)
{
  var vslice_dummy_var_233: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13131;

  corral_source_split_13131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3017} vslice_dummy_var_233 := qxl_pm_freeze($p1);
    goto SeqInstr_2083, SeqInstr_2084;

  SeqInstr_2084:
    assume assertsPassed;
    goto SeqInstr_2085;

  SeqInstr_2085:
    goto corral_source_split_13132;

  corral_source_split_13132:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2083:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_late_2_14: ref;

axiom ldv_pm_ops_instance_freeze_late_2_14 == $sub.ref(0, 1080633);

procedure ldv_pm_ops_instance_freeze_late_2_14($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation ldv_pm_ops_instance_freeze_late_2_14($p0: ref, $p1: ref)
{
  var vslice_dummy_var_234: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3018} vslice_dummy_var_234 := devirtbounce.18($p0, $p1);
    goto SeqInstr_2086, SeqInstr_2087;

  SeqInstr_2087:
    assume assertsPassed;
    goto SeqInstr_2088;

  SeqInstr_2088:
    goto corral_source_split_13134;

  corral_source_split_13134:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2086:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_early_2_13: ref;

axiom ldv_pm_ops_instance_thaw_early_2_13 == $sub.ref(0, 1081665);

procedure ldv_pm_ops_instance_thaw_early_2_13($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation ldv_pm_ops_instance_thaw_early_2_13($p0: ref, $p1: ref)
{
  var vslice_dummy_var_235: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3019} vslice_dummy_var_235 := devirtbounce.18($p0, $p1);
    goto SeqInstr_2089, SeqInstr_2090;

  SeqInstr_2090:
    assume assertsPassed;
    goto SeqInstr_2091;

  SeqInstr_2091:
    goto corral_source_split_13136;

  corral_source_split_13136:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2089:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_noirq_2_12: ref;

axiom ldv_pm_ops_instance_freeze_noirq_2_12 == $sub.ref(0, 1082697);

procedure ldv_pm_ops_instance_freeze_noirq_2_12($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation ldv_pm_ops_instance_freeze_noirq_2_12($p0: ref, $p1: ref)
{
  var vslice_dummy_var_236: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3020} vslice_dummy_var_236 := devirtbounce.18($p0, $p1);
    goto SeqInstr_2092, SeqInstr_2093;

  SeqInstr_2093:
    assume assertsPassed;
    goto SeqInstr_2094;

  SeqInstr_2094:
    goto corral_source_split_13138;

  corral_source_split_13138:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2092:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_noirq_2_11: ref;

axiom ldv_pm_ops_instance_thaw_noirq_2_11 == $sub.ref(0, 1083729);

procedure ldv_pm_ops_instance_thaw_noirq_2_11($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation ldv_pm_ops_instance_thaw_noirq_2_11($p0: ref, $p1: ref)
{
  var vslice_dummy_var_237: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3021} vslice_dummy_var_237 := devirtbounce.18($p0, $p1);
    goto SeqInstr_2095, SeqInstr_2096;

  SeqInstr_2096:
    assume assertsPassed;
    goto SeqInstr_2097;

  SeqInstr_2097:
    goto corral_source_split_13140;

  corral_source_split_13140:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2095:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_2_10: ref;

axiom ldv_pm_ops_instance_thaw_2_10 == $sub.ref(0, 1084761);

procedure ldv_pm_ops_instance_thaw_2_10($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.32, $M.42, $M.71, $M.43, $CurrAddr, $M.36, $M.40, assertsPassed, $M.55, $M.65;



implementation ldv_pm_ops_instance_thaw_2_10($p0: ref, $p1: ref)
{
  var vslice_dummy_var_238: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13142;

  corral_source_split_13142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3022} vslice_dummy_var_238 := qxl_pm_thaw($p1);
    goto SeqInstr_2098, SeqInstr_2099;

  SeqInstr_2099:
    assume assertsPassed;
    goto SeqInstr_2100;

  SeqInstr_2100:
    goto corral_source_split_13143;

  corral_source_split_13143:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2098:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_2_9: ref;

axiom ldv_pm_ops_instance_poweroff_2_9 == $sub.ref(0, 1085793);

procedure ldv_pm_ops_instance_poweroff_2_9($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.41, $M.36, $CurrAddr, assertsPassed, $M.42, $M.52, $M.72, $M.38, $M.39, $M.35, $M.40, $M.37, $M.44, $M.53, $M.43, $M.75, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.65, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64;



implementation ldv_pm_ops_instance_poweroff_2_9($p0: ref, $p1: ref)
{
  var vslice_dummy_var_239: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13145;

  corral_source_split_13145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3023} vslice_dummy_var_239 := qxl_pm_freeze($p1);
    goto SeqInstr_2101, SeqInstr_2102;

  SeqInstr_2102:
    assume assertsPassed;
    goto SeqInstr_2103;

  SeqInstr_2103:
    goto corral_source_split_13146;

  corral_source_split_13146:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2101:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_late_2_8: ref;

axiom ldv_pm_ops_instance_poweroff_late_2_8 == $sub.ref(0, 1086825);

procedure ldv_pm_ops_instance_poweroff_late_2_8($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation ldv_pm_ops_instance_poweroff_late_2_8($p0: ref, $p1: ref)
{
  var vslice_dummy_var_240: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3024} vslice_dummy_var_240 := devirtbounce.18($p0, $p1);
    goto SeqInstr_2104, SeqInstr_2105;

  SeqInstr_2105:
    assume assertsPassed;
    goto SeqInstr_2106;

  SeqInstr_2106:
    goto corral_source_split_13148;

  corral_source_split_13148:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2104:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_early_2_7: ref;

axiom ldv_pm_ops_instance_restore_early_2_7 == $sub.ref(0, 1087857);

procedure ldv_pm_ops_instance_restore_early_2_7($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation ldv_pm_ops_instance_restore_early_2_7($p0: ref, $p1: ref)
{
  var vslice_dummy_var_241: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3025} vslice_dummy_var_241 := devirtbounce.18($p0, $p1);
    goto SeqInstr_2107, SeqInstr_2108;

  SeqInstr_2108:
    assume assertsPassed;
    goto SeqInstr_2109;

  SeqInstr_2109:
    goto corral_source_split_13150;

  corral_source_split_13150:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2107:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_noirq_2_6: ref;

axiom ldv_pm_ops_instance_poweroff_noirq_2_6 == $sub.ref(0, 1088889);

procedure ldv_pm_ops_instance_poweroff_noirq_2_6($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation ldv_pm_ops_instance_poweroff_noirq_2_6($p0: ref, $p1: ref)
{
  var vslice_dummy_var_242: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3026} vslice_dummy_var_242 := devirtbounce.18($p0, $p1);
    goto SeqInstr_2110, SeqInstr_2111;

  SeqInstr_2111:
    assume assertsPassed;
    goto SeqInstr_2112;

  SeqInstr_2112:
    goto corral_source_split_13152;

  corral_source_split_13152:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2110:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_noirq_2_5: ref;

axiom ldv_pm_ops_instance_restore_noirq_2_5 == $sub.ref(0, 1089921);

procedure ldv_pm_ops_instance_restore_noirq_2_5($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation ldv_pm_ops_instance_restore_noirq_2_5($p0: ref, $p1: ref)
{
  var vslice_dummy_var_243: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3027} vslice_dummy_var_243 := devirtbounce.18($p0, $p1);
    goto SeqInstr_2113, SeqInstr_2114;

  SeqInstr_2114:
    assume assertsPassed;
    goto SeqInstr_2115;

  SeqInstr_2115:
    goto corral_source_split_13154;

  corral_source_split_13154:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2113:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_2_4: ref;

axiom ldv_pm_ops_instance_restore_2_4 == $sub.ref(0, 1090953);

procedure ldv_pm_ops_instance_restore_2_4($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.32, $M.42, $M.71, $M.43, $CurrAddr, $M.36, $M.40, assertsPassed, $M.55, $M.65;



implementation ldv_pm_ops_instance_restore_2_4($p0: ref, $p1: ref)
{
  var vslice_dummy_var_244: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13156;

  corral_source_split_13156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3028} vslice_dummy_var_244 := qxl_pm_restore($p1);
    goto SeqInstr_2116, SeqInstr_2117;

  SeqInstr_2117:
    assume assertsPassed;
    goto SeqInstr_2118;

  SeqInstr_2118:
    goto corral_source_split_13157;

  corral_source_split_13157:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2116:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_complete_2_3: ref;

axiom ldv_pm_ops_instance_complete_2_3 == $sub.ref(0, 1091985);

procedure ldv_pm_ops_instance_complete_2_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.36, $CurrAddr, $M.35, $M.40, assertsPassed, $M.72, $M.38, $M.39, $M.42, $M.52, $M.37, $M.41, $M.44, $M.53, $M.55, $M.49, $M.73, $M.74, $M.43, $M.75, $M.65, $M.67, $M.68, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64;



implementation ldv_pm_ops_instance_complete_2_3($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3029} devirtbounce.19($p0, $p1);
    goto SeqInstr_2119, SeqInstr_2120;

  SeqInstr_2120:
    assume assertsPassed;
    goto SeqInstr_2121;

  SeqInstr_2121:
    goto corral_source_split_13159;

  corral_source_split_13159:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2119:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_10_18_17: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_10_18_17 == $sub.ref(0, 1093017);

procedure ldv_dispatch_register_dummy_resourceless_instance_10_18_17();
  free requires assertsPassed;
  modifies $CurrAddr, $M.6, $M.55, assertsPassed;



implementation ldv_dispatch_register_dummy_resourceless_instance_10_18_17()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13161;

  corral_source_split_13161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3030} $p0 := ldv_xmalloc(4);
    goto corral_source_split_13162;

  corral_source_split_13162:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_13163;

  corral_source_split_13163:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13164;

  corral_source_split_13164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3031} ldv_struct_drm_encoder_helper_funcs_dummy_resourceless_instance_7($p2);
    goto SeqInstr_2122, SeqInstr_2123;

  SeqInstr_2123:
    assume assertsPassed;
    goto SeqInstr_2124;

  SeqInstr_2124:
    goto corral_source_split_13165;

  corral_source_split_13165:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2122:
    assume !assertsPassed;
    return;
}



const ldv_struct_drm_encoder_helper_funcs_dummy_resourceless_instance_7: ref;

axiom ldv_struct_drm_encoder_helper_funcs_dummy_resourceless_instance_7 == $sub.ref(0, 1094049);

procedure ldv_struct_drm_encoder_helper_funcs_dummy_resourceless_instance_7($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.55, assertsPassed;



implementation ldv_struct_drm_encoder_helper_funcs_dummy_resourceless_instance_7($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13167;

  corral_source_split_13167:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $p10, $p11, $p12, $p13, $p14, $p15 := ldv_struct_drm_encoder_helper_funcs_dummy_resourceless_instance_7_loop_$bb1($i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $p10, $p11, $p12, $p13, $p14, $p15);
    goto $bb1_last;

  corral_source_split_13169:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_13170;

  corral_source_split_13170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_13176;

  corral_source_split_13176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_13186;

  corral_source_split_13186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 4);
    goto corral_source_split_13196;

  corral_source_split_13196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 5);
    goto corral_source_split_13202;

  corral_source_split_13202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 6);
    goto corral_source_split_13208;

  corral_source_split_13208:
    assume {:verifier.code 0} true;
    $i8 := $i1;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 7);
    goto corral_source_split_13214;

  corral_source_split_13214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3044} ldv_stop();
    goto corral_source_split_13218;

  corral_source_split_13218:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    return;

  $bb26:
    assume $i9 == 1;
    goto corral_source_split_13216;

  corral_source_split_13216:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb22:
    assume $i7 == 1;
    goto corral_source_split_13210;

  corral_source_split_13210:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3043} ldv_dummy_resourceless_instance_callback_7_3($u12, $u13);
    goto SeqInstr_2125, SeqInstr_2126;

  SeqInstr_2126:
    assume assertsPassed;
    goto SeqInstr_2127;

  SeqInstr_2127:
    goto corral_source_split_13212;

  corral_source_split_13212:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb31_dummy;

  SeqInstr_2125:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i6 == 1;
    goto corral_source_split_13204;

  corral_source_split_13204:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3042} ldv_dummy_resourceless_instance_callback_7_7($u12, $u13);
    goto corral_source_split_13206;

  corral_source_split_13206:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb14:
    assume $i5 == 1;
    goto corral_source_split_13198;

  corral_source_split_13198:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3041} ldv_dummy_resourceless_instance_callback_7_8($u16, $u13, $u2);
    goto corral_source_split_13200;

  corral_source_split_13200:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_13188;

  corral_source_split_13188:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3038} $p13 := ldv_xmalloc(208);
    goto corral_source_split_13190;

  corral_source_split_13190:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_13191;

  corral_source_split_13191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3039} ldv_dummy_resourceless_instance_callback_7_11($u15, $u13, $u5, $p14);
    goto corral_source_split_13192;

  corral_source_split_13192:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_13193;

  corral_source_split_13193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3040} ldv_free($p15);
    goto corral_source_split_13194;

  corral_source_split_13194:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_13178;

  corral_source_split_13178:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3035} $p10 := ldv_xmalloc(208);
    goto corral_source_split_13180;

  corral_source_split_13180:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_13181;

  corral_source_split_13181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3036} ldv_dummy_resourceless_instance_callback_7_14($u14, $u13, $u5, $p11);
    goto corral_source_split_13182;

  corral_source_split_13182:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_13183;

  corral_source_split_13183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3037} ldv_free($p12);
    goto corral_source_split_13184;

  corral_source_split_13184:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_13172;

  corral_source_split_13172:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3034} ldv_dummy_resourceless_instance_callback_7_17($u12, $u13);
    goto corral_source_split_13174;

  corral_source_split_13174:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3032} $i1 := ldv_undef_int();
    call {:si_unique_call 3033} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_13169;
}



const ldv_dummy_resourceless_instance_callback_7_17: ref;

axiom ldv_dummy_resourceless_instance_callback_7_17 == $sub.ref(0, 1095081);

procedure ldv_dummy_resourceless_instance_callback_7_17($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_7_17($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13220;

  corral_source_split_13220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3045} qxl_enc_prepare($p1);
    goto corral_source_split_13221;

  corral_source_split_13221:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_14: ref;

axiom ldv_dummy_resourceless_instance_callback_7_14 == $sub.ref(0, 1096113);

procedure ldv_dummy_resourceless_instance_callback_7_14($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_7_14($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13223;

  corral_source_split_13223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3046} qxl_enc_mode_set($p1, $p2, $p3);
    goto corral_source_split_13224;

  corral_source_split_13224:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_11: ref;

axiom ldv_dummy_resourceless_instance_callback_7_11 == $sub.ref(0, 1097145);

procedure ldv_dummy_resourceless_instance_callback_7_11($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_7_11($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_245: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13226;

  corral_source_split_13226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3047} vslice_dummy_var_245 := qxl_enc_mode_fixup($p1, $p2, $p3);
    goto corral_source_split_13227;

  corral_source_split_13227:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_8: ref;

axiom ldv_dummy_resourceless_instance_callback_7_8 == $sub.ref(0, 1098177);

procedure ldv_dummy_resourceless_instance_callback_7_8($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_7_8($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3048} {:cexpr "ldv_dummy_resourceless_instance_callback_7_8:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_13229;

  corral_source_split_13229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3049} qxl_enc_dpms($p1, $i2);
    goto corral_source_split_13230;

  corral_source_split_13230:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_7: ref;

axiom ldv_dummy_resourceless_instance_callback_7_7 == $sub.ref(0, 1099209);

procedure ldv_dummy_resourceless_instance_callback_7_7($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_7_7($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13232;

  corral_source_split_13232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3050} qxl_enc_destroy($p1);
    goto corral_source_split_13233;

  corral_source_split_13233:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_3: ref;

axiom ldv_dummy_resourceless_instance_callback_7_3 == $sub.ref(0, 1100241);

procedure ldv_dummy_resourceless_instance_callback_7_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.55, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_7_3($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13235;

  corral_source_split_13235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3051} qxl_enc_commit($p1);
    goto SeqInstr_2128, SeqInstr_2129;

  SeqInstr_2129:
    assume assertsPassed;
    goto SeqInstr_2130;

  SeqInstr_2130:
    goto corral_source_split_13236;

  corral_source_split_13236:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2128:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_11_18_18: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_11_18_18 == $sub.ref(0, 1101273);

procedure ldv_dispatch_register_dummy_resourceless_instance_11_18_18();
  free requires assertsPassed;
  modifies $CurrAddr, $M.114, $M.6, $M.32, $M.71, $M.42, $M.43, $M.40, $M.36, $M.35, assertsPassed, $M.65, $M.46, $M.52, $M.72, $M.38, $M.39, $M.37, $M.41, $M.44, $M.53, $M.75, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.54, $M.69, $M.70, $M.64;



implementation ldv_dispatch_register_dummy_resourceless_instance_11_18_18()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13238;

  corral_source_split_13238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3052} $p0 := ldv_xmalloc(4);
    goto corral_source_split_13239;

  corral_source_split_13239:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_13240;

  corral_source_split_13240:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13241;

  corral_source_split_13241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3053} ldv_struct_drm_fb_helper_funcs_dummy_resourceless_instance_8($p2);
    goto SeqInstr_2131, SeqInstr_2132;

  SeqInstr_2132:
    assume assertsPassed;
    goto SeqInstr_2133;

  SeqInstr_2133:
    goto corral_source_split_13242;

  corral_source_split_13242:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2131:
    assume !assertsPassed;
    return;
}



const ldv_struct_drm_fb_helper_funcs_dummy_resourceless_instance_8: ref;

axiom ldv_struct_drm_fb_helper_funcs_dummy_resourceless_instance_8 == $sub.ref(0, 1102305);

procedure ldv_struct_drm_fb_helper_funcs_dummy_resourceless_instance_8($p0: ref);
  free requires assertsPassed;
  modifies $M.114, $M.6, $M.32, $M.71, $M.42, $CurrAddr, $M.43, $M.40, $M.36, $M.35, assertsPassed, $M.65, $M.46, $M.52, $M.72, $M.38, $M.39, $M.37, $M.41, $M.44, $M.53, $M.75, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.54, $M.69, $M.70, $M.64;



implementation ldv_struct_drm_fb_helper_funcs_dummy_resourceless_instance_8($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13244;

  corral_source_split_13244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3054} $i1 := ldv_undef_int();
    call {:si_unique_call 3055} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_13245;

  corral_source_split_13245:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_13246;

  corral_source_split_13246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_13248;

  corral_source_split_13248:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i3, $i4 := ldv_struct_drm_fb_helper_funcs_dummy_resourceless_instance_8_loop_$bb4($i3, $i4);
    goto $bb4_last;

  SeqInstr_2135:
    assume assertsPassed;
    goto SeqInstr_2136;

  SeqInstr_2136:
    goto corral_source_split_13250;

  corral_source_split_13250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3057} $i3 := ldv_undef_int();
    call {:si_unique_call 3058} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_13251;

  corral_source_split_13251:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_13252;

  corral_source_split_13252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    goto corral_source_split_13254;

  corral_source_split_13254:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb5_dummy;

  SeqInstr_2134:
    assume !assertsPassed;
    return;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3056} ldv_dummy_resourceless_instance_callback_8_3($u17, $u18, $u19);
    goto SeqInstr_2134, SeqInstr_2135;
}



const ldv_dummy_resourceless_instance_callback_8_3: ref;

axiom ldv_dummy_resourceless_instance_callback_8_3 == $sub.ref(0, 1103337);

procedure ldv_dummy_resourceless_instance_callback_8_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.114, $M.6, $M.32, $M.71, $M.42, $CurrAddr, $M.43, $M.40, $M.36, $M.35, assertsPassed, $M.65, $M.46, $M.52, $M.72, $M.38, $M.39, $M.37, $M.41, $M.44, $M.53, $M.75, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.54, $M.69, $M.70, $M.64;



implementation ldv_dummy_resourceless_instance_callback_8_3($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_246: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13256;

  corral_source_split_13256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3059} vslice_dummy_var_246 := qxl_fb_find_or_create_single($p1, $p2);
    goto SeqInstr_2137, SeqInstr_2138;

  SeqInstr_2138:
    assume assertsPassed;
    goto SeqInstr_2139;

  SeqInstr_2139:
    goto corral_source_split_13257;

  corral_source_split_13257:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2137:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_12_18_19: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_12_18_19 == $sub.ref(0, 1104369);

procedure ldv_dispatch_register_dummy_resourceless_instance_12_18_19();
  free requires assertsPassed;
  modifies $M.78, $M.79, $M.80, $M.81, $CurrAddr, $M.6, $M.46, $M.73, $M.42, $M.38, $M.39, $M.43, $M.52, $M.35, $M.53, $M.49, $M.40, $M.44, assertsPassed, $M.41, $M.67, $M.68, $M.75, $M.37, $M.72, $M.74, $M.69, $M.70, $M.32, $M.71, $M.36, $M.64, $M.54, $M.55, $M.65;



implementation ldv_dispatch_register_dummy_resourceless_instance_12_18_19()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13259;

  corral_source_split_13259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3060} $p0 := ldv_xmalloc(4);
    goto corral_source_split_13260;

  corral_source_split_13260:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_13261;

  corral_source_split_13261:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13262;

  corral_source_split_13262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3061} ldv_struct_drm_framebuffer_funcs_dummy_resourceless_instance_9($p2);
    goto SeqInstr_2140, SeqInstr_2141;

  SeqInstr_2141:
    assume assertsPassed;
    goto SeqInstr_2142;

  SeqInstr_2142:
    goto corral_source_split_13263;

  corral_source_split_13263:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2140:
    assume !assertsPassed;
    return;
}



const ldv_struct_drm_framebuffer_funcs_dummy_resourceless_instance_9: ref;

axiom ldv_struct_drm_framebuffer_funcs_dummy_resourceless_instance_9 == $sub.ref(0, 1105401);

procedure ldv_struct_drm_framebuffer_funcs_dummy_resourceless_instance_9($p0: ref);
  free requires assertsPassed;
  modifies $M.78, $M.79, $M.80, $M.81, $M.6, $M.46, $M.73, $M.42, $M.38, $M.39, $CurrAddr, $M.43, $M.52, $M.35, $M.53, $M.49, $M.40, $M.44, assertsPassed, $M.41, $M.67, $M.68, $M.75, $M.37, $M.72, $M.74, $M.69, $M.70, $M.32, $M.71, $M.36, $M.64, $M.54, $M.55, $M.65;



implementation ldv_struct_drm_framebuffer_funcs_dummy_resourceless_instance_9($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13265;

  corral_source_split_13265:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4 := ldv_struct_drm_framebuffer_funcs_dummy_resourceless_instance_9_loop_$bb1($i1, $i2, $i3, $i4);
    goto $bb1_last;

  corral_source_split_13267:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_13268;

  corral_source_split_13268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_13274;

  corral_source_split_13274:
    assume {:verifier.code 0} true;
    $i4 := $i1;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 3);
    goto corral_source_split_13280;

  corral_source_split_13280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3066} ldv_stop();
    goto corral_source_split_13284;

  corral_source_split_13284:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i5 == 1;
    goto corral_source_split_13282;

  corral_source_split_13282:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_13276;

  corral_source_split_13276:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3065} ldv_dummy_resourceless_instance_callback_9_3($u24, $u21);
    goto SeqInstr_2146, SeqInstr_2147;

  SeqInstr_2147:
    assume assertsPassed;
    goto SeqInstr_2148;

  SeqInstr_2148:
    goto corral_source_split_13278;

  corral_source_split_13278:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  SeqInstr_2146:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_13270;

  corral_source_split_13270:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3064} ldv_dummy_resourceless_instance_callback_9_7($u20, $u21, $u22, $u2, $u2, $u23, $u2);
    goto SeqInstr_2143, SeqInstr_2144;

  SeqInstr_2144:
    assume assertsPassed;
    goto SeqInstr_2145;

  SeqInstr_2145:
    goto corral_source_split_13272;

  corral_source_split_13272:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_2143:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3062} $i1 := ldv_undef_int();
    call {:si_unique_call 3063} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_13267;
}



const ldv_dummy_resourceless_instance_callback_9_7: ref;

axiom ldv_dummy_resourceless_instance_callback_9_7 == $sub.ref(0, 1106433);

procedure ldv_dummy_resourceless_instance_callback_9_7($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $p5: ref, $i6: i32);
  free requires assertsPassed;
  modifies $M.78, $M.79, $M.80, $M.81, $M.6, $M.46, $M.73, $M.42, $M.38, $M.39, $CurrAddr, $M.43, $M.52, $M.53, $M.49, $M.40, $M.44, assertsPassed, $M.41, $M.67, $M.68, $M.75, $M.37, $M.72, $M.74, $M.69, $M.70, $M.32, $M.71, $M.36, $M.64, $M.35, $M.54, $M.55, $M.65;



implementation ldv_dummy_resourceless_instance_callback_9_7($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $p5: ref, $i6: i32)
{
  var vslice_dummy_var_247: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3067} {:cexpr "ldv_dummy_resourceless_instance_callback_9_7:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 3068} {:cexpr "ldv_dummy_resourceless_instance_callback_9_7:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 3069} {:cexpr "ldv_dummy_resourceless_instance_callback_9_7:arg:arg6"} boogie_si_record_i32($i6);
    goto corral_source_split_13286;

  corral_source_split_13286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3070} vslice_dummy_var_247 := qxl_framebuffer_surface_dirty($p1, $p2, $i3, $i4, $p5, $i6);
    goto SeqInstr_2149, SeqInstr_2150;

  SeqInstr_2150:
    assume assertsPassed;
    goto SeqInstr_2151;

  SeqInstr_2151:
    goto corral_source_split_13287;

  corral_source_split_13287:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2149:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_9_3: ref;

axiom ldv_dummy_resourceless_instance_callback_9_3 == $sub.ref(0, 1107465);

procedure ldv_dummy_resourceless_instance_callback_9_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.35, $M.6, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_9_3($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13289;

  corral_source_split_13289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3071} qxl_user_framebuffer_destroy($p1);
    goto SeqInstr_2152, SeqInstr_2153;

  SeqInstr_2153:
    assume assertsPassed;
    goto SeqInstr_2154;

  SeqInstr_2154:
    goto corral_source_split_13290;

  corral_source_split_13290:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2152:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_13_18_20: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_13_18_20 == $sub.ref(0, 1108497);

procedure ldv_dispatch_register_dummy_resourceless_instance_13_18_20();
  free requires assertsPassed;
  modifies $CurrAddr, $M.115, assertsPassed;



implementation ldv_dispatch_register_dummy_resourceless_instance_13_18_20()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13292;

  corral_source_split_13292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3072} $p0 := ldv_xmalloc(4);
    goto corral_source_split_13293;

  corral_source_split_13293:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_13294;

  corral_source_split_13294:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13295;

  corral_source_split_13295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3073} ldv_struct_drm_info_list_dummy_resourceless_instance_10($p2);
    goto SeqInstr_2155, SeqInstr_2156;

  SeqInstr_2156:
    assume assertsPassed;
    goto SeqInstr_2157;

  SeqInstr_2157:
    goto corral_source_split_13296;

  corral_source_split_13296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3074} $p3 := ldv_xmalloc(4);
    goto corral_source_split_13297;

  corral_source_split_13297:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_13298;

  corral_source_split_13298:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_13299;

  corral_source_split_13299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3075} ldv_struct_drm_info_list_dummy_resourceless_instance_11($p5);
    goto corral_source_split_13300;

  corral_source_split_13300:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2155:
    assume !assertsPassed;
    return;
}



const ldv_struct_drm_info_list_dummy_resourceless_instance_10: ref;

axiom ldv_struct_drm_info_list_dummy_resourceless_instance_10 == $sub.ref(0, 1109529);

procedure ldv_struct_drm_info_list_dummy_resourceless_instance_10($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr, $M.115, assertsPassed;



implementation ldv_struct_drm_info_list_dummy_resourceless_instance_10($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13302;

  corral_source_split_13302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3076} $i1 := ldv_undef_int();
    call {:si_unique_call 3077} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_13303;

  corral_source_split_13303:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_13304;

  corral_source_split_13304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_13306;

  corral_source_split_13306:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5 := ldv_struct_drm_info_list_dummy_resourceless_instance_10_loop_$bb4($p3, $i4, $i5);
    goto $bb4_last;

  corral_source_split_13308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3079} ldv_dummy_resourceless_instance_callback_10_3($u25, $u26, $p3);
    goto SeqInstr_2158, SeqInstr_2159;

  SeqInstr_2159:
    assume assertsPassed;
    goto SeqInstr_2160;

  SeqInstr_2160:
    goto corral_source_split_13309;

  corral_source_split_13309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3080} ldv_free($p3);
    goto corral_source_split_13310;

  corral_source_split_13310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3081} $i4 := ldv_undef_int();
    call {:si_unique_call 3082} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_13311;

  corral_source_split_13311:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_13312;

  corral_source_split_13312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_13314;

  corral_source_split_13314:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5_dummy;

  SeqInstr_2158:
    assume !assertsPassed;
    return;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3078} $p3 := ldv_xmalloc(1);
    goto corral_source_split_13308;
}



const ldv_struct_drm_info_list_dummy_resourceless_instance_11: ref;

axiom ldv_struct_drm_info_list_dummy_resourceless_instance_11 == $sub.ref(0, 1110561);

procedure ldv_struct_drm_info_list_dummy_resourceless_instance_11($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_struct_drm_info_list_dummy_resourceless_instance_11($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13316;

  corral_source_split_13316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3083} $i1 := ldv_undef_int();
    call {:si_unique_call 3084} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_13317;

  corral_source_split_13317:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_13318;

  corral_source_split_13318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_13320;

  corral_source_split_13320:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5 := ldv_struct_drm_info_list_dummy_resourceless_instance_11_loop_$bb4($p3, $i4, $i5);
    goto $bb4_last;

  corral_source_split_13322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3086} ldv_dummy_resourceless_instance_callback_11_3($u25, $u26, $p3);
    goto corral_source_split_13323;

  corral_source_split_13323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3087} ldv_free($p3);
    goto corral_source_split_13324;

  corral_source_split_13324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3088} $i4 := ldv_undef_int();
    call {:si_unique_call 3089} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_13325;

  corral_source_split_13325:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_13326;

  corral_source_split_13326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_13328;

  corral_source_split_13328:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5_dummy;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3085} $p3 := ldv_xmalloc(1);
    goto corral_source_split_13322;
}



const ldv_dummy_resourceless_instance_callback_11_3: ref;

axiom ldv_dummy_resourceless_instance_callback_11_3 == $sub.ref(0, 1111593);

procedure ldv_dummy_resourceless_instance_callback_11_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_11_3($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_248: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13330;

  corral_source_split_13330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3090} vslice_dummy_var_248 := qxl_debugfs_irq_received($p1, $p2);
    goto corral_source_split_13331;

  corral_source_split_13331:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_10_3: ref;

axiom ldv_dummy_resourceless_instance_callback_10_3 == $sub.ref(0, 1112625);

procedure ldv_dummy_resourceless_instance_callback_10_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.115, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_10_3($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_249: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13333;

  corral_source_split_13333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3091} vslice_dummy_var_249 := qxl_debugfs_buffers_info($p1, $p2);
    goto SeqInstr_2161, SeqInstr_2162;

  SeqInstr_2162:
    assume assertsPassed;
    goto SeqInstr_2163;

  SeqInstr_2163:
    goto corral_source_split_13334;

  corral_source_split_13334:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2161:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_14_18_21: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_14_18_21 == $sub.ref(0, 1113657);

procedure ldv_dispatch_register_dummy_resourceless_instance_14_18_21();
  free requires assertsPassed;
  modifies $CurrAddr, $M.6, $M.35, assertsPassed;



implementation ldv_dispatch_register_dummy_resourceless_instance_14_18_21()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13336;

  corral_source_split_13336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3092} $p0 := ldv_xmalloc(4);
    goto corral_source_split_13337;

  corral_source_split_13337:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_13338;

  corral_source_split_13338:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13339;

  corral_source_split_13339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3093} ldv_struct_drm_mode_config_funcs_dummy_resourceless_instance_12($p2);
    goto SeqInstr_2164, SeqInstr_2165;

  SeqInstr_2165:
    assume assertsPassed;
    goto SeqInstr_2166;

  SeqInstr_2166:
    goto corral_source_split_13340;

  corral_source_split_13340:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2164:
    assume !assertsPassed;
    return;
}



const ldv_struct_drm_mode_config_funcs_dummy_resourceless_instance_12: ref;

axiom ldv_struct_drm_mode_config_funcs_dummy_resourceless_instance_12 == $sub.ref(0, 1114689);

procedure ldv_struct_drm_mode_config_funcs_dummy_resourceless_instance_12($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.35, assertsPassed, $CurrAddr;



implementation ldv_struct_drm_mode_config_funcs_dummy_resourceless_instance_12($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13342;

  corral_source_split_13342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3094} $i1 := ldv_undef_int();
    call {:si_unique_call 3095} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_13343;

  corral_source_split_13343:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_13344;

  corral_source_split_13344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_13346;

  corral_source_split_13346:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i3, $i4 := ldv_struct_drm_mode_config_funcs_dummy_resourceless_instance_12_loop_$bb4($i3, $i4);
    goto $bb4_last;

  SeqInstr_2168:
    assume assertsPassed;
    goto SeqInstr_2169;

  SeqInstr_2169:
    goto corral_source_split_13348;

  corral_source_split_13348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3097} $i3 := ldv_undef_int();
    call {:si_unique_call 3098} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_13349;

  corral_source_split_13349:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_13350;

  corral_source_split_13350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    goto corral_source_split_13352;

  corral_source_split_13352:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb5_dummy;

  SeqInstr_2167:
    assume !assertsPassed;
    return;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3096} ldv_dummy_resourceless_instance_callback_12_3($u27, $u28, $u22, $u29);
    goto SeqInstr_2167, SeqInstr_2168;
}



const ldv_dummy_resourceless_instance_callback_12_3: ref;

axiom ldv_dummy_resourceless_instance_callback_12_3 == $sub.ref(0, 1115721);

procedure ldv_dummy_resourceless_instance_callback_12_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.6, $M.35, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_12_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_250: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13354;

  corral_source_split_13354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3099} vslice_dummy_var_250 := qxl_user_framebuffer_create($p1, $p2, $p3);
    goto SeqInstr_2170, SeqInstr_2171;

  SeqInstr_2171:
    assume assertsPassed;
    goto SeqInstr_2172;

  SeqInstr_2172:
    goto corral_source_split_13355;

  corral_source_split_13355:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2170:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_15_18_22: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_15_18_22 == $sub.ref(0, 1116753);

procedure ldv_dispatch_register_dummy_resourceless_instance_15_18_22();
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.42, $M.38, $M.39, $M.46, $M.73, $M.74, $M.52, $M.43, $M.40, $M.53, $M.49, $M.44, assertsPassed, $M.41, $M.67, $M.68, $M.75, $M.69, $M.70, $M.32, $M.37, $M.72, $M.71, $M.36, $M.64, $M.35, $M.54, $M.55, $M.65;



implementation ldv_dispatch_register_dummy_resourceless_instance_15_18_22()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13357;

  corral_source_split_13357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3100} $p0 := ldv_xmalloc(4);
    goto corral_source_split_13358;

  corral_source_split_13358:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_13359;

  corral_source_split_13359:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13360;

  corral_source_split_13360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3101} ldv_struct_fb_deferred_io_dummy_resourceless_instance_13($p2);
    goto SeqInstr_2173, SeqInstr_2174;

  SeqInstr_2174:
    assume assertsPassed;
    goto SeqInstr_2175;

  SeqInstr_2175:
    goto corral_source_split_13361;

  corral_source_split_13361:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2173:
    assume !assertsPassed;
    return;
}



const ldv_struct_fb_deferred_io_dummy_resourceless_instance_13: ref;

axiom ldv_struct_fb_deferred_io_dummy_resourceless_instance_13 == $sub.ref(0, 1117785);

procedure ldv_struct_fb_deferred_io_dummy_resourceless_instance_13($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.42, $M.38, $M.39, $M.46, $M.73, $M.74, $CurrAddr, $M.52, $M.43, $M.40, $M.53, $M.49, $M.44, assertsPassed, $M.41, $M.67, $M.68, $M.75, $M.69, $M.70, $M.32, $M.37, $M.72, $M.71, $M.36, $M.64, $M.35, $M.54, $M.55, $M.65;



implementation ldv_struct_fb_deferred_io_dummy_resourceless_instance_13($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13363;

  corral_source_split_13363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3102} $i1 := ldv_undef_int();
    call {:si_unique_call 3103} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_13364;

  corral_source_split_13364:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_13365;

  corral_source_split_13365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_13367;

  corral_source_split_13367:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i3, $i4 := ldv_struct_fb_deferred_io_dummy_resourceless_instance_13_loop_$bb4($i3, $i4);
    goto $bb4_last;

  SeqInstr_2177:
    assume assertsPassed;
    goto SeqInstr_2178;

  SeqInstr_2178:
    goto corral_source_split_13369;

  corral_source_split_13369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3105} $i3 := ldv_undef_int();
    call {:si_unique_call 3106} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_13370;

  corral_source_split_13370:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_13371;

  corral_source_split_13371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    goto corral_source_split_13373;

  corral_source_split_13373:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb5_dummy;

  SeqInstr_2176:
    assume !assertsPassed;
    return;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3104} ldv_dummy_resourceless_instance_callback_13_3($u30, $u31, $u32);
    goto SeqInstr_2176, SeqInstr_2177;
}



const ldv_dummy_resourceless_instance_callback_13_3: ref;

axiom ldv_dummy_resourceless_instance_callback_13_3 == $sub.ref(0, 1118817);

procedure ldv_dummy_resourceless_instance_callback_13_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $M.42, $M.38, $M.39, $M.46, $M.73, $M.74, $CurrAddr, $M.52, $M.43, $M.40, $M.53, $M.49, $M.44, assertsPassed, $M.41, $M.67, $M.68, $M.75, $M.69, $M.70, $M.32, $M.37, $M.72, $M.71, $M.36, $M.64, $M.35, $M.54, $M.55, $M.65;



implementation ldv_dummy_resourceless_instance_callback_13_3($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13375;

  corral_source_split_13375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3107} qxl_deferred_io($p1, $p2);
    goto SeqInstr_2179, SeqInstr_2180;

  SeqInstr_2180:
    assume assertsPassed;
    goto SeqInstr_2181;

  SeqInstr_2181:
    goto corral_source_split_13376;

  corral_source_split_13376:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2179:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_16_18_23: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_16_18_23 == $sub.ref(0, 1119849);

procedure ldv_dispatch_register_dummy_resourceless_instance_16_18_23();
  free requires assertsPassed;
  modifies $CurrAddr, $M.41, assertsPassed;



implementation ldv_dispatch_register_dummy_resourceless_instance_16_18_23()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13378;

  corral_source_split_13378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3108} $p0 := ldv_xmalloc(4);
    goto corral_source_split_13379;

  corral_source_split_13379:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_13380;

  corral_source_split_13380:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13381;

  corral_source_split_13381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3109} ldv_struct_fence_ops_dummy_resourceless_instance_14($p2);
    goto SeqInstr_2182, SeqInstr_2183;

  SeqInstr_2183:
    assume assertsPassed;
    goto SeqInstr_2184;

  SeqInstr_2184:
    goto corral_source_split_13382;

  corral_source_split_13382:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2182:
    assume !assertsPassed;
    return;
}



const ldv_struct_fence_ops_dummy_resourceless_instance_14: ref;

axiom ldv_struct_fence_ops_dummy_resourceless_instance_14 == $sub.ref(0, 1120881);

procedure ldv_struct_fence_ops_dummy_resourceless_instance_14($p0: ref);
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation ldv_struct_fence_ops_dummy_resourceless_instance_14($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13384;

  corral_source_split_13384:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $i6, $i8 := ldv_struct_fence_ops_dummy_resourceless_instance_14_loop_$bb1($i1, $i2, $i3, $i4, $i5, $i6, $i8);
    goto $bb1_last;

  corral_source_split_13386:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_13387;

  corral_source_split_13387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_13394;

  corral_source_split_13394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_13400;

  corral_source_split_13400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 4);
    goto corral_source_split_13406;

  corral_source_split_13406:
    assume {:verifier.code 0} true;
    $i6 := $i1;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 5);
    goto corral_source_split_13412;

  corral_source_split_13412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3116} ldv_stop();
    goto corral_source_split_13416;

  corral_source_split_13416:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    return;

  $bb18:
    assume $i7 == 1;
    goto corral_source_split_13414;

  corral_source_split_13414:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb14:
    assume $i5 == 1;
    goto corral_source_split_13408;

  corral_source_split_13408:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3115} ldv_dummy_resourceless_instance_callback_14_3($u37, $u35);
    goto corral_source_split_13410;

  corral_source_split_13410:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb23_dummy;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_13402;

  corral_source_split_13402:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3114} ldv_dummy_resourceless_instance_callback_14_7($u36, $u35);
    goto corral_source_split_13404;

  corral_source_split_13404:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_13396;

  corral_source_split_13396:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3113} ldv_dummy_resourceless_instance_callback_14_8($u36, $u35);
    goto corral_source_split_13398;

  corral_source_split_13398:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_13389;

  corral_source_split_13389:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($u33);
    goto corral_source_split_13391;

  corral_source_split_13391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3112} ldv_dummy_resourceless_instance_callback_14_9($u34, $u35, $i8, $u1);
    goto SeqInstr_2185, SeqInstr_2186;

  SeqInstr_2186:
    assume assertsPassed;
    goto SeqInstr_2187;

  SeqInstr_2187:
    goto corral_source_split_13392;

  corral_source_split_13392:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_2185:
    assume !assertsPassed;
    return;

  $bb23_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3110} $i1 := ldv_undef_int();
    call {:si_unique_call 3111} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_13386;
}



const ldv_dummy_resourceless_instance_callback_14_9: ref;

axiom ldv_dummy_resourceless_instance_callback_14_9 == $sub.ref(0, 1121913);

procedure ldv_dummy_resourceless_instance_callback_14_9($p0: ref, $p1: ref, $i2: i1, $i3: i64);
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_14_9($p0: ref, $p1: ref, $i2: i1, $i3: i64)
{
  var $i4: i8;
  var $i5: i1;
  var vslice_dummy_var_251: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i2);
    call {:si_unique_call 3117} {:cexpr "ldv_dummy_resourceless_instance_callback_14_9:arg:arg2"} boogie_si_record_i1($i2);
    call {:si_unique_call 3118} {:cexpr "ldv_dummy_resourceless_instance_callback_14_9:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_13418;

  corral_source_split_13418:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_13419;

  corral_source_split_13419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3119} vslice_dummy_var_251 := qxl_fence_wait($p1, $i5, $i3);
    goto SeqInstr_2188, SeqInstr_2189;

  SeqInstr_2189:
    assume assertsPassed;
    goto SeqInstr_2190;

  SeqInstr_2190:
    goto corral_source_split_13420;

  corral_source_split_13420:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2188:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_14_8: ref;

axiom ldv_dummy_resourceless_instance_callback_14_8 == $sub.ref(0, 1122945);

procedure ldv_dummy_resourceless_instance_callback_14_8($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_14_8($p0: ref, $p1: ref)
{
  var vslice_dummy_var_252: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13422;

  corral_source_split_13422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3120} vslice_dummy_var_252 := qxl_get_timeline_name($p1);
    goto corral_source_split_13423;

  corral_source_split_13423:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_14_7: ref;

axiom ldv_dummy_resourceless_instance_callback_14_7 == $sub.ref(0, 1123977);

procedure ldv_dummy_resourceless_instance_callback_14_7($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_14_7($p0: ref, $p1: ref)
{
  var vslice_dummy_var_253: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13425;

  corral_source_split_13425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3121} vslice_dummy_var_253 := qxl_get_driver_name($p1);
    goto corral_source_split_13426;

  corral_source_split_13426:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_14_3: ref;

axiom ldv_dummy_resourceless_instance_callback_14_3 == $sub.ref(0, 1125009);

procedure ldv_dummy_resourceless_instance_callback_14_3($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_14_3($p0: ref, $p1: ref)
{
  var vslice_dummy_var_254: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13428;

  corral_source_split_13428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3122} vslice_dummy_var_254 := qxl_nop_signaling($p1);
    goto corral_source_split_13429;

  corral_source_split_13429:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_17_18_24: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_17_18_24 == $sub.ref(0, 1126041);

procedure ldv_dispatch_register_dummy_resourceless_instance_17_18_24();
  free requires assertsPassed;
  modifies $M.6, $M.107, $M.108, $M.109, $M.110, $M.111, $CurrAddr, $M.112, $M.37, assertsPassed, $M.38, $M.39, $M.46, $M.44, $M.42, $M.54, $M.40, $M.55, $M.52, $M.53, $M.49, $M.43, $M.41, $M.67, $M.68, $M.69, $M.70, $M.32, $M.72, $M.73, $M.74, $M.71, $M.64, $M.36, $M.75, $M.35, $M.65;



implementation ldv_dispatch_register_dummy_resourceless_instance_17_18_24()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13431;

  corral_source_split_13431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3123} $p0 := ldv_xmalloc(4);
    goto corral_source_split_13432;

  corral_source_split_13432:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_13433;

  corral_source_split_13433:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13434;

  corral_source_split_13434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3124} ldv_struct_ttm_bo_driver_dummy_resourceless_instance_15($p2);
    goto SeqInstr_2191, SeqInstr_2192;

  SeqInstr_2192:
    assume assertsPassed;
    goto SeqInstr_2193;

  SeqInstr_2193:
    goto corral_source_split_13435;

  corral_source_split_13435:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2191:
    assume !assertsPassed;
    return;
}



const ldv_struct_ttm_bo_driver_dummy_resourceless_instance_15: ref;

axiom ldv_struct_ttm_bo_driver_dummy_resourceless_instance_15 == $sub.ref(0, 1127073);

procedure ldv_struct_ttm_bo_driver_dummy_resourceless_instance_15($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.37, $CurrAddr, assertsPassed, $M.38, $M.39, $M.46, $M.44, $M.42, $M.54, $M.40, $M.55, $M.52, $M.53, $M.49, $M.43, $M.41, $M.67, $M.68, $M.69, $M.70, $M.32, $M.72, $M.73, $M.74, $M.71, $M.64, $M.36, $M.75, $M.35, $M.65;



implementation ldv_struct_ttm_bo_driver_dummy_resourceless_instance_15($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13437;

  corral_source_split_13437:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $i20 := ldv_struct_ttm_bo_driver_dummy_resourceless_instance_15_loop_$bb1($i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $i20);
    goto $bb1_last;

  corral_source_split_13439:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_13440;

  corral_source_split_13440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_13446;

  corral_source_split_13446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_13452;

  corral_source_split_13452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 4);
    goto corral_source_split_13458;

  corral_source_split_13458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 5);
    goto corral_source_split_13464;

  corral_source_split_13464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 6);
    goto corral_source_split_13470;

  corral_source_split_13470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 7);
    goto corral_source_split_13476;

  corral_source_split_13476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i1, 8);
    goto corral_source_split_13485;

  corral_source_split_13485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i1, 9);
    goto corral_source_split_13491;

  corral_source_split_13491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i1, 10);
    goto corral_source_split_13497;

  corral_source_split_13497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i1, 11);
    goto corral_source_split_13503;

  corral_source_split_13503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i1, 12);
    goto corral_source_split_13509;

  corral_source_split_13509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i1, 13);
    goto corral_source_split_13515;

  corral_source_split_13515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i1, 14);
    goto corral_source_split_13521;

  corral_source_split_13521:
    assume {:verifier.code 0} true;
    $i16 := $i1;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 15);
    goto corral_source_split_13527;

  corral_source_split_13527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3141} ldv_stop();
    goto corral_source_split_13531;

  corral_source_split_13531:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    return;

  $bb58:
    assume $i17 == 1;
    goto corral_source_split_13529;

  corral_source_split_13529:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb54:
    assume $i15 == 1;
    goto corral_source_split_13523;

  corral_source_split_13523:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3140} ldv_dummy_resourceless_instance_callback_15_3($u57, $u42, $u48);
    goto corral_source_split_13525;

  corral_source_split_13525:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb63_dummy;

  $bb50:
    assume $i14 == 1;
    goto corral_source_split_13517;

  corral_source_split_13517:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3139} ldv_dummy_resourceless_instance_callback_15_7($u43, $u42);
    goto corral_source_split_13519;

  corral_source_split_13519:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb46:
    assume $i13 == 1;
    goto corral_source_split_13511;

  corral_source_split_13511:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3138} ldv_dummy_resourceless_instance_callback_15_8($u55, $u39, $u56);
    goto corral_source_split_13513;

  corral_source_split_13513:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb42:
    assume $i12 == 1;
    goto corral_source_split_13505;

  corral_source_split_13505:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3137} ldv_dummy_resourceless_instance_callback_15_9($u53, $u45, $u2, $u54);
    goto corral_source_split_13507;

  corral_source_split_13507:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb38:
    assume $i11 == 1;
    goto corral_source_split_13499;

  corral_source_split_13499:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3136} ldv_dummy_resourceless_instance_callback_15_12($u52, $u45, $u2);
    goto corral_source_split_13501;

  corral_source_split_13501:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb34:
    assume $i10 == 1;
    goto corral_source_split_13493;

  corral_source_split_13493:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3135} ldv_dummy_resourceless_instance_callback_15_15($u51, $u45, $u48);
    goto corral_source_split_13495;

  corral_source_split_13495:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb30:
    assume $i9 == 1;
    goto corral_source_split_13487;

  corral_source_split_13487:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3134} ldv_dummy_resourceless_instance_callback_15_16($u50, $u45, $u48);
    goto corral_source_split_13489;

  corral_source_split_13489:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb26:
    assume $i8 == 1;
    goto corral_source_split_13478;

  corral_source_split_13478:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($u33);
    goto corral_source_split_13480;

  corral_source_split_13480:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($u33);
    goto corral_source_split_13481;

  corral_source_split_13481:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($u33);
    goto corral_source_split_13482;

  corral_source_split_13482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3133} ldv_dummy_resourceless_instance_callback_15_17($u49, $u39, $i18, $i19, $i20, $u48);
    goto corral_source_split_13483;

  corral_source_split_13483:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb22:
    assume $i7 == 1;
    goto corral_source_split_13472;

  corral_source_split_13472:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3132} ldv_dummy_resourceless_instance_callback_15_20($u47, $u39, $u48);
    goto SeqInstr_2197, SeqInstr_2198;

  SeqInstr_2198:
    assume assertsPassed;
    goto SeqInstr_2199;

  SeqInstr_2199:
    goto corral_source_split_13474;

  corral_source_split_13474:
    assume {:verifier.code 0} true;
    goto $bb63;

  SeqInstr_2197:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i6 == 1;
    goto corral_source_split_13466;

  corral_source_split_13466:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3131} ldv_dummy_resourceless_instance_callback_15_21($u44, $u45, $u1, $u2, $u46);
    goto SeqInstr_2194, SeqInstr_2195;

  SeqInstr_2195:
    assume assertsPassed;
    goto SeqInstr_2196;

  SeqInstr_2196:
    goto corral_source_split_13468;

  corral_source_split_13468:
    assume {:verifier.code 0} true;
    goto $bb63;

  SeqInstr_2194:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i5 == 1;
    goto corral_source_split_13460;

  corral_source_split_13460:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3130} ldv_dummy_resourceless_instance_callback_15_24($u41, $u42);
    goto corral_source_split_13462;

  corral_source_split_13462:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_13454;

  corral_source_split_13454:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3129} ldv_dummy_resourceless_instance_callback_15_25($u43, $u42);
    goto corral_source_split_13456;

  corral_source_split_13456:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_13448;

  corral_source_split_13448:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3128} ldv_dummy_resourceless_instance_callback_15_26($u41, $u42);
    goto corral_source_split_13450;

  corral_source_split_13450:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_13442;

  corral_source_split_13442:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3127} ldv_dummy_resourceless_instance_callback_15_27($u38, $u39, $u40);
    goto corral_source_split_13444;

  corral_source_split_13444:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3125} $i1 := ldv_undef_int();
    call {:si_unique_call 3126} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_13439;
}



const ldv_dummy_resourceless_instance_callback_15_27: ref;

axiom ldv_dummy_resourceless_instance_callback_15_27 == $sub.ref(0, 1128105);

procedure ldv_dummy_resourceless_instance_callback_15_27($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_15_27($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_255: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13533;

  corral_source_split_13533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3142} vslice_dummy_var_255 := qxl_verify_access($p1, $p2);
    goto corral_source_split_13534;

  corral_source_split_13534:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_26: ref;

axiom ldv_dummy_resourceless_instance_callback_15_26 == $sub.ref(0, 1129137);

procedure ldv_dummy_resourceless_instance_callback_15_26($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_15_26($p0: ref, $p1: ref)
{
  var vslice_dummy_var_256: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13536;

  corral_source_split_13536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3143} vslice_dummy_var_256 := qxl_ttm_backend_unbind($p1);
    goto corral_source_split_13537;

  corral_source_split_13537:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_25: ref;

axiom ldv_dummy_resourceless_instance_callback_15_25 == $sub.ref(0, 1130169);

procedure ldv_dummy_resourceless_instance_callback_15_25($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_15_25($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13539;

  corral_source_split_13539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3144} qxl_ttm_tt_unpopulate($p1);
    goto corral_source_split_13540;

  corral_source_split_13540:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_24: ref;

axiom ldv_dummy_resourceless_instance_callback_15_24 == $sub.ref(0, 1131201);

procedure ldv_dummy_resourceless_instance_callback_15_24($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_15_24($p0: ref, $p1: ref)
{
  var vslice_dummy_var_257: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13542;

  corral_source_split_13542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3145} vslice_dummy_var_257 := qxl_ttm_tt_populate($p1);
    goto corral_source_split_13543;

  corral_source_split_13543:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_21: ref;

axiom ldv_dummy_resourceless_instance_callback_15_21 == $sub.ref(0, 1132233);

procedure ldv_dummy_resourceless_instance_callback_15_21($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_15_21($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref)
{
  var vslice_dummy_var_258: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3146} {:cexpr "ldv_dummy_resourceless_instance_callback_15_21:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 3147} {:cexpr "ldv_dummy_resourceless_instance_callback_15_21:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_13545;

  corral_source_split_13545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3148} vslice_dummy_var_258 := qxl_ttm_tt_create($p1, $i2, $i3, $p4);
    goto SeqInstr_2200, SeqInstr_2201;

  SeqInstr_2201:
    assume assertsPassed;
    goto SeqInstr_2202;

  SeqInstr_2202:
    goto corral_source_split_13546;

  corral_source_split_13546:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2200:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_20: ref;

axiom ldv_dummy_resourceless_instance_callback_15_20 == $sub.ref(0, 1133265);

procedure ldv_dummy_resourceless_instance_callback_15_20($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.37, $M.6, assertsPassed, $M.38, $M.39, $CurrAddr, $M.46, $M.44, $M.42, $M.54, $M.40, $M.55, $M.52, $M.53, $M.49, $M.43, $M.41, $M.67, $M.68, $M.69, $M.70, $M.32, $M.72, $M.73, $M.74, $M.71, $M.64, $M.36, $M.75, $M.35, $M.65;



implementation ldv_dummy_resourceless_instance_callback_15_20($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13548;

  corral_source_split_13548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3149} qxl_bo_move_notify($p1, $p2);
    goto SeqInstr_2203, SeqInstr_2204;

  SeqInstr_2204:
    assume assertsPassed;
    goto SeqInstr_2205;

  SeqInstr_2205:
    goto corral_source_split_13549;

  corral_source_split_13549:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2203:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_17: ref;

axiom ldv_dummy_resourceless_instance_callback_15_17 == $sub.ref(0, 1134297);

procedure ldv_dummy_resourceless_instance_callback_15_17($p0: ref, $p1: ref, $i2: i1, $i3: i1, $i4: i1, $p5: ref);
  free requires assertsPassed;
  modifies $M.112;



implementation ldv_dummy_resourceless_instance_callback_15_17($p0: ref, $p1: ref, $i2: i1, $i3: i1, $i4: i1, $p5: ref)
{
  var $i6: i8;
  var $i7: i8;
  var $i8: i8;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var vslice_dummy_var_259: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i2);
    call {:si_unique_call 3150} {:cexpr "ldv_dummy_resourceless_instance_callback_15_17:arg:arg2"} boogie_si_record_i1($i2);
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i3);
    call {:si_unique_call 3151} {:cexpr "ldv_dummy_resourceless_instance_callback_15_17:arg:arg3"} boogie_si_record_i1($i3);
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i4);
    call {:si_unique_call 3152} {:cexpr "ldv_dummy_resourceless_instance_callback_15_17:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_13551;

  corral_source_split_13551:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i6);
    goto corral_source_split_13552;

  corral_source_split_13552:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i7);
    goto corral_source_split_13553;

  corral_source_split_13553:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i8);
    goto corral_source_split_13554;

  corral_source_split_13554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3153} vslice_dummy_var_259 := qxl_bo_move($p1, $i9, $i10, $i11, $p5);
    goto corral_source_split_13555;

  corral_source_split_13555:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_16: ref;

axiom ldv_dummy_resourceless_instance_callback_15_16 == $sub.ref(0, 1135329);

procedure ldv_dummy_resourceless_instance_callback_15_16($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation ldv_dummy_resourceless_instance_callback_15_16($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_260: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13557;

  corral_source_split_13557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3154} vslice_dummy_var_260 := qxl_ttm_io_mem_reserve($p1, $p2);
    goto corral_source_split_13558;

  corral_source_split_13558:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_15: ref;

axiom ldv_dummy_resourceless_instance_callback_15_15 == $sub.ref(0, 1136361);

procedure ldv_dummy_resourceless_instance_callback_15_15($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_15_15($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13560;

  corral_source_split_13560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3155} qxl_ttm_io_mem_free($p1, $p2);
    goto corral_source_split_13561;

  corral_source_split_13561:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_12: ref;

axiom ldv_dummy_resourceless_instance_callback_15_12 == $sub.ref(0, 1137393);

procedure ldv_dummy_resourceless_instance_callback_15_12($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_15_12($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_261: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3156} {:cexpr "ldv_dummy_resourceless_instance_callback_15_12:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_13563;

  corral_source_split_13563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3157} vslice_dummy_var_261 := qxl_invalidate_caches($p1, $i2);
    goto corral_source_split_13564;

  corral_source_split_13564:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_9: ref;

axiom ldv_dummy_resourceless_instance_callback_15_9 == $sub.ref(0, 1138425);

procedure ldv_dummy_resourceless_instance_callback_15_9($p0: ref, $p1: ref, $i2: i32, $p3: ref);
  free requires assertsPassed;
  modifies $M.107, $M.108, $M.109, $M.110, $M.111;



implementation ldv_dummy_resourceless_instance_callback_15_9($p0: ref, $p1: ref, $i2: i32, $p3: ref)
{
  var vslice_dummy_var_262: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3158} {:cexpr "ldv_dummy_resourceless_instance_callback_15_9:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_13566;

  corral_source_split_13566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3159} vslice_dummy_var_262 := qxl_init_mem_type($p1, $i2, $p3);
    goto corral_source_split_13567;

  corral_source_split_13567:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_8: ref;

axiom ldv_dummy_resourceless_instance_callback_15_8 == $sub.ref(0, 1139457);

procedure ldv_dummy_resourceless_instance_callback_15_8($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_15_8($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13569;

  corral_source_split_13569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3160} qxl_evict_flags($p1, $p2);
    goto corral_source_split_13570;

  corral_source_split_13570:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_7: ref;

axiom ldv_dummy_resourceless_instance_callback_15_7 == $sub.ref(0, 1140489);

procedure ldv_dummy_resourceless_instance_callback_15_7($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_15_7($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13572;

  corral_source_split_13572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3161} qxl_ttm_backend_destroy($p1);
    goto corral_source_split_13573;

  corral_source_split_13573:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_3: ref;

axiom ldv_dummy_resourceless_instance_callback_15_3 == $sub.ref(0, 1141521);

procedure ldv_dummy_resourceless_instance_callback_15_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation ldv_dummy_resourceless_instance_callback_15_3($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_263: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13575;

  corral_source_split_13575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3162} vslice_dummy_var_263 := qxl_ttm_backend_bind($p1, $p2);
    goto corral_source_split_13576;

  corral_source_split_13576:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_5_18_25: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_5_18_25 == $sub.ref(0, 1142553);

procedure ldv_dispatch_register_dummy_resourceless_instance_5_18_25();
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation ldv_dispatch_register_dummy_resourceless_instance_5_18_25()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13578;

  corral_source_split_13578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3163} $p0 := ldv_xmalloc(4);
    goto corral_source_split_13579;

  corral_source_split_13579:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_13580;

  corral_source_split_13580:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13581;

  corral_source_split_13581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3164} ldv_struct_drm_connector_funcs_dummy_resourceless_instance_4($p2);
    goto corral_source_split_13582;

  corral_source_split_13582:
    assume {:verifier.code 0} true;
    return;
}



const ldv_struct_drm_connector_funcs_dummy_resourceless_instance_4: ref;

axiom ldv_struct_drm_connector_funcs_dummy_resourceless_instance_4 == $sub.ref(0, 1143585);

procedure ldv_struct_drm_connector_funcs_dummy_resourceless_instance_4($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation ldv_struct_drm_connector_funcs_dummy_resourceless_instance_4($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13584;

  corral_source_split_13584:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11 := ldv_struct_drm_connector_funcs_dummy_resourceless_instance_4_loop_$bb1($i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11);
    goto $bb1_last;

  corral_source_split_13586:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_13587;

  corral_source_split_13587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_13593;

  corral_source_split_13593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_13599;

  corral_source_split_13599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 4);
    goto corral_source_split_13605;

  corral_source_split_13605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 5);
    goto corral_source_split_13611;

  corral_source_split_13611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 6);
    goto corral_source_split_13617;

  corral_source_split_13617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 7);
    goto corral_source_split_13624;

  corral_source_split_13624:
    assume {:verifier.code 0} true;
    $i9 := $i1;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 8);
    goto corral_source_split_13630;

  corral_source_split_13630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3174} ldv_stop();
    goto corral_source_split_13634;

  corral_source_split_13634:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb30:
    assume $i10 == 1;
    goto corral_source_split_13632;

  corral_source_split_13632:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb26:
    assume $i8 == 1;
    goto corral_source_split_13626;

  corral_source_split_13626:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3173} ldv_dummy_resourceless_instance_callback_4_3($u60, $u3);
    goto corral_source_split_13628;

  corral_source_split_13628:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb35_dummy;

  $bb22:
    assume $i7 == 1;
    goto corral_source_split_13619;

  corral_source_split_13619:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($u33);
    goto corral_source_split_13621;

  corral_source_split_13621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3172} ldv_dummy_resourceless_instance_callback_4_7($u63, $u3, $i11);
    goto corral_source_split_13622;

  corral_source_split_13622:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb18:
    assume $i6 == 1;
    goto corral_source_split_13613;

  corral_source_split_13613:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3171} ldv_dummy_resourceless_instance_callback_4_10($u62, $u3, $u2);
    goto corral_source_split_13615;

  corral_source_split_13615:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb14:
    assume $i5 == 1;
    goto corral_source_split_13607;

  corral_source_split_13607:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3170} ldv_dummy_resourceless_instance_callback_4_13($u61, $u3, $u2, $u2);
    goto corral_source_split_13609;

  corral_source_split_13609:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_13601;

  corral_source_split_13601:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3169} ldv_dummy_resourceless_instance_callback_4_16($u60, $u3);
    goto corral_source_split_13603;

  corral_source_split_13603:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_13595;

  corral_source_split_13595:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3168} ldv_dummy_resourceless_instance_callback_4_17($u60, $u3);
    goto corral_source_split_13597;

  corral_source_split_13597:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_13589;

  corral_source_split_13589:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3167} ldv_dummy_resourceless_instance_callback_4_18($u58, $u3, $u59, $u1);
    goto corral_source_split_13591;

  corral_source_split_13591:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3165} $i1 := ldv_undef_int();
    call {:si_unique_call 3166} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_13586;
}



const ldv_dummy_resourceless_instance_callback_4_18: ref;

axiom ldv_dummy_resourceless_instance_callback_4_18 == $sub.ref(0, 1144617);

procedure ldv_dummy_resourceless_instance_callback_4_18($p0: ref, $p1: ref, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_4_18($p0: ref, $p1: ref, $p2: ref, $i3: i64)
{
  var vslice_dummy_var_264: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3175} {:cexpr "ldv_dummy_resourceless_instance_callback_4_18:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_13636;

  corral_source_split_13636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3176} vslice_dummy_var_264 := qxl_conn_set_property($p1, $p2, $i3);
    goto corral_source_split_13637;

  corral_source_split_13637:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_4_17: ref;

axiom ldv_dummy_resourceless_instance_callback_4_17 == $sub.ref(0, 1145649);

procedure ldv_dummy_resourceless_instance_callback_4_17($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_4_17($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13639;

  corral_source_split_13639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3177} qxl_conn_save($p1);
    goto corral_source_split_13640;

  corral_source_split_13640:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_4_16: ref;

axiom ldv_dummy_resourceless_instance_callback_4_16 == $sub.ref(0, 1146681);

procedure ldv_dummy_resourceless_instance_callback_4_16($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_4_16($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13642;

  corral_source_split_13642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3178} qxl_conn_restore($p1);
    goto corral_source_split_13643;

  corral_source_split_13643:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_4_13: ref;

axiom ldv_dummy_resourceless_instance_callback_4_13 == $sub.ref(0, 1147713);

procedure ldv_dummy_resourceless_instance_callback_4_13($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_4_13($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var vslice_dummy_var_265: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3179} {:cexpr "ldv_dummy_resourceless_instance_callback_4_13:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 3180} {:cexpr "ldv_dummy_resourceless_instance_callback_4_13:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_13645;

  corral_source_split_13645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3181} vslice_dummy_var_265 := drm_helper_probe_single_connector_modes_nomerge($p1, $i2, $i3);
    goto corral_source_split_13646;

  corral_source_split_13646:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_4_10: ref;

axiom ldv_dummy_resourceless_instance_callback_4_10 == $sub.ref(0, 1148745);

procedure ldv_dummy_resourceless_instance_callback_4_10($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_4_10($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3182} {:cexpr "ldv_dummy_resourceless_instance_callback_4_10:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_13648;

  corral_source_split_13648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3183} drm_helper_connector_dpms($p1, $i2);
    goto corral_source_split_13649;

  corral_source_split_13649:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_4_7: ref;

axiom ldv_dummy_resourceless_instance_callback_4_7 == $sub.ref(0, 1149777);

procedure ldv_dummy_resourceless_instance_callback_4_7($p0: ref, $p1: ref, $i2: i1);
  free requires assertsPassed;
  modifies $M.6;



implementation ldv_dummy_resourceless_instance_callback_4_7($p0: ref, $p1: ref, $i2: i1)
{
  var $i3: i8;
  var $i4: i1;
  var vslice_dummy_var_266: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 3184} {:cexpr "ldv_dummy_resourceless_instance_callback_4_7:arg:arg2"} boogie_si_record_i1($i2);
    goto corral_source_split_13651;

  corral_source_split_13651:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_13652;

  corral_source_split_13652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3185} vslice_dummy_var_266 := qxl_conn_detect($p1, $i4);
    goto corral_source_split_13653;

  corral_source_split_13653:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_4_3: ref;

axiom ldv_dummy_resourceless_instance_callback_4_3 == $sub.ref(0, 1150809);

procedure ldv_dummy_resourceless_instance_callback_4_3($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_4_3($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13655;

  corral_source_split_13655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3186} qxl_conn_destroy($p1);
    goto corral_source_split_13656;

  corral_source_split_13656:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_9_18_26: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_9_18_26 == $sub.ref(0, 1151841);

procedure ldv_dispatch_register_dummy_resourceless_instance_9_18_26();
  free requires assertsPassed;
  modifies $M.79, $M.78, $M.80, $M.81, $M.91, $M.6, $M.46, $M.73, $M.42, $M.38, $M.39, $M.71, $M.87, $M.88, $CurrAddr, $M.43, $M.52, $M.35, $M.53, $M.49, $M.40, $M.44, assertsPassed, $M.93, $M.41, $M.67, $M.68, $M.75, $M.55, $M.37, $M.72, $M.74, $M.69, $M.70, $M.32, $M.65, $M.36, $M.64, $M.54;



implementation ldv_dispatch_register_dummy_resourceless_instance_9_18_26()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13658;

  corral_source_split_13658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3187} $p0 := ldv_xmalloc(4);
    goto corral_source_split_13659;

  corral_source_split_13659:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_13660;

  corral_source_split_13660:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13661;

  corral_source_split_13661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3188} ldv_struct_drm_crtc_helper_funcs_dummy_resourceless_instance_6($p2);
    goto SeqInstr_2206, SeqInstr_2207;

  SeqInstr_2207:
    assume assertsPassed;
    goto SeqInstr_2208;

  SeqInstr_2208:
    goto corral_source_split_13662;

  corral_source_split_13662:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2206:
    assume !assertsPassed;
    return;
}



const ldv_struct_drm_crtc_helper_funcs_dummy_resourceless_instance_6: ref;

axiom ldv_struct_drm_crtc_helper_funcs_dummy_resourceless_instance_6 == $sub.ref(0, 1152873);

procedure ldv_struct_drm_crtc_helper_funcs_dummy_resourceless_instance_6($p0: ref);
  free requires assertsPassed;
  modifies $M.79, $M.78, $M.80, $M.81, $M.91, $M.6, $M.46, $M.73, $M.42, $M.38, $M.39, $M.71, $M.87, $M.88, $M.43, $M.52, $M.35, $CurrAddr, $M.53, $M.49, $M.40, $M.44, assertsPassed, $M.93, $M.41, $M.67, $M.68, $M.75, $M.55, $M.37, $M.72, $M.74, $M.69, $M.70, $M.32, $M.65, $M.36, $M.64, $M.54;



implementation ldv_struct_drm_crtc_helper_funcs_dummy_resourceless_instance_6($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13664;

  corral_source_split_13664:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $p15, $p16, $p17, $p18, $p19, $p20 := ldv_struct_drm_crtc_helper_funcs_dummy_resourceless_instance_6_loop_$bb1($i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $p15, $p16, $p17, $p18, $p19, $p20);
    goto $bb1_last;

  corral_source_split_13666:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_13667;

  corral_source_split_13667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_13673;

  corral_source_split_13673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_13679;

  corral_source_split_13679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 4);
    goto corral_source_split_13685;

  corral_source_split_13685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 5);
    goto corral_source_split_13695;

  corral_source_split_13695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 6);
    goto corral_source_split_13705;

  corral_source_split_13705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 7);
    goto corral_source_split_13711;

  corral_source_split_13711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i1, 8);
    goto corral_source_split_13717;

  corral_source_split_13717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i1, 9);
    goto corral_source_split_13723;

  corral_source_split_13723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i1, 10);
    goto corral_source_split_13729;

  corral_source_split_13729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i1, 11);
    goto corral_source_split_13735;

  corral_source_split_13735:
    assume {:verifier.code 0} true;
    $i13 := $i1;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 12);
    goto corral_source_split_13741;

  corral_source_split_13741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3206} ldv_stop();
    goto corral_source_split_13745;

  corral_source_split_13745:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    return;

  $bb46:
    assume $i14 == 1;
    goto corral_source_split_13743;

  corral_source_split_13743:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb42:
    assume $i12 == 1;
    goto corral_source_split_13737;

  corral_source_split_13737:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3205} ldv_dummy_resourceless_instance_callback_6_3($u66, $u67);
    goto corral_source_split_13739;

  corral_source_split_13739:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb51_dummy;

  $bb38:
    assume $i11 == 1;
    goto corral_source_split_13731;

  corral_source_split_13731:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3204} ldv_dummy_resourceless_instance_callback_6_7($u74, $u67, $u2, $u2);
    goto SeqInstr_2221, SeqInstr_2222;

  SeqInstr_2222:
    assume assertsPassed;
    goto SeqInstr_2223;

  SeqInstr_2223:
    goto corral_source_split_13733;

  corral_source_split_13733:
    assume {:verifier.code 0} true;
    goto $bb51;

  SeqInstr_2221:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i10 == 1;
    goto corral_source_split_13725;

  corral_source_split_13725:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3203} ldv_dummy_resourceless_instance_callback_6_10($u73, $u67, $u22, $u2, $u2, $u2, $u2, $u2);
    goto SeqInstr_2218, SeqInstr_2219;

  SeqInstr_2219:
    assume assertsPassed;
    goto SeqInstr_2220;

  SeqInstr_2220:
    goto corral_source_split_13727;

  corral_source_split_13727:
    assume {:verifier.code 0} true;
    goto $bb51;

  SeqInstr_2218:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i9 == 1;
    goto corral_source_split_13719;

  corral_source_split_13719:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3202} ldv_dummy_resourceless_instance_callback_6_13($u66, $u67);
    goto corral_source_split_13721;

  corral_source_split_13721:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb26:
    assume $i8 == 1;
    goto corral_source_split_13713;

  corral_source_split_13713:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3201} ldv_dummy_resourceless_instance_callback_6_14($u66, $u67);
    goto SeqInstr_2215, SeqInstr_2216;

  SeqInstr_2216:
    assume assertsPassed;
    goto SeqInstr_2217;

  SeqInstr_2217:
    goto corral_source_split_13715;

  corral_source_split_13715:
    assume {:verifier.code 0} true;
    goto $bb51;

  SeqInstr_2215:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i7 == 1;
    goto corral_source_split_13707;

  corral_source_split_13707:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3200} ldv_dummy_resourceless_instance_callback_6_15($u72, $u67, $u2);
    goto corral_source_split_13709;

  corral_source_split_13709:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb18:
    assume $i6 == 1;
    goto corral_source_split_13697;

  corral_source_split_13697:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3197} $p18 := ldv_xmalloc(208);
    goto corral_source_split_13699;

  corral_source_split_13699:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_13700;

  corral_source_split_13700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3198} ldv_dummy_resourceless_instance_callback_6_18($u71, $u67, $u5, $p19);
    goto corral_source_split_13701;

  corral_source_split_13701:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_13702;

  corral_source_split_13702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3199} ldv_free($p20);
    goto corral_source_split_13703;

  corral_source_split_13703:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb14:
    assume $i5 == 1;
    goto corral_source_split_13687;

  corral_source_split_13687:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3194} $p15 := ldv_xmalloc(208);
    goto corral_source_split_13689;

  corral_source_split_13689:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_13690;

  corral_source_split_13690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3195} ldv_dummy_resourceless_instance_callback_6_21($u70, $u67, $u5, $p16, $u2, $u2, $u21);
    goto SeqInstr_2212, SeqInstr_2213;

  SeqInstr_2213:
    assume assertsPassed;
    goto SeqInstr_2214;

  SeqInstr_2214:
    goto corral_source_split_13691;

  corral_source_split_13691:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_13692;

  corral_source_split_13692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3196} ldv_free($p17);
    goto corral_source_split_13693;

  corral_source_split_13693:
    assume {:verifier.code 0} true;
    goto $bb51;

  SeqInstr_2212:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_13681;

  corral_source_split_13681:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3193} ldv_dummy_resourceless_instance_callback_6_24($u68, $u67, $u21, $u69, $u2);
    goto SeqInstr_2209, SeqInstr_2210;

  SeqInstr_2210:
    assume assertsPassed;
    goto SeqInstr_2211;

  SeqInstr_2211:
    goto corral_source_split_13683;

  corral_source_split_13683:
    assume {:verifier.code 0} true;
    goto $bb51;

  SeqInstr_2209:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_13675;

  corral_source_split_13675:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3192} ldv_dummy_resourceless_instance_callback_6_27($u66, $u67);
    goto corral_source_split_13677;

  corral_source_split_13677:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_13669;

  corral_source_split_13669:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3191} ldv_dummy_resourceless_instance_callback_6_28($u64, $u65);
    goto corral_source_split_13671;

  corral_source_split_13671:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3189} $i1 := ldv_undef_int();
    call {:si_unique_call 3190} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_13666;
}



const ldv_dummy_resourceless_instance_callback_6_28: ref;

axiom ldv_dummy_resourceless_instance_callback_6_28 == $sub.ref(0, 1153905);

procedure ldv_dummy_resourceless_instance_callback_6_28($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_6_28($p0: ref, $p1: ref)
{
  var vslice_dummy_var_267: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13747;

  corral_source_split_13747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3207} vslice_dummy_var_267 := drm_crtc_helper_set_config($p1);
    goto corral_source_split_13748;

  corral_source_split_13748:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_27: ref;

axiom ldv_dummy_resourceless_instance_callback_6_27 == $sub.ref(0, 1154937);

procedure ldv_dummy_resourceless_instance_callback_6_27($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_6_27($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13750;

  corral_source_split_13750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3208} qxl_crtc_prepare($p1);
    goto corral_source_split_13751;

  corral_source_split_13751:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_24: ref;

axiom ldv_dummy_resourceless_instance_callback_6_24 == $sub.ref(0, 1155969);

procedure ldv_dummy_resourceless_instance_callback_6_24($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32);
  free requires assertsPassed;
  modifies $M.79, $M.78, $M.80, $M.81, $M.91, $M.6, $M.46, $M.73, $M.42, $M.38, $M.39, $M.43, $M.52, $CurrAddr, $M.53, $M.49, $M.40, $M.44, assertsPassed, $M.93, $M.41, $M.67, $M.68, $M.75, $M.37, $M.72, $M.74, $M.69, $M.70, $M.32, $M.65, $M.71, $M.36, $M.64, $M.35, $M.54, $M.55;



implementation ldv_dummy_resourceless_instance_callback_6_24($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32)
{
  var vslice_dummy_var_268: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3209} {:cexpr "ldv_dummy_resourceless_instance_callback_6_24:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_13753;

  corral_source_split_13753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3210} vslice_dummy_var_268 := qxl_crtc_page_flip($p1, $p2, $p3, $i4);
    goto SeqInstr_2224, SeqInstr_2225;

  SeqInstr_2225:
    assume assertsPassed;
    goto SeqInstr_2226;

  SeqInstr_2226:
    goto corral_source_split_13754;

  corral_source_split_13754:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2224:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_21: ref;

axiom ldv_dummy_resourceless_instance_callback_6_21 == $sub.ref(0, 1157001);

procedure ldv_dummy_resourceless_instance_callback_6_21($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $p6: ref);
  free requires assertsPassed;
  modifies $M.6, $M.71, $M.40, $CurrAddr, $M.55, assertsPassed, $M.65;



implementation ldv_dummy_resourceless_instance_callback_6_21($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $p6: ref)
{
  var vslice_dummy_var_269: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3211} {:cexpr "ldv_dummy_resourceless_instance_callback_6_21:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 3212} {:cexpr "ldv_dummy_resourceless_instance_callback_6_21:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_13756;

  corral_source_split_13756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3213} vslice_dummy_var_269 := qxl_crtc_mode_set($p1, $p2, $p3, $i4, $i5, $p6);
    goto SeqInstr_2227, SeqInstr_2228;

  SeqInstr_2228:
    assume assertsPassed;
    goto SeqInstr_2229;

  SeqInstr_2229:
    goto corral_source_split_13757;

  corral_source_split_13757:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2227:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_18: ref;

axiom ldv_dummy_resourceless_instance_callback_6_18 == $sub.ref(0, 1158033);

procedure ldv_dummy_resourceless_instance_callback_6_18($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_6_18($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_270: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13759;

  corral_source_split_13759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3214} vslice_dummy_var_270 := qxl_crtc_mode_fixup($p1, $p2, $p3);
    goto corral_source_split_13760;

  corral_source_split_13760:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_15: ref;

axiom ldv_dummy_resourceless_instance_callback_6_15 == $sub.ref(0, 1159065);

procedure ldv_dummy_resourceless_instance_callback_6_15($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_6_15($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3215} {:cexpr "ldv_dummy_resourceless_instance_callback_6_15:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_13762;

  corral_source_split_13762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3216} qxl_crtc_dpms($p1, $i2);
    goto corral_source_split_13763;

  corral_source_split_13763:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_14: ref;

axiom ldv_dummy_resourceless_instance_callback_6_14 == $sub.ref(0, 1160097);

procedure ldv_dummy_resourceless_instance_callback_6_14($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.40, $CurrAddr, assertsPassed, $M.55, $M.65;



implementation ldv_dummy_resourceless_instance_callback_6_14($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13765;

  corral_source_split_13765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3217} qxl_crtc_disable($p1);
    goto SeqInstr_2230, SeqInstr_2231;

  SeqInstr_2231:
    assume assertsPassed;
    goto SeqInstr_2232;

  SeqInstr_2232:
    goto corral_source_split_13766;

  corral_source_split_13766:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2230:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_13: ref;

axiom ldv_dummy_resourceless_instance_callback_6_13 == $sub.ref(0, 1161129);

procedure ldv_dummy_resourceless_instance_callback_6_13($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_6_13($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13768;

  corral_source_split_13768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3218} qxl_crtc_destroy($p1);
    goto corral_source_split_13769;

  corral_source_split_13769:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_10: ref;

axiom ldv_dummy_resourceless_instance_callback_6_10 == $sub.ref(0, 1162161);

procedure ldv_dummy_resourceless_instance_callback_6_10($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i32);
  free requires assertsPassed;
  modifies $M.6, $M.71, $M.42, $M.46, $M.35, $M.43, $M.52, $CurrAddr, $M.40, $M.53, $M.49, $M.44, assertsPassed, $M.41, $M.67, $M.68, $M.38, $M.39, $M.75, $M.69, $M.70, $M.32, $M.37, $M.72, $M.73, $M.74, $M.65, $M.36, $M.64, $M.54, $M.55;



implementation ldv_dummy_resourceless_instance_callback_6_10($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i32)
{
  var vslice_dummy_var_271: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3219} {:cexpr "ldv_dummy_resourceless_instance_callback_6_10:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 3220} {:cexpr "ldv_dummy_resourceless_instance_callback_6_10:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 3221} {:cexpr "ldv_dummy_resourceless_instance_callback_6_10:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 3222} {:cexpr "ldv_dummy_resourceless_instance_callback_6_10:arg:arg6"} boogie_si_record_i32($i6);
    call {:si_unique_call 3223} {:cexpr "ldv_dummy_resourceless_instance_callback_6_10:arg:arg7"} boogie_si_record_i32($i7);
    goto corral_source_split_13771;

  corral_source_split_13771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3224} vslice_dummy_var_271 := qxl_crtc_cursor_set2($p1, $p2, $i3, $i4, $i5, $i6, $i7);
    goto SeqInstr_2233, SeqInstr_2234;

  SeqInstr_2234:
    assume assertsPassed;
    goto SeqInstr_2235;

  SeqInstr_2235:
    goto corral_source_split_13772;

  corral_source_split_13772:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2233:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_7: ref;

axiom ldv_dummy_resourceless_instance_callback_6_7 == $sub.ref(0, 1163193);

procedure ldv_dummy_resourceless_instance_callback_6_7($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.87, $M.88, $M.42, $M.52, $CurrAddr, $M.53, $M.49, $M.44, assertsPassed, $M.40, $M.38, $M.39, $M.43, $M.75, $M.41, $M.67, $M.68, $M.37, $M.72, $M.73, $M.74, $M.69, $M.70, $M.32, $M.36, $M.71, $M.35, $M.64, $M.54, $M.55, $M.65;



implementation ldv_dummy_resourceless_instance_callback_6_7($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var vslice_dummy_var_272: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3225} {:cexpr "ldv_dummy_resourceless_instance_callback_6_7:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 3226} {:cexpr "ldv_dummy_resourceless_instance_callback_6_7:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_13774;

  corral_source_split_13774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3227} vslice_dummy_var_272 := qxl_crtc_cursor_move($p1, $i2, $i3);
    goto SeqInstr_2236, SeqInstr_2237;

  SeqInstr_2237:
    assume assertsPassed;
    goto SeqInstr_2238;

  SeqInstr_2238:
    goto corral_source_split_13775;

  corral_source_split_13775:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2236:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_3: ref;

axiom ldv_dummy_resourceless_instance_callback_6_3 == $sub.ref(0, 1164225);

procedure ldv_dummy_resourceless_instance_callback_6_3($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_6_3($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13777;

  corral_source_split_13777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3228} qxl_crtc_commit($p1);
    goto corral_source_split_13778;

  corral_source_split_13778:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_file_operations_instance_1_18_27: ref;

axiom ldv_dispatch_register_file_operations_instance_1_18_27 == $sub.ref(0, 1165257);

procedure ldv_dispatch_register_file_operations_instance_1_18_27();
  free requires assertsPassed;
  modifies $M.6, $M.76, $M.56, $M.46, $M.61, $M.33, $M.62, $M.63, $CurrAddr, $M.107, $M.108, $M.109, $M.110, $M.111, $M.38, $M.39, $M.32, $M.42, $M.67, $M.68, $M.72, $M.52, $M.35, $M.64, $M.53, $M.75, $M.71, $M.43, $M.41, $M.69, $M.70, assertsPassed, $M.73, $M.74, $M.49, $M.40, $M.44, $M.36, $M.37, $M.55, $M.65, $M.54;



implementation ldv_dispatch_register_file_operations_instance_1_18_27()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13780;

  corral_source_split_13780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3229} $p0 := ldv_xmalloc(4);
    goto corral_source_split_13781;

  corral_source_split_13781:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_13782;

  corral_source_split_13782:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13783;

  corral_source_split_13783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3230} ldv_file_operations_file_operations_instance_0($p2);
    goto SeqInstr_2239, SeqInstr_2240;

  SeqInstr_2240:
    assume assertsPassed;
    goto SeqInstr_2241;

  SeqInstr_2241:
    goto corral_source_split_13784;

  corral_source_split_13784:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2239:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_file_operations_instance_0: ref;

axiom ldv_file_operations_file_operations_instance_0 == $sub.ref(0, 1166289);

procedure ldv_file_operations_file_operations_instance_0($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.76, $M.56, $M.46, $M.61, $M.33, $M.62, $M.63, $M.107, $M.108, $M.109, $M.110, $M.111, $M.38, $M.39, $M.32, $CurrAddr, $M.42, $M.67, $M.68, $M.72, $M.52, $M.35, $M.64, $M.53, $M.75, $M.71, $M.43, $M.41, $M.69, $M.70, assertsPassed, $M.73, $M.74, $M.49, $M.40, $M.44, $M.36, $M.37, $M.55, $M.65, $M.54;



implementation ldv_file_operations_file_operations_instance_0($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i29: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13786;

  corral_source_split_13786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3231} $p1 := ldv_xmalloc(504);
    goto corral_source_split_13787;

  corral_source_split_13787:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13788;

  corral_source_split_13788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3232} $p3 := ldv_xmalloc(976);
    goto corral_source_split_13789;

  corral_source_split_13789:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_13790;

  corral_source_split_13790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3233} $p5 := ldv_xmalloc(248);
    goto corral_source_split_13791;

  corral_source_split_13791:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_13792;

  corral_source_split_13792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3234} $p7 := ldv_xmalloc(40);
    goto corral_source_split_13793;

  corral_source_split_13793:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_13794;

  corral_source_split_13794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3235} $p9 := ldv_xmalloc(160);
    goto corral_source_split_13795;

  corral_source_split_13795:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_13796;

  corral_source_split_13796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3236} $i11 := ldv_undef_int();
    call {:si_unique_call 3237} {:cexpr "tmp___4"} boogie_si_record_i32($i11);
    goto corral_source_split_13797;

  corral_source_split_13797:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_13798;

  corral_source_split_13798:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_13799;

  corral_source_split_13799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3238} $i14 := ldv_undef_int();
    call {:si_unique_call 3239} {:cexpr "tmp___6"} boogie_si_record_i32($i14);
    goto corral_source_split_13800;

  corral_source_split_13800:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_13801;

  corral_source_split_13801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p2);
    goto corral_source_split_13836;

  corral_source_split_13836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3252} ldv_free($p34);
    goto corral_source_split_13837;

  corral_source_split_13837:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p4);
    goto corral_source_split_13838;

  corral_source_split_13838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3253} ldv_free($p35);
    goto corral_source_split_13839;

  corral_source_split_13839:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p6);
    goto corral_source_split_13840;

  corral_source_split_13840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3254} ldv_free($p36);
    goto corral_source_split_13841;

  corral_source_split_13841:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p8);
    goto corral_source_split_13842;

  corral_source_split_13842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3255} ldv_free($p37);
    goto corral_source_split_13843;

  corral_source_split_13843:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p10);
    goto corral_source_split_13844;

  corral_source_split_13844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3256} ldv_free($p38);
    goto corral_source_split_13845;

  corral_source_split_13845:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_13803;

  corral_source_split_13803:
    assume {:verifier.code 0} true;
    $p16 := $u75;
    goto $bb4;

  $bb4:
    call $p16, $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $i28, $i30, $i31, $i32, $i33, $i39, $i29, $i40, $p41, $i42, $p43, $p44, $p45, $i46, $i47, $i48, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $i56, $i57, $p58, $p59, $i60, $i61, $p62, $p63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $p105, $p106, $p107, $p108, $p109, $p110, $p111, $p112, $p113, $p114, $p115, $p116, $p117, $p118, $p119, $p120, $p121, $p122, $p123, $p124, $p125, $p126, $p127, $p128, $p129, $p130, $p131, $p132, $p133, $p134, $p135, $p136, $p137, $p138, $p139, $p140, $p141, $p142, $p143, $p144, $p145, $p146, $p147, $p148, $p149, $p150, $p151, $p152, $p153, $p154, $p155, $p156, $p157, $p158, $p159, $p160, $p161, $p162, $p163, $p164, $p165, $p166, $p167, $p168, $p169, $p170, $p171, $p172, $p173, $p174, $p175, $p176, $p177, $p178, $p179, $p180, $p181, $p182, $p183, $p184 := ldv_file_operations_file_operations_instance_0_loop_$bb4($p2, $p4, $p6, $p8, $p10, $p13, $p16, $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $i28, $i30, $i31, $i32, $i33, $i39, $i29, $i40, $p41, $i42, $p43, $p44, $p45, $i46, $i47, $i48, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $i56, $i57, $p58, $p59, $i60, $i61, $p62, $p63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $p105, $p106, $p107, $p108, $p109, $p110, $p111, $p112, $p113, $p114, $p115, $p116, $p117, $p118, $p119, $p120, $p121, $p122, $p123, $p124, $p125, $p126, $p127, $p128, $p129, $p130, $p131, $p132, $p133, $p134, $p135, $p136, $p137, $p138, $p139, $p140, $p141, $p142, $p143, $p144, $p145, $p146, $p147, $p148, $p149, $p150, $p151, $p152, $p153, $p154, $p155, $p156, $p157, $p158, $p159, $p160, $p161, $p162, $p163, $p164, $p165, $p166, $p167, $p168, $p169, $p170, $p171, $p172, $p173, $p174, $p175, $p176, $p177, $p178, $p179, $p180, $p181, $p182, $p183, $p184);
    goto $bb4_last;

  corral_source_split_13805:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    call $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i30, $i31, $i32, $i33 := ldv_file_operations_file_operations_instance_0_loop_$bb5($p2, $p4, $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i30, $i31, $i32, $i33);
    goto $bb5_last;

  corral_source_split_13807:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.164, $p17);
    goto corral_source_split_13808;

  corral_source_split_13808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3240} $i19 := ldv_file_operations_instance_probe_0_12($p18, $p4, $p2);
    call {:si_unique_call 3241} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i19);
    goto corral_source_split_13809;

  corral_source_split_13809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3242} $i20 := ldv_filter_err_code($i19);
    call {:si_unique_call 3243} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i20);
    goto corral_source_split_13810;

  corral_source_split_13810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3244} $i21 := ldv_undef_int();
    call {:si_unique_call 3245} {:cexpr "tmp___5"} boogie_si_record_i32($i21);
    goto corral_source_split_13811;

  corral_source_split_13811:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_13812;

  corral_source_split_13812:
    assume {:verifier.code 0} true;
    $i23 := $i20;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    goto corral_source_split_13819;

  corral_source_split_13819:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i20, 0);
    goto corral_source_split_13820;

  corral_source_split_13820:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    goto corral_source_split_13821;

  corral_source_split_13821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3247} ldv_assume($i31);
    goto corral_source_split_13822;

  corral_source_split_13822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3248} $i32 := ldv_undef_int();
    call {:si_unique_call 3249} {:cexpr "tmp___6"} boogie_si_record_i32($i32);
    goto corral_source_split_13823;

  corral_source_split_13823:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_13824;

  corral_source_split_13824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    goto corral_source_split_13832;

  corral_source_split_13832:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb13_dummy;

  $bb6:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_13814;

  corral_source_split_13814:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_13815;

  corral_source_split_13815:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_13816;

  corral_source_split_13816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3246} ldv_assume($i25);
    goto corral_source_split_13817;

  corral_source_split_13817:
    assume {:verifier.code 0} true;
    $p26 := $p16;
    goto $bb8;

  $bb8:
    call $p26, $i27, $i28, $i39, $i29, $i40, $p41, $i42, $p43, $p44, $p45, $i46, $i47, $i48, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $i56, $i57, $p62, $p63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $p105, $p106, $p107, $p108, $p109, $p110, $p111, $p112, $p113, $p114, $p115, $p116, $p117, $p118, $p119, $p120, $p121, $p122, $p123, $p124, $p125, $p126, $p127, $p128, $p129, $p130, $p131, $p132, $p133, $p134, $p135, $p136, $p137, $p138, $p139, $p140, $p141, $p142, $p143, $p144, $p145, $p146, $p147, $p148, $p149, $p150, $p151, $p152, $p153, $p154, $p155, $p156, $p157, $p158, $p159, $p160, $p161, $p162, $p163, $p164, $p165, $p166, $p167, $p168, $p169, $p170, $p171, $p172, $p173, $p174, $p175, $p176, $p177, $p178, $p179, $p180, $p181, $p182, $p183, $p184 := ldv_file_operations_file_operations_instance_0_loop_$bb8($p2, $p6, $p8, $p10, $p13, $p26, $i27, $i28, $i39, $i29, $i40, $p41, $i42, $p43, $p44, $p45, $i46, $i47, $i48, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $i56, $i57, $p62, $p63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $p105, $p106, $p107, $p108, $p109, $p110, $p111, $p112, $p113, $p114, $p115, $p116, $p117, $p118, $p119, $p120, $p121, $p122, $p123, $p124, $p125, $p126, $p127, $p128, $p129, $p130, $p131, $p132, $p133, $p134, $p135, $p136, $p137, $p138, $p139, $p140, $p141, $p142, $p143, $p144, $p145, $p146, $p147, $p148, $p149, $p150, $p151, $p152, $p153, $p154, $p155, $p156, $p157, $p158, $p159, $p160, $p161, $p162, $p163, $p164, $p165, $p166, $p167, $p168, $p169, $p170, $p171, $p172, $p173, $p174, $p175, $p176, $p177, $p178, $p179, $p180, $p181, $p182, $p183, $p184);
    goto $bb8_last;

  corral_source_split_13826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3250} $i27 := ldv_undef_int();
    call {:si_unique_call 3251} {:cexpr "tmp___7"} boogie_si_record_i32($i27);
    goto corral_source_split_13827;

  corral_source_split_13827:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 1);
    goto corral_source_split_13828;

  corral_source_split_13828:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i29, 2);
    goto corral_source_split_13861;

  corral_source_split_13861:
    assume {:verifier.code 0} true;
    $p41 := $p26;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i29, 3);
    goto corral_source_split_13871;

  corral_source_split_13871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3266} ldv_stop();
    goto corral_source_split_13880;

  corral_source_split_13880:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $p183 := $p26;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto corral_source_split_14237;

  corral_source_split_14237:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p183);
    goto corral_source_split_14238;

  corral_source_split_14238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3365} ldv_free($p184);
    goto corral_source_split_14239;

  corral_source_split_14239:
    assume {:verifier.code 0} true;
    $p26 := $p183;
    goto corral_source_split_14239_dummy;

  $bb24:
    assume $i42 == 1;
    goto corral_source_split_13873;

  corral_source_split_13873:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3263} $p62 := ldv_xmalloc(240);
    goto corral_source_split_13875;

  corral_source_split_13875:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_13876;

  corral_source_split_13876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3264} $i64 := ldv_undef_int();
    call {:si_unique_call 3265} {:cexpr "tmp___11"} boogie_si_record_i32($i64);
    goto corral_source_split_13877;

  corral_source_split_13877:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 1);
    goto corral_source_split_13878;

  corral_source_split_13878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i64, 2);
    goto corral_source_split_13897;

  corral_source_split_13897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i64, 3);
    goto corral_source_split_13907;

  corral_source_split_13907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i64, 4);
    goto corral_source_split_13917;

  corral_source_split_13917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i64, 5);
    goto corral_source_split_13929;

  corral_source_split_13929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i64, 6);
    goto corral_source_split_13943;

  corral_source_split_13943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i64, 7);
    goto corral_source_split_13957;

  corral_source_split_13957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i64, 8);
    goto corral_source_split_13963;

  corral_source_split_13963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i64, 9);
    goto corral_source_split_13969;

  corral_source_split_13969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i64, 10);
    goto corral_source_split_13979;

  corral_source_split_13979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i64, 11);
    goto corral_source_split_13986;

  corral_source_split_13986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i64, 12);
    goto corral_source_split_13996;

  corral_source_split_13996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i64, 13);
    goto corral_source_split_14003;

  corral_source_split_14003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i64, 14);
    goto corral_source_split_14009;

  corral_source_split_14009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i64, 15);
    goto corral_source_split_14015;

  corral_source_split_14015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i64, 16);
    goto corral_source_split_14021;

  corral_source_split_14021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i64, 17);
    goto corral_source_split_14027;

  corral_source_split_14027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i64, 18);
    goto corral_source_split_14037;

  corral_source_split_14037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i64, 19);
    goto corral_source_split_14047;

  corral_source_split_14047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i64, 20);
    goto corral_source_split_14053;

  corral_source_split_14053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i64, 21);
    goto corral_source_split_14063;

  corral_source_split_14063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i64, 22);
    goto corral_source_split_14069;

  corral_source_split_14069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i64, 23);
    goto corral_source_split_14075;

  corral_source_split_14075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i64, 24);
    goto corral_source_split_14081;

  corral_source_split_14081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i64, 25);
    goto corral_source_split_14087;

  corral_source_split_14087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i64, 26);
    goto corral_source_split_14097;

  corral_source_split_14097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i64, 27);
    goto corral_source_split_14103;

  corral_source_split_14103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i64, 28);
    goto corral_source_split_14113;

  corral_source_split_14113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i64, 29);
    goto corral_source_split_14123;

  corral_source_split_14123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i64, 30);
    goto corral_source_split_14133;

  corral_source_split_14133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i64, 31);
    goto corral_source_split_14143;

  corral_source_split_14143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i64, 32);
    goto corral_source_split_14153;

  corral_source_split_14153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i64, 33);
    goto corral_source_split_14159;

  corral_source_split_14159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i64, 34);
    goto corral_source_split_14165;

  corral_source_split_14165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i64, 35);
    goto corral_source_split_14175;

  corral_source_split_14175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i64, 36);
    goto corral_source_split_14189;

  corral_source_split_14189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i64, 37);
    goto corral_source_split_14199;

  corral_source_split_14199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i64, 38);
    goto corral_source_split_14209;

  corral_source_split_14209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i64, 39);
    goto corral_source_split_14219;

  corral_source_split_14219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i64, 40);
    goto corral_source_split_14229;

  corral_source_split_14229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3364} ldv_stop();
    goto corral_source_split_14235;

  corral_source_split_14235:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $p183 := $p62;
    goto $bb197;

  $bb190:
    assume $i104 == 1;
    goto corral_source_split_14231;

  corral_source_split_14231:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3363} ldv_file_operations_instance_callback_0_5($u117, $p63);
    goto corral_source_split_14233;

  corral_source_split_14233:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb186:
    assume $i103 == 1;
    goto corral_source_split_14221;

  corral_source_split_14221:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3360} $p180 := ldv_xmalloc(240);
    goto corral_source_split_14223;

  corral_source_split_14223:
    assume {:verifier.code 0} true;
    $p181 := $bitcast.ref.ref($p180);
    goto corral_source_split_14224;

  corral_source_split_14224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3361} ldv_file_operations_instance_callback_0_22($u116, $p181);
    goto corral_source_split_14225;

  corral_source_split_14225:
    assume {:verifier.code 0} true;
    $p182 := $bitcast.ref.ref($p181);
    goto corral_source_split_14226;

  corral_source_split_14226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3362} ldv_free($p182);
    goto corral_source_split_14227;

  corral_source_split_14227:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb182:
    assume $i102 == 1;
    goto corral_source_split_14211;

  corral_source_split_14211:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3357} $p177 := ldv_xmalloc(3144);
    goto corral_source_split_14213;

  corral_source_split_14213:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p177);
    goto corral_source_split_14214;

  corral_source_split_14214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3358} ldv_file_operations_instance_callback_0_25($u115, $p178, $u2);
    goto corral_source_split_14215;

  corral_source_split_14215:
    assume {:verifier.code 0} true;
    $p179 := $bitcast.ref.ref($p178);
    goto corral_source_split_14216;

  corral_source_split_14216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3359} ldv_free($p179);
    goto corral_source_split_14217;

  corral_source_split_14217:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb178:
    assume $i101 == 1;
    goto corral_source_split_14201;

  corral_source_split_14201:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3354} $p174 := ldv_xmalloc(728);
    goto corral_source_split_14203;

  corral_source_split_14203:
    assume {:verifier.code 0} true;
    $p175 := $bitcast.ref.ref($p174);
    goto corral_source_split_14204;

  corral_source_split_14204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3355} ldv_file_operations_instance_callback_0_28($u113, $p175, $u28, $u114);
    goto SeqInstr_2263, SeqInstr_2264;

  SeqInstr_2264:
    assume assertsPassed;
    goto SeqInstr_2265;

  SeqInstr_2265:
    goto corral_source_split_14205;

  corral_source_split_14205:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p175);
    goto corral_source_split_14206;

  corral_source_split_14206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3356} ldv_free($p176);
    goto corral_source_split_14207;

  corral_source_split_14207:
    assume {:verifier.code 0} true;
    goto $bb195;

  SeqInstr_2263:
    assume !assertsPassed;
    return;

  $bb174:
    assume $i100 == 1;
    goto corral_source_split_14191;

  corral_source_split_14191:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3351} $p171 := ldv_xmalloc(728);
    goto corral_source_split_14193;

  corral_source_split_14193:
    assume {:verifier.code 0} true;
    $p172 := $bitcast.ref.ref($p171);
    goto corral_source_split_14194;

  corral_source_split_14194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3352} ldv_file_operations_instance_callback_0_31($u112, $p172, $u28, $u2);
    goto corral_source_split_14195;

  corral_source_split_14195:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_14196;

  corral_source_split_14196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3353} ldv_free($p173);
    goto corral_source_split_14197;

  corral_source_split_14197:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb170:
    assume $i99 == 1;
    goto corral_source_split_14177;

  corral_source_split_14177:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3346} $p165 := ldv_xmalloc(728);
    goto corral_source_split_14179;

  corral_source_split_14179:
    assume {:verifier.code 0} true;
    $p166 := $bitcast.ref.ref($p165);
    goto corral_source_split_14180;

  corral_source_split_14180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3347} $p167 := ldv_xmalloc(8);
    goto corral_source_split_14181;

  corral_source_split_14181:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p167);
    goto corral_source_split_14182;

  corral_source_split_14182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3348} ldv_file_operations_instance_callback_0_34($u111, $p166, $u28, $u2, $p168);
    goto SeqInstr_2260, SeqInstr_2261;

  SeqInstr_2261:
    assume assertsPassed;
    goto SeqInstr_2262;

  SeqInstr_2262:
    goto corral_source_split_14183;

  corral_source_split_14183:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p166);
    goto corral_source_split_14184;

  corral_source_split_14184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3349} ldv_free($p169);
    goto corral_source_split_14185;

  corral_source_split_14185:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p168);
    goto corral_source_split_14186;

  corral_source_split_14186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3350} ldv_free($p170);
    goto corral_source_split_14187;

  corral_source_split_14187:
    assume {:verifier.code 0} true;
    goto $bb195;

  SeqInstr_2260:
    assume !assertsPassed;
    return;

  $bb166:
    assume $i98 == 1;
    goto corral_source_split_14167;

  corral_source_split_14167:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3343} $p162 := ldv_xmalloc(3144);
    goto corral_source_split_14169;

  corral_source_split_14169:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_14170;

  corral_source_split_14170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3344} ldv_file_operations_instance_callback_0_37($u90, $p163, $u2);
    goto corral_source_split_14171;

  corral_source_split_14171:
    assume {:verifier.code 0} true;
    $p164 := $bitcast.ref.ref($p163);
    goto corral_source_split_14172;

  corral_source_split_14172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3345} ldv_free($p164);
    goto corral_source_split_14173;

  corral_source_split_14173:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb162:
    assume $i97 == 1;
    goto corral_source_split_14161;

  corral_source_split_14161:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3342} ldv_file_operations_instance_callback_0_40($u110, $u2, $u31);
    goto corral_source_split_14163;

  corral_source_split_14163:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb158:
    assume $i96 == 1;
    goto corral_source_split_14155;

  corral_source_split_14155:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3341} ldv_file_operations_instance_callback_0_43($u106, $p10, $u31);
    goto corral_source_split_14157;

  corral_source_split_14157:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb154:
    assume $i95 == 1;
    goto corral_source_split_14145;

  corral_source_split_14145:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3338} $p159 := ldv_xmalloc(1608);
    goto corral_source_split_14147;

  corral_source_split_14147:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p159);
    goto corral_source_split_14148;

  corral_source_split_14148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3339} ldv_file_operations_instance_callback_0_44($u109, $p160, $u19);
    goto SeqInstr_2257, SeqInstr_2258;

  SeqInstr_2258:
    assume assertsPassed;
    goto SeqInstr_2259;

  SeqInstr_2259:
    goto corral_source_split_14149;

  corral_source_split_14149:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p160);
    goto corral_source_split_14150;

  corral_source_split_14150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3340} ldv_free($p161);
    goto corral_source_split_14151;

  corral_source_split_14151:
    assume {:verifier.code 0} true;
    goto $bb195;

  SeqInstr_2257:
    assume !assertsPassed;
    return;

  $bb150:
    assume $i94 == 1;
    goto corral_source_split_14135;

  corral_source_split_14135:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3335} $p156 := ldv_xmalloc(1608);
    goto corral_source_split_14137;

  corral_source_split_14137:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p156);
    goto corral_source_split_14138;

  corral_source_split_14138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3336} ldv_file_operations_instance_callback_0_47($u105, $p157);
    goto corral_source_split_14139;

  corral_source_split_14139:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_14140;

  corral_source_split_14140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3337} ldv_free($p158);
    goto corral_source_split_14141;

  corral_source_split_14141:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb146:
    assume $i93 == 1;
    goto corral_source_split_14125;

  corral_source_split_14125:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3332} $p153 := ldv_xmalloc(1608);
    goto corral_source_split_14127;

  corral_source_split_14127:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p153);
    goto corral_source_split_14128;

  corral_source_split_14128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3333} ldv_file_operations_instance_callback_0_50($u105, $p154);
    goto corral_source_split_14129;

  corral_source_split_14129:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p154);
    goto corral_source_split_14130;

  corral_source_split_14130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3334} ldv_free($p155);
    goto corral_source_split_14131;

  corral_source_split_14131:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb142:
    assume $i92 == 1;
    goto corral_source_split_14115;

  corral_source_split_14115:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3329} $p150 := ldv_xmalloc(1608);
    goto corral_source_split_14117;

  corral_source_split_14117:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p150);
    goto corral_source_split_14118;

  corral_source_split_14118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3330} ldv_file_operations_instance_callback_0_53($u109, $p151, $u19);
    goto SeqInstr_2254, SeqInstr_2255;

  SeqInstr_2255:
    assume assertsPassed;
    goto SeqInstr_2256;

  SeqInstr_2256:
    goto corral_source_split_14119;

  corral_source_split_14119:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p151);
    goto corral_source_split_14120;

  corral_source_split_14120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3331} ldv_free($p152);
    goto corral_source_split_14121;

  corral_source_split_14121:
    assume {:verifier.code 0} true;
    goto $bb195;

  SeqInstr_2254:
    assume !assertsPassed;
    return;

  $bb138:
    assume $i91 == 1;
    goto corral_source_split_14105;

  corral_source_split_14105:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3326} $p147 := ldv_xmalloc(1608);
    goto corral_source_split_14107;

  corral_source_split_14107:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_14108;

  corral_source_split_14108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3327} ldv_file_operations_instance_callback_0_56($u107, $p148, $u108);
    goto SeqInstr_2251, SeqInstr_2252;

  SeqInstr_2252:
    assume assertsPassed;
    goto SeqInstr_2253;

  SeqInstr_2253:
    goto corral_source_split_14109;

  corral_source_split_14109:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p148);
    goto corral_source_split_14110;

  corral_source_split_14110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3328} ldv_free($p149);
    goto corral_source_split_14111;

  corral_source_split_14111:
    assume {:verifier.code 0} true;
    goto $bb195;

  SeqInstr_2251:
    assume !assertsPassed;
    return;

  $bb134:
    assume $i90 == 1;
    goto corral_source_split_14099;

  corral_source_split_14099:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3325} ldv_file_operations_instance_callback_0_59($u106, $p10, $u31);
    goto corral_source_split_14101;

  corral_source_split_14101:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb130:
    assume $i89 == 1;
    goto corral_source_split_14089;

  corral_source_split_14089:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3322} $p144 := ldv_xmalloc(1608);
    goto corral_source_split_14091;

  corral_source_split_14091:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_14092;

  corral_source_split_14092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3323} ldv_file_operations_instance_callback_0_60($u105, $p145);
    goto corral_source_split_14093;

  corral_source_split_14093:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p145);
    goto corral_source_split_14094;

  corral_source_split_14094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3324} ldv_free($p146);
    goto corral_source_split_14095;

  corral_source_split_14095:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb126:
    assume $i88 == 1;
    goto corral_source_split_14083;

  corral_source_split_14083:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3321} ldv_file_operations_instance_callback_0_63($u104, $p8, $u31);
    goto corral_source_split_14085;

  corral_source_split_14085:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb122:
    assume $i87 == 1;
    goto corral_source_split_14077;

  corral_source_split_14077:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3320} ldv_file_operations_instance_callback_0_64($u103, $p6, $u22);
    goto corral_source_split_14079;

  corral_source_split_14079:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb118:
    assume $i86 == 1;
    goto corral_source_split_14071;

  corral_source_split_14071:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3319} ldv_file_operations_instance_callback_0_65($u93, $p6);
    goto corral_source_split_14073;

  corral_source_split_14073:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb114:
    assume $i85 == 1;
    goto corral_source_split_14065;

  corral_source_split_14065:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3318} ldv_file_operations_instance_callback_0_66($u102, $p6, $u22);
    goto corral_source_split_14067;

  corral_source_split_14067:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb110:
    assume $i84 == 1;
    goto corral_source_split_14055;

  corral_source_split_14055:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3315} $p141 := ldv_xmalloc(3144);
    goto corral_source_split_14057;

  corral_source_split_14057:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p141);
    goto corral_source_split_14058;

  corral_source_split_14058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3316} ldv_file_operations_instance_callback_0_67($u101, $p142, $p6, $u2);
    goto corral_source_split_14059;

  corral_source_split_14059:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p142);
    goto corral_source_split_14060;

  corral_source_split_14060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3317} ldv_free($p143);
    goto corral_source_split_14061;

  corral_source_split_14061:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb106:
    assume $i83 == 1;
    goto corral_source_split_14049;

  corral_source_split_14049:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3314} ldv_file_operations_instance_callback_0_70($u100, $p6);
    goto corral_source_split_14051;

  corral_source_split_14051:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb102:
    assume $i82 == 1;
    goto corral_source_split_14039;

  corral_source_split_14039:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3311} $p138 := ldv_xmalloc(3144);
    goto corral_source_split_14041;

  corral_source_split_14041:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p138);
    goto corral_source_split_14042;

  corral_source_split_14042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3312} ldv_file_operations_instance_callback_0_71($u98, $p139, $u99);
    goto corral_source_split_14043;

  corral_source_split_14043:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_14044;

  corral_source_split_14044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3313} ldv_free($p140);
    goto corral_source_split_14045;

  corral_source_split_14045:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb98:
    assume $i81 == 1;
    goto corral_source_split_14029;

  corral_source_split_14029:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3308} $p135 := ldv_xmalloc(3144);
    goto corral_source_split_14031;

  corral_source_split_14031:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p135);
    goto corral_source_split_14032;

  corral_source_split_14032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3309} ldv_file_operations_instance_callback_0_74($u96, $p136, $p13, $u97);
    goto corral_source_split_14033;

  corral_source_split_14033:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p136);
    goto corral_source_split_14034;

  corral_source_split_14034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3310} ldv_free($p137);
    goto corral_source_split_14035;

  corral_source_split_14035:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb94:
    assume $i80 == 1;
    goto corral_source_split_14023;

  corral_source_split_14023:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3307} ldv_file_operations_instance_callback_0_77($u95, $p6, $u87);
    goto corral_source_split_14025;

  corral_source_split_14025:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb90:
    assume $i79 == 1;
    goto corral_source_split_14017;

  corral_source_split_14017:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3306} ldv_file_operations_instance_callback_0_78($u94, $p6);
    goto corral_source_split_14019;

  corral_source_split_14019:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb86:
    assume $i78 == 1;
    goto corral_source_split_14011;

  corral_source_split_14011:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3305} ldv_file_operations_instance_callback_0_79($u93, $p6);
    goto corral_source_split_14013;

  corral_source_split_14013:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb82:
    assume $i77 == 1;
    goto corral_source_split_14005;

  corral_source_split_14005:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3304} ldv_file_operations_instance_callback_0_80($u92, $p6);
    goto corral_source_split_14007;

  corral_source_split_14007:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb78:
    assume $i76 == 1;
    goto corral_source_split_13998;

  corral_source_split_13998:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p2);
    goto corral_source_split_14000;

  corral_source_split_14000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3303} ldv_file_operations_instance_callback_0_81($u91, $p6, $p134);
    goto corral_source_split_14001;

  corral_source_split_14001:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb74:
    assume $i75 == 1;
    goto corral_source_split_13988;

  corral_source_split_13988:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3300} $p131 := ldv_xmalloc(3144);
    goto corral_source_split_13990;

  corral_source_split_13990:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p131);
    goto corral_source_split_13991;

  corral_source_split_13991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3301} ldv_file_operations_instance_callback_0_82($u90, $p132, $u2);
    goto corral_source_split_13992;

  corral_source_split_13992:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_13993;

  corral_source_split_13993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3302} ldv_free($p133);
    goto corral_source_split_13994;

  corral_source_split_13994:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb70:
    assume $i74 == 1;
    goto corral_source_split_13981;

  corral_source_split_13981:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p2);
    goto corral_source_split_13983;

  corral_source_split_13983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3299} ldv_file_operations_instance_callback_0_85($u89, $u2, $p130);
    goto SeqInstr_2248, SeqInstr_2249;

  SeqInstr_2249:
    assume assertsPassed;
    goto SeqInstr_2250;

  SeqInstr_2250:
    goto corral_source_split_13984;

  corral_source_split_13984:
    assume {:verifier.code 0} true;
    goto $bb195;

  SeqInstr_2248:
    assume !assertsPassed;
    return;

  $bb66:
    assume $i73 == 1;
    goto corral_source_split_13971;

  corral_source_split_13971:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3296} $p127 := ldv_xmalloc(3144);
    goto corral_source_split_13973;

  corral_source_split_13973:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p127);
    goto corral_source_split_13974;

  corral_source_split_13974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3297} ldv_file_operations_instance_callback_0_88($u88, $p128, $u1);
    goto SeqInstr_2245, SeqInstr_2246;

  SeqInstr_2246:
    assume assertsPassed;
    goto SeqInstr_2247;

  SeqInstr_2247:
    goto corral_source_split_13975;

  corral_source_split_13975:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_13976;

  corral_source_split_13976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3298} ldv_free($p129);
    goto corral_source_split_13977;

  corral_source_split_13977:
    assume {:verifier.code 0} true;
    goto $bb195;

  SeqInstr_2245:
    assume !assertsPassed;
    return;

  $bb62:
    assume $i72 == 1;
    goto corral_source_split_13965;

  corral_source_split_13965:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3295} ldv_file_operations_instance_callback_0_91($u86, $p2, $u87);
    goto corral_source_split_13967;

  corral_source_split_13967:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb58:
    assume $i71 == 1;
    goto corral_source_split_13959;

  corral_source_split_13959:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3294} ldv_file_operations_instance_callback_0_92($u84, $p2, $u85);
    goto corral_source_split_13961;

  corral_source_split_13961:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb54:
    assume $i70 == 1;
    goto corral_source_split_13945;

  corral_source_split_13945:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3289} $p121 := ldv_xmalloc(3144);
    goto corral_source_split_13947;

  corral_source_split_13947:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_13948;

  corral_source_split_13948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3290} $p123 := ldv_xmalloc(4);
    goto corral_source_split_13949;

  corral_source_split_13949:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_13950;

  corral_source_split_13950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3291} ldv_file_operations_instance_callback_0_93($u83, $p122, $u22, $u2, $p124);
    goto corral_source_split_13951;

  corral_source_split_13951:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p122);
    goto corral_source_split_13952;

  corral_source_split_13952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3292} ldv_free($p125);
    goto corral_source_split_13953;

  corral_source_split_13953:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p124);
    goto corral_source_split_13954;

  corral_source_split_13954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3293} ldv_free($p126);
    goto corral_source_split_13955;

  corral_source_split_13955:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb50:
    assume $i69 == 1;
    goto corral_source_split_13931;

  corral_source_split_13931:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3284} $p115 := ldv_xmalloc(3144);
    goto corral_source_split_13933;

  corral_source_split_13933:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_13934;

  corral_source_split_13934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3285} $p117 := ldv_xmalloc(4);
    goto corral_source_split_13935;

  corral_source_split_13935:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p117);
    goto corral_source_split_13936;

  corral_source_split_13936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3286} ldv_file_operations_instance_callback_0_96($u82, $p116, $u22, $u2, $u2, $p118);
    goto corral_source_split_13937;

  corral_source_split_13937:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p116);
    goto corral_source_split_13938;

  corral_source_split_13938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3287} ldv_free($p119);
    goto corral_source_split_13939;

  corral_source_split_13939:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p118);
    goto corral_source_split_13940;

  corral_source_split_13940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3288} ldv_free($p120);
    goto corral_source_split_13941;

  corral_source_split_13941:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb46:
    assume $i68 == 1;
    goto corral_source_split_13919;

  corral_source_split_13919:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3279} $p111 := ldv_xmalloc(1);
    goto corral_source_split_13921;

  corral_source_split_13921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3280} $p112 := ldv_xmalloc(8);
    goto corral_source_split_13922;

  corral_source_split_13922:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_13923;

  corral_source_split_13923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3281} ldv_file_operations_instance_callback_0_99($u81, $p2, $p111, $u1, $p113);
    goto corral_source_split_13924;

  corral_source_split_13924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3282} ldv_free($p111);
    goto corral_source_split_13925;

  corral_source_split_13925:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_13926;

  corral_source_split_13926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3283} ldv_free($p114);
    goto corral_source_split_13927;

  corral_source_split_13927:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb42:
    assume $i67 == 1;
    goto corral_source_split_13909;

  corral_source_split_13909:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3276} $p108 := ldv_xmalloc(3144);
    goto corral_source_split_13911;

  corral_source_split_13911:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_13912;

  corral_source_split_13912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3277} ldv_file_operations_instance_callback_0_102($u79, $p109, $u80);
    goto corral_source_split_13913;

  corral_source_split_13913:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_13914;

  corral_source_split_13914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3278} ldv_free($p110);
    goto corral_source_split_13915;

  corral_source_split_13915:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb38:
    assume $i66 == 1;
    goto corral_source_split_13899;

  corral_source_split_13899:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3273} $p105 := ldv_xmalloc(3144);
    goto corral_source_split_13901;

  corral_source_split_13901:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_13902;

  corral_source_split_13902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3274} ldv_file_operations_instance_callback_0_105($u78, $p106);
    goto SeqInstr_2242, SeqInstr_2243;

  SeqInstr_2243:
    assume assertsPassed;
    goto SeqInstr_2244;

  SeqInstr_2244:
    goto corral_source_split_13903;

  corral_source_split_13903:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_13904;

  corral_source_split_13904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3275} ldv_free($p107);
    goto corral_source_split_13905;

  corral_source_split_13905:
    assume {:verifier.code 0} true;
    goto $bb195;

  SeqInstr_2242:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i65 == 1;
    goto corral_source_split_13893;

  corral_source_split_13893:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3272} ldv_file_operations_instance_callback_0_108($u77, $p2, $u2, $u1);
    goto corral_source_split_13895;

  corral_source_split_13895:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb20:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_13863;

  corral_source_split_13863:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($u76, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_13865;

  corral_source_split_13865:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.167, $p58);
    goto corral_source_split_13866;

  corral_source_split_13866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3260} ldv_file_operations_instance_release_0_2($p59, $p4, $p2);
    goto corral_source_split_13867;

  corral_source_split_13867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3261} $i60 := ldv_undef_int();
    call {:si_unique_call 3262} {:cexpr "tmp___6"} boogie_si_record_i32($i60);
    goto corral_source_split_13868;

  corral_source_split_13868:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_13869;

  corral_source_split_13869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb15;

  $bb15:
    assume !($i61 == 1);
    goto corral_source_split_13834;

  corral_source_split_13834:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb33:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $p16 := $p41;
    goto $bb33_dummy;

  $bb9:
    assume $i28 == 1;
    goto corral_source_split_13830;

  corral_source_split_13830:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    call $i39, $p43, $p44, $p45, $i46, $i47, $i48, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $i56, $i57 := ldv_file_operations_file_operations_instance_0_loop_$bb12($p2, $p13, $i39, $p43, $p44, $p45, $i46, $i47, $i48, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $i56, $i57);
    goto $bb12_last;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3257} $p43 := ldv_xmalloc(1);
    goto corral_source_split_13847;

  corral_source_split_13847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3258} $p44 := ldv_xmalloc(8);
    goto corral_source_split_13848;

  corral_source_split_13848:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_13849;

  corral_source_split_13849:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p13);
    goto corral_source_split_13850;

  corral_source_split_13850:
    assume {:verifier.code 0} true;
    $i47 := $ule.i64($i46, 2147479552);
    goto corral_source_split_13851;

  corral_source_split_13851:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i32($i47);
    goto corral_source_split_13852;

  corral_source_split_13852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3259} ldv_assume($i48);
    goto corral_source_split_13853;

  corral_source_split_13853:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($u76, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_13854;

  corral_source_split_13854:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.165, $p49);
    goto corral_source_split_13855;

  corral_source_split_13855:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_13856;

  corral_source_split_13856:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_13857;

  corral_source_split_13857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3268} ldv_free($p43);
    goto corral_source_split_13887;

  corral_source_split_13887:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p45);
    goto corral_source_split_13888;

  corral_source_split_13888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3269} ldv_free($p55);
    goto corral_source_split_13889;

  corral_source_split_13889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3270} $i56 := ldv_undef_int();
    call {:si_unique_call 3271} {:cexpr "tmp___7"} boogie_si_record_i32($i56);
    goto corral_source_split_13890;

  corral_source_split_13890:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 1);
    goto corral_source_split_13891;

  corral_source_split_13891:
    assume {:verifier.code 0} true;
    $i39 := $i56;
    assume true;
    goto $bb32, $bb18;

  $bb18:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_13859;

  corral_source_split_13859:
    assume {:verifier.code 0} true;
    $i29 := $i39;
    goto $bb11;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb32_dummy;

  $bb29:
    assume $i52 == 1;
    goto corral_source_split_13882;

  corral_source_split_13882:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($u76, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_13883;

  corral_source_split_13883:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.166, $p53);
    goto corral_source_split_13884;

  corral_source_split_13884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3267} ldv_file_operations_instance_write_0_4($p54, $p2, $p43, $u1, $p45);
    goto corral_source_split_13885;

  corral_source_split_13885:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb32_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_14239_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_13826;

  $bb13_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($u76, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_13807;

  $bb33_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_13805;
}



const ldv_file_operations_instance_probe_0_12: ref;

axiom ldv_file_operations_instance_probe_0_12 == $sub.ref(0, 1167321);

procedure ldv_file_operations_instance_probe_0_12($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_file_operations_instance_probe_0_12($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14241;

  corral_source_split_14241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3366} $i3 := drm_open($p1, $p2);
    call {:si_unique_call 3367} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_14242;

  corral_source_split_14242:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_filter_err_code: ref;

axiom ldv_filter_err_code == $sub.ref(0, 1168353);

procedure ldv_filter_err_code($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_err_code($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3368} {:cexpr "ldv_filter_err_code:arg:ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_14244;

  corral_source_split_14244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3369} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 3370} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_14245;

  corral_source_split_14245:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_file_operations_instance_write_0_4: ref;

axiom ldv_file_operations_instance_write_0_4 == $sub.ref(0, 1169385);

procedure ldv_file_operations_instance_write_0_4($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_write_0_4($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref)
{
  var vslice_dummy_var_273: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3371} {:cexpr "ldv_file_operations_instance_write_0_4:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 3372} vslice_dummy_var_273 := devirtbounce.20($p0, $p1, $p2, $i3, $p4);
    goto corral_source_split_14247;

  corral_source_split_14247:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_release_0_2: ref;

axiom ldv_file_operations_instance_release_0_2 == $sub.ref(0, 1170417);

procedure ldv_file_operations_instance_release_0_2($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_release_0_2($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_274: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14249;

  corral_source_split_14249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3373} vslice_dummy_var_274 := drm_release($p1, $p2);
    goto corral_source_split_14250;

  corral_source_split_14250:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_108: ref;

axiom ldv_file_operations_instance_callback_0_108 == $sub.ref(0, 1171449);

procedure ldv_file_operations_instance_callback_0_108($p0: ref, $p1: ref, $i2: i32, $i3: i64);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_108($p0: ref, $p1: ref, $i2: i32, $i3: i64)
{
  var vslice_dummy_var_275: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3374} {:cexpr "ldv_file_operations_instance_callback_0_108:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 3375} {:cexpr "ldv_file_operations_instance_callback_0_108:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_14252;

  corral_source_split_14252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3376} vslice_dummy_var_275 := drm_ioctl($p1, $i2, $i3);
    goto corral_source_split_14253;

  corral_source_split_14253:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_105: ref;

axiom ldv_file_operations_instance_callback_0_105 == $sub.ref(0, 1172481);

procedure ldv_file_operations_instance_callback_0_105($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $CurrAddr, $M.64, $M.40, assertsPassed, $M.35, $M.65;



implementation ldv_file_operations_instance_callback_0_105($p0: ref, $p1: ref)
{
  var vslice_dummy_var_276: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14255;

  corral_source_split_14255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3377} vslice_dummy_var_276 := qxl_driver_unload($p1);
    goto SeqInstr_2266, SeqInstr_2267;

  SeqInstr_2267:
    assume assertsPassed;
    goto SeqInstr_2268;

  SeqInstr_2268:
    goto corral_source_split_14256;

  corral_source_split_14256:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2266:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_callback_0_102: ref;

axiom ldv_file_operations_instance_callback_0_102 == $sub.ref(0, 1173513);

procedure ldv_file_operations_instance_callback_0_102($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_102($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_277: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14258;

  corral_source_split_14258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3378} vslice_dummy_var_277 := drm_pci_set_busid($p1, $p2);
    goto corral_source_split_14259;

  corral_source_split_14259:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_99: ref;

axiom ldv_file_operations_instance_callback_0_99 == $sub.ref(0, 1174545);

procedure ldv_file_operations_instance_callback_0_99($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_99($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref)
{
  var vslice_dummy_var_278: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3379} {:cexpr "ldv_file_operations_instance_callback_0_99:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_14261;

  corral_source_split_14261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3380} vslice_dummy_var_278 := drm_read($p1, $p2, $i3, $p4);
    goto corral_source_split_14262;

  corral_source_split_14262:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_96: ref;

axiom ldv_file_operations_instance_callback_0_96 == $sub.ref(0, 1175577);

procedure ldv_file_operations_instance_callback_0_96($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $p5: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_96($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $p5: ref)
{
  var vslice_dummy_var_279: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3381} {:cexpr "ldv_file_operations_instance_callback_0_96:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 3382} {:cexpr "ldv_file_operations_instance_callback_0_96:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_14264;

  corral_source_split_14264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3383} vslice_dummy_var_279 := drm_gem_prime_handle_to_fd($p1, $p2, $i3, $i4, $p5);
    goto corral_source_split_14265;

  corral_source_split_14265:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_93: ref;

axiom ldv_file_operations_instance_callback_0_93 == $sub.ref(0, 1176609);

procedure ldv_file_operations_instance_callback_0_93($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_93($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref)
{
  var vslice_dummy_var_280: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3384} {:cexpr "ldv_file_operations_instance_callback_0_93:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_14267;

  corral_source_split_14267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3385} vslice_dummy_var_280 := drm_gem_prime_fd_to_handle($p1, $p2, $i3, $p4);
    goto corral_source_split_14268;

  corral_source_split_14268:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_92: ref;

axiom ldv_file_operations_instance_callback_0_92 == $sub.ref(0, 1177641);

procedure ldv_file_operations_instance_callback_0_92($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_92($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_281: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14270;

  corral_source_split_14270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3386} vslice_dummy_var_281 := drm_poll($p1, $p2);
    goto corral_source_split_14271;

  corral_source_split_14271:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_91: ref;

axiom ldv_file_operations_instance_callback_0_91 == $sub.ref(0, 1178673);

procedure ldv_file_operations_instance_callback_0_91($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.76, $M.6, $CurrAddr;



implementation ldv_file_operations_instance_callback_0_91($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_282: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14273;

  corral_source_split_14273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3387} vslice_dummy_var_282 := qxl_mmap($p1, $p2);
    goto corral_source_split_14274;

  corral_source_split_14274:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_88: ref;

axiom ldv_file_operations_instance_callback_0_88 == $sub.ref(0, 1179705);

procedure ldv_file_operations_instance_callback_0_88($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.32, $M.42, $CurrAddr, $M.64, $M.53, $M.75, $M.71, $M.43, assertsPassed, $M.36, $M.40, $M.55, $M.35, $M.65, $M.67, $M.68, $M.69, $M.70;



implementation ldv_file_operations_instance_callback_0_88($p0: ref, $p1: ref, $i2: i64)
{
  var vslice_dummy_var_283: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3388} {:cexpr "ldv_file_operations_instance_callback_0_88:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_14276;

  corral_source_split_14276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3389} vslice_dummy_var_283 := qxl_driver_load($p1, $i2);
    goto SeqInstr_2269, SeqInstr_2270;

  SeqInstr_2270:
    assume assertsPassed;
    goto SeqInstr_2271;

  SeqInstr_2271:
    goto corral_source_split_14277;

  corral_source_split_14277:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2269:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_callback_0_85: ref;

axiom ldv_file_operations_instance_callback_0_85 == $sub.ref(0, 1180737);

procedure ldv_file_operations_instance_callback_0_85($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $M.56, $M.107, $M.108, $M.109, $M.110, $M.111, $CurrAddr, $M.41, assertsPassed;



implementation ldv_file_operations_instance_callback_0_85($p0: ref, $i1: i32, $p2: ref)
{
  var vslice_dummy_var_284: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3390} {:cexpr "ldv_file_operations_instance_callback_0_85:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_14279;

  corral_source_split_14279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3391} vslice_dummy_var_284 := qxl_irq_handler($i1, $p2);
    goto SeqInstr_2272, SeqInstr_2273;

  SeqInstr_2273:
    assume assertsPassed;
    goto SeqInstr_2274;

  SeqInstr_2274:
    goto corral_source_split_14280;

  corral_source_split_14280:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2272:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_callback_0_82: ref;

axiom ldv_file_operations_instance_callback_0_82 == $sub.ref(0, 1181769);

procedure ldv_file_operations_instance_callback_0_82($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_82($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_285: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3392} {:cexpr "ldv_file_operations_instance_callback_0_82:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_14282;

  corral_source_split_14282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3393} vslice_dummy_var_285 := qxl_noop_get_vblank_counter($p1, $i2);
    goto corral_source_split_14283;

  corral_source_split_14283:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_81: ref;

axiom ldv_file_operations_instance_callback_0_81 == $sub.ref(0, 1182801);

procedure ldv_file_operations_instance_callback_0_81($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_81($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14285;

  corral_source_split_14285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3394} qxl_gem_prime_vunmap($p1, $p2);
    goto corral_source_split_14286;

  corral_source_split_14286:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_80: ref;

axiom ldv_file_operations_instance_callback_0_80 == $sub.ref(0, 1183833);

procedure ldv_file_operations_instance_callback_0_80($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_80($p0: ref, $p1: ref)
{
  var vslice_dummy_var_286: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14288;

  corral_source_split_14288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3395} vslice_dummy_var_286 := qxl_gem_prime_vmap($p1);
    goto corral_source_split_14289;

  corral_source_split_14289:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_79: ref;

axiom ldv_file_operations_instance_callback_0_79 == $sub.ref(0, 1184865);

procedure ldv_file_operations_instance_callback_0_79($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_79($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14291;

  corral_source_split_14291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3396} qxl_gem_prime_unpin($p1);
    goto corral_source_split_14292;

  corral_source_split_14292:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_78: ref;

axiom ldv_file_operations_instance_callback_0_78 == $sub.ref(0, 1185897);

procedure ldv_file_operations_instance_callback_0_78($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_78($p0: ref, $p1: ref)
{
  var vslice_dummy_var_287: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14294;

  corral_source_split_14294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3397} vslice_dummy_var_287 := qxl_gem_prime_pin($p1);
    goto corral_source_split_14295;

  corral_source_split_14295:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_77: ref;

axiom ldv_file_operations_instance_callback_0_77 == $sub.ref(0, 1186929);

procedure ldv_file_operations_instance_callback_0_77($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_77($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_288: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14297;

  corral_source_split_14297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3398} vslice_dummy_var_288 := qxl_gem_prime_mmap($p1, $p2);
    goto corral_source_split_14298;

  corral_source_split_14298:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_74: ref;

axiom ldv_file_operations_instance_callback_0_74 == $sub.ref(0, 1187961);

procedure ldv_file_operations_instance_callback_0_74($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_74($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_289: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14300;

  corral_source_split_14300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3399} vslice_dummy_var_289 := qxl_gem_prime_import_sg_table($p1, $p2, $p3);
    goto corral_source_split_14301;

  corral_source_split_14301:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_71: ref;

axiom ldv_file_operations_instance_callback_0_71 == $sub.ref(0, 1188993);

procedure ldv_file_operations_instance_callback_0_71($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_71($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_290: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14303;

  corral_source_split_14303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3400} vslice_dummy_var_290 := drm_gem_prime_import($p1, $p2);
    goto corral_source_split_14304;

  corral_source_split_14304:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_70: ref;

axiom ldv_file_operations_instance_callback_0_70 == $sub.ref(0, 1190025);

procedure ldv_file_operations_instance_callback_0_70($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_70($p0: ref, $p1: ref)
{
  var vslice_dummy_var_291: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14306;

  corral_source_split_14306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3401} vslice_dummy_var_291 := qxl_gem_prime_get_sg_table($p1);
    goto corral_source_split_14307;

  corral_source_split_14307:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_67: ref;

axiom ldv_file_operations_instance_callback_0_67 == $sub.ref(0, 1191057);

procedure ldv_file_operations_instance_callback_0_67($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_67($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var vslice_dummy_var_292: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3402} {:cexpr "ldv_file_operations_instance_callback_0_67:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_14309;

  corral_source_split_14309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3403} vslice_dummy_var_292 := drm_gem_prime_export($p1, $p2, $i3);
    goto corral_source_split_14310;

  corral_source_split_14310:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_66: ref;

axiom ldv_file_operations_instance_callback_0_66 == $sub.ref(0, 1192089);

procedure ldv_file_operations_instance_callback_0_66($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_66($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_293: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14312;

  corral_source_split_14312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3404} vslice_dummy_var_293 := qxl_gem_object_open($p1, $p2);
    goto corral_source_split_14313;

  corral_source_split_14313:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_65: ref;

axiom ldv_file_operations_instance_callback_0_65 == $sub.ref(0, 1193121);

procedure ldv_file_operations_instance_callback_0_65($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $CurrAddr;



implementation ldv_file_operations_instance_callback_0_65($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14315;

  corral_source_split_14315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3405} qxl_gem_object_free($p1);
    goto corral_source_split_14316;

  corral_source_split_14316:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_64: ref;

axiom ldv_file_operations_instance_callback_0_64 == $sub.ref(0, 1194153);

procedure ldv_file_operations_instance_callback_0_64($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_64($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14318;

  corral_source_split_14318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3406} qxl_gem_object_close($p1, $p2);
    goto corral_source_split_14319;

  corral_source_split_14319:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_63: ref;

axiom ldv_file_operations_instance_callback_0_63 == $sub.ref(0, 1195185);

procedure ldv_file_operations_instance_callback_0_63($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_63($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_294: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14321;

  corral_source_split_14321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3407} vslice_dummy_var_294 := drm_fb_helper_setcmap($p1, $p2);
    goto corral_source_split_14322;

  corral_source_split_14322:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_60: ref;

axiom ldv_file_operations_instance_callback_0_60 == $sub.ref(0, 1196217);

procedure ldv_file_operations_instance_callback_0_60($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_60($p0: ref, $p1: ref)
{
  var vslice_dummy_var_295: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14324;

  corral_source_split_14324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3408} vslice_dummy_var_295 := drm_fb_helper_set_par($p1);
    goto corral_source_split_14325;

  corral_source_split_14325:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_59: ref;

axiom ldv_file_operations_instance_callback_0_59 == $sub.ref(0, 1197249);

procedure ldv_file_operations_instance_callback_0_59($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_59($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_296: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14327;

  corral_source_split_14327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3409} vslice_dummy_var_296 := drm_fb_helper_pan_display($p1, $p2);
    goto corral_source_split_14328;

  corral_source_split_14328:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_56: ref;

axiom ldv_file_operations_instance_callback_0_56 == $sub.ref(0, 1198281);

procedure ldv_file_operations_instance_callback_0_56($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.72, $CurrAddr, $M.42, $M.38, $M.39, $M.46, $M.69, $M.70, $M.32, assertsPassed, $M.73, $M.74, $M.41, $M.71, $M.43, $M.52, $M.40, $M.64, $M.36, $M.53, $M.49, $M.44, $M.35, $M.75, $M.37, $M.55, $M.65, $M.54;



implementation ldv_file_operations_instance_callback_0_56($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14330;

  corral_source_split_14330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3410} qxl_fb_imageblit($p1, $p2);
    goto SeqInstr_2275, SeqInstr_2276;

  SeqInstr_2276:
    assume assertsPassed;
    goto SeqInstr_2277;

  SeqInstr_2277:
    goto corral_source_split_14331;

  corral_source_split_14331:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2275:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_callback_0_53: ref;

axiom ldv_file_operations_instance_callback_0_53 == $sub.ref(0, 1199313);

procedure ldv_file_operations_instance_callback_0_53($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.67, $M.68, $M.72, $CurrAddr, $M.42, $M.52, $M.69, $M.70, $M.32, assertsPassed, $M.53, $M.49, $M.40, $M.44, $M.41, $M.71, $M.43, $M.75, $M.64, $M.36, $M.37, $M.73, $M.74, $M.35, $M.55, $M.65, $M.54;



implementation ldv_file_operations_instance_callback_0_53($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14333;

  corral_source_split_14333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3411} qxl_fb_fillrect($p1, $p2);
    goto SeqInstr_2278, SeqInstr_2279;

  SeqInstr_2279:
    assume assertsPassed;
    goto SeqInstr_2280;

  SeqInstr_2280:
    goto corral_source_split_14334;

  corral_source_split_14334:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2278:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_callback_0_50: ref;

axiom ldv_file_operations_instance_callback_0_50 == $sub.ref(0, 1200345);

procedure ldv_file_operations_instance_callback_0_50($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_50($p0: ref, $p1: ref)
{
  var vslice_dummy_var_297: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14336;

  corral_source_split_14336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3412} vslice_dummy_var_297 := drm_fb_helper_debug_leave($p1);
    goto corral_source_split_14337;

  corral_source_split_14337:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_47: ref;

axiom ldv_file_operations_instance_callback_0_47 == $sub.ref(0, 1201377);

procedure ldv_file_operations_instance_callback_0_47($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_47($p0: ref, $p1: ref)
{
  var vslice_dummy_var_298: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14339;

  corral_source_split_14339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3413} vslice_dummy_var_298 := drm_fb_helper_debug_enter($p1);
    goto corral_source_split_14340;

  corral_source_split_14340:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_44: ref;

axiom ldv_file_operations_instance_callback_0_44 == $sub.ref(0, 1202409);

procedure ldv_file_operations_instance_callback_0_44($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.67, $M.68, $M.72, $M.42, $M.52, $M.69, $M.70, $M.32, assertsPassed, $CurrAddr, $M.53, $M.49, $M.40, $M.44, $M.41, $M.71, $M.43, $M.75, $M.64, $M.36, $M.37, $M.73, $M.74, $M.35, $M.55, $M.65, $M.54;



implementation ldv_file_operations_instance_callback_0_44($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14342;

  corral_source_split_14342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3414} qxl_fb_copyarea($p1, $p2);
    goto SeqInstr_2281, SeqInstr_2282;

  SeqInstr_2282:
    assume assertsPassed;
    goto SeqInstr_2283;

  SeqInstr_2283:
    goto corral_source_split_14343;

  corral_source_split_14343:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2281:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_callback_0_43: ref;

axiom ldv_file_operations_instance_callback_0_43 == $sub.ref(0, 1203441);

procedure ldv_file_operations_instance_callback_0_43($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_43($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_299: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14345;

  corral_source_split_14345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3415} vslice_dummy_var_299 := drm_fb_helper_check_var($p1, $p2);
    goto corral_source_split_14346;

  corral_source_split_14346:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_40: ref;

axiom ldv_file_operations_instance_callback_0_40 == $sub.ref(0, 1204473);

procedure ldv_file_operations_instance_callback_0_40($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_40($p0: ref, $i1: i32, $p2: ref)
{
  var vslice_dummy_var_300: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3416} {:cexpr "ldv_file_operations_instance_callback_0_40:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_14348;

  corral_source_split_14348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3417} vslice_dummy_var_300 := drm_fb_helper_blank($i1, $p2);
    goto corral_source_split_14349;

  corral_source_split_14349:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_37: ref;

axiom ldv_file_operations_instance_callback_0_37 == $sub.ref(0, 1205505);

procedure ldv_file_operations_instance_callback_0_37($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_37($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_301: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3418} {:cexpr "ldv_file_operations_instance_callback_0_37:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_14351;

  corral_source_split_14351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3419} vslice_dummy_var_301 := qxl_noop_enable_vblank($p1, $i2);
    goto corral_source_split_14352;

  corral_source_split_14352:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_34: ref;

axiom ldv_file_operations_instance_callback_0_34 == $sub.ref(0, 1206537);

procedure ldv_file_operations_instance_callback_0_34($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref);
  free requires assertsPassed;
  modifies $M.6, $M.35, assertsPassed;



implementation ldv_file_operations_instance_callback_0_34($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref)
{
  var vslice_dummy_var_302: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3420} {:cexpr "ldv_file_operations_instance_callback_0_34:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_14354;

  corral_source_split_14354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3421} vslice_dummy_var_302 := qxl_mode_dumb_mmap($p1, $p2, $i3, $p4);
    goto SeqInstr_2284, SeqInstr_2285;

  SeqInstr_2285:
    assume assertsPassed;
    goto SeqInstr_2286;

  SeqInstr_2286:
    goto corral_source_split_14355;

  corral_source_split_14355:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2284:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_callback_0_31: ref;

axiom ldv_file_operations_instance_callback_0_31 == $sub.ref(0, 1207569);

procedure ldv_file_operations_instance_callback_0_31($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_31($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var vslice_dummy_var_303: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3422} {:cexpr "ldv_file_operations_instance_callback_0_31:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_14357;

  corral_source_split_14357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3423} vslice_dummy_var_303 := drm_gem_dumb_destroy($p1, $p2, $i3);
    goto corral_source_split_14358;

  corral_source_split_14358:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_28: ref;

axiom ldv_file_operations_instance_callback_0_28 == $sub.ref(0, 1208601);

procedure ldv_file_operations_instance_callback_0_28($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.61, $M.6, $M.33, $M.62, $M.63, $M.32, $CurrAddr, $M.36, $M.35, assertsPassed;



implementation ldv_file_operations_instance_callback_0_28($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_304: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14360;

  corral_source_split_14360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3424} vslice_dummy_var_304 := qxl_mode_dumb_create($p1, $p2, $p3);
    goto SeqInstr_2287, SeqInstr_2288;

  SeqInstr_2288:
    assume assertsPassed;
    goto SeqInstr_2289;

  SeqInstr_2289:
    goto corral_source_split_14361;

  corral_source_split_14361:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2287:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_callback_0_25: ref;

axiom ldv_file_operations_instance_callback_0_25 == $sub.ref(0, 1209633);

procedure ldv_file_operations_instance_callback_0_25($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_25($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3425} {:cexpr "ldv_file_operations_instance_callback_0_25:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_14363;

  corral_source_split_14363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3426} qxl_noop_disable_vblank($p1, $i2);
    goto corral_source_split_14364;

  corral_source_split_14364:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_22: ref;

axiom ldv_file_operations_instance_callback_0_22 == $sub.ref(0, 1210665);

procedure ldv_file_operations_instance_callback_0_22($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_22($p0: ref, $p1: ref)
{
  var vslice_dummy_var_305: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14366;

  corral_source_split_14366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3427} vslice_dummy_var_305 := qxl_debugfs_init($p1);
    goto corral_source_split_14367;

  corral_source_split_14367:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_5: ref;

axiom ldv_file_operations_instance_callback_0_5 == $sub.ref(0, 1211697);

procedure ldv_file_operations_instance_callback_0_5($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_5($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14369;

  corral_source_split_14369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3428} qxl_debugfs_takedown($p1);
    goto corral_source_split_14370;

  corral_source_split_14370:
    assume {:verifier.code 0} true;
    return;
}



const ldv_filter_positive_int: ref;

axiom ldv_filter_positive_int == $sub.ref(0, 1212729);

procedure ldv_filter_positive_int($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_positive_int($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3429} {:cexpr "ldv_filter_positive_int:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_14372;

  corral_source_split_14372:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_14373;

  corral_source_split_14373:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_14374;

  corral_source_split_14374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3430} ldv_assume($i2);
    goto corral_source_split_14375;

  corral_source_split_14375:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_dispatch_register_pci_instance_2_18_28: ref;

axiom ldv_dispatch_register_pci_instance_2_18_28 == $sub.ref(0, 1213761);

procedure ldv_dispatch_register_pci_instance_2_18_28();
  free requires assertsPassed;
  modifies $M.181, $M.182, $CurrAddr, $M.183, $M.184, $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $M.36, assertsPassed, $M.71, $M.43, $M.41, $M.35, $M.40, $M.72, $M.38, $M.39, $M.52, $M.64, $M.53, $M.75, $M.37, $M.44, $M.55, $M.49, $M.73, $M.74, $M.65, $M.54;



implementation ldv_dispatch_register_pci_instance_2_18_28()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14377;

  corral_source_split_14377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3431} $p0 := ldv_xmalloc(4);
    goto corral_source_split_14378;

  corral_source_split_14378:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_14379;

  corral_source_split_14379:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_14380;

  corral_source_split_14380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3432} ldv_pci_pci_instance_1($p2);
    goto SeqInstr_2290, SeqInstr_2291;

  SeqInstr_2291:
    assume assertsPassed;
    goto SeqInstr_2292;

  SeqInstr_2292:
    goto corral_source_split_14381;

  corral_source_split_14381:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2290:
    assume !assertsPassed;
    return;
}



const ldv_pci_pci_instance_1: ref;

axiom ldv_pci_pci_instance_1 == $sub.ref(0, 1214793);

procedure ldv_pci_pci_instance_1($p0: ref);
  free requires assertsPassed;
  modifies $M.181, $M.182, $CurrAddr, $M.183, $M.184, $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $M.36, assertsPassed, $M.71, $M.43, $M.41, $M.35, $M.40, $M.72, $M.38, $M.39, $M.52, $M.64, $M.53, $M.75, $M.37, $M.44, $M.55, $M.49, $M.73, $M.74, $M.65, $M.54;



implementation ldv_pci_pci_instance_1($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i19: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3433} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_14383;

  corral_source_split_14383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3434} $p2 := ldv_xmalloc(2968);
    goto corral_source_split_14384;

  corral_source_split_14384:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_14385;

  corral_source_split_14385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3435} $p4 := ldv_xmalloc(32);
    goto corral_source_split_14386;

  corral_source_split_14386:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_14387;

  corral_source_split_14387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3436} $i6 := ldv_undef_int();
    call {:si_unique_call 3437} {:cexpr "tmp___2"} boogie_si_record_i32($i6);
    goto corral_source_split_14388;

  corral_source_split_14388:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_14389;

  corral_source_split_14389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_14393;

  corral_source_split_14393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3438} ldv_free($p24);
    goto corral_source_split_14394;

  corral_source_split_14394:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p5);
    goto corral_source_split_14395;

  corral_source_split_14395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3439} ldv_free($p25);
    goto corral_source_split_14396;

  corral_source_split_14396:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_14391;

  corral_source_split_14391:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p8, $p9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23, $i26, $i19, $i27, $i28, $i29, $i30, $i31, $p32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $i40, $i41, $i42, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $i50, $i51, $i52, $i53, $p54, $p55, $i56, $i57, $p58, $p59, $p60, $p61, $i62, $i63, $p64, $p65, $p66, $p67, $i68, $i69, $p70, $p71, $p72, $p73 := ldv_pci_pci_instance_1_loop_$bb4($p1, $p3, $p5, $p8, $p9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23, $i26, $i19, $i27, $i28, $i29, $i30, $i31, $p32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $i40, $i41, $i42, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $i50, $i51, $i52, $i53, $p54, $p55, $i56, $i57, $p58, $p59, $p60, $p61, $i62, $i63, $p64, $p65, $p66, $p67, $i68, $i69, $p70, $p71, $p72, $p73);
    goto $bb4_last;

  corral_source_split_14398:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_14399;

  corral_source_split_14399:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.168, $p8);
    goto corral_source_split_14400;

  corral_source_split_14400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3441} $i10 := ldv_pci_instance_probe_1_17($p9, $p3, $p5);
    call {:si_unique_call 3442} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32($i10);
    goto corral_source_split_14401;

  corral_source_split_14401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3443} $i11 := ldv_ldv_post_probe_117($i10);
    goto SeqInstr_2293, SeqInstr_2294;

  SeqInstr_2294:
    assume assertsPassed;
    goto SeqInstr_2295;

  SeqInstr_2295:
    call {:si_unique_call 3444} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32($i11);
    goto corral_source_split_14402;

  corral_source_split_14402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3445} $i12 := ldv_undef_int();
    call {:si_unique_call 3446} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_14403;

  corral_source_split_14403:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_14404;

  corral_source_split_14404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_14411;

  corral_source_split_14411:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i11, 0);
    goto corral_source_split_14412;

  corral_source_split_14412:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_14413;

  corral_source_split_14413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3448} ldv_assume($i21);
    goto corral_source_split_14414;

  corral_source_split_14414:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3451} $i22 := ldv_undef_int();
    call {:si_unique_call 3452} {:cexpr "tmp___2"} boogie_si_record_i32($i22);
    goto corral_source_split_14422;

  corral_source_split_14422:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_14423;

  corral_source_split_14423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    goto corral_source_split_14425;

  corral_source_split_14425:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb13_dummy;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_14406;

  corral_source_split_14406:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i11, 0);
    goto corral_source_split_14407;

  corral_source_split_14407:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_14408;

  corral_source_split_14408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3447} ldv_assume($i15);
    goto corral_source_split_14409;

  corral_source_split_14409:
    assume {:verifier.code 0} true;
    $i16 := $i11;
    goto $bb7;

  $bb7:
    call $i16, $i17, $i18, $i26, $i19, $i27, $i28, $i30, $i31, $p32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $i40, $i41, $i42, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $i50, $i51, $i52, $i53, $p54, $p55, $i56, $i57, $p58, $p59, $p60, $p61, $i62, $i63, $p64, $p65 := ldv_pci_pci_instance_1_loop_$bb7($p1, $p3, $i16, $i17, $i18, $i26, $i19, $i27, $i28, $i30, $i31, $p32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $i40, $i41, $i42, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $i50, $i51, $i52, $i53, $p54, $p55, $i56, $i57, $p58, $p59, $p60, $p61, $i62, $i63, $p64, $p65);
    goto $bb7_last;

  corral_source_split_14416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3449} $i17 := ldv_undef_int();
    call {:si_unique_call 3450} {:cexpr "tmp___3"} boogie_si_record_i32($i17);
    goto corral_source_split_14417;

  corral_source_split_14417:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_14418;

  corral_source_split_14418:
    assume {:verifier.code 0} true;
    $i19 := $i17;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i19, 2);
    goto corral_source_split_14432;

  corral_source_split_14432:
    assume {:verifier.code 0} true;
    $i28 := $i19;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 3);
    goto corral_source_split_14441;

  corral_source_split_14441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3455} ldv_stop();
    goto corral_source_split_14450;

  corral_source_split_14450:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb23:
    assume $i29 == 1;
    goto corral_source_split_14443;

  corral_source_split_14443:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_14445;

  corral_source_split_14445:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.178, $p66);
    goto corral_source_split_14446;

  corral_source_split_14446:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_14447;

  corral_source_split_14447:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_14448;

  corral_source_split_14448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_14500;

  corral_source_split_14500:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.180, $p72);
    goto corral_source_split_14501;

  corral_source_split_14501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3467} ldv_pci_instance_release_1_2($p73, $p3);
    goto corral_source_split_14502;

  corral_source_split_14502:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb41:
    assume $i69 == 1;
    goto corral_source_split_14495;

  corral_source_split_14495:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_14496;

  corral_source_split_14496:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.179, $p70);
    goto corral_source_split_14497;

  corral_source_split_14497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3466} ldv_pci_instance_shutdown_1_3($p71, $p3);
    goto SeqInstr_2308, SeqInstr_2309;

  SeqInstr_2309:
    assume assertsPassed;
    goto SeqInstr_2310;

  SeqInstr_2310:
    goto corral_source_split_14498;

  corral_source_split_14498:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_2308:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i27 == 1;
    goto corral_source_split_14434;

  corral_source_split_14434:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_14436;

  corral_source_split_14436:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.169, $p32);
    goto corral_source_split_14437;

  corral_source_split_14437:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_14438;

  corral_source_split_14438:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_14439;

  corral_source_split_14439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i41 := $i16;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_14459;

  corral_source_split_14459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3458} $i42 := ldv_filter_err_code($i41);
    call {:si_unique_call 3459} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32($i42);
    goto corral_source_split_14460;

  corral_source_split_14460:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_14461;

  corral_source_split_14461:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.172, $p43);
    goto corral_source_split_14462;

  corral_source_split_14462:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_14463;

  corral_source_split_14463:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_14464;

  corral_source_split_14464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i52 := $i42;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_14473;

  corral_source_split_14473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3462} $i53 := ldv_filter_err_code($i52);
    call {:si_unique_call 3463} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32($i53);
    goto corral_source_split_14474;

  corral_source_split_14474:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_14475;

  corral_source_split_14475:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.174, $p54);
    goto corral_source_split_14476;

  corral_source_split_14476:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_14477;

  corral_source_split_14477:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_14478;

  corral_source_split_14478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_14485;

  corral_source_split_14485:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.176, $p60);
    goto corral_source_split_14486;

  corral_source_split_14486:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_14487;

  corral_source_split_14487:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_14488;

  corral_source_split_14488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i16 := $i53;
    goto $bb40_dummy;

  $bb38:
    assume $i63 == 1;
    goto corral_source_split_14490;

  corral_source_split_14490:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_14491;

  corral_source_split_14491:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.177, $p64);
    goto corral_source_split_14492;

  corral_source_split_14492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3465} ldv_pci_instance_resume_1_5($p65, $p3);
    goto SeqInstr_2305, SeqInstr_2306;

  SeqInstr_2306:
    assume assertsPassed;
    goto SeqInstr_2307;

  SeqInstr_2307:
    goto corral_source_split_14493;

  corral_source_split_14493:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_2305:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i57 == 1;
    goto corral_source_split_14480;

  corral_source_split_14480:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_14481;

  corral_source_split_14481:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.175, $p58);
    goto corral_source_split_14482;

  corral_source_split_14482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3464} ldv_pci_instance_resume_early_1_6($p59, $p3);
    goto SeqInstr_2302, SeqInstr_2303;

  SeqInstr_2303:
    assume assertsPassed;
    goto SeqInstr_2304;

  SeqInstr_2304:
    goto corral_source_split_14483;

  corral_source_split_14483:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_2302:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i46 == 1;
    goto corral_source_split_14466;

  corral_source_split_14466:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_14467;

  corral_source_split_14467:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.173, $p47);
    goto corral_source_split_14468;

  corral_source_split_14468:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_14469;

  corral_source_split_14469:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.171, $p49);
    goto corral_source_split_14470;

  corral_source_split_14470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3460} $i51 := ldv_pci_instance_suspend_late_1_7($p48, $p3, $i50);
    goto SeqInstr_2299, SeqInstr_2300;

  SeqInstr_2300:
    assume assertsPassed;
    goto SeqInstr_2301;

  SeqInstr_2301:
    call {:si_unique_call 3461} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32($i51);
    goto corral_source_split_14471;

  corral_source_split_14471:
    assume {:verifier.code 0} true;
    $i52 := $i51;
    goto $bb34;

  SeqInstr_2299:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i35 == 1;
    goto corral_source_split_14452;

  corral_source_split_14452:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_14453;

  corral_source_split_14453:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.170, $p36);
    goto corral_source_split_14454;

  corral_source_split_14454:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_14455;

  corral_source_split_14455:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.171, $p38);
    goto corral_source_split_14456;

  corral_source_split_14456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3456} $i40 := ldv_pci_instance_suspend_1_8($p37, $p3, $i39);
    goto SeqInstr_2296, SeqInstr_2297;

  SeqInstr_2297:
    assume assertsPassed;
    goto SeqInstr_2298;

  SeqInstr_2298:
    call {:si_unique_call 3457} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32($i40);
    goto corral_source_split_14457;

  corral_source_split_14457:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb31;

  SeqInstr_2296:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_14420;

  corral_source_split_14420:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call $i26, $i30, $i31 := ldv_pci_pci_instance_1_loop_$bb11($i26, $i30, $i31);
    goto $bb11_last;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3453} $i30 := ldv_undef_int();
    call {:si_unique_call 3454} {:cexpr "tmp___3"} boogie_si_record_i32($i30);
    goto corral_source_split_14427;

  corral_source_split_14427:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 1);
    goto corral_source_split_14428;

  corral_source_split_14428:
    assume {:verifier.code 0} true;
    $i26 := $i30;
    assume true;
    goto $bb28, $bb17;

  $bb17:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_14430;

  corral_source_split_14430:
    assume {:verifier.code 0} true;
    $i19 := $i26;
    goto $bb10;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb28_dummy;

  SeqInstr_2293:
    assume !assertsPassed;
    return;

  $bb28_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb40_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_14416;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3440} ldv_ldv_pre_probe_116();
    goto corral_source_split_14398;
}



const ldv_ldv_pre_probe_116: ref;

axiom ldv_ldv_pre_probe_116 == $sub.ref(0, 1215825);

procedure ldv_ldv_pre_probe_116();
  free requires assertsPassed;
  modifies $M.183, $M.184;



implementation ldv_ldv_pre_probe_116()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14504;

  corral_source_split_14504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3468} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_14505;

  corral_source_split_14505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3469} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_14506;

  corral_source_split_14506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3470} ldv_pre_probe();
    goto corral_source_split_14507;

  corral_source_split_14507:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pci_instance_probe_1_17: ref;

axiom ldv_pci_instance_probe_1_17 == $sub.ref(0, 1216857);

procedure ldv_pci_instance_probe_1_17($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_pci_instance_probe_1_17($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14509;

  corral_source_split_14509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3471} $i3 := qxl_pci_probe($p1, $p2);
    call {:si_unique_call 3472} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_14510;

  corral_source_split_14510:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_ldv_post_probe_117: ref;

axiom ldv_ldv_post_probe_117 == $sub.ref(0, 1217889);

procedure ldv_ldv_post_probe_117($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.183, $M.184, assertsPassed;



implementation ldv_ldv_post_probe_117($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3473} {:cexpr "ldv_ldv_post_probe_117:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_14512;

  corral_source_split_14512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3474} ldv_linux_net_register_check_return_value_probe($i0);
    goto SeqInstr_2311, SeqInstr_2312;

  SeqInstr_2312:
    assume assertsPassed;
    goto SeqInstr_2313;

  SeqInstr_2313:
    goto corral_source_split_14513;

  corral_source_split_14513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3475} ldv_linux_usb_register_check_return_value_probe($i0);
    goto SeqInstr_2314, SeqInstr_2315;

  SeqInstr_2315:
    assume assertsPassed;
    goto SeqInstr_2316;

  SeqInstr_2316:
    goto corral_source_split_14514;

  corral_source_split_14514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3476} $i1 := ldv_post_probe($i0);
    call {:si_unique_call 3477} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_14515;

  corral_source_split_14515:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_2314:
    assume !assertsPassed;
    return;

  SeqInstr_2311:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_suspend_1_8: ref;

axiom ldv_pci_instance_suspend_1_8 == $sub.ref(0, 1218921);

procedure ldv_pci_instance_suspend_1_8($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.181, $M.6, $CurrAddr, $M.46, $M.32, $M.42, $M.64, $M.53, $M.75, $M.71, $M.43, assertsPassed, $M.36, $M.40, $M.55, $M.35, $M.65, $M.67, $M.68, $M.69, $M.70;



implementation ldv_pci_instance_suspend_1_8($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3478} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.181 := $store.i32($M.181, $p4, $i2);
    goto corral_source_split_14517;

  corral_source_split_14517:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_14518;

  corral_source_split_14518:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.181, $p5);
    call {:si_unique_call 3479} $i7 := devirtbounce.21($p0, $p1, $i6);
    goto SeqInstr_2317, SeqInstr_2318;

  SeqInstr_2318:
    assume assertsPassed;
    goto SeqInstr_2319;

  SeqInstr_2319:
    call {:si_unique_call 3480} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_14519;

  corral_source_split_14519:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_2317:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_suspend_late_1_7: ref;

axiom ldv_pci_instance_suspend_late_1_7 == $sub.ref(0, 1219953);

procedure ldv_pci_instance_suspend_late_1_7($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.182, $M.6, $CurrAddr, $M.46, $M.32, $M.42, $M.64, $M.53, $M.75, $M.71, $M.43, assertsPassed, $M.36, $M.40, $M.55, $M.35, $M.65, $M.67, $M.68, $M.69, $M.70;



implementation ldv_pci_instance_suspend_late_1_7($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3481} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.182 := $store.i32($M.182, $p4, $i2);
    goto corral_source_split_14521;

  corral_source_split_14521:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_14522;

  corral_source_split_14522:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.182, $p5);
    call {:si_unique_call 3482} $i7 := devirtbounce.21($p0, $p1, $i6);
    goto SeqInstr_2320, SeqInstr_2321;

  SeqInstr_2321:
    assume assertsPassed;
    goto SeqInstr_2322;

  SeqInstr_2322:
    call {:si_unique_call 3483} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_14523;

  corral_source_split_14523:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_2320:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_resume_early_1_6: ref;

axiom ldv_pci_instance_resume_early_1_6 == $sub.ref(0, 1220985);

procedure ldv_pci_instance_resume_early_1_6($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation ldv_pci_instance_resume_early_1_6($p0: ref, $p1: ref)
{
  var vslice_dummy_var_306: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3484} vslice_dummy_var_306 := devirtbounce.22($p0, $p1);
    goto SeqInstr_2323, SeqInstr_2324;

  SeqInstr_2324:
    assume assertsPassed;
    goto SeqInstr_2325;

  SeqInstr_2325:
    goto corral_source_split_14525;

  corral_source_split_14525:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2323:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_resume_1_5: ref;

axiom ldv_pci_instance_resume_1_5 == $sub.ref(0, 1222017);

procedure ldv_pci_instance_resume_1_5($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation ldv_pci_instance_resume_1_5($p0: ref, $p1: ref)
{
  var vslice_dummy_var_307: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3485} vslice_dummy_var_307 := devirtbounce.22($p0, $p1);
    goto SeqInstr_2326, SeqInstr_2327;

  SeqInstr_2327:
    assume assertsPassed;
    goto SeqInstr_2328;

  SeqInstr_2328:
    goto corral_source_split_14527;

  corral_source_split_14527:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2326:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_shutdown_1_3: ref;

axiom ldv_pci_instance_shutdown_1_3 == $sub.ref(0, 1223049);

procedure ldv_pci_instance_shutdown_1_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.36, $CurrAddr, $M.35, $M.40, assertsPassed, $M.72, $M.38, $M.39, $M.42, $M.52, $M.37, $M.41, $M.44, $M.53, $M.55, $M.49, $M.73, $M.74, $M.43, $M.75, $M.65, $M.67, $M.68, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64;



implementation ldv_pci_instance_shutdown_1_3($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3486} devirtbounce.23($p0, $p1);
    goto SeqInstr_2329, SeqInstr_2330;

  SeqInstr_2330:
    assume assertsPassed;
    goto SeqInstr_2331;

  SeqInstr_2331:
    goto corral_source_split_14529;

  corral_source_split_14529:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2329:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_release_1_2: ref;

axiom ldv_pci_instance_release_1_2 == $sub.ref(0, 1224081);

procedure ldv_pci_instance_release_1_2($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_pci_instance_release_1_2($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14531;

  corral_source_split_14531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3487} qxl_pci_remove($p1);
    goto corral_source_split_14532;

  corral_source_split_14532:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_net_register_check_return_value_probe: ref;

axiom ldv_linux_net_register_check_return_value_probe == $sub.ref(0, 1225113);

procedure ldv_linux_net_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.183, assertsPassed;



implementation ldv_linux_net_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3488} {:cexpr "ldv_linux_net_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_14534;

  corral_source_split_14534:
    assume {:verifier.code 0} true;
    $i1 := $M.183;
    goto corral_source_split_14535;

  corral_source_split_14535:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_14536;

  corral_source_split_14536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3490} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_14543;

  corral_source_split_14543:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_14538;

  corral_source_split_14538:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_14539;

  corral_source_split_14539:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_14540;

  corral_source_split_14540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3489} ldv_assert_linux_net_register__wrong_return_value($i4);
    goto SeqInstr_2332, SeqInstr_2333;

  SeqInstr_2333:
    assume assertsPassed;
    goto SeqInstr_2334;

  SeqInstr_2334:
    goto corral_source_split_14541;

  corral_source_split_14541:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_2332:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_register_check_return_value_probe: ref;

axiom ldv_linux_usb_register_check_return_value_probe == $sub.ref(0, 1226145);

procedure ldv_linux_usb_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.184, assertsPassed;



implementation ldv_linux_usb_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3491} {:cexpr "ldv_linux_usb_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_14545;

  corral_source_split_14545:
    assume {:verifier.code 0} true;
    $i1 := $M.184;
    goto corral_source_split_14546;

  corral_source_split_14546:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_14547;

  corral_source_split_14547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3493} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_14554;

  corral_source_split_14554:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_14549;

  corral_source_split_14549:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_14550;

  corral_source_split_14550:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_14551;

  corral_source_split_14551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3492} ldv_assert_linux_usb_register__wrong_return_value($i4);
    goto SeqInstr_2335, SeqInstr_2336;

  SeqInstr_2336:
    assume assertsPassed;
    goto SeqInstr_2337;

  SeqInstr_2337:
    goto corral_source_split_14552;

  corral_source_split_14552:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_2335:
    assume !assertsPassed;
    return;
}



const ldv_post_probe: ref;

axiom ldv_post_probe == $sub.ref(0, 1227177);

procedure ldv_post_probe($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_probe($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3494} {:cexpr "ldv_post_probe:arg:probe_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_14556;

  corral_source_split_14556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3495} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 3496} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_14557;

  corral_source_split_14557:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_assert_linux_usb_register__wrong_return_value: ref;

axiom ldv_assert_linux_usb_register__wrong_return_value == $sub.ref(0, 1228209);

procedure ldv_assert_linux_usb_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3497} {:cexpr "ldv_assert_linux_usb_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_14559;

  corral_source_split_14559:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_14560;

  corral_source_split_14560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_14562;

  corral_source_split_14562:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3498} __VERIFIER_error();
    goto SeqInstr_2338, SeqInstr_2339;

  SeqInstr_2339:
    assume assertsPassed;
    goto SeqInstr_2340;

  SeqInstr_2340:
    goto corral_source_split_14563;

  corral_source_split_14563:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2338:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_usb_register_reset_error_counter: ref;

axiom ldv_linux_usb_register_reset_error_counter == $sub.ref(0, 1229241);

procedure ldv_linux_usb_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.184;



implementation ldv_linux_usb_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14565;

  corral_source_split_14565:
    assume {:verifier.code 0} true;
    $M.184 := 0;
    call {:si_unique_call 3499} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_14566;

  corral_source_split_14566:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_net_register__wrong_return_value: ref;

axiom ldv_assert_linux_net_register__wrong_return_value == $sub.ref(0, 1230273);

procedure ldv_assert_linux_net_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3500} {:cexpr "ldv_assert_linux_net_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_14568;

  corral_source_split_14568:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_14569;

  corral_source_split_14569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_14571;

  corral_source_split_14571:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3501} __VERIFIER_error();
    goto SeqInstr_2341, SeqInstr_2342;

  SeqInstr_2342:
    assume assertsPassed;
    goto SeqInstr_2343;

  SeqInstr_2343:
    goto corral_source_split_14572;

  corral_source_split_14572:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2341:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_net_register_reset_error_counter: ref;

axiom ldv_linux_net_register_reset_error_counter == $sub.ref(0, 1231305);

procedure ldv_linux_net_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.183;



implementation ldv_linux_net_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14574;

  corral_source_split_14574:
    assume {:verifier.code 0} true;
    $M.183 := 0;
    call {:si_unique_call 3502} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_14575;

  corral_source_split_14575:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pre_probe: ref;

axiom ldv_pre_probe == $sub.ref(0, 1232337);

procedure ldv_pre_probe();
  free requires assertsPassed;



implementation ldv_pre_probe()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14577;

  corral_source_split_14577:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_platform_instance_4_18_29: ref;

axiom ldv_dispatch_register_platform_instance_4_18_29 == $sub.ref(0, 1233369);

procedure ldv_dispatch_register_platform_instance_4_18_29();
  free requires assertsPassed;
  modifies $M.183, $M.184, $CurrAddr, $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, assertsPassed, $M.71, $M.43, $M.41, $M.36, $M.64, $M.40, $M.35, $M.72, $M.38, $M.39, $M.52, $M.37, $M.44, $M.53, $M.55, $M.49, $M.73, $M.74, $M.75, $M.65, $M.54;



implementation ldv_dispatch_register_platform_instance_4_18_29()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14579;

  corral_source_split_14579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3503} $p0 := ldv_xmalloc(4);
    goto corral_source_split_14580;

  corral_source_split_14580:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_14581;

  corral_source_split_14581:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_14582;

  corral_source_split_14582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3504} ldv_pm_platform_instance_3($p2);
    goto SeqInstr_2344, SeqInstr_2345;

  SeqInstr_2345:
    assume assertsPassed;
    goto SeqInstr_2346;

  SeqInstr_2346:
    goto corral_source_split_14583;

  corral_source_split_14583:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2344:
    assume !assertsPassed;
    return;
}



const ldv_pm_platform_instance_3: ref;

axiom ldv_pm_platform_instance_3 == $sub.ref(0, 1234401);

procedure ldv_pm_platform_instance_3($p0: ref);
  free requires assertsPassed;
  modifies $M.183, $M.184, $M.6, $M.67, $M.68, $CurrAddr, $M.46, $M.69, $M.70, $M.32, $M.42, assertsPassed, $M.71, $M.43, $M.41, $M.36, $M.64, $M.40, $M.35, $M.72, $M.38, $M.39, $M.52, $M.37, $M.44, $M.53, $M.55, $M.49, $M.73, $M.74, $M.75, $M.65, $M.54;



implementation ldv_pm_platform_instance_3($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i22: i32;
  var $i28: i1;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14585;

  corral_source_split_14585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3505} $i1 := ldv_undef_int();
    call {:si_unique_call 3506} {:cexpr "tmp___1"} boogie_si_record_i32($i1);
    goto corral_source_split_14586;

  corral_source_split_14586:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_14587;

  corral_source_split_14587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_14589;

  corral_source_split_14589:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb4;

  $bb4:
    call $i3, $p4, $p5, $p6, $p7, $i8, $i9, $p10, $p11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i22, $i28, $i29, $p30, $p31, $p32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $i40 := ldv_pm_platform_instance_3_loop_$bb4($i3, $p4, $p5, $p6, $p7, $i8, $i9, $p10, $p11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i22, $i28, $i29, $p30, $p31, $p32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $i40);
    goto $bb4_last;

  corral_source_split_14591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3507} $p4 := ldv_xmalloc(1464);
    goto corral_source_split_14592;

  corral_source_split_14592:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_14593;

  corral_source_split_14593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3508} ldv_ldv_pre_probe_118();
    goto corral_source_split_14594;

  corral_source_split_14594:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($u119, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_14595;

  corral_source_split_14595:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.185, $p6);
    goto corral_source_split_14596;

  corral_source_split_14596:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_14597;

  corral_source_split_14597:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_14598;

  corral_source_split_14598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i3;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_14605;

  corral_source_split_14605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3511} $i14 := ldv_ldv_post_probe_119($i13);
    goto SeqInstr_2350, SeqInstr_2351;

  SeqInstr_2351:
    assume assertsPassed;
    goto SeqInstr_2352;

  SeqInstr_2352:
    call {:si_unique_call 3512} {:cexpr "ldv_3_probed_default"} boogie_si_record_i32($i14);
    goto corral_source_split_14606;

  corral_source_split_14606:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p5);
    goto corral_source_split_14607;

  corral_source_split_14607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3513} ldv_free($p15);
    goto corral_source_split_14608;

  corral_source_split_14608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3514} $i16 := ldv_undef_int();
    call {:si_unique_call 3515} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_14609;

  corral_source_split_14609:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_14610;

  corral_source_split_14610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    goto corral_source_split_14619;

  corral_source_split_14619:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i14, 0);
    goto corral_source_split_14620;

  corral_source_split_14620:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_14621;

  corral_source_split_14621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3519} ldv_assume($i24);
    goto corral_source_split_14622;

  corral_source_split_14622:
    assume {:verifier.code 0} true;
    $i25 := $i14;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_14626;

  corral_source_split_14626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3520} $i26 := ldv_undef_int();
    call {:si_unique_call 3521} {:cexpr "tmp___1"} boogie_si_record_i32($i26);
    goto corral_source_split_14627;

  corral_source_split_14627:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_14628;

  corral_source_split_14628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i27 == 1);
    goto corral_source_split_14630;

  corral_source_split_14630:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i25;
    goto $bb15_dummy;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_14612;

  corral_source_split_14612:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i14, 0);
    goto corral_source_split_14613;

  corral_source_split_14613:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_14614;

  corral_source_split_14614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3516} ldv_assume($i19);
    goto corral_source_split_14615;

  corral_source_split_14615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3517} $i20 := ldv_undef_int();
    call {:si_unique_call 3518} {:cexpr "tmp___2"} boogie_si_record_i32($i20);
    goto corral_source_split_14616;

  corral_source_split_14616:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 1);
    goto corral_source_split_14617;

  corral_source_split_14617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i21 == 1);
    goto corral_source_split_14624;

  corral_source_split_14624:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    goto $bb13;

  $bb13:
    call $i22, $i28, $i29, $i39, $i40 := ldv_pm_platform_instance_3_loop_$bb13($i22, $i28, $i29, $i39, $i40);
    goto $bb13_last;

  $bb20:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i22, 2);
    goto corral_source_split_14641;

  corral_source_split_14641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i22, 3);
    goto corral_source_split_14645;

  corral_source_split_14645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3525} ldv_stop();
    goto corral_source_split_14652;

  corral_source_split_14652:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb25:
    assume $i29 == 1;
    goto corral_source_split_14647;

  corral_source_split_14647:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3523} ldv_dispatch_pm_register_3_6();
    goto SeqInstr_2353, SeqInstr_2354;

  SeqInstr_2354:
    assume assertsPassed;
    goto SeqInstr_2355;

  SeqInstr_2355:
    goto corral_source_split_14649;

  corral_source_split_14649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3524} ldv_dispatch_pm_deregister_3_5();
    goto corral_source_split_14650;

  corral_source_split_14650:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3528} $i39 := ldv_undef_int();
    call {:si_unique_call 3529} {:cexpr "tmp___2"} boogie_si_record_i32($i39);
    goto corral_source_split_14662;

  corral_source_split_14662:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 1);
    goto corral_source_split_14663;

  corral_source_split_14663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb34;

  $bb34:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i39;
    goto $bb34_dummy;

  $bb18:
    assume $i40 == 1;
    goto corral_source_split_14632;

  corral_source_split_14632:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3522} $p30 := ldv_xmalloc(1464);
    goto corral_source_split_14634;

  corral_source_split_14634:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_14635;

  corral_source_split_14635:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($u119, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_14636;

  corral_source_split_14636:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.187, $p32);
    goto corral_source_split_14637;

  corral_source_split_14637:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_14638;

  corral_source_split_14638:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_14639;

  corral_source_split_14639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p31);
    goto corral_source_split_14659;

  corral_source_split_14659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3527} ldv_free($p38);
    goto corral_source_split_14660;

  corral_source_split_14660:
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb14;

  $bb30:
    assume $i35 == 1;
    goto corral_source_split_14654;

  corral_source_split_14654:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($u119, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_14655;

  corral_source_split_14655:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.188, $p36);
    goto corral_source_split_14656;

  corral_source_split_14656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3526} ldv_platform_instance_release_3_3($p37, $p31);
    goto SeqInstr_2356, SeqInstr_2357;

  SeqInstr_2357:
    assume assertsPassed;
    goto SeqInstr_2358;

  SeqInstr_2358:
    goto corral_source_split_14657;

  corral_source_split_14657:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_2356:
    assume !assertsPassed;
    return;

  SeqInstr_2353:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i28 == 1;
    goto corral_source_split_14643;

  corral_source_split_14643:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb11;

  SeqInstr_2350:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_14600;

  corral_source_split_14600:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($u119, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_14601;

  corral_source_split_14601:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.186, $p10);
    goto corral_source_split_14602;

  corral_source_split_14602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3509} $i12 := ldv_platform_instance_probe_3_14($p11, $p5);
    goto SeqInstr_2347, SeqInstr_2348;

  SeqInstr_2348:
    assume assertsPassed;
    goto SeqInstr_2349;

  SeqInstr_2349:
    call {:si_unique_call 3510} {:cexpr "ldv_3_probed_default"} boogie_si_record_i32($i12);
    goto corral_source_split_14603;

  corral_source_split_14603:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb7;

  SeqInstr_2347:
    assume !assertsPassed;
    return;

  $bb34_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_14591;
}



const ldv_ldv_pre_probe_118: ref;

axiom ldv_ldv_pre_probe_118 == $sub.ref(0, 1235433);

procedure ldv_ldv_pre_probe_118();
  free requires assertsPassed;
  modifies $M.183, $M.184;



implementation ldv_ldv_pre_probe_118()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14665;

  corral_source_split_14665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3530} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_14666;

  corral_source_split_14666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3531} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_14667;

  corral_source_split_14667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3532} ldv_pre_probe();
    goto corral_source_split_14668;

  corral_source_split_14668:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_instance_probe_3_14: ref;

axiom ldv_platform_instance_probe_3_14 == $sub.ref(0, 1236465);

procedure ldv_platform_instance_probe_3_14($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation ldv_platform_instance_probe_3_14($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3533} $i2 := devirtbounce.24($p0, $p1);
    goto SeqInstr_2359, SeqInstr_2360;

  SeqInstr_2360:
    assume assertsPassed;
    goto SeqInstr_2361;

  SeqInstr_2361:
    call {:si_unique_call 3534} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_14670;

  corral_source_split_14670:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_2359:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_probe_119: ref;

axiom ldv_ldv_post_probe_119 == $sub.ref(0, 1237497);

procedure ldv_ldv_post_probe_119($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.183, $M.184, assertsPassed;



implementation ldv_ldv_post_probe_119($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3535} {:cexpr "ldv_ldv_post_probe_119:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_14672;

  corral_source_split_14672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3536} ldv_linux_net_register_check_return_value_probe($i0);
    goto SeqInstr_2362, SeqInstr_2363;

  SeqInstr_2363:
    assume assertsPassed;
    goto SeqInstr_2364;

  SeqInstr_2364:
    goto corral_source_split_14673;

  corral_source_split_14673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3537} ldv_linux_usb_register_check_return_value_probe($i0);
    goto SeqInstr_2365, SeqInstr_2366;

  SeqInstr_2366:
    assume assertsPassed;
    goto SeqInstr_2367;

  SeqInstr_2367:
    goto corral_source_split_14674;

  corral_source_split_14674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3538} $i1 := ldv_post_probe($i0);
    call {:si_unique_call 3539} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_14675;

  corral_source_split_14675:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_2365:
    assume !assertsPassed;
    return;

  SeqInstr_2362:
    assume !assertsPassed;
    return;
}



const ldv_platform_instance_release_3_3: ref;

axiom ldv_platform_instance_release_3_3 == $sub.ref(0, 1238529);

procedure ldv_platform_instance_release_3_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation ldv_platform_instance_release_3_3($p0: ref, $p1: ref)
{
  var vslice_dummy_var_308: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3540} vslice_dummy_var_308 := devirtbounce.24($p0, $p1);
    goto SeqInstr_2368, SeqInstr_2369;

  SeqInstr_2369:
    assume assertsPassed;
    goto SeqInstr_2370;

  SeqInstr_2370:
    goto corral_source_split_14677;

  corral_source_split_14677:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2368:
    assume !assertsPassed;
    return;
}



const ldv_entry_EMGentry_18: ref;

axiom ldv_entry_EMGentry_18 == $sub.ref(0, 1239561);

procedure ldv_entry_EMGentry_18($p0: ref);
  free requires assertsPassed;
  modifies $M.183, $M.184, $M.181, $M.182, $M.6, $M.76, $M.56, $M.46, $M.61, $M.33, $M.62, $M.63, $M.79, $M.78, $M.80, $M.81, $M.91, $M.73, $M.42, $M.38, $M.39, $M.71, $M.87, $M.88, $M.107, $M.108, $M.109, $M.110, $M.111, $CurrAddr, $M.67, $M.68, $M.32, $M.43, $M.52, $M.35, $M.112, $M.114, assertsPassed, $M.69, $M.70, $M.36, $M.72, $M.53, $M.49, $M.40, $M.44, $M.93, $M.37, $M.41, $M.74, $M.115, $M.64, $M.75, $M.55, $M.65, $M.54;



implementation ldv_entry_EMGentry_18($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14679;

  corral_source_split_14679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3541} $i1 := ldv_EMGentry_init_qxl_init_18_33($u120);
    call {:si_unique_call 3542} {:cexpr "ldv_18_ret_default"} boogie_si_record_i32($i1);
    goto corral_source_split_14680;

  corral_source_split_14680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3543} $i2 := ldv_ldv_post_init_112($i1);
    call {:si_unique_call 3544} {:cexpr "ldv_18_ret_default"} boogie_si_record_i32($i2);
    goto corral_source_split_14681;

  corral_source_split_14681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3545} $i3 := ldv_undef_int();
    call {:si_unique_call 3546} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_14682;

  corral_source_split_14682:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_14683;

  corral_source_split_14683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_14692;

  corral_source_split_14692:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 0);
    goto corral_source_split_14693;

  corral_source_split_14693:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_14694;

  corral_source_split_14694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3550} ldv_assume($i8);
    goto corral_source_split_14695;

  corral_source_split_14695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3551} $i9 := ldv_undef_int();
    call {:si_unique_call 3552} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_14696;

  corral_source_split_14696:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_14697;

  corral_source_split_14697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3579} ldv_EMGentry_exit_qxl_exit_18_2($u121);
    goto corral_source_split_14727;

  corral_source_split_14727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3580} ldv_ldv_check_final_state_114();
    goto SeqInstr_2410, SeqInstr_2411;

  SeqInstr_2411:
    assume assertsPassed;
    goto SeqInstr_2412;

  SeqInstr_2412:
    goto corral_source_split_14728;

  corral_source_split_14728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3581} ldv_stop();
    goto corral_source_split_14729;

  corral_source_split_14729:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2410:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_14699;

  corral_source_split_14699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3553} ldv_dispatch_register_platform_instance_4_18_29();
    goto SeqInstr_2374, SeqInstr_2375;

  SeqInstr_2375:
    assume assertsPassed;
    goto SeqInstr_2376;

  SeqInstr_2376:
    goto corral_source_split_14700;

  corral_source_split_14700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3554} ldv_dispatch_register_pci_instance_2_18_28();
    goto SeqInstr_2377, SeqInstr_2378;

  SeqInstr_2378:
    assume assertsPassed;
    goto SeqInstr_2379;

  SeqInstr_2379:
    goto corral_source_split_14701;

  corral_source_split_14701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3555} ldv_dispatch_register_file_operations_instance_1_18_27();
    goto SeqInstr_2380, SeqInstr_2381;

  SeqInstr_2381:
    assume assertsPassed;
    goto SeqInstr_2382;

  SeqInstr_2382:
    goto corral_source_split_14702;

  corral_source_split_14702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3556} ldv_dispatch_register_dummy_resourceless_instance_9_18_26();
    goto SeqInstr_2383, SeqInstr_2384;

  SeqInstr_2384:
    assume assertsPassed;
    goto SeqInstr_2385;

  SeqInstr_2385:
    goto corral_source_split_14703;

  corral_source_split_14703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3557} ldv_dispatch_register_dummy_resourceless_instance_5_18_25();
    goto corral_source_split_14704;

  corral_source_split_14704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3558} ldv_dispatch_register_dummy_resourceless_instance_17_18_24();
    goto SeqInstr_2386, SeqInstr_2387;

  SeqInstr_2387:
    assume assertsPassed;
    goto SeqInstr_2388;

  SeqInstr_2388:
    goto corral_source_split_14705;

  corral_source_split_14705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3559} ldv_dispatch_register_dummy_resourceless_instance_16_18_23();
    goto SeqInstr_2389, SeqInstr_2390;

  SeqInstr_2390:
    assume assertsPassed;
    goto SeqInstr_2391;

  SeqInstr_2391:
    goto corral_source_split_14706;

  corral_source_split_14706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3560} ldv_dispatch_register_dummy_resourceless_instance_15_18_22();
    goto SeqInstr_2392, SeqInstr_2393;

  SeqInstr_2393:
    assume assertsPassed;
    goto SeqInstr_2394;

  SeqInstr_2394:
    goto corral_source_split_14707;

  corral_source_split_14707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3561} ldv_dispatch_register_dummy_resourceless_instance_14_18_21();
    goto SeqInstr_2395, SeqInstr_2396;

  SeqInstr_2396:
    assume assertsPassed;
    goto SeqInstr_2397;

  SeqInstr_2397:
    goto corral_source_split_14708;

  corral_source_split_14708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3562} ldv_dispatch_register_dummy_resourceless_instance_13_18_20();
    goto SeqInstr_2398, SeqInstr_2399;

  SeqInstr_2399:
    assume assertsPassed;
    goto SeqInstr_2400;

  SeqInstr_2400:
    goto corral_source_split_14709;

  corral_source_split_14709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3563} ldv_dispatch_register_dummy_resourceless_instance_12_18_19();
    goto SeqInstr_2401, SeqInstr_2402;

  SeqInstr_2402:
    assume assertsPassed;
    goto SeqInstr_2403;

  SeqInstr_2403:
    goto corral_source_split_14710;

  corral_source_split_14710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3564} ldv_dispatch_register_dummy_resourceless_instance_11_18_18();
    goto SeqInstr_2404, SeqInstr_2405;

  SeqInstr_2405:
    assume assertsPassed;
    goto SeqInstr_2406;

  SeqInstr_2406:
    goto corral_source_split_14711;

  corral_source_split_14711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3565} ldv_dispatch_register_dummy_resourceless_instance_10_18_17();
    goto SeqInstr_2407, SeqInstr_2408;

  SeqInstr_2408:
    assume assertsPassed;
    goto SeqInstr_2409;

  SeqInstr_2409:
    goto corral_source_split_14712;

  corral_source_split_14712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3566} ldv_dispatch_deregister_platform_instance_4_18_16();
    goto corral_source_split_14713;

  corral_source_split_14713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3567} ldv_dispatch_deregister_pci_instance_2_18_15();
    goto corral_source_split_14714;

  corral_source_split_14714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3568} ldv_dispatch_deregister_file_operations_instance_1_18_14();
    goto corral_source_split_14715;

  corral_source_split_14715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3569} ldv_dispatch_deregister_dummy_resourceless_instance_9_18_13();
    goto corral_source_split_14716;

  corral_source_split_14716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3570} ldv_dispatch_deregister_dummy_resourceless_instance_5_18_12();
    goto corral_source_split_14717;

  corral_source_split_14717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3571} ldv_dispatch_deregister_dummy_resourceless_instance_17_18_11();
    goto corral_source_split_14718;

  corral_source_split_14718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3572} ldv_dispatch_deregister_dummy_resourceless_instance_16_18_10();
    goto corral_source_split_14719;

  corral_source_split_14719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3573} ldv_dispatch_deregister_dummy_resourceless_instance_15_18_9();
    goto corral_source_split_14720;

  corral_source_split_14720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3574} ldv_dispatch_deregister_dummy_resourceless_instance_14_18_8();
    goto corral_source_split_14721;

  corral_source_split_14721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3575} ldv_dispatch_deregister_dummy_resourceless_instance_13_18_7();
    goto corral_source_split_14722;

  corral_source_split_14722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3576} ldv_dispatch_deregister_dummy_resourceless_instance_12_18_6();
    goto corral_source_split_14723;

  corral_source_split_14723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3577} ldv_dispatch_deregister_dummy_resourceless_instance_11_18_5();
    goto corral_source_split_14724;

  corral_source_split_14724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3578} ldv_dispatch_deregister_dummy_resourceless_instance_10_18_4();
    goto corral_source_split_14725;

  corral_source_split_14725:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_2407:
    assume !assertsPassed;
    return;

  SeqInstr_2404:
    assume !assertsPassed;
    return;

  SeqInstr_2401:
    assume !assertsPassed;
    return;

  SeqInstr_2398:
    assume !assertsPassed;
    return;

  SeqInstr_2395:
    assume !assertsPassed;
    return;

  SeqInstr_2392:
    assume !assertsPassed;
    return;

  SeqInstr_2389:
    assume !assertsPassed;
    return;

  SeqInstr_2386:
    assume !assertsPassed;
    return;

  SeqInstr_2383:
    assume !assertsPassed;
    return;

  SeqInstr_2380:
    assume !assertsPassed;
    return;

  SeqInstr_2377:
    assume !assertsPassed;
    return;

  SeqInstr_2374:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_14685;

  corral_source_split_14685:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 0);
    goto corral_source_split_14686;

  corral_source_split_14686:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_14687;

  corral_source_split_14687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3547} ldv_assume($i6);
    goto corral_source_split_14688;

  corral_source_split_14688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3548} ldv_ldv_check_final_state_113();
    goto SeqInstr_2371, SeqInstr_2372;

  SeqInstr_2372:
    assume assertsPassed;
    goto SeqInstr_2373;

  SeqInstr_2373:
    goto corral_source_split_14689;

  corral_source_split_14689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3549} ldv_stop();
    goto corral_source_split_14690;

  corral_source_split_14690:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_2371:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_init_112: ref;

axiom ldv_ldv_post_init_112 == $sub.ref(0, 1240593);

procedure ldv_ldv_post_init_112($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.183, $M.184;



implementation ldv_ldv_post_init_112($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3582} {:cexpr "ldv_ldv_post_init_112:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_14731;

  corral_source_split_14731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3583} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_14732;

  corral_source_split_14732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3584} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_14733;

  corral_source_split_14733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3585} $i1 := ldv_post_init($i0);
    call {:si_unique_call 3586} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_14734;

  corral_source_split_14734:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ldv_check_final_state_113: ref;

axiom ldv_ldv_check_final_state_113 == $sub.ref(0, 1241625);

procedure ldv_ldv_check_final_state_113();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_113()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14736;

  corral_source_split_14736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3587} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_2413, SeqInstr_2414;

  SeqInstr_2414:
    assume assertsPassed;
    goto SeqInstr_2415;

  SeqInstr_2415:
    goto corral_source_split_14737;

  corral_source_split_14737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3588} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_2416, SeqInstr_2417;

  SeqInstr_2417:
    assume assertsPassed;
    goto SeqInstr_2418;

  SeqInstr_2418:
    goto corral_source_split_14738;

  corral_source_split_14738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3589} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_2419, SeqInstr_2420;

  SeqInstr_2420:
    assume assertsPassed;
    goto SeqInstr_2421;

  SeqInstr_2421:
    goto corral_source_split_14739;

  corral_source_split_14739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3590} ldv_linux_block_request_check_final_state();
    goto SeqInstr_2422, SeqInstr_2423;

  SeqInstr_2423:
    assume assertsPassed;
    goto SeqInstr_2424;

  SeqInstr_2424:
    goto corral_source_split_14740;

  corral_source_split_14740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3591} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_2425, SeqInstr_2426;

  SeqInstr_2426:
    assume assertsPassed;
    goto SeqInstr_2427;

  SeqInstr_2427:
    goto corral_source_split_14741;

  corral_source_split_14741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3592} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_2428, SeqInstr_2429;

  SeqInstr_2429:
    assume assertsPassed;
    goto SeqInstr_2430;

  SeqInstr_2430:
    goto corral_source_split_14742;

  corral_source_split_14742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3593} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_2431, SeqInstr_2432;

  SeqInstr_2432:
    assume assertsPassed;
    goto SeqInstr_2433;

  SeqInstr_2433:
    goto corral_source_split_14743;

  corral_source_split_14743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3594} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_2434, SeqInstr_2435;

  SeqInstr_2435:
    assume assertsPassed;
    goto SeqInstr_2436;

  SeqInstr_2436:
    goto corral_source_split_14744;

  corral_source_split_14744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3595} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_2437, SeqInstr_2438;

  SeqInstr_2438:
    assume assertsPassed;
    goto SeqInstr_2439;

  SeqInstr_2439:
    goto corral_source_split_14745;

  corral_source_split_14745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3596} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_2440, SeqInstr_2441;

  SeqInstr_2441:
    assume assertsPassed;
    goto SeqInstr_2442;

  SeqInstr_2442:
    goto corral_source_split_14746;

  corral_source_split_14746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3597} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_2443, SeqInstr_2444;

  SeqInstr_2444:
    assume assertsPassed;
    goto SeqInstr_2445;

  SeqInstr_2445:
    goto corral_source_split_14747;

  corral_source_split_14747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3598} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_2446, SeqInstr_2447;

  SeqInstr_2447:
    assume assertsPassed;
    goto SeqInstr_2448;

  SeqInstr_2448:
    goto corral_source_split_14748;

  corral_source_split_14748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3599} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_2449, SeqInstr_2450;

  SeqInstr_2450:
    assume assertsPassed;
    goto SeqInstr_2451;

  SeqInstr_2451:
    goto corral_source_split_14749;

  corral_source_split_14749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3600} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_2452, SeqInstr_2453;

  SeqInstr_2453:
    assume assertsPassed;
    goto SeqInstr_2454;

  SeqInstr_2454:
    goto corral_source_split_14750;

  corral_source_split_14750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3601} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_2455, SeqInstr_2456;

  SeqInstr_2456:
    assume assertsPassed;
    goto SeqInstr_2457;

  SeqInstr_2457:
    goto corral_source_split_14751;

  corral_source_split_14751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3602} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_2458, SeqInstr_2459;

  SeqInstr_2459:
    assume assertsPassed;
    goto SeqInstr_2460;

  SeqInstr_2460:
    goto corral_source_split_14752;

  corral_source_split_14752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3603} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_2461, SeqInstr_2462;

  SeqInstr_2462:
    assume assertsPassed;
    goto SeqInstr_2463;

  SeqInstr_2463:
    goto corral_source_split_14753;

  corral_source_split_14753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3604} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_2464, SeqInstr_2465;

  SeqInstr_2465:
    assume assertsPassed;
    goto SeqInstr_2466;

  SeqInstr_2466:
    goto corral_source_split_14754;

  corral_source_split_14754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3605} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_2467, SeqInstr_2468;

  SeqInstr_2468:
    assume assertsPassed;
    goto SeqInstr_2469;

  SeqInstr_2469:
    goto corral_source_split_14755;

  corral_source_split_14755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3606} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_2470, SeqInstr_2471;

  SeqInstr_2471:
    assume assertsPassed;
    goto SeqInstr_2472;

  SeqInstr_2472:
    goto corral_source_split_14756;

  corral_source_split_14756:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2470:
    assume !assertsPassed;
    return;

  SeqInstr_2467:
    assume !assertsPassed;
    return;

  SeqInstr_2464:
    assume !assertsPassed;
    return;

  SeqInstr_2461:
    assume !assertsPassed;
    return;

  SeqInstr_2458:
    assume !assertsPassed;
    return;

  SeqInstr_2455:
    assume !assertsPassed;
    return;

  SeqInstr_2452:
    assume !assertsPassed;
    return;

  SeqInstr_2449:
    assume !assertsPassed;
    return;

  SeqInstr_2446:
    assume !assertsPassed;
    return;

  SeqInstr_2443:
    assume !assertsPassed;
    return;

  SeqInstr_2440:
    assume !assertsPassed;
    return;

  SeqInstr_2437:
    assume !assertsPassed;
    return;

  SeqInstr_2434:
    assume !assertsPassed;
    return;

  SeqInstr_2431:
    assume !assertsPassed;
    return;

  SeqInstr_2428:
    assume !assertsPassed;
    return;

  SeqInstr_2425:
    assume !assertsPassed;
    return;

  SeqInstr_2422:
    assume !assertsPassed;
    return;

  SeqInstr_2419:
    assume !assertsPassed;
    return;

  SeqInstr_2416:
    assume !assertsPassed;
    return;

  SeqInstr_2413:
    assume !assertsPassed;
    return;
}



const ldv_ldv_check_final_state_114: ref;

axiom ldv_ldv_check_final_state_114 == $sub.ref(0, 1242657);

procedure ldv_ldv_check_final_state_114();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_114()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14758;

  corral_source_split_14758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3607} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_2473, SeqInstr_2474;

  SeqInstr_2474:
    assume assertsPassed;
    goto SeqInstr_2475;

  SeqInstr_2475:
    goto corral_source_split_14759;

  corral_source_split_14759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3608} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_2476, SeqInstr_2477;

  SeqInstr_2477:
    assume assertsPassed;
    goto SeqInstr_2478;

  SeqInstr_2478:
    goto corral_source_split_14760;

  corral_source_split_14760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3609} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_2479, SeqInstr_2480;

  SeqInstr_2480:
    assume assertsPassed;
    goto SeqInstr_2481;

  SeqInstr_2481:
    goto corral_source_split_14761;

  corral_source_split_14761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3610} ldv_linux_block_request_check_final_state();
    goto SeqInstr_2482, SeqInstr_2483;

  SeqInstr_2483:
    assume assertsPassed;
    goto SeqInstr_2484;

  SeqInstr_2484:
    goto corral_source_split_14762;

  corral_source_split_14762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3611} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_2485, SeqInstr_2486;

  SeqInstr_2486:
    assume assertsPassed;
    goto SeqInstr_2487;

  SeqInstr_2487:
    goto corral_source_split_14763;

  corral_source_split_14763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3612} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_2488, SeqInstr_2489;

  SeqInstr_2489:
    assume assertsPassed;
    goto SeqInstr_2490;

  SeqInstr_2490:
    goto corral_source_split_14764;

  corral_source_split_14764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3613} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_2491, SeqInstr_2492;

  SeqInstr_2492:
    assume assertsPassed;
    goto SeqInstr_2493;

  SeqInstr_2493:
    goto corral_source_split_14765;

  corral_source_split_14765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3614} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_2494, SeqInstr_2495;

  SeqInstr_2495:
    assume assertsPassed;
    goto SeqInstr_2496;

  SeqInstr_2496:
    goto corral_source_split_14766;

  corral_source_split_14766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3615} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_2497, SeqInstr_2498;

  SeqInstr_2498:
    assume assertsPassed;
    goto SeqInstr_2499;

  SeqInstr_2499:
    goto corral_source_split_14767;

  corral_source_split_14767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3616} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_2500, SeqInstr_2501;

  SeqInstr_2501:
    assume assertsPassed;
    goto SeqInstr_2502;

  SeqInstr_2502:
    goto corral_source_split_14768;

  corral_source_split_14768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3617} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_2503, SeqInstr_2504;

  SeqInstr_2504:
    assume assertsPassed;
    goto SeqInstr_2505;

  SeqInstr_2505:
    goto corral_source_split_14769;

  corral_source_split_14769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3618} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_2506, SeqInstr_2507;

  SeqInstr_2507:
    assume assertsPassed;
    goto SeqInstr_2508;

  SeqInstr_2508:
    goto corral_source_split_14770;

  corral_source_split_14770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3619} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_2509, SeqInstr_2510;

  SeqInstr_2510:
    assume assertsPassed;
    goto SeqInstr_2511;

  SeqInstr_2511:
    goto corral_source_split_14771;

  corral_source_split_14771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3620} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_2512, SeqInstr_2513;

  SeqInstr_2513:
    assume assertsPassed;
    goto SeqInstr_2514;

  SeqInstr_2514:
    goto corral_source_split_14772;

  corral_source_split_14772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3621} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_2515, SeqInstr_2516;

  SeqInstr_2516:
    assume assertsPassed;
    goto SeqInstr_2517;

  SeqInstr_2517:
    goto corral_source_split_14773;

  corral_source_split_14773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3622} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_2518, SeqInstr_2519;

  SeqInstr_2519:
    assume assertsPassed;
    goto SeqInstr_2520;

  SeqInstr_2520:
    goto corral_source_split_14774;

  corral_source_split_14774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3623} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_2521, SeqInstr_2522;

  SeqInstr_2522:
    assume assertsPassed;
    goto SeqInstr_2523;

  SeqInstr_2523:
    goto corral_source_split_14775;

  corral_source_split_14775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3624} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_2524, SeqInstr_2525;

  SeqInstr_2525:
    assume assertsPassed;
    goto SeqInstr_2526;

  SeqInstr_2526:
    goto corral_source_split_14776;

  corral_source_split_14776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3625} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_2527, SeqInstr_2528;

  SeqInstr_2528:
    assume assertsPassed;
    goto SeqInstr_2529;

  SeqInstr_2529:
    goto corral_source_split_14777;

  corral_source_split_14777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3626} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_2530, SeqInstr_2531;

  SeqInstr_2531:
    assume assertsPassed;
    goto SeqInstr_2532;

  SeqInstr_2532:
    goto corral_source_split_14778;

  corral_source_split_14778:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2530:
    assume !assertsPassed;
    return;

  SeqInstr_2527:
    assume !assertsPassed;
    return;

  SeqInstr_2524:
    assume !assertsPassed;
    return;

  SeqInstr_2521:
    assume !assertsPassed;
    return;

  SeqInstr_2518:
    assume !assertsPassed;
    return;

  SeqInstr_2515:
    assume !assertsPassed;
    return;

  SeqInstr_2512:
    assume !assertsPassed;
    return;

  SeqInstr_2509:
    assume !assertsPassed;
    return;

  SeqInstr_2506:
    assume !assertsPassed;
    return;

  SeqInstr_2503:
    assume !assertsPassed;
    return;

  SeqInstr_2500:
    assume !assertsPassed;
    return;

  SeqInstr_2497:
    assume !assertsPassed;
    return;

  SeqInstr_2494:
    assume !assertsPassed;
    return;

  SeqInstr_2491:
    assume !assertsPassed;
    return;

  SeqInstr_2488:
    assume !assertsPassed;
    return;

  SeqInstr_2485:
    assume !assertsPassed;
    return;

  SeqInstr_2482:
    assume !assertsPassed;
    return;

  SeqInstr_2479:
    assume !assertsPassed;
    return;

  SeqInstr_2476:
    assume !assertsPassed;
    return;

  SeqInstr_2473:
    assume !assertsPassed;
    return;
}



const ldv_linux_arch_io_check_final_state: ref;

axiom ldv_linux_arch_io_check_final_state == $sub.ref(0, 1243689);

procedure ldv_linux_arch_io_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_arch_io_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14780;

  corral_source_split_14780:
    assume {:verifier.code 0} true;
    $i0 := $M.64;
    goto corral_source_split_14781;

  corral_source_split_14781:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_14782;

  corral_source_split_14782:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_14783;

  corral_source_split_14783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3627} ldv_assert_linux_arch_io__more_initial_at_exit($i2);
    goto SeqInstr_2533, SeqInstr_2534;

  SeqInstr_2534:
    assume assertsPassed;
    goto SeqInstr_2535;

  SeqInstr_2535:
    goto corral_source_split_14784;

  corral_source_split_14784:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2533:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_genhd_check_final_state: ref;

axiom ldv_linux_block_genhd_check_final_state == $sub.ref(0, 1244721);

procedure ldv_linux_block_genhd_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_genhd_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14786;

  corral_source_split_14786:
    assume {:verifier.code 0} true;
    $i0 := $M.189;
    goto corral_source_split_14787;

  corral_source_split_14787:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_14788;

  corral_source_split_14788:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_14789;

  corral_source_split_14789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3628} ldv_assert_linux_block_genhd__more_initial_at_exit($i2);
    goto SeqInstr_2536, SeqInstr_2537;

  SeqInstr_2537:
    assume assertsPassed;
    goto SeqInstr_2538;

  SeqInstr_2538:
    goto corral_source_split_14790;

  corral_source_split_14790:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2536:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_queue_check_final_state: ref;

axiom ldv_linux_block_queue_check_final_state == $sub.ref(0, 1245753);

procedure ldv_linux_block_queue_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_queue_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14792;

  corral_source_split_14792:
    assume {:verifier.code 0} true;
    $i0 := $M.190;
    goto corral_source_split_14793;

  corral_source_split_14793:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_14794;

  corral_source_split_14794:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_14795;

  corral_source_split_14795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3629} ldv_assert_linux_block_queue__more_initial_at_exit($i2);
    goto SeqInstr_2539, SeqInstr_2540;

  SeqInstr_2540:
    assume assertsPassed;
    goto SeqInstr_2541;

  SeqInstr_2541:
    goto corral_source_split_14796;

  corral_source_split_14796:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2539:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_request_check_final_state: ref;

axiom ldv_linux_block_request_check_final_state == $sub.ref(0, 1246785);

procedure ldv_linux_block_request_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_request_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14798;

  corral_source_split_14798:
    assume {:verifier.code 0} true;
    $i0 := $M.191;
    goto corral_source_split_14799;

  corral_source_split_14799:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_14800;

  corral_source_split_14800:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_14801;

  corral_source_split_14801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3630} ldv_assert_linux_block_request__get_at_exit($i2);
    goto SeqInstr_2542, SeqInstr_2543;

  SeqInstr_2543:
    assume assertsPassed;
    goto SeqInstr_2544;

  SeqInstr_2544:
    goto corral_source_split_14802;

  corral_source_split_14802:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2542:
    assume !assertsPassed;
    return;
}



const ldv_linux_drivers_base_class_check_final_state: ref;

axiom ldv_linux_drivers_base_class_check_final_state == $sub.ref(0, 1247817);

procedure ldv_linux_drivers_base_class_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_drivers_base_class_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14804;

  corral_source_split_14804:
    assume {:verifier.code 0} true;
    $i0 := $M.192;
    goto corral_source_split_14805;

  corral_source_split_14805:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_14806;

  corral_source_split_14806:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_14807;

  corral_source_split_14807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3631} ldv_assert_linux_drivers_base_class__registered_at_exit($i2);
    goto SeqInstr_2545, SeqInstr_2546;

  SeqInstr_2546:
    assume assertsPassed;
    goto SeqInstr_2547;

  SeqInstr_2547:
    goto corral_source_split_14808;

  corral_source_split_14808:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2545:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_char_dev_check_final_state: ref;

axiom ldv_linux_fs_char_dev_check_final_state == $sub.ref(0, 1248849);

procedure ldv_linux_fs_char_dev_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_char_dev_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14810;

  corral_source_split_14810:
    assume {:verifier.code 0} true;
    $i0 := $M.193;
    goto corral_source_split_14811;

  corral_source_split_14811:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_14812;

  corral_source_split_14812:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_14813;

  corral_source_split_14813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3632} ldv_assert_linux_fs_char_dev__registered_at_exit($i2);
    goto SeqInstr_2548, SeqInstr_2549;

  SeqInstr_2549:
    assume assertsPassed;
    goto SeqInstr_2550;

  SeqInstr_2550:
    goto corral_source_split_14814;

  corral_source_split_14814:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2548:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_sysfs_check_final_state: ref;

axiom ldv_linux_fs_sysfs_check_final_state == $sub.ref(0, 1249881);

procedure ldv_linux_fs_sysfs_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_sysfs_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14816;

  corral_source_split_14816:
    assume {:verifier.code 0} true;
    $i0 := $M.194;
    goto corral_source_split_14817;

  corral_source_split_14817:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_14818;

  corral_source_split_14818:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_14819;

  corral_source_split_14819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3633} ldv_assert_linux_fs_sysfs__more_initial_at_exit($i2);
    goto SeqInstr_2551, SeqInstr_2552;

  SeqInstr_2552:
    assume assertsPassed;
    goto SeqInstr_2553;

  SeqInstr_2553:
    goto corral_source_split_14820;

  corral_source_split_14820:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2551:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_rwlock_check_final_state: ref;

axiom ldv_linux_kernel_locking_rwlock_check_final_state == $sub.ref(0, 1250913);

procedure ldv_linux_kernel_locking_rwlock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_locking_rwlock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14822;

  corral_source_split_14822:
    assume {:verifier.code 0} true;
    $i0 := $M.195;
    goto corral_source_split_14823;

  corral_source_split_14823:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_14824;

  corral_source_split_14824:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_14825;

  corral_source_split_14825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3634} ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i2);
    goto SeqInstr_2554, SeqInstr_2555;

  SeqInstr_2555:
    assume assertsPassed;
    goto SeqInstr_2556;

  SeqInstr_2556:
    goto corral_source_split_14826;

  corral_source_split_14826:
    assume {:verifier.code 0} true;
    $i3 := $M.196;
    goto corral_source_split_14827;

  corral_source_split_14827:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_14828;

  corral_source_split_14828:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_14829;

  corral_source_split_14829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3635} ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i5);
    goto SeqInstr_2557, SeqInstr_2558;

  SeqInstr_2558:
    assume assertsPassed;
    goto SeqInstr_2559;

  SeqInstr_2559:
    goto corral_source_split_14830;

  corral_source_split_14830:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2557:
    assume !assertsPassed;
    return;

  SeqInstr_2554:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_module_check_final_state: ref;

axiom ldv_linux_kernel_module_check_final_state == $sub.ref(0, 1251945);

procedure ldv_linux_kernel_module_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_module_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14832;

  corral_source_split_14832:
    assume {:verifier.code 0} true;
    $i0 := $M.197;
    goto corral_source_split_14833;

  corral_source_split_14833:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_14834;

  corral_source_split_14834:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_14835;

  corral_source_split_14835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3636} ldv_assert_linux_kernel_module__more_initial_at_exit($i2);
    goto SeqInstr_2560, SeqInstr_2561;

  SeqInstr_2561:
    assume assertsPassed;
    goto SeqInstr_2562;

  SeqInstr_2562:
    goto corral_source_split_14836;

  corral_source_split_14836:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2560:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_bh_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_check_final_state == $sub.ref(0, 1252977);

procedure ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_bh_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14838;

  corral_source_split_14838:
    assume {:verifier.code 0} true;
    $i0 := $M.198;
    goto corral_source_split_14839;

  corral_source_split_14839:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_14840;

  corral_source_split_14840:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_14841;

  corral_source_split_14841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3637} ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i2);
    goto SeqInstr_2563, SeqInstr_2564;

  SeqInstr_2564:
    assume assertsPassed;
    goto SeqInstr_2565;

  SeqInstr_2565:
    goto corral_source_split_14842;

  corral_source_split_14842:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2563:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_sched_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_check_final_state == $sub.ref(0, 1254009);

procedure ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_sched_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14844;

  corral_source_split_14844:
    assume {:verifier.code 0} true;
    $i0 := $M.199;
    goto corral_source_split_14845;

  corral_source_split_14845:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_14846;

  corral_source_split_14846:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_14847;

  corral_source_split_14847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3638} ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i2);
    goto SeqInstr_2566, SeqInstr_2567;

  SeqInstr_2567:
    assume assertsPassed;
    goto SeqInstr_2568;

  SeqInstr_2568:
    goto corral_source_split_14848;

  corral_source_split_14848:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2566:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_check_final_state == $sub.ref(0, 1255041);

procedure ldv_linux_kernel_rcu_update_lock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14850;

  corral_source_split_14850:
    assume {:verifier.code 0} true;
    $i0 := $M.115;
    goto corral_source_split_14851;

  corral_source_split_14851:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_14852;

  corral_source_split_14852:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_14853;

  corral_source_split_14853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3639} ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i2);
    goto SeqInstr_2569, SeqInstr_2570;

  SeqInstr_2570:
    assume assertsPassed;
    goto SeqInstr_2571;

  SeqInstr_2571:
    goto corral_source_split_14854;

  corral_source_split_14854:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2569:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_srcu_check_final_state: ref;

axiom ldv_linux_kernel_rcu_srcu_check_final_state == $sub.ref(0, 1256073);

procedure ldv_linux_kernel_rcu_srcu_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_srcu_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14856;

  corral_source_split_14856:
    assume {:verifier.code 0} true;
    $i0 := $M.200;
    goto corral_source_split_14857;

  corral_source_split_14857:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_14858;

  corral_source_split_14858:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_14859;

  corral_source_split_14859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3640} ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i2);
    goto SeqInstr_2572, SeqInstr_2573;

  SeqInstr_2573:
    assume assertsPassed;
    goto SeqInstr_2574;

  SeqInstr_2574:
    goto corral_source_split_14860;

  corral_source_split_14860:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2572:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_check_final_state: ref;

axiom ldv_linux_lib_idr_check_final_state == $sub.ref(0, 1257105);

procedure ldv_linux_lib_idr_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_lib_idr_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i8: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14862;

  corral_source_split_14862:
    assume {:verifier.code 0} true;
    $i0 := $M.53;
    goto corral_source_split_14863;

  corral_source_split_14863:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_14864;

  corral_source_split_14864:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_14872;

  corral_source_split_14872:
    assume {:verifier.code 0} true;
    $i3 := $M.53;
    goto corral_source_split_14873;

  corral_source_split_14873:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_14874;

  corral_source_split_14874:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_14866;

  corral_source_split_14866:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_14867;

  corral_source_split_14867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3641} ldv_assert_linux_lib_idr__more_at_exit($i5);
    goto SeqInstr_2575, SeqInstr_2576;

  SeqInstr_2576:
    assume assertsPassed;
    goto SeqInstr_2577;

  SeqInstr_2577:
    goto corral_source_split_14868;

  corral_source_split_14868:
    assume {:verifier.code 0} true;
    $i6 := $M.75;
    goto corral_source_split_14869;

  corral_source_split_14869:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_14870;

  corral_source_split_14870:
    assume {:verifier.code 0} true;
    $i8 := 1;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i7 == 1);
    goto corral_source_split_14880;

  corral_source_split_14880:
    assume {:verifier.code 0} true;
    $i9 := $M.75;
    goto corral_source_split_14881;

  corral_source_split_14881:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 3);
    goto corral_source_split_14882;

  corral_source_split_14882:
    assume {:verifier.code 0} true;
    $i8 := $i10;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_14876;

  corral_source_split_14876:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i8);
    goto corral_source_split_14877;

  corral_source_split_14877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3642} ldv_assert_linux_lib_idr__more_at_exit($i11);
    goto SeqInstr_2578, SeqInstr_2579;

  SeqInstr_2579:
    assume assertsPassed;
    goto SeqInstr_2580;

  SeqInstr_2580:
    goto corral_source_split_14878;

  corral_source_split_14878:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2578:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb5;

  SeqInstr_2575:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const ldv_linux_mmc_sdio_func_check_final_state: ref;

axiom ldv_linux_mmc_sdio_func_check_final_state == $sub.ref(0, 1258137);

procedure ldv_linux_mmc_sdio_func_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_mmc_sdio_func_check_final_state()
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14884;

  corral_source_split_14884:
    assume {:verifier.code 0} true;
    $i0 := $M.201;
    goto corral_source_split_14885;

  corral_source_split_14885:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_14886;

  corral_source_split_14886:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_14887;

  corral_source_split_14887:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_14888;

  corral_source_split_14888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3643} ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i3);
    goto SeqInstr_2581, SeqInstr_2582;

  SeqInstr_2582:
    assume assertsPassed;
    goto SeqInstr_2583;

  SeqInstr_2583:
    goto corral_source_split_14889;

  corral_source_split_14889:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2581:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_rtnetlink_check_final_state: ref;

axiom ldv_linux_net_rtnetlink_check_final_state == $sub.ref(0, 1259169);

procedure ldv_linux_net_rtnetlink_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_rtnetlink_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14891;

  corral_source_split_14891:
    assume {:verifier.code 0} true;
    $i0 := $M.202;
    goto corral_source_split_14892;

  corral_source_split_14892:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_14893;

  corral_source_split_14893:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_14894;

  corral_source_split_14894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3644} ldv_assert_linux_net_rtnetlink__lock_on_exit($i2);
    goto SeqInstr_2584, SeqInstr_2585;

  SeqInstr_2585:
    assume assertsPassed;
    goto SeqInstr_2586;

  SeqInstr_2586:
    goto corral_source_split_14895;

  corral_source_split_14895:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2584:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_sock_check_final_state: ref;

axiom ldv_linux_net_sock_check_final_state == $sub.ref(0, 1260201);

procedure ldv_linux_net_sock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_sock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14897;

  corral_source_split_14897:
    assume {:verifier.code 0} true;
    $i0 := $M.203;
    goto corral_source_split_14898;

  corral_source_split_14898:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_14899;

  corral_source_split_14899:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_14900;

  corral_source_split_14900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3645} ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i2);
    goto SeqInstr_2587, SeqInstr_2588;

  SeqInstr_2588:
    assume assertsPassed;
    goto SeqInstr_2589;

  SeqInstr_2589:
    goto corral_source_split_14901;

  corral_source_split_14901:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2587:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_coherent_check_final_state: ref;

axiom ldv_linux_usb_coherent_check_final_state == $sub.ref(0, 1261233);

procedure ldv_linux_usb_coherent_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_coherent_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14903;

  corral_source_split_14903:
    assume {:verifier.code 0} true;
    $i0 := $M.204;
    goto corral_source_split_14904;

  corral_source_split_14904:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_14905;

  corral_source_split_14905:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_14906;

  corral_source_split_14906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3646} ldv_assert_linux_usb_coherent__more_initial_at_exit($i2);
    goto SeqInstr_2590, SeqInstr_2591;

  SeqInstr_2591:
    assume assertsPassed;
    goto SeqInstr_2592;

  SeqInstr_2592:
    goto corral_source_split_14907;

  corral_source_split_14907:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2590:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_check_final_state: ref;

axiom ldv_linux_usb_gadget_check_final_state == $sub.ref(0, 1262265);

procedure ldv_linux_usb_gadget_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14909;

  corral_source_split_14909:
    assume {:verifier.code 0} true;
    $i0 := $M.205;
    goto corral_source_split_14910;

  corral_source_split_14910:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_14911;

  corral_source_split_14911:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_14912;

  corral_source_split_14912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3647} ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i2);
    goto SeqInstr_2593, SeqInstr_2594;

  SeqInstr_2594:
    assume assertsPassed;
    goto SeqInstr_2595;

  SeqInstr_2595:
    goto corral_source_split_14913;

  corral_source_split_14913:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2593:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_urb_check_final_state: ref;

axiom ldv_linux_usb_urb_check_final_state == $sub.ref(0, 1263297);

procedure ldv_linux_usb_urb_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_urb_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14915;

  corral_source_split_14915:
    assume {:verifier.code 0} true;
    $i0 := $M.206;
    goto corral_source_split_14916;

  corral_source_split_14916:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_14917;

  corral_source_split_14917:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_14918;

  corral_source_split_14918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3648} ldv_assert_linux_usb_urb__more_initial_at_exit($i2);
    goto SeqInstr_2596, SeqInstr_2597;

  SeqInstr_2597:
    assume assertsPassed;
    goto SeqInstr_2598;

  SeqInstr_2598:
    goto corral_source_split_14919;

  corral_source_split_14919:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2596:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_urb__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_urb__more_initial_at_exit == $sub.ref(0, 1264329);

procedure ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3649} {:cexpr "ldv_assert_linux_usb_urb__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_14921;

  corral_source_split_14921:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_14922;

  corral_source_split_14922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_14924;

  corral_source_split_14924:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3650} __VERIFIER_error();
    goto SeqInstr_2599, SeqInstr_2600;

  SeqInstr_2600:
    assume assertsPassed;
    goto SeqInstr_2601;

  SeqInstr_2601:
    goto corral_source_split_14925;

  corral_source_split_14925:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2599:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit: ref;

axiom ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit == $sub.ref(0, 1265361);

procedure ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3651} {:cexpr "ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_14927;

  corral_source_split_14927:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_14928;

  corral_source_split_14928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_14930;

  corral_source_split_14930:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3652} __VERIFIER_error();
    goto SeqInstr_2602, SeqInstr_2603;

  SeqInstr_2603:
    assume assertsPassed;
    goto SeqInstr_2604;

  SeqInstr_2604:
    goto corral_source_split_14931;

  corral_source_split_14931:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2602:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_coherent__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_coherent__more_initial_at_exit == $sub.ref(0, 1266393);

procedure ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3653} {:cexpr "ldv_assert_linux_usb_coherent__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_14933;

  corral_source_split_14933:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_14934;

  corral_source_split_14934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_14936;

  corral_source_split_14936:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3654} __VERIFIER_error();
    goto SeqInstr_2605, SeqInstr_2606;

  SeqInstr_2606:
    assume assertsPassed;
    goto SeqInstr_2607;

  SeqInstr_2607:
    goto corral_source_split_14937;

  corral_source_split_14937:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2605:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_sock__all_locked_sockets_must_be_released: ref;

axiom ldv_assert_linux_net_sock__all_locked_sockets_must_be_released == $sub.ref(0, 1267425);

procedure ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3655} {:cexpr "ldv_assert_linux_net_sock__all_locked_sockets_must_be_released:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_14939;

  corral_source_split_14939:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_14940;

  corral_source_split_14940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_14942;

  corral_source_split_14942:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3656} __VERIFIER_error();
    goto SeqInstr_2608, SeqInstr_2609;

  SeqInstr_2609:
    assume assertsPassed;
    goto SeqInstr_2610;

  SeqInstr_2610:
    goto corral_source_split_14943;

  corral_source_split_14943:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2608:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_rtnetlink__lock_on_exit: ref;

axiom ldv_assert_linux_net_rtnetlink__lock_on_exit == $sub.ref(0, 1268457);

procedure ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3657} {:cexpr "ldv_assert_linux_net_rtnetlink__lock_on_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_14945;

  corral_source_split_14945:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_14946;

  corral_source_split_14946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_14948;

  corral_source_split_14948:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3658} __VERIFIER_error();
    goto SeqInstr_2611, SeqInstr_2612;

  SeqInstr_2612:
    assume assertsPassed;
    goto SeqInstr_2613;

  SeqInstr_2613:
    goto corral_source_split_14949;

  corral_source_split_14949:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2611:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_mmc_sdio_func__unreleased_at_exit: ref;

axiom ldv_assert_linux_mmc_sdio_func__unreleased_at_exit == $sub.ref(0, 1269489);

procedure ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3659} {:cexpr "ldv_assert_linux_mmc_sdio_func__unreleased_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_14951;

  corral_source_split_14951:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_14952;

  corral_source_split_14952:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_14954;

  corral_source_split_14954:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3660} __VERIFIER_error();
    goto SeqInstr_2614, SeqInstr_2615;

  SeqInstr_2615:
    assume assertsPassed;
    goto SeqInstr_2616;

  SeqInstr_2616:
    goto corral_source_split_14955;

  corral_source_split_14955:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2614:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_lib_idr__more_at_exit: ref;

axiom ldv_assert_linux_lib_idr__more_at_exit == $sub.ref(0, 1270521);

procedure ldv_assert_linux_lib_idr__more_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__more_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3661} {:cexpr "ldv_assert_linux_lib_idr__more_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_14957;

  corral_source_split_14957:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_14958;

  corral_source_split_14958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_14960;

  corral_source_split_14960:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3662} __VERIFIER_error();
    goto SeqInstr_2617, SeqInstr_2618;

  SeqInstr_2618:
    assume assertsPassed;
    goto SeqInstr_2619;

  SeqInstr_2619:
    goto corral_source_split_14961;

  corral_source_split_14961:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2617:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_srcu__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_srcu__locked_at_exit == $sub.ref(0, 1271553);

procedure ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3663} {:cexpr "ldv_assert_linux_kernel_rcu_srcu__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_14963;

  corral_source_split_14963:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_14964;

  corral_source_split_14964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_14966;

  corral_source_split_14966:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3664} __VERIFIER_error();
    goto SeqInstr_2620, SeqInstr_2621;

  SeqInstr_2621:
    assume assertsPassed;
    goto SeqInstr_2622;

  SeqInstr_2622:
    goto corral_source_split_14967;

  corral_source_split_14967:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2620:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit == $sub.ref(0, 1272585);

procedure ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3665} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_14969;

  corral_source_split_14969:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_14970;

  corral_source_split_14970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_14972;

  corral_source_split_14972:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3666} __VERIFIER_error();
    goto SeqInstr_2623, SeqInstr_2624;

  SeqInstr_2624:
    assume assertsPassed;
    goto SeqInstr_2625;

  SeqInstr_2625:
    goto corral_source_split_14973;

  corral_source_split_14973:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2623:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit == $sub.ref(0, 1273617);

procedure ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3667} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_14975;

  corral_source_split_14975:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_14976;

  corral_source_split_14976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_14978;

  corral_source_split_14978:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3668} __VERIFIER_error();
    goto SeqInstr_2626, SeqInstr_2627;

  SeqInstr_2627:
    assume assertsPassed;
    goto SeqInstr_2628;

  SeqInstr_2628:
    goto corral_source_split_14979;

  corral_source_split_14979:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2626:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit == $sub.ref(0, 1274649);

procedure ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3669} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_14981;

  corral_source_split_14981:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_14982;

  corral_source_split_14982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_14984;

  corral_source_split_14984:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3670} __VERIFIER_error();
    goto SeqInstr_2629, SeqInstr_2630;

  SeqInstr_2630:
    assume assertsPassed;
    goto SeqInstr_2631;

  SeqInstr_2631:
    goto corral_source_split_14985;

  corral_source_split_14985:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2629:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_module__more_initial_at_exit: ref;

axiom ldv_assert_linux_kernel_module__more_initial_at_exit == $sub.ref(0, 1275681);

procedure ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3671} {:cexpr "ldv_assert_linux_kernel_module__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_14987;

  corral_source_split_14987:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_14988;

  corral_source_split_14988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_14990;

  corral_source_split_14990:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3672} __VERIFIER_error();
    goto SeqInstr_2632, SeqInstr_2633;

  SeqInstr_2633:
    assume assertsPassed;
    goto SeqInstr_2634;

  SeqInstr_2634:
    goto corral_source_split_14991;

  corral_source_split_14991:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2632:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit == $sub.ref(0, 1276713);

procedure ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3673} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_14993;

  corral_source_split_14993:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_14994;

  corral_source_split_14994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_14996;

  corral_source_split_14996:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3674} __VERIFIER_error();
    goto SeqInstr_2635, SeqInstr_2636;

  SeqInstr_2636:
    assume assertsPassed;
    goto SeqInstr_2637;

  SeqInstr_2637:
    goto corral_source_split_14997;

  corral_source_split_14997:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2635:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit == $sub.ref(0, 1277745);

procedure ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3675} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_14999;

  corral_source_split_14999:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_15000;

  corral_source_split_15000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_15002;

  corral_source_split_15002:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3676} __VERIFIER_error();
    goto SeqInstr_2638, SeqInstr_2639;

  SeqInstr_2639:
    assume assertsPassed;
    goto SeqInstr_2640;

  SeqInstr_2640:
    goto corral_source_split_15003;

  corral_source_split_15003:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2638:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_sysfs__more_initial_at_exit: ref;

axiom ldv_assert_linux_fs_sysfs__more_initial_at_exit == $sub.ref(0, 1278777);

procedure ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3677} {:cexpr "ldv_assert_linux_fs_sysfs__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_15005;

  corral_source_split_15005:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_15006;

  corral_source_split_15006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_15008;

  corral_source_split_15008:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3678} __VERIFIER_error();
    goto SeqInstr_2641, SeqInstr_2642;

  SeqInstr_2642:
    assume assertsPassed;
    goto SeqInstr_2643;

  SeqInstr_2643:
    goto corral_source_split_15009;

  corral_source_split_15009:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2641:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__registered_at_exit: ref;

axiom ldv_assert_linux_fs_char_dev__registered_at_exit == $sub.ref(0, 1279809);

procedure ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3679} {:cexpr "ldv_assert_linux_fs_char_dev__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_15011;

  corral_source_split_15011:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_15012;

  corral_source_split_15012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_15014;

  corral_source_split_15014:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3680} __VERIFIER_error();
    goto SeqInstr_2644, SeqInstr_2645;

  SeqInstr_2645:
    assume assertsPassed;
    goto SeqInstr_2646;

  SeqInstr_2646:
    goto corral_source_split_15015;

  corral_source_split_15015:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2644:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_drivers_base_class__registered_at_exit: ref;

axiom ldv_assert_linux_drivers_base_class__registered_at_exit == $sub.ref(0, 1280841);

procedure ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3681} {:cexpr "ldv_assert_linux_drivers_base_class__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_15017;

  corral_source_split_15017:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_15018;

  corral_source_split_15018:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_15020;

  corral_source_split_15020:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3682} __VERIFIER_error();
    goto SeqInstr_2647, SeqInstr_2648;

  SeqInstr_2648:
    assume assertsPassed;
    goto SeqInstr_2649;

  SeqInstr_2649:
    goto corral_source_split_15021;

  corral_source_split_15021:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2647:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_request__get_at_exit: ref;

axiom ldv_assert_linux_block_request__get_at_exit == $sub.ref(0, 1281873);

procedure ldv_assert_linux_block_request__get_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_request__get_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3683} {:cexpr "ldv_assert_linux_block_request__get_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_15023;

  corral_source_split_15023:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_15024;

  corral_source_split_15024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_15026;

  corral_source_split_15026:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3684} __VERIFIER_error();
    goto SeqInstr_2650, SeqInstr_2651;

  SeqInstr_2651:
    assume assertsPassed;
    goto SeqInstr_2652;

  SeqInstr_2652:
    goto corral_source_split_15027;

  corral_source_split_15027:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2650:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_queue__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_queue__more_initial_at_exit == $sub.ref(0, 1282905);

procedure ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3685} {:cexpr "ldv_assert_linux_block_queue__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_15029;

  corral_source_split_15029:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_15030;

  corral_source_split_15030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_15032;

  corral_source_split_15032:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3686} __VERIFIER_error();
    goto SeqInstr_2653, SeqInstr_2654;

  SeqInstr_2654:
    assume assertsPassed;
    goto SeqInstr_2655;

  SeqInstr_2655:
    goto corral_source_split_15033;

  corral_source_split_15033:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2653:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_genhd__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_genhd__more_initial_at_exit == $sub.ref(0, 1283937);

procedure ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3687} {:cexpr "ldv_assert_linux_block_genhd__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_15035;

  corral_source_split_15035:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_15036;

  corral_source_split_15036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_15038;

  corral_source_split_15038:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3688} __VERIFIER_error();
    goto SeqInstr_2656, SeqInstr_2657;

  SeqInstr_2657:
    assume assertsPassed;
    goto SeqInstr_2658;

  SeqInstr_2658:
    goto corral_source_split_15039;

  corral_source_split_15039:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2656:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_arch_io__more_initial_at_exit: ref;

axiom ldv_assert_linux_arch_io__more_initial_at_exit == $sub.ref(0, 1284969);

procedure ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3689} {:cexpr "ldv_assert_linux_arch_io__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_15041;

  corral_source_split_15041:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_15042;

  corral_source_split_15042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_15044;

  corral_source_split_15044:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3690} __VERIFIER_error();
    goto SeqInstr_2659, SeqInstr_2660;

  SeqInstr_2660:
    assume assertsPassed;
    goto SeqInstr_2661;

  SeqInstr_2661:
    goto corral_source_split_15045;

  corral_source_split_15045:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2659:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_post_init: ref;

axiom ldv_post_init == $sub.ref(0, 1286001);

procedure ldv_post_init($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_init($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3691} {:cexpr "ldv_post_init:arg:init_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_15047;

  corral_source_split_15047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3692} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 3693} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_15048;

  corral_source_split_15048:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 1287033);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.66, $M.45, $M.207, $M.208, $M.209, $M.210, $M.211, $M.75, $M.53, $M.44, $M.52, $M.40, $M.41, $M.93, $M.72, $M.51, $M.190, $M.189, $M.6, $M.48, $M.47, $M.121, $M.271, $M.54, $M.37, $M.35, $M.49, $M.36, $M.65, $M.55, $M.76, $M.403, $M.404, $M.405, $M.406, $M.407, $M.408, $M.409, $M.206, $M.184, $M.205, $M.204, $M.203, $M.202, $M.183, $M.201, $M.115, $M.199, $M.198, $M.200, $M.197, $M.196, $M.195, $M.194, $M.193, $M.192, $M.191, $M.64, $M.50, $M.122, $M.410, $M.411, $CurrAddr, $M.181, $M.182, $M.56, $M.46, $M.61, $M.33, $M.62, $M.63, $M.79, $M.78, $M.80, $M.81, $M.91, $M.73, $M.42, $M.38, $M.39, $M.71, $M.87, $M.88, $M.107, $M.108, $M.109, $M.110, $M.111, $M.67, $M.68, $M.32, $M.43, $M.112, $M.114, assertsPassed, $M.69, $M.70, $M.74;



implementation main() returns ($r: i32)
{

  $bb0:
    call {:si_unique_call 3694} $initialize();
    goto corral_source_split_15050;

  corral_source_split_15050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3695} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_15051;

  corral_source_split_15051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3696} ldv_ldv_initialize_115();
    goto corral_source_split_15052;

  corral_source_split_15052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3697} ldv_entry_EMGentry_18($0.ref);
    goto SeqInstr_2662, SeqInstr_2663;

  SeqInstr_2663:
    assume assertsPassed;
    goto SeqInstr_2664;

  SeqInstr_2664:
    goto corral_source_split_15053;

  corral_source_split_15053:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_2662:
    assume !assertsPassed;
    return;
}



const ldv_ldv_initialize_115: ref;

axiom ldv_ldv_initialize_115 == $sub.ref(0, 1288065);

procedure ldv_ldv_initialize_115();
  free requires assertsPassed;



implementation ldv_ldv_initialize_115()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15055;

  corral_source_split_15055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3698} ldv_linux_lib_find_bit_initialize();
    goto corral_source_split_15056;

  corral_source_split_15056:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_lib_find_bit_initialize: ref;

axiom ldv_linux_lib_find_bit_initialize == $sub.ref(0, 1289097);

procedure ldv_linux_lib_find_bit_initialize();
  free requires assertsPassed;



implementation ldv_linux_lib_find_bit_initialize()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15058;

  corral_source_split_15058:
    assume {:verifier.code 0} true;
    $i0 := $load.i32($M.6, nr_cpu_ids);
    goto corral_source_split_15059;

  corral_source_split_15059:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_15060;

  corral_source_split_15060:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_15061;

  corral_source_split_15061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3699} ldv_assume($i2);
    goto corral_source_split_15062;

  corral_source_split_15062:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 1290129);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3700} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_15064;

  corral_source_split_15064:
    assume {:verifier.code 1} true;
    goto corral_source_split_15065;

  corral_source_split_15065:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_15066;

  corral_source_split_15066:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 1291161);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 1292193);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 1293225);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15068;

  corral_source_split_15068:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_2665, SeqInstr_2666;

  SeqInstr_2666:
    assume assertsPassed;
    goto SeqInstr_2667;

  SeqInstr_2667:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_15069;

  corral_source_split_15069:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2665:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 1294257);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 1295289);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 1296321);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 1297353);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 1298385);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 1299417);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 1300449);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 1301481);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 1302513);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 1303545);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15071;

  corral_source_split_15071:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3701} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 3702} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3703} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_15072;

  corral_source_split_15072:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_15073;

  corral_source_split_15073:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15077;

  corral_source_split_15077:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_15078;

  corral_source_split_15078:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3704} __VERIFIER_assume($i4);
    goto corral_source_split_15079;

  corral_source_split_15079:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_15075;

  corral_source_split_15075:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 1304577);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 1305609);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 1306641);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 1307673);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15081;

  corral_source_split_15081:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3705} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 3706} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3707} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_15082;

  corral_source_split_15082:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3708} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 3709} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 3710} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_15083;

  corral_source_split_15083:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3711} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 3712} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 3713} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_15084;

  corral_source_split_15084:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_15085;

  corral_source_split_15085:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15090;

  corral_source_split_15090:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_15091;

  corral_source_split_15091:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3714} __VERIFIER_assume($i7);
    goto corral_source_split_15092;

  corral_source_split_15092:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_15093;

  corral_source_split_15093:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_15099;

  corral_source_split_15099:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_15100;

  corral_source_split_15100:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3715} __VERIFIER_assume($i11);
    goto corral_source_split_15101;

  corral_source_split_15101:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_15097;

  corral_source_split_15097:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_15087;

  corral_source_split_15087:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_15088;

  corral_source_split_15088:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_15095;

  corral_source_split_15095:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 1308705);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 1309737);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15103;

  corral_source_split_15103:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3716} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 3717} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 3718} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_15104;

  corral_source_split_15104:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_15105;

  corral_source_split_15105:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15109;

  corral_source_split_15109:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_15110;

  corral_source_split_15110:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3719} __VERIFIER_assume($i4);
    goto corral_source_split_15111;

  corral_source_split_15111:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_15107;

  corral_source_split_15107:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 1310769);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 1311801);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 1312833);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 1313865);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 1314897);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 1315929);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 1316961);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 1317993);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 1319025);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 1320057);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 1321089);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 1322121);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 1323153);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 1324185);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15113;

  corral_source_split_15113:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3720} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3721} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_15114;

  corral_source_split_15114:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_15115;

  corral_source_split_15115:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 3722} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_15116;

  corral_source_split_15116:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_15117;

  corral_source_split_15117:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_15118;

  corral_source_split_15118:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_15119;

  corral_source_split_15119:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_15126;

  corral_source_split_15126:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_15127;

  corral_source_split_15127:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_15128;

  corral_source_split_15128:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_15129;

  corral_source_split_15129:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_15121;

  corral_source_split_15121:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_15122;

  corral_source_split_15122:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3723} __VERIFIER_assume($i10);
    goto corral_source_split_15123;

  corral_source_split_15123:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_15124;

  corral_source_split_15124:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 1325217);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15131;

  corral_source_split_15131:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3724} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 3725} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3726} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_15132;

  corral_source_split_15132:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 1326249);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 1327281);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15134;

  corral_source_split_15134:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3727} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 3728} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_15135;

  corral_source_split_15135:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 1328313);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 1329345);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 3729} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 3730} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 1330377);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 1331409);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15137;

  corral_source_split_15137:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_15138;

  corral_source_split_15138:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 1332441);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3731} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 3732} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_15140;

  corral_source_split_15140:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3733} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 3734} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_15141;

  corral_source_split_15141:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_15142;

  corral_source_split_15142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_15146;

  corral_source_split_15146:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_15147;

  corral_source_split_15147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3735} $p6 := malloc($i5);
    goto corral_source_split_15148;

  corral_source_split_15148:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_15149;

  corral_source_split_15149:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_68 := $M.6;
    call {:si_unique_call 3736} cmdloc_dummy_var_69 := $memset.i8(cmdloc_dummy_var_68, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_69;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15151;

  corral_source_split_15151:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_15144;

  corral_source_split_15144:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 1333473);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 1334505);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.66, $M.45, $M.207, $M.208, $M.209, $M.210, $M.211, $M.75, $M.53, $M.44, $M.52, $M.40, $M.41, $M.93, $M.72, $M.51, $M.190, $M.189, $M.6, $M.48, $M.47, $M.121, $M.271, $M.54, $M.37, $M.35, $M.49, $M.36, $M.65, $M.55, $M.76, $M.403, $M.404, $M.405, $M.406, $M.407, $M.408, $M.409, $M.206, $M.184, $M.205, $M.204, $M.203, $M.202, $M.183, $M.201, $M.115, $M.199, $M.198, $M.200, $M.197, $M.196, $M.195, $M.194, $M.193, $M.192, $M.191, $M.64, $M.50, $M.122, $M.410, $M.411;



implementation __SMACK_static_init()
{

  $bb0:
    $M.66 := 4;
    call {:si_unique_call 3737} {:cexpr "qxl_num_crtc"} boogie_si_record_i32(4);
    $M.45 := 0;
    call {:si_unique_call 3738} {:cexpr "qxl_log_level"} boogie_si_record_i32(0);
    $M.207 := $store.i32($M.207, qxl_ioctls, 0);
    $M.208 := $store.i32($M.208, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(4, 1)), 17);
    $M.209 := $store.ref($M.209, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(8, 1)), qxl_alloc_ioctl);
    $M.210 := $store.i32($M.210, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(16, 1)), $sub.i32(0, 1073191872));
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(24, 1)), .str.60);
    $M.207 := $store.i32($M.207, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(0, 1)), 1);
    $M.208 := $store.i32($M.208, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(4, 1)), 17);
    $M.209 := $store.ref($M.209, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(8, 1)), qxl_map_ioctl);
    $M.210 := $store.i32($M.210, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(16, 1)), $sub.i32(0, 1072667583));
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(24, 1)), .str.61);
    $M.207 := $store.i32($M.207, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(0, 1)), 2);
    $M.208 := $store.i32($M.208, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(4, 1)), 17);
    $M.209 := $store.ref($M.209, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(8, 1)), qxl_execbuffer_ioctl);
    $M.210 := $store.i32($M.210, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(16, 1)), 1074816066);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(24, 1)), .str.62);
    $M.207 := $store.i32($M.207, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(0, 1)), 3);
    $M.208 := $store.i32($M.208, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(4, 1)), 17);
    $M.209 := $store.ref($M.209, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(8, 1)), qxl_update_area_ioctl);
    $M.210 := $store.i32($M.210, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(16, 1)), 1075340355);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(24, 1)), .str.63);
    $M.207 := $store.i32($M.207, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(0, 1)), 4);
    $M.208 := $store.i32($M.208, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(4, 1)), 17);
    $M.209 := $store.ref($M.209, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(8, 1)), qxl_getparam_ioctl);
    $M.210 := $store.i32($M.210, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(16, 1)), $sub.i32(0, 1072667580));
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(24, 1)), .str.64);
    $M.207 := $store.i32($M.207, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(0, 1)), 5);
    $M.208 := $store.i32($M.208, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(4, 1)), 17);
    $M.209 := $store.ref($M.209, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(8, 1)), qxl_clientcap_ioctl);
    $M.210 := $store.i32($M.210, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(16, 1)), 1074291781);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(24, 1)), .str.65);
    $M.207 := $store.i32($M.207, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(0, 1)), 6);
    $M.208 := $store.i32($M.208, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(4, 1)), 17);
    $M.209 := $store.ref($M.209, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(8, 1)), qxl_alloc_surf_ioctl);
    $M.210 := $store.i32($M.210, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(16, 1)), $sub.i32(0, 1072143290));
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(24, 1)), .str.66);
    $M.75 := 0;
    call {:si_unique_call 3739} {:cexpr "ldv_linux_lib_idr_idr_surf_id_idr_of_qxl_device"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 3740} {:cexpr "ldv_linux_lib_idr_idr_release_idr_of_qxl_device"} boogie_si_record_i32(0);
    call {:si_unique_call 3741} {:cexpr "ldv_linux_kernel_sched_completion_completion"} boogie_si_record_i32(0);
    $M.44 := 1;
    call {:si_unique_call 3742} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_surf_id_idr_lock_of_qxl_device"} boogie_si_record_i32(1);
    call {:si_unique_call 3743} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct"} boogie_si_record_i32(1);
    $M.52 := 1;
    call {:si_unique_call 3744} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_release_idr_lock_of_qxl_device"} boogie_si_record_i32(1);
    call {:si_unique_call 3745} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_ptl"} boogie_si_record_i32(1);
    call {:si_unique_call 3746} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data"} boogie_si_record_i32(1);
    $M.40 := 1;
    call {:si_unique_call 3747} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lru_lock_of_ttm_bo_global"} boogie_si_record_i32(1);
    call {:si_unique_call 3748} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_ttm_mem_global"} boogie_si_record_i32(1);
    $M.41 := 1;
    call {:si_unique_call 3749} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_qxl_ring"} boogie_si_record_i32(1);
    call {:si_unique_call 3750} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    call {:si_unique_call 3751} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock"} boogie_si_record_i32(1);
    call {:si_unique_call 3752} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode"} boogie_si_record_i32(1);
    $M.93 := 1;
    call {:si_unique_call 3753} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_event_lock_of_drm_device"} boogie_si_record_i32(1);
    $M.72 := 1;
    call {:si_unique_call 3754} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_delayed_ops_lock_of_qxl_fbdev"} boogie_si_record_i32(1);
    call {:si_unique_call 3755} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct"} boogie_si_record_i32(1);
    $M.51 := 0;
    call {:si_unique_call 3756} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(0);
    $M.190 := 0;
    call {:si_unique_call 3757} {:cexpr "ldv_linux_block_queue_queue_state"} boogie_si_record_i32(0);
    $M.189 := 0;
    call {:si_unique_call 3758} {:cexpr "ldv_linux_block_genhd_disk_state"} boogie_si_record_i32(0);
    $M.6 := $store.ref($M.6, qxl_fence_ops, qxl_get_driver_name);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_fence_ops, $mul.ref(0, 72)), $mul.ref(8, 1)), qxl_get_timeline_name);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_fence_ops, $mul.ref(0, 72)), $mul.ref(16, 1)), qxl_nop_signaling);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_fence_ops, $mul.ref(0, 72)), $mul.ref(24, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_fence_ops, $mul.ref(0, 72)), $mul.ref(32, 1)), qxl_fence_wait);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_fence_ops, $mul.ref(0, 72)), $mul.ref(40, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_fence_ops, $mul.ref(0, 72)), $mul.ref(48, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_fence_ops, $mul.ref(0, 72)), $mul.ref(56, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_fence_ops, $mul.ref(0, 72)), $mul.ref(64, 1)), $0.ref);
    $M.48 := $store.i32($M.48, release_size_per_bo, 256);
    $M.48 := $store.i32($M.48, $add.ref($add.ref(release_size_per_bo, $mul.ref(0, 12)), $mul.ref(1, 4)), 128);
    $M.48 := $store.i32($M.48, $add.ref($add.ref(release_size_per_bo, $mul.ref(0, 12)), $mul.ref(2, 4)), 256);
    $M.47 := $store.i32($M.47, releases_per_bo, 16);
    $M.47 := $store.i32($M.47, $add.ref($add.ref(releases_per_bo, $mul.ref(0, 12)), $mul.ref(1, 4)), 32);
    $M.47 := $store.i32($M.47, $add.ref($add.ref(releases_per_bo, $mul.ref(0, 12)), $mul.ref(2, 4)), 16);
    $M.6 := $store.ref($M.6, qxl_debugfs_list, .str.173);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(qxl_debugfs_list, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), qxl_debugfs_irq_received);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(qxl_debugfs_list, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(qxl_debugfs_list, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(qxl_debugfs_list, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), .str.174);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(qxl_debugfs_list, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), qxl_debugfs_buffers_info);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(qxl_debugfs_list, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(qxl_debugfs_list, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), $0.ref);
    $M.6 := $store.i64($M.6, qxl_defio, 8);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.6 := $store.i64($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(96, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(104, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), $0.ref);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.6 := $store.i64($M.6, $add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(8, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(184, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(192, 1)), qxl_deferred_io);
    $M.6 := $store.ref($M.6, qxlfb_ops, __this_module);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(8, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(16, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(24, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(32, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(40, 1)), drm_fb_helper_check_var);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(48, 1)), drm_fb_helper_set_par);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(56, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(64, 1)), drm_fb_helper_setcmap);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(72, 1)), drm_fb_helper_blank);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(80, 1)), drm_fb_helper_pan_display);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(88, 1)), qxl_fb_fillrect);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(96, 1)), qxl_fb_copyarea);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(104, 1)), qxl_fb_imageblit);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(112, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(120, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(128, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(136, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(144, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(152, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(160, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(168, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(176, 1)), drm_fb_helper_debug_enter);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(184, 1)), drm_fb_helper_debug_leave);
    $M.6 := $store.ref($M.6, qxl_backend_func, qxl_ttm_backend_bind);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_backend_func, $mul.ref(0, 24)), $mul.ref(8, 1)), qxl_ttm_backend_unbind);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_backend_func, $mul.ref(0, 24)), $mul.ref(16, 1)), qxl_ttm_backend_destroy);
    $M.6 := $store.ref($M.6, qxl_connector_helper_funcs, qxl_conn_get_modes);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_connector_helper_funcs, $mul.ref(0, 24)), $mul.ref(8, 1)), qxl_conn_mode_valid);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_connector_helper_funcs, $mul.ref(0, 24)), $mul.ref(16, 1)), qxl_best_encoder);
    $M.6 := $store.ref($M.6, qxl_enc_helper_funcs, qxl_enc_dpms);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_enc_helper_funcs, $mul.ref(0, 96)), $mul.ref(8, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_enc_helper_funcs, $mul.ref(0, 96)), $mul.ref(16, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_enc_helper_funcs, $mul.ref(0, 96)), $mul.ref(24, 1)), qxl_enc_mode_fixup);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_enc_helper_funcs, $mul.ref(0, 96)), $mul.ref(32, 1)), qxl_enc_prepare);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_enc_helper_funcs, $mul.ref(0, 96)), $mul.ref(40, 1)), qxl_enc_commit);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_enc_helper_funcs, $mul.ref(0, 96)), $mul.ref(48, 1)), qxl_enc_mode_set);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_enc_helper_funcs, $mul.ref(0, 96)), $mul.ref(56, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_enc_helper_funcs, $mul.ref(0, 96)), $mul.ref(64, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_enc_helper_funcs, $mul.ref(0, 96)), $mul.ref(72, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_enc_helper_funcs, $mul.ref(0, 96)), $mul.ref(80, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_enc_helper_funcs, $mul.ref(0, 96)), $mul.ref(88, 1)), $0.ref);
    $M.6 := $store.ref($M.6, qxl_crtc_helper_funcs, qxl_crtc_dpms);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(8, 1)), qxl_crtc_prepare);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(16, 1)), qxl_crtc_commit);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(24, 1)), qxl_crtc_mode_fixup);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(32, 1)), qxl_crtc_mode_set);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(40, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(48, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(56, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(64, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(72, 1)), qxl_crtc_disable);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(80, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(88, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(96, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(104, 1)), $0.ref);
    $M.6 := $store.ref($M.6, qxl_mode_funcs, qxl_user_framebuffer_create);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_mode_funcs, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_mode_funcs, $mul.ref(0, 32)), $mul.ref(16, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_mode_funcs, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.121 := $sub.i32(0, 1);
    call {:si_unique_call 3759} {:cexpr "qxl_modeset"} boogie_si_record_i32($sub.i32(0, 1));
    $M.6 := $store.ref($M.6, qxl_pm_ops, $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(8, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(16, 1)), qxl_pm_suspend);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(24, 1)), qxl_pm_resume);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(32, 1)), qxl_pm_freeze);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(40, 1)), qxl_pm_thaw);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(48, 1)), qxl_pm_freeze);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(56, 1)), qxl_pm_restore);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(64, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(72, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(80, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(88, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(96, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(104, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(112, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(120, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(128, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(136, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(144, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(152, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(160, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(168, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(176, 1)), $0.ref);
    $M.6 := $store.i32($M.6, pciidlist, 6966);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), 256);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 196608);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(20, 1)), 16776960);
    $M.6 := $store.i64($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 6966);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), 256);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 229376);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(20, 1)), 16776960);
    $M.6 := $store.i64($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.6 := $store.i64($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.271 := $store.ref($M.271, qxl_pci_driver, $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str.74);
    $M.271 := $store.ref($M.271, $add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), pciidlist);
    $M.271 := $store.ref($M.271, $add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), qxl_pci_probe);
    $M.271 := $store.ref($M.271, $add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), qxl_pci_remove);
    $M.271 := $store.ref($M.271, $add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.271 := $store.i8($M.271, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.271 := $store.ref($M.271, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), qxl_pm_ops);
    $M.271 := $store.ref($M.271, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.271 := $store.i32($M.271, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.271 := $store.i32($M.271, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.271 := $store.i32($M.271, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.271 := $store.ref($M.271, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.271 := $store.i32($M.271, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.271 := $store.i64($M.271, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.271 := $store.ref($M.271, $add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.271 := $store.ref($M.271, $add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    call {:si_unique_call 3760} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_update_lock_of_backlight_device"} boogie_si_record_i8(0);
    $M.54 := 0;
    call {:si_unique_call 3761} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_update_area_mutex_of_qxl_device"} boogie_si_record_i8(0);
    $M.37 := 0;
    call {:si_unique_call 3762} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_surf_evict_mutex_of_qxl_device"} boogie_si_record_i8(0);
    $M.35 := 0;
    call {:si_unique_call 3763} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_struct_mutex_of_drm_device"} boogie_si_record_i8(0);
    $M.49 := 0;
    call {:si_unique_call 3764} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_release_mutex_of_qxl_device"} boogie_si_record_i8(0);
    $M.36 := 0;
    call {:si_unique_call 3765} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_qxl_gem"} boogie_si_record_i8(0);
    call {:si_unique_call 3766} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device"} boogie_si_record_i8(0);
    call {:si_unique_call 3767} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock_of_fb_info"} boogie_si_record_i8(0);
    call {:si_unique_call 3768} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock"} boogie_si_record_i8(0);
    call {:si_unique_call 3769} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode"} boogie_si_record_i8(0);
    $M.65 := 0;
    call {:si_unique_call 3770} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_base_of_ww_mutex"} boogie_si_record_i8(0);
    $M.55 := 0;
    call {:si_unique_call 3771} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_async_io_mutex_of_qxl_device"} boogie_si_record_i8(0);
    call {:si_unique_call 3772} {:cexpr "LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS"} boogie_si_record_i32(0);
    $M.76 := $0.ref;
    $M.6 := $store.ref($M.6, qxl_ttm_vm_ops, $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_ttm_vm_ops, $mul.ref(0, 80)), $mul.ref(8, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_ttm_vm_ops, $mul.ref(0, 80)), $mul.ref(16, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_ttm_vm_ops, $mul.ref(0, 80)), $mul.ref(24, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_ttm_vm_ops, $mul.ref(0, 80)), $mul.ref(32, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_ttm_vm_ops, $mul.ref(0, 80)), $mul.ref(40, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_ttm_vm_ops, $mul.ref(0, 80)), $mul.ref(48, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_ttm_vm_ops, $mul.ref(0, 80)), $mul.ref(56, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_ttm_vm_ops, $mul.ref(0, 80)), $mul.ref(64, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_ttm_vm_ops, $mul.ref(0, 80)), $mul.ref(72, 1)), $0.ref);
    $M.403 := $store.i32($M.403, __mod_pci__pciidlist_device_table, 0);
    $M.404 := $store.i32($M.404, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.405 := $store.i32($M.405, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.406 := $store.i32($M.406, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.407 := $store.i32($M.407, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.408 := $store.i32($M.408, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.409 := $store.i64($M.409, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.403 := $store.i32($M.403, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.404 := $store.i32($M.404, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.405 := $store.i32($M.405, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.406 := $store.i32($M.406, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.407 := $store.i32($M.407, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.408 := $store.i32($M.408, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.409 := $store.i64($M.409, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.403 := $store.i32($M.403, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.404 := $store.i32($M.404, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.405 := $store.i32($M.405, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.406 := $store.i32($M.406, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.407 := $store.i32($M.407, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.408 := $store.i32($M.408, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.409 := $store.i64($M.409, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.206 := 0;
    call {:si_unique_call 3773} {:cexpr "ldv_linux_usb_urb_urb_state"} boogie_si_record_i32(0);
    $M.184 := 0;
    call {:si_unique_call 3774} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    $M.205 := 0;
    call {:si_unique_call 3775} {:cexpr "ldv_linux_usb_gadget_usb_gadget"} boogie_si_record_i32(0);
    $M.204 := 0;
    call {:si_unique_call 3776} {:cexpr "ldv_linux_usb_coherent_coherent_state"} boogie_si_record_i32(0);
    $M.203 := 0;
    call {:si_unique_call 3777} {:cexpr "locksocknumber"} boogie_si_record_i32(0);
    $M.202 := 0;
    call {:si_unique_call 3778} {:cexpr "rtnllocknumber"} boogie_si_record_i32(0);
    $M.183 := 0;
    call {:si_unique_call 3779} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    $M.201 := 0;
    call {:si_unique_call 3780} {:cexpr "ldv_linux_mmc_sdio_func_sdio_element"} boogie_si_record_i16(0);
    $M.115 := 0;
    call {:si_unique_call 3781} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32(0);
    $M.199 := 0;
    call {:si_unique_call 3782} {:cexpr "ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched"} boogie_si_record_i32(0);
    $M.198 := 0;
    call {:si_unique_call 3783} {:cexpr "ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh"} boogie_si_record_i32(0);
    $M.200 := 0;
    call {:si_unique_call 3784} {:cexpr "ldv_linux_kernel_rcu_srcu_srcu_nested"} boogie_si_record_i32(0);
    $M.197 := 1;
    call {:si_unique_call 3785} {:cexpr "ldv_linux_kernel_module_module_refcounter"} boogie_si_record_i32(1);
    $M.196 := 1;
    call {:si_unique_call 3786} {:cexpr "ldv_linux_kernel_locking_rwlock_wlock"} boogie_si_record_i32(1);
    $M.195 := 1;
    call {:si_unique_call 3787} {:cexpr "ldv_linux_kernel_locking_rwlock_rlock"} boogie_si_record_i32(1);
    $M.194 := 0;
    call {:si_unique_call 3788} {:cexpr "ldv_linux_fs_sysfs_sysfs"} boogie_si_record_i32(0);
    $M.193 := 0;
    call {:si_unique_call 3789} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(0);
    $M.192 := 0;
    call {:si_unique_call 3790} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(0);
    $M.191 := 0;
    call {:si_unique_call 3791} {:cexpr "ldv_linux_block_request_blk_rq"} boogie_si_record_i32(0);
    $M.64 := 0;
    call {:si_unique_call 3792} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32(0);
    $M.50 := 1;
    call {:si_unique_call 3793} {:cexpr "ldv_linux_alloc_usb_lock_lock"} boogie_si_record_i32(1);
    $M.122 := 7;
    call {:si_unique_call 3794} {:cexpr "qxl_max_ioctls"} boogie_si_record_i32(7);
    $M.6 := $store.i8($M.6, .str.188, 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.188, $mul.ref(0, 24)), $mul.ref(1, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.188, $mul.ref(0, 24)), $mul.ref(2, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.188, $mul.ref(0, 24)), $mul.ref(3, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.188, $mul.ref(0, 24)), $mul.ref(4, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.188, $mul.ref(0, 24)), $mul.ref(5, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.188, $mul.ref(0, 24)), $mul.ref(6, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.188, $mul.ref(0, 24)), $mul.ref(7, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.188, $mul.ref(0, 24)), $mul.ref(8, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.188, $mul.ref(0, 24)), $mul.ref(9, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.188, $mul.ref(0, 24)), $mul.ref(10, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.188, $mul.ref(0, 24)), $mul.ref(11, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.188, $mul.ref(0, 24)), $mul.ref(12, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.188, $mul.ref(0, 24)), $mul.ref(13, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.188, $mul.ref(0, 24)), $mul.ref(14, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.188, $mul.ref(0, 24)), $mul.ref(15, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.188, $mul.ref(0, 24)), $mul.ref(16, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.188, $mul.ref(0, 24)), $mul.ref(17, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.188, $mul.ref(0, 24)), $mul.ref(18, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.188, $mul.ref(0, 24)), $mul.ref(19, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.188, $mul.ref(0, 24)), $mul.ref(20, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.188, $mul.ref(0, 24)), $mul.ref(21, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.188, $mul.ref(0, 24)), $mul.ref(22, 1)), 10);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.188, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.6 := $store.i8($M.6, .str.41, 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(1, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(2, 1)), 58);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(3, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(4, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(5, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(6, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(7, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(8, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(9, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(10, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(11, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(12, 1)), 103);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(13, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(14, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(15, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(16, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(17, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(18, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(19, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(20, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(21, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(22, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(23, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(24, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(25, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(26, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(27, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(28, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(29, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(30, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(31, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(32, 1)), 44);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(33, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(34, 1)), 40);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(35, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(36, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(37, 1)), 44);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(38, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(39, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(40, 1)), 44);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(41, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(42, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(43, 1)), 44);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(44, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(45, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(46, 1)), 41);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(47, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(48, 1)), 40);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(49, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(50, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(51, 1)), 44);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(52, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(53, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(54, 1)), 41);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(55, 1)), 10);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 57)), $mul.ref(56, 1)), 0);
    $M.6 := $store.i8($M.6, .str.51, 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(1, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(2, 1)), 58);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(3, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(4, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(5, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(6, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(7, 1)), 118);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(8, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(9, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(10, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(11, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(12, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(13, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(14, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(15, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(16, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(17, 1)), 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(18, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(19, 1)), 103);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(20, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(21, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(22, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(23, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(24, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(25, 1)), 46);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(26, 1)), 10);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.51, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.6 := $store.i8($M.6, .str.53, 81);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(1, 1)), 88);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(2, 1)), 76);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(4, 1)), 73);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(5, 1)), 78);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(6, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(7, 1)), 69);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(8, 1)), 82);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(9, 1)), 82);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(10, 1)), 85);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(11, 1)), 80);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(12, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(13, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(14, 1)), 67);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(15, 1)), 76);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(16, 1)), 73);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(17, 1)), 69);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(18, 1)), 78);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(19, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(20, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(21, 1)), 77);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(22, 1)), 79);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(23, 1)), 78);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(24, 1)), 73);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(25, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(26, 1)), 79);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(27, 1)), 82);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(28, 1)), 83);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(29, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(30, 1)), 67);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(31, 1)), 79);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(32, 1)), 78);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(33, 1)), 70);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(34, 1)), 73);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(35, 1)), 71);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(36, 1)), 10);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.6 := $store.i8($M.6, .str.67, 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.67, $mul.ref(0, 21)), $mul.ref(1, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.67, $mul.ref(0, 21)), $mul.ref(2, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.67, $mul.ref(0, 21)), $mul.ref(3, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.67, $mul.ref(0, 21)), $mul.ref(4, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.67, $mul.ref(0, 21)), $mul.ref(5, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.67, $mul.ref(0, 21)), $mul.ref(6, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.67, $mul.ref(0, 21)), $mul.ref(7, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.67, $mul.ref(0, 21)), $mul.ref(8, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.67, $mul.ref(0, 21)), $mul.ref(9, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.67, $mul.ref(0, 21)), $mul.ref(10, 1)), 44);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.67, $mul.ref(0, 21)), $mul.ref(11, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.67, $mul.ref(0, 21)), $mul.ref(12, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.67, $mul.ref(0, 21)), $mul.ref(13, 1)), 121);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.67, $mul.ref(0, 21)), $mul.ref(14, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.67, $mul.ref(0, 21)), $mul.ref(15, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.67, $mul.ref(0, 21)), $mul.ref(16, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.67, $mul.ref(0, 21)), $mul.ref(17, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.67, $mul.ref(0, 21)), $mul.ref(18, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.67, $mul.ref(0, 21)), $mul.ref(19, 1)), 10);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.67, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.6 := $store.i8($M.6, .str.34, 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(1, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(2, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(3, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(4, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(5, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(6, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(7, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(8, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(9, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(10, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(11, 1)), 10);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.34, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.6 := $store.i8($M.6, .str.35, 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.35, $mul.ref(0, 24)), $mul.ref(1, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.35, $mul.ref(0, 24)), $mul.ref(2, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.35, $mul.ref(0, 24)), $mul.ref(3, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.35, $mul.ref(0, 24)), $mul.ref(4, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.35, $mul.ref(0, 24)), $mul.ref(5, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.35, $mul.ref(0, 24)), $mul.ref(6, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.35, $mul.ref(0, 24)), $mul.ref(7, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.35, $mul.ref(0, 24)), $mul.ref(8, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.35, $mul.ref(0, 24)), $mul.ref(9, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.35, $mul.ref(0, 24)), $mul.ref(10, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.35, $mul.ref(0, 24)), $mul.ref(11, 1)), 44);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.35, $mul.ref(0, 24)), $mul.ref(12, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.35, $mul.ref(0, 24)), $mul.ref(13, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.35, $mul.ref(0, 24)), $mul.ref(14, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.35, $mul.ref(0, 24)), $mul.ref(15, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.35, $mul.ref(0, 24)), $mul.ref(16, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.35, $mul.ref(0, 24)), $mul.ref(17, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.35, $mul.ref(0, 24)), $mul.ref(18, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.35, $mul.ref(0, 24)), $mul.ref(19, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.35, $mul.ref(0, 24)), $mul.ref(20, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.35, $mul.ref(0, 24)), $mul.ref(21, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.35, $mul.ref(0, 24)), $mul.ref(22, 1)), 10);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.35, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.6 := $store.i8($M.6, .str.37, 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(1, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(2, 1)), 58);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(3, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(4, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(5, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(6, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(7, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(8, 1)), 10);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.6 := $store.i8($M.6, .str.46, 113);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.46, $mul.ref(0, 20)), $mul.ref(1, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.46, $mul.ref(0, 20)), $mul.ref(2, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.46, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.46, $mul.ref(0, 20)), $mul.ref(4, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.46, $mul.ref(0, 20)), $mul.ref(5, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.46, $mul.ref(0, 20)), $mul.ref(6, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.46, $mul.ref(0, 20)), $mul.ref(7, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.46, $mul.ref(0, 20)), $mul.ref(8, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.46, $mul.ref(0, 20)), $mul.ref(9, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.46, $mul.ref(0, 20)), $mul.ref(10, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.46, $mul.ref(0, 20)), $mul.ref(11, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.46, $mul.ref(0, 20)), $mul.ref(12, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.46, $mul.ref(0, 20)), $mul.ref(13, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.46, $mul.ref(0, 20)), $mul.ref(14, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.46, $mul.ref(0, 20)), $mul.ref(15, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.46, $mul.ref(0, 20)), $mul.ref(16, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.46, $mul.ref(0, 20)), $mul.ref(17, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.46, $mul.ref(0, 20)), $mul.ref(18, 1)), 10);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.46, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.6 := $store.i8($M.6, .str.2, 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(1, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(2, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(3, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(4, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(5, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(6, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(7, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(8, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(9, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(10, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(11, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(12, 1)), 104);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(13, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(14, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(15, 1)), 107);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(16, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(17, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(18, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(19, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(20, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(21, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(22, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(23, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(24, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(25, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(26, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(27, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(28, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(29, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(30, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(31, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(32, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(33, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(34, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(35, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(36, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(37, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(38, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(39, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(40, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(41, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(42, 1)), 103);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(43, 1)), 44);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(44, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(45, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(46, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(47, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(48, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(49, 1)), 121);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(50, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(51, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(52, 1)), 103);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(53, 1)), 10);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(54, 1)), 0);
    $M.6 := $store.i8($M.6, .str.109, 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(1, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(3, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(4, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(5, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(6, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(7, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(8, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(9, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(10, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(11, 1)), 104);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(12, 1)), 58);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(13, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(14, 1)), 104);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(15, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(16, 1)), 118);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(17, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(18, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(19, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(20, 1)), 88);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(21, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(22, 1)), 40);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(23, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(24, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(25, 1)), 41);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(26, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(27, 1)), 33);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(28, 1)), 61);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(29, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(30, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(31, 1)), 88);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(32, 1)), 10);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.109, $mul.ref(0, 34)), $mul.ref(33, 1)), 0);
    $M.6 := $store.i8($M.6, .str, 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(1, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(2, 1)), 58);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(3, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(4, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(5, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(6, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(7, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(8, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(9, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(10, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(11, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(12, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(13, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(14, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(15, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(16, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(17, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(18, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(19, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(20, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(21, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(22, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(23, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(24, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(25, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(26, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(27, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(28, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(29, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(30, 1)), 104);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(31, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(32, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(33, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(34, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(35, 1)), 10);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(36, 1)), 0);
    $M.410 := $store.i8($M.410, .str.153, 113);
    $M.410 := $store.i8($M.410, $add.ref($add.ref(.str.153, $mul.ref(0, 11)), $mul.ref(1, 1)), 120);
    $M.410 := $store.i8($M.410, $add.ref($add.ref(.str.153, $mul.ref(0, 11)), $mul.ref(2, 1)), 108);
    $M.410 := $store.i8($M.410, $add.ref($add.ref(.str.153, $mul.ref(0, 11)), $mul.ref(3, 1)), 95);
    $M.410 := $store.i8($M.410, $add.ref($add.ref(.str.153, $mul.ref(0, 11)), $mul.ref(4, 1)), 109);
    $M.410 := $store.i8($M.410, $add.ref($add.ref(.str.153, $mul.ref(0, 11)), $mul.ref(5, 1)), 101);
    $M.410 := $store.i8($M.410, $add.ref($add.ref(.str.153, $mul.ref(0, 11)), $mul.ref(6, 1)), 109);
    $M.410 := $store.i8($M.410, $add.ref($add.ref(.str.153, $mul.ref(0, 11)), $mul.ref(7, 1)), 95);
    $M.410 := $store.i8($M.410, $add.ref($add.ref(.str.153, $mul.ref(0, 11)), $mul.ref(8, 1)), 109);
    $M.410 := $store.i8($M.410, $add.ref($add.ref(.str.153, $mul.ref(0, 11)), $mul.ref(9, 1)), 109);
    $M.410 := $store.i8($M.410, $add.ref($add.ref(.str.153, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.411 := $store.i8($M.411, .str.154, 113);
    $M.411 := $store.i8($M.411, $add.ref($add.ref(.str.154, $mul.ref(0, 12)), $mul.ref(1, 1)), 120);
    $M.411 := $store.i8($M.411, $add.ref($add.ref(.str.154, $mul.ref(0, 12)), $mul.ref(2, 1)), 108);
    $M.411 := $store.i8($M.411, $add.ref($add.ref(.str.154, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.411 := $store.i8($M.411, $add.ref($add.ref(.str.154, $mul.ref(0, 12)), $mul.ref(4, 1)), 115);
    $M.411 := $store.i8($M.411, $add.ref($add.ref(.str.154, $mul.ref(0, 12)), $mul.ref(5, 1)), 117);
    $M.411 := $store.i8($M.411, $add.ref($add.ref(.str.154, $mul.ref(0, 12)), $mul.ref(6, 1)), 114);
    $M.411 := $store.i8($M.411, $add.ref($add.ref(.str.154, $mul.ref(0, 12)), $mul.ref(7, 1)), 102);
    $M.411 := $store.i8($M.411, $add.ref($add.ref(.str.154, $mul.ref(0, 12)), $mul.ref(8, 1)), 95);
    $M.411 := $store.i8($M.411, $add.ref($add.ref(.str.154, $mul.ref(0, 12)), $mul.ref(9, 1)), 109);
    $M.411 := $store.i8($M.411, $add.ref($add.ref(.str.154, $mul.ref(0, 12)), $mul.ref(10, 1)), 109);
    $M.411 := $store.i8($M.411, $add.ref($add.ref(.str.154, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.6 := $store.i8($M.6, .str.10, 113);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.10, $mul.ref(0, 9)), $mul.ref(1, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.10, $mul.ref(0, 9)), $mul.ref(2, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.10, $mul.ref(0, 9)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.10, $mul.ref(0, 9)), $mul.ref(4, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.10, $mul.ref(0, 9)), $mul.ref(5, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.10, $mul.ref(0, 9)), $mul.ref(6, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.10, $mul.ref(0, 9)), $mul.ref(7, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.10, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.6 := $store.i8($M.6, .str.12, 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(1, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(2, 1)), 58);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(3, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(4, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(5, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(6, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(7, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(8, 1)), 45);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(9, 1)), 62);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(10, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(11, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(12, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(13, 1)), 118);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(14, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(15, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(16, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(17, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(18, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(19, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(20, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(21, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(22, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(23, 1)), 61);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(24, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(25, 1)), 48);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(26, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(27, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(28, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(29, 1)), 44);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(30, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(31, 1)), 118);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(32, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(33, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(34, 1)), 45);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(35, 1)), 62);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(36, 1)), 118);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(37, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(38, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(39, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(40, 1)), 103);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(41, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(42, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(43, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(44, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(45, 1)), 61);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(46, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(47, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(48, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(49, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(50, 1)), 10);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(51, 1)), 0);
    $M.6 := $store.i8($M.6, .str.4, 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(1, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(2, 1)), 58);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(3, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(4, 1)), 48);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(5, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(6, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(7, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(8, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(9, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(10, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(11, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(12, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(13, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(14, 1)), 63);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(15, 1)), 63);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(16, 1)), 10);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.6 := $store.i8($M.6, .str.47, 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.47, $mul.ref(0, 22)), $mul.ref(1, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.47, $mul.ref(0, 22)), $mul.ref(2, 1)), 58);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.47, $mul.ref(0, 22)), $mul.ref(3, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.47, $mul.ref(0, 22)), $mul.ref(4, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.47, $mul.ref(0, 22)), $mul.ref(5, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.47, $mul.ref(0, 22)), $mul.ref(6, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.47, $mul.ref(0, 22)), $mul.ref(7, 1)), 91);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.47, $mul.ref(0, 22)), $mul.ref(8, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.47, $mul.ref(0, 22)), $mul.ref(9, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.47, $mul.ref(0, 22)), $mul.ref(10, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.47, $mul.ref(0, 22)), $mul.ref(11, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.47, $mul.ref(0, 22)), $mul.ref(12, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.47, $mul.ref(0, 22)), $mul.ref(13, 1)), 43);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.47, $mul.ref(0, 22)), $mul.ref(14, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.47, $mul.ref(0, 22)), $mul.ref(15, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.47, $mul.ref(0, 22)), $mul.ref(16, 1)), 43);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.47, $mul.ref(0, 22)), $mul.ref(17, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.47, $mul.ref(0, 22)), $mul.ref(18, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.47, $mul.ref(0, 22)), $mul.ref(19, 1)), 93);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.47, $mul.ref(0, 22)), $mul.ref(20, 1)), 10);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.47, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.6 := $store.i8($M.6, .str.136, 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(1, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(3, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(4, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(5, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(6, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(7, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(8, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(9, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(10, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(11, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(12, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(13, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(14, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(15, 1)), 121);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(16, 1)), 58);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(17, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(18, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(19, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(20, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(21, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(22, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(23, 1)), 44);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(24, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(25, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(26, 1)), 44);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(27, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(28, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(29, 1)), 10);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.136, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.6 := $store.i8($M.6, .str.43, 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(1, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(2, 1)), 58);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(3, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(4, 1)), 113);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(5, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(6, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(7, 1)), 118);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(8, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(9, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(10, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(11, 1)), 44);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(12, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(13, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(14, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(15, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(16, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(17, 1)), 104);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(18, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(19, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(20, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(21, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(22, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(23, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(24, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(25, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(26, 1)), 10);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.43, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.6 := $store.i8($M.6, .str.44, 113);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(1, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(2, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(4, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(5, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(6, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(7, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(8, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(9, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(10, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(11, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(12, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(13, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(14, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(15, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(16, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(17, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(18, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(19, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(20, 1)), 121);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.6 := $store.i8($M.6, .str.45, 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(1, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(2, 1)), 58);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(3, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(4, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(5, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(6, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(7, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(8, 1)), 61);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(9, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(10, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(11, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(12, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(13, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(14, 1)), 44);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(15, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(16, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(17, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(18, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(19, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(20, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(21, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(22, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(23, 1)), 10);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.6 := $store.i8($M.6, .str.130, 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 24)), $mul.ref(1, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 24)), $mul.ref(2, 1)), 58);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 24)), $mul.ref(3, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 24)), $mul.ref(4, 1)), 40);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 24)), $mul.ref(5, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 24)), $mul.ref(6, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 24)), $mul.ref(7, 1)), 44);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 24)), $mul.ref(8, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 24)), $mul.ref(9, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 24)), $mul.ref(10, 1)), 41);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 24)), $mul.ref(11, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 24)), $mul.ref(12, 1)), 61);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 24)), $mul.ref(13, 1)), 62);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 24)), $mul.ref(14, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 24)), $mul.ref(15, 1)), 40);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 24)), $mul.ref(16, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 24)), $mul.ref(17, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 24)), $mul.ref(18, 1)), 44);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 24)), $mul.ref(19, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 24)), $mul.ref(20, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 24)), $mul.ref(21, 1)), 41);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 24)), $mul.ref(22, 1)), 10);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.6 := $store.i8($M.6, .str.162, 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(1, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(2, 1)), 58);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(3, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(4, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(5, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(6, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(7, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(8, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(9, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(10, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(11, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(12, 1)), 10);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.6 := $store.i8($M.6, .str.164, 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(1, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(2, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(3, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(4, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(5, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(6, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(7, 1)), 48);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(8, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(9, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(10, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(11, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(12, 1)), 103);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(13, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(14, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(15, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(16, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(17, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(18, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(19, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(20, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(21, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(22, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(23, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(24, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(25, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(26, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(27, 1)), 44);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(28, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(29, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(30, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(31, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(32, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(33, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(34, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(35, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(36, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(37, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(38, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(39, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(40, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(41, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(42, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(43, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(44, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(45, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(46, 1)), 40);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(47, 1)), 118);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(48, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(49, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(50, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(51, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(52, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(53, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(54, 1)), 44);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(55, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(56, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(57, 1)), 104);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(58, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(59, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(60, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(61, 1)), 119);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(62, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(63, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(64, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(65, 1)), 41);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(66, 1)), 10);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 68)), $mul.ref(67, 1)), 0);
    $M.6 := $store.i8($M.6, .str.165, 113);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.165, $mul.ref(0, 9)), $mul.ref(1, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.165, $mul.ref(0, 9)), $mul.ref(2, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.165, $mul.ref(0, 9)), $mul.ref(3, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.165, $mul.ref(0, 9)), $mul.ref(4, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.165, $mul.ref(0, 9)), $mul.ref(5, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.165, $mul.ref(0, 9)), $mul.ref(6, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.165, $mul.ref(0, 9)), $mul.ref(7, 1)), 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.165, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.6 := $store.i8($M.6, .str.161, 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(1, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(2, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(3, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(4, 1)), 121);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(5, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(6, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(7, 1)), 91);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(8, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(9, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(10, 1)), 44);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(11, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(12, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(13, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(14, 1)), 93);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(15, 1)), 44);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(16, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(17, 1)), 121);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(18, 1)), 91);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(19, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(20, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(21, 1)), 44);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(22, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(23, 1)), 37);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(24, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(25, 1)), 93);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.6 := $store.i8($M.6, .str.173, 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.173, $mul.ref(0, 13)), $mul.ref(1, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.173, $mul.ref(0, 13)), $mul.ref(2, 1)), 113);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.173, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.173, $mul.ref(0, 13)), $mul.ref(4, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.173, $mul.ref(0, 13)), $mul.ref(5, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.173, $mul.ref(0, 13)), $mul.ref(6, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.173, $mul.ref(0, 13)), $mul.ref(7, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.173, $mul.ref(0, 13)), $mul.ref(8, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.173, $mul.ref(0, 13)), $mul.ref(9, 1)), 118);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.173, $mul.ref(0, 13)), $mul.ref(10, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.173, $mul.ref(0, 13)), $mul.ref(11, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.173, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.6 := $store.i8($M.6, .str.174, 113);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.174, $mul.ref(0, 12)), $mul.ref(1, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.174, $mul.ref(0, 12)), $mul.ref(2, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.174, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.174, $mul.ref(0, 12)), $mul.ref(4, 1)), 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.174, $mul.ref(0, 12)), $mul.ref(5, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.174, $mul.ref(0, 12)), $mul.ref(6, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.174, $mul.ref(0, 12)), $mul.ref(7, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.174, $mul.ref(0, 12)), $mul.ref(8, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.174, $mul.ref(0, 12)), $mul.ref(9, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.174, $mul.ref(0, 12)), $mul.ref(10, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.174, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    call {:si_unique_call 3795} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 1335537);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 1336569);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 1337601);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 1338633);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 1339665);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 1340697);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $CurrAddr, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.43, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i27 := $eq.ref(qxl_deferred_io, $p0);
    assume true;
    goto $bb10, $bb19;

  $bb19:
    assume !($i27 == 1);
    $i26 := $eq.ref(qxl_fb_imageblit, $p0);
    assume {:branchcond $i26} true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i26 == 1);
    $i25 := $eq.ref(qxl_fb_copyarea, $p0);
    assume true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i25 == 1);
    $i24 := $eq.ref(qxl_fb_fillrect, $p0);
    assume true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i24 == 1);
    $i23 := $eq.ref(qxl_ttm_io_mem_free, $p0);
    assume true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i23 == 1);
    $i22 := $eq.ref(qxl_bo_move_notify, $p0);
    assume true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i22 == 1);
    $i21 := $eq.ref(qxl_evict_flags, $p0);
    assume true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i21 == 1);
    $i20 := $eq.ref(qxl_gem_prime_vunmap, $p0);
    assume true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i20 == 1);
    $i19 := $eq.ref(qxl_gem_object_close, $p0);
    assume true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume false;
    return;

  $bb2:
    assume $i19 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3796} qxl_gem_object_close($p1, $p2);
    return;

  $bb3:
    assume $i20 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3797} qxl_gem_prime_vunmap($p3, $p4);
    return;

  $bb4:
    assume $i21 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3798} qxl_evict_flags($p5, $p6);
    return;

  $bb5:
    assume $i22 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3799} qxl_bo_move_notify($p7, $p8);
    goto SeqInstr_2668, SeqInstr_2669;

  SeqInstr_2669:
    assume assertsPassed;
    goto SeqInstr_2670;

  SeqInstr_2670:
    return;

  SeqInstr_2668:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i23 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3800} qxl_ttm_io_mem_free($p9, $p10);
    return;

  $bb7:
    assume $i24 == 1;
    $p11 := $bitcast.ref.ref(arg);
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3801} qxl_fb_fillrect($p11, $p12);
    goto SeqInstr_2671, SeqInstr_2672;

  SeqInstr_2672:
    assume assertsPassed;
    goto SeqInstr_2673;

  SeqInstr_2673:
    return;

  SeqInstr_2671:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i25 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3802} qxl_fb_copyarea($p13, $p14);
    goto SeqInstr_2674, SeqInstr_2675;

  SeqInstr_2675:
    assume assertsPassed;
    goto SeqInstr_2676;

  SeqInstr_2676:
    return;

  SeqInstr_2674:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i26 == 1;
    $p15 := $bitcast.ref.ref(arg);
    $p16 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3803} qxl_fb_imageblit($p15, $p16);
    goto SeqInstr_2677, SeqInstr_2678;

  SeqInstr_2678:
    assume assertsPassed;
    goto SeqInstr_2679;

  SeqInstr_2679:
    return;

  SeqInstr_2677:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i27 == 1;
    $p17 := $bitcast.ref.ref(arg);
    $p18 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3804} qxl_deferred_io($p17, $p18);
    goto SeqInstr_2680, SeqInstr_2681;

  SeqInstr_2681:
    assume assertsPassed;
    goto SeqInstr_2682;

  SeqInstr_2682:
    return;

  SeqInstr_2680:
    assume !assertsPassed;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 1341729);

procedure devirtbounce.6(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 1342761);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $CurrAddr, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.43, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i27 := $eq.ref(qxl_deferred_io, $p0);
    assume true;
    goto $bb10, $bb19;

  $bb19:
    assume !($i27 == 1);
    $i26 := $eq.ref(qxl_fb_imageblit, $p0);
    assume {:branchcond $i26} true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i26 == 1);
    $i25 := $eq.ref(qxl_fb_copyarea, $p0);
    assume true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i25 == 1);
    $i24 := $eq.ref(qxl_fb_fillrect, $p0);
    assume true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i24 == 1);
    $i23 := $eq.ref(qxl_ttm_io_mem_free, $p0);
    assume true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i23 == 1);
    $i22 := $eq.ref(qxl_bo_move_notify, $p0);
    assume true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i22 == 1);
    $i21 := $eq.ref(qxl_evict_flags, $p0);
    assume true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i21 == 1);
    $i20 := $eq.ref(qxl_gem_prime_vunmap, $p0);
    assume true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i20 == 1);
    $i19 := $eq.ref(qxl_gem_object_close, $p0);
    assume true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume false;
    return;

  $bb2:
    assume $i19 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3805} qxl_gem_object_close($p1, $p2);
    return;

  $bb3:
    assume $i20 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3806} qxl_gem_prime_vunmap($p3, $p4);
    return;

  $bb4:
    assume $i21 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3807} qxl_evict_flags($p5, $p6);
    return;

  $bb5:
    assume $i22 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3808} qxl_bo_move_notify($p7, $p8);
    goto SeqInstr_2683, SeqInstr_2684;

  SeqInstr_2684:
    assume assertsPassed;
    goto SeqInstr_2685;

  SeqInstr_2685:
    return;

  SeqInstr_2683:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i23 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3809} qxl_ttm_io_mem_free($p9, $p10);
    return;

  $bb7:
    assume $i24 == 1;
    $p11 := $bitcast.ref.ref(arg);
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3810} qxl_fb_fillrect($p11, $p12);
    goto SeqInstr_2686, SeqInstr_2687;

  SeqInstr_2687:
    assume assertsPassed;
    goto SeqInstr_2688;

  SeqInstr_2688:
    return;

  SeqInstr_2686:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i25 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3811} qxl_fb_copyarea($p13, $p14);
    goto SeqInstr_2689, SeqInstr_2690;

  SeqInstr_2690:
    assume assertsPassed;
    goto SeqInstr_2691;

  SeqInstr_2691:
    return;

  SeqInstr_2689:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i26 == 1;
    $p15 := $bitcast.ref.ref(arg);
    $p16 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3812} qxl_fb_imageblit($p15, $p16);
    goto SeqInstr_2692, SeqInstr_2693;

  SeqInstr_2693:
    assume assertsPassed;
    goto SeqInstr_2694;

  SeqInstr_2694:
    return;

  SeqInstr_2692:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i27 == 1;
    $p17 := $bitcast.ref.ref(arg);
    $p18 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3813} qxl_deferred_io($p17, $p18);
    goto SeqInstr_2695, SeqInstr_2696;

  SeqInstr_2696:
    assume assertsPassed;
    goto SeqInstr_2697;

  SeqInstr_2697:
    return;

  SeqInstr_2695:
    assume !assertsPassed;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 1343793);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 1344825);

procedure devirtbounce.9(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.41, $M.71, $M.43, $M.64, $M.36, assertsPassed, $M.40, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.75, $M.49, $M.73, $M.74, $M.55, $M.65, $M.54;



implementation devirtbounce.9(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i51 := $eq.ref(drm_fb_helper_debug_leave, $p0);
    assume true;
    goto $bb18, $bb35;

  $bb35:
    assume !($i51 == 1);
    $i50 := $eq.ref(drm_fb_helper_debug_enter, $p0);
    assume true;
    goto $bb17, $bb34;

  $bb34:
    assume !($i50 == 1);
    $i49 := $eq.ref(drm_fb_helper_set_par, $p0);
    assume true;
    goto $bb16, $bb33;

  $bb33:
    assume !($i49 == 1);
    $i48 := $eq.ref(qxl_ttm_backend_unbind, $p0);
    assume true;
    goto $bb15, $bb32;

  $bb32:
    assume !($i48 == 1);
    $i47 := $eq.ref(qxl_ttm_tt_populate, $p0);
    assume true;
    goto $bb14, $bb31;

  $bb31:
    assume !($i47 == 1);
    $i46 := $eq.ref(drm_crtc_helper_set_config, $p0);
    assume true;
    goto $bb13, $bb30;

  $bb30:
    assume !($i46 == 1);
    $i45 := $eq.ref(qxl_pm_restore, $p0);
    assume true;
    goto $bb12, $bb29;

  $bb29:
    assume !($i45 == 1);
    $i44 := $eq.ref(qxl_pm_thaw, $p0);
    assume true;
    goto $bb11, $bb28;

  $bb28:
    assume !($i44 == 1);
    $i43 := $eq.ref(qxl_pm_freeze, $p0);
    assume {:branchcond $i43} true;
    goto $bb10, $bb27;

  $bb27:
    assume !($i43 == 1);
    $i42 := $eq.ref(qxl_pm_resume, $p0);
    assume true;
    goto $bb9, $bb26;

  $bb26:
    assume !($i42 == 1);
    $i41 := $eq.ref(qxl_pm_suspend, $p0);
    assume true;
    goto $bb8, $bb25;

  $bb25:
    assume !($i41 == 1);
    $i40 := $eq.ref(ttm_bo_global_init, $p0);
    assume true;
    goto $bb7, $bb24;

  $bb24:
    assume !($i40 == 1);
    $i39 := $eq.ref(qxl_ttm_mem_global_init, $p0);
    assume true;
    goto $bb6, $bb23;

  $bb23:
    assume !($i39 == 1);
    $i38 := $eq.ref(qxl_conn_get_modes, $p0);
    assume true;
    goto $bb5, $bb22;

  $bb22:
    assume !($i38 == 1);
    $i37 := $eq.ref(qxl_gem_prime_pin, $p0);
    assume true;
    goto $bb4, $bb21;

  $bb21:
    assume !($i37 == 1);
    $i36 := $eq.ref(qxl_debugfs_init, $p0);
    assume true;
    goto $bb3, $bb20;

  $bb20:
    assume !($i36 == 1);
    $i35 := $eq.ref(qxl_driver_unload, $p0);
    assume true;
    goto $bb2, $bb19;

  $bb19:
    assume !($i35 == 1);
    assume false;
    return;

  $bb2:
    assume $i35 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3814} $i2 := qxl_driver_unload($p1);
    goto SeqInstr_2698, SeqInstr_2699;

  SeqInstr_2699:
    assume assertsPassed;
    goto SeqInstr_2700;

  SeqInstr_2700:
    $r := $i2;
    return;

  SeqInstr_2698:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i36 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3815} $i4 := qxl_debugfs_init($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i37 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3816} $i6 := qxl_gem_prime_pin($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i38 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3817} $i8 := qxl_conn_get_modes($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i39 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3818} $i10 := qxl_ttm_mem_global_init($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i40 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3819} $i12 := ttm_bo_global_init($p11);
    $r := $i12;
    return;

  $bb8:
    assume $i41 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3820} $i14 := qxl_pm_suspend($p13);
    goto SeqInstr_2701, SeqInstr_2702;

  SeqInstr_2702:
    assume assertsPassed;
    goto SeqInstr_2703;

  SeqInstr_2703:
    $r := $i14;
    return;

  SeqInstr_2701:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i42 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3821} $i16 := qxl_pm_resume($p15);
    goto SeqInstr_2704, SeqInstr_2705;

  SeqInstr_2705:
    assume assertsPassed;
    goto SeqInstr_2706;

  SeqInstr_2706:
    $r := $i16;
    return;

  SeqInstr_2704:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i43 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3822} $i18 := qxl_pm_freeze($p17);
    goto SeqInstr_2707, SeqInstr_2708;

  SeqInstr_2708:
    assume assertsPassed;
    goto SeqInstr_2709;

  SeqInstr_2709:
    $r := $i18;
    return;

  SeqInstr_2707:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i44 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3823} $i20 := qxl_pm_thaw($p19);
    goto SeqInstr_2710, SeqInstr_2711;

  SeqInstr_2711:
    assume assertsPassed;
    goto SeqInstr_2712;

  SeqInstr_2712:
    $r := $i20;
    return;

  SeqInstr_2710:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i45 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3824} $i22 := qxl_pm_restore($p21);
    goto SeqInstr_2713, SeqInstr_2714;

  SeqInstr_2714:
    assume assertsPassed;
    goto SeqInstr_2715;

  SeqInstr_2715:
    $r := $i22;
    return;

  SeqInstr_2713:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i46 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3825} $i24 := drm_crtc_helper_set_config($p23);
    $r := $i24;
    return;

  $bb14:
    assume $i47 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3826} $i26 := qxl_ttm_tt_populate($p25);
    $r := $i26;
    return;

  $bb15:
    assume $i48 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3827} $i28 := qxl_ttm_backend_unbind($p27);
    $r := $i28;
    return;

  $bb16:
    assume $i49 == 1;
    $p29 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3828} $i30 := drm_fb_helper_set_par($p29);
    $r := $i30;
    return;

  $bb17:
    assume $i50 == 1;
    $p31 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3829} $i32 := drm_fb_helper_debug_enter($p31);
    $r := $i32;
    return;

  $bb18:
    assume $i51 == 1;
    $p33 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3830} $i34 := drm_fb_helper_debug_leave($p33);
    $r := $i34;
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 1345857);

procedure devirtbounce.10(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 1346889);

procedure devirtbounce.11(funcPtr: ref, arg: i8, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: i8, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 1347921);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.107, $M.108, $M.109, $M.110, $M.111;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(qxl_init_mem_type, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3831} $i3 := qxl_init_mem_type($p1, arg1, $p2);
    $r := $i3;
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 1348953);

procedure devirtbounce.13(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.36, assertsPassed, $CurrAddr, $M.42, $M.52, $M.72, $M.38, $M.39, $M.35, $M.40, $M.37, $M.41, $M.44, $M.53, $M.43, $M.75, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.65, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64;



implementation devirtbounce.13(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i48 := $eq.ref(qxl_ttm_backend_destroy, $p0);
    assume true;
    goto $bb26, $bb51;

  $bb51:
    assume !($i48 == 1);
    $i47 := $eq.ref(qxl_ttm_tt_unpopulate, $p0);
    assume true;
    goto $bb25, $bb50;

  $bb50:
    assume !($i47 == 1);
    $i46 := $eq.ref(qxl_enc_commit, $p0);
    assume true;
    goto $bb24, $bb49;

  $bb49:
    assume !($i46 == 1);
    $i45 := $eq.ref(qxl_enc_prepare, $p0);
    assume true;
    goto $bb23, $bb48;

  $bb48:
    assume !($i45 == 1);
    $i44 := $eq.ref(qxl_enc_destroy, $p0);
    assume true;
    goto $bb22, $bb47;

  $bb47:
    assume !($i44 == 1);
    $i43 := $eq.ref(qxl_conn_destroy, $p0);
    assume {:branchcond $i43} true;
    goto $bb21, $bb46;

  $bb46:
    assume !($i43 == 1);
    $i42 := $eq.ref(qxl_conn_restore, $p0);
    assume true;
    goto $bb20, $bb45;

  $bb45:
    assume !($i42 == 1);
    $i41 := $eq.ref(qxl_conn_save, $p0);
    assume true;
    goto $bb19, $bb44;

  $bb44:
    assume !($i41 == 1);
    $i40 := $eq.ref(qxl_crtc_disable, $p0);
    assume true;
    goto $bb18, $bb43;

  $bb43:
    assume !($i40 == 1);
    $i39 := $eq.ref(qxl_crtc_commit, $p0);
    assume true;
    goto $bb17, $bb42;

  $bb42:
    assume !($i39 == 1);
    $i38 := $eq.ref(qxl_crtc_prepare, $p0);
    assume true;
    goto $bb16, $bb41;

  $bb41:
    assume !($i38 == 1);
    $i37 := $eq.ref(qxl_crtc_destroy, $p0);
    assume true;
    goto $bb15, $bb40;

  $bb40:
    assume !($i37 == 1);
    $i36 := $eq.ref(qxl_user_framebuffer_destroy, $p0);
    assume true;
    goto $bb14, $bb39;

  $bb39:
    assume !($i36 == 1);
    $i35 := $eq.ref(qxl_pci_remove, $p0);
    assume true;
    goto $bb13, $bb38;

  $bb38:
    assume !($i35 == 1);
    $i34 := $eq.ref(ttm_bo_global_release, $p0);
    assume true;
    goto $bb12, $bb37;

  $bb37:
    assume !($i34 == 1);
    $i33 := $eq.ref(qxl_ttm_mem_global_release, $p0);
    assume true;
    goto $bb11, $bb36;

  $bb36:
    assume !($i33 == 1);
    $i32 := $eq.ref(qxl_client_monitors_config_work_func, $p0);
    assume true;
    goto $bb10, $bb35;

  $bb35:
    assume !($i32 == 1);
    $i31 := $eq.ref(fence_release, $p0);
    assume true;
    goto $bb9, $bb34;

  $bb34:
    assume !($i31 == 1);
    $i30 := $eq.ref(qxl_fb_work, $p0);
    assume true;
    goto $bb8, $bb33;

  $bb33:
    assume !($i30 == 1);
    $i29 := $eq.ref(qxl_gc_work, $p0);
    assume true;
    goto $bb7, $bb32;

  $bb32:
    assume !($i29 == 1);
    $i28 := $eq.ref(qxl_gem_prime_unpin, $p0);
    assume true;
    goto $bb6, $bb31;

  $bb31:
    assume !($i28 == 1);
    $i27 := $eq.ref(qxl_gem_object_free, $p0);
    assume true;
    goto $bb5, $bb30;

  $bb30:
    assume !($i27 == 1);
    $i26 := $eq.ref(qxl_debugfs_takedown, $p0);
    assume {:branchcond $i26} true;
    goto $bb4, $bb29;

  $bb29:
    assume !($i26 == 1);
    $i25 := $eq.ref(qxl_ttm_bo_destroy, $p0);
    assume true;
    goto $bb3, $bb28;

  $bb28:
    assume !($i25 == 1);
    $i24 := $eq.ref(drm_gem_object_free, $p0);
    assume true;
    goto $bb2, $bb27;

  $bb27:
    assume !($i24 == 1);
    assume false;
    return;

  $bb2:
    assume $i24 == 1;
    call {:si_unique_call 3832} drm_gem_object_free(arg);
    return;

  $bb3:
    assume $i25 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3833} qxl_ttm_bo_destroy($p1);
    goto SeqInstr_2716, SeqInstr_2717;

  SeqInstr_2717:
    assume assertsPassed;
    goto SeqInstr_2718;

  SeqInstr_2718:
    return;

  SeqInstr_2716:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i26 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3834} qxl_debugfs_takedown($p2);
    return;

  $bb5:
    assume $i27 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3835} qxl_gem_object_free($p3);
    return;

  $bb6:
    assume $i28 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3836} qxl_gem_prime_unpin($p4);
    return;

  $bb7:
    assume $i29 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3837} qxl_gc_work($p5);
    goto SeqInstr_2719, SeqInstr_2720;

  SeqInstr_2720:
    assume assertsPassed;
    goto SeqInstr_2721;

  SeqInstr_2721:
    return;

  SeqInstr_2719:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i30 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3838} qxl_fb_work($p6);
    goto SeqInstr_2722, SeqInstr_2723;

  SeqInstr_2723:
    assume assertsPassed;
    goto SeqInstr_2724;

  SeqInstr_2724:
    return;

  SeqInstr_2722:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i31 == 1;
    call {:si_unique_call 3839} fence_release(arg);
    return;

  $bb10:
    assume $i32 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3840} qxl_client_monitors_config_work_func($p7);
    goto SeqInstr_2725, SeqInstr_2726;

  SeqInstr_2726:
    assume assertsPassed;
    goto SeqInstr_2727;

  SeqInstr_2727:
    return;

  SeqInstr_2725:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i33 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3841} qxl_ttm_mem_global_release($p8);
    return;

  $bb12:
    assume $i34 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3842} ttm_bo_global_release($p9);
    return;

  $bb13:
    assume $i35 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3843} qxl_pci_remove($p10);
    return;

  $bb14:
    assume $i36 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3844} qxl_user_framebuffer_destroy($p11);
    goto SeqInstr_2728, SeqInstr_2729;

  SeqInstr_2729:
    assume assertsPassed;
    goto SeqInstr_2730;

  SeqInstr_2730:
    return;

  SeqInstr_2728:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i37 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3845} qxl_crtc_destroy($p12);
    return;

  $bb16:
    assume $i38 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3846} qxl_crtc_prepare($p13);
    return;

  $bb17:
    assume $i39 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3847} qxl_crtc_commit($p14);
    return;

  $bb18:
    assume $i40 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3848} qxl_crtc_disable($p15);
    goto SeqInstr_2731, SeqInstr_2732;

  SeqInstr_2732:
    assume assertsPassed;
    goto SeqInstr_2733;

  SeqInstr_2733:
    return;

  SeqInstr_2731:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i41 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3849} qxl_conn_save($p16);
    return;

  $bb20:
    assume $i42 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3850} qxl_conn_restore($p17);
    return;

  $bb21:
    assume $i43 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3851} qxl_conn_destroy($p18);
    return;

  $bb22:
    assume $i44 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3852} qxl_enc_destroy($p19);
    return;

  $bb23:
    assume $i45 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3853} qxl_enc_prepare($p20);
    return;

  $bb24:
    assume $i46 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3854} qxl_enc_commit($p21);
    goto SeqInstr_2734, SeqInstr_2735;

  SeqInstr_2735:
    assume assertsPassed;
    goto SeqInstr_2736;

  SeqInstr_2736:
    return;

  SeqInstr_2734:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i47 == 1;
    $p22 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3855} qxl_ttm_tt_unpopulate($p22);
    return;

  $bb26:
    assume $i48 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3856} qxl_ttm_backend_destroy($p23);
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 1349985);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 1351017);

procedure devirtbounce.15(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.36, assertsPassed, $CurrAddr, $M.42, $M.52, $M.72, $M.38, $M.39, $M.35, $M.40, $M.37, $M.41, $M.44, $M.53, $M.43, $M.75, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.65, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64;



implementation devirtbounce.15(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i46 := $eq.ref(qxl_ttm_backend_destroy, $p0);
    assume true;
    goto $bb26, $bb51;

  $bb51:
    assume !($i46 == 1);
    $i45 := $eq.ref(qxl_ttm_tt_unpopulate, $p0);
    assume true;
    goto $bb25, $bb50;

  $bb50:
    assume !($i45 == 1);
    $i44 := $eq.ref(qxl_enc_commit, $p0);
    assume true;
    goto $bb24, $bb49;

  $bb49:
    assume !($i44 == 1);
    $i43 := $eq.ref(qxl_enc_prepare, $p0);
    assume {:branchcond $i43} true;
    goto $bb23, $bb48;

  $bb48:
    assume !($i43 == 1);
    $i42 := $eq.ref(qxl_enc_destroy, $p0);
    assume true;
    goto $bb22, $bb47;

  $bb47:
    assume !($i42 == 1);
    $i41 := $eq.ref(qxl_conn_destroy, $p0);
    assume true;
    goto $bb21, $bb46;

  $bb46:
    assume !($i41 == 1);
    $i40 := $eq.ref(qxl_conn_restore, $p0);
    assume true;
    goto $bb20, $bb45;

  $bb45:
    assume !($i40 == 1);
    $i39 := $eq.ref(qxl_conn_save, $p0);
    assume true;
    goto $bb19, $bb44;

  $bb44:
    assume !($i39 == 1);
    $i38 := $eq.ref(qxl_crtc_disable, $p0);
    assume true;
    goto $bb18, $bb43;

  $bb43:
    assume !($i38 == 1);
    $i37 := $eq.ref(qxl_crtc_commit, $p0);
    assume true;
    goto $bb17, $bb42;

  $bb42:
    assume !($i37 == 1);
    $i36 := $eq.ref(qxl_crtc_prepare, $p0);
    assume true;
    goto $bb16, $bb41;

  $bb41:
    assume !($i36 == 1);
    $i35 := $eq.ref(qxl_crtc_destroy, $p0);
    assume true;
    goto $bb15, $bb40;

  $bb40:
    assume !($i35 == 1);
    $i34 := $eq.ref(qxl_user_framebuffer_destroy, $p0);
    assume true;
    goto $bb14, $bb39;

  $bb39:
    assume !($i34 == 1);
    $i33 := $eq.ref(qxl_pci_remove, $p0);
    assume true;
    goto $bb13, $bb38;

  $bb38:
    assume !($i33 == 1);
    $i32 := $eq.ref(ttm_bo_global_release, $p0);
    assume true;
    goto $bb12, $bb37;

  $bb37:
    assume !($i32 == 1);
    $i31 := $eq.ref(qxl_ttm_mem_global_release, $p0);
    assume true;
    goto $bb11, $bb36;

  $bb36:
    assume !($i31 == 1);
    $i30 := $eq.ref(qxl_client_monitors_config_work_func, $p0);
    assume true;
    goto $bb10, $bb35;

  $bb35:
    assume !($i30 == 1);
    $i29 := $eq.ref(fence_release, $p0);
    assume true;
    goto $bb9, $bb34;

  $bb34:
    assume !($i29 == 1);
    $i28 := $eq.ref(qxl_fb_work, $p0);
    assume true;
    goto $bb8, $bb33;

  $bb33:
    assume !($i28 == 1);
    $i27 := $eq.ref(qxl_gc_work, $p0);
    assume true;
    goto $bb7, $bb32;

  $bb32:
    assume !($i27 == 1);
    $i26 := $eq.ref(qxl_gem_prime_unpin, $p0);
    assume {:branchcond $i26} true;
    goto $bb6, $bb31;

  $bb31:
    assume !($i26 == 1);
    $i25 := $eq.ref(qxl_gem_object_free, $p0);
    assume true;
    goto $bb5, $bb30;

  $bb30:
    assume !($i25 == 1);
    $i24 := $eq.ref(qxl_debugfs_takedown, $p0);
    assume true;
    goto $bb4, $bb29;

  $bb29:
    assume !($i24 == 1);
    $i23 := $eq.ref(qxl_ttm_bo_destroy, $p0);
    assume true;
    goto $bb3, $bb28;

  $bb28:
    assume !($i23 == 1);
    $i22 := $eq.ref(drm_gem_object_free, $p0);
    assume true;
    goto $bb2, $bb27;

  $bb27:
    assume !($i22 == 1);
    assume false;
    return;

  $bb2:
    assume $i22 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3857} drm_gem_object_free($p1);
    return;

  $bb3:
    assume $i23 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3858} qxl_ttm_bo_destroy($p2);
    goto SeqInstr_2737, SeqInstr_2738;

  SeqInstr_2738:
    assume assertsPassed;
    goto SeqInstr_2739;

  SeqInstr_2739:
    return;

  SeqInstr_2737:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i24 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3859} qxl_debugfs_takedown($p3);
    return;

  $bb5:
    assume $i25 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3860} qxl_gem_object_free($p4);
    return;

  $bb6:
    assume $i26 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3861} qxl_gem_prime_unpin($p5);
    return;

  $bb7:
    assume $i27 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3862} qxl_gc_work($p6);
    goto SeqInstr_2740, SeqInstr_2741;

  SeqInstr_2741:
    assume assertsPassed;
    goto SeqInstr_2742;

  SeqInstr_2742:
    return;

  SeqInstr_2740:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i28 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3863} qxl_fb_work($p7);
    goto SeqInstr_2743, SeqInstr_2744;

  SeqInstr_2744:
    assume assertsPassed;
    goto SeqInstr_2745;

  SeqInstr_2745:
    return;

  SeqInstr_2743:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i29 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3864} fence_release($p8);
    return;

  $bb10:
    assume $i30 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3865} qxl_client_monitors_config_work_func($p9);
    goto SeqInstr_2746, SeqInstr_2747;

  SeqInstr_2747:
    assume assertsPassed;
    goto SeqInstr_2748;

  SeqInstr_2748:
    return;

  SeqInstr_2746:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i31 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3866} qxl_ttm_mem_global_release($p10);
    return;

  $bb12:
    assume $i32 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3867} ttm_bo_global_release($p11);
    return;

  $bb13:
    assume $i33 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3868} qxl_pci_remove($p12);
    return;

  $bb14:
    assume $i34 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3869} qxl_user_framebuffer_destroy($p13);
    goto SeqInstr_2749, SeqInstr_2750;

  SeqInstr_2750:
    assume assertsPassed;
    goto SeqInstr_2751;

  SeqInstr_2751:
    return;

  SeqInstr_2749:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i35 == 1;
    call {:si_unique_call 3870} qxl_crtc_destroy(arg);
    return;

  $bb16:
    assume $i36 == 1;
    call {:si_unique_call 3871} qxl_crtc_prepare(arg);
    return;

  $bb17:
    assume $i37 == 1;
    call {:si_unique_call 3872} qxl_crtc_commit(arg);
    return;

  $bb18:
    assume $i38 == 1;
    call {:si_unique_call 3873} qxl_crtc_disable(arg);
    goto SeqInstr_2752, SeqInstr_2753;

  SeqInstr_2753:
    assume assertsPassed;
    goto SeqInstr_2754;

  SeqInstr_2754:
    return;

  SeqInstr_2752:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i39 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3874} qxl_conn_save($p14);
    return;

  $bb20:
    assume $i40 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3875} qxl_conn_restore($p15);
    return;

  $bb21:
    assume $i41 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3876} qxl_conn_destroy($p16);
    return;

  $bb22:
    assume $i42 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3877} qxl_enc_destroy($p17);
    return;

  $bb23:
    assume $i43 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3878} qxl_enc_prepare($p18);
    return;

  $bb24:
    assume $i44 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3879} qxl_enc_commit($p19);
    goto SeqInstr_2755, SeqInstr_2756;

  SeqInstr_2756:
    assume assertsPassed;
    goto SeqInstr_2757;

  SeqInstr_2757:
    return;

  SeqInstr_2755:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i45 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3880} qxl_ttm_tt_unpopulate($p20);
    return;

  $bb26:
    assume $i46 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3881} qxl_ttm_backend_destroy($p21);
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 1352049);

procedure devirtbounce.16(funcPtr: ref, arg: ref) returns ($r: i1);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: ref) returns ($r: i1)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(qxl_nop_signaling, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 3882} $i1 := qxl_nop_signaling(arg);
    $r := $i1;
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 1353081);

procedure devirtbounce.17(funcPtr: ref, arg: ref) returns ($r: i64);



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 1354113);

procedure devirtbounce.18(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation devirtbounce.18(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i46 := $eq.ref(qxl_pm_suspend, $p0);
    assume true;
    goto $bb18, $bb35;

  $bb35:
    assume !($i46 == 1);
    $i45 := $eq.ref(qxl_pm_freeze, $p0);
    assume true;
    goto $bb17, $bb34;

  $bb34:
    assume !($i45 == 1);
    $i44 := $eq.ref(drm_fb_helper_debug_leave, $p0);
    assume true;
    goto $bb16, $bb33;

  $bb33:
    assume !($i44 == 1);
    $i43 := $eq.ref(drm_fb_helper_debug_enter, $p0);
    assume {:branchcond $i43} true;
    goto $bb15, $bb32;

  $bb32:
    assume !($i43 == 1);
    $i42 := $eq.ref(drm_fb_helper_set_par, $p0);
    assume true;
    goto $bb14, $bb31;

  $bb31:
    assume !($i42 == 1);
    $i41 := $eq.ref(qxl_ttm_backend_unbind, $p0);
    assume true;
    goto $bb13, $bb30;

  $bb30:
    assume !($i41 == 1);
    $i40 := $eq.ref(qxl_ttm_tt_populate, $p0);
    assume true;
    goto $bb12, $bb29;

  $bb29:
    assume !($i40 == 1);
    $i39 := $eq.ref(drm_crtc_helper_set_config, $p0);
    assume true;
    goto $bb11, $bb28;

  $bb28:
    assume !($i39 == 1);
    $i38 := $eq.ref(qxl_pm_restore, $p0);
    assume true;
    goto $bb10, $bb27;

  $bb27:
    assume !($i38 == 1);
    $i37 := $eq.ref(qxl_pm_thaw, $p0);
    assume true;
    goto $bb9, $bb26;

  $bb26:
    assume !($i37 == 1);
    $i36 := $eq.ref(qxl_pm_resume, $p0);
    assume true;
    goto $bb8, $bb25;

  $bb25:
    assume !($i36 == 1);
    $i35 := $eq.ref(ttm_bo_global_init, $p0);
    assume true;
    goto $bb7, $bb24;

  $bb24:
    assume !($i35 == 1);
    $i34 := $eq.ref(qxl_ttm_mem_global_init, $p0);
    assume true;
    goto $bb6, $bb23;

  $bb23:
    assume !($i34 == 1);
    $i33 := $eq.ref(qxl_gem_prime_pin, $p0);
    assume true;
    goto $bb5, $bb22;

  $bb22:
    assume !($i33 == 1);
    $i32 := $eq.ref(qxl_conn_get_modes, $p0);
    assume true;
    goto $bb4, $bb21;

  $bb21:
    assume !($i32 == 1);
    $i31 := $eq.ref(qxl_debugfs_init, $p0);
    assume true;
    goto $bb3, $bb20;

  $bb20:
    assume !($i31 == 1);
    $i30 := $eq.ref(qxl_driver_unload, $p0);
    assume true;
    goto $bb2, $bb19;

  $bb19:
    assume !($i30 == 1);
    assume false;
    return;

  $bb2:
    assume $i30 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3883} $i2 := qxl_driver_unload($p1);
    goto SeqInstr_2758, SeqInstr_2759;

  SeqInstr_2759:
    assume assertsPassed;
    goto SeqInstr_2760;

  SeqInstr_2760:
    $r := $i2;
    return;

  SeqInstr_2758:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i31 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3884} $i4 := qxl_debugfs_init($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i32 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3885} $i6 := qxl_conn_get_modes($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i33 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3886} $i8 := qxl_gem_prime_pin($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i34 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3887} $i10 := qxl_ttm_mem_global_init($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i35 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3888} $i12 := ttm_bo_global_init($p11);
    $r := $i12;
    return;

  $bb8:
    assume $i36 == 1;
    call {:si_unique_call 3889} $i13 := qxl_pm_resume(arg);
    goto SeqInstr_2761, SeqInstr_2762;

  SeqInstr_2762:
    assume assertsPassed;
    goto SeqInstr_2763;

  SeqInstr_2763:
    $r := $i13;
    return;

  SeqInstr_2761:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i37 == 1;
    call {:si_unique_call 3890} $i14 := qxl_pm_thaw(arg);
    goto SeqInstr_2764, SeqInstr_2765;

  SeqInstr_2765:
    assume assertsPassed;
    goto SeqInstr_2766;

  SeqInstr_2766:
    $r := $i14;
    return;

  SeqInstr_2764:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i38 == 1;
    call {:si_unique_call 3891} $i15 := qxl_pm_restore(arg);
    goto SeqInstr_2767, SeqInstr_2768;

  SeqInstr_2768:
    assume assertsPassed;
    goto SeqInstr_2769;

  SeqInstr_2769:
    $r := $i15;
    return;

  SeqInstr_2767:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i39 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3892} $i17 := drm_crtc_helper_set_config($p16);
    $r := $i17;
    return;

  $bb12:
    assume $i40 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3893} $i19 := qxl_ttm_tt_populate($p18);
    $r := $i19;
    return;

  $bb13:
    assume $i41 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3894} $i21 := qxl_ttm_backend_unbind($p20);
    $r := $i21;
    return;

  $bb14:
    assume $i42 == 1;
    $p22 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3895} $i23 := drm_fb_helper_set_par($p22);
    $r := $i23;
    return;

  $bb15:
    assume $i43 == 1;
    $p24 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3896} $i25 := drm_fb_helper_debug_enter($p24);
    $r := $i25;
    return;

  $bb16:
    assume $i44 == 1;
    $p26 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3897} $i27 := drm_fb_helper_debug_leave($p26);
    $r := $i27;
    return;

  $bb17:
    assume $i45 == 1;
    call {:si_unique_call 3898} $i28 := qxl_pm_freeze(arg);
    goto SeqInstr_2770, SeqInstr_2771;

  SeqInstr_2771:
    assume assertsPassed;
    goto SeqInstr_2772;

  SeqInstr_2772:
    $r := $i28;
    return;

  SeqInstr_2770:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i46 == 1;
    call {:si_unique_call 3899} $i29 := qxl_pm_suspend(arg);
    goto SeqInstr_2773, SeqInstr_2774;

  SeqInstr_2774:
    assume assertsPassed;
    goto SeqInstr_2775;

  SeqInstr_2775:
    $r := $i29;
    return;

  SeqInstr_2773:
    assume !assertsPassed;
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 1355145);

procedure devirtbounce.19(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.36, $CurrAddr, $M.35, $M.40, assertsPassed, $M.72, $M.38, $M.39, $M.42, $M.52, $M.37, $M.41, $M.44, $M.53, $M.55, $M.49, $M.73, $M.74, $M.43, $M.75, $M.65, $M.67, $M.68, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64;



implementation devirtbounce.19(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i50 := $eq.ref(qxl_gc_work, $p0);
    assume true;
    goto $bb26, $bb51;

  $bb51:
    assume !($i50 == 1);
    $i49 := $eq.ref(qxl_fb_work, $p0);
    assume true;
    goto $bb25, $bb50;

  $bb50:
    assume !($i49 == 1);
    $i48 := $eq.ref(qxl_ttm_bo_destroy, $p0);
    assume true;
    goto $bb24, $bb49;

  $bb49:
    assume !($i48 == 1);
    $i47 := $eq.ref(qxl_ttm_backend_destroy, $p0);
    assume true;
    goto $bb23, $bb48;

  $bb48:
    assume !($i47 == 1);
    $i46 := $eq.ref(qxl_ttm_tt_unpopulate, $p0);
    assume true;
    goto $bb22, $bb47;

  $bb47:
    assume !($i46 == 1);
    $i45 := $eq.ref(qxl_enc_commit, $p0);
    assume true;
    goto $bb21, $bb46;

  $bb46:
    assume !($i45 == 1);
    $i44 := $eq.ref(qxl_enc_prepare, $p0);
    assume true;
    goto $bb20, $bb45;

  $bb45:
    assume !($i44 == 1);
    $i43 := $eq.ref(qxl_enc_destroy, $p0);
    assume {:branchcond $i43} true;
    goto $bb19, $bb44;

  $bb44:
    assume !($i43 == 1);
    $i42 := $eq.ref(qxl_conn_destroy, $p0);
    assume true;
    goto $bb18, $bb43;

  $bb43:
    assume !($i42 == 1);
    $i41 := $eq.ref(qxl_conn_restore, $p0);
    assume true;
    goto $bb17, $bb42;

  $bb42:
    assume !($i41 == 1);
    $i40 := $eq.ref(qxl_conn_save, $p0);
    assume true;
    goto $bb16, $bb41;

  $bb41:
    assume !($i40 == 1);
    $i39 := $eq.ref(qxl_crtc_disable, $p0);
    assume true;
    goto $bb15, $bb40;

  $bb40:
    assume !($i39 == 1);
    $i38 := $eq.ref(qxl_crtc_commit, $p0);
    assume true;
    goto $bb14, $bb39;

  $bb39:
    assume !($i38 == 1);
    $i37 := $eq.ref(qxl_crtc_prepare, $p0);
    assume true;
    goto $bb13, $bb38;

  $bb38:
    assume !($i37 == 1);
    $i36 := $eq.ref(qxl_crtc_destroy, $p0);
    assume true;
    goto $bb12, $bb37;

  $bb37:
    assume !($i36 == 1);
    $i35 := $eq.ref(qxl_pci_remove, $p0);
    assume true;
    goto $bb11, $bb36;

  $bb36:
    assume !($i35 == 1);
    $i34 := $eq.ref(ttm_bo_global_release, $p0);
    assume true;
    goto $bb10, $bb35;

  $bb35:
    assume !($i34 == 1);
    $i33 := $eq.ref(qxl_ttm_mem_global_release, $p0);
    assume true;
    goto $bb9, $bb34;

  $bb34:
    assume !($i33 == 1);
    $i32 := $eq.ref(qxl_user_framebuffer_destroy, $p0);
    assume true;
    goto $bb8, $bb33;

  $bb33:
    assume !($i32 == 1);
    $i31 := $eq.ref(qxl_gem_prime_unpin, $p0);
    assume true;
    goto $bb7, $bb32;

  $bb32:
    assume !($i31 == 1);
    $i30 := $eq.ref(fence_release, $p0);
    assume true;
    goto $bb6, $bb31;

  $bb31:
    assume !($i30 == 1);
    $i29 := $eq.ref(drm_gem_object_free, $p0);
    assume true;
    goto $bb5, $bb30;

  $bb30:
    assume !($i29 == 1);
    $i28 := $eq.ref(qxl_client_monitors_config_work_func, $p0);
    assume true;
    goto $bb4, $bb29;

  $bb29:
    assume !($i28 == 1);
    $i27 := $eq.ref(qxl_gem_object_free, $p0);
    assume true;
    goto $bb3, $bb28;

  $bb28:
    assume !($i27 == 1);
    $i26 := $eq.ref(qxl_debugfs_takedown, $p0);
    assume {:branchcond $i26} true;
    goto $bb2, $bb27;

  $bb27:
    assume !($i26 == 1);
    assume false;
    return;

  $bb2:
    assume $i26 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3900} qxl_debugfs_takedown($p1);
    return;

  $bb3:
    assume $i27 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3901} qxl_gem_object_free($p2);
    return;

  $bb4:
    assume $i28 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3902} qxl_client_monitors_config_work_func($p3);
    goto SeqInstr_2776, SeqInstr_2777;

  SeqInstr_2777:
    assume assertsPassed;
    goto SeqInstr_2778;

  SeqInstr_2778:
    return;

  SeqInstr_2776:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i29 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3903} drm_gem_object_free($p4);
    return;

  $bb6:
    assume $i30 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3904} fence_release($p5);
    return;

  $bb7:
    assume $i31 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3905} qxl_gem_prime_unpin($p6);
    return;

  $bb8:
    assume $i32 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3906} qxl_user_framebuffer_destroy($p7);
    goto SeqInstr_2779, SeqInstr_2780;

  SeqInstr_2780:
    assume assertsPassed;
    goto SeqInstr_2781;

  SeqInstr_2781:
    return;

  SeqInstr_2779:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i33 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3907} qxl_ttm_mem_global_release($p8);
    return;

  $bb10:
    assume $i34 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3908} ttm_bo_global_release($p9);
    return;

  $bb11:
    assume $i35 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3909} qxl_pci_remove($p10);
    return;

  $bb12:
    assume $i36 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3910} qxl_crtc_destroy($p11);
    return;

  $bb13:
    assume $i37 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3911} qxl_crtc_prepare($p12);
    return;

  $bb14:
    assume $i38 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3912} qxl_crtc_commit($p13);
    return;

  $bb15:
    assume $i39 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3913} qxl_crtc_disable($p14);
    goto SeqInstr_2782, SeqInstr_2783;

  SeqInstr_2783:
    assume assertsPassed;
    goto SeqInstr_2784;

  SeqInstr_2784:
    return;

  SeqInstr_2782:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i40 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3914} qxl_conn_save($p15);
    return;

  $bb17:
    assume $i41 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3915} qxl_conn_restore($p16);
    return;

  $bb18:
    assume $i42 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3916} qxl_conn_destroy($p17);
    return;

  $bb19:
    assume $i43 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3917} qxl_enc_destroy($p18);
    return;

  $bb20:
    assume $i44 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3918} qxl_enc_prepare($p19);
    return;

  $bb21:
    assume $i45 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3919} qxl_enc_commit($p20);
    goto SeqInstr_2785, SeqInstr_2786;

  SeqInstr_2786:
    assume assertsPassed;
    goto SeqInstr_2787;

  SeqInstr_2787:
    return;

  SeqInstr_2785:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i46 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3920} qxl_ttm_tt_unpopulate($p21);
    return;

  $bb23:
    assume $i47 == 1;
    $p22 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3921} qxl_ttm_backend_destroy($p22);
    return;

  $bb24:
    assume $i48 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3922} qxl_ttm_bo_destroy($p23);
    goto SeqInstr_2788, SeqInstr_2789;

  SeqInstr_2789:
    assume assertsPassed;
    goto SeqInstr_2790;

  SeqInstr_2790:
    return;

  SeqInstr_2788:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i49 == 1;
    $p24 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3923} qxl_fb_work($p24);
    goto SeqInstr_2791, SeqInstr_2792;

  SeqInstr_2792:
    assume assertsPassed;
    goto SeqInstr_2793;

  SeqInstr_2793:
    return;

  SeqInstr_2791:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i50 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3924} qxl_gc_work($p25);
    goto SeqInstr_2794, SeqInstr_2795;

  SeqInstr_2795:
    assume assertsPassed;
    goto SeqInstr_2796;

  SeqInstr_2796:
    return;

  SeqInstr_2794:
    assume !assertsPassed;
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 1356177);

procedure devirtbounce.20(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.20(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref) returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(drm_read, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 3925} $i1 := drm_read(arg, arg1, arg2, arg3);
    $r := $i1;
    return;
}



const devirtbounce.21: ref;

axiom devirtbounce.21 == $sub.ref(0, 1357209);

procedure devirtbounce.21(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.32, $M.42, $CurrAddr, $M.64, $M.53, $M.75, $M.71, $M.43, assertsPassed, $M.36, $M.40, $M.55, $M.35, $M.65, $M.67, $M.68, $M.69, $M.70;



implementation devirtbounce.21(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i13 := $eq.ref(qxl_invalidate_caches, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i13 == 1);
    $i12 := $eq.ref(qxl_noop_enable_vblank, $p0);
    assume true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i12 == 1);
    $i11 := $eq.ref(qxl_noop_get_vblank_counter, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i11 == 1);
    $i10 := $eq.ref(qxl_driver_load, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume false;
    return;

  $bb2:
    assume $i10 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $i2 := $zext.i32.i64(arg1);
    call {:si_unique_call 3926} $i3 := qxl_driver_load($p1, $i2);
    goto SeqInstr_2797, SeqInstr_2798;

  SeqInstr_2798:
    assume assertsPassed;
    goto SeqInstr_2799;

  SeqInstr_2799:
    $r := $i3;
    return;

  SeqInstr_2797:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i11 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3927} $i5 := qxl_noop_get_vblank_counter($p4, arg1);
    $r := $i5;
    return;

  $bb4:
    assume $i12 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3928} $i7 := qxl_noop_enable_vblank($p6, arg1);
    $r := $i7;
    return;

  $bb5:
    assume $i13 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3929} $i9 := qxl_invalidate_caches($p8, arg1);
    $r := $i9;
    return;
}



const devirtbounce.22: ref;

axiom devirtbounce.22 == $sub.ref(0, 1358241);

procedure devirtbounce.22(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation devirtbounce.22(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i51 := $eq.ref(qxl_pm_suspend, $p0);
    assume true;
    goto $bb18, $bb35;

  $bb35:
    assume !($i51 == 1);
    $i50 := $eq.ref(qxl_pm_freeze, $p0);
    assume true;
    goto $bb17, $bb34;

  $bb34:
    assume !($i50 == 1);
    $i49 := $eq.ref(drm_fb_helper_debug_leave, $p0);
    assume true;
    goto $bb16, $bb33;

  $bb33:
    assume !($i49 == 1);
    $i48 := $eq.ref(drm_fb_helper_debug_enter, $p0);
    assume true;
    goto $bb15, $bb32;

  $bb32:
    assume !($i48 == 1);
    $i47 := $eq.ref(drm_fb_helper_set_par, $p0);
    assume true;
    goto $bb14, $bb31;

  $bb31:
    assume !($i47 == 1);
    $i46 := $eq.ref(qxl_ttm_backend_unbind, $p0);
    assume true;
    goto $bb13, $bb30;

  $bb30:
    assume !($i46 == 1);
    $i45 := $eq.ref(qxl_ttm_tt_populate, $p0);
    assume true;
    goto $bb12, $bb29;

  $bb29:
    assume !($i45 == 1);
    $i44 := $eq.ref(drm_crtc_helper_set_config, $p0);
    assume true;
    goto $bb11, $bb28;

  $bb28:
    assume !($i44 == 1);
    $i43 := $eq.ref(qxl_pm_restore, $p0);
    assume {:branchcond $i43} true;
    goto $bb10, $bb27;

  $bb27:
    assume !($i43 == 1);
    $i42 := $eq.ref(qxl_pm_thaw, $p0);
    assume true;
    goto $bb9, $bb26;

  $bb26:
    assume !($i42 == 1);
    $i41 := $eq.ref(qxl_pm_resume, $p0);
    assume true;
    goto $bb8, $bb25;

  $bb25:
    assume !($i41 == 1);
    $i40 := $eq.ref(ttm_bo_global_init, $p0);
    assume true;
    goto $bb7, $bb24;

  $bb24:
    assume !($i40 == 1);
    $i39 := $eq.ref(qxl_ttm_mem_global_init, $p0);
    assume true;
    goto $bb6, $bb23;

  $bb23:
    assume !($i39 == 1);
    $i38 := $eq.ref(qxl_gem_prime_pin, $p0);
    assume true;
    goto $bb5, $bb22;

  $bb22:
    assume !($i38 == 1);
    $i37 := $eq.ref(qxl_conn_get_modes, $p0);
    assume true;
    goto $bb4, $bb21;

  $bb21:
    assume !($i37 == 1);
    $i36 := $eq.ref(qxl_debugfs_init, $p0);
    assume true;
    goto $bb3, $bb20;

  $bb20:
    assume !($i36 == 1);
    $i35 := $eq.ref(qxl_driver_unload, $p0);
    assume true;
    goto $bb2, $bb19;

  $bb19:
    assume !($i35 == 1);
    assume false;
    return;

  $bb2:
    assume $i35 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3930} $i2 := qxl_driver_unload($p1);
    goto SeqInstr_2800, SeqInstr_2801;

  SeqInstr_2801:
    assume assertsPassed;
    goto SeqInstr_2802;

  SeqInstr_2802:
    $r := $i2;
    return;

  SeqInstr_2800:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i36 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3931} $i4 := qxl_debugfs_init($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i37 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3932} $i6 := qxl_conn_get_modes($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i38 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3933} $i8 := qxl_gem_prime_pin($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i39 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3934} $i10 := qxl_ttm_mem_global_init($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i40 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3935} $i12 := ttm_bo_global_init($p11);
    $r := $i12;
    return;

  $bb8:
    assume $i41 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3936} $i14 := qxl_pm_resume($p13);
    goto SeqInstr_2803, SeqInstr_2804;

  SeqInstr_2804:
    assume assertsPassed;
    goto SeqInstr_2805;

  SeqInstr_2805:
    $r := $i14;
    return;

  SeqInstr_2803:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i42 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3937} $i16 := qxl_pm_thaw($p15);
    goto SeqInstr_2806, SeqInstr_2807;

  SeqInstr_2807:
    assume assertsPassed;
    goto SeqInstr_2808;

  SeqInstr_2808:
    $r := $i16;
    return;

  SeqInstr_2806:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i43 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3938} $i18 := qxl_pm_restore($p17);
    goto SeqInstr_2809, SeqInstr_2810;

  SeqInstr_2810:
    assume assertsPassed;
    goto SeqInstr_2811;

  SeqInstr_2811:
    $r := $i18;
    return;

  SeqInstr_2809:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i44 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3939} $i20 := drm_crtc_helper_set_config($p19);
    $r := $i20;
    return;

  $bb12:
    assume $i45 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3940} $i22 := qxl_ttm_tt_populate($p21);
    $r := $i22;
    return;

  $bb13:
    assume $i46 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3941} $i24 := qxl_ttm_backend_unbind($p23);
    $r := $i24;
    return;

  $bb14:
    assume $i47 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3942} $i26 := drm_fb_helper_set_par($p25);
    $r := $i26;
    return;

  $bb15:
    assume $i48 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3943} $i28 := drm_fb_helper_debug_enter($p27);
    $r := $i28;
    return;

  $bb16:
    assume $i49 == 1;
    $p29 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3944} $i30 := drm_fb_helper_debug_leave($p29);
    $r := $i30;
    return;

  $bb17:
    assume $i50 == 1;
    $p31 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3945} $i32 := qxl_pm_freeze($p31);
    goto SeqInstr_2812, SeqInstr_2813;

  SeqInstr_2813:
    assume assertsPassed;
    goto SeqInstr_2814;

  SeqInstr_2814:
    $r := $i32;
    return;

  SeqInstr_2812:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i51 == 1;
    $p33 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3946} $i34 := qxl_pm_suspend($p33);
    goto SeqInstr_2815, SeqInstr_2816;

  SeqInstr_2816:
    assume assertsPassed;
    goto SeqInstr_2817;

  SeqInstr_2817:
    $r := $i34;
    return;

  SeqInstr_2815:
    assume !assertsPassed;
    return;
}



const devirtbounce.23: ref;

axiom devirtbounce.23 == $sub.ref(0, 1359273);

procedure devirtbounce.23(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.36, $CurrAddr, $M.35, $M.40, assertsPassed, $M.72, $M.38, $M.39, $M.42, $M.52, $M.37, $M.41, $M.44, $M.53, $M.55, $M.49, $M.73, $M.74, $M.43, $M.75, $M.65, $M.67, $M.68, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64;



implementation devirtbounce.23(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i49 := $eq.ref(qxl_gc_work, $p0);
    assume true;
    goto $bb26, $bb51;

  $bb51:
    assume !($i49 == 1);
    $i48 := $eq.ref(qxl_fb_work, $p0);
    assume true;
    goto $bb25, $bb50;

  $bb50:
    assume !($i48 == 1);
    $i47 := $eq.ref(qxl_ttm_bo_destroy, $p0);
    assume true;
    goto $bb24, $bb49;

  $bb49:
    assume !($i47 == 1);
    $i46 := $eq.ref(qxl_ttm_backend_destroy, $p0);
    assume true;
    goto $bb23, $bb48;

  $bb48:
    assume !($i46 == 1);
    $i45 := $eq.ref(qxl_ttm_tt_unpopulate, $p0);
    assume true;
    goto $bb22, $bb47;

  $bb47:
    assume !($i45 == 1);
    $i44 := $eq.ref(qxl_enc_commit, $p0);
    assume true;
    goto $bb21, $bb46;

  $bb46:
    assume !($i44 == 1);
    $i43 := $eq.ref(qxl_enc_prepare, $p0);
    assume {:branchcond $i43} true;
    goto $bb20, $bb45;

  $bb45:
    assume !($i43 == 1);
    $i42 := $eq.ref(qxl_enc_destroy, $p0);
    assume true;
    goto $bb19, $bb44;

  $bb44:
    assume !($i42 == 1);
    $i41 := $eq.ref(qxl_conn_destroy, $p0);
    assume true;
    goto $bb18, $bb43;

  $bb43:
    assume !($i41 == 1);
    $i40 := $eq.ref(qxl_conn_restore, $p0);
    assume true;
    goto $bb17, $bb42;

  $bb42:
    assume !($i40 == 1);
    $i39 := $eq.ref(qxl_conn_save, $p0);
    assume true;
    goto $bb16, $bb41;

  $bb41:
    assume !($i39 == 1);
    $i38 := $eq.ref(qxl_crtc_disable, $p0);
    assume true;
    goto $bb15, $bb40;

  $bb40:
    assume !($i38 == 1);
    $i37 := $eq.ref(qxl_crtc_commit, $p0);
    assume true;
    goto $bb14, $bb39;

  $bb39:
    assume !($i37 == 1);
    $i36 := $eq.ref(qxl_crtc_prepare, $p0);
    assume true;
    goto $bb13, $bb38;

  $bb38:
    assume !($i36 == 1);
    $i35 := $eq.ref(qxl_crtc_destroy, $p0);
    assume true;
    goto $bb12, $bb37;

  $bb37:
    assume !($i35 == 1);
    $i34 := $eq.ref(qxl_pci_remove, $p0);
    assume true;
    goto $bb11, $bb36;

  $bb36:
    assume !($i34 == 1);
    $i33 := $eq.ref(ttm_bo_global_release, $p0);
    assume true;
    goto $bb10, $bb35;

  $bb35:
    assume !($i33 == 1);
    $i32 := $eq.ref(qxl_ttm_mem_global_release, $p0);
    assume true;
    goto $bb9, $bb34;

  $bb34:
    assume !($i32 == 1);
    $i31 := $eq.ref(qxl_user_framebuffer_destroy, $p0);
    assume true;
    goto $bb8, $bb33;

  $bb33:
    assume !($i31 == 1);
    $i30 := $eq.ref(qxl_gem_prime_unpin, $p0);
    assume true;
    goto $bb7, $bb32;

  $bb32:
    assume !($i30 == 1);
    $i29 := $eq.ref(fence_release, $p0);
    assume true;
    goto $bb6, $bb31;

  $bb31:
    assume !($i29 == 1);
    $i28 := $eq.ref(drm_gem_object_free, $p0);
    assume true;
    goto $bb5, $bb30;

  $bb30:
    assume !($i28 == 1);
    $i27 := $eq.ref(qxl_client_monitors_config_work_func, $p0);
    assume true;
    goto $bb4, $bb29;

  $bb29:
    assume !($i27 == 1);
    $i26 := $eq.ref(qxl_gem_object_free, $p0);
    assume {:branchcond $i26} true;
    goto $bb3, $bb28;

  $bb28:
    assume !($i26 == 1);
    $i25 := $eq.ref(qxl_debugfs_takedown, $p0);
    assume true;
    goto $bb2, $bb27;

  $bb27:
    assume !($i25 == 1);
    assume false;
    return;

  $bb2:
    assume $i25 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3947} qxl_debugfs_takedown($p1);
    return;

  $bb3:
    assume $i26 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3948} qxl_gem_object_free($p2);
    return;

  $bb4:
    assume $i27 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3949} qxl_client_monitors_config_work_func($p3);
    goto SeqInstr_2818, SeqInstr_2819;

  SeqInstr_2819:
    assume assertsPassed;
    goto SeqInstr_2820;

  SeqInstr_2820:
    return;

  SeqInstr_2818:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i28 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3950} drm_gem_object_free($p4);
    return;

  $bb6:
    assume $i29 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3951} fence_release($p5);
    return;

  $bb7:
    assume $i30 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3952} qxl_gem_prime_unpin($p6);
    return;

  $bb8:
    assume $i31 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3953} qxl_user_framebuffer_destroy($p7);
    goto SeqInstr_2821, SeqInstr_2822;

  SeqInstr_2822:
    assume assertsPassed;
    goto SeqInstr_2823;

  SeqInstr_2823:
    return;

  SeqInstr_2821:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i32 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3954} qxl_ttm_mem_global_release($p8);
    return;

  $bb10:
    assume $i33 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3955} ttm_bo_global_release($p9);
    return;

  $bb11:
    assume $i34 == 1;
    call {:si_unique_call 3956} qxl_pci_remove(arg);
    return;

  $bb12:
    assume $i35 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3957} qxl_crtc_destroy($p10);
    return;

  $bb13:
    assume $i36 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3958} qxl_crtc_prepare($p11);
    return;

  $bb14:
    assume $i37 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3959} qxl_crtc_commit($p12);
    return;

  $bb15:
    assume $i38 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3960} qxl_crtc_disable($p13);
    goto SeqInstr_2824, SeqInstr_2825;

  SeqInstr_2825:
    assume assertsPassed;
    goto SeqInstr_2826;

  SeqInstr_2826:
    return;

  SeqInstr_2824:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i39 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3961} qxl_conn_save($p14);
    return;

  $bb17:
    assume $i40 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3962} qxl_conn_restore($p15);
    return;

  $bb18:
    assume $i41 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3963} qxl_conn_destroy($p16);
    return;

  $bb19:
    assume $i42 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3964} qxl_enc_destroy($p17);
    return;

  $bb20:
    assume $i43 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3965} qxl_enc_prepare($p18);
    return;

  $bb21:
    assume $i44 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3966} qxl_enc_commit($p19);
    goto SeqInstr_2827, SeqInstr_2828;

  SeqInstr_2828:
    assume assertsPassed;
    goto SeqInstr_2829;

  SeqInstr_2829:
    return;

  SeqInstr_2827:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i45 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3967} qxl_ttm_tt_unpopulate($p20);
    return;

  $bb23:
    assume $i46 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3968} qxl_ttm_backend_destroy($p21);
    return;

  $bb24:
    assume $i47 == 1;
    $p22 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3969} qxl_ttm_bo_destroy($p22);
    goto SeqInstr_2830, SeqInstr_2831;

  SeqInstr_2831:
    assume assertsPassed;
    goto SeqInstr_2832;

  SeqInstr_2832:
    return;

  SeqInstr_2830:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i48 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3970} qxl_fb_work($p23);
    goto SeqInstr_2833, SeqInstr_2834;

  SeqInstr_2834:
    assume assertsPassed;
    goto SeqInstr_2835;

  SeqInstr_2835:
    return;

  SeqInstr_2833:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i49 == 1;
    $p24 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3971} qxl_gc_work($p24);
    goto SeqInstr_2836, SeqInstr_2837;

  SeqInstr_2837:
    assume assertsPassed;
    goto SeqInstr_2838;

  SeqInstr_2838:
    return;

  SeqInstr_2836:
    assume !assertsPassed;
    return;
}



const devirtbounce.24: ref;

axiom devirtbounce.24 == $sub.ref(0, 1360305);

procedure devirtbounce.24(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation devirtbounce.24(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i51 := $eq.ref(qxl_pm_suspend, $p0);
    assume true;
    goto $bb18, $bb35;

  $bb35:
    assume !($i51 == 1);
    $i50 := $eq.ref(qxl_pm_freeze, $p0);
    assume true;
    goto $bb17, $bb34;

  $bb34:
    assume !($i50 == 1);
    $i49 := $eq.ref(drm_fb_helper_debug_leave, $p0);
    assume true;
    goto $bb16, $bb33;

  $bb33:
    assume !($i49 == 1);
    $i48 := $eq.ref(drm_fb_helper_debug_enter, $p0);
    assume true;
    goto $bb15, $bb32;

  $bb32:
    assume !($i48 == 1);
    $i47 := $eq.ref(drm_fb_helper_set_par, $p0);
    assume true;
    goto $bb14, $bb31;

  $bb31:
    assume !($i47 == 1);
    $i46 := $eq.ref(qxl_ttm_backend_unbind, $p0);
    assume true;
    goto $bb13, $bb30;

  $bb30:
    assume !($i46 == 1);
    $i45 := $eq.ref(qxl_ttm_tt_populate, $p0);
    assume true;
    goto $bb12, $bb29;

  $bb29:
    assume !($i45 == 1);
    $i44 := $eq.ref(drm_crtc_helper_set_config, $p0);
    assume true;
    goto $bb11, $bb28;

  $bb28:
    assume !($i44 == 1);
    $i43 := $eq.ref(qxl_pm_restore, $p0);
    assume {:branchcond $i43} true;
    goto $bb10, $bb27;

  $bb27:
    assume !($i43 == 1);
    $i42 := $eq.ref(qxl_pm_thaw, $p0);
    assume true;
    goto $bb9, $bb26;

  $bb26:
    assume !($i42 == 1);
    $i41 := $eq.ref(qxl_pm_resume, $p0);
    assume true;
    goto $bb8, $bb25;

  $bb25:
    assume !($i41 == 1);
    $i40 := $eq.ref(ttm_bo_global_init, $p0);
    assume true;
    goto $bb7, $bb24;

  $bb24:
    assume !($i40 == 1);
    $i39 := $eq.ref(qxl_ttm_mem_global_init, $p0);
    assume true;
    goto $bb6, $bb23;

  $bb23:
    assume !($i39 == 1);
    $i38 := $eq.ref(qxl_gem_prime_pin, $p0);
    assume true;
    goto $bb5, $bb22;

  $bb22:
    assume !($i38 == 1);
    $i37 := $eq.ref(qxl_conn_get_modes, $p0);
    assume true;
    goto $bb4, $bb21;

  $bb21:
    assume !($i37 == 1);
    $i36 := $eq.ref(qxl_debugfs_init, $p0);
    assume true;
    goto $bb3, $bb20;

  $bb20:
    assume !($i36 == 1);
    $i35 := $eq.ref(qxl_driver_unload, $p0);
    assume true;
    goto $bb2, $bb19;

  $bb19:
    assume !($i35 == 1);
    assume false;
    return;

  $bb2:
    assume $i35 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3972} $i2 := qxl_driver_unload($p1);
    goto SeqInstr_2839, SeqInstr_2840;

  SeqInstr_2840:
    assume assertsPassed;
    goto SeqInstr_2841;

  SeqInstr_2841:
    $r := $i2;
    return;

  SeqInstr_2839:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i36 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3973} $i4 := qxl_debugfs_init($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i37 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3974} $i6 := qxl_conn_get_modes($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i38 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3975} $i8 := qxl_gem_prime_pin($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i39 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3976} $i10 := qxl_ttm_mem_global_init($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i40 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3977} $i12 := ttm_bo_global_init($p11);
    $r := $i12;
    return;

  $bb8:
    assume $i41 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3978} $i14 := qxl_pm_resume($p13);
    goto SeqInstr_2842, SeqInstr_2843;

  SeqInstr_2843:
    assume assertsPassed;
    goto SeqInstr_2844;

  SeqInstr_2844:
    $r := $i14;
    return;

  SeqInstr_2842:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i42 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3979} $i16 := qxl_pm_thaw($p15);
    goto SeqInstr_2845, SeqInstr_2846;

  SeqInstr_2846:
    assume assertsPassed;
    goto SeqInstr_2847;

  SeqInstr_2847:
    $r := $i16;
    return;

  SeqInstr_2845:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i43 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3980} $i18 := qxl_pm_restore($p17);
    goto SeqInstr_2848, SeqInstr_2849;

  SeqInstr_2849:
    assume assertsPassed;
    goto SeqInstr_2850;

  SeqInstr_2850:
    $r := $i18;
    return;

  SeqInstr_2848:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i44 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3981} $i20 := drm_crtc_helper_set_config($p19);
    $r := $i20;
    return;

  $bb12:
    assume $i45 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3982} $i22 := qxl_ttm_tt_populate($p21);
    $r := $i22;
    return;

  $bb13:
    assume $i46 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3983} $i24 := qxl_ttm_backend_unbind($p23);
    $r := $i24;
    return;

  $bb14:
    assume $i47 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3984} $i26 := drm_fb_helper_set_par($p25);
    $r := $i26;
    return;

  $bb15:
    assume $i48 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3985} $i28 := drm_fb_helper_debug_enter($p27);
    $r := $i28;
    return;

  $bb16:
    assume $i49 == 1;
    $p29 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3986} $i30 := drm_fb_helper_debug_leave($p29);
    $r := $i30;
    return;

  $bb17:
    assume $i50 == 1;
    $p31 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3987} $i32 := qxl_pm_freeze($p31);
    goto SeqInstr_2851, SeqInstr_2852;

  SeqInstr_2852:
    assume assertsPassed;
    goto SeqInstr_2853;

  SeqInstr_2853:
    $r := $i32;
    return;

  SeqInstr_2851:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i51 == 1;
    $p33 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3988} $i34 := qxl_pm_suspend($p33);
    goto SeqInstr_2854, SeqInstr_2855;

  SeqInstr_2855:
    assume assertsPassed;
    goto SeqInstr_2856;

  SeqInstr_2856:
    $r := $i34;
    return;

  SeqInstr_2854:
    assume !assertsPassed;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: ref;

const $u1: i64;

const $u10: ref;

const $u100: ref;

const $u101: ref;

const $u102: ref;

const $u103: ref;

const $u104: ref;

const $u105: ref;

const $u106: ref;

const $u107: ref;

const $u108: ref;

const $u109: ref;

const $u11: ref;

const $u110: ref;

const $u111: ref;

const $u112: ref;

const $u113: ref;

const $u114: ref;

const $u115: ref;

const $u116: ref;

const $u117: ref;

const $u118: ref;

const $u119: ref;

const $u12: ref;

const $u120: ref;

const $u121: ref;

const $u13: ref;

const $u14: ref;

const $u15: ref;

const $u16: ref;

const $u17: ref;

const $u18: ref;

const $u19: ref;

const $u2: i32;

const $u20: ref;

const $u21: ref;

const $u22: ref;

const $u23: ref;

const $u24: ref;

const $u25: ref;

const $u26: ref;

const $u27: ref;

const $u28: ref;

const $u29: ref;

const $u3: ref;

const $u30: ref;

const $u31: ref;

const $u32: ref;

const $u33: i8;

const $u34: ref;

const $u35: ref;

const $u36: ref;

const $u37: ref;

const $u38: ref;

const $u39: ref;

const $u4: ref;

const $u40: ref;

const $u41: ref;

const $u42: ref;

const $u43: ref;

const $u44: ref;

const $u45: ref;

const $u46: ref;

const $u47: ref;

const $u48: ref;

const $u49: ref;

const $u5: ref;

const $u50: ref;

const $u51: ref;

const $u52: ref;

const $u53: ref;

const $u54: ref;

const $u55: ref;

const $u56: ref;

const $u57: ref;

const $u58: ref;

const $u59: ref;

const $u6: ref;

const $u60: ref;

const $u61: ref;

const $u62: ref;

const $u63: ref;

const $u64: ref;

const $u65: ref;

const $u66: ref;

const $u67: ref;

const $u68: ref;

const $u69: ref;

const $u7: ref;

const $u70: ref;

const $u71: ref;

const $u72: ref;

const $u73: ref;

const $u74: ref;

const $u75: ref;

const $u76: ref;

const $u77: ref;

const $u78: ref;

const $u79: ref;

const $u8: ref;

const $u80: ref;

const $u81: ref;

const $u82: ref;

const $u83: ref;

const $u84: ref;

const $u85: ref;

const $u86: ref;

const $u87: ref;

const $u88: ref;

const $u89: ref;

const $u9: ref;

const $u90: ref;

const $u91: ref;

const $u92: ref;

const $u93: ref;

const $u94: ref;

const $u95: ref;

const $u96: ref;

const $u97: ref;

const $u98: ref;

const $u99: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.66, $M.45, $M.207, $M.208, $M.209, $M.210, $M.211, $M.75, $M.53, $M.44, $M.52, $M.40, $M.41, $M.93, $M.72, $M.51, $M.190, $M.189, $M.6, $M.48, $M.47, $M.121, $M.271, $M.54, $M.37, $M.35, $M.49, $M.36, $M.65, $M.55, $M.76, $M.403, $M.404, $M.405, $M.406, $M.407, $M.408, $M.409, $M.206, $M.184, $M.205, $M.204, $M.203, $M.202, $M.183, $M.201, $M.115, $M.199, $M.198, $M.200, $M.197, $M.196, $M.195, $M.194, $M.193, $M.192, $M.191, $M.64, $M.50, $M.122, $M.410, $M.411, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 3989} __SMACK_static_init();
    call {:si_unique_call 3990} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.66, $M.45, $M.207, $M.208, $M.209, $M.210, $M.211, $M.75, $M.53, $M.44, $M.52, $M.40, $M.41, $M.93, $M.72, $M.51, $M.190, $M.189, $M.6, $M.48, $M.47, $M.121, $M.271, $M.54, $M.37, $M.35, $M.49, $M.36, $M.65, $M.55, $M.76, $M.403, $M.404, $M.405, $M.406, $M.407, $M.408, $M.409, $M.206, $M.184, $M.205, $M.204, $M.203, $M.202, $M.183, $M.201, $M.115, $M.199, $M.198, $M.200, $M.197, $M.196, $M.195, $M.194, $M.193, $M.192, $M.191, $M.64, $M.50, $M.122, $M.410, $M.411, $CurrAddr, $M.181, $M.182, $M.56, $M.46, $M.61, $M.33, $M.62, $M.63, $M.79, $M.78, $M.80, $M.81, $M.91, $M.73, $M.42, $M.38, $M.39, $M.71, $M.87, $M.88, $M.107, $M.108, $M.109, $M.110, $M.111, $M.67, $M.68, $M.32, $M.43, $M.112, $M.114, $M.69, $M.70, $M.74;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation __atomic_add_unless___1_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1)
{

  entry:
    out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := in_$i11, in_$i10, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := out_$i14;
    goto $bb11_dummy;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i14;
    assume true;
    goto $bb11;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_206;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} out_$i24 := ldv__builtin_expect(out_$i23, 0);
    call {:si_unique_call 66} {:cexpr "tmp"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_205;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i22);
    goto corral_source_split_204;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i32(out_$i21);
    goto corral_source_split_203;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i14, in_$i2);
    goto corral_source_split_202;

  $bb9:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i10;
    assume true;
    goto $bb9;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} out_$i18 := ldv__builtin_expect(out_$i17, 1);
    call {:si_unique_call 64} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_197;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_196;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_195;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, out_$i10);
    goto corral_source_split_194;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} out_$i14 := atomic_cmpxchg___1(in_$p0, out_$i10, out_$i13);
    call {:si_unique_call 62} {:cexpr "old"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_193;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i10, in_$i1);
    goto corral_source_split_192;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := __atomic_add_unless___1_loop_$bb4(in_$p0, in_$i1, in_$i2, out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25);
    return;

  exit:
    return;
}



procedure __atomic_add_unless___1_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1);
  modifies $M.6;



implementation qxl_ttm_placement_from_domain_loop_$bb16(in_$p0: ref, in_$i44: i32, in_$i51: i64, in_$p54: ref, in_$i55: i64, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$i50: i32) returns (out_$i51: i64, out_$p54: ref, out_$i55: i64, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$i50: i32)
{

  entry:
    out_$i51, out_$p54, out_$i55, out_$p58, out_$i59, out_$i60, out_$i50 := in_$i51, in_$p54, in_$i55, in_$p58, in_$i59, in_$i60, in_$i50;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_409;

  $bb18:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$i50 := out_$i59;
    goto $bb18_dummy;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    out_$i60 := $ult.i32(out_$i59, in_$i44);
    goto corral_source_split_418;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i50, 1);
    call {:si_unique_call 117} {:cexpr "i"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_417;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p58, 0);
    goto corral_source_split_416;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref(out_$i55, 12)), $mul.ref(4, 1));
    goto corral_source_split_415;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i32.i64(out_$i50);
    goto corral_source_split_414;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p54, 0);
    goto corral_source_split_413;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref(out_$i51, 12)), $mul.ref(0, 1));
    goto corral_source_split_412;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i32.i64(out_$i50);
    goto corral_source_split_411;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i51, out_$p54, out_$i55, out_$p58, out_$i59, out_$i60, out_$i50 := qxl_ttm_placement_from_domain_loop_$bb16(in_$p0, in_$i44, out_$i51, out_$p54, out_$i55, out_$p58, out_$i59, out_$i60, out_$i50);
    return;

  exit:
    return;
}



procedure qxl_ttm_placement_from_domain_loop_$bb16(in_$p0: ref, in_$i44: i32, in_$i51: i64, in_$p54: ref, in_$i55: i64, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$i50: i32) returns (out_$i51: i64, out_$p54: ref, out_$i55: i64, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$i50: i32);
  modifies $M.6;



implementation qxl_update_surface_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i13: i32, in_$i14: i1, in_$i15: i32) returns (out_$i13: i32, out_$i14: i1, out_$i15: i32)
{

  entry:
    out_$i13, out_$i14, out_$i15 := in_$i13, in_$i14, in_$i15;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} out_$i13 := qxl_io_update_area(in_$p0, in_$p1, in_$p2);
    goto SeqInstr_98;

  $bb2:
    assume {:verifier.code 0} true;
    assume out_$i14 == 1;
    goto $bb2_dummy;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i13;
    assume true;
    goto $bb2;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, $sub.i32(0, 512));
    goto corral_source_split_507;

  SeqInstr_99:
    call {:si_unique_call 148} {:cexpr "ret"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_506;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  $bb2_dummy:
    call {:si_unique_call 1} out_$i13, out_$i14, out_$i15 := qxl_update_surface_loop_$bb1(in_$p0, in_$p1, in_$p2, out_$i13, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure qxl_update_surface_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i13: i32, in_$i14: i1, in_$i15: i32) returns (out_$i13: i32, out_$i14: i1, out_$i15: i32);
  modifies $M.6, $CurrAddr, $M.54, assertsPassed, $M.55;



implementation qxl_release_fence_buffer_objects_loop_$bb11(in_$p0: ref, in_$i36: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p38: ref) returns (out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p38: ref)
{

  entry:
    out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p38 := in_$p39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p45, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_$p38;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_728;

  $bb13:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$p38 := out_$p46;
    goto $bb13_dummy;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i64(out_$i49, in_$i36);
    goto corral_source_split_743;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    goto corral_source_split_742;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p47, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_741;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_740;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.6, out_$p45);
    goto corral_source_split_739;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(out_$p38, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_738;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} __ttm_bo_unreserve(out_$p40);
    goto corral_source_split_737;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} ttm_bo_add_to_lru(out_$p40);
    goto corral_source_split_736;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} reservation_object_add_shared_fence(out_$p42, out_$p43);
    goto corral_source_split_735;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p0, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_734;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.6, out_$p41);
    goto corral_source_split_733;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p40, $mul.ref(0, 872)), $mul.ref(448, 1));
    goto corral_source_split_732;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.6, out_$p39);
    goto corral_source_split_731;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p38, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_730;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p38 := qxl_release_fence_buffer_objects_loop_$bb11(in_$p0, in_$i36, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p38);
    return;

  exit:
    return;
}



procedure qxl_release_fence_buffer_objects_loop_$bb11(in_$p0: ref, in_$i36: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p38: ref) returns (out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p38: ref);



implementation trace_fence_emit_loop_$bb14(in_$p0: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1)
{

  entry:
    out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22 := in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_803;

  $bb15:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$p12 := out_$p18;
    goto $bb15_dummy;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_813;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_812;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.6, out_$p19);
    goto corral_source_split_811;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p12, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_810;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p12, $mul.ref(1, 16));
    goto corral_source_split_809;

  SeqInstr_168:
    goto corral_source_split_808;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p14);
    call {:si_unique_call 210} devirtbounce.5(out_$p17, out_$p16, in_$p0);
    goto SeqInstr_167;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.6, out_$p15);
    goto corral_source_split_807;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p12, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_806;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.6, out_$p13);
    goto corral_source_split_805;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_804;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22 := trace_fence_emit_loop_$bb14(in_$p0, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22);
    return;

  exit:
    return;
}



procedure trace_fence_emit_loop_$bb14(in_$p0: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1);
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $CurrAddr, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.43, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation ldv_assume_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} ldv_assume_loop_$bb3();
    return;

  exit:
    return;
}



procedure ldv_assume_loop_$bb3();



implementation qxl_ring_push_loop_$bb45(in_$p0: ref, in_$p4: ref, in_$p60: ref, in_$p65: ref, in_$i66: i64, in_$i67: i32, in_$i68: i1) returns (out_$p65: ref, out_$i66: i64, out_$i67: i32, out_$i68: i1)
{

  entry:
    out_$p65, out_$i66, out_$i67, out_$i68 := in_$p65, in_$i66, in_$i67, in_$i68;
    goto $bb45, exit;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb49:
    assume {:verifier.code 0} true;
    assume !(out_$i68 == 1);
    goto $bb49_dummy;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i32(out_$i67, 0);
    goto corral_source_split_1306;

  SeqInstr_303:
    call {:si_unique_call 366} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_1305;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} out_$i67 := qxl_check_header(in_$p0);
    goto SeqInstr_302;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} out_$i66 := prepare_to_wait_event(out_$p65, in_$p4, 2);
    call {:si_unique_call 364} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i66);
    goto corral_source_split_1304;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.6, in_$p60);
    goto corral_source_split_1303;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} schedule();
    goto corral_source_split_1302;

  $bb49_dummy:
    call {:si_unique_call 1} out_$p65, out_$i66, out_$i67, out_$i68 := qxl_ring_push_loop_$bb45(in_$p0, in_$p4, in_$p60, out_$p65, out_$i66, out_$i67, out_$i68);
    return;

  exit:
    return;
}



procedure qxl_ring_push_loop_$bb45(in_$p0: ref, in_$p4: ref, in_$p60: ref, in_$p65: ref, in_$i66: i64, in_$i67: i32, in_$i68: i1) returns (out_$p65: ref, out_$i66: i64, out_$i67: i32, out_$i68: i1);
  modifies $M.6, $M.41, assertsPassed;



implementation qxl_ring_push_loop_$bb24(in_$p0: ref, in_$p3: ref, in_$p37: ref, in_$i42: i64, in_$i44: i1, in_$i45: i64, in_$p46: ref, in_$i47: i64, in_$i48: i32, in_$i49: i1) returns (out_$i42: i64, out_$i44: i1, out_$i45: i64, out_$p46: ref, out_$i47: i64, out_$i48: i32, out_$i49: i1)
{

  entry:
    out_$i42, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49 := in_$i42, in_$i44, in_$i45, in_$p46, in_$i47, in_$i48, in_$i49;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb31:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    out_$i42 := out_$i47;
    goto $bb31_dummy;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i32(out_$i48, 0);
    goto corral_source_split_1273;

  SeqInstr_297:
    call {:si_unique_call 355} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_1272;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} out_$i48 := qxl_check_header(in_$p0);
    goto SeqInstr_296;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} out_$i47 := prepare_to_wait_event(out_$p46, in_$p3, 1);
    call {:si_unique_call 353} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i47);
    goto corral_source_split_1271;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.6, in_$p37);
    goto corral_source_split_1270;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} schedule();
    goto corral_source_split_1269;

  $bb29:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i42;
    assume true;
    goto $bb29;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i42, 0);
    goto corral_source_split_1265;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i42, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49 := qxl_ring_push_loop_$bb24(in_$p0, in_$p3, in_$p37, out_$i42, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49);
    return;

  exit:
    return;
}



procedure qxl_ring_push_loop_$bb24(in_$p0: ref, in_$p3: ref, in_$p37: ref, in_$i42: i64, in_$i44: i1, in_$i45: i64, in_$p46: ref, in_$i47: i64, in_$i48: i32, in_$i49: i1) returns (out_$i42: i64, out_$i44: i1, out_$i45: i64, out_$p46: ref, out_$i47: i64, out_$i48: i32, out_$i49: i1);
  modifies $M.6, $M.41, assertsPassed;



implementation qxl_ring_push_loop_$bb11(in_$p0: ref, in_$i30: i32, in_$i31: i1) returns (out_$i30: i32, out_$i31: i1)
{

  entry:
    out_$i30, out_$i31 := in_$i30, in_$i31;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i31 == 1;
    goto $bb13_dummy;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 0);
    goto corral_source_split_1227;

  SeqInstr_282:
    call {:si_unique_call 336} {:cexpr "tmp"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_1226;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} out_$i30 := qxl_check_header(in_$p0);
    goto SeqInstr_281;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} __const_udelay(4295);
    goto corral_source_split_1225;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i30, out_$i31 := qxl_ring_push_loop_$bb11(in_$p0, out_$i30, out_$i31);
    return;

  exit:
    return;
}



procedure qxl_ring_push_loop_$bb11(in_$p0: ref, in_$i30: i32, in_$i31: i1) returns (out_$i30: i32, out_$i31: i1);
  modifies $M.6, $M.41, assertsPassed;



implementation qxl_release_list_add_loop_$bb4(in_$p1: ref, in_$i10: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p12: ref) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p12: ref)
{

  entry:
    out_$p14, out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p23, out_$p24, out_$p25, out_$p27, out_$i28, out_$i29, out_$p12 := in_$p14, in_$p15, in_$i16, in_$p17, in_$i18, in_$i19, in_$p23, in_$p24, in_$p25, in_$p27, in_$i28, in_$i29, in_$p12;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1911;

  $bb10:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$p12 := out_$p24;
    goto $bb10_dummy;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, in_$i10);
    goto corral_source_split_1929;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_1928;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1927;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_1926;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.6, out_$p23);
    goto corral_source_split_1925;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1924;

  $bb7:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i64(out_$i16, out_$i18);
    goto corral_source_split_1918;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(out_$p17);
    goto corral_source_split_1917;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p1, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_1916;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_1915;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.6, out_$p14);
    goto corral_source_split_1914;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1913;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p23, out_$p24, out_$p25, out_$p27, out_$i28, out_$i29, out_$p12 := qxl_release_list_add_loop_$bb4(in_$p1, in_$i10, out_$p14, out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p23, out_$p24, out_$p25, out_$p27, out_$i28, out_$i29, out_$p12);
    return;

  exit:
    return;
}



procedure qxl_release_list_add_loop_$bb4(in_$p1: ref, in_$i10: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p12: ref) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p12: ref);



implementation wait_for_io_cmd_user_loop_$bb109(in_$p0: ref, in_$p7: ref, in_$i96: i32, in_$i155: i64, in_$p156: ref, in_$i157: i64, in_$p158: ref, in_$i159: i32, in_$i160: i1, in_$i161: i8, in_$i162: i1, in_$i163: i1, in_$i164: i64, in_$i165: i1, in_$i167: i1, in_$i166: i1, in_$i168: i32, in_$i169: i1, in_$i170: i64, in_$i171: i64) returns (out_$i155: i64, out_$p156: ref, out_$i157: i64, out_$p158: ref, out_$i159: i32, out_$i160: i1, out_$i161: i8, out_$i162: i1, out_$i163: i1, out_$i164: i64, out_$i165: i1, out_$i167: i1, out_$i166: i1, out_$i168: i32, out_$i169: i1, out_$i170: i64, out_$i171: i64)
{

  entry:
    out_$i155, out_$p156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i167, out_$i166, out_$i168, out_$i169, out_$i170, out_$i171 := in_$i155, in_$p156, in_$i157, in_$p158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i167, in_$i166, in_$i168, in_$i169, in_$i170, in_$i171;
    goto $bb109, exit;

  $bb109:
    assume {:verifier.code 0} true;
    goto corral_source_split_2966;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    out_$i155 := out_$i171;
    goto corral_source_split_2995_dummy;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} out_$i171 := schedule_timeout(out_$i164);
    call {:si_unique_call 789} {:cexpr "__ret___6"} boogie_si_record_i64(out_$i171);
    goto corral_source_split_2995;

  $bb120:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    out_$i170 := out_$i164;
    assume true;
    goto $bb120;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    out_$i169 := $ne.i32(out_$i168, 0);
    goto corral_source_split_2985;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    out_$i168 := $zext.i1.i32(out_$i166);
    goto corral_source_split_2984;

  $bb117:
    assume {:verifier.code 0} true;
    goto corral_source_split_2983;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    out_$i166 := out_$i167;
    goto $bb117;

  $bb116:
    assume {:verifier.code 0} true;
    assume out_$i165 == 1;
    goto $bb117;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    out_$i166 := 1;
    assume true;
    goto $bb116, $bb118;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    out_$i165 := $trunc.i8.i1(out_$i161);
    goto corral_source_split_2981;

  $bb115:
    assume {:verifier.code 0} true;
    goto corral_source_split_2980;

  $bb112:
    assume {:verifier.code 0} true;
    out_$i164 := out_$i155;
    goto $bb115;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    out_$i164 := 1;
    goto $bb115;

  $bb113:
    assume out_$i163 == 1;
    goto corral_source_split_2978;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i64(out_$i155, 0);
    goto corral_source_split_2976;

  $bb110:
    assume out_$i162 == 1;
    goto corral_source_split_2975;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    out_$i162 := $trunc.i8.i1(out_$i161);
    goto corral_source_split_2973;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    out_$i161 := $zext.i1.i8(out_$i160);
    call {:si_unique_call 786} {:cexpr "__cond___5"} boogie_si_record_i8(out_$i161);
    goto corral_source_split_2972;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    out_$i160 := $sgt.i32(out_$i159, in_$i96);
    goto corral_source_split_2971;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} out_$i159 := atomic_read(out_$p158);
    call {:si_unique_call 785} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i159);
    goto corral_source_split_2970;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2969;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} out_$i157 := prepare_to_wait_event(out_$p156, in_$p7, 2);
    call {:si_unique_call 783} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i157);
    goto corral_source_split_2968;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2967;

  $bb111:
    assume {:verifier.code 0} true;
    assume !(out_$i162 == 1);
    goto $bb112;

  $bb114:
    assume {:verifier.code 0} true;
    assume !(out_$i163 == 1);
    goto $bb112;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i64(out_$i164, 0);
    goto corral_source_split_2988;

  $bb118:
    assume !(out_$i165 == 1);
    goto corral_source_split_2987;

  corral_source_split_2995_dummy:
    call {:si_unique_call 1} out_$i155, out_$p156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i167, out_$i166, out_$i168, out_$i169, out_$i170, out_$i171 := wait_for_io_cmd_user_loop_$bb109(in_$p0, in_$p7, in_$i96, out_$i155, out_$p156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i167, out_$i166, out_$i168, out_$i169, out_$i170, out_$i171);
    return;

  exit:
    return;
}



procedure wait_for_io_cmd_user_loop_$bb109(in_$p0: ref, in_$p7: ref, in_$i96: i32, in_$i155: i64, in_$p156: ref, in_$i157: i64, in_$p158: ref, in_$i159: i32, in_$i160: i1, in_$i161: i8, in_$i162: i1, in_$i163: i1, in_$i164: i64, in_$i165: i1, in_$i167: i1, in_$i166: i1, in_$i168: i32, in_$i169: i1, in_$i170: i64, in_$i171: i64) returns (out_$i155: i64, out_$p156: ref, out_$i157: i64, out_$p158: ref, out_$i159: i32, out_$i160: i1, out_$i161: i8, out_$i162: i1, out_$i163: i1, out_$i164: i64, out_$i165: i1, out_$i167: i1, out_$i166: i1, out_$i168: i32, out_$i169: i1, out_$i170: i64, out_$i171: i64);



implementation wait_for_io_cmd_user_loop_$bb79(in_$p0: ref, in_$p6: ref, in_$i96: i32, in_$i117: i64, in_$p118: ref, in_$i119: i64, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$i123: i8, in_$i124: i1, in_$i125: i1, in_$i126: i64, in_$i127: i1, in_$i129: i1, in_$i128: i1, in_$i130: i32, in_$i131: i1, in_$i132: i64, in_$i134: i1, in_$i135: i64, in_$i136: i64) returns (out_$i117: i64, out_$p118: ref, out_$i119: i64, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$i123: i8, out_$i124: i1, out_$i125: i1, out_$i126: i64, out_$i127: i1, out_$i129: i1, out_$i128: i1, out_$i130: i32, out_$i131: i1, out_$i132: i64, out_$i134: i1, out_$i135: i64, out_$i136: i64)
{

  entry:
    out_$i117, out_$p118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i129, out_$i128, out_$i130, out_$i131, out_$i132, out_$i134, out_$i135, out_$i136 := in_$i117, in_$p118, in_$i119, in_$p120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i129, in_$i128, in_$i130, in_$i131, in_$i132, in_$i134, in_$i135, in_$i136;
    goto $bb79, exit;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_2904;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    out_$i117 := out_$i136;
    goto corral_source_split_2938_dummy;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} out_$i136 := schedule_timeout(out_$i126);
    call {:si_unique_call 779} {:cexpr "__ret___4"} boogie_si_record_i64(out_$i136);
    goto corral_source_split_2938;

  $bb94:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    out_$i135 := out_$i119;
    assume true;
    goto $bb94;

  $bb92:
    assume {:verifier.code 0} true;
    out_$i134 := $ne.i64(out_$i119, 0);
    goto corral_source_split_2934;

  $bb90:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    out_$i132 := out_$i126;
    assume true;
    goto $bb90;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i32(out_$i130, 0);
    goto corral_source_split_2923;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    out_$i130 := $zext.i1.i32(out_$i128);
    goto corral_source_split_2922;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_2921;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    out_$i128 := out_$i129;
    goto $bb87;

  $bb86:
    assume {:verifier.code 0} true;
    assume out_$i127 == 1;
    goto $bb87;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    out_$i128 := 1;
    assume true;
    goto $bb86, $bb88;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    out_$i127 := $trunc.i8.i1(out_$i123);
    goto corral_source_split_2919;

  $bb85:
    assume {:verifier.code 0} true;
    goto corral_source_split_2918;

  $bb82:
    assume {:verifier.code 0} true;
    out_$i126 := out_$i117;
    goto $bb85;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    out_$i126 := 1;
    goto $bb85;

  $bb83:
    assume out_$i125 == 1;
    goto corral_source_split_2916;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i64(out_$i117, 0);
    goto corral_source_split_2914;

  $bb80:
    assume out_$i124 == 1;
    goto corral_source_split_2913;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    out_$i124 := $trunc.i8.i1(out_$i123);
    goto corral_source_split_2911;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i1.i8(out_$i122);
    call {:si_unique_call 776} {:cexpr "__cond___3"} boogie_si_record_i8(out_$i123);
    goto corral_source_split_2910;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    out_$i122 := $sgt.i32(out_$i121, in_$i96);
    goto corral_source_split_2909;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} out_$i121 := atomic_read(out_$p120);
    call {:si_unique_call 775} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i121);
    goto corral_source_split_2908;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2907;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} out_$i119 := prepare_to_wait_event(out_$p118, in_$p6, 1);
    call {:si_unique_call 773} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i119);
    goto corral_source_split_2906;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2905;

  $bb81:
    assume {:verifier.code 0} true;
    assume !(out_$i124 == 1);
    goto $bb82;

  $bb84:
    assume {:verifier.code 0} true;
    assume !(out_$i125 == 1);
    goto $bb82;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i64(out_$i126, 0);
    goto corral_source_split_2926;

  $bb88:
    assume !(out_$i127 == 1);
    goto corral_source_split_2925;

  corral_source_split_2938_dummy:
    call {:si_unique_call 1} out_$i117, out_$p118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i129, out_$i128, out_$i130, out_$i131, out_$i132, out_$i134, out_$i135, out_$i136 := wait_for_io_cmd_user_loop_$bb79(in_$p0, in_$p6, in_$i96, out_$i117, out_$p118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i129, out_$i128, out_$i130, out_$i131, out_$i132, out_$i134, out_$i135, out_$i136);
    return;

  exit:
    return;
}



procedure wait_for_io_cmd_user_loop_$bb79(in_$p0: ref, in_$p6: ref, in_$i96: i32, in_$i117: i64, in_$p118: ref, in_$i119: i64, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$i123: i8, in_$i124: i1, in_$i125: i1, in_$i126: i64, in_$i127: i1, in_$i129: i1, in_$i128: i1, in_$i130: i32, in_$i131: i1, in_$i132: i64, in_$i134: i1, in_$i135: i64, in_$i136: i64) returns (out_$i117: i64, out_$p118: ref, out_$i119: i64, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$i123: i8, out_$i124: i1, out_$i125: i1, out_$i126: i64, out_$i127: i1, out_$i129: i1, out_$i128: i1, out_$i130: i32, out_$i131: i1, out_$i132: i64, out_$i134: i1, out_$i135: i64, out_$i136: i64);



implementation wait_for_io_cmd_user_loop_$bb46(in_$p0: ref, in_$p5: ref, in_$i15: i32, in_$i72: i64, in_$p73: ref, in_$i74: i64, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$i78: i8, in_$i79: i1, in_$i80: i1, in_$i81: i64, in_$i82: i1, in_$i84: i1, in_$i83: i1, in_$i85: i32, in_$i86: i1, in_$i87: i64, in_$i88: i64) returns (out_$i72: i64, out_$p73: ref, out_$i74: i64, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$i78: i8, out_$i79: i1, out_$i80: i1, out_$i81: i64, out_$i82: i1, out_$i84: i1, out_$i83: i1, out_$i85: i32, out_$i86: i1, out_$i87: i64, out_$i88: i64)
{

  entry:
    out_$i72, out_$p73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i84, out_$i83, out_$i85, out_$i86, out_$i87, out_$i88 := in_$i72, in_$p73, in_$i74, in_$p75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i84, in_$i83, in_$i85, in_$i86, in_$i87, in_$i88;
    goto $bb46, exit;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_2816;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    out_$i72 := out_$i88;
    goto corral_source_split_2845_dummy;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} out_$i88 := schedule_timeout(out_$i81);
    call {:si_unique_call 758} {:cexpr "__ret___2"} boogie_si_record_i64(out_$i88);
    goto corral_source_split_2845;

  $bb57:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    out_$i87 := out_$i81;
    assume true;
    goto $bb57;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i32(out_$i85, 0);
    goto corral_source_split_2835;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i1.i32(out_$i83);
    goto corral_source_split_2834;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_2833;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    out_$i83 := out_$i84;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    assume out_$i82 == 1;
    goto $bb54;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    out_$i83 := 1;
    assume true;
    goto $bb53, $bb55;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    out_$i82 := $trunc.i8.i1(out_$i78);
    goto corral_source_split_2831;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_2830;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i81 := out_$i72;
    goto $bb52;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    out_$i81 := 1;
    goto $bb52;

  $bb50:
    assume out_$i80 == 1;
    goto corral_source_split_2828;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i64(out_$i72, 0);
    goto corral_source_split_2826;

  $bb47:
    assume out_$i79 == 1;
    goto corral_source_split_2825;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    out_$i79 := $trunc.i8.i1(out_$i78);
    goto corral_source_split_2823;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i1.i8(out_$i77);
    call {:si_unique_call 755} {:cexpr "__cond___1"} boogie_si_record_i8(out_$i78);
    goto corral_source_split_2822;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    out_$i77 := $sgt.i32(out_$i76, in_$i15);
    goto corral_source_split_2821;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} out_$i76 := atomic_read(out_$p75);
    call {:si_unique_call 754} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_2820;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2819;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} out_$i74 := prepare_to_wait_event(out_$p73, in_$p5, 2);
    call {:si_unique_call 752} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i74);
    goto corral_source_split_2818;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2817;

  $bb48:
    assume {:verifier.code 0} true;
    assume !(out_$i79 == 1);
    goto $bb49;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i80 == 1);
    goto $bb49;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i64(out_$i81, 0);
    goto corral_source_split_2838;

  $bb55:
    assume !(out_$i82 == 1);
    goto corral_source_split_2837;

  corral_source_split_2845_dummy:
    call {:si_unique_call 1} out_$i72, out_$p73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i84, out_$i83, out_$i85, out_$i86, out_$i87, out_$i88 := wait_for_io_cmd_user_loop_$bb46(in_$p0, in_$p5, in_$i15, out_$i72, out_$p73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i84, out_$i83, out_$i85, out_$i86, out_$i87, out_$i88);
    return;

  exit:
    return;
}



procedure wait_for_io_cmd_user_loop_$bb46(in_$p0: ref, in_$p5: ref, in_$i15: i32, in_$i72: i64, in_$p73: ref, in_$i74: i64, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$i78: i8, in_$i79: i1, in_$i80: i1, in_$i81: i64, in_$i82: i1, in_$i84: i1, in_$i83: i1, in_$i85: i32, in_$i86: i1, in_$i87: i64, in_$i88: i64) returns (out_$i72: i64, out_$p73: ref, out_$i74: i64, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$i78: i8, out_$i79: i1, out_$i80: i1, out_$i81: i64, out_$i82: i1, out_$i84: i1, out_$i83: i1, out_$i85: i32, out_$i86: i1, out_$i87: i64, out_$i88: i64);



implementation wait_for_io_cmd_user_loop_$bb16(in_$p0: ref, in_$p4: ref, in_$i15: i32, in_$i34: i64, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$i40: i8, in_$i41: i1, in_$i42: i1, in_$i43: i64, in_$i44: i1, in_$i46: i1, in_$i45: i1, in_$i47: i32, in_$i48: i1, in_$i49: i64, in_$i51: i1, in_$i52: i64, in_$i53: i64) returns (out_$i34: i64, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$i40: i8, out_$i41: i1, out_$i42: i1, out_$i43: i64, out_$i44: i1, out_$i46: i1, out_$i45: i1, out_$i47: i32, out_$i48: i1, out_$i49: i64, out_$i51: i1, out_$i52: i64, out_$i53: i64)
{

  entry:
    out_$i34, out_$p35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i46, out_$i45, out_$i47, out_$i48, out_$i49, out_$i51, out_$i52, out_$i53 := in_$i34, in_$p35, in_$i36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i46, in_$i45, in_$i47, in_$i48, in_$i49, in_$i51, in_$i52, in_$i53;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2753;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i53;
    goto corral_source_split_2787_dummy;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} out_$i53 := schedule_timeout(out_$i43);
    call {:si_unique_call 748} {:cexpr "__ret___0"} boogie_si_record_i64(out_$i53);
    goto corral_source_split_2787;

  $bb31:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i36;
    assume true;
    goto $bb31;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i36, 0);
    goto corral_source_split_2783;

  $bb27:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i43;
    assume true;
    goto $bb27;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_2772;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i1.i32(out_$i45);
    goto corral_source_split_2771;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2770;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i46;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    assume out_$i44 == 1;
    goto $bb24;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    out_$i45 := 1;
    assume true;
    goto $bb23, $bb25;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    out_$i44 := $trunc.i8.i1(out_$i40);
    goto corral_source_split_2768;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2767;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i34;
    goto $bb22;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    out_$i43 := 1;
    goto $bb22;

  $bb20:
    assume out_$i42 == 1;
    goto corral_source_split_2765;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i64(out_$i34, 0);
    goto corral_source_split_2763;

  $bb17:
    assume out_$i41 == 1;
    goto corral_source_split_2762;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    out_$i41 := $trunc.i8.i1(out_$i40);
    goto corral_source_split_2760;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i1.i8(out_$i39);
    call {:si_unique_call 745} {:cexpr "__cond"} boogie_si_record_i8(out_$i40);
    goto corral_source_split_2759;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    out_$i39 := $sgt.i32(out_$i38, in_$i15);
    goto corral_source_split_2758;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} out_$i38 := atomic_read(out_$p37);
    call {:si_unique_call 744} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_2757;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2756;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} out_$i36 := prepare_to_wait_event(out_$p35, in_$p4, 1);
    call {:si_unique_call 742} {:cexpr "tmp"} boogie_si_record_i64(out_$i36);
    goto corral_source_split_2755;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2754;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb19;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb19;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i64(out_$i43, 0);
    goto corral_source_split_2775;

  $bb25:
    assume !(out_$i44 == 1);
    goto corral_source_split_2774;

  corral_source_split_2787_dummy:
    call {:si_unique_call 1} out_$i34, out_$p35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i46, out_$i45, out_$i47, out_$i48, out_$i49, out_$i51, out_$i52, out_$i53 := wait_for_io_cmd_user_loop_$bb16(in_$p0, in_$p4, in_$i15, out_$i34, out_$p35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i46, out_$i45, out_$i47, out_$i48, out_$i49, out_$i51, out_$i52, out_$i53);
    return;

  exit:
    return;
}



procedure wait_for_io_cmd_user_loop_$bb16(in_$p0: ref, in_$p4: ref, in_$i15: i32, in_$i34: i64, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$i40: i8, in_$i41: i1, in_$i42: i1, in_$i43: i64, in_$i44: i1, in_$i46: i1, in_$i45: i1, in_$i47: i32, in_$i48: i1, in_$i49: i64, in_$i51: i1, in_$i52: i64, in_$i53: i64) returns (out_$i34: i64, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$i40: i8, out_$i41: i1, out_$i42: i1, out_$i43: i64, out_$i44: i1, out_$i46: i1, out_$i45: i1, out_$i47: i32, out_$i48: i1, out_$i49: i64, out_$i51: i1, out_$i52: i64, out_$i53: i64);



implementation __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1)
{

  entry:
    out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := in_$i11, in_$i10, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := out_$i14;
    goto $bb11_dummy;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i14;
    assume true;
    goto $bb11;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_3695;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} out_$i24 := ldv__builtin_expect(out_$i23, 0);
    call {:si_unique_call 992} {:cexpr "tmp"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_3694;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i22);
    goto corral_source_split_3693;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i32(out_$i21);
    goto corral_source_split_3692;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i14, in_$i2);
    goto corral_source_split_3691;

  $bb9:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i10;
    assume true;
    goto $bb9;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_3687;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} out_$i18 := ldv__builtin_expect(out_$i17, 1);
    call {:si_unique_call 990} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_3686;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3685;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_3684;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, out_$i10);
    goto corral_source_split_3683;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} out_$i14 := atomic_cmpxchg(in_$p0, out_$i10, out_$i13);
    call {:si_unique_call 988} {:cexpr "old"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_3682;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i10, in_$i1);
    goto corral_source_split_3681;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := __atomic_add_unless_loop_$bb4(in_$p0, in_$i1, in_$i2, out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25);
    return;

  exit:
    return;
}



procedure __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1);
  modifies $M.6;



implementation qxl_debugfs_remove_files_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i5: i64, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p13: ref, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i20: i64, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p28: ref, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i4: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32) returns (out_$i5: i64, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p13: ref, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i20: i64, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p28: ref, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i4: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32)
{

  entry:
    out_$i5, out_$p8, out_$p9, out_$i10, out_$p13, out_$i14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i20, out_$p23, out_$p24, out_$i25, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i35, out_$i36, out_$i37, out_$i4, out_vslice_dummy_var_114, out_vslice_dummy_var_115 := in_$i5, in_$p8, in_$p9, in_$i10, in_$p13, in_$i14, in_$p15, in_$p16, in_$p17, in_$p18, in_$i20, in_$p23, in_$p24, in_$i25, in_$p28, in_$i29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i35, in_$i36, in_$i37, in_$i4, in_vslice_dummy_var_114, in_vslice_dummy_var_115;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3904;

  $bb6:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i35;
    goto $bb6_dummy;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    out_$i37 := $ult.i32(out_$i35, out_$i36);
    goto corral_source_split_3930;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.6, in_$p1);
    goto corral_source_split_3929;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i4, 1);
    call {:si_unique_call 1057} {:cexpr "i"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_3928;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} out_vslice_dummy_var_115 := drm_debugfs_remove_files(out_$p24, out_$i29, out_$p33);
    goto corral_source_split_3927;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.6, out_$p32);
    goto corral_source_split_3926;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 3144)), $mul.ref(56, 1));
    goto corral_source_split_3925;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.6, out_$p30);
    goto corral_source_split_3924;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_3923;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.6, out_$p28);
    goto corral_source_split_3922;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref(out_$i25, 16)), $mul.ref(8, 1));
    goto corral_source_split_3921;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i32.i64(out_$i4);
    goto corral_source_split_3920;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.6, out_$p23);
    goto corral_source_split_3919;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref(out_$i20, 16)), $mul.ref(0, 1));
    goto corral_source_split_3918;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i32.i64(out_$i4);
    goto corral_source_split_3917;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} out_vslice_dummy_var_114 := drm_debugfs_remove_files(out_$p9, out_$i14, out_$p18);
    goto corral_source_split_3916;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.6, out_$p17);
    goto corral_source_split_3915;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 3144)), $mul.ref(48, 1));
    goto corral_source_split_3914;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.6, out_$p15);
    goto corral_source_split_3913;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_3912;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.6, out_$p13);
    goto corral_source_split_3911;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref(out_$i10, 16)), $mul.ref(8, 1));
    goto corral_source_split_3910;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i32.i64(out_$i4);
    goto corral_source_split_3909;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.6, out_$p8);
    goto corral_source_split_3908;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref(out_$i5, 16)), $mul.ref(0, 1));
    goto corral_source_split_3907;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i5 := $zext.i32.i64(out_$i4);
    goto corral_source_split_3906;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i5, out_$p8, out_$p9, out_$i10, out_$p13, out_$i14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i20, out_$p23, out_$p24, out_$i25, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i35, out_$i36, out_$i37, out_$i4, out_vslice_dummy_var_114, out_vslice_dummy_var_115 := qxl_debugfs_remove_files_loop_$bb4(in_$p0, in_$p1, out_$i5, out_$p8, out_$p9, out_$i10, out_$p13, out_$i14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i20, out_$p23, out_$p24, out_$i25, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i35, out_$i36, out_$i37, out_$i4, out_vslice_dummy_var_114, out_vslice_dummy_var_115);
    return;

  exit:
    return;
}



procedure qxl_debugfs_remove_files_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i5: i64, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p13: ref, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i20: i64, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p28: ref, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i4: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32) returns (out_$i5: i64, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p13: ref, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i20: i64, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p28: ref, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i4: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32);



implementation qxl_bo_unpin_loop_$bb11(in_$p0: ref, in_$p21: ref, in_$i25: i64, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i64, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i24: i32) returns (out_$i25: i64, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i64, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i24: i32)
{

  entry:
    out_$i25, out_$p28, out_$i29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$i37, out_$i24 := in_$i25, in_$p28, in_$i29, in_$i30, in_$i31, in_$p34, in_$i35, in_$i36, in_$i37, in_$i24;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4119;

  $bb13:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i24 := out_$i35;
    goto $bb13_dummy;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    out_$i37 := $ult.i32(out_$i35, out_$i36);
    goto corral_source_split_4130;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.6, in_$p21);
    goto corral_source_split_4129;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i24, 1);
    call {:si_unique_call 1108} {:cexpr "i"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_4128;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p34, out_$i30);
    goto corral_source_split_4127;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref(out_$i31, 12)), $mul.ref(8, 1));
    goto corral_source_split_4126;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i24);
    goto corral_source_split_4125;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    out_$i30 := $and.i32(out_$i29, $sub.i32(0, 2097153));
    goto corral_source_split_4124;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.6, out_$p28);
    goto corral_source_split_4123;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref(out_$i25, 12)), $mul.ref(8, 1));
    goto corral_source_split_4122;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i24);
    goto corral_source_split_4121;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i25, out_$p28, out_$i29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$i37, out_$i24 := qxl_bo_unpin_loop_$bb11(in_$p0, in_$p21, out_$i25, out_$p28, out_$i29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$i37, out_$i24);
    return;

  exit:
    return;
}



procedure qxl_bo_unpin_loop_$bb11(in_$p0: ref, in_$p21: ref, in_$i25: i64, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i64, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i24: i32) returns (out_$i25: i64, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i64, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i24: i32);
  modifies $M.6;



implementation qxl_modeset_init_loop_$bb8(in_$p0: ref, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$p43: ref, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i38: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i32) returns (out_$p39: ref, out_$p40: ref, out_$p42: ref, out_$p43: ref, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i38: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i32)
{

  entry:
    out_$p39, out_$p40, out_$p42, out_$p43, out_$i45, out_$i46, out_$i47, out_$i38, out_vslice_dummy_var_135, out_vslice_dummy_var_136 := in_$p39, in_$p40, in_$p42, in_$p43, in_$i45, in_$i46, in_$i47, in_$i38, in_vslice_dummy_var_135, in_vslice_dummy_var_136;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5143;

  $bb10:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := out_$i45;
    goto $bb10_dummy;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i45, out_$i46);
    goto corral_source_split_5153;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    out_$i46 := $M.66;
    goto corral_source_split_5152;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i38, 1);
    call {:si_unique_call 1337} {:cexpr "i"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_5151;

  SeqInstr_867:
    goto corral_source_split_5150;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} out_vslice_dummy_var_136 := qdev_output_init(out_$p43, out_$i38);
    goto SeqInstr_866;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.6, out_$p42);
    goto corral_source_split_5149;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5148;

  SeqInstr_864:
    goto corral_source_split_5147;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} out_vslice_dummy_var_135 := qdev_crtc_init(out_$p40, out_$i38);
    goto SeqInstr_863;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.6, out_$p39);
    goto corral_source_split_5146;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5145;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p39, out_$p40, out_$p42, out_$p43, out_$i45, out_$i46, out_$i47, out_$i38, out_vslice_dummy_var_135, out_vslice_dummy_var_136 := qxl_modeset_init_loop_$bb8(in_$p0, out_$p39, out_$p40, out_$p42, out_$p43, out_$i45, out_$i46, out_$i47, out_$i38, out_vslice_dummy_var_135, out_vslice_dummy_var_136);
    return;

  exit:
    return;
}



procedure qxl_modeset_init_loop_$bb8(in_$p0: ref, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$p43: ref, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i38: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i32) returns (out_$p39: ref, out_$p40: ref, out_$p42: ref, out_$p43: ref, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i38: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i32);
  modifies $M.6, assertsPassed, $CurrAddr, $M.67, $M.68, $M.69, $M.70;



implementation ldv_struct_drm_connector_helper_funcs_dummy_resourceless_instance_5_loop_$bb4(in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i32) returns (out_$i8: i32, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i32)
{

  entry:
    out_$i8, out_$i9, out_$i10, out_$i11, out_$i12 := in_$i8, in_$i9, in_$i10, in_$i11, in_$i12;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} out_$i8 := ldv_undef_int();
    call {:si_unique_call 1427} {:cexpr "tmp"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_5454;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} ldv_dummy_resourceless_instance_callback_5_8($u4, in_$p7, $u5);
    goto corral_source_split_5459;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb5:
    assume out_$i9 == 1;
    goto corral_source_split_5457;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i8, 1);
    goto corral_source_split_5455;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} ldv_dummy_resourceless_instance_callback_5_7($u6, in_$p7);
    goto corral_source_split_5465;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb9:
    assume out_$i10 == 1;
    goto corral_source_split_5463;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i8, 2);
    goto corral_source_split_5461;

  $bb6:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} ldv_dummy_resourceless_instance_callback_5_3($u7, in_$p7);
    goto corral_source_split_5471;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume out_$i11 == 1;
    goto corral_source_split_5469;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i8;
    assume true;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i8, 3);
    goto corral_source_split_5467;

  $bb10:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$i10, out_$i11, out_$i12 := ldv_struct_drm_connector_helper_funcs_dummy_resourceless_instance_5_loop_$bb4(in_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12);
    return;

  exit:
    return;
}



procedure ldv_struct_drm_connector_helper_funcs_dummy_resourceless_instance_5_loop_$bb4(in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i32) returns (out_$i8: i32, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i32);
  modifies $M.67, $M.68, $M.6, $M.69, $M.70, $CurrAddr;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation qxl_check_device_loop_$bb8(in_$p0: ref, in_$p63: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i66: i32) returns (out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i66: i32)
{

  entry:
    out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i66 := in_$p68, in_$p69, in_$p70, in_$i71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i66;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6260;

  $bb10:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i66 := out_$i73;
    goto $bb10_dummy;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    out_$i75 := $slt.i32(out_$i73, out_$i74);
    goto corral_source_split_6270;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.6, in_$p63);
    goto corral_source_split_6269;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i32(out_$i66, 1);
    call {:si_unique_call 1536} {:cexpr "i"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_6268;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} qxl_dump_mode(in_$p0, out_$p72);
    goto corral_source_split_6267;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(out_$p70, $mul.ref(out_$i71, 1));
    goto corral_source_split_6266;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(out_$i66);
    goto corral_source_split_6265;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    out_$p70 := $bitcast.ref.ref(out_$p69);
    goto corral_source_split_6264;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.6, out_$p68);
    goto corral_source_split_6263;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(8, 1));
    goto corral_source_split_6262;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i66 := qxl_check_device_loop_$bb8(in_$p0, in_$p63, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i66);
    return;

  exit:
    return;
}



procedure qxl_check_device_loop_$bb8(in_$p0: ref, in_$p63: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i66: i32) returns (out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i66: i32);



implementation qxl_fb_work_loop_$bb4(in_$p5: ref, in_$i18: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p51: ref, in_$p52: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p20: ref, in_$p21: ref) returns (out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p51: ref, out_$p52: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p20: ref, out_$p21: ref)
{

  entry:
    out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p33, out_$p34, out_$p35, out_$p36, out_$p38, out_$p39, out_$p40, out_$p41, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p20, out_$p21 := in_$p22, in_$p23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$p33, in_$p34, in_$p35, in_$p36, in_$p38, in_$p39, in_$p40, in_$p41, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p51, in_$p52, in_$p54, in_$i55, in_$i56, in_$p20, in_$p21;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6474;

  $bb20:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$p20, out_$p21 := out_$p52, out_$p20;
    goto $bb20_dummy;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i55, in_$i18);
    goto corral_source_split_6525;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p54);
    goto corral_source_split_6524;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p20, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_6523;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    goto corral_source_split_6522;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.6, out_$p51);
    goto corral_source_split_6521;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref(out_$p20, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6520;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} kfree(out_$p49);
    goto corral_source_split_6519;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_6518;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} list_del(out_$p48);
    goto corral_source_split_6517;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p21, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_6516;

  SeqInstr_924:
    goto corral_source_split_6515;

  SeqInstr_923:
    assume assertsPassed;
    goto SeqInstr_924;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_120(out_$p47);
    goto SeqInstr_923;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p5, $mul.ref(0, 528)), $mul.ref(328, 1));
    goto corral_source_split_6514;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_915:
    goto corral_source_split_6488;

  SeqInstr_914:
    assume assertsPassed;
    goto SeqInstr_915;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} qxl_fb_fillrect_internal(out_$p34, out_$p36);
    goto SeqInstr_914;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(out_$p35);
    goto corral_source_split_6487;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p21, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_6486;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.6, out_$p33);
    goto corral_source_split_6485;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 528)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_6484;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i25 == 1;
    goto corral_source_split_6482;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 1);
    goto corral_source_split_6480;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.6, out_$p23);
    goto corral_source_split_6479;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p21, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_6478;

  SeqInstr_912:
    goto corral_source_split_6477;

  SeqInstr_911:
    assume assertsPassed;
    goto SeqInstr_912;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} ldv_spin_unlock_irqrestore_113___0(out_$p22, $u1);
    goto SeqInstr_911;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p5, $mul.ref(0, 528)), $mul.ref(328, 1));
    goto corral_source_split_6476;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_918:
    goto corral_source_split_6500;

  SeqInstr_917:
    assume assertsPassed;
    goto SeqInstr_918;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} qxl_fb_copyarea_internal(out_$p39, out_$p41);
    goto SeqInstr_917;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(out_$p40);
    goto corral_source_split_6499;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p21, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_6498;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.6, out_$p38);
    goto corral_source_split_6497;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 528)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_6496;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i28 == 1;
    goto corral_source_split_6494;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 2);
    goto corral_source_split_6492;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.6, out_$p26);
    goto corral_source_split_6491;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p21, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_6490;

  $bb7:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_921:
    goto corral_source_split_6512;

  SeqInstr_920:
    assume assertsPassed;
    goto SeqInstr_921;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} qxl_fb_imageblit_internal(out_$p44, out_$p46);
    goto SeqInstr_920;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_6511;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p21, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_6510;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.6, out_$p43);
    goto corral_source_split_6509;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 528)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_6508;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i31 == 1;
    goto corral_source_split_6506;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 3);
    goto corral_source_split_6504;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.6, out_$p29);
    goto corral_source_split_6503;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p21, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_6502;

  $bb11:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p33, out_$p34, out_$p35, out_$p36, out_$p38, out_$p39, out_$p40, out_$p41, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p20, out_$p21 := qxl_fb_work_loop_$bb4(in_$p5, in_$i18, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p33, out_$p34, out_$p35, out_$p36, out_$p38, out_$p39, out_$p40, out_$p41, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p20, out_$p21);
    return;

  exit:
    return;
}



procedure qxl_fb_work_loop_$bb4(in_$p5: ref, in_$i18: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p51: ref, in_$p52: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p20: ref, in_$p21: ref) returns (out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p51: ref, out_$p52: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p20: ref, out_$p21: ref);
  modifies $M.72, assertsPassed, $M.6, $M.46, $M.38, $M.39, $CurrAddr, $M.42, $M.52, $M.53, $M.49, $M.40, $M.44, $M.43, $M.41, $M.67, $M.68, $M.75, $M.37, $M.73, $M.74, $M.69, $M.70, $M.32, $M.71, $M.36, $M.64, $M.35, $M.54, $M.55, $M.65;



implementation qxl_release_reserve_list_loop_$bb11(in_$i23: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p25: ref) returns (out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p25: ref)
{

  entry:
    out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p38, out_$p39, out_$p40, out_$p42, out_$i43, out_$i44, out_$p25 := in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$p38, in_$p39, in_$p40, in_$p42, in_$i43, in_$i44, in_$p25;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6955;

  $bb16:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$p25 := out_$p39;
    goto $bb16_dummy;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i43, in_$i23);
    goto corral_source_split_6974;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p42);
    goto corral_source_split_6973;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref(out_$p40, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6972;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_6971;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.6, out_$p38);
    goto corral_source_split_6970;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6969;

  $bb14:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i31;
    assume true;
    goto $bb14;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 0);
    goto corral_source_split_6962;

  SeqInstr_1011:
    call {:si_unique_call 1689} {:cexpr "ret"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_6961;

  SeqInstr_1010:
    assume assertsPassed;
    goto SeqInstr_1011;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} out_$i31 := qxl_release_validate_bo(out_$p30);
    goto SeqInstr_1010;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(out_$p29, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_6960;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_6959;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.6, out_$p27);
    goto corral_source_split_6958;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_6957;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p38, out_$p39, out_$p40, out_$p42, out_$i43, out_$i44, out_$p25 := qxl_release_reserve_list_loop_$bb11(in_$i23, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p38, out_$p39, out_$p40, out_$p42, out_$i43, out_$i44, out_$p25);
    return;

  exit:
    return;
}



procedure qxl_release_reserve_list_loop_$bb11(in_$i23: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p25: ref) returns (out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p25: ref);
  modifies $M.6, $M.38, $M.39, $M.44, $M.75, $M.46, $M.42, assertsPassed, $M.37, $CurrAddr, $M.40, $M.41, $M.52, $M.53, $M.49, $M.43, $M.67, $M.68, $M.69, $M.70, $M.32, $M.72, $M.73, $M.74, $M.71, $M.54, $M.64, $M.36, $M.65, $M.55, $M.35;



implementation qxl_image_free_objects_loop_$bb4(in_$i13: i64, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p15: ref, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p15: ref, out_$p16: ref)
{

  entry:
    out_$p17, out_$p18, out_$p20, out_$p21, out_$p23, out_$i24, out_$i25, out_$p15, out_$p16 := in_$p17, in_$p18, in_$p20, in_$p21, in_$p23, in_$i24, in_$i25, in_$p15, in_$p16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7170;

  $bb6:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$p15, out_$p16 := out_$p21, out_$p15;
    goto $bb6_dummy;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, in_$i13);
    goto corral_source_split_7181;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_7180;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p15, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7179;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    goto corral_source_split_7178;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.6, out_$p20);
    goto corral_source_split_7177;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7176;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} kfree(out_$p18);
    goto corral_source_split_7175;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_7174;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} qxl_bo_unref(out_$p17);
    goto corral_source_split_7173;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7172;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$p20, out_$p21, out_$p23, out_$i24, out_$i25, out_$p15, out_$p16 := qxl_image_free_objects_loop_$bb4(in_$i13, out_$p17, out_$p18, out_$p20, out_$p21, out_$p23, out_$i24, out_$i25, out_$p15, out_$p16);
    return;

  exit:
    return;
}



procedure qxl_image_free_objects_loop_$bb4(in_$i13: i64, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p15: ref, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p15: ref, out_$p16: ref);
  modifies $M.46, $M.6, $CurrAddr;



implementation qxl_release_free_list_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i1) returns (out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i1)
{

  entry:
    out_$p6, out_$p7, out_$p8, out_$p10, out_$p11, out_$p12, out_$p13, out_$p15, out_$p16, out_$i17, out_$i18 := in_$p6, in_$p7, in_$p8, in_$p10, in_$p11, in_$p12, in_$p13, in_$p15, in_$p16, in_$i17, in_$i18;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i18 == 1;
    goto $bb6_dummy;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i17, 0);
    goto corral_source_split_7225;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} out_$i17 := list_empty(in_$p2);
    call {:si_unique_call 1751} {:cexpr "tmp"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_7224;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} kfree(out_$p16);
    goto corral_source_split_7223;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p8);
    goto corral_source_split_7222;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} list_del(out_$p15);
    goto corral_source_split_7221;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref(out_$p8, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7220;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} qxl_bo_unref(in_$p1);
    goto corral_source_split_7219;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, in_$p1, out_$p13);
    goto corral_source_split_7218;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref(out_$p12, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_7217;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_7216;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.6, out_$p10);
    goto corral_source_split_7215;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref(out_$p8, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_7214;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    out_$p8 := $bitcast.ref.ref(out_$p7);
    goto corral_source_split_7213;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.6, out_$p6);
    goto corral_source_split_7212;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_7211;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$p8, out_$p10, out_$p11, out_$p12, out_$p13, out_$p15, out_$p16, out_$i17, out_$i18 := qxl_release_free_list_loop_$bb4(in_$p0, in_$p1, in_$p2, out_$p6, out_$p7, out_$p8, out_$p10, out_$p11, out_$p12, out_$p13, out_$p15, out_$p16, out_$i17, out_$i18);
    return;

  exit:
    return;
}



procedure qxl_release_free_list_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i1) returns (out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i1);
  modifies $M.46, $M.6, $CurrAddr;



implementation qxl_image_init_helper_loop_$bb29(in_$p0: ref, in_$p16: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$p62: ref, in_$i63: i64, in_$p64: ref, in_$i65: i64, in_$i66: i32, in_$i67: i64, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$i54: i32, in_$i55: i32, in_$p56: ref, in_cmdloc_dummy_var_35: [ref]i8, in_cmdloc_dummy_var_36: [ref]i8, in_cmdloc_dummy_var_37: [ref]i8) returns (out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$p62: ref, out_$i63: i64, out_$p64: ref, out_$i65: i64, out_$i66: i32, out_$i67: i64, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$i54: i32, out_$i55: i32, out_$p56: ref, out_cmdloc_dummy_var_35: [ref]i8, out_cmdloc_dummy_var_36: [ref]i8, out_cmdloc_dummy_var_37: [ref]i8)
{

  entry:
    out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i54, out_$i55, out_$p56, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37 := in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$p62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$i54, in_$i55, in_$p56, in_cmdloc_dummy_var_35, in_cmdloc_dummy_var_36, in_cmdloc_dummy_var_37;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7401;

  $bb34:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i54, out_$i55, out_$p56 := out_$i69, out_$i66, out_$p68;
    goto $bb34_dummy;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    out_$i70 := $sgt.i32(out_$i66, 0);
    goto corral_source_split_7423;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i32(out_$i54, out_$i61);
    call {:si_unique_call 1803} {:cexpr "out_offset"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_7422;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref(out_$p56, $mul.ref(out_$i67, 1));
    goto corral_source_split_7421;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i61);
    goto corral_source_split_7420;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    out_$i66 := $sub.i32(out_$i55, out_$i61);
    call {:si_unique_call 1802} {:cexpr "remain"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_7419;

  SeqInstr_1095:
    goto corral_source_split_7418;

  SeqInstr_1094:
    assume assertsPassed;
    goto SeqInstr_1095;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} qxl_bo_kunmap_atomic_page(in_$p0, in_$p16, out_$p62);
    goto SeqInstr_1094;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_35 := $M.6;
    out_cmdloc_dummy_var_36 := $M.6;
    call {:si_unique_call 1800} out_cmdloc_dummy_var_37 := $memcpy.i8(out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_$p64, out_$p56, out_$i65, $zext.i32.i64(1), 0 == 1);
    $M.6 := out_cmdloc_dummy_var_37;
    goto corral_source_split_7417;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(out_$i61);
    goto corral_source_split_7416;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(out_$p62, $mul.ref(out_$i63, 1));
    goto corral_source_split_7415;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i32.i64(out_$i58);
    goto corral_source_split_7414;

  SeqInstr_1092:
    goto corral_source_split_7413;

  SeqInstr_1091:
    assume assertsPassed;
    goto SeqInstr_1092;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} out_$p62 := qxl_bo_kmap_atomic_page(in_$p0, in_$p16, out_$i57);
    goto SeqInstr_1091;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_7412;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i55;
    goto $bb33;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i59;
    goto $bb33;

  $bb31:
    assume out_$i60 == 1;
    goto corral_source_split_7408;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i59, out_$i55);
    goto corral_source_split_7406;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    out_$i59 := $sub.i32(4096, out_$i58);
    call {:si_unique_call 1798} {:cexpr "_min1___0"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_7405;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    out_$i58 := $and.i32(out_$i54, 4095);
    call {:si_unique_call 1797} {:cexpr "page_offset___0"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_7404;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i57 := $and.i32(out_$i54, $sub.i32(0, 4096));
    call {:si_unique_call 1796} {:cexpr "page_base"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_7403;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb32:
    assume !(out_$i60 == 1);
    goto corral_source_split_7410;

  $bb34_dummy:
    call {:si_unique_call 1} out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i54, out_$i55, out_$p56, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37 := qxl_image_init_helper_loop_$bb29(in_$p0, in_$p16, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i54, out_$i55, out_$p56, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37);
    return;

  exit:
    return;
}



procedure qxl_image_init_helper_loop_$bb29(in_$p0: ref, in_$p16: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$p62: ref, in_$i63: i64, in_$p64: ref, in_$i65: i64, in_$i66: i32, in_$i67: i64, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$i54: i32, in_$i55: i32, in_$p56: ref, in_cmdloc_dummy_var_35: [ref]i8, in_cmdloc_dummy_var_36: [ref]i8, in_cmdloc_dummy_var_37: [ref]i8) returns (out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$p62: ref, out_$i63: i64, out_$p64: ref, out_$i65: i64, out_$i66: i32, out_$i67: i64, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$i54: i32, out_$i55: i32, out_$p56: ref, out_cmdloc_dummy_var_35: [ref]i8, out_cmdloc_dummy_var_36: [ref]i8, out_cmdloc_dummy_var_37: [ref]i8);
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $CurrAddr, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.43, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation qxl_image_init_helper_loop_$bb24(in_$p0: ref, in_$p3: ref, in_$i5: i32, in_$i8: i32, in_$i10: i32, in_$p16: ref, in_$i48: i32, in_$i49: i64, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$p62: ref, in_$i63: i64, in_$p64: ref, in_$i65: i64, in_$i66: i32, in_$i67: i64, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$i54: i32, in_$i55: i32, in_$p56: ref, in_$i71: i32, in_$i72: i1, in_$i47: i32, in_cmdloc_dummy_var_35: [ref]i8, in_cmdloc_dummy_var_36: [ref]i8, in_cmdloc_dummy_var_37: [ref]i8) returns (out_$i48: i32, out_$i49: i64, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$p62: ref, out_$i63: i64, out_$p64: ref, out_$i65: i64, out_$i66: i32, out_$i67: i64, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$i54: i32, out_$i55: i32, out_$p56: ref, out_$i71: i32, out_$i72: i1, out_$i47: i32, out_cmdloc_dummy_var_35: [ref]i8, out_cmdloc_dummy_var_36: [ref]i8, out_cmdloc_dummy_var_37: [ref]i8)
{

  entry:
    out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i54, out_$i55, out_$p56, out_$i71, out_$i72, out_$i47, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37 := in_$i48, in_$i49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$p62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$i54, in_$i55, in_$p56, in_$i71, in_$i72, in_$i47, in_cmdloc_dummy_var_35, in_cmdloc_dummy_var_36, in_cmdloc_dummy_var_37;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_7390;

  $bb37:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$i47 := out_$i71;
    goto $bb37_dummy;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i71, in_$i5);
    goto corral_source_split_7428;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i32(out_$i47, 1);
    call {:si_unique_call 1804} {:cexpr "i"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_7427;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i53 == 1);
    goto $bb28;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb35:
    assume !(out_$i70 == 1);
    goto corral_source_split_7425;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    out_$i70 := $sgt.i32(out_$i66, 0);
    goto corral_source_split_7423;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i32(out_$i54, out_$i61);
    call {:si_unique_call 1803} {:cexpr "out_offset"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_7422;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref(out_$p56, $mul.ref(out_$i67, 1));
    goto corral_source_split_7421;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i61);
    goto corral_source_split_7420;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    out_$i66 := $sub.i32(out_$i55, out_$i61);
    call {:si_unique_call 1802} {:cexpr "remain"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_7419;

  SeqInstr_1095:
    goto corral_source_split_7418;

  SeqInstr_1094:
    assume assertsPassed;
    goto SeqInstr_1095;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} qxl_bo_kunmap_atomic_page(in_$p0, in_$p16, out_$p62);
    goto SeqInstr_1094;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_35 := $M.6;
    out_cmdloc_dummy_var_36 := $M.6;
    call {:si_unique_call 1800} out_cmdloc_dummy_var_37 := $memcpy.i8(out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_$p64, out_$p56, out_$i65, $zext.i32.i64(1), 0 == 1);
    $M.6 := out_cmdloc_dummy_var_37;
    goto corral_source_split_7417;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(out_$i61);
    goto corral_source_split_7416;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(out_$p62, $mul.ref(out_$i63, 1));
    goto corral_source_split_7415;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i32.i64(out_$i58);
    goto corral_source_split_7414;

  SeqInstr_1092:
    goto corral_source_split_7413;

  SeqInstr_1091:
    assume assertsPassed;
    goto SeqInstr_1092;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} out_$p62 := qxl_bo_kmap_atomic_page(in_$p0, in_$p16, out_$i57);
    goto SeqInstr_1091;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_7412;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i55;
    goto $bb33;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i59;
    goto $bb33;

  $bb31:
    assume out_$i60 == 1;
    goto corral_source_split_7408;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i59, out_$i55);
    goto corral_source_split_7406;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    out_$i59 := $sub.i32(4096, out_$i58);
    call {:si_unique_call 1798} {:cexpr "_min1___0"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_7405;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    out_$i58 := $and.i32(out_$i54, 4095);
    call {:si_unique_call 1797} {:cexpr "page_offset___0"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_7404;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i57 := $and.i32(out_$i54, $sub.i32(0, 4096));
    call {:si_unique_call 1796} {:cexpr "page_base"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_7403;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb29:
    call out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i54, out_$i55, out_$p56, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37 := qxl_image_init_helper_loop_$bb29(in_$p0, in_$p16, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i54, out_$i55, out_$p56, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37);
    goto $bb29_last;

  $bb29_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7401;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    out_$i54, out_$i55, out_$p56 := out_$i52, in_$i10, out_$p50;
    goto $bb29;

  $bb34:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i54, out_$i55, out_$p56 := out_$i69, out_$i66, out_$p68;
    assume false;
    return;

  $bb26:
    assume out_$i53 == 1;
    goto corral_source_split_7399;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    out_$i53 := $sgt.i32(in_$i10, 0);
    goto corral_source_split_7397;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i51, 20);
    call {:si_unique_call 1795} {:cexpr "out_offset"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_7396;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    out_$i51 := $mul.i32(out_$i47, in_$i8);
    goto corral_source_split_7395;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref(in_$p3, $mul.ref(out_$i49, 1));
    goto corral_source_split_7394;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(out_$i48);
    goto corral_source_split_7393;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i48 := $mul.i32(out_$i47, in_$i8);
    goto corral_source_split_7392;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb32:
    assume !(out_$i60 == 1);
    goto corral_source_split_7410;

  $bb37_dummy:
    call {:si_unique_call 1} out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i54, out_$i55, out_$p56, out_$i71, out_$i72, out_$i47, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37 := qxl_image_init_helper_loop_$bb24(in_$p0, in_$p3, in_$i5, in_$i8, in_$i10, in_$p16, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i54, out_$i55, out_$p56, out_$i71, out_$i72, out_$i47, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37);
    return;

  exit:
    return;
}



procedure qxl_image_init_helper_loop_$bb24(in_$p0: ref, in_$p3: ref, in_$i5: i32, in_$i8: i32, in_$i10: i32, in_$p16: ref, in_$i48: i32, in_$i49: i64, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$p62: ref, in_$i63: i64, in_$p64: ref, in_$i65: i64, in_$i66: i32, in_$i67: i64, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$i54: i32, in_$i55: i32, in_$p56: ref, in_$i71: i32, in_$i72: i1, in_$i47: i32, in_cmdloc_dummy_var_35: [ref]i8, in_cmdloc_dummy_var_36: [ref]i8, in_cmdloc_dummy_var_37: [ref]i8) returns (out_$i48: i32, out_$i49: i64, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$p62: ref, out_$i63: i64, out_$p64: ref, out_$i65: i64, out_$i66: i32, out_$i67: i64, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$i54: i32, out_$i55: i32, out_$p56: ref, out_$i71: i32, out_$i72: i1, out_$i47: i32, out_cmdloc_dummy_var_35: [ref]i8, out_cmdloc_dummy_var_36: [ref]i8, out_cmdloc_dummy_var_37: [ref]i8);
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $CurrAddr, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.43, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation qxl_image_init_helper_loop_$bb9(in_$p0: ref, in_$p16: ref, in_$i30: i32, in_$p31: ref, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i64, in_$i41: i64, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i27: i32, in_$i28: i32, in_$p29: ref, in_cmdloc_dummy_var_32: [ref]i8, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8) returns (out_$i30: i32, out_$p31: ref, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i64, out_$i41: i64, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i27: i32, out_$i28: i32, out_$p29: ref, out_cmdloc_dummy_var_32: [ref]i8, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8)
{

  entry:
    out_$i30, out_$p31, out_$i32, out_$p33, out_$p34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i27, out_$i28, out_$p29, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34 := in_$i30, in_$p31, in_$i32, in_$p33, in_$p34, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i44, in_$i45, in_$i27, in_$i28, in_$p29, in_cmdloc_dummy_var_32, in_cmdloc_dummy_var_33, in_cmdloc_dummy_var_34;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7341;

  $bb17:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i27, out_$i28, out_$p29 := out_$i44, out_$i43, out_$p42;
    goto $bb17_dummy;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    out_$i45 := $sgt.i32(out_$i43, 0);
    goto corral_source_split_7367;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i27, 1);
    call {:si_unique_call 1792} {:cexpr "page"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_7366;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    out_$i43 := $sub.i32(out_$i28, out_$i39);
    call {:si_unique_call 1791} {:cexpr "remain"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_7365;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref(out_$p29, $mul.ref(out_$i41, 1));
    goto corral_source_split_7364;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i39);
    goto corral_source_split_7363;

  SeqInstr_1086:
    goto corral_source_split_7362;

  SeqInstr_1085:
    assume assertsPassed;
    goto SeqInstr_1086;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} qxl_bo_kunmap_atomic_page(in_$p0, in_$p16, out_$p31);
    goto SeqInstr_1085;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_32 := $M.6;
    out_cmdloc_dummy_var_33 := $M.6;
    call {:si_unique_call 1789} out_cmdloc_dummy_var_34 := $memcpy.i8(out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_$p36, out_$p29, out_$i40, $zext.i32.i64(1), 0 == 1);
    $M.6 := out_cmdloc_dummy_var_34;
    goto corral_source_split_7361;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i32.i64(out_$i39);
    goto corral_source_split_7360;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_7359;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i28;
    goto $bb16;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i37;
    goto $bb16;

  $bb14:
    assume out_$i38 == 1;
    goto corral_source_split_7355;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(out_$i37, out_$i28);
    goto corral_source_split_7353;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7352;

  $bb12:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$p36, out_$i37 := out_$p31, 4096;
    goto $bb13;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    out_$p36, out_$i37 := out_$p34, 4076;
    goto $bb13;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    goto corral_source_split_7350;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p33, $mul.ref(0, 24)), $mul.ref(24, 1));
    goto corral_source_split_7349;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_7348;

  $bb11:
    assume out_$i32 == 1;
    goto corral_source_split_7347;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i27, 0);
    goto corral_source_split_7345;

  SeqInstr_1083:
    goto corral_source_split_7344;

  SeqInstr_1082:
    assume assertsPassed;
    goto SeqInstr_1083;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} out_$p31 := qxl_bo_kmap_atomic_page(in_$p0, in_$p16, out_$i30);
    goto SeqInstr_1082;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i30 := $shl.i32(out_$i27, 12);
    goto corral_source_split_7343;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb15:
    assume !(out_$i38 == 1);
    goto corral_source_split_7357;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i30, out_$p31, out_$i32, out_$p33, out_$p34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i27, out_$i28, out_$p29, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34 := qxl_image_init_helper_loop_$bb9(in_$p0, in_$p16, out_$i30, out_$p31, out_$i32, out_$p33, out_$p34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i27, out_$i28, out_$p29, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34);
    return;

  exit:
    return;
}



procedure qxl_image_init_helper_loop_$bb9(in_$p0: ref, in_$p16: ref, in_$i30: i32, in_$p31: ref, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i64, in_$i41: i64, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i27: i32, in_$i28: i32, in_$p29: ref, in_cmdloc_dummy_var_32: [ref]i8, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8) returns (out_$i30: i32, out_$p31: ref, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i64, out_$i41: i64, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i27: i32, out_$i28: i32, out_$p29: ref, out_cmdloc_dummy_var_32: [ref]i8, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8);
  modifies $M.6, $M.46, $M.38, $M.39, $M.42, $CurrAddr, $M.37, $M.67, $M.68, $M.72, $M.52, $M.73, $M.74, assertsPassed, $M.69, $M.70, $M.32, $M.53, $M.49, $M.40, $M.44, $M.43, $M.41, $M.71, $M.75, $M.54, $M.64, $M.36, $M.55, $M.35, $M.65;



implementation qxl_surface_id_alloc_loop_$bb1(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$p4: ref, in_$i5: i32, in_$p6: ref, in_$i7: i1, in_$i8: i32, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i16: i32, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i15: i32, in_vslice_dummy_var_164: i32) returns (out_$i2: i32, out_$p3: ref, out_$p4: ref, out_$i5: i32, out_$p6: ref, out_$i7: i1, out_$i8: i32, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i16: i32, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i15: i32, out_vslice_dummy_var_164: i32)
{

  entry:
    out_$i2, out_$p3, out_$p4, out_$i5, out_$p6, out_$i7, out_$i8, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i16, out_$p17, out_$p18, out_$p19, out_$i15, out_vslice_dummy_var_164 := in_$i2, in_$p3, in_$p4, in_$i5, in_$p6, in_$i7, in_$i8, in_$p10, in_$p11, in_$p12, in_$i13, in_$i14, in_$i16, in_$p17, in_$p18, in_$p19, in_$i15, in_vslice_dummy_var_164;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_7556;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    out_$i2 := out_$i16;
    goto corral_source_split_7585_dummy;

  SeqInstr_1131:
    goto corral_source_split_7585;

  SeqInstr_1130:
    assume assertsPassed;
    goto SeqInstr_1131;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} out_vslice_dummy_var_164 := qxl_reap_surface_id(in_$p0, 2);
    goto SeqInstr_1130;

  SeqInstr_1128:
    goto corral_source_split_7584;

  SeqInstr_1127:
    assume assertsPassed;
    goto SeqInstr_1128;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} ldv_spin_unlock_129(out_$p19);
    goto SeqInstr_1127;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7583;

  SeqInstr_1125:
    goto corral_source_split_7582;

  SeqInstr_1124:
    assume assertsPassed;
    goto SeqInstr_1125;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} ldv_idr_remove_131(out_$p18, out_$i5);
    goto SeqInstr_1124;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4592, 1));
    goto corral_source_split_7581;

  SeqInstr_1122:
    goto corral_source_split_7580;

  SeqInstr_1121:
    assume assertsPassed;
    goto SeqInstr_1122;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} ldv_spin_lock_127(out_$p17);
    goto SeqInstr_1121;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7579;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i2, 1);
    call {:si_unique_call 1830} {:cexpr "count"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_7578;

  $bb6:
    assume out_$i14 == 1;
    goto corral_source_split_7577;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i5;
    assume true;
    goto $bb6;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    out_$i14 := $uge.i32(out_$i5, out_$i13);
    goto corral_source_split_7575;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.6, out_$p12);
    goto corral_source_split_7574;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 1160)), $mul.ref(52, 1));
    goto corral_source_split_7573;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.6, out_$p10);
    goto corral_source_split_7572;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_7571;

  $bb3:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    out_$i8 := out_$i5;
    assume true;
    goto $bb3;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    out_$i7 := $slt.i32(out_$i5, 0);
    goto corral_source_split_7565;

  SeqInstr_1119:
    goto corral_source_split_7564;

  SeqInstr_1118:
    assume assertsPassed;
    goto SeqInstr_1119;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} idr_preload_end();
    goto SeqInstr_1118;

  SeqInstr_1116:
    goto corral_source_split_7563;

  SeqInstr_1115:
    assume assertsPassed;
    goto SeqInstr_1116;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} ldv_spin_unlock_129(out_$p6);
    goto SeqInstr_1115;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7562;

  SeqInstr_1113:
    call {:si_unique_call 1827} {:cexpr "idr_ret"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_7561;

  SeqInstr_1112:
    assume assertsPassed;
    goto SeqInstr_1113;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} out_$i5 := ldv_idr_alloc_128(out_$p4, $0.ref, 1, 0, 0);
    goto SeqInstr_1112;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    out_$p4 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4592, 1));
    goto corral_source_split_7560;

  SeqInstr_1110:
    goto corral_source_split_7559;

  SeqInstr_1109:
    assume assertsPassed;
    goto SeqInstr_1110;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} ldv_spin_lock_127(out_$p3);
    goto SeqInstr_1109;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    out_$p3 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7558;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} idr_preload(32);
    goto corral_source_split_7557;

  corral_source_split_7585_dummy:
    call {:si_unique_call 1} out_$i2, out_$p3, out_$p4, out_$i5, out_$p6, out_$i7, out_$i8, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i16, out_$p17, out_$p18, out_$p19, out_$i15, out_vslice_dummy_var_164 := qxl_surface_id_alloc_loop_$bb1(in_$p0, out_$i2, out_$p3, out_$p4, out_$i5, out_$p6, out_$i7, out_$i8, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i16, out_$p17, out_$p18, out_$p19, out_$i15, out_vslice_dummy_var_164);
    return;

  exit:
    return;
}



procedure qxl_surface_id_alloc_loop_$bb1(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$p4: ref, in_$i5: i32, in_$p6: ref, in_$i7: i1, in_$i8: i32, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i16: i32, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i15: i32, in_vslice_dummy_var_164: i32) returns (out_$i2: i32, out_$p3: ref, out_$p4: ref, out_$i5: i32, out_$p6: ref, out_$i7: i1, out_$i8: i32, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i16: i32, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i15: i32, out_vslice_dummy_var_164: i32);
  modifies $M.37, $M.44, assertsPassed, $M.75, $M.6, $M.41, $M.38, $M.39, $M.40, $CurrAddr, $M.46, $M.42, $M.54, $M.65, $M.55, $M.52, $M.53, $M.49, $M.43, $M.67, $M.68, $M.69, $M.70, $M.32, $M.72, $M.73, $M.74, $M.71, $M.64, $M.36, $M.35;



implementation qxl_reap_surface_id_loop_$bb5(in_$p0: ref, in_$i1: i32, in_$i4: i8, in_$i8: i32, in_$p10: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p31: ref, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i30: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i17: i32, in_$i18: i32, in_$i46: i32) returns (out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p31: ref, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i30: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i17: i32, out_$i18: i32, out_$i46: i32)
{

  entry:
    out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i30, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i17, out_$i18, out_$i46 := in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$p24, in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i30, in_$i40, in_$p41, in_$p42, in_$i43, in_$i44, in_$i45, in_$i17, in_$i18, in_$i46;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7758;

  $bb18:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i17, out_$i18 := out_$i30, out_$i40;
    goto $bb18_dummy;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i30;
    assume true;
    goto $bb18;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    out_$i45 := $ult.i32(out_$i40, out_$i44);
    goto corral_source_split_7782;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(in_$i8, out_$i43);
    goto corral_source_split_7781;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.6, out_$p42);
    goto corral_source_split_7780;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p41, $mul.ref(0, 1160)), $mul.ref(52, 1));
    goto corral_source_split_7779;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.6, in_$p10);
    goto corral_source_split_7778;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i18, 1);
    call {:si_unique_call 1869} {:cexpr "i"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_7777;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7776;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i36;
    goto $bb9;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i17;
    goto $bb9;

  $bb7:
    assume out_$i29 == 1;
    goto corral_source_split_7774;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i64(out_$i28, 0);
    goto corral_source_split_7772;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_7771;

  SeqInstr_1188:
    goto corral_source_split_7770;

  SeqInstr_1187:
    assume assertsPassed;
    goto SeqInstr_1188;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} ldv_spin_unlock_129(out_$p27);
    goto SeqInstr_1187;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7769;

  SeqInstr_1185:
    goto corral_source_split_7768;

  SeqInstr_1184:
    assume assertsPassed;
    goto SeqInstr_1185;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} out_$p26 := ldv_idr_find_150(out_$p25, out_$i23);
    goto SeqInstr_1184;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4592, 1));
    goto corral_source_split_7767;

  SeqInstr_1182:
    goto corral_source_split_7766;

  SeqInstr_1181:
    assume assertsPassed;
    goto SeqInstr_1182;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} ldv_spin_lock_127(out_$p24);
    goto SeqInstr_1181;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7765;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    out_$i23 := $urem.i32(out_$i18, out_$i22);
    call {:si_unique_call 1865} {:cexpr "surfid"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_7764;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.6, out_$p21);
    goto corral_source_split_7763;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 1160)), $mul.ref(52, 1));
    goto corral_source_split_7762;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.6, out_$p19);
    goto corral_source_split_7761;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_7760;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb15:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i36;
    assume true;
    goto $bb15;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    out_$i37 := $sge.i32(out_$i36, in_$i1);
    goto corral_source_split_7793;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_7792;

  $bb12:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := out_$i17;
    goto $bb13;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i35;
    goto $bb13;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i17, 1);
    call {:si_unique_call 1872} {:cexpr "num_reaped"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_7790;

  $bb11:
    assume out_$i34 == 1;
    goto corral_source_split_7789;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 0);
    goto corral_source_split_7787;

  SeqInstr_1191:
    call {:si_unique_call 1871} {:cexpr "ret"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_7786;

  SeqInstr_1190:
    assume assertsPassed;
    goto SeqInstr_1191;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} out_$i33 := qxl_reap_surf(in_$p0, out_$p31, out_$i32);
    goto SeqInstr_1190;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    out_$i32 := $trunc.i8.i1(in_$i4);
    goto corral_source_split_7785;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_7784;

  $bb8:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i30, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i17, out_$i18, out_$i46 := qxl_reap_surface_id_loop_$bb5(in_$p0, in_$i1, in_$i4, in_$i8, in_$p10, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i30, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i17, out_$i18, out_$i46);
    return;

  exit:
    return;
}



procedure qxl_reap_surface_id_loop_$bb5(in_$p0: ref, in_$i1: i32, in_$i4: i8, in_$i8: i32, in_$p10: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p31: ref, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i30: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i17: i32, in_$i18: i32, in_$i46: i32) returns (out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p31: ref, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i30: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i17: i32, out_$i18: i32, out_$i46: i32);
  modifies $M.44, assertsPassed, $M.75, $M.37, $M.6, $M.38, $M.39, $M.40, $CurrAddr, $M.46, $M.42, $M.54, $M.65, $M.55, $M.52, $M.53, $M.49, $M.43, $M.41, $M.67, $M.68, $M.69, $M.70, $M.32, $M.72, $M.73, $M.74, $M.71, $M.64, $M.36, $M.35;



implementation qxl_reap_surface_id_loop_$bb1(in_$p0: ref, in_$i1: i32, in_$i3: i32, in_$i4: i8, in_$p5: ref, in_$p6: ref, in_$i7: i32, in_$i8: i32, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p31: ref, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i30: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i17: i32, in_$i18: i32, in_$i46: i32, in_$i16: i32, in_$i39: i32, in_$i47: i1, in_$i49: i1, in_$i48: i32) returns (out_$i3: i32, out_$i4: i8, out_$p5: ref, out_$p6: ref, out_$i7: i32, out_$i8: i32, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p31: ref, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i30: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i17: i32, out_$i18: i32, out_$i46: i32, out_$i16: i32, out_$i39: i32, out_$i47: i1, out_$i49: i1, out_$i48: i32)
{

  entry:
    out_$i3, out_$i4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i30, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i17, out_$i18, out_$i46, out_$i16, out_$i39, out_$i47, out_$i49, out_$i48 := in_$i3, in_$i4, in_$p5, in_$p6, in_$i7, in_$i8, in_$p9, in_$p10, in_$p11, in_$p12, in_$i13, in_$i14, in_$i15, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$p24, in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i30, in_$i40, in_$p41, in_$p42, in_$i43, in_$i44, in_$i45, in_$i17, in_$i18, in_$i46, in_$i16, in_$i39, in_$i47, in_$i49, in_$i48;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7741;

  $bb25:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    out_$i3, out_$i4 := out_$i39, 1;
    goto $bb25_dummy;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i39;
    assume true;
    goto $bb25;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    out_$i49 := $trunc.i8.i1(out_$i4);
    goto corral_source_split_7803;

  $bb21:
    assume out_$i47 == 1;
    goto corral_source_split_7802;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i39;
    assume true;
    goto $bb21;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i39, 0);
    goto corral_source_split_7798;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_7797;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i16;
    goto $bb16;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i38;
    goto $bb16;

  $bb14:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7795;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i36;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    out_$i37 := $sge.i32(out_$i36, in_$i1);
    goto corral_source_split_7793;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_7792;

  $bb12:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := out_$i17;
    goto $bb13;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i35;
    goto $bb13;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i17, 1);
    call {:si_unique_call 1872} {:cexpr "num_reaped"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_7790;

  $bb11:
    assume out_$i34 == 1;
    goto corral_source_split_7789;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 0);
    goto corral_source_split_7787;

  SeqInstr_1191:
    call {:si_unique_call 1871} {:cexpr "ret"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_7786;

  SeqInstr_1190:
    assume assertsPassed;
    goto SeqInstr_1191;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} out_$i33 := qxl_reap_surf(in_$p0, out_$p31, out_$i32);
    goto SeqInstr_1190;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    out_$i32 := $trunc.i8.i1(out_$i4);
    goto corral_source_split_7785;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_7784;

  $bb8:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i64(out_$i28, 0);
    goto corral_source_split_7772;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_7771;

  SeqInstr_1188:
    goto corral_source_split_7770;

  SeqInstr_1187:
    assume assertsPassed;
    goto SeqInstr_1188;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} ldv_spin_unlock_129(out_$p27);
    goto SeqInstr_1187;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7769;

  SeqInstr_1185:
    goto corral_source_split_7768;

  SeqInstr_1184:
    assume assertsPassed;
    goto SeqInstr_1185;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} out_$p26 := ldv_idr_find_150(out_$p25, out_$i23);
    goto SeqInstr_1184;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4592, 1));
    goto corral_source_split_7767;

  SeqInstr_1182:
    goto corral_source_split_7766;

  SeqInstr_1181:
    assume assertsPassed;
    goto SeqInstr_1182;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} ldv_spin_lock_127(out_$p24);
    goto SeqInstr_1181;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7765;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    out_$i23 := $urem.i32(out_$i18, out_$i22);
    call {:si_unique_call 1865} {:cexpr "surfid"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_7764;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.6, out_$p21);
    goto corral_source_split_7763;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 1160)), $mul.ref(52, 1));
    goto corral_source_split_7762;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.6, out_$p19);
    goto corral_source_split_7761;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_7760;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb5:
    call out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i30, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i17, out_$i18, out_$i46 := qxl_reap_surface_id_loop_$bb5(in_$p0, in_$i1, out_$i4, out_$i8, out_$p10, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i30, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i17, out_$i18, out_$i46);
    goto $bb5_last;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7758;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    out_$i17, out_$i18 := out_$i3, out_$i8;
    goto $bb5;

  $bb18:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i17, out_$i18 := out_$i30, out_$i40;
    assume false;
    return;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i30;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    out_$i45 := $ult.i32(out_$i40, out_$i44);
    goto corral_source_split_7782;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i8, out_$i43);
    goto corral_source_split_7781;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.6, out_$p42);
    goto corral_source_split_7780;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p41, $mul.ref(0, 1160)), $mul.ref(52, 1));
    goto corral_source_split_7779;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.6, out_$p10);
    goto corral_source_split_7778;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i18, 1);
    call {:si_unique_call 1869} {:cexpr "i"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_7777;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7776;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i36;
    goto $bb9;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i17;
    goto $bb9;

  $bb7:
    assume out_$i29 == 1;
    goto corral_source_split_7774;

  $bb15:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume out_$i15 == 1;
    goto corral_source_split_7756;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i3;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    out_$i15 := $ult.i32(out_$i8, out_$i14);
    goto corral_source_split_7754;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i32(out_$i8, out_$i13);
    goto corral_source_split_7753;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.6, out_$p12);
    goto corral_source_split_7752;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 1160)), $mul.ref(52, 1));
    goto corral_source_split_7751;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.6, out_$p10);
    goto corral_source_split_7750;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_7749;

  SeqInstr_1179:
    goto corral_source_split_7748;

  SeqInstr_1178:
    assume assertsPassed;
    goto SeqInstr_1179;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} ldv_spin_unlock_129(out_$p9);
    goto SeqInstr_1178;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7747;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    out_$i8 := $add.i32(out_$i7, 1);
    call {:si_unique_call 1863} {:cexpr "start"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_7746;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i32($M.6, out_$p6);
    goto corral_source_split_7745;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4776, 1));
    goto corral_source_split_7744;

  SeqInstr_1176:
    goto corral_source_split_7743;

  SeqInstr_1175:
    assume assertsPassed;
    goto SeqInstr_1176;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} ldv_spin_lock_127(out_$p5);
    goto SeqInstr_1175;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_7742;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb3:
    assume {:verifier.code 0} true;
    assume !(out_$i15 == 1);
    goto $bb4;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i46;
    goto $bb4;

  $bb19:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7800;

  $bb25_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i30, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i17, out_$i18, out_$i46, out_$i16, out_$i39, out_$i47, out_$i49, out_$i48 := qxl_reap_surface_id_loop_$bb1(in_$p0, in_$i1, out_$i3, out_$i4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i30, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i17, out_$i18, out_$i46, out_$i16, out_$i39, out_$i47, out_$i49, out_$i48);
    return;

  exit:
    return;
}



procedure qxl_reap_surface_id_loop_$bb1(in_$p0: ref, in_$i1: i32, in_$i3: i32, in_$i4: i8, in_$p5: ref, in_$p6: ref, in_$i7: i32, in_$i8: i32, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p31: ref, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i30: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i17: i32, in_$i18: i32, in_$i46: i32, in_$i16: i32, in_$i39: i32, in_$i47: i1, in_$i49: i1, in_$i48: i32) returns (out_$i3: i32, out_$i4: i8, out_$p5: ref, out_$p6: ref, out_$i7: i32, out_$i8: i32, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p31: ref, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i30: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i17: i32, out_$i18: i32, out_$i46: i32, out_$i16: i32, out_$i39: i32, out_$i47: i1, out_$i49: i1, out_$i48: i32);
  modifies $M.37, $M.6, assertsPassed, $M.38, $M.39, $M.40, $CurrAddr, $M.46, $M.44, $M.42, $M.54, $M.65, $M.55, $M.52, $M.53, $M.49, $M.43, $M.41, $M.67, $M.68, $M.69, $M.70, $M.32, $M.72, $M.73, $M.74, $M.71, $M.64, $M.36, $M.75, $M.35;



implementation qxl_garbage_collect_loop_$bb12(in_$p0: ref, in_$p1: ref, in_$i17: i64, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i32, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i32, in_$i27: i1, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i64, in_$i40: i1, in_$i16: i32, in_$i41: i32) returns (out_$i17: i64, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i32, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i32, out_$i27: i1, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i64, out_$i40: i1, out_$i16: i32, out_$i41: i32)
{

  entry:
    out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i16, out_$i41 := in_$i17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i16, in_$i41;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8322;

  $bb36:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i38;
    goto $bb36_dummy;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i38;
    assume true;
    goto $bb36;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i39, 0);
    goto corral_source_split_8372;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i64($M.6, in_$p1);
    goto corral_source_split_8371;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i16, 1);
    call {:si_unique_call 2045} {:cexpr "i"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_8370;

  SeqInstr_1389:
    goto corral_source_split_8369;

  SeqInstr_1388:
    assume assertsPassed;
    goto SeqInstr_1389;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} qxl_release_free(in_$p0, out_$p18);
    goto SeqInstr_1388;

  $bb34:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, in_$p1, out_$i25);
    goto corral_source_split_8368;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume out_$i31 == 1;
    goto corral_source_split_8352;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 0);
    goto corral_source_split_8350;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.6, out_$p29);
    goto corral_source_split_8349;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p18, $mul.ref(0, 216)), $mul.ref(92, 1));
    goto corral_source_split_8348;

  $bb19:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} qxl_io_log.ref.ref.i64.i64(in_$p0, .str.35, out_$i28, out_$i25);
    goto corral_source_split_8346;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.6, in_$p1);
    goto corral_source_split_8345;

  $bb18:
    assume out_$i27 == 1;
    goto corral_source_split_8344;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    out_$i27 := $sgt.i32(out_$i26, 0);
    goto corral_source_split_8342;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    out_$i26 := $M.45;
    goto corral_source_split_8341;

  SeqInstr_1386:
    goto corral_source_split_8340;

  SeqInstr_1385:
    assume assertsPassed;
    goto SeqInstr_1386;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} qxl_release_unmap(in_$p0, out_$p18, out_$p23);
    goto SeqInstr_1385;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.6, out_$p24);
    call {:si_unique_call 2040} {:cexpr "next_id"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_8339;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_8338;

  SeqInstr_1383:
    goto corral_source_split_8337;

  SeqInstr_1382:
    assume assertsPassed;
    goto SeqInstr_1383;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} out_$p23 := qxl_release_map(in_$p0, out_$p18);
    goto SeqInstr_1382;

  $bb15:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i16;
    assume true;
    goto $bb15;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i64(out_$i19, 0);
    goto corral_source_split_8327;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_8326;

  SeqInstr_1377:
    goto corral_source_split_8325;

  SeqInstr_1376:
    assume assertsPassed;
    goto SeqInstr_1377;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} out_$p18 := qxl_release_from_id_locked(in_$p0, out_$i17);
    goto SeqInstr_1376;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i64($M.6, in_$p1);
    goto corral_source_split_8324;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb25:
    assume out_$i34 == 1;
    goto corral_source_split_8358;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 1);
    goto corral_source_split_8356;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.6, out_$p32);
    goto corral_source_split_8355;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p18, $mul.ref(0, 216)), $mul.ref(92, 1));
    goto corral_source_split_8354;

  $bb22:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb29:
    assume out_$i37 == 1;
    goto corral_source_split_8364;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, 2);
    goto corral_source_split_8362;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.6, out_$p35);
    goto corral_source_split_8361;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p18, $mul.ref(0, 216)), $mul.ref(92, 1));
    goto corral_source_split_8360;

  $bb26:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} drm_err.ref(.str.36);
    goto corral_source_split_8366;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb36_dummy:
    call {:si_unique_call 1} out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i16, out_$i41 := qxl_garbage_collect_loop_$bb12(in_$p0, in_$p1, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i16, out_$i41);
    return;

  exit:
    return;
}



procedure qxl_garbage_collect_loop_$bb12(in_$p0: ref, in_$p1: ref, in_$i17: i64, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i32, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i32, in_$i27: i1, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i64, in_$i40: i1, in_$i16: i32, in_$i41: i32) returns (out_$i17: i64, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i32, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i32, out_$i27: i1, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i64, out_$i40: i1, out_$i16: i32, out_$i41: i32);
  modifies $M.52, $M.6, $M.46, $CurrAddr, $M.44, assertsPassed, $M.53, $M.75, $M.36, $M.42, $M.72, $M.38, $M.39, $M.35, $M.40, $M.37, $M.41, $M.43, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.65, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64;



implementation qxl_garbage_collect_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p4: ref, in_$i10: i32, in_$i11: i1, in_$i12: i64, in_$i13: i64, in_$i14: i1, in_$i17: i64, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i32, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i32, in_$i27: i1, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i64, in_$i40: i1, in_$i16: i32, in_$i41: i32, in_$i15: i32, in_$i22: i32, in_$p42: ref, in_$i43: i1, in_$i44: i8, in_$i45: i1, in_$i9: i32, in_$i46: i32) returns (out_$i10: i32, out_$i11: i1, out_$i12: i64, out_$i13: i64, out_$i14: i1, out_$i17: i64, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i32, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i32, out_$i27: i1, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i64, out_$i40: i1, out_$i16: i32, out_$i41: i32, out_$i15: i32, out_$i22: i32, out_$p42: ref, out_$i43: i1, out_$i44: i8, out_$i45: i1, out_$i9: i32, out_$i46: i32)
{

  entry:
    out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i16, out_$i41, out_$i15, out_$i22, out_$p42, out_$i43, out_$i44, out_$i45, out_$i9, out_$i46 := in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i16, in_$i41, in_$i15, in_$i22, in_$p42, in_$i43, in_$i44, in_$i45, in_$i9, in_$i46;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_8308;

  $bb39:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i22;
    goto $bb39_dummy;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i22;
    assume true;
    goto $bb39;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    out_$i45 := $trunc.i8.i1(out_$i44);
    goto corral_source_split_8335;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i1.i8(out_$i43);
    call {:si_unique_call 2038} {:cexpr "tmp"} boogie_si_record_i8(out_$i44);
    goto corral_source_split_8334;

  SeqInstr_1380:
    goto corral_source_split_8333;

  SeqInstr_1379:
    assume assertsPassed;
    goto SeqInstr_1380;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} out_$i43 := qxl_ring_pop(out_$p42, in_$p4);
    goto SeqInstr_1379;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.6, in_$p2);
    goto corral_source_split_8332;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_8331;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i15;
    goto $bb16;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i21;
    goto $bb16;

  $bb14:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_8329;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i16;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i64(out_$i19, 0);
    goto corral_source_split_8327;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_8326;

  SeqInstr_1377:
    goto corral_source_split_8325;

  SeqInstr_1376:
    assume assertsPassed;
    goto SeqInstr_1377;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} out_$p18 := qxl_release_from_id_locked(in_$p0, out_$i17);
    goto SeqInstr_1376;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i64($M.6, in_$p1);
    goto corral_source_split_8324;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    call out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i16, out_$i41 := qxl_garbage_collect_loop_$bb12(in_$p0, in_$p1, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i16, out_$i41);
    goto $bb12_last;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8322;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i9;
    goto $bb12;

  $bb36:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i38;
    assume false;
    return;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i38;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i39, 0);
    goto corral_source_split_8372;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i64($M.6, in_$p1);
    goto corral_source_split_8371;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i16, 1);
    call {:si_unique_call 2045} {:cexpr "i"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_8370;

  SeqInstr_1389:
    goto corral_source_split_8369;

  SeqInstr_1388:
    assume assertsPassed;
    goto SeqInstr_1389;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} qxl_release_free(in_$p0, out_$p18);
    goto SeqInstr_1388;

  $bb34:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, in_$p1, out_$i25);
    goto corral_source_split_8368;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume out_$i31 == 1;
    goto corral_source_split_8352;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 0);
    goto corral_source_split_8350;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.6, out_$p29);
    goto corral_source_split_8349;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p18, $mul.ref(0, 216)), $mul.ref(92, 1));
    goto corral_source_split_8348;

  $bb19:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} qxl_io_log.ref.ref.i64.i64(in_$p0, .str.35, out_$i28, out_$i25);
    goto corral_source_split_8346;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.6, in_$p1);
    goto corral_source_split_8345;

  $bb18:
    assume out_$i27 == 1;
    goto corral_source_split_8344;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    out_$i27 := $sgt.i32(out_$i26, 0);
    goto corral_source_split_8342;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    out_$i26 := $M.45;
    goto corral_source_split_8341;

  SeqInstr_1386:
    goto corral_source_split_8340;

  SeqInstr_1385:
    assume assertsPassed;
    goto SeqInstr_1386;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} qxl_release_unmap(in_$p0, out_$p18, out_$p23);
    goto SeqInstr_1385;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.6, out_$p24);
    call {:si_unique_call 2040} {:cexpr "next_id"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_8339;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_8338;

  SeqInstr_1383:
    goto corral_source_split_8337;

  SeqInstr_1382:
    assume assertsPassed;
    goto SeqInstr_1383;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} out_$p23 := qxl_release_map(in_$p0, out_$p18);
    goto SeqInstr_1382;

  $bb15:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb25:
    assume out_$i34 == 1;
    goto corral_source_split_8358;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 1);
    goto corral_source_split_8356;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.6, out_$p32);
    goto corral_source_split_8355;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p18, $mul.ref(0, 216)), $mul.ref(92, 1));
    goto corral_source_split_8354;

  $bb22:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb29:
    assume out_$i37 == 1;
    goto corral_source_split_8364;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, 2);
    goto corral_source_split_8362;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.6, out_$p35);
    goto corral_source_split_8361;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p18, $mul.ref(0, 216)), $mul.ref(92, 1));
    goto corral_source_split_8360;

  $bb26:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} drm_err.ref(.str.36);
    goto corral_source_split_8366;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb9:
    assume out_$i14 == 1;
    goto corral_source_split_8320;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i9;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i64(out_$i13, 0);
    goto corral_source_split_8318;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i64($M.6, in_$p1);
    goto corral_source_split_8317;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} qxl_io_log.ref.ref.i64(in_$p0, .str.34, out_$i12);
    goto corral_source_split_8315;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i64($M.6, in_$p1);
    goto corral_source_split_8314;

  $bb6:
    assume out_$i11 == 1;
    goto corral_source_split_8313;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    out_$i11 := $sgt.i32(out_$i10, 0);
    goto corral_source_split_8311;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i10 := $M.45;
    goto corral_source_split_8310;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i14 == 1);
    goto $bb11;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i41;
    goto $bb11;

  $bb37:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8374;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i16, out_$i41, out_$i15, out_$i22, out_$p42, out_$i43, out_$i44, out_$i45, out_$i9, out_$i46 := qxl_garbage_collect_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$p4, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i16, out_$i41, out_$i15, out_$i22, out_$p42, out_$i43, out_$i44, out_$i45, out_$i9, out_$i46);
    return;

  exit:
    return;
}



procedure qxl_garbage_collect_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p4: ref, in_$i10: i32, in_$i11: i1, in_$i12: i64, in_$i13: i64, in_$i14: i1, in_$i17: i64, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i32, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i32, in_$i27: i1, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i64, in_$i40: i1, in_$i16: i32, in_$i41: i32, in_$i15: i32, in_$i22: i32, in_$p42: ref, in_$i43: i1, in_$i44: i8, in_$i45: i1, in_$i9: i32, in_$i46: i32) returns (out_$i10: i32, out_$i11: i1, out_$i12: i64, out_$i13: i64, out_$i14: i1, out_$i17: i64, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i32, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i32, out_$i27: i1, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i64, out_$i40: i1, out_$i16: i32, out_$i41: i32, out_$i15: i32, out_$i22: i32, out_$p42: ref, out_$i43: i1, out_$i44: i8, out_$i45: i1, out_$i9: i32, out_$i46: i32);
  modifies $M.6, $M.41, assertsPassed, $M.52, $M.53, $M.46, $CurrAddr, $M.44, $M.75, $M.36, $M.42, $M.72, $M.38, $M.39, $M.35, $M.40, $M.37, $M.43, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.65, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64;



implementation wait_for_io_cmd_loop_$bb1(in_$p0: ref, in_$i1: i8, in_$i2: i64, in_$i3: i32, in_$i4: i8, in_$i5: i32, in_$i6: i1) returns (out_$i3: i32, out_$i4: i8, out_$i5: i32, out_$i6: i1)
{

  entry:
    out_$i3, out_$i4, out_$i5, out_$i6 := in_$i3, in_$i4, in_$i5, in_$i6;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    out_$i3 := $zext.i8.i32(in_$i1);
    goto corral_source_split_8496;

  $bb2:
    assume {:verifier.code 0} true;
    assume out_$i6 == 1;
    goto $bb2_dummy;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i5, $sub.i32(0, 512));
    goto corral_source_split_8499;

  SeqInstr_1428:
    call {:si_unique_call 2073} {:cexpr "ret"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_8498;

  SeqInstr_1427:
    assume assertsPassed;
    goto SeqInstr_1428;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2072} out_$i5 := wait_for_io_cmd_user(in_$p0, out_$i4, in_$i2, 0);
    goto SeqInstr_1427;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    out_$i4 := $trunc.i32.i8(out_$i3);
    goto corral_source_split_8497;

  $bb2_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4, out_$i5, out_$i6 := wait_for_io_cmd_loop_$bb1(in_$p0, in_$i1, in_$i2, out_$i3, out_$i4, out_$i5, out_$i6);
    return;

  exit:
    return;
}



procedure wait_for_io_cmd_loop_$bb1(in_$p0: ref, in_$i1: i8, in_$i2: i64, in_$i3: i32, in_$i4: i8, in_$i5: i32, in_$i6: i1) returns (out_$i3: i32, out_$i4: i8, out_$i5: i32, out_$i6: i1);
  modifies $M.6, $CurrAddr, $M.55, assertsPassed;



implementation qxl_display_read_client_monitors_config_loop_$bb4(in_$p0: ref, in_$i5: i32, in_$i6: i1) returns (out_$i5: i32, out_$i6: i1)
{

  entry:
    out_$i5, out_$i6 := in_$i5, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i6 == 1;
    goto $bb6_dummy;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    out_$i6 := $ne.i32(out_$i5, 0);
    goto corral_source_split_8525;

  SeqInstr_1437:
    call {:si_unique_call 2083} {:cexpr "tmp"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_8524;

  SeqInstr_1436:
    assume assertsPassed;
    goto SeqInstr_1437;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} out_$i5 := qxl_display_copy_rom_client_monitors_config(in_$p0);
    goto SeqInstr_1436;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} qxl_io_log.ref.ref(in_$p0, .str.2);
    goto corral_source_split_8523;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i5, out_$i6 := qxl_display_read_client_monitors_config_loop_$bb4(in_$p0, out_$i5, out_$i6);
    return;

  exit:
    return;
}



procedure qxl_display_read_client_monitors_config_loop_$bb4(in_$p0: ref, in_$i5: i32, in_$i6: i1) returns (out_$i5: i32, out_$i6: i1);
  modifies $M.6, $CurrAddr, assertsPassed;



implementation qxl_display_copy_rom_client_monitors_config_loop_$bb14(in_$p0: ref, in_$p59: ref, in_$p66: ref, in_$p67: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$p79: ref, in_$i80: i32, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$p90: ref, in_$p91: ref, in_$i92: i32, in_$p93: ref, in_$i94: i32, in_$i95: i32, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i64, in_$i105: i64, in_$i106: i1, in_$p107: ref, in_$i108: i32, in_$p109: ref, in_$i110: i32, in_$p111: ref, in_$i112: i32, in_$p113: ref, in_$i114: i32, in_$i115: i32, in_$p116: ref, in_$p117: ref, in_$i118: i16, in_$i119: i32, in_$i120: i1, in_$i65: i32) returns (out_$p66: ref, out_$p67: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$p79: ref, out_$i80: i32, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$p90: ref, out_$p91: ref, out_$i92: i32, out_$p93: ref, out_$i94: i32, out_$i95: i32, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i64, out_$i105: i64, out_$i106: i1, out_$p107: ref, out_$i108: i32, out_$p109: ref, out_$i110: i32, out_$p111: ref, out_$i112: i32, out_$p113: ref, out_$i114: i32, out_$i115: i32, out_$p116: ref, out_$p117: ref, out_$i118: i16, out_$i119: i32, out_$i120: i1, out_$i65: i32)
{

  entry:
    out_$p66, out_$p67, out_$p69, out_$p70, out_$i71, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$p79, out_$i80, out_$p81, out_$p82, out_$i83, out_$p84, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$p109, out_$i110, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i65 := in_$p66, in_$p67, in_$p69, in_$p70, in_$i71, in_$p73, in_$p74, in_$p75, in_$p76, in_$i77, in_$p79, in_$i80, in_$p81, in_$p82, in_$i83, in_$p84, in_$p85, in_$i86, in_$p87, in_$i88, in_$i89, in_$p90, in_$p91, in_$i92, in_$p93, in_$i94, in_$i95, in_$p96, in_$p97, in_$p98, in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$p107, in_$i108, in_$p109, in_$i110, in_$p111, in_$i112, in_$p113, in_$i114, in_$i115, in_$p116, in_$p117, in_$i118, in_$i119, in_$i120, in_$i65;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_8629;

  $bb19:
    assume out_$i120 == 1;
    assume {:verifier.code 0} true;
    out_$i65 := out_$i115;
    goto $bb19_dummy;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    out_$i120 := $slt.i32(out_$i115, out_$i119);
    goto corral_source_split_8695;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    out_$i119 := $zext.i16.i32(out_$i118);
    goto corral_source_split_8694;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i16($M.6, out_$p117);
    goto corral_source_split_8693;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(out_$p116, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8692;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    out_$p116 := $load.ref($M.6, in_$p59);
    goto corral_source_split_8691;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i115 := $add.i32(out_$i65, 1);
    call {:si_unique_call 2103} {:cexpr "i"} boogie_si_record_i32(out_$i115);
    goto corral_source_split_8690;

  $bb17:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2102} drm_ut_debug_printk.ref.ref.i32.i32.i32.i32(.str.110, .str.112, out_$i108, out_$i110, out_$i112, out_$i114);
    goto corral_source_split_8688;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i32($M.6, out_$p113);
    goto corral_source_split_8687;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(out_$p76, $mul.ref(out_$i77, 28)), $mul.ref(20, 1));
    goto corral_source_split_8686;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i32($M.6, out_$p111);
    goto corral_source_split_8685;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(out_$p76, $mul.ref(out_$i77, 28)), $mul.ref(16, 1));
    goto corral_source_split_8684;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.6, out_$p109);
    goto corral_source_split_8683;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(out_$p76, $mul.ref(out_$i77, 28)), $mul.ref(12, 1));
    goto corral_source_split_8682;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i32($M.6, out_$p107);
    goto corral_source_split_8681;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p76, $mul.ref(out_$i77, 28)), $mul.ref(8, 1));
    goto corral_source_split_8680;

  $bb16:
    assume out_$i106 == 1;
    goto corral_source_split_8679;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    out_$i106 := $ne.i64(out_$i105, 0);
    goto corral_source_split_8677;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2100} out_$i105 := ldv__builtin_expect(out_$i104, 0);
    call {:si_unique_call 2101} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i105);
    goto corral_source_split_8676;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    out_$i104 := $sext.i32.i64(out_$i103);
    goto corral_source_split_8675;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i1.i32(out_$i102);
    goto corral_source_split_8674;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i32(out_$i101, 0);
    goto corral_source_split_8673;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    out_$i101 := $and.i32(out_$i100, 4);
    goto corral_source_split_8672;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i32($M.6, drm_debug);
    goto corral_source_split_8671;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p99, 0);
    goto corral_source_split_8670;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(out_$p76, $mul.ref(out_$i77, 28)), $mul.ref(24, 1));
    goto corral_source_split_8669;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p98, out_$i65);
    goto corral_source_split_8668;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(out_$p76, $mul.ref(out_$i77, 28)), $mul.ref(0, 1));
    goto corral_source_split_8667;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p97, 0);
    goto corral_source_split_8666;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p76, $mul.ref(out_$i77, 28)), $mul.ref(4, 1));
    goto corral_source_split_8665;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p96, out_$i95);
    goto corral_source_split_8664;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p76, $mul.ref(out_$i77, 28)), $mul.ref(12, 1));
    goto corral_source_split_8663;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    out_$i95 := $sub.i32(out_$i92, out_$i94);
    goto corral_source_split_8662;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i32($M.6, out_$p93);
    goto corral_source_split_8661;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(out_$p70, $mul.ref(out_$i71, 16)), $mul.ref(0, 1));
    goto corral_source_split_8660;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i32($M.6, out_$p91);
    goto corral_source_split_8659;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p70, $mul.ref(out_$i71, 16)), $mul.ref(8, 1));
    goto corral_source_split_8658;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p90, out_$i89);
    goto corral_source_split_8657;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p76, $mul.ref(out_$i77, 28)), $mul.ref(8, 1));
    goto corral_source_split_8656;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    out_$i89 := $sub.i32(out_$i86, out_$i88);
    goto corral_source_split_8655;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.6, out_$p87);
    goto corral_source_split_8654;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p70, $mul.ref(out_$i71, 16)), $mul.ref(4, 1));
    goto corral_source_split_8653;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i32($M.6, out_$p85);
    goto corral_source_split_8652;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p70, $mul.ref(out_$i71, 16)), $mul.ref(12, 1));
    goto corral_source_split_8651;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p84, out_$i83);
    goto corral_source_split_8650;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p76, $mul.ref(out_$i77, 28)), $mul.ref(20, 1));
    goto corral_source_split_8649;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i32($M.6, out_$p82);
    goto corral_source_split_8648;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p70, $mul.ref(out_$i71, 16)), $mul.ref(0, 1));
    goto corral_source_split_8647;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p81, out_$i80);
    goto corral_source_split_8646;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p76, $mul.ref(out_$i77, 28)), $mul.ref(16, 1));
    goto corral_source_split_8645;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.6, out_$p79);
    goto corral_source_split_8644;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p70, $mul.ref(out_$i71, 16)), $mul.ref(4, 1));
    goto corral_source_split_8643;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    goto corral_source_split_8642;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    out_$i77 := $sext.i32.i64(out_$i65);
    goto corral_source_split_8641;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    out_$p76 := $bitcast.ref.ref(out_$p75);
    goto corral_source_split_8640;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p74, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_8639;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.6, out_$p73);
    goto corral_source_split_8638;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_8637;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    goto corral_source_split_8636;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(out_$i65);
    goto corral_source_split_8635;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    out_$p70 := $bitcast.ref.ref(out_$p69);
    goto corral_source_split_8634;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref(out_$p67, $mul.ref(0, 1160)), $mul.ref(132, 1)), $mul.ref(4, 1));
    goto corral_source_split_8633;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.6, out_$p66);
    goto corral_source_split_8632;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_8631;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p66, out_$p67, out_$p69, out_$p70, out_$i71, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$p79, out_$i80, out_$p81, out_$p82, out_$i83, out_$p84, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$p109, out_$i110, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i65 := qxl_display_copy_rom_client_monitors_config_loop_$bb14(in_$p0, in_$p59, out_$p66, out_$p67, out_$p69, out_$p70, out_$i71, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$p79, out_$i80, out_$p81, out_$p82, out_$i83, out_$p84, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$p109, out_$i110, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i65);
    return;

  exit:
    return;
}



procedure qxl_display_copy_rom_client_monitors_config_loop_$bb14(in_$p0: ref, in_$p59: ref, in_$p66: ref, in_$p67: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$p79: ref, in_$i80: i32, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$p90: ref, in_$p91: ref, in_$i92: i32, in_$p93: ref, in_$i94: i32, in_$i95: i32, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i64, in_$i105: i64, in_$i106: i1, in_$p107: ref, in_$i108: i32, in_$p109: ref, in_$i110: i32, in_$p111: ref, in_$i112: i32, in_$p113: ref, in_$i114: i32, in_$i115: i32, in_$p116: ref, in_$p117: ref, in_$i118: i16, in_$i119: i32, in_$i120: i1, in_$i65: i32) returns (out_$p66: ref, out_$p67: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$p79: ref, out_$i80: i32, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$p90: ref, out_$p91: ref, out_$i92: i32, out_$p93: ref, out_$i94: i32, out_$i95: i32, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i64, out_$i105: i64, out_$i106: i1, out_$p107: ref, out_$i108: i32, out_$p109: ref, out_$i110: i32, out_$p111: ref, out_$i112: i32, out_$p113: ref, out_$i114: i32, out_$i115: i32, out_$p116: ref, out_$p117: ref, out_$i118: i16, out_$i119: i32, out_$i120: i1, out_$i65: i32);
  modifies $M.6;



implementation qxl_update_offset_props_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i13: i64, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i64, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i64, in_$p34: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p15: ref, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: i32) returns (out_$p16: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i64, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i64, out_$p34: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p15: ref, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: i32)
{

  entry:
    out_$p16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p26, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p34, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p15, out_vslice_dummy_var_171, out_vslice_dummy_var_172 := in_$p16, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p26, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$p34, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$i48, in_$i49, in_$p15, in_vslice_dummy_var_171, in_vslice_dummy_var_172;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_8716;

  $bb6:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$p15 := out_$p46;
    goto $bb6_dummy;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i64(out_$i48, in_$i13);
    goto corral_source_split_8748;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(out_$p47);
    goto corral_source_split_8747;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p45, $mul.ref($sub.ref(0, 24), 920)), $mul.ref(24, 1));
    goto corral_source_split_8746;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref(out_$p45, $mul.ref($sub.ref(0, 24), 920));
    goto corral_source_split_8745;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_8744;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.6, out_$p43);
    goto corral_source_split_8743;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_8742;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} out_vslice_dummy_var_172 := drm_object_property_set_value(out_$p34, out_$p37, out_$i40);
    goto corral_source_split_8741;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i32.i64(out_$i39);
    goto corral_source_split_8740;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.6, out_$p38);
    goto corral_source_split_8739;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p21, $mul.ref(out_$i24, 28)), $mul.ref(20, 1));
    goto corral_source_split_8738;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.6, out_$p36);
    goto corral_source_split_8737;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 3144)), $mul.ref(1216, 1)), $mul.ref(1608, 1));
    goto corral_source_split_8736;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p15, $mul.ref(0, 920)), $mul.ref(40, 1));
    goto corral_source_split_8735;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2104} out_vslice_dummy_var_171 := drm_object_property_set_value(out_$p26, out_$p29, out_$i32);
    goto corral_source_split_8734;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i32.i64(out_$i31);
    goto corral_source_split_8733;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.6, out_$p30);
    goto corral_source_split_8732;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p21, $mul.ref(out_$i24, 28)), $mul.ref(16, 1));
    goto corral_source_split_8731;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.6, out_$p28);
    goto corral_source_split_8730;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 3144)), $mul.ref(1216, 1)), $mul.ref(1600, 1));
    goto corral_source_split_8729;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p15, $mul.ref(0, 920)), $mul.ref(40, 1));
    goto corral_source_split_8728;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    goto corral_source_split_8727;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(out_$i23);
    goto corral_source_split_8726;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.6, out_$p22);
    goto corral_source_split_8725;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p16, $mul.ref($sub.ref(0, 8), 1024)), $mul.ref(0, 1));
    goto corral_source_split_8724;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_8723;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_8722;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.6, out_$p18);
    goto corral_source_split_8721;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_8720;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    goto corral_source_split_8719;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_8718;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p26, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p34, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p15, out_vslice_dummy_var_171, out_vslice_dummy_var_172 := qxl_update_offset_props_loop_$bb4(in_$p0, in_$p2, in_$i13, out_$p16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p26, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p34, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p15, out_vslice_dummy_var_171, out_vslice_dummy_var_172);
    return;

  exit:
    return;
}



procedure qxl_update_offset_props_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i13: i64, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i64, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i64, in_$p34: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p15: ref, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: i32) returns (out_$p16: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i64, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i64, out_$p34: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p15: ref, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: i32);



implementation qxl_debugfs_add_files_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i7: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i64, in_$i14: i1, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i6: i32) returns (out_$i7: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i64, out_$i14: i1, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i6: i32)
{

  entry:
    out_$i7, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i18, out_$i6 := in_$i7, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$i16, in_$i17, in_$i18, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_9019;

  $bb10:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i16;
    goto $bb10_dummy;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    out_$i18 := $ult.i32(out_$i16, out_$i17);
    goto corral_source_split_9034;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.6, in_$p3);
    goto corral_source_split_9033;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i6, 1);
    call {:si_unique_call 2167} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_9032;

  $bb7:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i64(out_$i12, out_$i13);
    goto corral_source_split_9026;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_9025;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_9024;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.6, out_$p10);
    goto corral_source_split_9023;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref(out_$i7, 16)), $mul.ref(0, 1));
    goto corral_source_split_9022;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i7 := $zext.i32.i64(out_$i6);
    goto corral_source_split_9021;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i7, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i18, out_$i6 := qxl_debugfs_add_files_loop_$bb4(in_$p0, in_$p1, in_$p3, out_$i7, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i18, out_$i6);
    return;

  exit:
    return;
}



procedure qxl_debugfs_add_files_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i7: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i64, in_$i14: i1, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i6: i32) returns (out_$i7: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i64, out_$i14: i1, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i6: i32);



implementation qxl_drm_freeze_loop_$bb23(in_$p5: ref, in_$p45: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_vslice_dummy_var_189: i1) returns (out_$p50: ref, out_$i51: i32, out_$i52: i1, out_vslice_dummy_var_189: i1)
{

  entry:
    out_$p50, out_$i51, out_$i52, out_vslice_dummy_var_189 := in_$p50, in_$i51, in_$i52, in_vslice_dummy_var_189;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb25:
    assume {:verifier.code 0} true;
    assume out_$i52 == 1;
    goto $bb25_dummy;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 0);
    goto corral_source_split_9454;

  SeqInstr_1500:
    call {:si_unique_call 2275} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_9453;

  SeqInstr_1499:
    assume assertsPassed;
    goto SeqInstr_1500;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} out_$i51 := qxl_check_idle(out_$p50);
    goto SeqInstr_1499;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.6, in_$p45);
    goto corral_source_split_9452;

  SeqInstr_1497:
    goto corral_source_split_9451;

  SeqInstr_1496:
    assume assertsPassed;
    goto SeqInstr_1497;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2273} out_vslice_dummy_var_189 := qxl_queue_garbage_collect(in_$p5, 1);
    goto SeqInstr_1496;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p50, out_$i51, out_$i52, out_vslice_dummy_var_189 := qxl_drm_freeze_loop_$bb23(in_$p5, in_$p45, out_$p50, out_$i51, out_$i52, out_vslice_dummy_var_189);
    return;

  exit:
    return;
}



procedure qxl_drm_freeze_loop_$bb23(in_$p5: ref, in_$p45: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_vslice_dummy_var_189: i1) returns (out_$p50: ref, out_$i51: i32, out_$i52: i1, out_vslice_dummy_var_189: i1);
  modifies $M.41, assertsPassed;



implementation qxl_drm_freeze_loop_$bb15(in_$p38: ref, in_$p42: ref, in_$i43: i32, in_$i44: i1) returns (out_$p42: ref, out_$i43: i32, out_$i44: i1)
{

  entry:
    out_$p42, out_$i43, out_$i44 := in_$p42, in_$i43, in_$i44;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i44 == 1;
    goto $bb17_dummy;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i43, 0);
    goto corral_source_split_9440;

  SeqInstr_1491:
    call {:si_unique_call 2270} {:cexpr "tmp"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_9439;

  SeqInstr_1490:
    assume assertsPassed;
    goto SeqInstr_1491;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2269} out_$i43 := qxl_check_idle(out_$p42);
    goto SeqInstr_1490;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.6, in_$p38);
    goto corral_source_split_9438;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p42, out_$i43, out_$i44 := qxl_drm_freeze_loop_$bb15(in_$p38, out_$p42, out_$i43, out_$i44);
    return;

  exit:
    return;
}



procedure qxl_drm_freeze_loop_$bb15(in_$p38: ref, in_$p42: ref, in_$i43: i32, in_$i44: i1) returns (out_$p42: ref, out_$i43: i32, out_$i44: i1);
  modifies $M.41, assertsPassed;



implementation qxl_drm_freeze_loop_$bb4(in_$i16: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i8, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p18: ref) returns (out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i8, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p18: ref)
{

  entry:
    out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p18 := in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p25, in_$p26, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$p18;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_9405;

  $bb9:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$p18 := out_$p31;
    goto $bb9_dummy;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, in_$i16);
    goto corral_source_split_9424;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_9423;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p30, $mul.ref($sub.ref(0, 16), 1160)), $mul.ref(16, 1));
    goto corral_source_split_9422;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref(out_$p30, $mul.ref($sub.ref(0, 16), 1160));
    goto corral_source_split_9421;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_9420;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.6, out_$p28);
    goto corral_source_split_9419;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 1160)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_9418;

  $bb7:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_1482:
    goto corral_source_split_9416;

  SeqInstr_1481:
    assume assertsPassed;
    goto SeqInstr_1482;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.6, out_$p25);
    call {:si_unique_call 2263} devirtbounce.15(out_$p26, out_$p18);
    goto SeqInstr_1481;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p21, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_9415;

  $bb6:
    assume out_$i24 == 1;
    goto corral_source_split_9414;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i8.i1(out_$i23);
    goto corral_source_split_9412;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i8($M.6, out_$p22);
    goto corral_source_split_9411;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p18, $mul.ref(0, 1160)), $mul.ref(264, 1));
    goto corral_source_split_9410;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_9409;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.6, out_$p19);
    goto corral_source_split_9408;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 1160)), $mul.ref(744, 1));
    goto corral_source_split_9407;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p18 := qxl_drm_freeze_loop_$bb4(in_$i16, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p18);
    return;

  exit:
    return;
}



procedure qxl_drm_freeze_loop_$bb4(in_$i16: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i8, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p18: ref) returns (out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i8, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p18: ref);
  modifies $M.6, $M.46, $M.36, assertsPassed, $CurrAddr, $M.42, $M.52, $M.72, $M.38, $M.39, $M.35, $M.40, $M.37, $M.41, $M.44, $M.53, $M.43, $M.75, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.65, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64;



implementation qxl_draw_dirty_fb_loop_$bb53(in_$i6: i32, in_$i7: i32, in_$p105: ref, in_$p169: ref, in_$i170: i16, in_$i171: i32, in_$i172: i64, in_$p174: ref, in_$p175: ref, in_$i176: i16, in_$i177: i32, in_$i178: i64, in_$p180: ref, in_$p181: ref, in_$i182: i16, in_$i183: i32, in_$i184: i64, in_$p186: ref, in_$p187: ref, in_$i188: i16, in_$i189: i32, in_$i190: i64, in_$p192: ref, in_$i193: i32, in_$i194: i64, in_$p195: ref, in_$i196: i1, in_$i167: i32, in_$p168: ref) returns (out_$p169: ref, out_$i170: i16, out_$i171: i32, out_$i172: i64, out_$p174: ref, out_$p175: ref, out_$i176: i16, out_$i177: i32, out_$i178: i64, out_$p180: ref, out_$p181: ref, out_$i182: i16, out_$i183: i32, out_$i184: i64, out_$p186: ref, out_$p187: ref, out_$i188: i16, out_$i189: i32, out_$i190: i64, out_$p192: ref, out_$i193: i32, out_$i194: i64, out_$p195: ref, out_$i196: i1, out_$i167: i32, out_$p168: ref)
{

  entry:
    out_$p169, out_$i170, out_$i171, out_$i172, out_$p174, out_$p175, out_$i176, out_$i177, out_$i178, out_$p180, out_$p181, out_$i182, out_$i183, out_$i184, out_$p186, out_$p187, out_$i188, out_$i189, out_$i190, out_$p192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i167, out_$p168 := in_$p169, in_$i170, in_$i171, in_$i172, in_$p174, in_$p175, in_$i176, in_$i177, in_$i178, in_$p180, in_$p181, in_$i182, in_$i183, in_$i184, in_$p186, in_$p187, in_$i188, in_$i189, in_$i190, in_$p192, in_$i193, in_$i194, in_$p195, in_$i196, in_$i167, in_$p168;
    goto $bb53, exit;

  $bb53:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9767;

  $bb55:
    assume out_$i196 == 1;
    assume {:verifier.code 0} true;
    out_$i167, out_$p168 := out_$i193, out_$p195;
    goto $bb55_dummy;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    out_$i196 := $ult.i32(out_$i193, in_$i6);
    goto corral_source_split_9800;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    out_$p195 := $add.ref(out_$p168, $mul.ref(out_$i194, 8));
    goto corral_source_split_9799;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    out_$i194 := $sext.i32.i64(in_$i7);
    goto corral_source_split_9798;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    out_$i193 := $add.i32(out_$i167, 1);
    call {:si_unique_call 2347} {:cexpr "i"} boogie_si_record_i32(out_$i193);
    goto corral_source_split_9797;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p192, out_$i189);
    goto corral_source_split_9796;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    out_$p192 := $add.ref($add.ref(in_$p105, $mul.ref(out_$i190, 16)), $mul.ref(8, 1));
    goto corral_source_split_9795;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    goto corral_source_split_9794;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    out_$i190 := $sext.i32.i64(out_$i167);
    goto corral_source_split_9793;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    out_$i189 := $zext.i16.i32(out_$i188);
    goto corral_source_split_9792;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    out_$i188 := $load.i16($M.81, out_$p187);
    goto corral_source_split_9791;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref(out_$p168, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_9790;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p186, out_$i183);
    goto corral_source_split_9789;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    out_$p186 := $add.ref($add.ref(in_$p105, $mul.ref(out_$i184, 16)), $mul.ref(0, 1));
    goto corral_source_split_9788;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    goto corral_source_split_9787;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    out_$i184 := $sext.i32.i64(out_$i167);
    goto corral_source_split_9786;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    out_$i183 := $zext.i16.i32(out_$i182);
    goto corral_source_split_9785;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    out_$i182 := $load.i16($M.78, out_$p181);
    goto corral_source_split_9784;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref($add.ref(out_$p168, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_9783;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p180, out_$i177);
    goto corral_source_split_9782;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    out_$p180 := $add.ref($add.ref(in_$p105, $mul.ref(out_$i178, 16)), $mul.ref(12, 1));
    goto corral_source_split_9781;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    goto corral_source_split_9780;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    out_$i178 := $sext.i32.i64(out_$i167);
    goto corral_source_split_9779;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    out_$i177 := $zext.i16.i32(out_$i176);
    goto corral_source_split_9778;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    out_$i176 := $load.i16($M.80, out_$p175);
    goto corral_source_split_9777;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref(out_$p168, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_9776;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p174, out_$i171);
    goto corral_source_split_9775;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref(in_$p105, $mul.ref(out_$i172, 16)), $mul.ref(4, 1));
    goto corral_source_split_9774;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    goto corral_source_split_9773;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    out_$i172 := $sext.i32.i64(out_$i167);
    goto corral_source_split_9772;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    out_$i171 := $zext.i16.i32(out_$i170);
    goto corral_source_split_9771;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    out_$i170 := $load.i16($M.79, out_$p169);
    goto corral_source_split_9770;

  $bb54:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref(out_$p168, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_9769;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb55_dummy:
    call {:si_unique_call 1} out_$p169, out_$i170, out_$i171, out_$i172, out_$p174, out_$p175, out_$i176, out_$i177, out_$i178, out_$p180, out_$p181, out_$i182, out_$i183, out_$i184, out_$p186, out_$p187, out_$i188, out_$i189, out_$i190, out_$p192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i167, out_$p168 := qxl_draw_dirty_fb_loop_$bb53(in_$i6, in_$i7, in_$p105, out_$p169, out_$i170, out_$i171, out_$i172, out_$p174, out_$p175, out_$i176, out_$i177, out_$i178, out_$p180, out_$p181, out_$i182, out_$i183, out_$i184, out_$p186, out_$p187, out_$i188, out_$i189, out_$i190, out_$p192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i167, out_$p168);
    return;

  exit:
    return;
}



procedure qxl_draw_dirty_fb_loop_$bb53(in_$i6: i32, in_$i7: i32, in_$p105: ref, in_$p169: ref, in_$i170: i16, in_$i171: i32, in_$i172: i64, in_$p174: ref, in_$p175: ref, in_$i176: i16, in_$i177: i32, in_$i178: i64, in_$p180: ref, in_$p181: ref, in_$i182: i16, in_$i183: i32, in_$i184: i64, in_$p186: ref, in_$p187: ref, in_$i188: i16, in_$i189: i32, in_$i190: i64, in_$p192: ref, in_$i193: i32, in_$i194: i64, in_$p195: ref, in_$i196: i1, in_$i167: i32, in_$p168: ref) returns (out_$p169: ref, out_$i170: i16, out_$i171: i32, out_$i172: i64, out_$p174: ref, out_$p175: ref, out_$i176: i16, out_$i177: i32, out_$i178: i64, out_$p180: ref, out_$p181: ref, out_$i182: i16, out_$i183: i32, out_$i184: i64, out_$p186: ref, out_$p187: ref, out_$i188: i16, out_$i189: i32, out_$i190: i64, out_$p192: ref, out_$i193: i32, out_$i194: i64, out_$p195: ref, out_$i196: i1, out_$i167: i32, out_$p168: ref);
  modifies $M.6;



implementation qxl_draw_dirty_fb_loop_$bb8(in_$i6: i32, in_$i7: i32, in_$p47: ref, in_$i48: i16, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$p52: ref, in_$i53: i16, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$p57: ref, in_$i58: i16, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$p62: ref, in_$i63: i16, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i32, in_$i68: i64, in_$p69: ref, in_$i70: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$p46: ref, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i32) returns (out_$p47: ref, out_$i48: i16, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$p52: ref, out_$i53: i16, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$p57: ref, out_$i58: i16, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$p62: ref, out_$i63: i16, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i32, out_$i68: i64, out_$p69: ref, out_$i70: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$p46: ref, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i32)
{

  entry:
    out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i71, out_$i72, out_$i73, out_$i74 := in_$p47, in_$i48, in_$i49, in_$i50, in_$i51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i59, in_$i60, in_$i61, in_$p62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$p69, in_$i70, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p46, in_$i71, in_$i72, in_$i73, in_$i74;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9586;

  $bb22:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46 := out_$i66, out_$i61, out_$i56, out_$i51, out_$i67, out_$p69;
    goto $bb22_dummy;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    out_$i71, out_$i72, out_$i73, out_$i74 := out_$i51, out_$i56, out_$i61, out_$i66;
    assume true;
    goto $bb22;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    out_$i70 := $ult.i32(out_$i67, in_$i6);
    goto corral_source_split_9631;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref(out_$p46, $mul.ref(out_$i68, 8));
    goto corral_source_split_9630;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(in_$i7);
    goto corral_source_split_9629;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i45, 1);
    call {:si_unique_call 2324} {:cexpr "i"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_9628;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_9627;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i64;
    goto $bb21;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i41;
    goto $bb21;

  $bb19:
    assume out_$i65 == 1;
    goto corral_source_split_9623;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    out_$i65 := $sgt.i32(out_$i41, out_$i64);
    goto corral_source_split_9621;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i16.i32(out_$i63);
    call {:si_unique_call 2323} {:cexpr "__max2___0"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_9620;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i16($M.81, out_$p62);
    goto corral_source_split_9619;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p46, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_9618;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_9617;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i59;
    goto $bb18;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i42;
    goto $bb18;

  $bb16:
    assume out_$i60 == 1;
    goto corral_source_split_9613;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i42, out_$i59);
    goto corral_source_split_9611;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i16.i32(out_$i58);
    call {:si_unique_call 2322} {:cexpr "__min2___0"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_9610;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i16($M.78, out_$p57);
    goto corral_source_split_9609;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p46, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_9608;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_9607;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    out_$i56 := out_$i54;
    goto $bb15;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    out_$i56 := out_$i43;
    goto $bb15;

  $bb13:
    assume out_$i55 == 1;
    goto corral_source_split_9603;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    out_$i55 := $sgt.i32(out_$i43, out_$i54);
    goto corral_source_split_9601;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i16.i32(out_$i53);
    call {:si_unique_call 2321} {:cexpr "__max2"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_9600;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i16($M.80, out_$p52);
    goto corral_source_split_9599;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p46, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_9598;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_9597;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i49;
    goto $bb12;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i44;
    goto $bb12;

  $bb10:
    assume out_$i50 == 1;
    goto corral_source_split_9593;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    out_$i50 := $slt.i32(out_$i44, out_$i49);
    goto corral_source_split_9591;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i16.i32(out_$i48);
    call {:si_unique_call 2320} {:cexpr "__min2"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_9590;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i16($M.79, out_$p47);
    goto corral_source_split_9589;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p46, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_9588;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11:
    assume !(out_$i50 == 1);
    goto corral_source_split_9595;

  $bb14:
    assume !(out_$i55 == 1);
    goto corral_source_split_9605;

  $bb17:
    assume !(out_$i60 == 1);
    goto corral_source_split_9615;

  $bb20:
    assume !(out_$i65 == 1);
    goto corral_source_split_9625;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i71, out_$i72, out_$i73, out_$i74 := qxl_draw_dirty_fb_loop_$bb8(in_$i6, in_$i7, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i71, out_$i72, out_$i73, out_$i74);
    return;

  exit:
    return;
}



procedure qxl_draw_dirty_fb_loop_$bb8(in_$i6: i32, in_$i7: i32, in_$p47: ref, in_$i48: i16, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$p52: ref, in_$i53: i16, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$p57: ref, in_$i58: i16, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$p62: ref, in_$i63: i16, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i32, in_$i68: i64, in_$p69: ref, in_$i70: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$p46: ref, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i32) returns (out_$p47: ref, out_$i48: i16, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$p52: ref, out_$i53: i16, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$p57: ref, out_$i58: i16, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$p62: ref, out_$i63: i16, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i32, out_$i68: i64, out_$p69: ref, out_$i70: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$p46: ref, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i32);



implementation qxl_send_monitors_config_loop_$bb11(in_$p0: ref, in_$p16: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$i32: i32, in_$p33: ref, in_$i51: i32, in_$p52: ref, in_$p53: ref, in_$i54: i16, in_$i55: i32, in_$i56: i1, in_$i22: i32) returns (out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$i32: i32, out_$p33: ref, out_$i51: i32, out_$p52: ref, out_$p53: ref, out_$i54: i16, out_$i55: i32, out_$i56: i1, out_$i22: i32)
{

  entry:
    out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i32, out_$p33, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i22 := in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$p40, in_$i41, in_$i42, in_$i32, in_$p33, in_$i51, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i22;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_10646;

  $bb23:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i22 := out_$i51;
    goto $bb23_dummy;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    out_$i56 := $slt.i32(out_$i51, out_$i55);
    goto corral_source_split_10689;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i16.i32(out_$i54);
    goto corral_source_split_10688;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i16($M.6, out_$p53);
    goto corral_source_split_10687;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p52, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10686;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.6, in_$p16);
    goto corral_source_split_10685;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i32(out_$i22, 1);
    call {:si_unique_call 2545} {:cexpr "i"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_10684;

  $bb21:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    out_$i32, out_$p33 := out_$i22, out_$p28;
    assume true;
    goto $bb21;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    out_$i42 := $ugt.i32(out_$i41, 8192);
    goto corral_source_split_10682;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.6, out_$p40);
    goto corral_source_split_10681;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p26, $mul.ref(out_$i27, 28)), $mul.ref(12, 1));
    goto corral_source_split_10680;

  $bb19:
    assume !(out_$i39 == 1);
    goto corral_source_split_10679;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    out_$i32, out_$p33 := out_$i22, out_$p28;
    assume true;
    goto $bb19;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    out_$i39 := $ugt.i32(out_$i38, 8192);
    goto corral_source_split_10677;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.6, out_$p37);
    goto corral_source_split_10676;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p26, $mul.ref(out_$i27, 28)), $mul.ref(8, 1));
    goto corral_source_split_10675;

  $bb17:
    assume !(out_$i36 == 1);
    goto corral_source_split_10674;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    out_$i32, out_$p33 := out_$i22, out_$p28;
    assume true;
    goto $bb17;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    out_$i36 := $ugt.i32(out_$i35, 8192);
    goto corral_source_split_10672;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.6, out_$p34);
    goto corral_source_split_10671;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p26, $mul.ref(out_$i27, 28)), $mul.ref(16, 1));
    goto corral_source_split_10670;

  $bb15:
    assume !(out_$i31 == 1);
    goto corral_source_split_10669;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    out_$i32, out_$p33 := out_$i22, out_$p28;
    assume true;
    goto $bb15;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    out_$i31 := $ugt.i32(out_$i30, 8192);
    goto corral_source_split_10656;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.6, out_$p29);
    goto corral_source_split_10655;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p26, $mul.ref(out_$i27, 28)), $mul.ref(20, 1));
    goto corral_source_split_10654;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref(out_$p26, $mul.ref(out_$i27, 28));
    goto corral_source_split_10653;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i22);
    goto corral_source_split_10652;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_10651;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_10650;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.6, out_$p23);
    goto corral_source_split_10649;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_10648;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i32, out_$p33, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i22 := qxl_send_monitors_config_loop_$bb11(in_$p0, in_$p16, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i32, out_$p33, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i22);
    return;

  exit:
    return;
}



procedure qxl_send_monitors_config_loop_$bb11(in_$p0: ref, in_$p16: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$i32: i32, in_$p33: ref, in_$i51: i32, in_$p52: ref, in_$p53: ref, in_$i54: i16, in_$i55: i32, in_$i56: i1, in_$i22: i32) returns (out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$i32: i32, out_$p33: ref, out_$i51: i32, out_$p52: ref, out_$p53: ref, out_$i54: i16, out_$i55: i32, out_$i56: i1, out_$i22: i32);



implementation qxl_deferred_io_loop_$bb4(in_$i12: i64, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$i24: i64, in_$i25: i1, in_$i26: i64, in_$i27: i1, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$i39: i64, in_$i40: i64) returns (out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$i24: i64, out_$i25: i1, out_$i26: i64, out_$i27: i1, out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$i39: i64, out_$i40: i64)
{

  entry:
    out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p16, out_$i17, out_$i18, out_$i39, out_$i40 := in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$p16, in_$i17, in_$i18, in_$i39, in_$i40;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12284;

  $bb12:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$p16, out_$i17, out_$i18 := out_$p34, out_$i28, out_$i26;
    goto $bb12_dummy;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    out_$i39, out_$i40 := out_$i26, out_$i28;
    assume true;
    goto $bb12;

  corral_source_split_12313:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i37, in_$i12);
    goto corral_source_split_12314;

  corral_source_split_12312:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_12313;

  corral_source_split_12311:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(out_$p35);
    goto corral_source_split_12312;

  corral_source_split_12310:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p33, $mul.ref($sub.ref(0, 32), 64)), $mul.ref(32, 1));
    goto corral_source_split_12311;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(out_$p33, $mul.ref($sub.ref(0, 32), 64));
    goto corral_source_split_12310;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_12309;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.6, out_$p31);
    goto corral_source_split_12308;

  corral_source_split_12306:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p30, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12307;

  corral_source_split_12305:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_12306;

  corral_source_split_12304:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p16, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_12305;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_12304;

  corral_source_split_12302:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i24;
    goto $bb11;

  corral_source_split_12300:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i17;
    goto $bb11;

  $bb9:
    assume out_$i27 == 1;
    goto corral_source_split_12300;

  corral_source_split_12298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_12297:
    assume {:verifier.code 0} true;
    out_$i27 := $ugt.i64(out_$i17, out_$i24);
    goto corral_source_split_12298;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_12297;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i23;
    goto $bb8;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i18;
    goto $bb8;

  $bb6:
    assume out_$i25 == 1;
    goto corral_source_split_12293;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    out_$i25 := $ult.i64(out_$i18, out_$i23);
    goto corral_source_split_12291;

  corral_source_split_12289:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i64(out_$i23, 4095);
    call {:si_unique_call 2865} {:cexpr "end"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_12290;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    out_$i23 := $shl.i64(out_$i22, 12);
    call {:si_unique_call 2864} {:cexpr "start"} boogie_si_record_i64(out_$i23);
    goto corral_source_split_12289;

  corral_source_split_12287:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i64($M.6, out_$p21);
    goto corral_source_split_12288;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_12287;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_12286;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume !(out_$i25 == 1);
    goto corral_source_split_12295;

  $bb10:
    assume !(out_$i27 == 1);
    goto corral_source_split_12302;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p16, out_$i17, out_$i18, out_$i39, out_$i40 := qxl_deferred_io_loop_$bb4(in_$i12, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p16, out_$i17, out_$i18, out_$i39, out_$i40);
    return;

  exit:
    return;
}



procedure qxl_deferred_io_loop_$bb4(in_$i12: i64, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$i24: i64, in_$i25: i1, in_$i26: i64, in_$i27: i1, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$i39: i64, in_$i40: i64) returns (out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$i24: i64, out_$i25: i1, out_$i26: i64, out_$i27: i1, out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$i39: i64, out_$i40: i64);



implementation qxl_debugfs_buffers_info_loop_$bb4(in_$p0: ref, in_$i21: i64, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$i43: i32, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p23: ref, in_vslice_dummy_var_220: i32) returns (out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$i43: i32, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p23: ref, out_vslice_dummy_var_220: i32)
{

  entry:
    out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$p42, out_$i43, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p23, out_vslice_dummy_var_220 := in_$p25, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$p40, in_$i41, in_$p42, in_$i43, in_$p46, in_$p47, in_$p48, in_$p49, in_$i50, in_$i51, in_$p23, in_vslice_dummy_var_220;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_12447;

  $bb18:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$p23 := out_$p47;
    goto $bb18_dummy;

  corral_source_split_12488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i50, in_$i21);
    goto corral_source_split_12488;

  corral_source_split_12486:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p49);
    goto corral_source_split_12487;

  corral_source_split_12485:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p48, $mul.ref(0, 1312)), $mul.ref(0, 1));
    goto corral_source_split_12486;

  corral_source_split_12484:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_12485;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.6, out_$p46);
    goto corral_source_split_12484;

  corral_source_split_12482:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref($add.ref(out_$p23, $mul.ref(0, 1312)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_12483;

  corral_source_split_12481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2898} out_vslice_dummy_var_220 := seq_printf.ref.ref.i64.i32.i32(in_$p0, .str.177, out_$i41, out_$i43, out_$i38);
    goto corral_source_split_12482;

  corral_source_split_12480:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.6, out_$p42);
    goto corral_source_split_12481;

  corral_source_split_12479:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p23, $mul.ref(0, 1312)), $mul.ref(992, 1));
    goto corral_source_split_12480;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i64($M.6, out_$p40);
    goto corral_source_split_12479;

  corral_source_split_12477:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(out_$p23, $mul.ref(0, 1312)), $mul.ref(1016, 1)), $mul.ref(200, 1));
    goto corral_source_split_12478;

  SeqInstr_1938:
    goto corral_source_split_12477;

  SeqInstr_1937:
    assume assertsPassed;
    goto SeqInstr_1938;

  corral_source_split_12476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2897} rcu_read_unlock();
    goto SeqInstr_1937;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_12476;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    out_$i38 := 0;
    goto $bb17;

  corral_source_split_12472:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i37;
    goto $bb17;

  corral_source_split_12471:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.6, out_$p36);
    goto corral_source_split_12472;

  corral_source_split_12470:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p28, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12471;

  $bb15:
    assume out_$i35 == 1;
    goto corral_source_split_12470;

  corral_source_split_12468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_12467:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_12468;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_12467;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_12465:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_12464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2896} lockdep_rcu_suspicious(.str.175, 65, .str.176);
    goto corral_source_split_12465;

  $bb11:
    assume out_$i33 == 1;
    goto corral_source_split_12464;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_12461:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i32, 0);
    goto corral_source_split_12462;

  corral_source_split_12460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2894} out_$i32 := rcu_read_lock_held();
    call {:si_unique_call 2895} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_12461;

  $bb10:
    assume !(out_$i31 == 1);
    goto corral_source_split_12460;

  corral_source_split_12458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    out_$i31 := $trunc.i8.i1(1);
    goto corral_source_split_12458;

  $bb6:
    assume out_$i30 == 1;
    goto corral_source_split_12457;

  corral_source_split_12455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_12455;

  corral_source_split_12453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2892} out_$i29 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 2893} {:cexpr "tmp"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_12454;

  corral_source_split_12452:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.6, out_$p27);
    goto corral_source_split_12453;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 256)), $mul.ref(240, 1));
    goto corral_source_split_12452;

  corral_source_split_12450:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.6, out_$p25);
    goto corral_source_split_12451;

  corral_source_split_12449:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p23, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(448, 1));
    goto corral_source_split_12450;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2891} rcu_read_lock();
    goto corral_source_split_12449;

  corral_source_split_12447:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i31 == 1;
    goto $bb8;

  $bb16:
    assume !(out_$i35 == 1);
    goto corral_source_split_12474;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$p42, out_$i43, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p23, out_vslice_dummy_var_220 := qxl_debugfs_buffers_info_loop_$bb4(in_$p0, in_$i21, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$p42, out_$i43, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p23, out_vslice_dummy_var_220);
    return;

  exit:
    return;
}



procedure qxl_debugfs_buffers_info_loop_$bb4(in_$p0: ref, in_$i21: i64, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$i43: i32, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p23: ref, in_vslice_dummy_var_220: i32) returns (out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$i43: i32, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p23: ref, out_vslice_dummy_var_220: i32);
  modifies $M.115, assertsPassed;



implementation qxl_fence_wait_loop_$bb4(in_$p0: ref, in_$i4: i64, in_$p8: ref, in_$i13: i8, in_$i17: i32, in_$i18: i1, in_$i19: i8, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i8, in_$i25: i1, in_$i26: i1, in_$i27: i8, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i64, in_$i33: i64, in_$i34: i1, in_$i36: i1, in_$i37: i1, in_$i38: i32, in_$i47: i32, in_$i48: i1, in_$i49: i8, in_$i50: i1, in_$i55: i1, in_$i56: i8, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i1, in_$i61: i8, in_$i62: i1, in_$i63: i1, in_$i64: i8, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$i68: i1, in_$i69: i8, in_$i70: i1, in_$i71: i1, in_$i72: i8, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i1, in_$i77: i8, in_$i78: i1, in_$i79: i1, in_$i80: i8, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_$i84: i1, in_$i85: i8, in_$i86: i1, in_$i87: i1, in_$i88: i8, in_$i89: i1, in_$i90: i32, in_$i91: i1, in_$i92: i1, in_$i93: i8, in_$i94: i1, in_$i95: i1, in_$i96: i8, in_$i97: i1, in_$i98: i32, in_$i99: i1, in_$i100: i1, in_$i101: i8, in_$i102: i1, in_$i103: i1, in_$i104: i8, in_$i105: i1, in_$i106: i32, in_$i107: i1, in_$i108: i1, in_$i109: i8, in_$i110: i1, in_$i111: i1, in_$i112: i8, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i1, in_$i117: i8, in_$i118: i1, in_$i119: i1, in_$i120: i8, in_$i121: i1, in_$i122: i32, in_$i123: i1, in_$i124: i1, in_$i125: i8, in_$i126: i1, in_$i127: i1, in_$i128: i8, in_$i129: i1, in_$i130: i32, in_$i131: i1, in_$i132: i1, in_$i133: i8, in_$i134: i1) returns (out_$i17: i32, out_$i18: i1, out_$i19: i8, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i8, out_$i25: i1, out_$i26: i1, out_$i27: i8, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i64, out_$i33: i64, out_$i34: i1, out_$i36: i1, out_$i37: i1, out_$i38: i32, out_$i47: i32, out_$i48: i1, out_$i49: i8, out_$i50: i1, out_$i55: i1, out_$i56: i8, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i1, out_$i61: i8, out_$i62: i1, out_$i63: i1, out_$i64: i8, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$i68: i1, out_$i69: i8, out_$i70: i1, out_$i71: i1, out_$i72: i8, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i1, out_$i77: i8, out_$i78: i1, out_$i79: i1, out_$i80: i8, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_$i84: i1, out_$i85: i8, out_$i86: i1, out_$i87: i1, out_$i88: i8, out_$i89: i1, out_$i90: i32, out_$i91: i1, out_$i92: i1, out_$i93: i8, out_$i94: i1, out_$i95: i1, out_$i96: i8, out_$i97: i1, out_$i98: i32, out_$i99: i1, out_$i100: i1, out_$i101: i8, out_$i102: i1, out_$i103: i1, out_$i104: i8, out_$i105: i1, out_$i106: i32, out_$i107: i1, out_$i108: i1, out_$i109: i8, out_$i110: i1, out_$i111: i1, out_$i112: i8, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i1, out_$i117: i8, out_$i118: i1, out_$i119: i1, out_$i120: i8, out_$i121: i1, out_$i122: i32, out_$i123: i1, out_$i124: i1, out_$i125: i8, out_$i126: i1, out_$i127: i1, out_$i128: i8, out_$i129: i1, out_$i130: i32, out_$i131: i1, out_$i132: i1, out_$i133: i8, out_$i134: i1)
{

  entry:
    out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i36, out_$i37, out_$i38, out_$i47, out_$i48, out_$i49, out_$i50, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134 := in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i36, in_$i37, in_$i38, in_$i47, in_$i48, in_$i49, in_$i50, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb45:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := out_$i47;
    goto $bb45_dummy;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    out_$i50 := $trunc.i8.i1(out_$i49);
    goto corral_source_split_12618;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i1.i8(out_$i48);
    call {:si_unique_call 2931} {:cexpr "tmp"} boogie_si_record_i8(out_$i49);
    goto corral_source_split_12617;

  corral_source_split_12615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2930} out_$i48 := fence_is_signaled(in_$p0);
    goto corral_source_split_12616;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i17, 1);
    call {:si_unique_call 2929} {:cexpr "sc"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_12615;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb40:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb41;

  $bb43:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb41;

  corral_source_split_12603:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i17;
    assume true;
    goto $bb43;

  corral_source_split_12602:
    assume {:verifier.code 0} true;
    out_$i37 := $sgt.i32(out_$i17, 300);
    goto corral_source_split_12603;

  $bb39:
    assume out_$i36 == 1;
    goto corral_source_split_12602;

  corral_source_split_12600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i8.i1(in_$i13);
    goto corral_source_split_12600;

  $bb36:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_12594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_12593:
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i64(out_$i33, 0);
    goto corral_source_split_12594;

  corral_source_split_12592:
    assume {:verifier.code 0} true;
    out_$i33 := $sub.i64(in_$i4, out_$i32);
    goto corral_source_split_12593;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.6, jiffies);
    goto corral_source_split_12592;

  $bb33:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_12590:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_12589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2927} usleep_range(500, 1000);
    goto corral_source_split_12590;

  $bb32:
    assume out_$i31 == 1;
    goto corral_source_split_12589;

  corral_source_split_12584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i31 := $sgt.i32(out_$i17, 2);
    goto corral_source_split_12584;

  $bb30:
    assume {:verifier.code 0} true;
    assume out_$i30 == 1;
    goto $bb28;

  $bb27:
    assume {:verifier.code 0} true;
    assume out_$i29 == 1;
    goto $bb28;

  corral_source_split_12582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb29;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i29 := $trunc.i8.i1(in_$i13);
    goto corral_source_split_12582;

  $bb25:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_12570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_12569:
    assume {:verifier.code 0} true;
    out_$i28 := $trunc.i8.i1(out_$i27);
    goto corral_source_split_12570;

  corral_source_split_12568:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i1.i8(out_$i26);
    call {:si_unique_call 2923} {:cexpr "tmp___3"} boogie_si_record_i8(out_$i27);
    goto corral_source_split_12569;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2922} out_$i26 := fence_is_signaled(in_$p0);
    goto corral_source_split_12568;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb143:
    assume {:verifier.code 0} true;
    assume out_$i131 == 1;
    goto $bb14;

  $bb133:
    assume {:verifier.code 0} true;
    assume out_$i123 == 1;
    goto $bb14;

  $bb123:
    assume {:verifier.code 0} true;
    assume out_$i115 == 1;
    goto $bb14;

  $bb113:
    assume {:verifier.code 0} true;
    assume out_$i107 == 1;
    goto $bb14;

  $bb103:
    assume {:verifier.code 0} true;
    assume out_$i99 == 1;
    goto $bb14;

  $bb93:
    assume {:verifier.code 0} true;
    assume out_$i91 == 1;
    goto $bb14;

  $bb83:
    assume {:verifier.code 0} true;
    assume out_$i83 == 1;
    goto $bb14;

  $bb73:
    assume {:verifier.code 0} true;
    assume out_$i75 == 1;
    goto $bb14;

  $bb63:
    assume {:verifier.code 0} true;
    assume out_$i67 == 1;
    goto $bb14;

  $bb53:
    assume {:verifier.code 0} true;
    assume out_$i59 == 1;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i22 == 1;
    goto $bb14;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  corral_source_split_12565:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_12566;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_12565;

  $bb11:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i21 := 1;
    goto $bb12;

  corral_source_split_12563:
    assume {:verifier.code 0} true;
    out_$i21 := 0;
    goto $bb12;

  $bb10:
    assume out_$i20 == 1;
    goto corral_source_split_12563;

  corral_source_split_12561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_12560:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i8.i1(out_$i19);
    goto corral_source_split_12561;

  corral_source_split_12559:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i1.i8(out_$i18);
    call {:si_unique_call 2921} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i19);
    goto corral_source_split_12560;

  SeqInstr_1950:
    goto corral_source_split_12559;

  SeqInstr_1949:
    assume assertsPassed;
    goto SeqInstr_1950;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2920} out_$i18 := qxl_queue_garbage_collect(in_$p8, 1);
    goto SeqInstr_1949;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_12557:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2919} qxl_io_notify_oom(in_$p8);
    goto corral_source_split_12557;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_12626:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 0);
    goto corral_source_split_12627;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_12626;

  $bb51:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    out_$i58 := 1;
    goto $bb52;

  corral_source_split_12624:
    assume {:verifier.code 0} true;
    out_$i58 := 0;
    goto $bb52;

  $bb50:
    assume out_$i57 == 1;
    goto corral_source_split_12624;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_12577:
    assume {:verifier.code 0} true;
    out_$i57 := $trunc.i8.i1(out_$i56);
    goto corral_source_split_12578;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i1.i8(out_$i55);
    goto corral_source_split_12577;

  SeqInstr_1953:
    goto corral_source_split_12576;

  SeqInstr_1952:
    assume assertsPassed;
    goto SeqInstr_1953;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2926} out_$i55 := qxl_queue_garbage_collect(in_$p8, 1);
    goto SeqInstr_1952;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_12574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_12573:
    assume {:verifier.code 0} true;
    out_$i25 := $trunc.i8.i1(out_$i24);
    goto corral_source_split_12574;

  corral_source_split_12572:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i8(out_$i23);
    call {:si_unique_call 2925} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i24);
    goto corral_source_split_12573;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2924} out_$i23 := fence_is_signaled(in_$p0);
    goto corral_source_split_12572;

  $bb15:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i66, 0);
    goto corral_source_split_12640;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_12639;

  $bb61:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    out_$i66 := 1;
    goto $bb62;

  corral_source_split_12637:
    assume {:verifier.code 0} true;
    out_$i66 := 0;
    goto $bb62;

  $bb60:
    assume out_$i65 == 1;
    goto corral_source_split_12637;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    out_$i65 := $trunc.i8.i1(out_$i64);
    goto corral_source_split_12635;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i1.i8(out_$i63);
    goto corral_source_split_12634;

  SeqInstr_1956:
    goto corral_source_split_12633;

  SeqInstr_1955:
    assume assertsPassed;
    goto SeqInstr_1956;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2933} out_$i63 := qxl_queue_garbage_collect(in_$p8, 1);
    goto SeqInstr_1955;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb57:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_12631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57;

  corral_source_split_12630:
    assume {:verifier.code 0} true;
    out_$i62 := $trunc.i8.i1(out_$i61);
    goto corral_source_split_12631;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i1.i8(out_$i60);
    goto corral_source_split_12630;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2932} out_$i60 := fence_is_signaled(in_$p0);
    goto corral_source_split_12629;

  $bb54:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_12653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_12652:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i32(out_$i74, 0);
    goto corral_source_split_12653;

  $bb72:
    assume {:verifier.code 0} true;
    goto corral_source_split_12652;

  $bb71:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    out_$i74 := 1;
    goto $bb72;

  corral_source_split_12650:
    assume {:verifier.code 0} true;
    out_$i74 := 0;
    goto $bb72;

  $bb70:
    assume out_$i73 == 1;
    goto corral_source_split_12650;

  corral_source_split_12648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_12647:
    assume {:verifier.code 0} true;
    out_$i73 := $trunc.i8.i1(out_$i72);
    goto corral_source_split_12648;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i1.i8(out_$i71);
    goto corral_source_split_12647;

  SeqInstr_1959:
    goto corral_source_split_12646;

  SeqInstr_1958:
    assume assertsPassed;
    goto SeqInstr_1959;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2935} out_$i71 := qxl_queue_garbage_collect(in_$p8, 1);
    goto SeqInstr_1958;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb67:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_12644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    out_$i70 := $trunc.i8.i1(out_$i69);
    goto corral_source_split_12644;

  corral_source_split_12642:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i1.i8(out_$i68);
    goto corral_source_split_12643;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2934} out_$i68 := fence_is_signaled(in_$p0);
    goto corral_source_split_12642;

  $bb64:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_12666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_12665:
    assume {:verifier.code 0} true;
    out_$i83 := $ne.i32(out_$i82, 0);
    goto corral_source_split_12666;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_12665;

  $bb81:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    out_$i82 := 1;
    goto $bb82;

  corral_source_split_12663:
    assume {:verifier.code 0} true;
    out_$i82 := 0;
    goto $bb82;

  $bb80:
    assume out_$i81 == 1;
    goto corral_source_split_12663;

  corral_source_split_12661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    out_$i81 := $trunc.i8.i1(out_$i80);
    goto corral_source_split_12661;

  corral_source_split_12659:
    assume {:verifier.code 0} true;
    out_$i80 := $zext.i1.i8(out_$i79);
    goto corral_source_split_12660;

  SeqInstr_1962:
    goto corral_source_split_12659;

  SeqInstr_1961:
    assume assertsPassed;
    goto SeqInstr_1962;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2937} out_$i79 := qxl_queue_garbage_collect(in_$p8, 1);
    goto SeqInstr_1961;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb77:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_12657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77;

  corral_source_split_12656:
    assume {:verifier.code 0} true;
    out_$i78 := $trunc.i8.i1(out_$i77);
    goto corral_source_split_12657;

  corral_source_split_12655:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i1.i8(out_$i76);
    goto corral_source_split_12656;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2936} out_$i76 := fence_is_signaled(in_$p0);
    goto corral_source_split_12655;

  $bb74:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_12679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_12678:
    assume {:verifier.code 0} true;
    out_$i91 := $ne.i32(out_$i90, 0);
    goto corral_source_split_12679;

  $bb92:
    assume {:verifier.code 0} true;
    goto corral_source_split_12678;

  $bb91:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    out_$i90 := 1;
    goto $bb92;

  corral_source_split_12676:
    assume {:verifier.code 0} true;
    out_$i90 := 0;
    goto $bb92;

  $bb90:
    assume out_$i89 == 1;
    goto corral_source_split_12676;

  corral_source_split_12674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_12673:
    assume {:verifier.code 0} true;
    out_$i89 := $trunc.i8.i1(out_$i88);
    goto corral_source_split_12674;

  corral_source_split_12672:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i1.i8(out_$i87);
    goto corral_source_split_12673;

  SeqInstr_1965:
    goto corral_source_split_12672;

  SeqInstr_1964:
    assume assertsPassed;
    goto SeqInstr_1965;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2939} out_$i87 := qxl_queue_garbage_collect(in_$p8, 1);
    goto SeqInstr_1964;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb87:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_12670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87;

  corral_source_split_12669:
    assume {:verifier.code 0} true;
    out_$i86 := $trunc.i8.i1(out_$i85);
    goto corral_source_split_12670;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i1.i8(out_$i84);
    goto corral_source_split_12669;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2938} out_$i84 := fence_is_signaled(in_$p0);
    goto corral_source_split_12668;

  $bb84:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_12692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_12691:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i32(out_$i98, 0);
    goto corral_source_split_12692;

  $bb102:
    assume {:verifier.code 0} true;
    goto corral_source_split_12691;

  $bb101:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    out_$i98 := 1;
    goto $bb102;

  corral_source_split_12689:
    assume {:verifier.code 0} true;
    out_$i98 := 0;
    goto $bb102;

  $bb100:
    assume out_$i97 == 1;
    goto corral_source_split_12689;

  corral_source_split_12687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_12686:
    assume {:verifier.code 0} true;
    out_$i97 := $trunc.i8.i1(out_$i96);
    goto corral_source_split_12687;

  corral_source_split_12685:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i1.i8(out_$i95);
    goto corral_source_split_12686;

  SeqInstr_1968:
    goto corral_source_split_12685;

  SeqInstr_1967:
    assume assertsPassed;
    goto SeqInstr_1968;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2941} out_$i95 := qxl_queue_garbage_collect(in_$p8, 1);
    goto SeqInstr_1967;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb97:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_12683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97;

  corral_source_split_12682:
    assume {:verifier.code 0} true;
    out_$i94 := $trunc.i8.i1(out_$i93);
    goto corral_source_split_12683;

  corral_source_split_12681:
    assume {:verifier.code 0} true;
    out_$i93 := $zext.i1.i8(out_$i92);
    goto corral_source_split_12682;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2940} out_$i92 := fence_is_signaled(in_$p0);
    goto corral_source_split_12681;

  $bb94:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_12705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_12704:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i32(out_$i106, 0);
    goto corral_source_split_12705;

  $bb112:
    assume {:verifier.code 0} true;
    goto corral_source_split_12704;

  $bb111:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    out_$i106 := 1;
    goto $bb112;

  corral_source_split_12702:
    assume {:verifier.code 0} true;
    out_$i106 := 0;
    goto $bb112;

  $bb110:
    assume out_$i105 == 1;
    goto corral_source_split_12702;

  corral_source_split_12700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_12699:
    assume {:verifier.code 0} true;
    out_$i105 := $trunc.i8.i1(out_$i104);
    goto corral_source_split_12700;

  corral_source_split_12698:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i1.i8(out_$i103);
    goto corral_source_split_12699;

  SeqInstr_1971:
    goto corral_source_split_12698;

  SeqInstr_1970:
    assume assertsPassed;
    goto SeqInstr_1971;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2943} out_$i103 := qxl_queue_garbage_collect(in_$p8, 1);
    goto SeqInstr_1970;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb107:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_12696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107;

  corral_source_split_12695:
    assume {:verifier.code 0} true;
    out_$i102 := $trunc.i8.i1(out_$i101);
    goto corral_source_split_12696;

  corral_source_split_12694:
    assume {:verifier.code 0} true;
    out_$i101 := $zext.i1.i8(out_$i100);
    goto corral_source_split_12695;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2942} out_$i100 := fence_is_signaled(in_$p0);
    goto corral_source_split_12694;

  $bb104:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_12718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_12717:
    assume {:verifier.code 0} true;
    out_$i115 := $ne.i32(out_$i114, 0);
    goto corral_source_split_12718;

  $bb122:
    assume {:verifier.code 0} true;
    goto corral_source_split_12717;

  $bb121:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    out_$i114 := 1;
    goto $bb122;

  corral_source_split_12715:
    assume {:verifier.code 0} true;
    out_$i114 := 0;
    goto $bb122;

  $bb120:
    assume out_$i113 == 1;
    goto corral_source_split_12715;

  corral_source_split_12713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  corral_source_split_12712:
    assume {:verifier.code 0} true;
    out_$i113 := $trunc.i8.i1(out_$i112);
    goto corral_source_split_12713;

  corral_source_split_12711:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i1.i8(out_$i111);
    goto corral_source_split_12712;

  SeqInstr_1974:
    goto corral_source_split_12711;

  SeqInstr_1973:
    assume assertsPassed;
    goto SeqInstr_1974;

  $bb119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2945} out_$i111 := qxl_queue_garbage_collect(in_$p8, 1);
    goto SeqInstr_1973;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb117:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_12709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117;

  corral_source_split_12708:
    assume {:verifier.code 0} true;
    out_$i110 := $trunc.i8.i1(out_$i109);
    goto corral_source_split_12709;

  corral_source_split_12707:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i1.i8(out_$i108);
    goto corral_source_split_12708;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2944} out_$i108 := fence_is_signaled(in_$p0);
    goto corral_source_split_12707;

  $bb114:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_12731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_12730:
    assume {:verifier.code 0} true;
    out_$i123 := $ne.i32(out_$i122, 0);
    goto corral_source_split_12731;

  $bb132:
    assume {:verifier.code 0} true;
    goto corral_source_split_12730;

  $bb131:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    out_$i122 := 1;
    goto $bb132;

  corral_source_split_12728:
    assume {:verifier.code 0} true;
    out_$i122 := 0;
    goto $bb132;

  $bb130:
    assume out_$i121 == 1;
    goto corral_source_split_12728;

  corral_source_split_12726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_12725:
    assume {:verifier.code 0} true;
    out_$i121 := $trunc.i8.i1(out_$i120);
    goto corral_source_split_12726;

  corral_source_split_12724:
    assume {:verifier.code 0} true;
    out_$i120 := $zext.i1.i8(out_$i119);
    goto corral_source_split_12725;

  SeqInstr_1977:
    goto corral_source_split_12724;

  SeqInstr_1976:
    assume assertsPassed;
    goto SeqInstr_1977;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2947} out_$i119 := qxl_queue_garbage_collect(in_$p8, 1);
    goto SeqInstr_1976;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb127:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_12722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127;

  corral_source_split_12721:
    assume {:verifier.code 0} true;
    out_$i118 := $trunc.i8.i1(out_$i117);
    goto corral_source_split_12722;

  corral_source_split_12720:
    assume {:verifier.code 0} true;
    out_$i117 := $zext.i1.i8(out_$i116);
    goto corral_source_split_12721;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2946} out_$i116 := fence_is_signaled(in_$p0);
    goto corral_source_split_12720;

  $bb124:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_12744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_12743:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i32(out_$i130, 0);
    goto corral_source_split_12744;

  $bb142:
    assume {:verifier.code 0} true;
    goto corral_source_split_12743;

  $bb141:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    out_$i130 := 1;
    goto $bb142;

  corral_source_split_12741:
    assume {:verifier.code 0} true;
    out_$i130 := 0;
    goto $bb142;

  $bb140:
    assume out_$i129 == 1;
    goto corral_source_split_12741;

  corral_source_split_12739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_12738:
    assume {:verifier.code 0} true;
    out_$i129 := $trunc.i8.i1(out_$i128);
    goto corral_source_split_12739;

  corral_source_split_12737:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i1.i8(out_$i127);
    goto corral_source_split_12738;

  SeqInstr_1980:
    goto corral_source_split_12737;

  SeqInstr_1979:
    assume assertsPassed;
    goto SeqInstr_1980;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2949} out_$i127 := qxl_queue_garbage_collect(in_$p8, 1);
    goto SeqInstr_1979;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb137:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_12735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137;

  corral_source_split_12734:
    assume {:verifier.code 0} true;
    out_$i126 := $trunc.i8.i1(out_$i125);
    goto corral_source_split_12735;

  corral_source_split_12733:
    assume {:verifier.code 0} true;
    out_$i125 := $zext.i1.i8(out_$i124);
    goto corral_source_split_12734;

  $bb135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2948} out_$i124 := fence_is_signaled(in_$p0);
    goto corral_source_split_12733;

  $bb134:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb147:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_12748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147;

  corral_source_split_12747:
    assume {:verifier.code 0} true;
    out_$i134 := $trunc.i8.i1(out_$i133);
    goto corral_source_split_12748;

  corral_source_split_12746:
    assume {:verifier.code 0} true;
    out_$i133 := $zext.i1.i8(out_$i132);
    goto corral_source_split_12747;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2950} out_$i132 := fence_is_signaled(in_$p0);
    goto corral_source_split_12746;

  $bb144:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_12587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_12586:
    assume {:verifier.code 0} true;
    out_$i30 := $sle.i32(out_$i17, 3);
    goto corral_source_split_12587;

  $bb29:
    assume !(out_$i29 == 1);
    goto corral_source_split_12586;

  $bb45_dummy:
    call {:si_unique_call 1} out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i36, out_$i37, out_$i38, out_$i47, out_$i48, out_$i49, out_$i50, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134 := qxl_fence_wait_loop_$bb4(in_$p0, in_$i4, in_$p8, in_$i13, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i36, out_$i37, out_$i38, out_$i47, out_$i48, out_$i49, out_$i50, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134);
    return;

  exit:
    return;
}



procedure qxl_fence_wait_loop_$bb4(in_$p0: ref, in_$i4: i64, in_$p8: ref, in_$i13: i8, in_$i17: i32, in_$i18: i1, in_$i19: i8, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i8, in_$i25: i1, in_$i26: i1, in_$i27: i8, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i64, in_$i33: i64, in_$i34: i1, in_$i36: i1, in_$i37: i1, in_$i38: i32, in_$i47: i32, in_$i48: i1, in_$i49: i8, in_$i50: i1, in_$i55: i1, in_$i56: i8, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i1, in_$i61: i8, in_$i62: i1, in_$i63: i1, in_$i64: i8, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$i68: i1, in_$i69: i8, in_$i70: i1, in_$i71: i1, in_$i72: i8, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i1, in_$i77: i8, in_$i78: i1, in_$i79: i1, in_$i80: i8, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_$i84: i1, in_$i85: i8, in_$i86: i1, in_$i87: i1, in_$i88: i8, in_$i89: i1, in_$i90: i32, in_$i91: i1, in_$i92: i1, in_$i93: i8, in_$i94: i1, in_$i95: i1, in_$i96: i8, in_$i97: i1, in_$i98: i32, in_$i99: i1, in_$i100: i1, in_$i101: i8, in_$i102: i1, in_$i103: i1, in_$i104: i8, in_$i105: i1, in_$i106: i32, in_$i107: i1, in_$i108: i1, in_$i109: i8, in_$i110: i1, in_$i111: i1, in_$i112: i8, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i1, in_$i117: i8, in_$i118: i1, in_$i119: i1, in_$i120: i8, in_$i121: i1, in_$i122: i32, in_$i123: i1, in_$i124: i1, in_$i125: i8, in_$i126: i1, in_$i127: i1, in_$i128: i8, in_$i129: i1, in_$i130: i32, in_$i131: i1, in_$i132: i1, in_$i133: i8, in_$i134: i1) returns (out_$i17: i32, out_$i18: i1, out_$i19: i8, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i8, out_$i25: i1, out_$i26: i1, out_$i27: i8, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i64, out_$i33: i64, out_$i34: i1, out_$i36: i1, out_$i37: i1, out_$i38: i32, out_$i47: i32, out_$i48: i1, out_$i49: i8, out_$i50: i1, out_$i55: i1, out_$i56: i8, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i1, out_$i61: i8, out_$i62: i1, out_$i63: i1, out_$i64: i8, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$i68: i1, out_$i69: i8, out_$i70: i1, out_$i71: i1, out_$i72: i8, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i1, out_$i77: i8, out_$i78: i1, out_$i79: i1, out_$i80: i8, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_$i84: i1, out_$i85: i8, out_$i86: i1, out_$i87: i1, out_$i88: i8, out_$i89: i1, out_$i90: i32, out_$i91: i1, out_$i92: i1, out_$i93: i8, out_$i94: i1, out_$i95: i1, out_$i96: i8, out_$i97: i1, out_$i98: i32, out_$i99: i1, out_$i100: i1, out_$i101: i8, out_$i102: i1, out_$i103: i1, out_$i104: i8, out_$i105: i1, out_$i106: i32, out_$i107: i1, out_$i108: i1, out_$i109: i8, out_$i110: i1, out_$i111: i1, out_$i112: i8, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i1, out_$i117: i8, out_$i118: i1, out_$i119: i1, out_$i120: i8, out_$i121: i1, out_$i122: i32, out_$i123: i1, out_$i124: i1, out_$i125: i8, out_$i126: i1, out_$i127: i1, out_$i128: i8, out_$i129: i1, out_$i130: i32, out_$i131: i1, out_$i132: i1, out_$i133: i8, out_$i134: i1);
  modifies $M.41, assertsPassed;



implementation ldv_pm_pm_ops_instance_2_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$i72: i1, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$i119: i64, in_$i120: i1, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$i128: i1, in_$p129: ref, in_$p130: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$i72: i1, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$i119: i64, out_$i120: i1, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$i128: i1, out_$p129: ref, out_$p130: ref)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$p7, in_$p8, in_$i9, in_$i10, in_$p11, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$i37, in_$i38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$p49, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p55, in_$p56, in_$p57, in_$p58, in_$i59, in_$i60, in_$p61, in_$p62, in_$p63, in_$p64, in_$p65, in_$p66, in_$i67, in_$i68, in_$p69, in_$p70, in_$i71, in_$i72, in_$p73, in_$p74, in_$p75, in_$p76, in_$i77, in_$i78, in_$p79, in_$p80, in_$p81, in_$p82, in_$i83, in_$i84, in_$p85, in_$p86, in_$p87, in_$p88, in_$i89, in_$i90, in_$p91, in_$p92, in_$p93, in_$p94, in_$p95, in_$p96, in_$i97, in_$i98, in_$p99, in_$p100, in_$i101, in_$i102, in_$p103, in_$p104, in_$p105, in_$p106, in_$i107, in_$i108, in_$p109, in_$p110, in_$p111, in_$p112, in_$i113, in_$i114, in_$p115, in_$p116, in_$p117, in_$p118, in_$i119, in_$i120, in_$p121, in_$p122, in_$p123, in_$p124, in_$p125, in_$p126, in_$i127, in_$i128, in_$p129, in_$p130;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2972} out_$i1 := ldv_undef_int();
    call {:si_unique_call 2973} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_12869;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_12906:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_1986:
    goto corral_source_split_12906;

  SeqInstr_1985:
    assume assertsPassed;
    goto SeqInstr_1986;

  corral_source_split_12905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2975} ldv_pm_ops_instance_runtime_idle_2_27(out_$p12, $u11);
    goto SeqInstr_1985;

  corral_source_split_12904:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.125, out_$p11);
    goto corral_source_split_12905;

  corral_source_split_12903:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_12904;

  $bb19:
    assume out_$i10 == 1;
    goto corral_source_split_12903;

  corral_source_split_12877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_12876:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i64(out_$i9, 0);
    goto corral_source_split_12877;

  corral_source_split_12875:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_12876;

  corral_source_split_12874:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.124, out_$p7);
    goto corral_source_split_12875;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_12874;

  corral_source_split_12872:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_12872;

  corral_source_split_12870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_12869:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_12870;

  $bb27:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_12921:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_1992:
    goto corral_source_split_12921;

  SeqInstr_1991:
    assume assertsPassed;
    goto SeqInstr_1992;

  corral_source_split_12920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2977} ldv_pm_ops_instance_runtime_resume_2_24(out_$p24, $u11);
    goto SeqInstr_1991;

  corral_source_split_12919:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.129, out_$p23);
    goto corral_source_split_12920;

  corral_source_split_12918:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_12919;

  $bb26:
    assume out_$i22 == 1;
    goto corral_source_split_12918;

  corral_source_split_12916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_12915:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_12916;

  corral_source_split_12914:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_12915;

  corral_source_split_12913:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.128, out_$p19);
    goto corral_source_split_12914;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_12913;

  $bb24:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_12911:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_1989:
    goto corral_source_split_12911;

  SeqInstr_1988:
    assume assertsPassed;
    goto SeqInstr_1989;

  corral_source_split_12910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2976} ldv_pm_ops_instance_runtime_suspend_2_25(out_$p18, $u11);
    goto SeqInstr_1988;

  corral_source_split_12909:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.127, out_$p17);
    goto corral_source_split_12910;

  corral_source_split_12908:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_12909;

  $bb23:
    assume out_$i16 == 1;
    goto corral_source_split_12908;

  corral_source_split_12886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_12885:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_12886;

  corral_source_split_12884:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_12885;

  corral_source_split_12883:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.126, out_$p13);
    goto corral_source_split_12884;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_12883;

  corral_source_split_12881:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_12881;

  corral_source_split_12879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_12879;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb93:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_13107:
    assume {:verifier.code 0} true;
    goto $bb94;

  SeqInstr_2052:
    goto corral_source_split_13107;

  SeqInstr_2051:
    assume assertsPassed;
    goto SeqInstr_2052;

  corral_source_split_13106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3006} ldv_pm_ops_instance_complete_2_3(out_$p130, $u11);
    goto SeqInstr_2051;

  corral_source_split_13105:
    assume {:verifier.code 0} true;
    out_$p130 := $load.ref($M.163, out_$p129);
    goto corral_source_split_13106;

  corral_source_split_13104:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_13105;

  $bb92:
    assume out_$i128 == 1;
    goto corral_source_split_13104;

  corral_source_split_13010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_13009:
    assume {:verifier.code 0} true;
    out_$i128 := $ne.i64(out_$i127, 0);
    goto corral_source_split_13010;

  corral_source_split_13008:
    assume {:verifier.code 0} true;
    out_$i127 := $p2i.ref.i64(out_$p126);
    goto corral_source_split_13009;

  corral_source_split_13007:
    assume {:verifier.code 0} true;
    out_$p126 := $load.ref($M.162, out_$p125);
    goto corral_source_split_13008;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_13007;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_13087:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_13041:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_12990:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_2013:
    goto corral_source_split_12990;

  SeqInstr_2012:
    assume assertsPassed;
    goto SeqInstr_2013;

  corral_source_split_12989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2993} ldv_pm_ops_instance_resume_2_16(out_$p64, $u11);
    goto SeqInstr_2012;

  corral_source_split_12988:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.141, out_$p63);
    goto corral_source_split_12989;

  $bb53:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_12988;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_12986:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_2010:
    goto corral_source_split_12986;

  SeqInstr_2009:
    assume assertsPassed;
    goto SeqInstr_2010;

  corral_source_split_12985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2992} ldv_pm_ops_instance_resume_noirq_2_19(out_$p50, $u11);
    goto SeqInstr_2009;

  corral_source_split_12984:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.136, out_$p49);
    goto corral_source_split_12985;

  corral_source_split_12983:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_12984;

  $bb50:
    assume out_$i48 == 1;
    goto corral_source_split_12983;

  corral_source_split_12981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_12980:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i64(out_$i47, 0);
    goto corral_source_split_12981;

  corral_source_split_12979:
    assume {:verifier.code 0} true;
    out_$i47 := $p2i.ref.i64(out_$p46);
    goto corral_source_split_12980;

  corral_source_split_12978:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.135, out_$p45);
    goto corral_source_split_12979;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_12978;

  $bb48:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_12976:
    assume {:verifier.code 0} true;
    goto $bb49;

  SeqInstr_2007:
    goto corral_source_split_12976;

  SeqInstr_2006:
    assume assertsPassed;
    goto SeqInstr_2007;

  corral_source_split_12975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2991} ldv_pm_ops_instance_suspend_noirq_2_20(out_$p44, $u11);
    goto SeqInstr_2006;

  corral_source_split_12974:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.134, out_$p43);
    goto corral_source_split_12975;

  corral_source_split_12973:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_12974;

  $bb47:
    assume out_$i42 == 1;
    goto corral_source_split_12973;

  corral_source_split_12965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_12964:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, 0);
    goto corral_source_split_12965;

  corral_source_split_12963:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_12964;

  corral_source_split_12962:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.133, out_$p39);
    goto corral_source_split_12963;

  corral_source_split_12961:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_12962;

  $bb45:
    assume out_$i38 == 1;
    goto corral_source_split_12961;

  corral_source_split_12937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_12936:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_12937;

  corral_source_split_12935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2982} out_$i37 := ldv_undef_int();
    call {:si_unique_call 2983} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_12936;

  SeqInstr_1998:
    goto corral_source_split_12935;

  SeqInstr_1997:
    assume assertsPassed;
    goto SeqInstr_1998;

  corral_source_split_12934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2981} ldv_pm_ops_instance_suspend_2_21(out_$p36, $u11);
    goto SeqInstr_1997;

  corral_source_split_12933:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.132, out_$p35);
    goto corral_source_split_12934;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_12933;

  corral_source_split_12931:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i32 == 1;
    goto corral_source_split_12931;

  corral_source_split_12929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_12928:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 1);
    goto corral_source_split_12929;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2979} out_$i31 := ldv_undef_int();
    call {:si_unique_call 2980} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_12928;

  $bb30:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_12926:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_1995:
    goto corral_source_split_12926;

  SeqInstr_1994:
    assume assertsPassed;
    goto SeqInstr_1995;

  corral_source_split_12925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2978} ldv_pm_ops_instance_prepare_2_22(out_$p30, $u11);
    goto SeqInstr_1994;

  corral_source_split_12924:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.131, out_$p29);
    goto corral_source_split_12925;

  corral_source_split_12923:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_12924;

  $bb29:
    assume out_$i28 == 1;
    goto corral_source_split_12923;

  corral_source_split_12895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_12894:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_12895;

  corral_source_split_12893:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_12894;

  corral_source_split_12892:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.130, out_$p25);
    goto corral_source_split_12893;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_12892;

  corral_source_split_12890:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_12890;

  corral_source_split_12888:
    assume {:verifier.code 0} true;
    out_$i5 := out_$i1;
    assume true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_12888;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb58:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_13005:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_2019:
    goto corral_source_split_13005;

  SeqInstr_2018:
    assume assertsPassed;
    goto SeqInstr_2019;

  corral_source_split_13004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2995} ldv_pm_ops_instance_resume_early_2_17(out_$p62, $u11);
    goto SeqInstr_2018;

  corral_source_split_13003:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.140, out_$p61);
    goto corral_source_split_13004;

  corral_source_split_13002:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_13003;

  $bb57:
    assume out_$i60 == 1;
    goto corral_source_split_13002;

  corral_source_split_13000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_12999:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i64(out_$i59, 0);
    goto corral_source_split_13000;

  corral_source_split_12998:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(out_$p58);
    goto corral_source_split_12999;

  corral_source_split_12997:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.139, out_$p57);
    goto corral_source_split_12998;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_12997;

  $bb55:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_12995:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_2016:
    goto corral_source_split_12995;

  SeqInstr_2015:
    assume assertsPassed;
    goto SeqInstr_2016;

  corral_source_split_12994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2994} ldv_pm_ops_instance_suspend_late_2_18(out_$p56, $u11);
    goto SeqInstr_2015;

  corral_source_split_12993:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.138, out_$p55);
    goto corral_source_split_12994;

  corral_source_split_12992:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_12993;

  $bb54:
    assume out_$i54 == 1;
    goto corral_source_split_12992;

  corral_source_split_12971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_12970:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, 0);
    goto corral_source_split_12971;

  corral_source_split_12969:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_12970;

  corral_source_split_12968:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.137, out_$p51);
    goto corral_source_split_12969;

  corral_source_split_12967:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_12968;

  $bb46:
    assume !(out_$i38 == 1);
    goto corral_source_split_12967;

  SeqInstr_2028:
    goto corral_source_split_13041;

  SeqInstr_2027:
    assume assertsPassed;
    goto SeqInstr_2028;

  corral_source_split_13040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2998} ldv_pm_ops_instance_thaw_2_10(out_$p94, $u11);
    goto SeqInstr_2027;

  corral_source_split_13039:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.151, out_$p93);
    goto corral_source_split_13040;

  $bb69:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_13039;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb67:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_13037:
    assume {:verifier.code 0} true;
    goto $bb68;

  SeqInstr_2025:
    goto corral_source_split_13037;

  SeqInstr_2024:
    assume assertsPassed;
    goto SeqInstr_2025;

  corral_source_split_13036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2997} ldv_pm_ops_instance_thaw_early_2_13(out_$p80, $u11);
    goto SeqInstr_2024;

  corral_source_split_13035:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.146, out_$p79);
    goto corral_source_split_13036;

  corral_source_split_13034:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_13035;

  $bb66:
    assume out_$i78 == 1;
    goto corral_source_split_13034;

  corral_source_split_13032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_13031:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i64(out_$i77, 0);
    goto corral_source_split_13032;

  corral_source_split_13030:
    assume {:verifier.code 0} true;
    out_$i77 := $p2i.ref.i64(out_$p76);
    goto corral_source_split_13031;

  corral_source_split_13029:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.145, out_$p75);
    goto corral_source_split_13030;

  $bb65:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_13029;

  $bb64:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_13027:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_2022:
    goto corral_source_split_13027;

  SeqInstr_2021:
    assume assertsPassed;
    goto SeqInstr_2022;

  corral_source_split_13026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2996} ldv_pm_ops_instance_freeze_late_2_14(out_$p74, $u11);
    goto SeqInstr_2021;

  corral_source_split_13025:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.144, out_$p73);
    goto corral_source_split_13026;

  corral_source_split_13024:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_13025;

  $bb63:
    assume out_$i72 == 1;
    goto corral_source_split_13024;

  corral_source_split_13016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_13015:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i64(out_$i71, 0);
    goto corral_source_split_13016;

  corral_source_split_13014:
    assume {:verifier.code 0} true;
    out_$i71 := $p2i.ref.i64(out_$p70);
    goto corral_source_split_13015;

  corral_source_split_13013:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.143, out_$p69);
    goto corral_source_split_13014;

  corral_source_split_13012:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_13013;

  $bb61:
    assume out_$i68 == 1;
    goto corral_source_split_13012;

  corral_source_split_12947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_12946:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i32(out_$i67, 0);
    goto corral_source_split_12947;

  corral_source_split_12945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2985} out_$i67 := ldv_undef_int();
    call {:si_unique_call 2986} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_12946;

  SeqInstr_2001:
    goto corral_source_split_12945;

  SeqInstr_2000:
    assume assertsPassed;
    goto SeqInstr_2001;

  corral_source_split_12944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2984} ldv_pm_ops_instance_freeze_2_15(out_$p66, $u11);
    goto SeqInstr_2000;

  corral_source_split_12943:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.142, out_$p65);
    goto corral_source_split_12944;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_12943;

  corral_source_split_12941:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i33 == 1;
    goto corral_source_split_12941;

  corral_source_split_12939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i31, 2);
    goto corral_source_split_12939;

  $bb33:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb74:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_13056:
    assume {:verifier.code 0} true;
    goto $bb75;

  SeqInstr_2034:
    goto corral_source_split_13056;

  SeqInstr_2033:
    assume assertsPassed;
    goto SeqInstr_2034;

  corral_source_split_13055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3000} ldv_pm_ops_instance_thaw_noirq_2_11(out_$p92, $u11);
    goto SeqInstr_2033;

  corral_source_split_13054:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.150, out_$p91);
    goto corral_source_split_13055;

  corral_source_split_13053:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_13054;

  $bb73:
    assume out_$i90 == 1;
    goto corral_source_split_13053;

  corral_source_split_13051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_13050:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i64(out_$i89, 0);
    goto corral_source_split_13051;

  corral_source_split_13049:
    assume {:verifier.code 0} true;
    out_$i89 := $p2i.ref.i64(out_$p88);
    goto corral_source_split_13050;

  corral_source_split_13048:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.149, out_$p87);
    goto corral_source_split_13049;

  $bb72:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_13048;

  $bb71:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_13046:
    assume {:verifier.code 0} true;
    goto $bb72;

  SeqInstr_2031:
    goto corral_source_split_13046;

  SeqInstr_2030:
    assume assertsPassed;
    goto SeqInstr_2031;

  corral_source_split_13045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2999} ldv_pm_ops_instance_freeze_noirq_2_12(out_$p86, $u11);
    goto SeqInstr_2030;

  corral_source_split_13044:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.148, out_$p85);
    goto corral_source_split_13045;

  corral_source_split_13043:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_13044;

  $bb70:
    assume out_$i84 == 1;
    goto corral_source_split_13043;

  corral_source_split_13022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_13021:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i64(out_$i83, 0);
    goto corral_source_split_13022;

  corral_source_split_13020:
    assume {:verifier.code 0} true;
    out_$i83 := $p2i.ref.i64(out_$p82);
    goto corral_source_split_13021;

  corral_source_split_13019:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.147, out_$p81);
    goto corral_source_split_13020;

  corral_source_split_13018:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_13019;

  $bb62:
    assume !(out_$i68 == 1);
    goto corral_source_split_13018;

  SeqInstr_2043:
    goto corral_source_split_13087;

  SeqInstr_2042:
    assume assertsPassed;
    goto SeqInstr_2043;

  corral_source_split_13086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3003} ldv_pm_ops_instance_restore_2_4(out_$p124, $u11);
    goto SeqInstr_2042;

  corral_source_split_13085:
    assume {:verifier.code 0} true;
    out_$p124 := $load.ref($M.161, out_$p123);
    goto corral_source_split_13086;

  $bb84:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_13085;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb82:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_13083:
    assume {:verifier.code 0} true;
    goto $bb83;

  SeqInstr_2040:
    goto corral_source_split_13083;

  SeqInstr_2039:
    assume assertsPassed;
    goto SeqInstr_2040;

  corral_source_split_13082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3002} ldv_pm_ops_instance_restore_early_2_7(out_$p110, $u11);
    goto SeqInstr_2039;

  corral_source_split_13081:
    assume {:verifier.code 0} true;
    out_$p110 := $load.ref($M.156, out_$p109);
    goto corral_source_split_13082;

  corral_source_split_13080:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_13081;

  $bb81:
    assume out_$i108 == 1;
    goto corral_source_split_13080;

  corral_source_split_13078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_13077:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i64(out_$i107, 0);
    goto corral_source_split_13078;

  corral_source_split_13076:
    assume {:verifier.code 0} true;
    out_$i107 := $p2i.ref.i64(out_$p106);
    goto corral_source_split_13077;

  corral_source_split_13075:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.155, out_$p105);
    goto corral_source_split_13076;

  $bb80:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_13075;

  $bb79:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_13073:
    assume {:verifier.code 0} true;
    goto $bb80;

  SeqInstr_2037:
    goto corral_source_split_13073;

  SeqInstr_2036:
    assume assertsPassed;
    goto SeqInstr_2037;

  corral_source_split_13072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3001} ldv_pm_ops_instance_poweroff_late_2_8(out_$p104, $u11);
    goto SeqInstr_2036;

  corral_source_split_13071:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.154, out_$p103);
    goto corral_source_split_13072;

  corral_source_split_13070:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_13071;

  $bb78:
    assume out_$i102 == 1;
    goto corral_source_split_13070;

  corral_source_split_13062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_13061:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i64(out_$i101, 0);
    goto corral_source_split_13062;

  corral_source_split_13060:
    assume {:verifier.code 0} true;
    out_$i101 := $p2i.ref.i64(out_$p100);
    goto corral_source_split_13061;

  corral_source_split_13059:
    assume {:verifier.code 0} true;
    out_$p100 := $load.ref($M.153, out_$p99);
    goto corral_source_split_13060;

  corral_source_split_13058:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_13059;

  $bb76:
    assume out_$i98 == 1;
    goto corral_source_split_13058;

  corral_source_split_12957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_12956:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i97, 0);
    goto corral_source_split_12957;

  corral_source_split_12955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2988} out_$i97 := ldv_undef_int();
    call {:si_unique_call 2989} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i97);
    goto corral_source_split_12956;

  SeqInstr_2004:
    goto corral_source_split_12955;

  SeqInstr_2003:
    assume assertsPassed;
    goto SeqInstr_2004;

  corral_source_split_12954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2987} ldv_pm_ops_instance_poweroff_2_9(out_$p96, $u11);
    goto SeqInstr_2003;

  corral_source_split_12953:
    assume {:verifier.code 0} true;
    out_$p96 := $load.ref($M.152, out_$p95);
    goto corral_source_split_12954;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_12953;

  corral_source_split_12951:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i34 == 1;
    goto corral_source_split_12951;

  corral_source_split_12949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i31, 3);
    goto corral_source_split_12949;

  $bb37:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb89:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_13102:
    assume {:verifier.code 0} true;
    goto $bb90;

  SeqInstr_2049:
    goto corral_source_split_13102;

  SeqInstr_2048:
    assume assertsPassed;
    goto SeqInstr_2049;

  corral_source_split_13101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3005} ldv_pm_ops_instance_restore_noirq_2_5(out_$p122, $u11);
    goto SeqInstr_2048;

  corral_source_split_13100:
    assume {:verifier.code 0} true;
    out_$p122 := $load.ref($M.160, out_$p121);
    goto corral_source_split_13101;

  corral_source_split_13099:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_13100;

  $bb88:
    assume out_$i120 == 1;
    goto corral_source_split_13099;

  corral_source_split_13097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_13096:
    assume {:verifier.code 0} true;
    out_$i120 := $ne.i64(out_$i119, 0);
    goto corral_source_split_13097;

  corral_source_split_13095:
    assume {:verifier.code 0} true;
    out_$i119 := $p2i.ref.i64(out_$p118);
    goto corral_source_split_13096;

  corral_source_split_13094:
    assume {:verifier.code 0} true;
    out_$p118 := $load.ref($M.159, out_$p117);
    goto corral_source_split_13095;

  $bb87:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_13094;

  $bb86:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_13092:
    assume {:verifier.code 0} true;
    goto $bb87;

  SeqInstr_2046:
    goto corral_source_split_13092;

  SeqInstr_2045:
    assume assertsPassed;
    goto SeqInstr_2046;

  corral_source_split_13091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3004} ldv_pm_ops_instance_poweroff_noirq_2_6(out_$p116, $u11);
    goto SeqInstr_2045;

  corral_source_split_13090:
    assume {:verifier.code 0} true;
    out_$p116 := $load.ref($M.158, out_$p115);
    goto corral_source_split_13091;

  corral_source_split_13089:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_13090;

  $bb85:
    assume out_$i114 == 1;
    goto corral_source_split_13089;

  corral_source_split_13068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_13067:
    assume {:verifier.code 0} true;
    out_$i114 := $ne.i64(out_$i113, 0);
    goto corral_source_split_13068;

  corral_source_split_13066:
    assume {:verifier.code 0} true;
    out_$i113 := $p2i.ref.i64(out_$p112);
    goto corral_source_split_13067;

  corral_source_split_13065:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.157, out_$p111);
    goto corral_source_split_13066;

  corral_source_split_13064:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($u10, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_13065;

  $bb77:
    assume !(out_$i98 == 1);
    goto corral_source_split_13064;

  corral_source_split_12959:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2990} ldv_stop();
    goto corral_source_split_12959;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130 := ldv_pm_pm_ops_instance_2_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130);
    return;

  exit:
    return;
}



procedure ldv_pm_pm_ops_instance_2_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$i72: i1, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$i119: i64, in_$i120: i1, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$i128: i1, in_$p129: ref, in_$p130: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$i72: i1, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$i119: i64, out_$i120: i1, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$i128: i1, out_$p129: ref, out_$p130: ref);
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54;



implementation ldv_struct_drm_encoder_helper_funcs_dummy_resourceless_instance_7_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i32, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i32, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3032} out_$i1 := ldv_undef_int();
    call {:si_unique_call 3033} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_13169;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb31_dummy;

  corral_source_split_13212:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_13206:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_13200:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_13194:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_13184:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_13174:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3034} ldv_dummy_resourceless_instance_callback_7_17($u12, $u13);
    goto corral_source_split_13174;

  corral_source_split_13172:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_13172;

  corral_source_split_13170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_13169:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_13170;

  corral_source_split_13183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3037} ldv_free(out_$p12);
    goto corral_source_split_13184;

  corral_source_split_13182:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_13183;

  corral_source_split_13181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3036} ldv_dummy_resourceless_instance_callback_7_14($u14, $u13, $u5, out_$p11);
    goto corral_source_split_13182;

  corral_source_split_13180:
    assume {:verifier.code 0} true;
    out_$p11 := $bitcast.ref.ref(out_$p10);
    goto corral_source_split_13181;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3035} out_$p10 := ldv_xmalloc(208);
    goto corral_source_split_13180;

  corral_source_split_13178:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_13178;

  corral_source_split_13176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_13176;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_13193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3040} ldv_free(out_$p15);
    goto corral_source_split_13194;

  corral_source_split_13192:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_13193;

  corral_source_split_13191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3039} ldv_dummy_resourceless_instance_callback_7_11($u15, $u13, $u5, out_$p14);
    goto corral_source_split_13192;

  corral_source_split_13190:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(out_$p13);
    goto corral_source_split_13191;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3038} out_$p13 := ldv_xmalloc(208);
    goto corral_source_split_13190;

  corral_source_split_13188:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_13188;

  corral_source_split_13186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_13186;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3041} ldv_dummy_resourceless_instance_callback_7_8($u16, $u13, $u2);
    goto corral_source_split_13200;

  corral_source_split_13198:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i5 == 1;
    goto corral_source_split_13198;

  corral_source_split_13196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i1, 4);
    goto corral_source_split_13196;

  $bb11:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3042} ldv_dummy_resourceless_instance_callback_7_7($u12, $u13);
    goto corral_source_split_13206;

  corral_source_split_13204:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i6 == 1;
    goto corral_source_split_13204;

  corral_source_split_13202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i1, 5);
    goto corral_source_split_13202;

  $bb15:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_2127:
    goto corral_source_split_13212;

  SeqInstr_2126:
    assume assertsPassed;
    goto SeqInstr_2127;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3043} ldv_dummy_resourceless_instance_callback_7_3($u12, $u13);
    goto SeqInstr_2126;

  corral_source_split_13210:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i7 == 1;
    goto corral_source_split_13210;

  corral_source_split_13208:
    assume {:verifier.code 0} true;
    out_$i8 := out_$i1;
    assume true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i1, 6);
    goto corral_source_split_13208;

  $bb19:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15 := ldv_struct_drm_encoder_helper_funcs_dummy_resourceless_instance_7_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15);
    return;

  exit:
    return;
}



procedure ldv_struct_drm_encoder_helper_funcs_dummy_resourceless_instance_7_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i32, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i32, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref);
  modifies $CurrAddr, $M.6, $M.55, assertsPassed;



implementation ldv_struct_drm_fb_helper_funcs_dummy_resourceless_instance_8_loop_$bb4(in_$i3: i32, in_$i4: i1) returns (out_$i3: i32, out_$i4: i1)
{

  entry:
    out_$i3, out_$i4 := in_$i3, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3056} ldv_dummy_resourceless_instance_callback_8_3($u17, $u18, $u19);
    goto SeqInstr_2135;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i4 == 1;
    goto $bb5_dummy;

  corral_source_split_13252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_13251:
    assume {:verifier.code 0} true;
    out_$i4 := $ne.i32(out_$i3, 0);
    goto corral_source_split_13252;

  corral_source_split_13250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3057} out_$i3 := ldv_undef_int();
    call {:si_unique_call 3058} {:cexpr "tmp"} boogie_si_record_i32(out_$i3);
    goto corral_source_split_13251;

  SeqInstr_2136:
    goto corral_source_split_13250;

  SeqInstr_2135:
    assume assertsPassed;
    goto SeqInstr_2136;

  $bb5_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4 := ldv_struct_drm_fb_helper_funcs_dummy_resourceless_instance_8_loop_$bb4(out_$i3, out_$i4);
    return;

  exit:
    return;
}



procedure ldv_struct_drm_fb_helper_funcs_dummy_resourceless_instance_8_loop_$bb4(in_$i3: i32, in_$i4: i1) returns (out_$i3: i32, out_$i4: i1);
  modifies $M.114, $M.6, $M.32, $M.71, $M.42, $CurrAddr, $M.43, $M.40, $M.36, $M.35, assertsPassed, $M.65, $M.46, $M.52, $M.72, $M.38, $M.39, $M.37, $M.41, $M.44, $M.53, $M.75, $M.49, $M.73, $M.74, $M.55, $M.67, $M.68, $M.54, $M.69, $M.70, $M.64;



implementation ldv_struct_drm_framebuffer_funcs_dummy_resourceless_instance_9_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i32) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i32)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4 := in_$i1, in_$i2, in_$i3, in_$i4;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3062} out_$i1 := ldv_undef_int();
    call {:si_unique_call 3063} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_13267;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  corral_source_split_13278:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_13272:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_2145:
    goto corral_source_split_13272;

  SeqInstr_2144:
    assume assertsPassed;
    goto SeqInstr_2145;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3064} ldv_dummy_resourceless_instance_callback_9_7($u20, $u21, $u22, $u2, $u2, $u23, $u2);
    goto SeqInstr_2144;

  corral_source_split_13270:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_13270;

  corral_source_split_13268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_13267:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_13268;

  SeqInstr_2148:
    goto corral_source_split_13278;

  SeqInstr_2147:
    assume assertsPassed;
    goto SeqInstr_2148;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3065} ldv_dummy_resourceless_instance_callback_9_3($u24, $u21);
    goto SeqInstr_2147;

  corral_source_split_13276:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_13276;

  corral_source_split_13274:
    assume {:verifier.code 0} true;
    out_$i4 := out_$i1;
    assume true;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_13274;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4 := ldv_struct_drm_framebuffer_funcs_dummy_resourceless_instance_9_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4);
    return;

  exit:
    return;
}



procedure ldv_struct_drm_framebuffer_funcs_dummy_resourceless_instance_9_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i32) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i32);
  modifies $M.78, $M.79, $M.80, $M.81, $M.6, $M.46, $M.73, $M.42, $M.38, $M.39, $CurrAddr, $M.43, $M.52, $M.53, $M.49, $M.40, $M.44, assertsPassed, $M.41, $M.67, $M.68, $M.75, $M.37, $M.72, $M.74, $M.69, $M.70, $M.32, $M.71, $M.36, $M.64, $M.35, $M.54, $M.55, $M.65;



implementation ldv_struct_drm_info_list_dummy_resourceless_instance_10_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5 := in_$p3, in_$i4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3078} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_13308;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i5 == 1;
    goto $bb5_dummy;

  corral_source_split_13312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_13311:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_13312;

  corral_source_split_13310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3081} out_$i4 := ldv_undef_int();
    call {:si_unique_call 3082} {:cexpr "tmp"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_13311;

  corral_source_split_13309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3080} ldv_free(out_$p3);
    goto corral_source_split_13310;

  SeqInstr_2160:
    goto corral_source_split_13309;

  SeqInstr_2159:
    assume assertsPassed;
    goto SeqInstr_2160;

  corral_source_split_13308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3079} ldv_dummy_resourceless_instance_callback_10_3($u25, $u26, out_$p3);
    goto SeqInstr_2159;

  $bb5_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5 := ldv_struct_drm_info_list_dummy_resourceless_instance_10_loop_$bb4(out_$p3, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure ldv_struct_drm_info_list_dummy_resourceless_instance_10_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1);
  modifies $CurrAddr, $M.115, assertsPassed;



implementation ldv_struct_drm_info_list_dummy_resourceless_instance_11_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5 := in_$p3, in_$i4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3085} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_13322;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i5 == 1;
    goto $bb5_dummy;

  corral_source_split_13326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_13325:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_13326;

  corral_source_split_13324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3088} out_$i4 := ldv_undef_int();
    call {:si_unique_call 3089} {:cexpr "tmp"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_13325;

  corral_source_split_13323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3087} ldv_free(out_$p3);
    goto corral_source_split_13324;

  corral_source_split_13322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3086} ldv_dummy_resourceless_instance_callback_11_3($u25, $u26, out_$p3);
    goto corral_source_split_13323;

  $bb5_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5 := ldv_struct_drm_info_list_dummy_resourceless_instance_11_loop_$bb4(out_$p3, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure ldv_struct_drm_info_list_dummy_resourceless_instance_11_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1);
  modifies $CurrAddr;



implementation ldv_struct_drm_mode_config_funcs_dummy_resourceless_instance_12_loop_$bb4(in_$i3: i32, in_$i4: i1) returns (out_$i3: i32, out_$i4: i1)
{

  entry:
    out_$i3, out_$i4 := in_$i3, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3096} ldv_dummy_resourceless_instance_callback_12_3($u27, $u28, $u22, $u29);
    goto SeqInstr_2168;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i4 == 1;
    goto $bb5_dummy;

  corral_source_split_13350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_13349:
    assume {:verifier.code 0} true;
    out_$i4 := $ne.i32(out_$i3, 0);
    goto corral_source_split_13350;

  corral_source_split_13348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3097} out_$i3 := ldv_undef_int();
    call {:si_unique_call 3098} {:cexpr "tmp"} boogie_si_record_i32(out_$i3);
    goto corral_source_split_13349;

  SeqInstr_2169:
    goto corral_source_split_13348;

  SeqInstr_2168:
    assume assertsPassed;
    goto SeqInstr_2169;

  $bb5_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4 := ldv_struct_drm_mode_config_funcs_dummy_resourceless_instance_12_loop_$bb4(out_$i3, out_$i4);
    return;

  exit:
    return;
}



procedure ldv_struct_drm_mode_config_funcs_dummy_resourceless_instance_12_loop_$bb4(in_$i3: i32, in_$i4: i1) returns (out_$i3: i32, out_$i4: i1);
  modifies $M.6, $M.35, assertsPassed, $CurrAddr;



implementation ldv_struct_fb_deferred_io_dummy_resourceless_instance_13_loop_$bb4(in_$i3: i32, in_$i4: i1) returns (out_$i3: i32, out_$i4: i1)
{

  entry:
    out_$i3, out_$i4 := in_$i3, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3104} ldv_dummy_resourceless_instance_callback_13_3($u30, $u31, $u32);
    goto SeqInstr_2177;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i4 == 1;
    goto $bb5_dummy;

  corral_source_split_13371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_13370:
    assume {:verifier.code 0} true;
    out_$i4 := $ne.i32(out_$i3, 0);
    goto corral_source_split_13371;

  corral_source_split_13369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3105} out_$i3 := ldv_undef_int();
    call {:si_unique_call 3106} {:cexpr "tmp"} boogie_si_record_i32(out_$i3);
    goto corral_source_split_13370;

  SeqInstr_2178:
    goto corral_source_split_13369;

  SeqInstr_2177:
    assume assertsPassed;
    goto SeqInstr_2178;

  $bb5_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4 := ldv_struct_fb_deferred_io_dummy_resourceless_instance_13_loop_$bb4(out_$i3, out_$i4);
    return;

  exit:
    return;
}



procedure ldv_struct_fb_deferred_io_dummy_resourceless_instance_13_loop_$bb4(in_$i3: i32, in_$i4: i1) returns (out_$i3: i32, out_$i4: i1);
  modifies $M.6, $M.42, $M.38, $M.39, $M.46, $M.73, $M.74, $CurrAddr, $M.52, $M.43, $M.40, $M.53, $M.49, $M.44, assertsPassed, $M.41, $M.67, $M.68, $M.75, $M.69, $M.70, $M.32, $M.37, $M.72, $M.71, $M.36, $M.64, $M.35, $M.54, $M.55, $M.65;



implementation ldv_struct_fence_ops_dummy_resourceless_instance_14_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i32, in_$i8: i1) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i32, out_$i8: i1)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i8 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i8;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3110} out_$i1 := ldv_undef_int();
    call {:si_unique_call 3111} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_13386;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb23_dummy;

  corral_source_split_13410:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_13404:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_13398:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_13392:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_2187:
    goto corral_source_split_13392;

  SeqInstr_2186:
    assume assertsPassed;
    goto SeqInstr_2187;

  corral_source_split_13391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3112} ldv_dummy_resourceless_instance_callback_14_9($u34, $u35, out_$i8, $u1);
    goto SeqInstr_2186;

  $bb4:
    assume {:verifier.code 0} true;
    out_$i8 := $trunc.i8.i1($u33);
    goto corral_source_split_13391;

  corral_source_split_13389:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_13389;

  corral_source_split_13387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_13386:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_13387;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3113} ldv_dummy_resourceless_instance_callback_14_8($u36, $u35);
    goto corral_source_split_13398;

  corral_source_split_13396:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_13396;

  corral_source_split_13394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_13394;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3114} ldv_dummy_resourceless_instance_callback_14_7($u36, $u35);
    goto corral_source_split_13404;

  corral_source_split_13402:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_13402;

  corral_source_split_13400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_13400;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3115} ldv_dummy_resourceless_instance_callback_14_3($u37, $u35);
    goto corral_source_split_13410;

  corral_source_split_13408:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i5 == 1;
    goto corral_source_split_13408;

  corral_source_split_13406:
    assume {:verifier.code 0} true;
    out_$i6 := out_$i1;
    assume true;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i1, 4);
    goto corral_source_split_13406;

  $bb11:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i8 := ldv_struct_fence_ops_dummy_resourceless_instance_14_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_fence_ops_dummy_resourceless_instance_14_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i32, in_$i8: i1) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i32, out_$i8: i1);
  modifies $M.41, assertsPassed;



implementation ldv_struct_ttm_bo_driver_dummy_resourceless_instance_15_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i32, in_$i18: i1, in_$i19: i1, in_$i20: i1) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i32, out_$i18: i1, out_$i19: i1, out_$i20: i1)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$i20 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i18, in_$i19, in_$i20;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3125} out_$i1 := ldv_undef_int();
    call {:si_unique_call 3126} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_13439;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb63_dummy;

  corral_source_split_13525:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_13519:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_13513:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_13507:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_13501:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_13495:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_13489:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_13483:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_13474:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_13468:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_13462:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_13456:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_13450:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_13444:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3127} ldv_dummy_resourceless_instance_callback_15_27($u38, $u39, $u40);
    goto corral_source_split_13444;

  corral_source_split_13442:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_13442;

  corral_source_split_13440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_13439:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_13440;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3128} ldv_dummy_resourceless_instance_callback_15_26($u41, $u42);
    goto corral_source_split_13450;

  corral_source_split_13448:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_13448;

  corral_source_split_13446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_13446;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3129} ldv_dummy_resourceless_instance_callback_15_25($u43, $u42);
    goto corral_source_split_13456;

  corral_source_split_13454:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_13454;

  corral_source_split_13452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_13452;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3130} ldv_dummy_resourceless_instance_callback_15_24($u41, $u42);
    goto corral_source_split_13462;

  corral_source_split_13460:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i5 == 1;
    goto corral_source_split_13460;

  corral_source_split_13458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i1, 4);
    goto corral_source_split_13458;

  $bb11:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_2196:
    goto corral_source_split_13468;

  SeqInstr_2195:
    assume assertsPassed;
    goto SeqInstr_2196;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3131} ldv_dummy_resourceless_instance_callback_15_21($u44, $u45, $u1, $u2, $u46);
    goto SeqInstr_2195;

  corral_source_split_13466:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i6 == 1;
    goto corral_source_split_13466;

  corral_source_split_13464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i1, 5);
    goto corral_source_split_13464;

  $bb15:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_2199:
    goto corral_source_split_13474;

  SeqInstr_2198:
    assume assertsPassed;
    goto SeqInstr_2199;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3132} ldv_dummy_resourceless_instance_callback_15_20($u47, $u39, $u48);
    goto SeqInstr_2198;

  corral_source_split_13472:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i7 == 1;
    goto corral_source_split_13472;

  corral_source_split_13470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i1, 6);
    goto corral_source_split_13470;

  $bb19:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_13482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3133} ldv_dummy_resourceless_instance_callback_15_17($u49, $u39, out_$i18, out_$i19, out_$i20, $u48);
    goto corral_source_split_13483;

  corral_source_split_13481:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i8.i1($u33);
    goto corral_source_split_13482;

  corral_source_split_13480:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i8.i1($u33);
    goto corral_source_split_13481;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i18 := $trunc.i8.i1($u33);
    goto corral_source_split_13480;

  corral_source_split_13478:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume out_$i8 == 1;
    goto corral_source_split_13478;

  corral_source_split_13476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i1, 7);
    goto corral_source_split_13476;

  $bb23:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3134} ldv_dummy_resourceless_instance_callback_15_16($u50, $u45, $u48);
    goto corral_source_split_13489;

  corral_source_split_13487:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb30:
    assume out_$i9 == 1;
    goto corral_source_split_13487;

  corral_source_split_13485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i1, 8);
    goto corral_source_split_13485;

  $bb27:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3135} ldv_dummy_resourceless_instance_callback_15_15($u51, $u45, $u48);
    goto corral_source_split_13495;

  corral_source_split_13493:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb34:
    assume out_$i10 == 1;
    goto corral_source_split_13493;

  corral_source_split_13491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i1, 9);
    goto corral_source_split_13491;

  $bb31:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3136} ldv_dummy_resourceless_instance_callback_15_12($u52, $u45, $u2);
    goto corral_source_split_13501;

  corral_source_split_13499:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb38:
    assume out_$i11 == 1;
    goto corral_source_split_13499;

  corral_source_split_13497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i1, 10);
    goto corral_source_split_13497;

  $bb35:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3137} ldv_dummy_resourceless_instance_callback_15_9($u53, $u45, $u2, $u54);
    goto corral_source_split_13507;

  corral_source_split_13505:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb42:
    assume out_$i12 == 1;
    goto corral_source_split_13505;

  corral_source_split_13503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i1, 11);
    goto corral_source_split_13503;

  $bb39:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3138} ldv_dummy_resourceless_instance_callback_15_8($u55, $u39, $u56);
    goto corral_source_split_13513;

  corral_source_split_13511:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb46:
    assume out_$i13 == 1;
    goto corral_source_split_13511;

  corral_source_split_13509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i1, 12);
    goto corral_source_split_13509;

  $bb43:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3139} ldv_dummy_resourceless_instance_callback_15_7($u43, $u42);
    goto corral_source_split_13519;

  corral_source_split_13517:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb50:
    assume out_$i14 == 1;
    goto corral_source_split_13517;

  corral_source_split_13515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i1, 13);
    goto corral_source_split_13515;

  $bb47:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3140} ldv_dummy_resourceless_instance_callback_15_3($u57, $u42, $u48);
    goto corral_source_split_13525;

  corral_source_split_13523:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume out_$i15 == 1;
    goto corral_source_split_13523;

  corral_source_split_13521:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i1;
    assume true;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i1, 14);
    goto corral_source_split_13521;

  $bb51:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb63_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$i20 := ldv_struct_ttm_bo_driver_dummy_resourceless_instance_15_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$i20);
    return;

  exit:
    return;
}



procedure ldv_struct_ttm_bo_driver_dummy_resourceless_instance_15_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i32, in_$i18: i1, in_$i19: i1, in_$i20: i1) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i32, out_$i18: i1, out_$i19: i1, out_$i20: i1);
  modifies $M.6, assertsPassed, $CurrAddr, $M.37, $M.38, $M.39, $M.46, $M.44, $M.42, $M.54, $M.40, $M.55, $M.52, $M.53, $M.49, $M.43, $M.41, $M.67, $M.68, $M.69, $M.70, $M.32, $M.72, $M.73, $M.74, $M.71, $M.64, $M.36, $M.75, $M.35, $M.65, $M.112, $M.107, $M.108, $M.109, $M.110, $M.111;



implementation ldv_struct_drm_connector_funcs_dummy_resourceless_instance_4_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i32, in_$i11: i1) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i32, out_$i11: i1)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i11 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i11;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3165} out_$i1 := ldv_undef_int();
    call {:si_unique_call 3166} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_13586;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb35_dummy;

  corral_source_split_13628:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_13622:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_13615:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_13609:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_13603:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_13597:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_13591:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3167} ldv_dummy_resourceless_instance_callback_4_18($u58, $u3, $u59, $u1);
    goto corral_source_split_13591;

  corral_source_split_13589:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_13589;

  corral_source_split_13587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_13586:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_13587;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3168} ldv_dummy_resourceless_instance_callback_4_17($u60, $u3);
    goto corral_source_split_13597;

  corral_source_split_13595:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_13595;

  corral_source_split_13593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_13593;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3169} ldv_dummy_resourceless_instance_callback_4_16($u60, $u3);
    goto corral_source_split_13603;

  corral_source_split_13601:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_13601;

  corral_source_split_13599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_13599;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3170} ldv_dummy_resourceless_instance_callback_4_13($u61, $u3, $u2, $u2);
    goto corral_source_split_13609;

  corral_source_split_13607:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i5 == 1;
    goto corral_source_split_13607;

  corral_source_split_13605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i1, 4);
    goto corral_source_split_13605;

  $bb11:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3171} ldv_dummy_resourceless_instance_callback_4_10($u62, $u3, $u2);
    goto corral_source_split_13615;

  corral_source_split_13613:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i6 == 1;
    goto corral_source_split_13613;

  corral_source_split_13611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i1, 5);
    goto corral_source_split_13611;

  $bb15:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_13621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3172} ldv_dummy_resourceless_instance_callback_4_7($u63, $u3, out_$i11);
    goto corral_source_split_13622;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i11 := $trunc.i8.i1($u33);
    goto corral_source_split_13621;

  corral_source_split_13619:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i7 == 1;
    goto corral_source_split_13619;

  corral_source_split_13617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i1, 6);
    goto corral_source_split_13617;

  $bb19:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3173} ldv_dummy_resourceless_instance_callback_4_3($u60, $u3);
    goto corral_source_split_13628;

  corral_source_split_13626:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume out_$i8 == 1;
    goto corral_source_split_13626;

  corral_source_split_13624:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i1;
    assume true;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i1, 7);
    goto corral_source_split_13624;

  $bb23:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i11 := ldv_struct_drm_connector_funcs_dummy_resourceless_instance_4_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i11);
    return;

  exit:
    return;
}



procedure ldv_struct_drm_connector_funcs_dummy_resourceless_instance_4_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i32, in_$i11: i1) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i32, out_$i11: i1);
  modifies $M.6;



implementation ldv_struct_drm_crtc_helper_funcs_dummy_resourceless_instance_6_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i32, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i32, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3189} out_$i1 := ldv_undef_int();
    call {:si_unique_call 3190} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_13666;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb51_dummy;

  corral_source_split_13739:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_13733:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_13727:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_13721:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_13715:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_13709:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_13703:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_13693:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_13683:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_13677:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_13671:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3191} ldv_dummy_resourceless_instance_callback_6_28($u64, $u65);
    goto corral_source_split_13671;

  corral_source_split_13669:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_13669;

  corral_source_split_13667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_13666:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_13667;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3192} ldv_dummy_resourceless_instance_callback_6_27($u66, $u67);
    goto corral_source_split_13677;

  corral_source_split_13675:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_13675;

  corral_source_split_13673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_13673;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_2211:
    goto corral_source_split_13683;

  SeqInstr_2210:
    assume assertsPassed;
    goto SeqInstr_2211;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3193} ldv_dummy_resourceless_instance_callback_6_24($u68, $u67, $u21, $u69, $u2);
    goto SeqInstr_2210;

  corral_source_split_13681:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_13681;

  corral_source_split_13679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_13679;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_13692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3196} ldv_free(out_$p17);
    goto corral_source_split_13693;

  corral_source_split_13691:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_13692;

  SeqInstr_2214:
    goto corral_source_split_13691;

  SeqInstr_2213:
    assume assertsPassed;
    goto SeqInstr_2214;

  corral_source_split_13690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3195} ldv_dummy_resourceless_instance_callback_6_21($u70, $u67, $u5, out_$p16, $u2, $u2, $u21);
    goto SeqInstr_2213;

  corral_source_split_13689:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_13690;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3194} out_$p15 := ldv_xmalloc(208);
    goto corral_source_split_13689;

  corral_source_split_13687:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i5 == 1;
    goto corral_source_split_13687;

  corral_source_split_13685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i1, 4);
    goto corral_source_split_13685;

  $bb11:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_13702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3199} ldv_free(out_$p20);
    goto corral_source_split_13703;

  corral_source_split_13701:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_13702;

  corral_source_split_13700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3198} ldv_dummy_resourceless_instance_callback_6_18($u71, $u67, $u5, out_$p19);
    goto corral_source_split_13701;

  corral_source_split_13699:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_13700;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3197} out_$p18 := ldv_xmalloc(208);
    goto corral_source_split_13699;

  corral_source_split_13697:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i6 == 1;
    goto corral_source_split_13697;

  corral_source_split_13695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i1, 5);
    goto corral_source_split_13695;

  $bb15:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3200} ldv_dummy_resourceless_instance_callback_6_15($u72, $u67, $u2);
    goto corral_source_split_13709;

  corral_source_split_13707:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i7 == 1;
    goto corral_source_split_13707;

  corral_source_split_13705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i1, 6);
    goto corral_source_split_13705;

  $bb19:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_2217:
    goto corral_source_split_13715;

  SeqInstr_2216:
    assume assertsPassed;
    goto SeqInstr_2217;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3201} ldv_dummy_resourceless_instance_callback_6_14($u66, $u67);
    goto SeqInstr_2216;

  corral_source_split_13713:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume out_$i8 == 1;
    goto corral_source_split_13713;

  corral_source_split_13711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i1, 7);
    goto corral_source_split_13711;

  $bb23:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3202} ldv_dummy_resourceless_instance_callback_6_13($u66, $u67);
    goto corral_source_split_13721;

  corral_source_split_13719:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb30:
    assume out_$i9 == 1;
    goto corral_source_split_13719;

  corral_source_split_13717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i1, 8);
    goto corral_source_split_13717;

  $bb27:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_2220:
    goto corral_source_split_13727;

  SeqInstr_2219:
    assume assertsPassed;
    goto SeqInstr_2220;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3203} ldv_dummy_resourceless_instance_callback_6_10($u73, $u67, $u22, $u2, $u2, $u2, $u2, $u2);
    goto SeqInstr_2219;

  corral_source_split_13725:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb34:
    assume out_$i10 == 1;
    goto corral_source_split_13725;

  corral_source_split_13723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i1, 9);
    goto corral_source_split_13723;

  $bb31:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  SeqInstr_2223:
    goto corral_source_split_13733;

  SeqInstr_2222:
    assume assertsPassed;
    goto SeqInstr_2223;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3204} ldv_dummy_resourceless_instance_callback_6_7($u74, $u67, $u2, $u2);
    goto SeqInstr_2222;

  corral_source_split_13731:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb38:
    assume out_$i11 == 1;
    goto corral_source_split_13731;

  corral_source_split_13729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i1, 10);
    goto corral_source_split_13729;

  $bb35:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3205} ldv_dummy_resourceless_instance_callback_6_3($u66, $u67);
    goto corral_source_split_13739;

  corral_source_split_13737:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb42:
    assume out_$i12 == 1;
    goto corral_source_split_13737;

  corral_source_split_13735:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i1;
    assume true;
    goto $bb42;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i1, 11);
    goto corral_source_split_13735;

  $bb39:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb51_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20 := ldv_struct_drm_crtc_helper_funcs_dummy_resourceless_instance_6_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20);
    return;

  exit:
    return;
}



procedure ldv_struct_drm_crtc_helper_funcs_dummy_resourceless_instance_6_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i32, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i32, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref);
  modifies $M.79, $M.78, $M.80, $M.81, $M.91, $M.6, $M.46, $M.73, $M.42, $M.38, $M.39, $M.43, $M.52, $CurrAddr, $M.53, $M.49, $M.40, $M.44, assertsPassed, $M.93, $M.41, $M.67, $M.68, $M.75, $M.37, $M.72, $M.74, $M.69, $M.70, $M.32, $M.65, $M.71, $M.36, $M.64, $M.35, $M.54, $M.55, $M.87, $M.88;



implementation ldv_file_operations_file_operations_instance_0_loop_$bb12(in_$p2: ref, in_$p13: ref, in_$i39: i32, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1) returns (out_$i39: i32, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1)
{

  entry:
    out_$i39, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57 := in_$i39, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$i48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p53, in_$p54, in_$p55, in_$i56, in_$i57;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb32:
    assume {:verifier.code 0} true;
    assume out_$i57 == 1;
    goto $bb32_dummy;

  corral_source_split_13891:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i56;
    assume true;
    goto $bb32;

  corral_source_split_13890:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i56, 1);
    goto corral_source_split_13891;

  corral_source_split_13889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3270} out_$i56 := ldv_undef_int();
    call {:si_unique_call 3271} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_13890;

  corral_source_split_13888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3269} ldv_free(out_$p55);
    goto corral_source_split_13889;

  corral_source_split_13887:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_13888;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3268} ldv_free(out_$p43);
    goto corral_source_split_13887;

  $bb30:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_13885:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_13884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3267} ldv_file_operations_instance_write_0_4(out_$p54, in_$p2, out_$p43, $u1, out_$p45);
    goto corral_source_split_13885;

  corral_source_split_13883:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.166, out_$p53);
    goto corral_source_split_13884;

  corral_source_split_13882:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($u76, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_13883;

  $bb29:
    assume out_$i52 == 1;
    goto corral_source_split_13882;

  corral_source_split_13857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_13856:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_13857;

  corral_source_split_13855:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_13856;

  corral_source_split_13854:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.165, out_$p49);
    goto corral_source_split_13855;

  corral_source_split_13853:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($u76, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_13854;

  corral_source_split_13852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3259} ldv_assume(out_$i48);
    goto corral_source_split_13853;

  corral_source_split_13851:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i1.i32(out_$i47);
    goto corral_source_split_13852;

  corral_source_split_13850:
    assume {:verifier.code 0} true;
    out_$i47 := $ule.i64(out_$i46, 2147479552);
    goto corral_source_split_13851;

  corral_source_split_13849:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(in_$p13);
    goto corral_source_split_13850;

  corral_source_split_13848:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_13849;

  corral_source_split_13847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3258} out_$p44 := ldv_xmalloc(8);
    goto corral_source_split_13848;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3257} out_$p43 := ldv_xmalloc(1);
    goto corral_source_split_13847;

  $bb32_dummy:
    call {:si_unique_call 1} out_$i39, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57 := ldv_file_operations_file_operations_instance_0_loop_$bb12(in_$p2, in_$p13, out_$i39, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57);
    return;

  exit:
    return;
}



procedure ldv_file_operations_file_operations_instance_0_loop_$bb12(in_$p2: ref, in_$p13: ref, in_$i39: i32, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1) returns (out_$i39: i32, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1);
  modifies $CurrAddr;



implementation ldv_file_operations_file_operations_instance_0_loop_$bb8(in_$p2: ref, in_$p6: ref, in_$p8: ref, in_$p10: ref, in_$p13: ref, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i39: i32, in_$i29: i32, in_$i40: i1, in_$p41: ref, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$p152: ref, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$p169: ref, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$p177: ref, in_$p178: ref, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$p184: ref) returns (out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i39: i32, out_$i29: i32, out_$i40: i1, out_$p41: ref, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$p152: ref, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$p169: ref, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$p177: ref, out_$p178: ref, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$p184: ref)
{

  entry:
    out_$p26, out_$i27, out_$i28, out_$i39, out_$i29, out_$i40, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$p133, out_$p134, out_$p135, out_$p136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$p152, out_$p153, out_$p154, out_$p155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$p162, out_$p163, out_$p164, out_$p165, out_$p166, out_$p167, out_$p168, out_$p169, out_$p170, out_$p171, out_$p172, out_$p173, out_$p174, out_$p175, out_$p176, out_$p177, out_$p178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184 := in_$p26, in_$i27, in_$i28, in_$i39, in_$i29, in_$i40, in_$p41, in_$i42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$i48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p53, in_$p54, in_$p55, in_$i56, in_$i57, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$p105, in_$p106, in_$p107, in_$p108, in_$p109, in_$p110, in_$p111, in_$p112, in_$p113, in_$p114, in_$p115, in_$p116, in_$p117, in_$p118, in_$p119, in_$p120, in_$p121, in_$p122, in_$p123, in_$p124, in_$p125, in_$p126, in_$p127, in_$p128, in_$p129, in_$p130, in_$p131, in_$p132, in_$p133, in_$p134, in_$p135, in_$p136, in_$p137, in_$p138, in_$p139, in_$p140, in_$p141, in_$p142, in_$p143, in_$p144, in_$p145, in_$p146, in_$p147, in_$p148, in_$p149, in_$p150, in_$p151, in_$p152, in_$p153, in_$p154, in_$p155, in_$p156, in_$p157, in_$p158, in_$p159, in_$p160, in_$p161, in_$p162, in_$p163, in_$p164, in_$p165, in_$p166, in_$p167, in_$p168, in_$p169, in_$p170, in_$p171, in_$p172, in_$p173, in_$p174, in_$p175, in_$p176, in_$p177, in_$p178, in_$p179, in_$p180, in_$p181, in_$p182, in_$p183, in_$p184;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_13826;

  corral_source_split_14239:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p183;
    goto corral_source_split_14239_dummy;

  corral_source_split_14238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3365} ldv_free(out_$p184);
    goto corral_source_split_14239;

  corral_source_split_14237:
    assume {:verifier.code 0} true;
    out_$p184 := $bitcast.ref.ref(out_$p183);
    goto corral_source_split_14238;

  $bb197:
    assume {:verifier.code 0} true;
    goto corral_source_split_14237;

  $bb198:
    assume {:verifier.code 0} true;
    out_$p183 := out_$p26;
    goto $bb197;

  $bb195:
    assume {:verifier.code 0} true;
    out_$p183 := out_$p62;
    goto $bb197;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14233:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14227:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14217:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14207:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14197:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14187:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14173:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14163:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14157:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14151:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14141:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14131:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14121:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14111:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14101:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14095:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14085:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14079:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14073:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14067:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14061:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14051:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14045:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14035:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14025:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14019:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14013:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14007:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14001:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_13994:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_13984:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_13977:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_13967:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_13961:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_13955:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_13941:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_13927:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_13915:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_13905:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_13895:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3272} ldv_file_operations_instance_callback_0_108($u77, in_$p2, $u2, $u1);
    goto corral_source_split_13895;

  corral_source_split_13893:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb34:
    assume out_$i65 == 1;
    goto corral_source_split_13893;

  corral_source_split_13878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_13877:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 1);
    goto corral_source_split_13878;

  corral_source_split_13876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3264} out_$i64 := ldv_undef_int();
    call {:si_unique_call 3265} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_13877;

  corral_source_split_13875:
    assume {:verifier.code 0} true;
    out_$p63 := $bitcast.ref.ref(out_$p62);
    goto corral_source_split_13876;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3263} out_$p62 := ldv_xmalloc(240);
    goto corral_source_split_13875;

  corral_source_split_13873:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i42 == 1;
    goto corral_source_split_13873;

  corral_source_split_13871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i29, 3);
    goto corral_source_split_13871;

  $bb21:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_13861:
    assume {:verifier.code 0} true;
    out_$p41 := out_$p26;
    assume true;
    goto $bb21;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i29, 2);
    goto corral_source_split_13861;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb11;

  corral_source_split_13859:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i39;
    goto $bb11;

  $bb18:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_13859;

  corral_source_split_13891:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i56;
    assume true;
    goto $bb32, $bb18;

  corral_source_split_13890:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i56, 1);
    goto corral_source_split_13891;

  corral_source_split_13889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3270} out_$i56 := ldv_undef_int();
    call {:si_unique_call 3271} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_13890;

  corral_source_split_13888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3269} ldv_free(out_$p55);
    goto corral_source_split_13889;

  corral_source_split_13887:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_13888;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3268} ldv_free(out_$p43);
    goto corral_source_split_13887;

  $bb30:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_13885:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_13884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3267} ldv_file_operations_instance_write_0_4(out_$p54, in_$p2, out_$p43, $u1, out_$p45);
    goto corral_source_split_13885;

  corral_source_split_13883:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.166, out_$p53);
    goto corral_source_split_13884;

  corral_source_split_13882:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($u76, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_13883;

  $bb29:
    assume out_$i52 == 1;
    goto corral_source_split_13882;

  corral_source_split_13857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_13856:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_13857;

  corral_source_split_13855:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_13856;

  corral_source_split_13854:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.165, out_$p49);
    goto corral_source_split_13855;

  corral_source_split_13853:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($u76, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_13854;

  corral_source_split_13852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3259} ldv_assume(out_$i48);
    goto corral_source_split_13853;

  corral_source_split_13851:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i1.i32(out_$i47);
    goto corral_source_split_13852;

  corral_source_split_13850:
    assume {:verifier.code 0} true;
    out_$i47 := $ule.i64(out_$i46, 2147479552);
    goto corral_source_split_13851;

  corral_source_split_13849:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(in_$p13);
    goto corral_source_split_13850;

  corral_source_split_13848:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_13849;

  corral_source_split_13847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3258} out_$p44 := ldv_xmalloc(8);
    goto corral_source_split_13848;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3257} out_$p43 := ldv_xmalloc(1);
    goto corral_source_split_13847;

  $bb12:
    call out_$i39, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57 := ldv_file_operations_file_operations_instance_0_loop_$bb12(in_$p2, in_$p13, out_$i39, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57);
    goto $bb12_last;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_13830:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb32:
    assume {:verifier.code 0} true;
    assume out_$i57 == 1;
    assume false;
    return;

  $bb9:
    assume out_$i28 == 1;
    goto corral_source_split_13830;

  corral_source_split_13828:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i27;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_13827:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 1);
    goto corral_source_split_13828;

  corral_source_split_13826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3250} out_$i27 := ldv_undef_int();
    call {:si_unique_call 3251} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_13827;

  corral_source_split_13904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3275} ldv_free(out_$p107);
    goto corral_source_split_13905;

  corral_source_split_13903:
    assume {:verifier.code 0} true;
    out_$p107 := $bitcast.ref.ref(out_$p106);
    goto corral_source_split_13904;

  SeqInstr_2244:
    goto corral_source_split_13903;

  SeqInstr_2243:
    assume assertsPassed;
    goto SeqInstr_2244;

  corral_source_split_13902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3274} ldv_file_operations_instance_callback_0_105($u78, out_$p106);
    goto SeqInstr_2243;

  corral_source_split_13901:
    assume {:verifier.code 0} true;
    out_$p106 := $bitcast.ref.ref(out_$p105);
    goto corral_source_split_13902;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3273} out_$p105 := ldv_xmalloc(3144);
    goto corral_source_split_13901;

  corral_source_split_13899:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb38:
    assume out_$i66 == 1;
    goto corral_source_split_13899;

  corral_source_split_13897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i32(out_$i64, 2);
    goto corral_source_split_13897;

  $bb35:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_13914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3278} ldv_free(out_$p110);
    goto corral_source_split_13915;

  corral_source_split_13913:
    assume {:verifier.code 0} true;
    out_$p110 := $bitcast.ref.ref(out_$p109);
    goto corral_source_split_13914;

  corral_source_split_13912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3277} ldv_file_operations_instance_callback_0_102($u79, out_$p109, $u80);
    goto corral_source_split_13913;

  corral_source_split_13911:
    assume {:verifier.code 0} true;
    out_$p109 := $bitcast.ref.ref(out_$p108);
    goto corral_source_split_13912;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3276} out_$p108 := ldv_xmalloc(3144);
    goto corral_source_split_13911;

  corral_source_split_13909:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb42:
    assume out_$i67 == 1;
    goto corral_source_split_13909;

  corral_source_split_13907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i64, 3);
    goto corral_source_split_13907;

  $bb39:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_13926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3283} ldv_free(out_$p114);
    goto corral_source_split_13927;

  corral_source_split_13925:
    assume {:verifier.code 0} true;
    out_$p114 := $bitcast.ref.ref(out_$p113);
    goto corral_source_split_13926;

  corral_source_split_13924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3282} ldv_free(out_$p111);
    goto corral_source_split_13925;

  corral_source_split_13923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3281} ldv_file_operations_instance_callback_0_99($u81, in_$p2, out_$p111, $u1, out_$p113);
    goto corral_source_split_13924;

  corral_source_split_13922:
    assume {:verifier.code 0} true;
    out_$p113 := $bitcast.ref.ref(out_$p112);
    goto corral_source_split_13923;

  corral_source_split_13921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3280} out_$p112 := ldv_xmalloc(8);
    goto corral_source_split_13922;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3279} out_$p111 := ldv_xmalloc(1);
    goto corral_source_split_13921;

  corral_source_split_13919:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb46:
    assume out_$i68 == 1;
    goto corral_source_split_13919;

  corral_source_split_13917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i64, 4);
    goto corral_source_split_13917;

  $bb43:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_13940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3288} ldv_free(out_$p120);
    goto corral_source_split_13941;

  corral_source_split_13939:
    assume {:verifier.code 0} true;
    out_$p120 := $bitcast.ref.ref(out_$p118);
    goto corral_source_split_13940;

  corral_source_split_13938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3287} ldv_free(out_$p119);
    goto corral_source_split_13939;

  corral_source_split_13937:
    assume {:verifier.code 0} true;
    out_$p119 := $bitcast.ref.ref(out_$p116);
    goto corral_source_split_13938;

  corral_source_split_13936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3286} ldv_file_operations_instance_callback_0_96($u82, out_$p116, $u22, $u2, $u2, out_$p118);
    goto corral_source_split_13937;

  corral_source_split_13935:
    assume {:verifier.code 0} true;
    out_$p118 := $bitcast.ref.ref(out_$p117);
    goto corral_source_split_13936;

  corral_source_split_13934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3285} out_$p117 := ldv_xmalloc(4);
    goto corral_source_split_13935;

  corral_source_split_13933:
    assume {:verifier.code 0} true;
    out_$p116 := $bitcast.ref.ref(out_$p115);
    goto corral_source_split_13934;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3284} out_$p115 := ldv_xmalloc(3144);
    goto corral_source_split_13933;

  corral_source_split_13931:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb50:
    assume out_$i69 == 1;
    goto corral_source_split_13931;

  corral_source_split_13929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i64, 5);
    goto corral_source_split_13929;

  $bb47:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_13954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3293} ldv_free(out_$p126);
    goto corral_source_split_13955;

  corral_source_split_13953:
    assume {:verifier.code 0} true;
    out_$p126 := $bitcast.ref.ref(out_$p124);
    goto corral_source_split_13954;

  corral_source_split_13952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3292} ldv_free(out_$p125);
    goto corral_source_split_13953;

  corral_source_split_13951:
    assume {:verifier.code 0} true;
    out_$p125 := $bitcast.ref.ref(out_$p122);
    goto corral_source_split_13952;

  corral_source_split_13950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3291} ldv_file_operations_instance_callback_0_93($u83, out_$p122, $u22, $u2, out_$p124);
    goto corral_source_split_13951;

  corral_source_split_13949:
    assume {:verifier.code 0} true;
    out_$p124 := $bitcast.ref.ref(out_$p123);
    goto corral_source_split_13950;

  corral_source_split_13948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3290} out_$p123 := ldv_xmalloc(4);
    goto corral_source_split_13949;

  corral_source_split_13947:
    assume {:verifier.code 0} true;
    out_$p122 := $bitcast.ref.ref(out_$p121);
    goto corral_source_split_13948;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3289} out_$p121 := ldv_xmalloc(3144);
    goto corral_source_split_13947;

  corral_source_split_13945:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume out_$i70 == 1;
    goto corral_source_split_13945;

  corral_source_split_13943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb53:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i64, 6);
    goto corral_source_split_13943;

  $bb51:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3294} ldv_file_operations_instance_callback_0_92($u84, in_$p2, $u85);
    goto corral_source_split_13961;

  corral_source_split_13959:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb58:
    assume out_$i71 == 1;
    goto corral_source_split_13959;

  corral_source_split_13957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i64, 7);
    goto corral_source_split_13957;

  $bb55:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3295} ldv_file_operations_instance_callback_0_91($u86, in_$p2, $u87);
    goto corral_source_split_13967;

  corral_source_split_13965:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb62:
    assume out_$i72 == 1;
    goto corral_source_split_13965;

  corral_source_split_13963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i64, 8);
    goto corral_source_split_13963;

  $bb59:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_13976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3298} ldv_free(out_$p129);
    goto corral_source_split_13977;

  corral_source_split_13975:
    assume {:verifier.code 0} true;
    out_$p129 := $bitcast.ref.ref(out_$p128);
    goto corral_source_split_13976;

  SeqInstr_2247:
    goto corral_source_split_13975;

  SeqInstr_2246:
    assume assertsPassed;
    goto SeqInstr_2247;

  corral_source_split_13974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3297} ldv_file_operations_instance_callback_0_88($u88, out_$p128, $u1);
    goto SeqInstr_2246;

  corral_source_split_13973:
    assume {:verifier.code 0} true;
    out_$p128 := $bitcast.ref.ref(out_$p127);
    goto corral_source_split_13974;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3296} out_$p127 := ldv_xmalloc(3144);
    goto corral_source_split_13973;

  corral_source_split_13971:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb66:
    assume out_$i73 == 1;
    goto corral_source_split_13971;

  corral_source_split_13969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb65:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i64, 9);
    goto corral_source_split_13969;

  $bb63:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_2250:
    goto corral_source_split_13984;

  SeqInstr_2249:
    assume assertsPassed;
    goto SeqInstr_2250;

  corral_source_split_13983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3299} ldv_file_operations_instance_callback_0_85($u89, $u2, out_$p130);
    goto SeqInstr_2249;

  $bb72:
    assume {:verifier.code 0} true;
    out_$p130 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_13983;

  corral_source_split_13981:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb70:
    assume out_$i74 == 1;
    goto corral_source_split_13981;

  corral_source_split_13979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb69:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i64, 10);
    goto corral_source_split_13979;

  $bb67:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_13993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3302} ldv_free(out_$p133);
    goto corral_source_split_13994;

  corral_source_split_13992:
    assume {:verifier.code 0} true;
    out_$p133 := $bitcast.ref.ref(out_$p132);
    goto corral_source_split_13993;

  corral_source_split_13991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3301} ldv_file_operations_instance_callback_0_82($u90, out_$p132, $u2);
    goto corral_source_split_13992;

  corral_source_split_13990:
    assume {:verifier.code 0} true;
    out_$p132 := $bitcast.ref.ref(out_$p131);
    goto corral_source_split_13991;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3300} out_$p131 := ldv_xmalloc(3144);
    goto corral_source_split_13990;

  corral_source_split_13988:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb74:
    assume out_$i75 == 1;
    goto corral_source_split_13988;

  corral_source_split_13986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb73:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i64, 11);
    goto corral_source_split_13986;

  $bb71:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_14000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3303} ldv_file_operations_instance_callback_0_81($u91, in_$p6, out_$p134);
    goto corral_source_split_14001;

  $bb80:
    assume {:verifier.code 0} true;
    out_$p134 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_14000;

  corral_source_split_13998:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb78:
    assume out_$i76 == 1;
    goto corral_source_split_13998;

  corral_source_split_13996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb77:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i64, 12);
    goto corral_source_split_13996;

  $bb75:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3304} ldv_file_operations_instance_callback_0_80($u92, in_$p6);
    goto corral_source_split_14007;

  corral_source_split_14005:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb82:
    assume out_$i77 == 1;
    goto corral_source_split_14005;

  corral_source_split_14003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb81:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i64, 13);
    goto corral_source_split_14003;

  $bb79:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3305} ldv_file_operations_instance_callback_0_79($u93, in_$p6);
    goto corral_source_split_14013;

  corral_source_split_14011:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb86:
    assume out_$i78 == 1;
    goto corral_source_split_14011;

  corral_source_split_14009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb85:
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i64, 14);
    goto corral_source_split_14009;

  $bb83:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3306} ldv_file_operations_instance_callback_0_78($u94, in_$p6);
    goto corral_source_split_14019;

  corral_source_split_14017:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb90:
    assume out_$i79 == 1;
    goto corral_source_split_14017;

  corral_source_split_14015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb89:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i64, 15);
    goto corral_source_split_14015;

  $bb87:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3307} ldv_file_operations_instance_callback_0_77($u95, in_$p6, $u87);
    goto corral_source_split_14025;

  corral_source_split_14023:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb94:
    assume out_$i80 == 1;
    goto corral_source_split_14023;

  corral_source_split_14021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb93:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i32(out_$i64, 16);
    goto corral_source_split_14021;

  $bb91:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_14034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3310} ldv_free(out_$p137);
    goto corral_source_split_14035;

  corral_source_split_14033:
    assume {:verifier.code 0} true;
    out_$p137 := $bitcast.ref.ref(out_$p136);
    goto corral_source_split_14034;

  corral_source_split_14032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3309} ldv_file_operations_instance_callback_0_74($u96, out_$p136, in_$p13, $u97);
    goto corral_source_split_14033;

  corral_source_split_14031:
    assume {:verifier.code 0} true;
    out_$p136 := $bitcast.ref.ref(out_$p135);
    goto corral_source_split_14032;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3308} out_$p135 := ldv_xmalloc(3144);
    goto corral_source_split_14031;

  corral_source_split_14029:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb98:
    assume out_$i81 == 1;
    goto corral_source_split_14029;

  corral_source_split_14027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb97:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i64, 17);
    goto corral_source_split_14027;

  $bb95:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_14044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3313} ldv_free(out_$p140);
    goto corral_source_split_14045;

  corral_source_split_14043:
    assume {:verifier.code 0} true;
    out_$p140 := $bitcast.ref.ref(out_$p139);
    goto corral_source_split_14044;

  corral_source_split_14042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3312} ldv_file_operations_instance_callback_0_71($u98, out_$p139, $u99);
    goto corral_source_split_14043;

  corral_source_split_14041:
    assume {:verifier.code 0} true;
    out_$p139 := $bitcast.ref.ref(out_$p138);
    goto corral_source_split_14042;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3311} out_$p138 := ldv_xmalloc(3144);
    goto corral_source_split_14041;

  corral_source_split_14039:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb102:
    assume out_$i82 == 1;
    goto corral_source_split_14039;

  corral_source_split_14037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb101:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i64, 18);
    goto corral_source_split_14037;

  $bb99:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3314} ldv_file_operations_instance_callback_0_70($u100, in_$p6);
    goto corral_source_split_14051;

  corral_source_split_14049:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb106:
    assume out_$i83 == 1;
    goto corral_source_split_14049;

  corral_source_split_14047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb105:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i64, 19);
    goto corral_source_split_14047;

  $bb103:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_14060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3317} ldv_free(out_$p143);
    goto corral_source_split_14061;

  corral_source_split_14059:
    assume {:verifier.code 0} true;
    out_$p143 := $bitcast.ref.ref(out_$p142);
    goto corral_source_split_14060;

  corral_source_split_14058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3316} ldv_file_operations_instance_callback_0_67($u101, out_$p142, in_$p6, $u2);
    goto corral_source_split_14059;

  corral_source_split_14057:
    assume {:verifier.code 0} true;
    out_$p142 := $bitcast.ref.ref(out_$p141);
    goto corral_source_split_14058;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3315} out_$p141 := ldv_xmalloc(3144);
    goto corral_source_split_14057;

  corral_source_split_14055:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb110:
    assume out_$i84 == 1;
    goto corral_source_split_14055;

  corral_source_split_14053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb109:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i64, 20);
    goto corral_source_split_14053;

  $bb107:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3318} ldv_file_operations_instance_callback_0_66($u102, in_$p6, $u22);
    goto corral_source_split_14067;

  corral_source_split_14065:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb114:
    assume out_$i85 == 1;
    goto corral_source_split_14065;

  corral_source_split_14063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb113:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i64, 21);
    goto corral_source_split_14063;

  $bb111:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3319} ldv_file_operations_instance_callback_0_65($u93, in_$p6);
    goto corral_source_split_14073;

  corral_source_split_14071:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb118:
    assume out_$i86 == 1;
    goto corral_source_split_14071;

  corral_source_split_14069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb117:
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i64, 22);
    goto corral_source_split_14069;

  $bb115:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3320} ldv_file_operations_instance_callback_0_64($u103, in_$p6, $u22);
    goto corral_source_split_14079;

  corral_source_split_14077:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb122:
    assume out_$i87 == 1;
    goto corral_source_split_14077;

  corral_source_split_14075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb121:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i64, 23);
    goto corral_source_split_14075;

  $bb119:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3321} ldv_file_operations_instance_callback_0_63($u104, in_$p8, $u31);
    goto corral_source_split_14085;

  corral_source_split_14083:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb126:
    assume out_$i88 == 1;
    goto corral_source_split_14083;

  corral_source_split_14081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb125:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i64, 24);
    goto corral_source_split_14081;

  $bb123:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_14094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3324} ldv_free(out_$p146);
    goto corral_source_split_14095;

  corral_source_split_14093:
    assume {:verifier.code 0} true;
    out_$p146 := $bitcast.ref.ref(out_$p145);
    goto corral_source_split_14094;

  corral_source_split_14092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3323} ldv_file_operations_instance_callback_0_60($u105, out_$p145);
    goto corral_source_split_14093;

  corral_source_split_14091:
    assume {:verifier.code 0} true;
    out_$p145 := $bitcast.ref.ref(out_$p144);
    goto corral_source_split_14092;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3322} out_$p144 := ldv_xmalloc(1608);
    goto corral_source_split_14091;

  corral_source_split_14089:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb130:
    assume out_$i89 == 1;
    goto corral_source_split_14089;

  corral_source_split_14087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb129:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i64, 25);
    goto corral_source_split_14087;

  $bb127:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3325} ldv_file_operations_instance_callback_0_59($u106, in_$p10, $u31);
    goto corral_source_split_14101;

  corral_source_split_14099:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb134:
    assume out_$i90 == 1;
    goto corral_source_split_14099;

  corral_source_split_14097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb133:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i64, 26);
    goto corral_source_split_14097;

  $bb131:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_14110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3328} ldv_free(out_$p149);
    goto corral_source_split_14111;

  corral_source_split_14109:
    assume {:verifier.code 0} true;
    out_$p149 := $bitcast.ref.ref(out_$p148);
    goto corral_source_split_14110;

  SeqInstr_2253:
    goto corral_source_split_14109;

  SeqInstr_2252:
    assume assertsPassed;
    goto SeqInstr_2253;

  corral_source_split_14108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3327} ldv_file_operations_instance_callback_0_56($u107, out_$p148, $u108);
    goto SeqInstr_2252;

  corral_source_split_14107:
    assume {:verifier.code 0} true;
    out_$p148 := $bitcast.ref.ref(out_$p147);
    goto corral_source_split_14108;

  $bb140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3326} out_$p147 := ldv_xmalloc(1608);
    goto corral_source_split_14107;

  corral_source_split_14105:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb138:
    assume out_$i91 == 1;
    goto corral_source_split_14105;

  corral_source_split_14103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb137:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i64, 27);
    goto corral_source_split_14103;

  $bb135:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_14120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3331} ldv_free(out_$p152);
    goto corral_source_split_14121;

  corral_source_split_14119:
    assume {:verifier.code 0} true;
    out_$p152 := $bitcast.ref.ref(out_$p151);
    goto corral_source_split_14120;

  SeqInstr_2256:
    goto corral_source_split_14119;

  SeqInstr_2255:
    assume assertsPassed;
    goto SeqInstr_2256;

  corral_source_split_14118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3330} ldv_file_operations_instance_callback_0_53($u109, out_$p151, $u19);
    goto SeqInstr_2255;

  corral_source_split_14117:
    assume {:verifier.code 0} true;
    out_$p151 := $bitcast.ref.ref(out_$p150);
    goto corral_source_split_14118;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3329} out_$p150 := ldv_xmalloc(1608);
    goto corral_source_split_14117;

  corral_source_split_14115:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb142:
    assume out_$i92 == 1;
    goto corral_source_split_14115;

  corral_source_split_14113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb141:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i64, 28);
    goto corral_source_split_14113;

  $bb139:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_14130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3334} ldv_free(out_$p155);
    goto corral_source_split_14131;

  corral_source_split_14129:
    assume {:verifier.code 0} true;
    out_$p155 := $bitcast.ref.ref(out_$p154);
    goto corral_source_split_14130;

  corral_source_split_14128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3333} ldv_file_operations_instance_callback_0_50($u105, out_$p154);
    goto corral_source_split_14129;

  corral_source_split_14127:
    assume {:verifier.code 0} true;
    out_$p154 := $bitcast.ref.ref(out_$p153);
    goto corral_source_split_14128;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3332} out_$p153 := ldv_xmalloc(1608);
    goto corral_source_split_14127;

  corral_source_split_14125:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb146:
    assume out_$i93 == 1;
    goto corral_source_split_14125;

  corral_source_split_14123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb145:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i64, 29);
    goto corral_source_split_14123;

  $bb143:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_14140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3337} ldv_free(out_$p158);
    goto corral_source_split_14141;

  corral_source_split_14139:
    assume {:verifier.code 0} true;
    out_$p158 := $bitcast.ref.ref(out_$p157);
    goto corral_source_split_14140;

  corral_source_split_14138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3336} ldv_file_operations_instance_callback_0_47($u105, out_$p157);
    goto corral_source_split_14139;

  corral_source_split_14137:
    assume {:verifier.code 0} true;
    out_$p157 := $bitcast.ref.ref(out_$p156);
    goto corral_source_split_14138;

  $bb152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3335} out_$p156 := ldv_xmalloc(1608);
    goto corral_source_split_14137;

  corral_source_split_14135:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb150:
    assume out_$i94 == 1;
    goto corral_source_split_14135;

  corral_source_split_14133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb149:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i64, 30);
    goto corral_source_split_14133;

  $bb147:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_14150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3340} ldv_free(out_$p161);
    goto corral_source_split_14151;

  corral_source_split_14149:
    assume {:verifier.code 0} true;
    out_$p161 := $bitcast.ref.ref(out_$p160);
    goto corral_source_split_14150;

  SeqInstr_2259:
    goto corral_source_split_14149;

  SeqInstr_2258:
    assume assertsPassed;
    goto SeqInstr_2259;

  corral_source_split_14148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3339} ldv_file_operations_instance_callback_0_44($u109, out_$p160, $u19);
    goto SeqInstr_2258;

  corral_source_split_14147:
    assume {:verifier.code 0} true;
    out_$p160 := $bitcast.ref.ref(out_$p159);
    goto corral_source_split_14148;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3338} out_$p159 := ldv_xmalloc(1608);
    goto corral_source_split_14147;

  corral_source_split_14145:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb154:
    assume out_$i95 == 1;
    goto corral_source_split_14145;

  corral_source_split_14143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb153:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i64, 31);
    goto corral_source_split_14143;

  $bb151:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3341} ldv_file_operations_instance_callback_0_43($u106, in_$p10, $u31);
    goto corral_source_split_14157;

  corral_source_split_14155:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb158:
    assume out_$i96 == 1;
    goto corral_source_split_14155;

  corral_source_split_14153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb157:
    assume {:verifier.code 0} true;
    out_$i96 := $eq.i32(out_$i64, 32);
    goto corral_source_split_14153;

  $bb155:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3342} ldv_file_operations_instance_callback_0_40($u110, $u2, $u31);
    goto corral_source_split_14163;

  corral_source_split_14161:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb162:
    assume out_$i97 == 1;
    goto corral_source_split_14161;

  corral_source_split_14159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb161:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i64, 33);
    goto corral_source_split_14159;

  $bb159:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  corral_source_split_14172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3345} ldv_free(out_$p164);
    goto corral_source_split_14173;

  corral_source_split_14171:
    assume {:verifier.code 0} true;
    out_$p164 := $bitcast.ref.ref(out_$p163);
    goto corral_source_split_14172;

  corral_source_split_14170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3344} ldv_file_operations_instance_callback_0_37($u90, out_$p163, $u2);
    goto corral_source_split_14171;

  corral_source_split_14169:
    assume {:verifier.code 0} true;
    out_$p163 := $bitcast.ref.ref(out_$p162);
    goto corral_source_split_14170;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3343} out_$p162 := ldv_xmalloc(3144);
    goto corral_source_split_14169;

  corral_source_split_14167:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb166:
    assume out_$i98 == 1;
    goto corral_source_split_14167;

  corral_source_split_14165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb165:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i64, 34);
    goto corral_source_split_14165;

  $bb163:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_14186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3350} ldv_free(out_$p170);
    goto corral_source_split_14187;

  corral_source_split_14185:
    assume {:verifier.code 0} true;
    out_$p170 := $bitcast.ref.ref(out_$p168);
    goto corral_source_split_14186;

  corral_source_split_14184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3349} ldv_free(out_$p169);
    goto corral_source_split_14185;

  corral_source_split_14183:
    assume {:verifier.code 0} true;
    out_$p169 := $bitcast.ref.ref(out_$p166);
    goto corral_source_split_14184;

  SeqInstr_2262:
    goto corral_source_split_14183;

  SeqInstr_2261:
    assume assertsPassed;
    goto SeqInstr_2262;

  corral_source_split_14182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3348} ldv_file_operations_instance_callback_0_34($u111, out_$p166, $u28, $u2, out_$p168);
    goto SeqInstr_2261;

  corral_source_split_14181:
    assume {:verifier.code 0} true;
    out_$p168 := $bitcast.ref.ref(out_$p167);
    goto corral_source_split_14182;

  corral_source_split_14180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3347} out_$p167 := ldv_xmalloc(8);
    goto corral_source_split_14181;

  corral_source_split_14179:
    assume {:verifier.code 0} true;
    out_$p166 := $bitcast.ref.ref(out_$p165);
    goto corral_source_split_14180;

  $bb172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3346} out_$p165 := ldv_xmalloc(728);
    goto corral_source_split_14179;

  corral_source_split_14177:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb170:
    assume out_$i99 == 1;
    goto corral_source_split_14177;

  corral_source_split_14175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb169:
    assume {:verifier.code 0} true;
    out_$i99 := $eq.i32(out_$i64, 35);
    goto corral_source_split_14175;

  $bb167:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_14196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3353} ldv_free(out_$p173);
    goto corral_source_split_14197;

  corral_source_split_14195:
    assume {:verifier.code 0} true;
    out_$p173 := $bitcast.ref.ref(out_$p172);
    goto corral_source_split_14196;

  corral_source_split_14194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3352} ldv_file_operations_instance_callback_0_31($u112, out_$p172, $u28, $u2);
    goto corral_source_split_14195;

  corral_source_split_14193:
    assume {:verifier.code 0} true;
    out_$p172 := $bitcast.ref.ref(out_$p171);
    goto corral_source_split_14194;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3351} out_$p171 := ldv_xmalloc(728);
    goto corral_source_split_14193;

  corral_source_split_14191:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb174:
    assume out_$i100 == 1;
    goto corral_source_split_14191;

  corral_source_split_14189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb173:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i64, 36);
    goto corral_source_split_14189;

  $bb171:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_14206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3356} ldv_free(out_$p176);
    goto corral_source_split_14207;

  corral_source_split_14205:
    assume {:verifier.code 0} true;
    out_$p176 := $bitcast.ref.ref(out_$p175);
    goto corral_source_split_14206;

  SeqInstr_2265:
    goto corral_source_split_14205;

  SeqInstr_2264:
    assume assertsPassed;
    goto SeqInstr_2265;

  corral_source_split_14204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3355} ldv_file_operations_instance_callback_0_28($u113, out_$p175, $u28, $u114);
    goto SeqInstr_2264;

  corral_source_split_14203:
    assume {:verifier.code 0} true;
    out_$p175 := $bitcast.ref.ref(out_$p174);
    goto corral_source_split_14204;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3354} out_$p174 := ldv_xmalloc(728);
    goto corral_source_split_14203;

  corral_source_split_14201:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb178:
    assume out_$i101 == 1;
    goto corral_source_split_14201;

  corral_source_split_14199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb177:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i64, 37);
    goto corral_source_split_14199;

  $bb175:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_14216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3359} ldv_free(out_$p179);
    goto corral_source_split_14217;

  corral_source_split_14215:
    assume {:verifier.code 0} true;
    out_$p179 := $bitcast.ref.ref(out_$p178);
    goto corral_source_split_14216;

  corral_source_split_14214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3358} ldv_file_operations_instance_callback_0_25($u115, out_$p178, $u2);
    goto corral_source_split_14215;

  corral_source_split_14213:
    assume {:verifier.code 0} true;
    out_$p178 := $bitcast.ref.ref(out_$p177);
    goto corral_source_split_14214;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3357} out_$p177 := ldv_xmalloc(3144);
    goto corral_source_split_14213;

  corral_source_split_14211:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb182:
    assume out_$i102 == 1;
    goto corral_source_split_14211;

  corral_source_split_14209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb181:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i64, 38);
    goto corral_source_split_14209;

  $bb179:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_14226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3362} ldv_free(out_$p182);
    goto corral_source_split_14227;

  corral_source_split_14225:
    assume {:verifier.code 0} true;
    out_$p182 := $bitcast.ref.ref(out_$p181);
    goto corral_source_split_14226;

  corral_source_split_14224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3361} ldv_file_operations_instance_callback_0_22($u116, out_$p181);
    goto corral_source_split_14225;

  corral_source_split_14223:
    assume {:verifier.code 0} true;
    out_$p181 := $bitcast.ref.ref(out_$p180);
    goto corral_source_split_14224;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3360} out_$p180 := ldv_xmalloc(240);
    goto corral_source_split_14223;

  corral_source_split_14221:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb186:
    assume out_$i103 == 1;
    goto corral_source_split_14221;

  corral_source_split_14219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb185:
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(out_$i64, 39);
    goto corral_source_split_14219;

  $bb183:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3363} ldv_file_operations_instance_callback_0_5($u117, out_$p63);
    goto corral_source_split_14233;

  corral_source_split_14231:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb190:
    assume out_$i104 == 1;
    goto corral_source_split_14231;

  corral_source_split_14229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb189:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i64, 40);
    goto corral_source_split_14229;

  $bb187:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  corral_source_split_14235:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3364} ldv_stop();
    goto corral_source_split_14235;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb191:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_13880:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3266} ldv_stop();
    goto corral_source_split_13880;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_14239_dummy:
    call {:si_unique_call 1} out_$p26, out_$i27, out_$i28, out_$i39, out_$i29, out_$i40, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$p133, out_$p134, out_$p135, out_$p136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$p152, out_$p153, out_$p154, out_$p155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$p162, out_$p163, out_$p164, out_$p165, out_$p166, out_$p167, out_$p168, out_$p169, out_$p170, out_$p171, out_$p172, out_$p173, out_$p174, out_$p175, out_$p176, out_$p177, out_$p178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184 := ldv_file_operations_file_operations_instance_0_loop_$bb8(in_$p2, in_$p6, in_$p8, in_$p10, in_$p13, out_$p26, out_$i27, out_$i28, out_$i39, out_$i29, out_$i40, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$p133, out_$p134, out_$p135, out_$p136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$p152, out_$p153, out_$p154, out_$p155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$p162, out_$p163, out_$p164, out_$p165, out_$p166, out_$p167, out_$p168, out_$p169, out_$p170, out_$p171, out_$p172, out_$p173, out_$p174, out_$p175, out_$p176, out_$p177, out_$p178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184);
    return;

  exit:
    return;
}



procedure ldv_file_operations_file_operations_instance_0_loop_$bb8(in_$p2: ref, in_$p6: ref, in_$p8: ref, in_$p10: ref, in_$p13: ref, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i39: i32, in_$i29: i32, in_$i40: i1, in_$p41: ref, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$p152: ref, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$p169: ref, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$p177: ref, in_$p178: ref, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$p184: ref) returns (out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i39: i32, out_$i29: i32, out_$i40: i1, out_$p41: ref, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$p152: ref, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$p169: ref, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$p177: ref, out_$p178: ref, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$p184: ref);
  modifies $CurrAddr, $M.6, $M.46, $M.64, $M.40, assertsPassed, $M.35, $M.65, $M.76, $M.32, $M.42, $M.53, $M.75, $M.71, $M.43, $M.36, $M.55, $M.67, $M.68, $M.69, $M.70, $M.56, $M.107, $M.108, $M.109, $M.110, $M.111, $M.41, $M.72, $M.38, $M.39, $M.73, $M.74, $M.52, $M.49, $M.44, $M.37, $M.54, $M.61, $M.33, $M.62, $M.63;



implementation ldv_file_operations_file_operations_instance_0_loop_$bb5(in_$p2: ref, in_$p4: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i33: i1) returns (out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i33: i1)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i30, out_$i31, out_$i32, out_$i33 := in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i30, in_$i31, in_$i32, in_$i33;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($u76, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_13807;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i33 == 1;
    goto $bb13_dummy;

  corral_source_split_13824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_13823:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_13824;

  corral_source_split_13822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3248} out_$i32 := ldv_undef_int();
    call {:si_unique_call 3249} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_13823;

  corral_source_split_13821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3247} ldv_assume(out_$i31);
    goto corral_source_split_13822;

  corral_source_split_13820:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i1.i32(out_$i30);
    goto corral_source_split_13821;

  corral_source_split_13819:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i20, 0);
    goto corral_source_split_13820;

  $bb7:
    assume !(out_$i22 == 1);
    goto corral_source_split_13819;

  corral_source_split_13812:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i20;
    assume true;
    goto $bb7;

  corral_source_split_13811:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_13812;

  corral_source_split_13810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3244} out_$i21 := ldv_undef_int();
    call {:si_unique_call 3245} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_13811;

  corral_source_split_13809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3242} out_$i20 := ldv_filter_err_code(out_$i19);
    call {:si_unique_call 3243} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_13810;

  corral_source_split_13808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3240} out_$i19 := ldv_file_operations_instance_probe_0_12(out_$p18, in_$p4, in_$p2);
    call {:si_unique_call 3241} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_13809;

  corral_source_split_13807:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.164, out_$p17);
    goto corral_source_split_13808;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i30, out_$i31, out_$i32, out_$i33 := ldv_file_operations_file_operations_instance_0_loop_$bb5(in_$p2, in_$p4, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i30, out_$i31, out_$i32, out_$i33);
    return;

  exit:
    return;
}



procedure ldv_file_operations_file_operations_instance_0_loop_$bb5(in_$p2: ref, in_$p4: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i33: i1) returns (out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i33: i1);



implementation ldv_file_operations_file_operations_instance_0_loop_$bb4(in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$p10: ref, in_$p13: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i39: i32, in_$i29: i32, in_$i40: i1, in_$p41: ref, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$p152: ref, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$p169: ref, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$p177: ref, in_$p178: ref, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$p184: ref) returns (out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i39: i32, out_$i29: i32, out_$i40: i1, out_$p41: ref, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$p152: ref, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$p169: ref, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$p177: ref, out_$p178: ref, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$p184: ref)
{

  entry:
    out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i30, out_$i31, out_$i32, out_$i33, out_$i39, out_$i29, out_$i40, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$p133, out_$p134, out_$p135, out_$p136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$p152, out_$p153, out_$p154, out_$p155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$p162, out_$p163, out_$p164, out_$p165, out_$p166, out_$p167, out_$p168, out_$p169, out_$p170, out_$p171, out_$p172, out_$p173, out_$p174, out_$p175, out_$p176, out_$p177, out_$p178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184 := in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i30, in_$i31, in_$i32, in_$i33, in_$i39, in_$i29, in_$i40, in_$p41, in_$i42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$i48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p53, in_$p54, in_$p55, in_$i56, in_$i57, in_$p58, in_$p59, in_$i60, in_$i61, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$p105, in_$p106, in_$p107, in_$p108, in_$p109, in_$p110, in_$p111, in_$p112, in_$p113, in_$p114, in_$p115, in_$p116, in_$p117, in_$p118, in_$p119, in_$p120, in_$p121, in_$p122, in_$p123, in_$p124, in_$p125, in_$p126, in_$p127, in_$p128, in_$p129, in_$p130, in_$p131, in_$p132, in_$p133, in_$p134, in_$p135, in_$p136, in_$p137, in_$p138, in_$p139, in_$p140, in_$p141, in_$p142, in_$p143, in_$p144, in_$p145, in_$p146, in_$p147, in_$p148, in_$p149, in_$p150, in_$p151, in_$p152, in_$p153, in_$p154, in_$p155, in_$p156, in_$p157, in_$p158, in_$p159, in_$p160, in_$p161, in_$p162, in_$p163, in_$p164, in_$p165, in_$p166, in_$p167, in_$p168, in_$p169, in_$p170, in_$p171, in_$p172, in_$p173, in_$p174, in_$p175, in_$p176, in_$p177, in_$p178, in_$p179, in_$p180, in_$p181, in_$p182, in_$p183, in_$p184;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_13805;

  $bb33:
    assume out_$i61 == 1;
    assume {:verifier.code 0} true;
    out_$p16 := out_$p41;
    goto $bb33_dummy;

  corral_source_split_13869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_13868:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(out_$i60, 0);
    goto corral_source_split_13869;

  corral_source_split_13867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3261} out_$i60 := ldv_undef_int();
    call {:si_unique_call 3262} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_13868;

  corral_source_split_13866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3260} ldv_file_operations_instance_release_0_2(out_$p59, in_$p4, in_$p2);
    goto corral_source_split_13867;

  corral_source_split_13865:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.167, out_$p58);
    goto corral_source_split_13866;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($u76, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_13865;

  corral_source_split_13863:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_13863;

  corral_source_split_13861:
    assume {:verifier.code 0} true;
    out_$p41 := out_$p26;
    assume true;
    goto $bb20, $bb21;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i29, 2);
    goto corral_source_split_13861;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb11;

  corral_source_split_13859:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i39;
    goto $bb11;

  $bb18:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_13859;

  corral_source_split_13891:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i56;
    assume true;
    goto $bb32, $bb18;

  corral_source_split_13890:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i56, 1);
    goto corral_source_split_13891;

  corral_source_split_13889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3270} out_$i56 := ldv_undef_int();
    call {:si_unique_call 3271} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_13890;

  corral_source_split_13888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3269} ldv_free(out_$p55);
    goto corral_source_split_13889;

  corral_source_split_13887:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_13888;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3268} ldv_free(out_$p43);
    goto corral_source_split_13887;

  $bb30:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_13885:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_13884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3267} ldv_file_operations_instance_write_0_4(out_$p54, in_$p2, out_$p43, $u1, out_$p45);
    goto corral_source_split_13885;

  corral_source_split_13883:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.166, out_$p53);
    goto corral_source_split_13884;

  corral_source_split_13882:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($u76, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_13883;

  $bb29:
    assume out_$i52 == 1;
    goto corral_source_split_13882;

  corral_source_split_13857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_13856:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_13857;

  corral_source_split_13855:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_13856;

  corral_source_split_13854:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.165, out_$p49);
    goto corral_source_split_13855;

  corral_source_split_13853:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($u76, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_13854;

  corral_source_split_13852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3259} ldv_assume(out_$i48);
    goto corral_source_split_13853;

  corral_source_split_13851:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i1.i32(out_$i47);
    goto corral_source_split_13852;

  corral_source_split_13850:
    assume {:verifier.code 0} true;
    out_$i47 := $ule.i64(out_$i46, 2147479552);
    goto corral_source_split_13851;

  corral_source_split_13849:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(in_$p13);
    goto corral_source_split_13850;

  corral_source_split_13848:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_13849;

  corral_source_split_13847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3258} out_$p44 := ldv_xmalloc(8);
    goto corral_source_split_13848;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3257} out_$p43 := ldv_xmalloc(1);
    goto corral_source_split_13847;

  $bb12:
    call out_$i39, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57 := ldv_file_operations_file_operations_instance_0_loop_$bb12(in_$p2, in_$p13, out_$i39, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57);
    goto $bb12_last;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_13830:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb32:
    assume {:verifier.code 0} true;
    assume out_$i57 == 1;
    assume false;
    return;

  $bb9:
    assume out_$i28 == 1;
    goto corral_source_split_13830;

  corral_source_split_13828:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i27;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_13827:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 1);
    goto corral_source_split_13828;

  corral_source_split_13826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3250} out_$i27 := ldv_undef_int();
    call {:si_unique_call 3251} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_13827;

  $bb8:
    call out_$p26, out_$i27, out_$i28, out_$i39, out_$i29, out_$i40, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$p133, out_$p134, out_$p135, out_$p136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$p152, out_$p153, out_$p154, out_$p155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$p162, out_$p163, out_$p164, out_$p165, out_$p166, out_$p167, out_$p168, out_$p169, out_$p170, out_$p171, out_$p172, out_$p173, out_$p174, out_$p175, out_$p176, out_$p177, out_$p178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184 := ldv_file_operations_file_operations_instance_0_loop_$bb8(in_$p2, in_$p6, in_$p8, in_$p10, in_$p13, out_$p26, out_$i27, out_$i28, out_$i39, out_$i29, out_$i40, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$p133, out_$p134, out_$p135, out_$p136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$p152, out_$p153, out_$p154, out_$p155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$p162, out_$p163, out_$p164, out_$p165, out_$p166, out_$p167, out_$p168, out_$p169, out_$p170, out_$p171, out_$p172, out_$p173, out_$p174, out_$p175, out_$p176, out_$p177, out_$p178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184);
    goto $bb8_last;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_13826;

  corral_source_split_13817:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p16;
    goto $bb8;

  corral_source_split_14239:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p183;
    assume false;
    return;

  corral_source_split_14238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3365} ldv_free(out_$p184);
    goto corral_source_split_14239;

  corral_source_split_14237:
    assume {:verifier.code 0} true;
    out_$p184 := $bitcast.ref.ref(out_$p183);
    goto corral_source_split_14238;

  $bb197:
    assume {:verifier.code 0} true;
    goto corral_source_split_14237;

  $bb198:
    assume {:verifier.code 0} true;
    out_$p183 := out_$p26;
    goto $bb197;

  $bb195:
    assume {:verifier.code 0} true;
    out_$p183 := out_$p62;
    goto $bb197;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14233:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14227:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14217:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14207:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14197:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14187:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14173:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14163:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14157:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14151:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14141:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14131:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14121:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14111:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14101:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14095:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14085:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14079:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14073:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14067:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14061:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14051:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14045:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14035:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14025:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14019:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14013:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14007:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_14001:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_13994:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_13984:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_13977:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_13967:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_13961:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_13955:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_13941:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_13927:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_13915:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_13905:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_13895:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3272} ldv_file_operations_instance_callback_0_108($u77, in_$p2, $u2, $u1);
    goto corral_source_split_13895;

  corral_source_split_13893:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb34:
    assume out_$i65 == 1;
    goto corral_source_split_13893;

  corral_source_split_13878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_13877:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 1);
    goto corral_source_split_13878;

  corral_source_split_13876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3264} out_$i64 := ldv_undef_int();
    call {:si_unique_call 3265} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_13877;

  corral_source_split_13875:
    assume {:verifier.code 0} true;
    out_$p63 := $bitcast.ref.ref(out_$p62);
    goto corral_source_split_13876;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3263} out_$p62 := ldv_xmalloc(240);
    goto corral_source_split_13875;

  corral_source_split_13873:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i42 == 1;
    goto corral_source_split_13873;

  corral_source_split_13871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i29, 3);
    goto corral_source_split_13871;

  $bb21:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_13904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3275} ldv_free(out_$p107);
    goto corral_source_split_13905;

  corral_source_split_13903:
    assume {:verifier.code 0} true;
    out_$p107 := $bitcast.ref.ref(out_$p106);
    goto corral_source_split_13904;

  SeqInstr_2244:
    goto corral_source_split_13903;

  SeqInstr_2243:
    assume assertsPassed;
    goto SeqInstr_2244;

  corral_source_split_13902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3274} ldv_file_operations_instance_callback_0_105($u78, out_$p106);
    goto SeqInstr_2243;

  corral_source_split_13901:
    assume {:verifier.code 0} true;
    out_$p106 := $bitcast.ref.ref(out_$p105);
    goto corral_source_split_13902;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3273} out_$p105 := ldv_xmalloc(3144);
    goto corral_source_split_13901;

  corral_source_split_13899:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb38:
    assume out_$i66 == 1;
    goto corral_source_split_13899;

  corral_source_split_13897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i32(out_$i64, 2);
    goto corral_source_split_13897;

  $bb35:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_13914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3278} ldv_free(out_$p110);
    goto corral_source_split_13915;

  corral_source_split_13913:
    assume {:verifier.code 0} true;
    out_$p110 := $bitcast.ref.ref(out_$p109);
    goto corral_source_split_13914;

  corral_source_split_13912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3277} ldv_file_operations_instance_callback_0_102($u79, out_$p109, $u80);
    goto corral_source_split_13913;

  corral_source_split_13911:
    assume {:verifier.code 0} true;
    out_$p109 := $bitcast.ref.ref(out_$p108);
    goto corral_source_split_13912;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3276} out_$p108 := ldv_xmalloc(3144);
    goto corral_source_split_13911;

  corral_source_split_13909:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb42:
    assume out_$i67 == 1;
    goto corral_source_split_13909;

  corral_source_split_13907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i64, 3);
    goto corral_source_split_13907;

  $bb39:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_13926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3283} ldv_free(out_$p114);
    goto corral_source_split_13927;

  corral_source_split_13925:
    assume {:verifier.code 0} true;
    out_$p114 := $bitcast.ref.ref(out_$p113);
    goto corral_source_split_13926;

  corral_source_split_13924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3282} ldv_free(out_$p111);
    goto corral_source_split_13925;

  corral_source_split_13923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3281} ldv_file_operations_instance_callback_0_99($u81, in_$p2, out_$p111, $u1, out_$p113);
    goto corral_source_split_13924;

  corral_source_split_13922:
    assume {:verifier.code 0} true;
    out_$p113 := $bitcast.ref.ref(out_$p112);
    goto corral_source_split_13923;

  corral_source_split_13921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3280} out_$p112 := ldv_xmalloc(8);
    goto corral_source_split_13922;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3279} out_$p111 := ldv_xmalloc(1);
    goto corral_source_split_13921;

  corral_source_split_13919:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb46:
    assume out_$i68 == 1;
    goto corral_source_split_13919;

  corral_source_split_13917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i64, 4);
    goto corral_source_split_13917;

  $bb43:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_13940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3288} ldv_free(out_$p120);
    goto corral_source_split_13941;

  corral_source_split_13939:
    assume {:verifier.code 0} true;
    out_$p120 := $bitcast.ref.ref(out_$p118);
    goto corral_source_split_13940;

  corral_source_split_13938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3287} ldv_free(out_$p119);
    goto corral_source_split_13939;

  corral_source_split_13937:
    assume {:verifier.code 0} true;
    out_$p119 := $bitcast.ref.ref(out_$p116);
    goto corral_source_split_13938;

  corral_source_split_13936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3286} ldv_file_operations_instance_callback_0_96($u82, out_$p116, $u22, $u2, $u2, out_$p118);
    goto corral_source_split_13937;

  corral_source_split_13935:
    assume {:verifier.code 0} true;
    out_$p118 := $bitcast.ref.ref(out_$p117);
    goto corral_source_split_13936;

  corral_source_split_13934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3285} out_$p117 := ldv_xmalloc(4);
    goto corral_source_split_13935;

  corral_source_split_13933:
    assume {:verifier.code 0} true;
    out_$p116 := $bitcast.ref.ref(out_$p115);
    goto corral_source_split_13934;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3284} out_$p115 := ldv_xmalloc(3144);
    goto corral_source_split_13933;

  corral_source_split_13931:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb50:
    assume out_$i69 == 1;
    goto corral_source_split_13931;

  corral_source_split_13929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i64, 5);
    goto corral_source_split_13929;

  $bb47:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_13954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3293} ldv_free(out_$p126);
    goto corral_source_split_13955;

  corral_source_split_13953:
    assume {:verifier.code 0} true;
    out_$p126 := $bitcast.ref.ref(out_$p124);
    goto corral_source_split_13954;

  corral_source_split_13952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3292} ldv_free(out_$p125);
    goto corral_source_split_13953;

  corral_source_split_13951:
    assume {:verifier.code 0} true;
    out_$p125 := $bitcast.ref.ref(out_$p122);
    goto corral_source_split_13952;

  corral_source_split_13950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3291} ldv_file_operations_instance_callback_0_93($u83, out_$p122, $u22, $u2, out_$p124);
    goto corral_source_split_13951;

  corral_source_split_13949:
    assume {:verifier.code 0} true;
    out_$p124 := $bitcast.ref.ref(out_$p123);
    goto corral_source_split_13950;

  corral_source_split_13948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3290} out_$p123 := ldv_xmalloc(4);
    goto corral_source_split_13949;

  corral_source_split_13947:
    assume {:verifier.code 0} true;
    out_$p122 := $bitcast.ref.ref(out_$p121);
    goto corral_source_split_13948;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3289} out_$p121 := ldv_xmalloc(3144);
    goto corral_source_split_13947;

  corral_source_split_13945:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume out_$i70 == 1;
    goto corral_source_split_13945;

  corral_source_split_13943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb53:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i64, 6);
    goto corral_source_split_13943;

  $bb51:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3294} ldv_file_operations_instance_callback_0_92($u84, in_$p2, $u85);
    goto corral_source_split_13961;

  corral_source_split_13959:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb58:
    assume out_$i71 == 1;
    goto corral_source_split_13959;

  corral_source_split_13957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i64, 7);
    goto corral_source_split_13957;

  $bb55:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3295} ldv_file_operations_instance_callback_0_91($u86, in_$p2, $u87);
    goto corral_source_split_13967;

  corral_source_split_13965:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb62:
    assume out_$i72 == 1;
    goto corral_source_split_13965;

  corral_source_split_13963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i64, 8);
    goto corral_source_split_13963;

  $bb59:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_13976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3298} ldv_free(out_$p129);
    goto corral_source_split_13977;

  corral_source_split_13975:
    assume {:verifier.code 0} true;
    out_$p129 := $bitcast.ref.ref(out_$p128);
    goto corral_source_split_13976;

  SeqInstr_2247:
    goto corral_source_split_13975;

  SeqInstr_2246:
    assume assertsPassed;
    goto SeqInstr_2247;

  corral_source_split_13974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3297} ldv_file_operations_instance_callback_0_88($u88, out_$p128, $u1);
    goto SeqInstr_2246;

  corral_source_split_13973:
    assume {:verifier.code 0} true;
    out_$p128 := $bitcast.ref.ref(out_$p127);
    goto corral_source_split_13974;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3296} out_$p127 := ldv_xmalloc(3144);
    goto corral_source_split_13973;

  corral_source_split_13971:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb66:
    assume out_$i73 == 1;
    goto corral_source_split_13971;

  corral_source_split_13969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb65:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i64, 9);
    goto corral_source_split_13969;

  $bb63:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_2250:
    goto corral_source_split_13984;

  SeqInstr_2249:
    assume assertsPassed;
    goto SeqInstr_2250;

  corral_source_split_13983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3299} ldv_file_operations_instance_callback_0_85($u89, $u2, out_$p130);
    goto SeqInstr_2249;

  $bb72:
    assume {:verifier.code 0} true;
    out_$p130 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_13983;

  corral_source_split_13981:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb70:
    assume out_$i74 == 1;
    goto corral_source_split_13981;

  corral_source_split_13979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb69:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i64, 10);
    goto corral_source_split_13979;

  $bb67:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_13993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3302} ldv_free(out_$p133);
    goto corral_source_split_13994;

  corral_source_split_13992:
    assume {:verifier.code 0} true;
    out_$p133 := $bitcast.ref.ref(out_$p132);
    goto corral_source_split_13993;

  corral_source_split_13991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3301} ldv_file_operations_instance_callback_0_82($u90, out_$p132, $u2);
    goto corral_source_split_13992;

  corral_source_split_13990:
    assume {:verifier.code 0} true;
    out_$p132 := $bitcast.ref.ref(out_$p131);
    goto corral_source_split_13991;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3300} out_$p131 := ldv_xmalloc(3144);
    goto corral_source_split_13990;

  corral_source_split_13988:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb74:
    assume out_$i75 == 1;
    goto corral_source_split_13988;

  corral_source_split_13986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb73:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i64, 11);
    goto corral_source_split_13986;

  $bb71:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_14000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3303} ldv_file_operations_instance_callback_0_81($u91, in_$p6, out_$p134);
    goto corral_source_split_14001;

  $bb80:
    assume {:verifier.code 0} true;
    out_$p134 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_14000;

  corral_source_split_13998:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb78:
    assume out_$i76 == 1;
    goto corral_source_split_13998;

  corral_source_split_13996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb77:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i64, 12);
    goto corral_source_split_13996;

  $bb75:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3304} ldv_file_operations_instance_callback_0_80($u92, in_$p6);
    goto corral_source_split_14007;

  corral_source_split_14005:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb82:
    assume out_$i77 == 1;
    goto corral_source_split_14005;

  corral_source_split_14003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb81:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i64, 13);
    goto corral_source_split_14003;

  $bb79:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3305} ldv_file_operations_instance_callback_0_79($u93, in_$p6);
    goto corral_source_split_14013;

  corral_source_split_14011:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb86:
    assume out_$i78 == 1;
    goto corral_source_split_14011;

  corral_source_split_14009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb85:
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i64, 14);
    goto corral_source_split_14009;

  $bb83:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3306} ldv_file_operations_instance_callback_0_78($u94, in_$p6);
    goto corral_source_split_14019;

  corral_source_split_14017:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb90:
    assume out_$i79 == 1;
    goto corral_source_split_14017;

  corral_source_split_14015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb89:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i64, 15);
    goto corral_source_split_14015;

  $bb87:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3307} ldv_file_operations_instance_callback_0_77($u95, in_$p6, $u87);
    goto corral_source_split_14025;

  corral_source_split_14023:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb94:
    assume out_$i80 == 1;
    goto corral_source_split_14023;

  corral_source_split_14021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb93:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i32(out_$i64, 16);
    goto corral_source_split_14021;

  $bb91:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_14034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3310} ldv_free(out_$p137);
    goto corral_source_split_14035;

  corral_source_split_14033:
    assume {:verifier.code 0} true;
    out_$p137 := $bitcast.ref.ref(out_$p136);
    goto corral_source_split_14034;

  corral_source_split_14032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3309} ldv_file_operations_instance_callback_0_74($u96, out_$p136, in_$p13, $u97);
    goto corral_source_split_14033;

  corral_source_split_14031:
    assume {:verifier.code 0} true;
    out_$p136 := $bitcast.ref.ref(out_$p135);
    goto corral_source_split_14032;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3308} out_$p135 := ldv_xmalloc(3144);
    goto corral_source_split_14031;

  corral_source_split_14029:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb98:
    assume out_$i81 == 1;
    goto corral_source_split_14029;

  corral_source_split_14027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb97:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i64, 17);
    goto corral_source_split_14027;

  $bb95:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_14044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3313} ldv_free(out_$p140);
    goto corral_source_split_14045;

  corral_source_split_14043:
    assume {:verifier.code 0} true;
    out_$p140 := $bitcast.ref.ref(out_$p139);
    goto corral_source_split_14044;

  corral_source_split_14042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3312} ldv_file_operations_instance_callback_0_71($u98, out_$p139, $u99);
    goto corral_source_split_14043;

  corral_source_split_14041:
    assume {:verifier.code 0} true;
    out_$p139 := $bitcast.ref.ref(out_$p138);
    goto corral_source_split_14042;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3311} out_$p138 := ldv_xmalloc(3144);
    goto corral_source_split_14041;

  corral_source_split_14039:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb102:
    assume out_$i82 == 1;
    goto corral_source_split_14039;

  corral_source_split_14037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb101:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i64, 18);
    goto corral_source_split_14037;

  $bb99:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3314} ldv_file_operations_instance_callback_0_70($u100, in_$p6);
    goto corral_source_split_14051;

  corral_source_split_14049:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb106:
    assume out_$i83 == 1;
    goto corral_source_split_14049;

  corral_source_split_14047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb105:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i64, 19);
    goto corral_source_split_14047;

  $bb103:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_14060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3317} ldv_free(out_$p143);
    goto corral_source_split_14061;

  corral_source_split_14059:
    assume {:verifier.code 0} true;
    out_$p143 := $bitcast.ref.ref(out_$p142);
    goto corral_source_split_14060;

  corral_source_split_14058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3316} ldv_file_operations_instance_callback_0_67($u101, out_$p142, in_$p6, $u2);
    goto corral_source_split_14059;

  corral_source_split_14057:
    assume {:verifier.code 0} true;
    out_$p142 := $bitcast.ref.ref(out_$p141);
    goto corral_source_split_14058;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3315} out_$p141 := ldv_xmalloc(3144);
    goto corral_source_split_14057;

  corral_source_split_14055:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb110:
    assume out_$i84 == 1;
    goto corral_source_split_14055;

  corral_source_split_14053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb109:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i64, 20);
    goto corral_source_split_14053;

  $bb107:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3318} ldv_file_operations_instance_callback_0_66($u102, in_$p6, $u22);
    goto corral_source_split_14067;

  corral_source_split_14065:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb114:
    assume out_$i85 == 1;
    goto corral_source_split_14065;

  corral_source_split_14063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb113:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i64, 21);
    goto corral_source_split_14063;

  $bb111:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3319} ldv_file_operations_instance_callback_0_65($u93, in_$p6);
    goto corral_source_split_14073;

  corral_source_split_14071:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb118:
    assume out_$i86 == 1;
    goto corral_source_split_14071;

  corral_source_split_14069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb117:
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i64, 22);
    goto corral_source_split_14069;

  $bb115:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3320} ldv_file_operations_instance_callback_0_64($u103, in_$p6, $u22);
    goto corral_source_split_14079;

  corral_source_split_14077:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb122:
    assume out_$i87 == 1;
    goto corral_source_split_14077;

  corral_source_split_14075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb121:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i64, 23);
    goto corral_source_split_14075;

  $bb119:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3321} ldv_file_operations_instance_callback_0_63($u104, in_$p8, $u31);
    goto corral_source_split_14085;

  corral_source_split_14083:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb126:
    assume out_$i88 == 1;
    goto corral_source_split_14083;

  corral_source_split_14081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb125:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i64, 24);
    goto corral_source_split_14081;

  $bb123:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_14094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3324} ldv_free(out_$p146);
    goto corral_source_split_14095;

  corral_source_split_14093:
    assume {:verifier.code 0} true;
    out_$p146 := $bitcast.ref.ref(out_$p145);
    goto corral_source_split_14094;

  corral_source_split_14092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3323} ldv_file_operations_instance_callback_0_60($u105, out_$p145);
    goto corral_source_split_14093;

  corral_source_split_14091:
    assume {:verifier.code 0} true;
    out_$p145 := $bitcast.ref.ref(out_$p144);
    goto corral_source_split_14092;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3322} out_$p144 := ldv_xmalloc(1608);
    goto corral_source_split_14091;

  corral_source_split_14089:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb130:
    assume out_$i89 == 1;
    goto corral_source_split_14089;

  corral_source_split_14087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb129:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i64, 25);
    goto corral_source_split_14087;

  $bb127:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3325} ldv_file_operations_instance_callback_0_59($u106, in_$p10, $u31);
    goto corral_source_split_14101;

  corral_source_split_14099:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb134:
    assume out_$i90 == 1;
    goto corral_source_split_14099;

  corral_source_split_14097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb133:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i64, 26);
    goto corral_source_split_14097;

  $bb131:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_14110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3328} ldv_free(out_$p149);
    goto corral_source_split_14111;

  corral_source_split_14109:
    assume {:verifier.code 0} true;
    out_$p149 := $bitcast.ref.ref(out_$p148);
    goto corral_source_split_14110;

  SeqInstr_2253:
    goto corral_source_split_14109;

  SeqInstr_2252:
    assume assertsPassed;
    goto SeqInstr_2253;

  corral_source_split_14108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3327} ldv_file_operations_instance_callback_0_56($u107, out_$p148, $u108);
    goto SeqInstr_2252;

  corral_source_split_14107:
    assume {:verifier.code 0} true;
    out_$p148 := $bitcast.ref.ref(out_$p147);
    goto corral_source_split_14108;

  $bb140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3326} out_$p147 := ldv_xmalloc(1608);
    goto corral_source_split_14107;

  corral_source_split_14105:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb138:
    assume out_$i91 == 1;
    goto corral_source_split_14105;

  corral_source_split_14103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb137:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i64, 27);
    goto corral_source_split_14103;

  $bb135:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_14120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3331} ldv_free(out_$p152);
    goto corral_source_split_14121;

  corral_source_split_14119:
    assume {:verifier.code 0} true;
    out_$p152 := $bitcast.ref.ref(out_$p151);
    goto corral_source_split_14120;

  SeqInstr_2256:
    goto corral_source_split_14119;

  SeqInstr_2255:
    assume assertsPassed;
    goto SeqInstr_2256;

  corral_source_split_14118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3330} ldv_file_operations_instance_callback_0_53($u109, out_$p151, $u19);
    goto SeqInstr_2255;

  corral_source_split_14117:
    assume {:verifier.code 0} true;
    out_$p151 := $bitcast.ref.ref(out_$p150);
    goto corral_source_split_14118;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3329} out_$p150 := ldv_xmalloc(1608);
    goto corral_source_split_14117;

  corral_source_split_14115:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb142:
    assume out_$i92 == 1;
    goto corral_source_split_14115;

  corral_source_split_14113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb141:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i64, 28);
    goto corral_source_split_14113;

  $bb139:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_14130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3334} ldv_free(out_$p155);
    goto corral_source_split_14131;

  corral_source_split_14129:
    assume {:verifier.code 0} true;
    out_$p155 := $bitcast.ref.ref(out_$p154);
    goto corral_source_split_14130;

  corral_source_split_14128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3333} ldv_file_operations_instance_callback_0_50($u105, out_$p154);
    goto corral_source_split_14129;

  corral_source_split_14127:
    assume {:verifier.code 0} true;
    out_$p154 := $bitcast.ref.ref(out_$p153);
    goto corral_source_split_14128;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3332} out_$p153 := ldv_xmalloc(1608);
    goto corral_source_split_14127;

  corral_source_split_14125:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb146:
    assume out_$i93 == 1;
    goto corral_source_split_14125;

  corral_source_split_14123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb145:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i64, 29);
    goto corral_source_split_14123;

  $bb143:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_14140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3337} ldv_free(out_$p158);
    goto corral_source_split_14141;

  corral_source_split_14139:
    assume {:verifier.code 0} true;
    out_$p158 := $bitcast.ref.ref(out_$p157);
    goto corral_source_split_14140;

  corral_source_split_14138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3336} ldv_file_operations_instance_callback_0_47($u105, out_$p157);
    goto corral_source_split_14139;

  corral_source_split_14137:
    assume {:verifier.code 0} true;
    out_$p157 := $bitcast.ref.ref(out_$p156);
    goto corral_source_split_14138;

  $bb152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3335} out_$p156 := ldv_xmalloc(1608);
    goto corral_source_split_14137;

  corral_source_split_14135:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb150:
    assume out_$i94 == 1;
    goto corral_source_split_14135;

  corral_source_split_14133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb149:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i64, 30);
    goto corral_source_split_14133;

  $bb147:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_14150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3340} ldv_free(out_$p161);
    goto corral_source_split_14151;

  corral_source_split_14149:
    assume {:verifier.code 0} true;
    out_$p161 := $bitcast.ref.ref(out_$p160);
    goto corral_source_split_14150;

  SeqInstr_2259:
    goto corral_source_split_14149;

  SeqInstr_2258:
    assume assertsPassed;
    goto SeqInstr_2259;

  corral_source_split_14148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3339} ldv_file_operations_instance_callback_0_44($u109, out_$p160, $u19);
    goto SeqInstr_2258;

  corral_source_split_14147:
    assume {:verifier.code 0} true;
    out_$p160 := $bitcast.ref.ref(out_$p159);
    goto corral_source_split_14148;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3338} out_$p159 := ldv_xmalloc(1608);
    goto corral_source_split_14147;

  corral_source_split_14145:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb154:
    assume out_$i95 == 1;
    goto corral_source_split_14145;

  corral_source_split_14143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb153:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i64, 31);
    goto corral_source_split_14143;

  $bb151:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3341} ldv_file_operations_instance_callback_0_43($u106, in_$p10, $u31);
    goto corral_source_split_14157;

  corral_source_split_14155:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb158:
    assume out_$i96 == 1;
    goto corral_source_split_14155;

  corral_source_split_14153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb157:
    assume {:verifier.code 0} true;
    out_$i96 := $eq.i32(out_$i64, 32);
    goto corral_source_split_14153;

  $bb155:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3342} ldv_file_operations_instance_callback_0_40($u110, $u2, $u31);
    goto corral_source_split_14163;

  corral_source_split_14161:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb162:
    assume out_$i97 == 1;
    goto corral_source_split_14161;

  corral_source_split_14159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb161:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i64, 33);
    goto corral_source_split_14159;

  $bb159:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  corral_source_split_14172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3345} ldv_free(out_$p164);
    goto corral_source_split_14173;

  corral_source_split_14171:
    assume {:verifier.code 0} true;
    out_$p164 := $bitcast.ref.ref(out_$p163);
    goto corral_source_split_14172;

  corral_source_split_14170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3344} ldv_file_operations_instance_callback_0_37($u90, out_$p163, $u2);
    goto corral_source_split_14171;

  corral_source_split_14169:
    assume {:verifier.code 0} true;
    out_$p163 := $bitcast.ref.ref(out_$p162);
    goto corral_source_split_14170;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3343} out_$p162 := ldv_xmalloc(3144);
    goto corral_source_split_14169;

  corral_source_split_14167:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb166:
    assume out_$i98 == 1;
    goto corral_source_split_14167;

  corral_source_split_14165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb165:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i64, 34);
    goto corral_source_split_14165;

  $bb163:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_14186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3350} ldv_free(out_$p170);
    goto corral_source_split_14187;

  corral_source_split_14185:
    assume {:verifier.code 0} true;
    out_$p170 := $bitcast.ref.ref(out_$p168);
    goto corral_source_split_14186;

  corral_source_split_14184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3349} ldv_free(out_$p169);
    goto corral_source_split_14185;

  corral_source_split_14183:
    assume {:verifier.code 0} true;
    out_$p169 := $bitcast.ref.ref(out_$p166);
    goto corral_source_split_14184;

  SeqInstr_2262:
    goto corral_source_split_14183;

  SeqInstr_2261:
    assume assertsPassed;
    goto SeqInstr_2262;

  corral_source_split_14182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3348} ldv_file_operations_instance_callback_0_34($u111, out_$p166, $u28, $u2, out_$p168);
    goto SeqInstr_2261;

  corral_source_split_14181:
    assume {:verifier.code 0} true;
    out_$p168 := $bitcast.ref.ref(out_$p167);
    goto corral_source_split_14182;

  corral_source_split_14180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3347} out_$p167 := ldv_xmalloc(8);
    goto corral_source_split_14181;

  corral_source_split_14179:
    assume {:verifier.code 0} true;
    out_$p166 := $bitcast.ref.ref(out_$p165);
    goto corral_source_split_14180;

  $bb172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3346} out_$p165 := ldv_xmalloc(728);
    goto corral_source_split_14179;

  corral_source_split_14177:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb170:
    assume out_$i99 == 1;
    goto corral_source_split_14177;

  corral_source_split_14175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb169:
    assume {:verifier.code 0} true;
    out_$i99 := $eq.i32(out_$i64, 35);
    goto corral_source_split_14175;

  $bb167:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_14196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3353} ldv_free(out_$p173);
    goto corral_source_split_14197;

  corral_source_split_14195:
    assume {:verifier.code 0} true;
    out_$p173 := $bitcast.ref.ref(out_$p172);
    goto corral_source_split_14196;

  corral_source_split_14194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3352} ldv_file_operations_instance_callback_0_31($u112, out_$p172, $u28, $u2);
    goto corral_source_split_14195;

  corral_source_split_14193:
    assume {:verifier.code 0} true;
    out_$p172 := $bitcast.ref.ref(out_$p171);
    goto corral_source_split_14194;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3351} out_$p171 := ldv_xmalloc(728);
    goto corral_source_split_14193;

  corral_source_split_14191:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb174:
    assume out_$i100 == 1;
    goto corral_source_split_14191;

  corral_source_split_14189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb173:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i64, 36);
    goto corral_source_split_14189;

  $bb171:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_14206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3356} ldv_free(out_$p176);
    goto corral_source_split_14207;

  corral_source_split_14205:
    assume {:verifier.code 0} true;
    out_$p176 := $bitcast.ref.ref(out_$p175);
    goto corral_source_split_14206;

  SeqInstr_2265:
    goto corral_source_split_14205;

  SeqInstr_2264:
    assume assertsPassed;
    goto SeqInstr_2265;

  corral_source_split_14204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3355} ldv_file_operations_instance_callback_0_28($u113, out_$p175, $u28, $u114);
    goto SeqInstr_2264;

  corral_source_split_14203:
    assume {:verifier.code 0} true;
    out_$p175 := $bitcast.ref.ref(out_$p174);
    goto corral_source_split_14204;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3354} out_$p174 := ldv_xmalloc(728);
    goto corral_source_split_14203;

  corral_source_split_14201:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb178:
    assume out_$i101 == 1;
    goto corral_source_split_14201;

  corral_source_split_14199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb177:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i64, 37);
    goto corral_source_split_14199;

  $bb175:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_14216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3359} ldv_free(out_$p179);
    goto corral_source_split_14217;

  corral_source_split_14215:
    assume {:verifier.code 0} true;
    out_$p179 := $bitcast.ref.ref(out_$p178);
    goto corral_source_split_14216;

  corral_source_split_14214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3358} ldv_file_operations_instance_callback_0_25($u115, out_$p178, $u2);
    goto corral_source_split_14215;

  corral_source_split_14213:
    assume {:verifier.code 0} true;
    out_$p178 := $bitcast.ref.ref(out_$p177);
    goto corral_source_split_14214;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3357} out_$p177 := ldv_xmalloc(3144);
    goto corral_source_split_14213;

  corral_source_split_14211:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb182:
    assume out_$i102 == 1;
    goto corral_source_split_14211;

  corral_source_split_14209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb181:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i64, 38);
    goto corral_source_split_14209;

  $bb179:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_14226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3362} ldv_free(out_$p182);
    goto corral_source_split_14227;

  corral_source_split_14225:
    assume {:verifier.code 0} true;
    out_$p182 := $bitcast.ref.ref(out_$p181);
    goto corral_source_split_14226;

  corral_source_split_14224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3361} ldv_file_operations_instance_callback_0_22($u116, out_$p181);
    goto corral_source_split_14225;

  corral_source_split_14223:
    assume {:verifier.code 0} true;
    out_$p181 := $bitcast.ref.ref(out_$p180);
    goto corral_source_split_14224;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3360} out_$p180 := ldv_xmalloc(240);
    goto corral_source_split_14223;

  corral_source_split_14221:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb186:
    assume out_$i103 == 1;
    goto corral_source_split_14221;

  corral_source_split_14219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb185:
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(out_$i64, 39);
    goto corral_source_split_14219;

  $bb183:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3363} ldv_file_operations_instance_callback_0_5($u117, out_$p63);
    goto corral_source_split_14233;

  corral_source_split_14231:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb190:
    assume out_$i104 == 1;
    goto corral_source_split_14231;

  corral_source_split_14229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb189:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i64, 40);
    goto corral_source_split_14229;

  $bb187:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  corral_source_split_14235:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3364} ldv_stop();
    goto corral_source_split_14235;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb191:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_13880:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3266} ldv_stop();
    goto corral_source_split_13880;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_13816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3246} ldv_assume(out_$i25);
    goto corral_source_split_13817;

  corral_source_split_13815:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i1.i32(out_$i24);
    goto corral_source_split_13816;

  corral_source_split_13814:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i23, 0);
    goto corral_source_split_13815;

  $bb6:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_13814;

  corral_source_split_13812:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i20;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_13811:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_13812;

  corral_source_split_13810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3244} out_$i21 := ldv_undef_int();
    call {:si_unique_call 3245} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_13811;

  corral_source_split_13809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3242} out_$i20 := ldv_filter_err_code(out_$i19);
    call {:si_unique_call 3243} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_13810;

  corral_source_split_13808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3240} out_$i19 := ldv_file_operations_instance_probe_0_12(out_$p18, in_$p4, in_$p2);
    call {:si_unique_call 3241} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_13809;

  corral_source_split_13807:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.164, out_$p17);
    goto corral_source_split_13808;

  $bb5:
    call out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i30, out_$i31, out_$i32, out_$i33 := ldv_file_operations_file_operations_instance_0_loop_$bb5(in_$p2, in_$p4, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i30, out_$i31, out_$i32, out_$i33);
    goto $bb5_last;

  $bb5_last:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($u76, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_13807;

  corral_source_split_13805:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i33 == 1;
    assume false;
    return;

  corral_source_split_13824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_13823:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_13824;

  corral_source_split_13822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3248} out_$i32 := ldv_undef_int();
    call {:si_unique_call 3249} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_13823;

  corral_source_split_13821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3247} ldv_assume(out_$i31);
    goto corral_source_split_13822;

  corral_source_split_13820:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i1.i32(out_$i30);
    goto corral_source_split_13821;

  corral_source_split_13819:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i20, 0);
    goto corral_source_split_13820;

  $bb7:
    assume !(out_$i22 == 1);
    goto corral_source_split_13819;

  $bb33_dummy:
    call {:si_unique_call 1} out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i30, out_$i31, out_$i32, out_$i33, out_$i39, out_$i29, out_$i40, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$p133, out_$p134, out_$p135, out_$p136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$p152, out_$p153, out_$p154, out_$p155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$p162, out_$p163, out_$p164, out_$p165, out_$p166, out_$p167, out_$p168, out_$p169, out_$p170, out_$p171, out_$p172, out_$p173, out_$p174, out_$p175, out_$p176, out_$p177, out_$p178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184 := ldv_file_operations_file_operations_instance_0_loop_$bb4(in_$p2, in_$p4, in_$p6, in_$p8, in_$p10, in_$p13, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i30, out_$i31, out_$i32, out_$i33, out_$i39, out_$i29, out_$i40, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$p133, out_$p134, out_$p135, out_$p136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$p152, out_$p153, out_$p154, out_$p155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$p162, out_$p163, out_$p164, out_$p165, out_$p166, out_$p167, out_$p168, out_$p169, out_$p170, out_$p171, out_$p172, out_$p173, out_$p174, out_$p175, out_$p176, out_$p177, out_$p178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184);
    return;

  exit:
    return;
}



procedure ldv_file_operations_file_operations_instance_0_loop_$bb4(in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$p10: ref, in_$p13: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i39: i32, in_$i29: i32, in_$i40: i1, in_$p41: ref, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$p152: ref, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$p169: ref, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$p177: ref, in_$p178: ref, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$p184: ref) returns (out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i39: i32, out_$i29: i32, out_$i40: i1, out_$p41: ref, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$p152: ref, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$p169: ref, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$p177: ref, out_$p178: ref, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$p184: ref);
  modifies $CurrAddr, $M.6, $M.46, $M.64, $M.40, assertsPassed, $M.35, $M.65, $M.76, $M.32, $M.42, $M.53, $M.75, $M.71, $M.43, $M.36, $M.55, $M.67, $M.68, $M.69, $M.70, $M.56, $M.107, $M.108, $M.109, $M.110, $M.111, $M.41, $M.72, $M.38, $M.39, $M.73, $M.74, $M.52, $M.49, $M.44, $M.37, $M.54, $M.61, $M.33, $M.62, $M.63;



implementation ldv_pci_pci_instance_1_loop_$bb11(in_$i26: i32, in_$i30: i32, in_$i31: i1) returns (out_$i26: i32, out_$i30: i32, out_$i31: i1)
{

  entry:
    out_$i26, out_$i30, out_$i31 := in_$i26, in_$i30, in_$i31;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb28:
    assume {:verifier.code 0} true;
    assume out_$i31 == 1;
    goto $bb28_dummy;

  corral_source_split_14428:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i30;
    assume true;
    goto $bb28;

  corral_source_split_14427:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 1);
    goto corral_source_split_14428;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3453} out_$i30 := ldv_undef_int();
    call {:si_unique_call 3454} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_14427;

  $bb28_dummy:
    call {:si_unique_call 1} out_$i26, out_$i30, out_$i31 := ldv_pci_pci_instance_1_loop_$bb11(out_$i26, out_$i30, out_$i31);
    return;

  exit:
    return;
}



procedure ldv_pci_pci_instance_1_loop_$bb11(in_$i26: i32, in_$i30: i32, in_$i31: i1) returns (out_$i26: i32, out_$i30: i32, out_$i31: i1);



implementation ldv_pci_pci_instance_1_loop_$bb7(in_$p1: ref, in_$p3: ref, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i26: i32, in_$i19: i32, in_$i27: i1, in_$i28: i32, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$p64: ref, in_$p65: ref) returns (out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i26: i32, out_$i19: i32, out_$i27: i1, out_$i28: i32, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$p64: ref, out_$p65: ref)
{

  entry:
    out_$i16, out_$i17, out_$i18, out_$i26, out_$i19, out_$i27, out_$i28, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65 := in_$i16, in_$i17, in_$i18, in_$i26, in_$i19, in_$i27, in_$i28, in_$i30, in_$i31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p54, in_$p55, in_$i56, in_$i57, in_$p58, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$p64, in_$p65;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_14416;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i53;
    goto $bb40_dummy;

  $bb39:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_14493:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_2307:
    goto corral_source_split_14493;

  SeqInstr_2306:
    assume assertsPassed;
    goto SeqInstr_2307;

  corral_source_split_14492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3465} ldv_pci_instance_resume_1_5(out_$p65, in_$p3);
    goto SeqInstr_2306;

  corral_source_split_14491:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.177, out_$p64);
    goto corral_source_split_14492;

  corral_source_split_14490:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_14491;

  $bb38:
    assume out_$i63 == 1;
    goto corral_source_split_14490;

  corral_source_split_14488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_14487:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i64(out_$i62, 0);
    goto corral_source_split_14488;

  corral_source_split_14486:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(out_$p61);
    goto corral_source_split_14487;

  corral_source_split_14485:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.176, out_$p60);
    goto corral_source_split_14486;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_14485;

  $bb36:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_14483:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_2304:
    goto corral_source_split_14483;

  SeqInstr_2303:
    assume assertsPassed;
    goto SeqInstr_2304;

  corral_source_split_14482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3464} ldv_pci_instance_resume_early_1_6(out_$p59, in_$p3);
    goto SeqInstr_2303;

  corral_source_split_14481:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.175, out_$p58);
    goto corral_source_split_14482;

  corral_source_split_14480:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_14481;

  $bb35:
    assume out_$i57 == 1;
    goto corral_source_split_14480;

  corral_source_split_14478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_14477:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i56, 0);
    goto corral_source_split_14478;

  corral_source_split_14476:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p55);
    goto corral_source_split_14477;

  corral_source_split_14475:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.174, out_$p54);
    goto corral_source_split_14476;

  corral_source_split_14474:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_14475;

  corral_source_split_14473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3462} out_$i53 := ldv_filter_err_code(out_$i52);
    call {:si_unique_call 3463} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_14474;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_14473;

  $bb33:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    out_$i52 := out_$i42;
    goto $bb34;

  corral_source_split_14471:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i51;
    goto $bb34;

  SeqInstr_2301:
    call {:si_unique_call 3461} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_14471;

  SeqInstr_2300:
    assume assertsPassed;
    goto SeqInstr_2301;

  corral_source_split_14470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3460} out_$i51 := ldv_pci_instance_suspend_late_1_7(out_$p48, in_$p3, out_$i50);
    goto SeqInstr_2300;

  corral_source_split_14469:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.171, out_$p49);
    goto corral_source_split_14470;

  corral_source_split_14468:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_14469;

  corral_source_split_14467:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.173, out_$p47);
    goto corral_source_split_14468;

  corral_source_split_14466:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_14467;

  $bb32:
    assume out_$i46 == 1;
    goto corral_source_split_14466;

  corral_source_split_14464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_14463:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, 0);
    goto corral_source_split_14464;

  corral_source_split_14462:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_14463;

  corral_source_split_14461:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.172, out_$p43);
    goto corral_source_split_14462;

  corral_source_split_14460:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_14461;

  corral_source_split_14459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3458} out_$i42 := ldv_filter_err_code(out_$i41);
    call {:si_unique_call 3459} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_14460;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_14459;

  $bb30:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    out_$i41 := out_$i16;
    goto $bb31;

  corral_source_split_14457:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i40;
    goto $bb31;

  SeqInstr_2298:
    call {:si_unique_call 3457} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_14457;

  SeqInstr_2297:
    assume assertsPassed;
    goto SeqInstr_2298;

  corral_source_split_14456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3456} out_$i40 := ldv_pci_instance_suspend_1_8(out_$p37, in_$p3, out_$i39);
    goto SeqInstr_2297;

  corral_source_split_14455:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.171, out_$p38);
    goto corral_source_split_14456;

  corral_source_split_14454:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_14455;

  corral_source_split_14453:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.170, out_$p36);
    goto corral_source_split_14454;

  corral_source_split_14452:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_14453;

  $bb29:
    assume out_$i35 == 1;
    goto corral_source_split_14452;

  corral_source_split_14439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_14438:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_14439;

  corral_source_split_14437:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_14438;

  corral_source_split_14436:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.169, out_$p32);
    goto corral_source_split_14437;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_14436;

  corral_source_split_14434:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i27 == 1;
    goto corral_source_split_14434;

  corral_source_split_14432:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i19;
    assume true;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i19, 2);
    goto corral_source_split_14432;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb9:
    assume {:verifier.code 0} true;
    assume !(out_$i18 == 1);
    goto $bb10;

  corral_source_split_14430:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i26;
    goto $bb10;

  $bb17:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_14430;

  corral_source_split_14428:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i30;
    assume true;
    goto $bb28, $bb17;

  corral_source_split_14427:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 1);
    goto corral_source_split_14428;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3453} out_$i30 := ldv_undef_int();
    call {:si_unique_call 3454} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_14427;

  $bb11:
    call out_$i26, out_$i30, out_$i31 := ldv_pci_pci_instance_1_loop_$bb11(out_$i26, out_$i30, out_$i31);
    goto $bb11_last;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_14420:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb28:
    assume {:verifier.code 0} true;
    assume out_$i31 == 1;
    assume false;
    return;

  $bb8:
    assume out_$i18 == 1;
    goto corral_source_split_14420;

  corral_source_split_14418:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i17;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_14417:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i17, 1);
    goto corral_source_split_14418;

  corral_source_split_14416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3449} out_$i17 := ldv_undef_int();
    call {:si_unique_call 3450} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_14417;

  $bb40_dummy:
    call {:si_unique_call 1} out_$i16, out_$i17, out_$i18, out_$i26, out_$i19, out_$i27, out_$i28, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65 := ldv_pci_pci_instance_1_loop_$bb7(in_$p1, in_$p3, out_$i16, out_$i17, out_$i18, out_$i26, out_$i19, out_$i27, out_$i28, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65);
    return;

  exit:
    return;
}



procedure ldv_pci_pci_instance_1_loop_$bb7(in_$p1: ref, in_$p3: ref, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i26: i32, in_$i19: i32, in_$i27: i1, in_$i28: i32, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$p64: ref, in_$p65: ref) returns (out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i26: i32, out_$i19: i32, out_$i27: i1, out_$i28: i32, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$p64: ref, out_$p65: ref);
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54, $M.182, $M.181;



implementation ldv_pci_pci_instance_1_loop_$bb4(in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$i14: i1, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i20: i1, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i26: i32, in_$i19: i32, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$i69: i1, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref) returns (out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$i14: i1, out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i20: i1, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i26: i32, out_$i19: i32, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$i69: i1, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i20, out_$i21, out_$i22, out_$i23, out_$i26, out_$i19, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$p73 := in_$p8, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i20, in_$i21, in_$i22, in_$i23, in_$i26, in_$i19, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p54, in_$p55, in_$i56, in_$i57, in_$p58, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$p64, in_$p65, in_$p66, in_$p67, in_$i68, in_$i69, in_$p70, in_$p71, in_$p72, in_$p73;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3440} ldv_ldv_pre_probe_116();
    goto corral_source_split_14398;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i23 == 1;
    goto $bb13_dummy;

  corral_source_split_14423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_14422:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_14423;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3451} out_$i22 := ldv_undef_int();
    call {:si_unique_call 3452} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_14422;

  corral_source_split_14414:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_14502:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_14501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3467} ldv_pci_instance_release_1_2(out_$p73, in_$p3);
    goto corral_source_split_14502;

  corral_source_split_14500:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.180, out_$p72);
    goto corral_source_split_14501;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_14500;

  $bb42:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_14498:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_2310:
    goto corral_source_split_14498;

  SeqInstr_2309:
    assume assertsPassed;
    goto SeqInstr_2310;

  corral_source_split_14497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3466} ldv_pci_instance_shutdown_1_3(out_$p71, in_$p3);
    goto SeqInstr_2309;

  corral_source_split_14496:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.179, out_$p70);
    goto corral_source_split_14497;

  corral_source_split_14495:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_14496;

  $bb41:
    assume out_$i69 == 1;
    goto corral_source_split_14495;

  corral_source_split_14448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_14447:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i64(out_$i68, 0);
    goto corral_source_split_14448;

  corral_source_split_14446:
    assume {:verifier.code 0} true;
    out_$i68 := $p2i.ref.i64(out_$p67);
    goto corral_source_split_14447;

  corral_source_split_14445:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.178, out_$p66);
    goto corral_source_split_14446;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_14445;

  corral_source_split_14443:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i29 == 1;
    goto corral_source_split_14443;

  corral_source_split_14441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i28, 3);
    goto corral_source_split_14441;

  $bb20:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_14432:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i19;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i19, 2);
    goto corral_source_split_14432;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb9:
    assume {:verifier.code 0} true;
    assume !(out_$i18 == 1);
    goto $bb10;

  corral_source_split_14430:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i26;
    goto $bb10;

  $bb17:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_14430;

  corral_source_split_14428:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i30;
    assume true;
    goto $bb28, $bb17;

  corral_source_split_14427:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 1);
    goto corral_source_split_14428;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3453} out_$i30 := ldv_undef_int();
    call {:si_unique_call 3454} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_14427;

  $bb11:
    call out_$i26, out_$i30, out_$i31 := ldv_pci_pci_instance_1_loop_$bb11(out_$i26, out_$i30, out_$i31);
    goto $bb11_last;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_14420:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb28:
    assume {:verifier.code 0} true;
    assume out_$i31 == 1;
    assume false;
    return;

  $bb8:
    assume out_$i18 == 1;
    goto corral_source_split_14420;

  corral_source_split_14418:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i17;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_14417:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i17, 1);
    goto corral_source_split_14418;

  corral_source_split_14416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3449} out_$i17 := ldv_undef_int();
    call {:si_unique_call 3450} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_14417;

  $bb7:
    call out_$i16, out_$i17, out_$i18, out_$i26, out_$i19, out_$i27, out_$i28, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65 := ldv_pci_pci_instance_1_loop_$bb7(in_$p1, in_$p3, out_$i16, out_$i17, out_$i18, out_$i26, out_$i19, out_$i27, out_$i28, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65);
    goto $bb7_last;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_14416;

  corral_source_split_14409:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i11;
    goto $bb7;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i53;
    assume false;
    return;

  $bb39:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_14493:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_2307:
    goto corral_source_split_14493;

  SeqInstr_2306:
    assume assertsPassed;
    goto SeqInstr_2307;

  corral_source_split_14492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3465} ldv_pci_instance_resume_1_5(out_$p65, in_$p3);
    goto SeqInstr_2306;

  corral_source_split_14491:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.177, out_$p64);
    goto corral_source_split_14492;

  corral_source_split_14490:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_14491;

  $bb38:
    assume out_$i63 == 1;
    goto corral_source_split_14490;

  corral_source_split_14488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_14487:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i64(out_$i62, 0);
    goto corral_source_split_14488;

  corral_source_split_14486:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(out_$p61);
    goto corral_source_split_14487;

  corral_source_split_14485:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.176, out_$p60);
    goto corral_source_split_14486;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_14485;

  $bb36:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_14483:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_2304:
    goto corral_source_split_14483;

  SeqInstr_2303:
    assume assertsPassed;
    goto SeqInstr_2304;

  corral_source_split_14482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3464} ldv_pci_instance_resume_early_1_6(out_$p59, in_$p3);
    goto SeqInstr_2303;

  corral_source_split_14481:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.175, out_$p58);
    goto corral_source_split_14482;

  corral_source_split_14480:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_14481;

  $bb35:
    assume out_$i57 == 1;
    goto corral_source_split_14480;

  corral_source_split_14478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_14477:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i56, 0);
    goto corral_source_split_14478;

  corral_source_split_14476:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p55);
    goto corral_source_split_14477;

  corral_source_split_14475:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.174, out_$p54);
    goto corral_source_split_14476;

  corral_source_split_14474:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_14475;

  corral_source_split_14473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3462} out_$i53 := ldv_filter_err_code(out_$i52);
    call {:si_unique_call 3463} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_14474;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_14473;

  $bb33:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    out_$i52 := out_$i42;
    goto $bb34;

  corral_source_split_14471:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i51;
    goto $bb34;

  SeqInstr_2301:
    call {:si_unique_call 3461} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_14471;

  SeqInstr_2300:
    assume assertsPassed;
    goto SeqInstr_2301;

  corral_source_split_14470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3460} out_$i51 := ldv_pci_instance_suspend_late_1_7(out_$p48, in_$p3, out_$i50);
    goto SeqInstr_2300;

  corral_source_split_14469:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.171, out_$p49);
    goto corral_source_split_14470;

  corral_source_split_14468:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_14469;

  corral_source_split_14467:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.173, out_$p47);
    goto corral_source_split_14468;

  corral_source_split_14466:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_14467;

  $bb32:
    assume out_$i46 == 1;
    goto corral_source_split_14466;

  corral_source_split_14464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_14463:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, 0);
    goto corral_source_split_14464;

  corral_source_split_14462:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_14463;

  corral_source_split_14461:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.172, out_$p43);
    goto corral_source_split_14462;

  corral_source_split_14460:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_14461;

  corral_source_split_14459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3458} out_$i42 := ldv_filter_err_code(out_$i41);
    call {:si_unique_call 3459} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_14460;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_14459;

  $bb30:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    out_$i41 := out_$i16;
    goto $bb31;

  corral_source_split_14457:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i40;
    goto $bb31;

  SeqInstr_2298:
    call {:si_unique_call 3457} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_14457;

  SeqInstr_2297:
    assume assertsPassed;
    goto SeqInstr_2298;

  corral_source_split_14456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3456} out_$i40 := ldv_pci_instance_suspend_1_8(out_$p37, in_$p3, out_$i39);
    goto SeqInstr_2297;

  corral_source_split_14455:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.171, out_$p38);
    goto corral_source_split_14456;

  corral_source_split_14454:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_14455;

  corral_source_split_14453:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.170, out_$p36);
    goto corral_source_split_14454;

  corral_source_split_14452:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_14453;

  $bb29:
    assume out_$i35 == 1;
    goto corral_source_split_14452;

  corral_source_split_14439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_14438:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_14439;

  corral_source_split_14437:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_14438;

  corral_source_split_14436:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.169, out_$p32);
    goto corral_source_split_14437;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_14436;

  corral_source_split_14434:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i27 == 1;
    goto corral_source_split_14434;

  corral_source_split_14408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3447} ldv_assume(out_$i15);
    goto corral_source_split_14409;

  corral_source_split_14407:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i1.i32(out_$i14);
    goto corral_source_split_14408;

  corral_source_split_14406:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i11, 0);
    goto corral_source_split_14407;

  $bb5:
    assume out_$i13 == 1;
    goto corral_source_split_14406;

  corral_source_split_14404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_14403:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i12, 0);
    goto corral_source_split_14404;

  corral_source_split_14402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3445} out_$i12 := ldv_undef_int();
    call {:si_unique_call 3446} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_14403;

  SeqInstr_2295:
    call {:si_unique_call 3444} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_14402;

  SeqInstr_2294:
    assume assertsPassed;
    goto SeqInstr_2295;

  corral_source_split_14401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3443} out_$i11 := ldv_ldv_post_probe_117(out_$i10);
    goto SeqInstr_2294;

  corral_source_split_14400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3441} out_$i10 := ldv_pci_instance_probe_1_17(out_$p9, in_$p3, in_$p5);
    call {:si_unique_call 3442} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_14401;

  corral_source_split_14399:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.168, out_$p8);
    goto corral_source_split_14400;

  corral_source_split_14398:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref($u118, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_14399;

  corral_source_split_14413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3448} ldv_assume(out_$i21);
    goto corral_source_split_14414;

  corral_source_split_14412:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i1.i32(out_$i20);
    goto corral_source_split_14413;

  corral_source_split_14411:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i11, 0);
    goto corral_source_split_14412;

  $bb6:
    assume !(out_$i13 == 1);
    goto corral_source_split_14411;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i20, out_$i21, out_$i22, out_$i23, out_$i26, out_$i19, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$p73 := ldv_pci_pci_instance_1_loop_$bb4(in_$p1, in_$p3, in_$p5, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i20, out_$i21, out_$i22, out_$i23, out_$i26, out_$i19, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$p73);
    return;

  exit:
    return;
}



procedure ldv_pci_pci_instance_1_loop_$bb4(in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$i14: i1, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i20: i1, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i26: i32, in_$i19: i32, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$i69: i1, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref) returns (out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$i14: i1, out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i20: i1, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i26: i32, out_$i19: i32, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$i69: i1, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref);
  modifies $M.183, $M.184, $M.6, $M.46, $M.36, $CurrAddr, $M.35, $M.40, assertsPassed, $M.72, $M.38, $M.39, $M.42, $M.52, $M.37, $M.41, $M.44, $M.53, $M.55, $M.49, $M.73, $M.74, $M.43, $M.75, $M.65, $M.67, $M.68, $M.54, $M.69, $M.70, $M.32, $M.71, $M.64, $M.182, $M.181;



implementation ldv_pm_platform_instance_3_loop_$bb13(in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$i39: i32, in_$i40: i1) returns (out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$i39: i32, out_$i40: i1)
{

  entry:
    out_$i22, out_$i28, out_$i29, out_$i39, out_$i40 := in_$i22, in_$i28, in_$i29, in_$i39, in_$i40;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb34:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := out_$i39;
    goto $bb34_dummy;

  corral_source_split_14663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_14662:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 1);
    goto corral_source_split_14663;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3528} out_$i39 := ldv_undef_int();
    call {:si_unique_call 3529} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_14662;

  corral_source_split_14650:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_14643:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume out_$i28 == 1;
    goto corral_source_split_14643;

  corral_source_split_14641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i22, 2);
    goto corral_source_split_14641;

  corral_source_split_14649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3524} ldv_dispatch_pm_deregister_3_5();
    goto corral_source_split_14650;

  SeqInstr_2355:
    goto corral_source_split_14649;

  SeqInstr_2354:
    assume assertsPassed;
    goto SeqInstr_2355;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3523} ldv_dispatch_pm_register_3_6();
    goto SeqInstr_2354;

  corral_source_split_14647:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume out_$i29 == 1;
    goto corral_source_split_14647;

  corral_source_split_14645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i22, 3);
    goto corral_source_split_14645;

  $bb22:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb34_dummy:
    call {:si_unique_call 1} out_$i22, out_$i28, out_$i29, out_$i39, out_$i40 := ldv_pm_platform_instance_3_loop_$bb13(out_$i22, out_$i28, out_$i29, out_$i39, out_$i40);
    return;

  exit:
    return;
}



procedure ldv_pm_platform_instance_3_loop_$bb13(in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$i39: i32, in_$i40: i1) returns (out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$i39: i32, out_$i40: i1);
  modifies $CurrAddr, $M.6, $M.67, $M.68, $M.46, $M.32, $M.42, $M.69, $M.70, $M.41, $M.71, $M.43, $M.36, assertsPassed, $M.40, $M.35, $M.72, $M.38, $M.39, $M.52, $M.64, $M.37, $M.44, $M.53, $M.55, $M.49, $M.73, $M.74, $M.75, $M.65, $M.54;



implementation ldv_pm_platform_instance_3_loop_$bb4(in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1) returns (out_$i3: i32, out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1)
{

  entry:
    out_$i3, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i22, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40 := in_$i3, in_$p4, in_$p5, in_$p6, in_$p7, in_$i8, in_$i9, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i22, in_$i28, in_$i29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_14591;

  $bb15:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i25;
    goto $bb15_dummy;

  corral_source_split_14628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_14627:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_14628;

  corral_source_split_14626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3520} out_$i26 := ldv_undef_int();
    call {:si_unique_call 3521} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_14627;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_14626;

  corral_source_split_14622:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i14;
    goto $bb14;

  corral_source_split_14660:
    assume {:verifier.code 0} true;
    out_$i25 := 1;
    goto $bb14;

  corral_source_split_14659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3527} ldv_free(out_$p38);
    goto corral_source_split_14660;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_14659;

  $bb31:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_14657:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_2358:
    goto corral_source_split_14657;

  SeqInstr_2357:
    assume assertsPassed;
    goto SeqInstr_2358;

  corral_source_split_14656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3526} ldv_platform_instance_release_3_3(out_$p37, out_$p31);
    goto SeqInstr_2357;

  corral_source_split_14655:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.188, out_$p36);
    goto corral_source_split_14656;

  corral_source_split_14654:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($u119, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_14655;

  $bb30:
    assume out_$i35 == 1;
    goto corral_source_split_14654;

  corral_source_split_14639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_14638:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_14639;

  corral_source_split_14637:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_14638;

  corral_source_split_14636:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.187, out_$p32);
    goto corral_source_split_14637;

  corral_source_split_14635:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($u119, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_14636;

  corral_source_split_14634:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_14635;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3522} out_$p30 := ldv_xmalloc(1464);
    goto corral_source_split_14634;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_14632:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i21 == 1;
    goto $bb11;

  corral_source_split_14617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  corral_source_split_14616:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 1);
    goto corral_source_split_14617;

  corral_source_split_14615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3517} out_$i20 := ldv_undef_int();
    call {:si_unique_call 3518} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_14616;

  corral_source_split_14614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3516} ldv_assume(out_$i19);
    goto corral_source_split_14615;

  corral_source_split_14613:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i1.i32(out_$i18);
    goto corral_source_split_14614;

  corral_source_split_14612:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i14, 0);
    goto corral_source_split_14613;

  $bb8:
    assume out_$i17 == 1;
    goto corral_source_split_14612;

  corral_source_split_14610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_14609:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_14610;

  corral_source_split_14608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3514} out_$i16 := ldv_undef_int();
    call {:si_unique_call 3515} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_14609;

  corral_source_split_14607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3513} ldv_free(out_$p15);
    goto corral_source_split_14608;

  corral_source_split_14606:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p5);
    goto corral_source_split_14607;

  SeqInstr_2352:
    call {:si_unique_call 3512} {:cexpr "ldv_3_probed_default"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_14606;

  SeqInstr_2351:
    assume assertsPassed;
    goto SeqInstr_2352;

  corral_source_split_14605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3511} out_$i14 := ldv_ldv_post_probe_119(out_$i13);
    goto SeqInstr_2351;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_14605;

  $bb6:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := out_$i3;
    goto $bb7;

  corral_source_split_14603:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i12;
    goto $bb7;

  SeqInstr_2349:
    call {:si_unique_call 3510} {:cexpr "ldv_3_probed_default"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_14603;

  SeqInstr_2348:
    assume assertsPassed;
    goto SeqInstr_2349;

  corral_source_split_14602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3509} out_$i12 := ldv_platform_instance_probe_3_14(out_$p11, out_$p5);
    goto SeqInstr_2348;

  corral_source_split_14601:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.186, out_$p10);
    goto corral_source_split_14602;

  corral_source_split_14600:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($u119, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_14601;

  $bb5:
    assume out_$i9 == 1;
    goto corral_source_split_14600;

  corral_source_split_14598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_14597:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i64(out_$i8, 0);
    goto corral_source_split_14598;

  corral_source_split_14596:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_14597;

  corral_source_split_14595:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.185, out_$p6);
    goto corral_source_split_14596;

  corral_source_split_14594:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref($u119, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_14595;

  corral_source_split_14593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3508} ldv_ldv_pre_probe_118();
    goto corral_source_split_14594;

  corral_source_split_14592:
    assume {:verifier.code 0} true;
    out_$p5 := $bitcast.ref.ref(out_$p4);
    goto corral_source_split_14593;

  corral_source_split_14591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3507} out_$p4 := ldv_xmalloc(1464);
    goto corral_source_split_14592;

  $bb18:
    assume out_$i40 == 1;
    goto corral_source_split_14632;

  corral_source_split_14663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb34;

  corral_source_split_14662:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 1);
    goto corral_source_split_14663;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3528} out_$i39 := ldv_undef_int();
    call {:si_unique_call 3529} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_14662;

  corral_source_split_14650:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_14643:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume out_$i28 == 1;
    goto corral_source_split_14643;

  corral_source_split_14641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i22, 2);
    goto corral_source_split_14641;

  $bb13:
    call out_$i22, out_$i28, out_$i29, out_$i39, out_$i40 := ldv_pm_platform_instance_3_loop_$bb13(out_$i22, out_$i28, out_$i29, out_$i39, out_$i40);
    goto $bb13_last;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_14624:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i20;
    goto $bb13;

  $bb34:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := out_$i39;
    assume false;
    return;

  $bb12:
    assume !(out_$i21 == 1);
    goto corral_source_split_14624;

  corral_source_split_14649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3524} ldv_dispatch_pm_deregister_3_5();
    goto corral_source_split_14650;

  SeqInstr_2355:
    goto corral_source_split_14649;

  SeqInstr_2354:
    assume assertsPassed;
    goto SeqInstr_2355;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3523} ldv_dispatch_pm_register_3_6();
    goto SeqInstr_2354;

  corral_source_split_14647:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume out_$i29 == 1;
    goto corral_source_split_14647;

  corral_source_split_14645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i22, 3);
    goto corral_source_split_14645;

  $bb22:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_14621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3519} ldv_assume(out_$i24);
    goto corral_source_split_14622;

  corral_source_split_14620:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i32(out_$i23);
    goto corral_source_split_14621;

  corral_source_split_14619:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i14, 0);
    goto corral_source_split_14620;

  $bb9:
    assume !(out_$i17 == 1);
    goto corral_source_split_14619;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i3, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i22, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40 := ldv_pm_platform_instance_3_loop_$bb4(out_$i3, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i22, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40);
    return;

  exit:
    return;
}



procedure ldv_pm_platform_instance_3_loop_$bb4(in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1) returns (out_$i3: i32, out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1);
  modifies $M.6, $M.67, $M.68, $M.46, $M.69, $M.70, $M.32, $M.42, $CurrAddr, $M.71, $M.43, $M.41, $M.64, $M.36, $M.40, assertsPassed, $M.52, $M.72, $M.38, $M.39, $M.35, $M.37, $M.44, $M.53, $M.55, $M.65, $M.75, $M.49, $M.73, $M.74, $M.54, $M.183, $M.184;


