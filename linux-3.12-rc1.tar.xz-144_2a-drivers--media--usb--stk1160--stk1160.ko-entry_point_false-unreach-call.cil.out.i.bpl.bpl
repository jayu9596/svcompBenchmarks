var $M.0: [ref]i8;

var $M.1: i32;

var $M.2: ref;

var $M.3: ref;

var $M.4: [ref]i16;

var $M.5: [ref]i16;

var $M.6: [ref]i8;

var $M.7: [ref]ref;

var $M.8: [ref]i8;

var $M.9: [ref]ref;

var $M.10: i32;

var $M.11: [ref]i16;

var $M.12: [ref]i16;

var $M.13: [ref]i16;

var $M.14: [ref]i16;

var $M.15: i8;

var $M.16: i32;

var $M.17: ref;

var $M.18: i32;

var $M.19: ref;

var $M.20: [ref]i8;

var $M.21: i32;

var $M.22: ref;

var $M.23: i32;

var $M.24: i32;

var $M.25: i32;

var $M.26: i32;

var $M.27: i32;

var $M.28: i32;

var $M.29: i32;

var $M.30: i32;

var $M.31: i32;

var $M.32: i32;

var $M.33: i32;

var $M.34: i32;

var $M.35: ref;

var $M.36: i32;

var $M.37: ref;

var $M.38: ref;

var $M.39: ref;

var $M.40: ref;

var $M.41: ref;

var $M.42: ref;

var $M.43: ref;

var $M.44: ref;

var $M.45: [ref]i8;

var $M.46: [ref]i8;

var $M.47: [ref]i8;

var $M.48: ref;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.72: [ref]i8;

var $M.73: [ref]i16;

var $M.75: [ref]i8;

var $M.76: [ref]i8;

var $M.77: [ref]i8;

var $M.78: [ref]i8;

var $M.79: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 419272);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const stk1160_usb_driver_group1: ref;

axiom stk1160_usb_driver_group1 == $sub.ref(0, 2060);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 3088);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 4116);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 5144);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 6172);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 7200);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 8228);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 9256);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 10284);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 11312);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 12340);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 13368);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 14396);

const stk1160_ioctl_ops_group3: ref;

axiom stk1160_ioctl_ops_group3 == $sub.ref(0, 15428);

const stk1160_ioctl_ops_group0: ref;

axiom stk1160_ioctl_ops_group0 == $sub.ref(0, 16460);

const stk1160_ioctl_ops_group1: ref;

axiom stk1160_ioctl_ops_group1 == $sub.ref(0, 17492);

const stk1160_ioctl_ops_group4: ref;

axiom stk1160_ioctl_ops_group4 == $sub.ref(0, 18524);

const stk1160_ioctl_ops_group2: ref;

axiom stk1160_ioctl_ops_group2 == $sub.ref(0, 19556);

const stk1160_video_qops_group0: ref;

axiom stk1160_video_qops_group0 == $sub.ref(0, 20588);

const stk1160_fops_group0: ref;

axiom stk1160_fops_group0 == $sub.ref(0, 21620);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 22648);

const algo_group0: ref;

axiom algo_group0 == $sub.ref(0, 23680);

const stk1160_ac97_ops_group0: ref;

axiom stk1160_ac97_ops_group0 == $sub.ref(0, 24712);

const INTERF_STATE: ref;

axiom INTERF_STATE == $sub.ref(0, 25740);

const SERIAL_STATE: ref;

axiom SERIAL_STATE == $sub.ref(0, 26768);

const usb_intfdata: ref;

axiom usb_intfdata == $sub.ref(0, 27800);

const usb_urb: ref;

axiom usb_urb == $sub.ref(0, 28832);

const usb_dev: ref;

axiom usb_dev == $sub.ref(0, 29864);

const dev_counter: ref;

axiom dev_counter == $sub.ref(0, 30892);

const completeFnIntCounter: ref;

axiom completeFnIntCounter == $sub.ref(0, 31920);

const completeFnBulkCounter: ref;

axiom completeFnBulkCounter == $sub.ref(0, 32948);

const completeFnInt: ref;

axiom completeFnInt == $sub.ref(0, 33980);

const completeFnBulk: ref;

axiom completeFnBulk == $sub.ref(0, 35012);

const __mod_usb_device_table: ref;

axiom __mod_usb_device_table == $sub.ref(0, 36068);

const stk1160_ac97_ops: ref;

axiom stk1160_ac97_ops == $sub.ref(0, 37140);

const i2c_debug: ref;

axiom i2c_debug == $sub.ref(0, 38168);

const client_template: ref;

axiom client_template == $sub.ref(0, 40640);

const algo: ref;

axiom algo == $sub.ref(0, 41688);

const adap_template: ref;

axiom adap_template == $sub.ref(0, 44616);

const keep_buffers: ref;

axiom keep_buffers == $sub.ref(0, 45641);

const format: ref;

axiom format == $sub.ref(0, 46681);

const stk1160_ioctl_ops: ref;

axiom stk1160_ioctl_ops == $sub.ref(0, 48577);

const stk1160_fops: ref;

axiom stk1160_fops == $sub.ref(0, 49689);

const v4l_template: ref;

axiom v4l_template == $sub.ref(0, 52521);

const stk1160_video_qops: ref;

axiom stk1160_video_qops == $sub.ref(0, 53625);

const {:count 2} stk1160_id_table: ref;

axiom stk1160_id_table == $sub.ref(0, 54713);

const stk1160_usb_driver: ref;

axiom stk1160_usb_driver == $sub.ref(0, 56041);

const {:count 2} saa7113_addrs: ref;

axiom saa7113_addrs == $sub.ref(0, 57069);

const input: ref;

axiom input == $sub.ref(0, 58097);

const stk1160_ac97: ref;

axiom stk1160_ac97 == $sub.ref(0, 59129);

const vidioc_debug: ref;

axiom vidioc_debug == $sub.ref(0, 60157);

const {:count 8} .str.16: ref;

axiom .str.16 == $sub.ref(0, 61189);

const {:count 34} .str.2: ref;

axiom .str.2 == $sub.ref(0, 62247);

const {:count 37} .str.7: ref;

axiom .str.7 == $sub.ref(0, 63308);

const {:count 33} .str.8: ref;

axiom .str.8 == $sub.ref(0, 64365);

const {:count 30} .str.5: ref;

axiom .str.5 == $sub.ref(0, 65419);

const {:count 27} .str.6: ref;

axiom .str.6 == $sub.ref(0, 66470);

const {:count 25} .str.20: ref;

axiom .str.20 == $sub.ref(0, 67519);

const {:count 15} .str.21: ref;

axiom .str.21 == $sub.ref(0, 68558);

const {:count 20} .str.22: ref;

axiom .str.22 == $sub.ref(0, 69602);

const {:count 45} .str.23: ref;

axiom .str.23 == $sub.ref(0, 70671);

const {:count 46} .str.24: ref;

axiom .str.24 == $sub.ref(0, 71741);

const {:count 44} .str.25: ref;

axiom .str.25 == $sub.ref(0, 72809);

const {:count 13} .str.26: ref;

axiom .str.26 == $sub.ref(0, 73846);

const {:count 45} .str.27: ref;

axiom .str.27 == $sub.ref(0, 74915);

const {:count 6} .str.28: ref;

axiom .str.28 == $sub.ref(0, 75945);

const {:count 45} .str.3: ref;

axiom .str.3 == $sub.ref(0, 77014);

const {:count 35} .str.4: ref;

axiom .str.4 == $sub.ref(0, 78073);

const {:count 43} .str.42: ref;

axiom .str.42 == $sub.ref(0, 79140);

const {:count 42} .str.43: ref;

axiom .str.43 == $sub.ref(0, 80206);

const {:count 41} .str.1: ref;

axiom .str.1 == $sub.ref(0, 81271);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 14} .str.18: ref;

axiom .str.18 == $sub.ref(0, 82309);

const {:count 33} .str.19: ref;

axiom .str.19 == $sub.ref(0, 83366);

const {:count 39} .str.17: ref;

axiom .str.17 == $sub.ref(0, 84429);

const {:count 35} .str.39: ref;

axiom .str.39 == $sub.ref(0, 85488);

const vb2_vmalloc_memops: ref;

axiom vb2_vmalloc_memops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 35} .str.29: ref;

axiom .str.29 == $sub.ref(0, 86547);

const {:count 4} .str.30: ref;

axiom .str.30 == $sub.ref(0, 87575);

const {:count 3} .str.31: ref;

axiom .str.31 == $sub.ref(0, 88602);

const {:count 4} .str.32: ref;

axiom .str.32 == $sub.ref(0, 89630);

const {:count 8} .str.33: ref;

axiom .str.33 == $sub.ref(0, 90662);

const .str.35: ref;

axiom .str.35 == $sub.ref(0, 91687);

const {:count 64} .str.34: ref;

axiom .str.34 == $sub.ref(0, 92775);

const {:count 111} .str.36: ref;

axiom .str.36 == $sub.ref(0, 93910);

const {:count 26} .str.37: ref;

axiom .str.37 == $sub.ref(0, 94960);

const {:count 97} .str.38: ref;

axiom .str.38 == $sub.ref(0, 96081);

const {:count 29} .str.44: ref;

axiom .str.44 == $sub.ref(0, 97134);

const {:count 32} .str.45: ref;

axiom .str.45 == $sub.ref(0, 98190);

const {:count 38} .str.48: ref;

axiom .str.48 == $sub.ref(0, 99252);

const {:count 29} .str.49: ref;

axiom .str.49 == $sub.ref(0, 100305);

const {:count 30} .str.9: ref;

axiom .str.9 == $sub.ref(0, 101359);

const {:count 39} .str.10: ref;

axiom .str.10 == $sub.ref(0, 102422);

const {:count 43} .str.11: ref;

axiom .str.11 == $sub.ref(0, 103489);

const {:count 32} .str.12: ref;

axiom .str.12 == $sub.ref(0, 104545);

const {:count 51} .str.13: ref;

axiom .str.13 == $sub.ref(0, 105620);

const {:count 29} .str.14: ref;

axiom .str.14 == $sub.ref(0, 106673);

const {:count 52} .str.15: ref;

axiom .str.15 == $sub.ref(0, 107749);

const {:count 32} .str.56: ref;

axiom .str.56 == $sub.ref(0, 108805);

const {:count 37} .str.57: ref;

axiom .str.57 == $sub.ref(0, 109866);

const {:count 38} .str.58: ref;

axiom .str.58 == $sub.ref(0, 110928);

const {:count 21} .str.59: ref;

axiom .str.59 == $sub.ref(0, 111973);

const {:count 42} .str.74: ref;

axiom .str.74 == $sub.ref(0, 113039);

const {:count 9} .str.69: ref;

axiom .str.69 == $sub.ref(0, 114072);

const {:count 19} .str.75: ref;

axiom .str.75 == $sub.ref(0, 115115);

const {:count 36} .str.76: ref;

axiom .str.76 == $sub.ref(0, 116175);

const {:count 37} .str.77: ref;

axiom .str.77 == $sub.ref(0, 117236);

const {:count 234} .str.73: ref;

axiom .str.73 == $sub.ref(0, 118494);

const {:count 8} .str.60: ref;

axiom .str.60 == $sub.ref(0, 119526);

const {:count 24} .str.61: ref;

axiom .str.61 == $sub.ref(0, 120574);

const {:count 25} .str.62: ref;

axiom .str.62 == $sub.ref(0, 121623);

const {:count 23} .str.63: ref;

axiom .str.63 == $sub.ref(0, 122670);

const {:count 32} .str.64: ref;

axiom .str.64 == $sub.ref(0, 123726);

const {:count 20} .str.65: ref;

axiom .str.65 == $sub.ref(0, 124770);

const {:count 29} .str.66: ref;

axiom .str.66 == $sub.ref(0, 125823);

const {:count 32} .str.67: ref;

axiom .str.67 == $sub.ref(0, 126879);

const {:count 24} .str.68: ref;

axiom .str.68 == $sub.ref(0, 127927);

const {:count 17} .str.70: ref;

axiom .str.70 == $sub.ref(0, 128968);

const {:count 22} .str.71: ref;

axiom .str.71 == $sub.ref(0, 130014);

const {:count 33} .str.72: ref;

axiom .str.72 == $sub.ref(0, 131071);

const {:count 49} .str.50: ref;

axiom .str.50 == $sub.ref(0, 132144);

const {:count 49} .str.51: ref;

axiom .str.51 == $sub.ref(0, 133217);

const {:count 47} .str.46: ref;

axiom .str.46 == $sub.ref(0, 134288);

const {:count 12} .str.47: ref;

axiom .str.47 == $sub.ref(0, 135324);

const .str: ref;

axiom .str == $sub.ref(0, 136388);

const {:count 8} .str.54: ref;

axiom .str.54 == $sub.ref(0, 137420);

const {:count 12} .str.55: ref;

axiom .str.55 == $sub.ref(0, 138456);

const {:count 28} .str.52: ref;

axiom .str.52 == $sub.ref(0, 139508);

const {:count 10} .str.53: ref;

axiom .str.53 == $sub.ref(0, 140542);

const {:count 27} .str.41: ref;

axiom .str.41 == $sub.ref(0, 141593);

const {:count 13} .str.80: ref;

axiom .str.80 == $sub.ref(0, 142630);

const {:count 17} .str.81: ref;

axiom .str.81 == $sub.ref(0, 143671);

const {:count 13} .str.82: ref;

axiom .str.82 == $sub.ref(0, 144708);

const {:count 23} .str.83: ref;

axiom .str.83 == $sub.ref(0, 145755);

const {:count 20} .str.84: ref;

axiom .str.84 == $sub.ref(0, 146799);

const {:count 13} .str.85: ref;

axiom .str.85 == $sub.ref(0, 147836);

const {:count 10} .str.86: ref;

axiom .str.86 == $sub.ref(0, 148870);

const {:count 22} .str.87: ref;

axiom .str.87 == $sub.ref(0, 149916);

const {:count 6} .str.88: ref;

axiom .str.88 == $sub.ref(0, 150946);

const {:count 17} .str.89: ref;

axiom .str.89 == $sub.ref(0, 151987);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 153019);

const {:count 3} .str.1.141: ref;

axiom .str.1.141 == $sub.ref(0, 154046);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 155084);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 156112);

const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 157144);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := ldv_malloc($i0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 158176);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 159208);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p4 := malloc($i0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} __VERIFIER_assume($i7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 160240);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 9} $r := $malloc($i0);
    return;
}



const stk1160_probe: ref;

axiom stk1160_probe == $sub.ref(0, 161272);

procedure stk1160_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.3, $M.11, $M.12, $M.13, $M.14, $M.2, $M.16, $M.18, $M.20;



implementation stk1160_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i67: i32;
  var $i68: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $p84: ref;
  var $i85: i64;
  var $i86: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $i116: i1;
  var $p87: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i64;
  var $p126: ref;
  var $i127: i64;
  var $i128: i1;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i64;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i64;
  var $i143: i1;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i64;
  var $i158: i1;
  var $p129: ref;
  var $i160: i32;
  var $i161: i1;
  var $i69: i32;
  var $p163: ref;
  var $i66: i32;
  var $p164: ref;
  var $i43: i32;
  var $p165: ref;
  var $p166: ref;
  var $i14: i32;
  var vslice_dummy_var_27: ref;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $p6 := interface_to_usbdev($p0);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 1);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(16, 1));
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i18 := $mul.i64($i17, 4);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $p19 := kmalloc($i18, 208);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $i23 := stk1160_scan_usb($p0, $p6, $p20);
    call {:si_unique_call 17} {:cexpr "rc"} boogie_si_record_i32($i23);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $p26 := kzalloc(7208, 208);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(3112, 1));
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p19);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(2424, 1));
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p6);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(16, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(3124, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i36 := $M.1;
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(3424, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i36);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(2416, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p38);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p27);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} ldv_usb_set_intfdata_2($p0, $p40);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $i41 := stk1160_vb2_setup($p27);
    call {:si_unique_call 23} {:cexpr "rc"} boogie_si_record_i32($i41);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 0);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(7144, 1));
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} vslice_dummy_var_27 := spinlock_check($p44);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(7144, 1)), $mul.ref(0, 1));
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} __raw_spin_lock_init($p48, .str.20, $p2);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(6808, 1));
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} __mutex_init($p49, .str.21, $p3);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(6976, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} __mutex_init($p50, .str.22, $p4);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(2168, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i52 := v4l2_ctrl_handler_init_class($p51, 0, $p5, .str.23);
    call {:si_unique_call 31} {:cexpr "tmp___1"} boogie_si_record_i32($i52);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(0, 1)), $mul.ref(352, 1));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, stk1160_release);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(2168, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(0, 1)), $mul.ref(152, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $p57);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(2416, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(0, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $i63 := v4l2_device_register($p61, $p62);
    call {:si_unique_call 34} {:cexpr "rc"} boogie_si_record_i32($i63);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $i67 := stk1160_i2c_register($p27);
    call {:si_unique_call 38} {:cexpr "rc"} boogie_si_record_i32($i67);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i67, 0);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(0, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(3456, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p72 := v4l2_i2c_new_subdev($p70, $p71, .str.26, 0, saa7113_addrs);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(2432, 1));
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p73, $p72);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} vslice_dummy_var_30 := printk.ref.ref(.str.27, .str.28);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p79, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p79, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i82, $i85);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p121, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p121, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i124 := $p2i.ref.i64($p123);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i124, $i127);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i128 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} stk1160_reg_reset($p27);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} stk1160_select_input($p27);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} vslice_dummy_var_33 := stk1160_ac97_register($p27);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i160 := stk1160_video_register($p27);
    call {:si_unique_call 48} {:cexpr "rc"} boogie_si_record_i32($i160);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i161 := $slt.i32($i160, 0);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb57:
    assume $i161 == 1;
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} vslice_dummy_var_34 := stk1160_i2c_unregister($p27);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i69 := $i160;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(0, 1));
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} v4l2_device_unregister($p163);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i66 := $i69;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p27, $mul.ref(0, 7232)), $mul.ref(2168, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} v4l2_ctrl_handler_free($p164);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i43 := $i66;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p20);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} kfree($p165);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p166 := $bitcast.ref.ref($p27);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} kfree($p166);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i14 := $i43;
    goto $bb3;

  $bb43:
    assume $i128 == 1;
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p129 := $p122;
    goto $bb46;

  $bb46:
    call $p130, $p131, $p132, $p133, $i134, $i135, $p136, $p137, $p138, $p139, $p140, $p141, $i142, $i143, $p144, $p145, $p146, $p147, $p148, $p149, $p152, $p153, $p154, $p155, $p156, $i157, $i158, $p129, vslice_dummy_var_32 := stk1160_probe_loop_$bb46($i127, $p130, $p131, $p132, $p133, $i134, $i135, $p136, $p137, $p138, $p139, $p140, $p141, $i142, $i143, $p144, $p145, $p146, $p147, $p148, $p149, $p152, $p153, $p154, $p155, $p156, $i157, $i158, $p129, vslice_dummy_var_32);
    goto $bb46_last;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p129, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p131, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p133);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i135 := $ne.i64($i134, 0);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i135 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p129, $mul.ref(0, 296)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p153);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($p154, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p154, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i157 := $p2i.ref.i64($p156);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i158 := $ne.i64($i157, $i127);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i158 == 1);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb54:
    assume $i158 == 1;
    assume {:verifier.code 0} true;
    $p129 := $p155;
    goto $bb54_dummy;

  $bb48:
    assume $i135 == 1;
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p129, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p139, $mul.ref(0, 240)), $mul.ref(56, 1));
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i142 := $p2i.ref.i64($p141);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i143 := $ne.i64($i142, 0);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i143 == 1);
    goto $bb50;

  $bb51:
    assume $i143 == 1;
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p129, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p145, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p147, $mul.ref(0, 240)), $mul.ref(56, 1));
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    call {:si_unique_call 43} vslice_dummy_var_32 := devirtbounce($p149, $p129, 0);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb29:
    assume $i86 == 1;
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p87 := $p80;
    goto $bb32;

  $bb32:
    call $p88, $p89, $p90, $p91, $i92, $i93, $p94, $p95, $p96, $p97, $p98, $p99, $i100, $i101, $p102, $p103, $p104, $p105, $p106, $p107, $p110, $p111, $p112, $p113, $p114, $i115, $i116, $p87, vslice_dummy_var_31 := stk1160_probe_loop_$bb32($i85, $p88, $p89, $p90, $p91, $i92, $i93, $p94, $p95, $p96, $p97, $p98, $p99, $i100, $i101, $p102, $p103, $p104, $p105, $p106, $p107, $p110, $p111, $p112, $p113, $p114, $i115, $i116, $p87, vslice_dummy_var_31);
    goto $bb32_last;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p91);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, 0);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p87, $mul.ref(0, 296)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p112, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p112, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p114);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i116 := $ne.i64($i115, $i85);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i116 == 1);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb40:
    assume $i116 == 1;
    assume {:verifier.code 0} true;
    $p87 := $p113;
    goto $bb40_dummy;

  $bb34:
    assume $i93 == 1;
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p87, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p99);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb36;

  $bb37:
    assume $i101 == 1;
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p87, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    call {:si_unique_call 42} vslice_dummy_var_31 := devirtbounce($p107, $p87, 0);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb25:
    assume $i68 == 1;
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i69 := $i67;
    goto $bb27;

  $bb21:
    assume $i64 == 1;
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} vslice_dummy_var_29 := printk.ref.i32(.str.25, $i63);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i66 := $i63;
    goto $bb23;

  $bb18:
    assume $i53 == 1;
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} vslice_dummy_var_28 := printk.ref.i32(.str.24, $i52);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i43 := $i52;
    goto $bb16;

  $bb14:
    assume $i42 == 1;
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i43 := $i41;
    goto $bb16;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p20);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} kfree($p30);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 12);
    goto $bb3;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p20);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} kfree($p25);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i14 := $i23;
    goto $bb3;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 19);
    goto $bb3;

  $bb54_dummy:
    assume false;
    return;

  $bb46_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_196;

  $bb40_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_147;
}



const stk1160_disconnect: ref;

axiom stk1160_disconnect == $sub.ref(0, 162304);

procedure stk1160_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.2;



implementation stk1160_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $p1 := ldv_usb_get_intfdata_3($p0);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} ldv_usb_set_intfdata_2($p0, $0.ref);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 7232)), $mul.ref(6976, 1));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} mutex_lock_nested($p3, 0);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 7232)), $mul.ref(6808, 1));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} mutex_lock_nested($p4, 0);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} stk1160_uninit_isoc($p2);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} vslice_dummy_var_35 := stk1160_ac97_unregister($p2);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} stk1160_clear_queue($p2);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 7232)), $mul.ref(360, 1));
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} video_unregister_device($p6);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 7232)), $mul.ref(0, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} v4l2_device_disconnect($p7);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 7232)), $mul.ref(2424, 1));
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $0.ref);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 7232)), $mul.ref(6808, 1));
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} mutex_unlock($p9);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 7232)), $mul.ref(6976, 1));
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} mutex_unlock($p10);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 7232)), $mul.ref(0, 1));
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} vslice_dummy_var_36 := v4l2_device_put($p11);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_get_intfdata_3: ref;

axiom ldv_usb_get_intfdata_3 == $sub.ref(0, 163336);

procedure ldv_usb_get_intfdata_3($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_usb_get_intfdata_3($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $p1 := ldv_usb_get_intfdata();
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_usb_set_intfdata_2: ref;

axiom ldv_usb_set_intfdata_2 == $sub.ref(0, 164368);

procedure ldv_usb_set_intfdata_2($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_usb_set_intfdata_2($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} ldv_usb_set_intfdata($p1);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 165400);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    return;
}



const stk1160_uninit_isoc: ref;

axiom stk1160_uninit_isoc == $sub.ref(0, 166432);

procedure stk1160_uninit_isoc($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2;



implementation stk1160_uninit_isoc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} stk1160_cancel_isoc($p0);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} stk1160_free_isoc($p0);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    return;
}



const stk1160_ac97_unregister: ref;

axiom stk1160_ac97_unregister == $sub.ref(0, 167464);

procedure stk1160_ac97_unregister($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation stk1160_ac97_unregister($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var vslice_dummy_var_37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(7224, 1));
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2424, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} vslice_dummy_var_37 := snd_card_free($p2);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const stk1160_clear_queue: ref;

axiom stk1160_clear_queue == $sub.ref(0, 168496);

procedure stk1160_clear_queue($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation stk1160_clear_queue($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p16: ref;
  var $i17: i32;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var vslice_dummy_var_38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(7144, 1));
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $p2 := spinlock_check($p1);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $i3 := _raw_spin_lock_irqsave($p2);
    call {:si_unique_call 70} {:cexpr "flags"} boogie_si_record_i64($i3);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2440, 1));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $i5 := list_empty($p4);
    call {:si_unique_call 72} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(24, 1));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $0.ref);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(7144, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} spin_unlock_irqrestore($p23, $i3);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p8, $p9, $p10, $p11, $p12, $p13, $p16, $i17, $i19, $i20, vslice_dummy_var_38 := stk1160_clear_queue_loop_$bb4($p0, $p4, $p8, $p9, $p10, $p11, $p12, $p13, $p16, $i17, $i19, $i20, vslice_dummy_var_38);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2440, 1)), $mul.ref(0, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 840), 880));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 840), 880)), $mul.ref(840, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} list_del($p12);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 840), 880)), $mul.ref(0, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} vb2_buffer_done($p13, 5);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref($sub.ref(0, 840), 880)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} vslice_dummy_var_38 := printk.ref.ref.i32(.str.2, $p11, $i17);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $i19 := list_empty($p4);
    call {:si_unique_call 77} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const video_unregister_device: ref;

axiom video_unregister_device == $sub.ref(0, 169528);

procedure video_unregister_device($p0: ref);
  free requires assertsPassed;



implementation video_unregister_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_device_disconnect: ref;

axiom v4l2_device_disconnect == $sub.ref(0, 170560);

procedure v4l2_device_disconnect($p0: ref);
  free requires assertsPassed;



implementation v4l2_device_disconnect($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 171592);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_device_put: ref;

axiom v4l2_device_put == $sub.ref(0, 172624);

procedure v4l2_device_put($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_device_put($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 1} true;
    call {:si_unique_call 79} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 80} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 173656);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 174688);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 1} true;
    call {:si_unique_call 81} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 82} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 175720);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    return;
}



const vb2_buffer_done: ref;

axiom vb2_buffer_done == $sub.ref(0, 176752);

procedure vb2_buffer_done($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation vb2_buffer_done($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} {:cexpr "vb2_buffer_done:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 177784);

procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 1} true;
    call {:si_unique_call 84} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 85} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 1} true;
    call {:si_unique_call 86} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 87} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 1} true;
    call {:si_unique_call 88} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 89} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 1} true;
    call {:si_unique_call 90} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 91} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: i32, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: i32, p.3: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 1} true;
    call {:si_unique_call 92} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 93} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.ref($p0: ref, p.1: i32, p.2: i32, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.ref($p0: ref, p.1: i32, p.2: i32, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 1} true;
    call {:si_unique_call 94} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 95} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref($p0: ref, p.1: i32, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref($p0: ref, p.1: i32, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 1} true;
    call {:si_unique_call 96} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 97} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 1} true;
    call {:si_unique_call 98} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 99} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 1} true;
    call {:si_unique_call 100} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 101} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 178816);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 179848);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 180880);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    return;
}



const snd_card_free: ref;

axiom snd_card_free == $sub.ref(0, 181912);

procedure snd_card_free($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_card_free($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 1} true;
    call {:si_unique_call 105} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 106} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const stk1160_cancel_isoc: ref;

axiom stk1160_cancel_isoc == $sub.ref(0, 182944);

procedure stk1160_cancel_isoc($p0: ref);
  free requires assertsPassed;



implementation stk1160_cancel_isoc($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i7: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(4, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    call {:si_unique_call 107} {:cexpr "num_bufs"} boogie_si_record_i32($i3);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} vslice_dummy_var_39 := printk.ref.i32(.str.5, $i3);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32(0, $i3);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} vslice_dummy_var_40 := printk.ref(.str.6);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb8;

  $bb8:
    call $p9, $p10, $i11, $p12, $p13, $i14, $i15, $i7 := stk1160_cancel_isoc_loop_$bb8($p0, $i3, $p9, $p10, $i11, $p12, $p13, $i14, $i15, $i7);
    goto $bb8_last;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(8, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i7);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 8));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} usb_kill_urb($p13);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i7, 1);
    call {:si_unique_call 110} {:cexpr "i"} boogie_si_record_i32($i14);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, $i3);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i14;
    goto $bb10_dummy;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_402;
}



const stk1160_free_isoc: ref;

axiom stk1160_free_isoc == $sub.ref(0, 183976);

procedure stk1160_free_isoc($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2;



implementation stk1160_free_isoc($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i5: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i6: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(4, 1));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    call {:si_unique_call 112} {:cexpr "num_bufs"} boogie_si_record_i32($i3);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} vslice_dummy_var_41 := printk.ref.i32(.str.7, $i3);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32(0, $i3);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(8, 1));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} kfree($p51);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(16, 1));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} kfree($p55);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(8, 1));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, $0.ref);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(16, 1));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $0.ref);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(4, 1));
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, 0);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} vslice_dummy_var_42 := printk.ref(.str.8);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $p8, $p9, $i10, $p11, $p12, $i13, $i14, $p16, $p17, $i18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $i26, $i27, $p29, $p30, $i31, $p32, $p33, $p34, $i35, $p37, $p38, $i39, $p40, $p42, $p43, $i44, $p45, $i46, $i47, $i6 := stk1160_free_isoc_loop_$bb4($p0, $i3, $p8, $p9, $i10, $p11, $p12, $i13, $i14, $p16, $p17, $i18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $i26, $i27, $p29, $p30, $i31, $p32, $p33, $p34, $i35, $p37, $p38, $i39, $p40, $p42, $p43, $i44, $p45, $i46, $i47, $i6);
    goto $bb4_last;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(8, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i6);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p9, $mul.ref($i10, 8));
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(16, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i6);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p43, $mul.ref($i44, 8));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $0.ref);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i6, 1);
    call {:si_unique_call 116} {:cexpr "i"} boogie_si_record_i32($i46);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, $i3);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i47 == 1);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i46;
    goto $bb12_dummy;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(16, 1));
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i6);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p17, $mul.ref($i18, 8));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} ldv_usb_free_urb_13($p12);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(8, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i6);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p38, $mul.ref($i39, 8));
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $0.ref);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2424, 1));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(16, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i6);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p30, $mul.ref($i31, 8));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} usb_free_coherent($p24, $i27, $p33, $i35);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_425;
}



const usb_free_coherent: ref;

axiom usb_free_coherent == $sub.ref(0, 185008);

procedure usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} {:cexpr "usb_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 121} {:cexpr "usb_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_free_urb_13: ref;

axiom ldv_usb_free_urb_13 == $sub.ref(0, 186040);

procedure ldv_usb_free_urb_13($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_usb_free_urb_13($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} ldv_free_urb($p0);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 187072);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} free_($p0);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 188104);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 124} $free($p0);
    return;
}



const ldv_free_urb: ref;

axiom ldv_free_urb == $sub.ref(0, 189136);

procedure ldv_free_urb($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_free_urb($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p1 := $M.2;
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p5 := $M.2;
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $M.2 := $0.ref;
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 190168);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_set_intfdata: ref;

axiom ldv_usb_set_intfdata == $sub.ref(0, 191200);

procedure ldv_usb_set_intfdata($p0: ref);
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_usb_set_intfdata($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $M.3 := $p0;
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_get_intfdata: ref;

axiom ldv_usb_get_intfdata == $sub.ref(0, 192232);

procedure ldv_usb_get_intfdata() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_usb_get_intfdata() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p0 := $M.3;
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 193264);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $p1 := ldv_interface_to_usbdev();
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 194296);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 127} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const stk1160_scan_usb: ref;

axiom stk1160_scan_usb == $sub.ref(0, 195328);

procedure stk1160_scan_usb($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation stk1160_scan_usb($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i64: i64;
  var $p65: ref;
  var $i62: i8;
  var $i63: i8;
  var $i66: i8;
  var $i67: i8;
  var $i68: i8;
  var $i69: i8;
  var $i70: i32;
  var $p71: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i1;
  var $i28: i8;
  var $i29: i8;
  var $i30: i32;
  var $i78: i8;
  var $i79: i8;
  var $i26: i8;
  var $i27: i8;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i14: i8;
  var $i15: i8;
  var $i16: i32;
  var $i83: i8;
  var $i84: i8;
  var $i12: i8;
  var $i13: i8;
  var $i85: i1;
  var $i86: i1;
  var $p87: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p113: ref;
  var $i114: i16;
  var $i115: i32;
  var $p117: ref;
  var $i118: i16;
  var $i119: i32;
  var $p120: ref;
  var $p121: ref;
  var $p123: ref;
  var $i124: i8;
  var $i125: i32;
  var $i127: i1;
  var $p128: ref;
  var $i130: i1;
  var $p131: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $i89: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    call {:si_unique_call 129} {:cexpr "ifnum"} boogie_si_record_i32($i8);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(16, 1));
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i11 := $ult.i32(0, $i10);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i12, $i13 := 0, 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i8.i1($i13);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb36, $bb38;

  $bb38:
    assume !($i85 == 1);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i8.i1($i12);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i86 == 1);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} vslice_dummy_var_43 := dev_err.ref.ref($p87, .str.29);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i89 := $sub.i32(0, 19);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $r := $i89;
    return;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0, 1992)), $mul.ref(28, 1));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i91, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i91, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i91, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p96 := .str.33;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p1, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref(0, 1992)), $mul.ref(1856, 1));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p99);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i101 == 1);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p104 := .str.35;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p1, $mul.ref(0, 1992)), $mul.ref(1848, 1));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i108 == 1);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p111 := .str.35;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1992)), $mul.ref(1520, 1)), $mul.ref(8, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i114 := $load.i16($M.0, $p113);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i115 := $zext.i16.i32($i114);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1992)), $mul.ref(1520, 1)), $mul.ref(10, 1));
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i118 := $load.i16($M.0, $p117);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i119 := $zext.i16.i32($i118);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p121, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.0, $p123);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i32($i124);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} vslice_dummy_var_44 := _dev_info.ref.ref.ref.ref.ref.i32.i32.i32.i32($p97, .str.34, $p104, $p111, $p96, $i115, $i119, $i8, $i125);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i8.i1($i13);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i8.i1($i12);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p1, $mul.ref(0, 1992)), $mul.ref(28, 1));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 3);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i89 := 0;
    goto $bb41;

  $bb68:
    assume $i135 == 1;
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p1, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} vslice_dummy_var_47 := dev_warn.ref.ref($p136, .str.38);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb65:
    assume $i130 == 1;
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p1, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} vslice_dummy_var_46 := _dev_info.ref.ref.i32($p131, .str.37, $i8);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb62:
    assume $i127 == 1;
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p1, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} vslice_dummy_var_45 := dev_warn.ref.ref.i32($p128, .str.36, $i8);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb59:
    assume $i108 == 1;
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p1, $mul.ref(0, 1992)), $mul.ref(1848, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p111 := $p110;
    goto $bb61;

  $bb56:
    assume $i101 == 1;
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p1, $mul.ref(0, 1992)), $mul.ref(1856, 1));
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p104 := $p103;
    goto $bb58;

  $bb48:
    assume $i94 == 1;
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p96 := .str.32;
    goto $bb53;

  $bb46:
    assume $i93 == 1;
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p96 := .str.31;
    goto $bb53;

  $bb44:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i91, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb50;

  $bb51:
    assume $i95 == 1;
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p96 := .str.30;
    goto $bb53;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb37;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i14, $i15, $i16 := 0, 0, 0;
    goto $bb4;

  $bb4:
    call $p17, $p18, $i19, $p22, $i23, $i24, $i25, $p31, $p32, $i33, $p35, $p36, $i37, $p39, $p40, $i41, $i42, $i43, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $i60, $i61, $i64, $p65, $i62, $i63, $i66, $i67, $i68, $i69, $i70, $p71, $p74, $i75, $i76, $i77, $i28, $i29, $i30, $i78, $i79, $i26, $i27, $i80, $i81, $i82, $i14, $i15, $i16, $i83, $i84 := stk1160_scan_usb_loop_$bb4($p0, $p1, $p2, $p9, $p17, $p18, $i19, $p22, $i23, $i24, $i25, $p31, $p32, $i33, $p35, $p36, $i37, $p39, $p40, $i41, $i42, $i43, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $i60, $i61, $i64, $p65, $i62, $i63, $i66, $i67, $i68, $i69, $i70, $p71, $p74, $i75, $i76, $i77, $i28, $i29, $i30, $i78, $i79, $i26, $i27, $i80, $i81, $i82, $i14, $i15, $i16, $i83, $i84);
    goto $bb4_last;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i16);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p18, $mul.ref($i19, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, 0);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i26, $i27 := $i15, $i14;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i80 := $add.i32($i16, 1);
    call {:si_unique_call 138} {:cexpr "i"} boogie_si_record_i32($i80);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p9);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i82 := $ult.i32($i80, $i81);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i83, $i84 := $i26, $i27;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i12, $i13 := $i83, $i84;
    goto $bb3;

  $bb33:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $i14, $i15, $i16 := $i27, $i26, $i80;
    goto $bb33_dummy;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i28, $i29, $i30 := $i14, $i15, 0;
    goto $bb9;

  $bb9:
    call $p31, $p32, $i33, $p35, $p36, $i37, $p39, $p40, $i41, $i42, $i43, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $i60, $i61, $i64, $p65, $i62, $i63, $i66, $i67, $i68, $i69, $i70, $p71, $p74, $i75, $i76, $i77, $i28, $i29, $i30, $i78, $i79 := stk1160_scan_usb_loop_$bb9($p0, $p1, $p2, $p17, $i19, $p31, $p32, $i33, $p35, $p36, $i37, $p39, $p40, $i41, $i42, $i43, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $i60, $i61, $i64, $p65, $i62, $i63, $i66, $i67, $i68, $i69, $i70, $p71, $p74, $i75, $i76, $i77, $i28, $i29, $i30, $i78, $i79, $i16);
    goto $bb9_last;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i16);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p32, $mul.ref($i33, 40)), $mul.ref(24, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i30);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p36, $mul.ref($i37, 64)), $mul.ref(0, 1));
    $p40 := $add.ref($add.ref($add.ref($p36, $mul.ref($i37, 64)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    call {:si_unique_call 130} {:cexpr "sizedescr"} boogie_si_record_i32($i42);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 2047);
    call {:si_unique_call 131} {:cexpr "size"} boogie_si_record_i32($i43);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 1992)), $mul.ref(28, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 3);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i51 := $i43;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $i52 := usb_endpoint_xfer_isoc($p39);
    call {:si_unique_call 134} {:cexpr "tmp"} boogie_si_record_i32($i52);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i68, $i69 := $i29, $i28;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i30, 1);
    call {:si_unique_call 137} {:cexpr "e"} boogie_si_record_i32($i70);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p17);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p71, $mul.ref($i19, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i77 := $sgt.i32($i76, $i70);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i78, $i79 := $i68, $i69;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i26, $i27 := $i78, $i79;
    goto $bb8;

  $bb30:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $i28, $i29, $i30 := $i69, $i68, $i70;
    goto $bb30_dummy;

  $bb14:
    assume $i53 == 1;
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i54 := usb_endpoint_dir_in($p39);
    call {:si_unique_call 136} {:cexpr "tmp___0"} boogie_si_record_i32($i54);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i66, $i67 := $i29, $i28;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i68, $i69 := $i66, $i67;
    goto $bb29;

  $bb16:
    assume $i55 == 1;
    $p56 := $add.ref($add.ref($add.ref($p36, $mul.ref($i37, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i58, 130);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i58, 130);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i62, $i63 := $i29, $i28;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i66, $i67 := $i62, $i63;
    goto $bb28;

  $bb21:
    assume $i60 == 1;
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i16);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p2, $mul.ref($i64, 4));
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i51);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $i62, $i63 := 1, $i28;
    goto $bb26;

  $bb19:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i58, 129);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb23;

  $bb24:
    assume $i61 == 1;
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i62, $i63 := $i29, 1;
    goto $bb26;

  $bb11:
    assume $i46 == 1;
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i47 := $ashr.i32($i42, 11);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 3);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, 1);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i50 := $mul.i32($i49, $i43);
    call {:si_unique_call 132} {:cexpr "size"} boogie_si_record_i32($i50);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i51 := $i50;
    goto $bb13;

  $bb30_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_553;

  $bb33_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_540;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 196360);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 145} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const stk1160_vb2_setup: ref;

axiom stk1160_vb2_setup == $sub.ref(0, 197392);

procedure stk1160_vb2_setup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation stk1160_vb2_setup($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2456, 1));
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2456, 1)), $mul.ref(0, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 1);
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2456, 1)), $mul.ref(4, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 7);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2456, 1)), $mul.ref(48, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p0);
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2456, 1)), $mul.ref(56, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 880);
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2456, 1)), $mul.ref(32, 1));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, stk1160_video_qops);
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2456, 1)), $mul.ref(40, 1));
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, vb2_vmalloc_memops);
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2456, 1)), $mul.ref(60, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 8192);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $i10 := vb2_queue_init($p1);
    call {:si_unique_call 148} {:cexpr "rc"} boogie_si_record_i32($i10);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2440, 1));
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} INIT_LIST_HEAD($p13);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb3;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 198424);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 199456);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_ctrl_handler_init_class: ref;

axiom v4l2_ctrl_handler_init_class == $sub.ref(0, 200488);

procedure v4l2_ctrl_handler_init_class($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_handler_init_class($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 150} {:cexpr "v4l2_ctrl_handler_init_class:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 1} true;
    call {:si_unique_call 151} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 152} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const stk1160_release: ref;

axiom stk1160_release == $sub.ref(0, 201520);

procedure stk1160_release($p0: ref);
  free requires assertsPassed;



implementation stk1160_release($p0: ref)
{
  var $p1: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} vslice_dummy_var_48 := printk.ref(.str.39);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} vslice_dummy_var_49 := stk1160_i2c_unregister($p1);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 7232)), $mul.ref(2168, 1));
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} v4l2_ctrl_handler_free($p4);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 7232)), $mul.ref(0, 1));
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} v4l2_device_unregister($p5);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 7232)), $mul.ref(3112, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} kfree($p8);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} kfree($p9);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_device_register: ref;

axiom v4l2_device_register == $sub.ref(0, 202552);

procedure v4l2_device_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_device_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 1} true;
    call {:si_unique_call 159} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 160} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const stk1160_i2c_register: ref;

axiom stk1160_i2c_register == $sub.ref(0, 203584);

procedure stk1160_i2c_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation stk1160_i2c_register($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i22: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_50: ref;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3456, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 161} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p2, adap_template, 1904, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2416, 1));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3456, 1)), $mul.ref(176, 1)), $mul.ref(0, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p4);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3456, 1)), $mul.ref(1564, 1));
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} vslice_dummy_var_50 := strcpy($p10, .str.16);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3456, 1)), $mul.ref(24, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p0);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3456, 1));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(0, 1));
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} i2c_set_adapdata($p15, $p17);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3456, 1));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $i19 := i2c_add_adapter($p18);
    call {:si_unique_call 165} {:cexpr "rc"} boogie_si_record_i32($i19);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(5360, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 167} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p24, client_template, 1448, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3456, 1));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(5360, 1)), $mul.ref(24, 1));
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p25);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} vslice_dummy_var_52 := stk1160_write_reg($p0, 514, 15);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} vslice_dummy_var_53 := stk1160_write_reg($p0, 767, 0);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} vslice_dummy_var_51 := printk.ref.i32(.str.17, $i19);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i22 := $i19;
    goto $bb3;
}



const v4l2_i2c_new_subdev: ref;

axiom v4l2_i2c_new_subdev == $sub.ref(0, 204616);

procedure v4l2_i2c_new_subdev($p0: ref, $p1: ref, $p2: ref, $i3: i8, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_i2c_new_subdev($p0: ref, $p1: ref, $p2: ref, $i3: i8, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} {:cexpr "v4l2_i2c_new_subdev:arg:arg3"} boogie_si_record_i8($i3);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p5 := external_alloc();
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const stk1160_reg_reset: ref;

axiom stk1160_reg_reset == $sub.ref(0, 205648);

procedure stk1160_reg_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $CurrAddr;



implementation stk1160_reg_reset($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $i64: i16;
  var $i65: i32;
  var $i66: i1;
  var $i68: i64;
  var $p70: ref;
  var $i71: i16;
  var $i72: i32;
  var $i73: i16;
  var $i74: i64;
  var $p76: ref;
  var $i77: i16;
  var $i78: i32;
  var $i79: i16;
  var $i81: i32;
  var $i82: i64;
  var $p84: ref;
  var $i85: i16;
  var $i86: i32;
  var $i87: i1;
  var $i67: i32;
  var vslice_dummy_var_54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $p1 := $alloc($mul.ref(60, $zext.i32.i64(1)));
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $M.4 := $store.i16($M.4, $p3, 2);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p5, 120);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $M.4 := $store.i16($M.4, $p7, 13);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p9, 0);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $M.4 := $store.i16($M.4, $p11, 15);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p13, 2);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $M.4 := $store.i16($M.4, $p15, 24);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p17, 16);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $M.4 := $store.i16($M.4, $p19, 25);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p21, 0);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $M.4 := $store.i16($M.4, $p23, 26);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p25, 20);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $M.4 := $store.i16($M.4, $p27, 27);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p29, 14);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $M.4 := $store.i16($M.4, $p31, 28);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p33, 70);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $M.4 := $store.i16($M.4, $p35, 768);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p37, 18);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(9, 4)), $mul.ref(0, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $M.4 := $store.i16($M.4, $p39, 848);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(9, 4)), $mul.ref(2, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p41, 45);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(10, 4)), $mul.ref(0, 1));
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $M.4 := $store.i16($M.4, $p43, 849);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(10, 4)), $mul.ref(2, 1));
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p45, 1);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(11, 4)), $mul.ref(0, 1));
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $M.4 := $store.i16($M.4, $p47, 850);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(11, 4)), $mul.ref(2, 1));
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p49, 0);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(12, 4)), $mul.ref(0, 1));
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $M.4 := $store.i16($M.4, $p51, 851);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(12, 4)), $mul.ref(2, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p53, 0);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(13, 4)), $mul.ref(0, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $M.4 := $store.i16($M.4, $p55, 768);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(13, 4)), $mul.ref(2, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p57, 128);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(14, 4)), $mul.ref(0, 1));
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $M.4 := $store.i16($M.4, $p59, $sub.i16(0, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(14, 4)), $mul.ref(2, 1));
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p61, $sub.i16(0, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.4, $p63);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 65535);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i66 == 1;
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i67 := 0;
    goto $bb4;

  $bb4:
    call $i68, $p70, $i71, $i72, $i73, $i74, $p76, $i77, $i78, $i79, $i81, $i82, $p84, $i85, $i86, $i87, $i67, vslice_dummy_var_54 := stk1160_reg_reset_loop_$bb4($p0, $p1, $i68, $p70, $i71, $i72, $i73, $i74, $p76, $i77, $i78, $i79, $i81, $i82, $p84, $i85, $i86, $i87, $i67, vslice_dummy_var_54);
    goto $bb4_last;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref($i68, 4)), $mul.ref(0, 1));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.4, $p70);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i16($i72);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i67);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref($i74, 4)), $mul.ref(2, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.5, $p76);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i16($i78);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} vslice_dummy_var_54 := stk1160_write_reg($p0, $i73, $i79);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i67, 1);
    call {:si_unique_call 174} {:cexpr "i"} boogie_si_record_i32($i81);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i81);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref($i82, 4)), $mul.ref(0, 1));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i85 := $load.i16($M.4, $p84);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i86 := $zext.i16.i32($i85);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 65535);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i87 == 1);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i67 := $i81;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_850;
}



const stk1160_select_input: ref;

axiom stk1160_select_input == $sub.ref(0, 206680);

procedure stk1160_select_input($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation stk1160_select_input($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p26: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i16;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $p1 := $alloc($mul.ref(5, $zext.i32.i64(1)));
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 5)), $mul.ref(0, 1));
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p2, $sub.i8(0, 104));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 5)), $mul.ref(1, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p3, $sub.i8(0, 112));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 5)), $mul.ref(2, 1));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p4, $sub.i8(0, 120));
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 5)), $mul.ref(3, 1));
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p5, $sub.i8(0, 128));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 5)), $mul.ref(4, 1));
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p6, $sub.i8(0, 104));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3424, 1));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 4);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3424, 1));
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i13 := $ule.i32($i12, 4);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p18, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i21, $i24);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3424, 1));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i57);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 5)), $mul.ref($i58, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.6, $p59);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i16($i61);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} vslice_dummy_var_56 := stk1160_write_reg($p0, 0, $i62);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p26 := $p19;
    goto $bb9;

  $bb9:
    call $p27, $p28, $p29, $p30, $i31, $i32, $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $p41, $p42, $p43, $p44, $p45, $p46, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $p26, vslice_dummy_var_55 := stk1160_select_input_loop_$bb9($i10, $i24, $p27, $p28, $p29, $p30, $i31, $i32, $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $p41, $p42, $p43, $p44, $p45, $p46, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $p26, vslice_dummy_var_55);
    goto $bb9_last;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 296)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p51, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, $i24);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i55 == 1);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb17:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $p26 := $p52;
    goto $bb17_dummy;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p26, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb13;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p26, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    call {:si_unique_call 176} vslice_dummy_var_55 := devirtbounce.1($p46, $p26, $i10, 0, 0);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i10 := 9;
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_907;
}



const stk1160_ac97_register: ref;

axiom stk1160_ac97_register == $sub.ref(0, 207712);

procedure stk1160_ac97_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.0, $M.8, $CurrAddr;



implementation stk1160_ac97_register($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i32: i32;
  var $p45: ref;
  var $p46: ref;
  var $i6: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: ref;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p1, $0.ref);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $i4 := snd_card_create($sub.i32(0, 1), $0.ref, __this_module, 0, $p1);
    call {:si_unique_call 182} {:cexpr "rc"} boogie_si_record_i32($i4);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2416, 1));
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.7, $p1);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1184)), $mul.ref(888, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p8);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.7, $p1);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1184)), $mul.ref(36, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} vslice_dummy_var_57 := snprintf.ref.i64.ref($p13, 32, .str.18);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.7, $p1);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 1184)), $mul.ref(68, 1));
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} vslice_dummy_var_58 := snprintf.ref.i64.ref($p17, 80, .str.19);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.7, $p1);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1184)), $mul.ref(20, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2416, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1384)), $mul.ref(504, 1));
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} vslice_dummy_var_59 := strncpy($p21, $p27, 16);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.7, $p1);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $i30 := snd_ac97_bus($p29, 0, stk1160_ac97_ops, $0.ref, $p2);
    call {:si_unique_call 187} {:cexpr "rc"} boogie_si_record_i32($i30);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p3);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.8;
    call {:si_unique_call 189} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p33, 0, 40, $zext.i32.i64(8), 0 == 1);
    $M.8 := cmdloc_dummy_var_7;
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p35, $p0);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p36, 32);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.9, $p2);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i38 := snd_ac97_mixer($p37, $p3, stk1160_ac97);
    call {:si_unique_call 191} {:cexpr "rc"} boogie_si_record_i32($i38);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.7, $p1);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(7224, 1));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $p40);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.7, $p1);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $i43 := snd_card_register($p42);
    call {:si_unique_call 193} {:cexpr "rc"} boogie_si_record_i32($i43);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb12:
    assume $i44 == 1;
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i32 := $i43;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(7224, 1));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $0.ref);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.7, $p1);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} vslice_dummy_var_60 := snd_card_free($p46);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i6 := $i32;
    goto $bb3;

  $bb9:
    assume $i39 == 1;
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i32 := $i38;
    goto $bb7;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i32 := $i30;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const stk1160_video_register: ref;

axiom stk1160_video_register == $sub.ref(0, 208744);

procedure stk1160_video_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $CurrAddr;



implementation stk1160_video_register($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p38: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p77: ref;
  var $p78: ref;
  var $p80: ref;
  var $p81: ref;
  var $i76: i32;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(360, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 194} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p2, v4l_template, 1808, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i3 := $M.10;
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(360, 1)), $mul.ref(1720, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i3);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2456, 1));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(360, 1)), $mul.ref(1552, 1));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p6);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(6808, 1));
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(360, 1)), $mul.ref(1800, 1));
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p9);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(6976, 1));
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(360, 1)), $mul.ref(1552, 1));
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 648)), $mul.ref(16, 1));
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p12);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(360, 1)), $mul.ref(1528, 1));
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p0);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(360, 1)), $mul.ref(1616, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} set_bit(2, $p21);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3432, 1));
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p22, 4096);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3416, 1));
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 720);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3420, 1));
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 480);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3440, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, format);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} stk1160_set_std($p0);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p30, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i33, $i36);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(360, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p0);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} video_set_drvdata($p70, $p71);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(360, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i73 := video_register_device($p72, 0, $sub.i32(0, 1));
    call {:si_unique_call 200} {:cexpr "rc"} boogie_si_record_i32($i73);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i73, 0);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(360, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $p78 := video_device_node_name($p77);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} vslice_dummy_var_63 := printk.ref.ref.ref(.str.4, $p81, $p78);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i76 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $r := $i76;
    return;

  $bb15:
    assume $i74 == 1;
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} vslice_dummy_var_62 := printk.ref.i32(.str.3, $i73);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i76 := $i73;
    goto $bb17;

  $bb1:
    assume $i37 == 1;
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p38 := $p31;
    goto $bb4;

  $bb4:
    call $p39, $p40, $p41, $p42, $i43, $i44, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $i60, $p63, $p64, $p65, $p66, $p67, $i68, $i69, $p38, vslice_dummy_var_61 := stk1160_video_register_loop_$bb4($p0, $i36, $p39, $p40, $p41, $p42, $i43, $i44, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $i60, $p63, $p64, $p65, $p66, $p67, $i68, $i69, $p38, vslice_dummy_var_61);
    goto $bb4_last;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 296)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p65, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p65, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, $i36);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i69 == 1);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $p38 := $p66;
    goto $bb12_dummy;

  $bb6:
    assume $i44 == 1;
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p38, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb8;

  $bb9:
    assume $i52 == 1;
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p38, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3432, 1));
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.0, $p59);
    call {:si_unique_call 197} vslice_dummy_var_61 := devirtbounce.2($p58, $p38, $i60);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1063;
}



const stk1160_i2c_unregister: ref;

axiom stk1160_i2c_unregister == $sub.ref(0, 209776);

procedure stk1160_i2c_unregister($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation stk1160_i2c_unregister($p0: ref) returns ($r: i32)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3456, 1));
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} i2c_del_adapter($p1);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const v4l2_device_unregister: ref;

axiom v4l2_device_unregister == $sub.ref(0, 210808);

procedure v4l2_device_unregister($p0: ref);
  free requires assertsPassed;



implementation v4l2_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_ctrl_handler_free: ref;

axiom v4l2_ctrl_handler_free == $sub.ref(0, 211840);

procedure v4l2_ctrl_handler_free($p0: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_handler_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    return;
}



const i2c_del_adapter: ref;

axiom i2c_del_adapter == $sub.ref(0, 212872);

procedure i2c_del_adapter($p0: ref);
  free requires assertsPassed;



implementation i2c_del_adapter($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 213904);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const set_bit: ref;

axiom set_bit == $sub.ref(0, 214936);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 206} devirtbounce.3(0, $p1, $i0, $p1);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    return;
}



const stk1160_set_std: ref;

axiom stk1160_set_std == $sub.ref(0, 215968);

procedure stk1160_set_std($p0: ref);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.13, $M.14, $CurrAddr;



implementation stk1160_set_std($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p62: ref;
  var $p64: ref;
  var $p66: ref;
  var $p68: ref;
  var $p70: ref;
  var $p72: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i64;
  var $i78: i1;
  var $p81: ref;
  var $i82: i16;
  var $i83: i32;
  var $i84: i1;
  var $i86: i64;
  var $p88: ref;
  var $i89: i16;
  var $i90: i32;
  var $i91: i16;
  var $i92: i64;
  var $p94: ref;
  var $i95: i16;
  var $i96: i32;
  var $i97: i16;
  var $i99: i32;
  var $i100: i64;
  var $p102: ref;
  var $i103: i16;
  var $i104: i32;
  var $i105: i1;
  var $i85: i32;
  var $p108: ref;
  var $i109: i16;
  var $i110: i32;
  var $i111: i1;
  var $i113: i64;
  var $p115: ref;
  var $i116: i16;
  var $i117: i32;
  var $i118: i16;
  var $i119: i64;
  var $p121: ref;
  var $i122: i16;
  var $i123: i32;
  var $i124: i16;
  var $i126: i32;
  var $i127: i64;
  var $p129: ref;
  var $i130: i16;
  var $i131: i32;
  var $i132: i1;
  var $i112: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $p1 := $alloc($mul.ref(36, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $p2 := $alloc($mul.ref(36, $zext.i32.i64(1)));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p4, 272);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $M.12 := $store.i16($M.12, $p6, 0);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p8, 273);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $M.12 := $store.i16($M.12, $p10, 0);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p12, 274);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $M.12 := $store.i16($M.12, $p14, 3);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p16, 275);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $M.12 := $store.i16($M.12, $p18, 0);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p20, 276);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $M.12 := $store.i16($M.12, $p22, 1440);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p24, 277);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $M.12 := $store.i16($M.12, $p26, 5);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p28, 278);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $M.12 := $store.i16($M.12, $p30, 243);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p32, 279);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $M.12 := $store.i16($M.12, $p34, 0);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p36, $sub.i16(0, 1));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $M.12 := $store.i16($M.12, $p38, $sub.i16(0, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $M.13 := $store.i16($M.13, $p40, 272);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $M.14 := $store.i16($M.14, $p42, 0);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $M.13 := $store.i16($M.13, $p44, 273);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $M.14 := $store.i16($M.14, $p46, 0);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $M.13 := $store.i16($M.13, $p48, 274);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $M.14 := $store.i16($M.14, $p50, 1);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $M.13 := $store.i16($M.13, $p52, 275);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $M.14 := $store.i16($M.14, $p54, 0);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $M.13 := $store.i16($M.13, $p56, 276);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $M.14 := $store.i16($M.14, $p58, 1440);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $M.13 := $store.i16($M.13, $p60, 277);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $M.14 := $store.i16($M.14, $p62, 5);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $M.13 := $store.i16($M.13, $p64, 278);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $M.14 := $store.i16($M.14, $p66, 289);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $M.13 := $store.i16($M.13, $p68, 279);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $M.14 := $store.i16($M.14, $p70, 1);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $M.13 := $store.i16($M.13, $p72, $sub.i16(0, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $M.14 := $store.i16($M.14, $p74, $sub.i16(0, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3432, 1));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.0, $p75);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i77 := $and.i64($i76, 63744);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i78 == 1);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} vslice_dummy_var_65 := printk.ref(.str.43);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i109 := $load.i16($M.13, $p108);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i109);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 65535);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i111 == 1;
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i112 := 0;
    goto $bb15;

  $bb15:
    call $i113, $p115, $i116, $i117, $i118, $i119, $p121, $i122, $i123, $i124, $i126, $i127, $p129, $i130, $i131, $i132, $i112, vslice_dummy_var_67 := stk1160_set_std_loop_$bb15($p0, $p2, $i113, $p115, $i116, $i117, $i118, $i119, $p121, $i122, $i123, $i124, $i126, $i127, $p129, $i130, $i131, $i132, $i112, vslice_dummy_var_67);
    goto $bb15_last;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i113 := $sext.i32.i64($i112);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref($i113, 4)), $mul.ref(0, 1));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i116 := $load.i16($M.13, $p115);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i117 := $zext.i16.i32($i116);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i32.i16($i117);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i112);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref($i119, 4)), $mul.ref(2, 1));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i122 := $load.i16($M.14, $p121);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i123 := $zext.i16.i32($i122);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i32.i16($i123);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} vslice_dummy_var_67 := stk1160_write_reg($p0, $i118, $i124);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i126 := $add.i32($i112, 1);
    call {:si_unique_call 214} {:cexpr "i"} boogie_si_record_i32($i126);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i127 := $sext.i32.i64($i126);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref($i127, 4)), $mul.ref(0, 1));
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i130 := $load.i16($M.13, $p129);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i131 := $zext.i16.i32($i130);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i132 := $ne.i32($i131, 65535);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i132 == 1);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb17:
    assume $i132 == 1;
    assume {:verifier.code 0} true;
    $i112 := $i126;
    goto $bb17_dummy;

  $bb1:
    assume $i78 == 1;
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} vslice_dummy_var_64 := printk.ref(.str.42);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i82 := $load.i16($M.11, $p81);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i82);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 65535);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i84 == 1;
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i85 := 0;
    goto $bb6;

  $bb6:
    call $i86, $p88, $i89, $i90, $i91, $i92, $p94, $i95, $i96, $i97, $i99, $i100, $p102, $i103, $i104, $i105, $i85, vslice_dummy_var_66 := stk1160_set_std_loop_$bb6($p0, $p1, $i86, $p88, $i89, $i90, $i91, $i92, $p94, $i95, $i96, $i97, $i99, $i100, $p102, $i103, $i104, $i105, $i85, vslice_dummy_var_66);
    goto $bb6_last;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i85);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref($i86, 4)), $mul.ref(0, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i89 := $load.i16($M.11, $p88);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i90 := $zext.i16.i32($i89);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i32.i16($i90);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i85);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref($i92, 4)), $mul.ref(2, 1));
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i95 := $load.i16($M.12, $p94);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i95);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i16($i96);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} vslice_dummy_var_66 := stk1160_write_reg($p0, $i91, $i97);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i85, 1);
    call {:si_unique_call 212} {:cexpr "i"} boogie_si_record_i32($i99);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i100 := $sext.i32.i64($i99);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref($i100, 4)), $mul.ref(0, 1));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i103 := $load.i16($M.11, $p102);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i104 := $zext.i16.i32($i103);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 65535);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i105 == 1);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    $i85 := $i99;
    goto $bb8_dummy;

  $bb17_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1250;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1226;
}



const video_set_drvdata: ref;

axiom video_set_drvdata == $sub.ref(0, 217000);

procedure video_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation video_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;
  var vslice_dummy_var_68: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1808)), $mul.ref(136, 1));
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} vslice_dummy_var_68 := dev_set_drvdata($p2, $p1);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    return;
}



const video_register_device: ref;

axiom video_register_device == $sub.ref(0, 218032);

procedure video_register_device($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation video_register_device($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} {:cexpr "video_register_device:arg:type"} boogie_si_record_i32($i1);
    call {:si_unique_call 217} {:cexpr "video_register_device:arg:nr"} boogie_si_record_i32($i2);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1808)), $mul.ref(128, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $i7 := __video_register_device($p0, $i1, $i2, 1, $p6);
    call {:si_unique_call 219} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const video_device_node_name: ref;

axiom video_device_node_name == $sub.ref(0, 219064);

procedure video_device_node_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_device_node_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1808)), $mul.ref(136, 1));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $p2 := dev_name($p1);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 220096);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(312, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(16, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $p9 := kobject_name($p8);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(312, 1));
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 221128);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __video_register_device: ref;

axiom __video_register_device == $sub.ref(0, 222160);

procedure __video_register_device($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __video_register_device($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 222} {:cexpr "__video_register_device:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 223} {:cexpr "__video_register_device:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 224} {:cexpr "__video_register_device:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 1} true;
    call {:si_unique_call 225} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 226} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 223192);

procedure dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 1} true;
    call {:si_unique_call 227} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 228} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const stk1160_write_reg: ref;

axiom stk1160_write_reg == $sub.ref(0, 224224);

procedure stk1160_write_reg($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;



implementation stk1160_write_reg($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i17: i32;
  var vslice_dummy_var_69: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} {:cexpr "stk1160_write_reg:arg:reg"} boogie_si_record_i16($i1);
    call {:si_unique_call 230} {:cexpr "stk1160_write_reg:arg:value"} boogie_si_record_i16($i2);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2424, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} $i5 := __create_pipe($p4, 0);
    call {:si_unique_call 232} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, $sub.i32(0, 2147483648));
    call {:si_unique_call 233} {:cexpr "pipe"} boogie_si_record_i32($i6);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2424, 1));
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i2);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i1);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $i13 := usb_control_msg($p8, $i6, 1, 64, $i10, $i12, $0.ref, 0, 250);
    call {:si_unique_call 235} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i1);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} vslice_dummy_var_69 := printk.ref.i32.i32(.str.1, $i15, $i13);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i17 := $i13;
    goto $bb3;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 225256);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(0, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 226288);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 238} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 239} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 240} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 241} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 242} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 243} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 244} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 1} true;
    call {:si_unique_call 245} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 246} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const snd_card_create: ref;

axiom snd_card_create == $sub.ref(0, 227320);

procedure snd_card_create($i0: i32, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_card_create($i0: i32, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 247} {:cexpr "snd_card_create:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 248} {:cexpr "snd_card_create:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 1} true;
    call {:si_unique_call 249} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 250} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 228352);

procedure snprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);



procedure snprintf.ref.i64.ref($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);



const strncpy: ref;

axiom strncpy == $sub.ref(0, 229384);

procedure strncpy($p0: ref, $p1: ref, $i2: i64) returns ($r: ref);



const snd_ac97_bus: ref;

axiom snd_ac97_bus == $sub.ref(0, 230416);

procedure snd_ac97_bus($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_ac97_bus($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 251} {:cexpr "snd_ac97_bus:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 1} true;
    call {:si_unique_call 252} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 253} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 231448);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const snd_ac97_mixer: ref;

axiom snd_ac97_mixer == $sub.ref(0, 232480);

procedure snd_ac97_mixer($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_ac97_mixer($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 1} true;
    call {:si_unique_call 254} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 255} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const snd_card_register: ref;

axiom snd_card_register == $sub.ref(0, 233512);

procedure snd_card_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_card_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 1} true;
    call {:si_unique_call 256} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 257} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 234544);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 1} true;
    call {:si_unique_call 258} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 259} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 235576);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const i2c_set_adapdata: ref;

axiom i2c_set_adapdata == $sub.ref(0, 236608);

procedure i2c_set_adapdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation i2c_set_adapdata($p0: ref, $p1: ref)
{
  var $p2: ref;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1904)), $mul.ref(176, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} vslice_dummy_var_70 := dev_set_drvdata($p2, $p1);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    return;
}



const i2c_add_adapter: ref;

axiom i2c_add_adapter == $sub.ref(0, 237640);

procedure i2c_add_adapter($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_add_adapter($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 1} true;
    call {:si_unique_call 261} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 262} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vb2_queue_init: ref;

axiom vb2_queue_init == $sub.ref(0, 238672);

procedure vb2_queue_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_queue_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 1} true;
    call {:si_unique_call 263} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 264} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 239704);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    return;
}



const usb_endpoint_xfer_isoc: ref;

axiom usb_endpoint_xfer_isoc == $sub.ref(0, 240736);

procedure usb_endpoint_xfer_isoc($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_isoc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_endpoint_dir_in: ref;

axiom usb_endpoint_dir_in == $sub.ref(0, 241768);

procedure usb_endpoint_dir_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 242800);

procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 1} true;
    call {:si_unique_call 265} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 266} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 243832);

procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 1} true;
    call {:si_unique_call 267} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 268} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 1} true;
    call {:si_unique_call 269} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 270} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 244864);

procedure dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 1} true;
    call {:si_unique_call 271} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 272} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 1} true;
    call {:si_unique_call 273} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 274} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_interface_to_usbdev: ref;

axiom ldv_interface_to_usbdev == $sub.ref(0, 245896);

procedure ldv_interface_to_usbdev() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_interface_to_usbdev() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $p0 := ldv_undef_ptr();
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} ldv_stop___3();
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 246928);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 1} true;
    call {:si_unique_call 277} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 278} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_stop___3: ref;

axiom ldv_stop___3 == $sub.ref(0, 247960);

procedure ldv_stop___3();
  free requires assertsPassed;



implementation ldv_stop___3()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop___3_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const queue_setup: ref;

axiom queue_setup == $sub.ref(0, 248992);

procedure queue_setup($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation queue_setup($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $p6 := vb2_get_drv_priv($p0);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 7232)), $mul.ref(3416, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 7232)), $mul.ref(3420, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i9, $i11);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i13 := $mul.i32($i12, 2);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    call {:si_unique_call 280} {:cexpr "size"} boogie_si_record_i64($i14);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p2);
    call {:si_unique_call 281} {:cexpr "__val"} boogie_si_record_i32($i15);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i32(8, $i15);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i18 := $ult.i32(32, $i17);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i19 := $i17;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i19);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 1);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i14);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i20);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p2);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} vslice_dummy_var_71 := printk.ref.ref.i32.i64(.str.46, .str.47, $i21, $i14);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i19 := 32;
    goto $bb6;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i17 := 8;
    goto $bb3;
}



const vb2_ops_wait_prepare: ref;

axiom vb2_ops_wait_prepare == $sub.ref(0, 250024);

procedure vb2_ops_wait_prepare($p0: ref);
  free requires assertsPassed;



implementation vb2_ops_wait_prepare($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    return;
}



const vb2_ops_wait_finish: ref;

axiom vb2_ops_wait_finish == $sub.ref(0, 251056);

procedure vb2_ops_wait_finish($p0: ref);
  free requires assertsPassed;



implementation vb2_ops_wait_finish($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    return;
}



const start_streaming: ref;

axiom start_streaming == $sub.ref(0, 252088);

procedure start_streaming($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.16, $M.18, $CurrAddr, $M.3, $M.20;



implementation start_streaming($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} {:cexpr "start_streaming:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $p2 := vb2_get_drv_priv($p0);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $i4 := stk1160_start_streaming($p3);
    call {:si_unique_call 286} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const stop_streaming: ref;

axiom stop_streaming == $sub.ref(0, 253120);

procedure stop_streaming($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.16, $M.18, $CurrAddr, $M.3, $M.20;



implementation stop_streaming($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $p1 := vb2_get_drv_priv($p0);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $i3 := stk1160_stop_streaming($p2);
    call {:si_unique_call 289} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const buffer_queue: ref;

axiom buffer_queue == $sub.ref(0, 254152);

procedure buffer_queue($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation buffer_queue($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 840)), $mul.ref(600, 1));
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $p3 := vb2_get_drv_priv($p2);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(7144, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $p7 := spinlock_check($p6);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $i8 := _raw_spin_lock_irqsave($p7);
    call {:si_unique_call 293} {:cexpr "flags"} boogie_si_record_i64($i8);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(2424, 1));
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $p14 := vb2_plane_vaddr($p0, 0);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(856, 1));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p14);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i16 := vb2_plane_size($p0, 0);
    call {:si_unique_call 297} {:cexpr "tmp___1"} boogie_si_record_i64($i16);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(864, 1));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(868, 1));
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 0);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(876, 1));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 0);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(864, 1));
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3416, 1));
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3420, 1));
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i27 := $mul.i32($i24, $i26);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i28 := $mul.i32($i27, 2);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i29 := $ult.i32($i22, $i28);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(840, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(2440, 1));
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} list_add_tail($p31, $p32);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(7144, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} spin_unlock_irqrestore($p33, $i8);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} vb2_buffer_done($p30, 5);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} vb2_buffer_done($p13, 5);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vb2_get_drv_priv: ref;

axiom vb2_get_drv_priv == $sub.ref(0, 255184);

procedure vb2_get_drv_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vb2_get_drv_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 648)), $mul.ref(48, 1));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const vb2_plane_vaddr: ref;

axiom vb2_plane_vaddr == $sub.ref(0, 256216);

procedure vb2_plane_vaddr($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation vb2_plane_vaddr($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} {:cexpr "vb2_plane_vaddr:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $p2 := external_alloc();
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const vb2_plane_size: ref;

axiom vb2_plane_size == $sub.ref(0, 257248);

procedure vb2_plane_size($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation vb2_plane_size($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} {:cexpr "vb2_plane_size:arg:plane_no"} boogie_si_record_i32($i1);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 840)), $mul.ref(608, 1));
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i32($i3, $i1);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i1);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 840)), $mul.ref(88, 1)), $mul.ref($i5, 64)), $mul.ref(4, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 258280);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} __list_add($p0, $p3, $p1);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 259312);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    return;
}



const stk1160_stop_streaming: ref;

axiom stk1160_stop_streaming == $sub.ref(0, 260344);

procedure stk1160_stop_streaming($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.16, $M.18, $CurrAddr, $M.3, $M.20;



implementation stk1160_stop_streaming($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i5: i8;
  var $i6: i1;
  var $p8: ref;
  var $i4: i32;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(6808, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i2 := mutex_lock_interruptible_nested($p1, 0);
    call {:si_unique_call 306} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} stk1160_cancel_isoc($p0);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i5 := $M.15;
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} stk1160_free_isoc($p0);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} stk1160_stop_hw($p0);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} stk1160_clear_queue($p0);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} vslice_dummy_var_72 := printk.ref(.str.44);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(6808, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} mutex_unlock($p8);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 512);
    goto $bb3;
}



const mutex_lock_interruptible_nested: ref;

axiom mutex_lock_interruptible_nested == $sub.ref(0, 261376);

procedure mutex_lock_interruptible_nested($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_lock_interruptible_nested($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 313} {:cexpr "mutex_lock_interruptible_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 1} true;
    call {:si_unique_call 314} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 315} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const stk1160_stop_hw: ref;

axiom stk1160_stop_hw == $sub.ref(0, 262408);

procedure stk1160_stop_hw($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.16, $M.18, $CurrAddr, $M.3, $M.20;



implementation stk1160_stop_hw($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p9: ref;
  var $p10: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p26: ref;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2424, 1));
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3120, 1));
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3120, 1));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} vslice_dummy_var_73 := printk.ref.i32(.str.45, $i7);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2424, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} vslice_dummy_var_74 := usb_set_interface($p10, 0, 0);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} vslice_dummy_var_75 := stk1160_write_reg($p0, 256, 0);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} vslice_dummy_var_76 := stk1160_write_reg($p0, 259, 0);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p18, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i21, $i24);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p26 := $p19;
    goto $bb8;

  $bb8:
    call $p27, $p28, $p29, $p30, $i31, $i32, $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $p41, $p42, $p43, $p44, $p45, $p46, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $p26, vslice_dummy_var_77 := stk1160_stop_hw_loop_$bb8($i24, $p27, $p28, $p29, $p30, $i31, $i32, $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $p41, $p42, $p43, $p44, $p45, $p46, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $p26, vslice_dummy_var_77);
    goto $bb8_last;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 296)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p51, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, $i24);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i55 == 1);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb16:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $p26 := $p52;
    goto $bb16_dummy;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p26, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 240)), $mul.ref(56, 1));
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb12;

  $bb13:
    assume $i40 == 1;
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p26, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 240)), $mul.ref(56, 1));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    call {:si_unique_call 320} vslice_dummy_var_77 := devirtbounce($p46, $p26, 0);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1598;
}



const usb_set_interface: ref;

axiom usb_set_interface == $sub.ref(0, 263440);

procedure usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 321} {:cexpr "usb_set_interface:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 322} {:cexpr "usb_set_interface:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 1} true;
    call {:si_unique_call 323} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 324} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const stk1160_start_streaming: ref;

axiom stk1160_start_streaming == $sub.ref(0, 264472);

procedure stk1160_start_streaming($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.16, $M.18, $CurrAddr, $M.3, $M.20;



implementation stk1160_start_streaming($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i8;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i23: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p50: ref;
  var $p83: ref;
  var $i18: i32;
  var $p84: ref;
  var $p85: ref;
  var $p87: ref;
  var $i5: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2424, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(6808, 1));
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $i7 := mutex_lock_interruptible_nested($p6, 0);
    call {:si_unique_call 326} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $i9 := stk1160_set_alternate($p0);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 328} {:cexpr "new_pkt_size"} boogie_si_record_i8($i10);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(4, 1));
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i14 == 1);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i10);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(4, 1));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, 0);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p42, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i45, $i48);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} vslice_dummy_var_81 := stk1160_write_reg($p0, 256, 179);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} vslice_dummy_var_82 := stk1160_write_reg($p0, 259, 0);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} vslice_dummy_var_83 := printk.ref(.str.49);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(6808, 1));
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} mutex_unlock($p83);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb30:
    assume $i49 == 1;
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p50 := $p43;
    goto $bb33;

  $bb33:
    call $p51, $p52, $p53, $p54, $i55, $i56, $p57, $p58, $p59, $p60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $p69, $p70, $p73, $p74, $p75, $p76, $p77, $i78, $i79, $p50, vslice_dummy_var_80 := stk1160_start_streaming_loop_$bb33($i48, $p51, $p52, $p53, $p54, $i55, $i56, $p57, $p58, $p59, $p60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $p69, $p70, $p73, $p74, $p75, $p76, $p77, $i78, $i79, $p50, vslice_dummy_var_80);
    goto $bb33_last;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p50, $mul.ref(0, 296)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p75, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p75, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, $i48);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i79 == 1);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb41:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $p50 := $p76;
    goto $bb41_dummy;

  $bb35:
    assume $i56 == 1;
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p50, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 240)), $mul.ref(56, 1));
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb37;

  $bb38:
    assume $i64 == 1;
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p50, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 240)), $mul.ref(56, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    call {:si_unique_call 339} vslice_dummy_var_80 := devirtbounce($p70, $p50, 1);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb18:
    assume $i22 == 1;
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb21;

  $bb21:
    call $p25, $p26, $i27, $p28, $p29, $i30, $i31, $i32, $i33, $i35, $i36, $i37, $i23 := stk1160_start_streaming_loop_$bb21($p0, $p20, $p25, $p26, $i27, $p28, $p29, $i30, $i31, $i32, $i33, $i35, $i36, $i37, $i23);
    goto $bb21_last;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(8, 1));
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i23);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p26, $mul.ref($i27, 8));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $i30 := ldv_usb_submit_urb_10($p29, 208);
    call {:si_unique_call 335} {:cexpr "rc"} boogie_si_record_i32($i30);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i23, $i30;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i23, 1);
    call {:si_unique_call 338} {:cexpr "i"} boogie_si_record_i32($i35);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p20);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i37 := $sgt.i32($i36, $i35);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i37 == 1);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb27:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i23 := $i35;
    goto $bb27_dummy;

  $bb23:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} vslice_dummy_var_79 := printk.ref.i32.i32(.str.48, $i32, $i33);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} stk1160_uninit_isoc($p0);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i18 := $i33;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2424, 1));
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} vslice_dummy_var_78 := usb_set_interface($p85, 0, 0);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} stk1160_clear_queue($p0);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(6808, 1));
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} mutex_unlock($p87);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i5 := $i18;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $i16 := stk1160_alloc_isoc($p0);
    call {:si_unique_call 330} {:cexpr "rc"} boogie_si_record_i32($i16);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i18 := $i16;
    goto $bb15;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb9;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 512);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;

  $bb41_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1715;

  $bb27_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1682;
}



const stk1160_set_alternate: ref;

axiom stk1160_set_alternate == $sub.ref(0, 265504);

procedure stk1160_set_alternate($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0;



implementation stk1160_set_alternate($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i6: i32;
  var $p32: ref;
  var $i33: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $p48: ref;
  var $i49: i32;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i64;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $i66: i8;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i64;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $i75: i1;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3120, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 344} {:cexpr "prev_alt"} boogie_si_record_i32($i2);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3124, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 0);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3120, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} vslice_dummy_var_84 := printk.ref.i32(.str.45, $i33);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3120, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, $i2);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3104, 1));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3112, 1));
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3120, 1));
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p59, $mul.ref($i62, 4));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i57, $i64);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i66 := $zext.i1.i8($i65);
    call {:si_unique_call 350} {:cexpr "new_pkt_size"} boogie_si_record_i8($i66);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3112, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3120, 1));
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i70);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p68, $mul.ref($i71, 4));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3104, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, $i73);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i8.i1($i66);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $r := $i75;
    return;

  $bb16:
    assume $i37 == 1;
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3120, 1));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} vslice_dummy_var_85 := printk.ref.i32.i32(.str.50, 3072, $i39);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3120, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3112, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3120, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p44, $mul.ref($i47, 4));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} vslice_dummy_var_86 := printk.ref.i32.i32(.str.51, $i42, $i49);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2424, 1));
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3120, 1));
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} vslice_dummy_var_87 := usb_set_interface($p52, 0, $i54);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $p7, $p8, $i9, $p10, $i11, $i12, $i13, $p15, $p16, $i17, $p18, $i19, $p20, $p21, $p22, $i23, $i24, $p25, $i26, $i27, $p28, $i29, $i30, $i31, $i6 := stk1160_set_alternate_loop_$bb4($p0, $p3, $p7, $p8, $i9, $p10, $i11, $i12, $i13, $p15, $p16, $i17, $p18, $i19, $p20, $p21, $p22, $i23, $i24, $p25, $i26, $i27, $p28, $i29, $i30, $i31, $i6);
    goto $bb4_last;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3112, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i6);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p8, $mul.ref($i9, 4));
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i12 := $uge.i32($i11, 3072);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i13 := $i6;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3112, 1));
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i6);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p16, $mul.ref($i17, 4));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3112, 1));
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3120, 1));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p21, $mul.ref($i24, 4));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i27 := $ugt.i32($i19, $i26);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i6, 1);
    call {:si_unique_call 346} {:cexpr "i"} boogie_si_record_i32($i29);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p3);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i30, $i29);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i29;
    goto $bb13_dummy;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3120, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i6);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3120, 1));
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1767;
}



const stk1160_alloc_isoc: ref;

axiom stk1160_alloc_isoc == $sub.ref(0, 266536);

procedure stk1160_alloc_isoc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $CurrAddr;



implementation stk1160_alloc_isoc($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $i48: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $i74: i32;
  var $i76: i1;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $p91: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p109: ref;
  var $p111: ref;
  var $i112: i32;
  var $p115: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i44: i32;
  var $p123: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $p128: ref;
  var $p129: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i64;
  var $p134: ref;
  var $i135: i32;
  var $i137: i32;
  var $p139: ref;
  var $i50: i32;
  var $i140: i32;
  var $p142: ref;
  var $i27: i32;
  var $p145: ref;
  var $p147: ref;
  var $i148: i32;
  var $p151: ref;
  var $p153: ref;
  var $i154: i32;
  var $i155: i32;
  var $p158: ref;
  var $p160: ref;
  var $i161: i32;
  var $p164: ref;
  var $p166: ref;
  var $i167: i32;
  var $i168: i32;
  var $p171: ref;
  var $p173: ref;
  var $i174: i32;
  var $p177: ref;
  var $p179: ref;
  var $i180: i32;
  var $i181: i32;
  var $p184: ref;
  var $p186: ref;
  var $i187: i32;
  var $p190: ref;
  var $p192: ref;
  var $i193: i32;
  var $i194: i32;
  var $p197: ref;
  var $p199: ref;
  var $i200: i32;
  var $p203: ref;
  var $p205: ref;
  var $i206: i32;
  var $i207: i32;
  var $p210: ref;
  var $p212: ref;
  var $i213: i32;
  var $p216: ref;
  var $p218: ref;
  var $i219: i32;
  var $i220: i32;
  var $p223: ref;
  var $p225: ref;
  var $i226: i32;
  var $p229: ref;
  var $p231: ref;
  var $i232: i32;
  var $i233: i32;
  var $p236: ref;
  var $p238: ref;
  var $i239: i32;
  var $p242: ref;
  var $p244: ref;
  var $i245: i32;
  var $i246: i32;
  var $p249: ref;
  var $p251: ref;
  var $i252: i32;
  var $p255: ref;
  var $p257: ref;
  var $i258: i32;
  var $i259: i32;
  var $p262: ref;
  var $p264: ref;
  var $i265: i32;
  var $p268: ref;
  var $p270: ref;
  var $i271: i32;
  var $i272: i32;
  var $p275: ref;
  var $p277: ref;
  var $i278: i32;
  var $p281: ref;
  var $p283: ref;
  var $i284: i32;
  var $i285: i32;
  var $p288: ref;
  var $p290: ref;
  var $i291: i32;
  var $p294: ref;
  var $p296: ref;
  var $i297: i32;
  var $i298: i32;
  var $p301: ref;
  var $p303: ref;
  var $i304: i32;
  var $p307: ref;
  var $p309: ref;
  var $i310: i32;
  var $i311: i32;
  var $p314: ref;
  var $p316: ref;
  var $i317: i32;
  var $p320: ref;
  var $p322: ref;
  var $i323: i32;
  var $i324: i32;
  var $p327: ref;
  var $p329: ref;
  var $i330: i32;
  var $p333: ref;
  var $p335: ref;
  var $i336: i32;
  var $i337: i32;
  var $p340: ref;
  var $p342: ref;
  var $i343: i32;
  var $p346: ref;
  var $p348: ref;
  var $i349: i32;
  var $i350: i32;
  var $p353: ref;
  var $p355: ref;
  var $i356: i32;
  var $p359: ref;
  var $p361: ref;
  var $i362: i32;
  var $i363: i32;
  var $p366: ref;
  var $p368: ref;
  var $i369: i32;
  var $p372: ref;
  var $p374: ref;
  var $i375: i32;
  var $i376: i32;
  var $p379: ref;
  var $p381: ref;
  var $i382: i32;
  var $p385: ref;
  var $p387: ref;
  var $i388: i32;
  var $i389: i32;
  var $p392: ref;
  var $p394: ref;
  var $i395: i32;
  var $p398: ref;
  var $p400: ref;
  var $i401: i32;
  var $i402: i32;
  var $p405: ref;
  var $p407: ref;
  var $i408: i32;
  var $p411: ref;
  var $p413: ref;
  var $i414: i32;
  var $i415: i32;
  var $p418: ref;
  var $p420: ref;
  var $i421: i32;
  var $p424: ref;
  var $p426: ref;
  var $i427: i32;
  var $i428: i32;
  var $p431: ref;
  var $p433: ref;
  var $i434: i32;
  var $p437: ref;
  var $p439: ref;
  var $i440: i32;
  var $i441: i32;
  var $p444: ref;
  var $p446: ref;
  var $i447: i32;
  var $p450: ref;
  var $p452: ref;
  var $i453: i32;
  var $i454: i32;
  var $p457: ref;
  var $p459: ref;
  var $i460: i32;
  var $p463: ref;
  var $p465: ref;
  var $i466: i32;
  var $i467: i32;
  var $p470: ref;
  var $p472: ref;
  var $i473: i32;
  var $p476: ref;
  var $p478: ref;
  var $i479: i32;
  var $i480: i32;
  var $p483: ref;
  var $p485: ref;
  var $i486: i32;
  var $p489: ref;
  var $p491: ref;
  var $i492: i32;
  var $i493: i32;
  var $p496: ref;
  var $p498: ref;
  var $i499: i32;
  var $p502: ref;
  var $p504: ref;
  var $i505: i32;
  var $i506: i32;
  var $p509: ref;
  var $p511: ref;
  var $i512: i32;
  var $p515: ref;
  var $p517: ref;
  var $i518: i32;
  var $i519: i32;
  var $p522: ref;
  var $p524: ref;
  var $i525: i32;
  var $p528: ref;
  var $p530: ref;
  var $i531: i32;
  var $i532: i32;
  var $p535: ref;
  var $p537: ref;
  var $i538: i32;
  var $p541: ref;
  var $p543: ref;
  var $i544: i32;
  var $i545: i32;
  var $p548: ref;
  var $p550: ref;
  var $i551: i32;
  var $p554: ref;
  var $p556: ref;
  var $i557: i32;
  var $i558: i32;
  var $p561: ref;
  var $p563: ref;
  var $i564: i32;
  var $p567: ref;
  var $p569: ref;
  var $i570: i32;
  var $i571: i32;
  var $p574: ref;
  var $p576: ref;
  var $i577: i32;
  var $p580: ref;
  var $p582: ref;
  var $i583: i32;
  var $i584: i32;
  var $p587: ref;
  var $p589: ref;
  var $i590: i32;
  var $p593: ref;
  var $p595: ref;
  var $i596: i32;
  var $i597: i32;
  var $p600: ref;
  var $p602: ref;
  var $i603: i32;
  var $p606: ref;
  var $p608: ref;
  var $i609: i32;
  var $i610: i32;
  var $p613: ref;
  var $p615: ref;
  var $i616: i32;
  var $p619: ref;
  var $p621: ref;
  var $i622: i32;
  var $i623: i32;
  var $p626: ref;
  var $p628: ref;
  var $i629: i32;
  var $p632: ref;
  var $p634: ref;
  var $i635: i32;
  var $i636: i32;
  var $p639: ref;
  var $p641: ref;
  var $i642: i32;
  var $p645: ref;
  var $p647: ref;
  var $i648: i32;
  var $i649: i32;
  var $p652: ref;
  var $p654: ref;
  var $i655: i32;
  var $p658: ref;
  var $p660: ref;
  var $i661: i32;
  var $i662: i32;
  var $p665: ref;
  var $p667: ref;
  var $i668: i32;
  var $p671: ref;
  var $p673: ref;
  var $i674: i32;
  var $i675: i32;
  var $p678: ref;
  var $p680: ref;
  var $i681: i32;
  var $p684: ref;
  var $p686: ref;
  var $i687: i32;
  var $i688: i32;
  var $p691: ref;
  var $p693: ref;
  var $i694: i32;
  var $p697: ref;
  var $p699: ref;
  var $i700: i32;
  var $i701: i32;
  var $p704: ref;
  var $p706: ref;
  var $i707: i32;
  var $p710: ref;
  var $p712: ref;
  var $i713: i32;
  var $i714: i32;
  var $p717: ref;
  var $p719: ref;
  var $i720: i32;
  var $p723: ref;
  var $p725: ref;
  var $i726: i32;
  var $i727: i32;
  var $p730: ref;
  var $p732: ref;
  var $i733: i32;
  var $p736: ref;
  var $p738: ref;
  var $i739: i32;
  var $i740: i32;
  var $p743: ref;
  var $p745: ref;
  var $i746: i32;
  var $p749: ref;
  var $p751: ref;
  var $i752: i32;
  var $i753: i32;
  var $p756: ref;
  var $p758: ref;
  var $i759: i32;
  var $p762: ref;
  var $p764: ref;
  var $i765: i32;
  var $i766: i32;
  var $p769: ref;
  var $p771: ref;
  var $i772: i32;
  var $p775: ref;
  var $p777: ref;
  var $i778: i32;
  var $i779: i32;
  var $p782: ref;
  var $p784: ref;
  var $i785: i32;
  var $p788: ref;
  var $p790: ref;
  var $i791: i32;
  var $i792: i32;
  var $p795: ref;
  var $p797: ref;
  var $i798: i32;
  var $p801: ref;
  var $p803: ref;
  var $i804: i32;
  var $i805: i32;
  var $p808: ref;
  var $p810: ref;
  var $i811: i32;
  var $p814: ref;
  var $p816: ref;
  var $i817: i32;
  var $i818: i32;
  var $p821: ref;
  var $p823: ref;
  var $i824: i32;
  var $p827: ref;
  var $p829: ref;
  var $i830: i32;
  var $i831: i32;
  var $p834: ref;
  var $p836: ref;
  var $i837: i32;
  var $p840: ref;
  var $p842: ref;
  var $i843: i32;
  var $i844: i32;
  var $p847: ref;
  var $p849: ref;
  var $i850: i32;
  var $p853: ref;
  var $p855: ref;
  var $i856: i32;
  var $i857: i32;
  var $p860: ref;
  var $p862: ref;
  var $i863: i32;
  var $p866: ref;
  var $p868: ref;
  var $i869: i32;
  var $i870: i32;
  var $p873: ref;
  var $p875: ref;
  var $i876: i32;
  var $p879: ref;
  var $p881: ref;
  var $i882: i32;
  var $i883: i32;
  var $p886: ref;
  var $p888: ref;
  var $i889: i32;
  var $p892: ref;
  var $p894: ref;
  var $i895: i32;
  var $i896: i32;
  var $p899: ref;
  var $p901: ref;
  var $i902: i32;
  var $p905: ref;
  var $p907: ref;
  var $i908: i32;
  var $i909: i32;
  var $p912: ref;
  var $p914: ref;
  var $i915: i32;
  var $p918: ref;
  var $p920: ref;
  var $i921: i32;
  var $i922: i32;
  var $p925: ref;
  var $p927: ref;
  var $i928: i32;
  var $p931: ref;
  var $p933: ref;
  var $i934: i32;
  var $i935: i32;
  var $p938: ref;
  var $p940: ref;
  var $i941: i32;
  var $p944: ref;
  var $p946: ref;
  var $i947: i32;
  var $i948: i32;
  var $p951: ref;
  var $p953: ref;
  var $i954: i32;
  var $p957: ref;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(4, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} vslice_dummy_var_88 := printk.ref(.str.9);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3104, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i7, 64);
    call {:si_unique_call 353} {:cexpr "sb_size"} boogie_si_record_i32($i8);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(24, 1));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $0.ref);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3104, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i12);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64(16);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i16 := $mul.i64($i15, 8);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $p17 := kzalloc($i16, 208);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(8, 1));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p17);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(8, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64(16);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i29 := $mul.i64($i28, 8);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $p30 := kzalloc($i29, 208);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(16, 1));
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p30);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(16, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb11;

  $bb11:
    call $p45, $i46, $i47, $i48, $p52, $p53, $i54, $p55, $p56, $p57, $i58, $p59, $p60, $p62, $p63, $i64, $p65, $p67, $p68, $i69, $p70, $p71, $i72, $i73, $i74, $p78, $p79, $i80, $p81, $p82, $i83, $p84, $p85, $p86, $p87, $p88, $i89, $i90, $p91, $p93, $p94, $i95, $p96, $p97, $p98, $p99, $p100, $p102, $p103, $p104, $p105, $p106, $p109, $p111, $i112, $p115, $p117, $i118, $i119, $i120, $i44, $p145, $p147, $i148, $p151, $p153, $i154, $i155, $p158, $p160, $i161, $p164, $p166, $i167, $i168, $p171, $p173, $i174, $p177, $p179, $i180, $i181, $p184, $p186, $i187, $p190, $p192, $i193, $i194, $p197, $p199, $i200, $p203, $p205, $i206, $i207, $p210, $p212, $i213, $p216, $p218, $i219, $i220, $p223, $p225, $i226, $p229, $p231, $i232, $i233, $p236, $p238, $i239, $p242, $p244, $i245, $i246, $p249, $p251, $i252, $p255, $p257, $i258, $i259, $p262, $p264, $i265, $p268, $p270, $i271, $i272, $p275, $p277, $i278, $p281, $p283, $i284, $i285, $p288, $p290, $i291, $p294, $p296, $i297, $i298, $p301, $p303, $i304, $p307, $p309, $i310, $i311, $p314, $p316, $i317, $p320, $p322, $i323, $i324, $p327, $p329, $i330, $p333, $p335, $i336, $i337, $p340, $p342, $i343, $p346, $p348, $i349, $i350, $p353, $p355, $i356, $p359, $p361, $i362, $i363, $p366, $p368, $i369, $p372, $p374, $i375, $i376, $p379, $p381, $i382, $p385, $p387, $i388, $i389, $p392, $p394, $i395, $p398, $p400, $i401, $i402, $p405, $p407, $i408, $p411, $p413, $i414, $i415, $p418, $p420, $i421, $p424, $p426, $i427, $i428, $p431, $p433, $i434, $p437, $p439, $i440, $i441, $p444, $p446, $i447, $p450, $p452, $i453, $i454, $p457, $p459, $i460, $p463, $p465, $i466, $i467, $p470, $p472, $i473, $p476, $p478, $i479, $i480, $p483, $p485, $i486, $p489, $p491, $i492, $i493, $p496, $p498, $i499, $p502, $p504, $i505, $i506, $p509, $p511, $i512, $p515, $p517, $i518, $i519, $p522, $p524, $i525, $p528, $p530, $i531, $i532, $p535, $p537, $i538, $p541, $p543, $i544, $i545, $p548, $p550, $i551, $p554, $p556, $i557, $i558, $p561, $p563, $i564, $p567, $p569, $i570, $i571, $p574, $p576, $i577, $p580, $p582, $i583, $i584, $p587, $p589, $i590, $p593, $p595, $i596, $i597, $p600, $p602, $i603, $p606, $p608, $i609, $i610, $p613, $p615, $i616, $p619, $p621, $i622, $i623, $p626, $p628, $i629, $p632, $p634, $i635, $i636, $p639, $p641, $i642, $p645, $p647, $i648, $i649, $p652, $p654, $i655, $p658, $p660, $i661, $i662, $p665, $p667, $i668, $p671, $p673, $i674, $i675, $p678, $p680, $i681, $p684, $p686, $i687, $i688, $p691, $p693, $i694, $p697, $p699, $i700, $i701, $p704, $p706, $i707, $p710, $p712, $i713, $i714, $p717, $p719, $i720, $p723, $p725, $i726, $i727, $p730, $p732, $i733, $p736, $p738, $i739, $i740, $p743, $p745, $i746, $p749, $p751, $i752, $i753, $p756, $p758, $i759, $p762, $p764, $i765, $i766, $p769, $p771, $i772, $p775, $p777, $i778, $i779, $p782, $p784, $i785, $p788, $p790, $i791, $i792, $p795, $p797, $i798, $p801, $p803, $i804, $i805, $p808, $p810, $i811, $p814, $p816, $i817, $i818, $p821, $p823, $i824, $p827, $p829, $i830, $i831, $p834, $p836, $i837, $p840, $p842, $i843, $i844, $p847, $p849, $i850, $p853, $p855, $i856, $i857, $p860, $p862, $i863, $p866, $p868, $i869, $i870, $p873, $p875, $i876, $p879, $p881, $i882, $i883, $p886, $p888, $i889, $p892, $p894, $i895, $i896, $p899, $p901, $i902, $p905, $p907, $i908, $i909, $p912, $p914, $i915, $p918, $p920, $i921, $i922, $p925, $p927, $i928, $p931, $p933, $i934, $i935, $p938, $p940, $i941, $p944, $p946, $i947, $i948, $p951, $p953, $i954, $p957, cmdloc_dummy_var_11, cmdloc_dummy_var_12 := stk1160_alloc_isoc_loop_$bb11($p0, $i8, $p45, $i46, $i47, $i48, $p52, $p53, $i54, $p55, $p56, $p57, $i58, $p59, $p60, $p62, $p63, $i64, $p65, $p67, $p68, $i69, $p70, $p71, $i72, $i73, $i74, $p78, $p79, $i80, $p81, $p82, $i83, $p84, $p85, $p86, $p87, $p88, $i89, $i90, $p91, $p93, $p94, $i95, $p96, $p97, $p98, $p99, $p100, $p102, $p103, $p104, $p105, $p106, $p109, $p111, $i112, $p115, $p117, $i118, $i119, $i120, $i44, $p145, $p147, $i148, $p151, $p153, $i154, $i155, $p158, $p160, $i161, $p164, $p166, $i167, $i168, $p171, $p173, $i174, $p177, $p179, $i180, $i181, $p184, $p186, $i187, $p190, $p192, $i193, $i194, $p197, $p199, $i200, $p203, $p205, $i206, $i207, $p210, $p212, $i213, $p216, $p218, $i219, $i220, $p223, $p225, $i226, $p229, $p231, $i232, $i233, $p236, $p238, $i239, $p242, $p244, $i245, $i246, $p249, $p251, $i252, $p255, $p257, $i258, $i259, $p262, $p264, $i265, $p268, $p270, $i271, $i272, $p275, $p277, $i278, $p281, $p283, $i284, $i285, $p288, $p290, $i291, $p294, $p296, $i297, $i298, $p301, $p303, $i304, $p307, $p309, $i310, $i311, $p314, $p316, $i317, $p320, $p322, $i323, $i324, $p327, $p329, $i330, $p333, $p335, $i336, $i337, $p340, $p342, $i343, $p346, $p348, $i349, $i350, $p353, $p355, $i356, $p359, $p361, $i362, $i363, $p366, $p368, $i369, $p372, $p374, $i375, $i376, $p379, $p381, $i382, $p385, $p387, $i388, $i389, $p392, $p394, $i395, $p398, $p400, $i401, $i402, $p405, $p407, $i408, $p411, $p413, $i414, $i415, $p418, $p420, $i421, $p424, $p426, $i427, $i428, $p431, $p433, $i434, $p437, $p439, $i440, $i441, $p444, $p446, $i447, $p450, $p452, $i453, $i454, $p457, $p459, $i460, $p463, $p465, $i466, $i467, $p470, $p472, $i473, $p476, $p478, $i479, $i480, $p483, $p485, $i486, $p489, $p491, $i492, $i493, $p496, $p498, $i499, $p502, $p504, $i505, $i506, $p509, $p511, $i512, $p515, $p517, $i518, $i519, $p522, $p524, $i525, $p528, $p530, $i531, $i532, $p535, $p537, $i538, $p541, $p543, $i544, $i545, $p548, $p550, $i551, $p554, $p556, $i557, $i558, $p561, $p563, $i564, $p567, $p569, $i570, $i571, $p574, $p576, $i577, $p580, $p582, $i583, $i584, $p587, $p589, $i590, $p593, $p595, $i596, $i597, $p600, $p602, $i603, $p606, $p608, $i609, $i610, $p613, $p615, $i616, $p619, $p621, $i622, $i623, $p626, $p628, $i629, $p632, $p634, $i635, $i636, $p639, $p641, $i642, $p645, $p647, $i648, $i649, $p652, $p654, $i655, $p658, $p660, $i661, $i662, $p665, $p667, $i668, $p671, $p673, $i674, $i675, $p678, $p680, $i681, $p684, $p686, $i687, $i688, $p691, $p693, $i694, $p697, $p699, $i700, $i701, $p704, $p706, $i707, $p710, $p712, $i713, $i714, $p717, $p719, $i720, $p723, $p725, $i726, $i727, $p730, $p732, $i733, $p736, $p738, $i739, $i740, $p743, $p745, $i746, $p749, $p751, $i752, $i753, $p756, $p758, $i759, $p762, $p764, $i765, $i766, $p769, $p771, $i772, $p775, $p777, $i778, $i779, $p782, $p784, $i785, $p788, $p790, $i791, $i792, $p795, $p797, $i798, $p801, $p803, $i804, $i805, $p808, $p810, $i811, $p814, $p816, $i817, $i818, $p821, $p823, $i824, $p827, $p829, $i830, $i831, $p834, $p836, $i837, $p840, $p842, $i843, $i844, $p847, $p849, $i850, $p853, $p855, $i856, $i857, $p860, $p862, $i863, $p866, $p868, $i869, $i870, $p873, $p875, $i876, $p879, $p881, $i882, $i883, $p886, $p888, $i889, $p892, $p894, $i895, $i896, $p899, $p901, $i902, $p905, $p907, $i908, $i909, $p912, $p914, $i915, $p918, $p920, $i921, $i922, $p925, $p927, $i928, $p931, $p933, $i934, $i935, $p938, $p940, $i941, $p944, $p946, $i947, $i948, $p951, $p953, $i954, $p957, cmdloc_dummy_var_11, cmdloc_dummy_var_12);
    goto $bb11_last;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $p45 := ldv_usb_alloc_urb_14(64, 208);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i48 := $i44;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(8, 1));
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i44);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p53, $mul.ref($i54, 8));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, $p45);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2424, 1));
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i8);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $p60 := usb_alloc_coherent($p57, $i58, 208, $p59);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(16, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i44);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p63, $mul.ref($i64, 8));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p65, $p60);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(16, 1));
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i44);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p68, $mul.ref($i69, 8));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i73 := $eq.i64($i72, 0);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i74 := $i44;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(16, 1));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i44);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p79, $mul.ref($i80, 8));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i8);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    call {:si_unique_call 366} cmdloc_dummy_var_12 := $memset.i8(cmdloc_dummy_var_11, $p82, 0, $i83, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_12;
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2424, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p86, $p85);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2424, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $i89 := __create_pipe($p88, 130);
    call {:si_unique_call 368} {:cexpr "tmp___2"} boogie_si_record_i32($i89);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i90 := $or.i32($i89, 128);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, $i90);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(16, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i95 := $sext.i32.i64($i44);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p94, $mul.ref($i95, 8));
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p98, $p97);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, $i8);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p100, stk1160_isoc_irq);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p102, $p0);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p103, 1);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p104, 0);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p105, 64);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, 6);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p109, 0);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p115, $i112);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    call {:si_unique_call 369} {:cexpr "k"} boogie_si_record_i32($i118);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p145, $i118);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.0, $p147);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p151, $i148);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.0, $p153);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i155 := $add.i32($i154, $i118);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p158, $i155);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.0, $p160);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p164, $i161);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.0, $p166);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i168 := $add.i32($i167, $i155);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p171, $i168);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.0, $p173);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p177, $i174);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i180 := $load.i32($M.0, $p179);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i181 := $add.i32($i180, $i168);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p184, $i181);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.0, $p186);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p190, $i187);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.0, $p192);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i194 := $add.i32($i193, $i181);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p197, $i194);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.0, $p199);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p203, $i200);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i206 := $load.i32($M.0, $p205);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i207 := $add.i32($i206, $i194);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p210, $i207);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.0, $p212);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p216, $i213);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i219 := $load.i32($M.0, $p218);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i220 := $add.i32($i219, $i207);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p223, $i220);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i226 := $load.i32($M.0, $p225);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p229, $i226);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i232 := $load.i32($M.0, $p231);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i233 := $add.i32($i232, $i220);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p236, $i233);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i239 := $load.i32($M.0, $p238);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p242, $i239);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i245 := $load.i32($M.0, $p244);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i246 := $add.i32($i245, $i233);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p249, $i246);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i252 := $load.i32($M.0, $p251);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p255, $i252);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i258 := $load.i32($M.0, $p257);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i259 := $add.i32($i258, $i246);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p262, $i259);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i265 := $load.i32($M.0, $p264);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(4, 1));
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p268, $i265);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i271 := $load.i32($M.0, $p270);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i272 := $add.i32($i271, $i259);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p275, $i272);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i278 := $load.i32($M.0, $p277);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(4, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p281, $i278);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i284 := $load.i32($M.0, $p283);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i285 := $add.i32($i284, $i272);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p288, $i285);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i291 := $load.i32($M.0, $p290);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(4, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p294, $i291);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i297 := $load.i32($M.0, $p296);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i298 := $add.i32($i297, $i285);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p301, $i298);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i304 := $load.i32($M.0, $p303);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(4, 1));
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p307, $i304);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i310 := $load.i32($M.0, $p309);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i311 := $add.i32($i310, $i298);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p314, $i311);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i317 := $load.i32($M.0, $p316);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(4, 1));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p320, $i317);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i323 := $load.i32($M.0, $p322);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i324 := $add.i32($i323, $i311);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p327, $i324);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i330 := $load.i32($M.0, $p329);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(4, 1));
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p333, $i330);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i336 := $load.i32($M.0, $p335);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i337 := $add.i32($i336, $i324);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(0, 1));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p340, $i337);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i343 := $load.i32($M.0, $p342);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(4, 1));
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p346, $i343);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i349 := $load.i32($M.0, $p348);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i350 := $add.i32($i349, $i337);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(0, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p353, $i350);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i356 := $load.i32($M.0, $p355);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(4, 1));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p359, $i356);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i362 := $load.i32($M.0, $p361);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i363 := $add.i32($i362, $i350);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(0, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p366, $i363);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i369 := $load.i32($M.0, $p368);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(4, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p372, $i369);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i375 := $load.i32($M.0, $p374);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i376 := $add.i32($i375, $i363);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(0, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p379, $i376);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i382 := $load.i32($M.0, $p381);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(4, 1));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p385, $i382);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i388 := $load.i32($M.0, $p387);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i389 := $add.i32($i388, $i376);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(0, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p392, $i389);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i395 := $load.i32($M.0, $p394);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(4, 1));
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p398, $i395);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i401 := $load.i32($M.0, $p400);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i402 := $add.i32($i401, $i389);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(0, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p405, $i402);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i408 := $load.i32($M.0, $p407);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(4, 1));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p411, $i408);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i414 := $load.i32($M.0, $p413);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i415 := $add.i32($i414, $i402);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(0, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p418, $i415);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i421 := $load.i32($M.0, $p420);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(4, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p424, $i421);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i427 := $load.i32($M.0, $p426);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i428 := $add.i32($i427, $i415);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(0, 1));
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p431, $i428);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i434 := $load.i32($M.0, $p433);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(4, 1));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p437, $i434);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i440 := $load.i32($M.0, $p439);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i441 := $add.i32($i440, $i428);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(0, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p444, $i441);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i447 := $load.i32($M.0, $p446);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(4, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p450, $i447);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i453 := $load.i32($M.0, $p452);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i454 := $add.i32($i453, $i441);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(0, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p457, $i454);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i460 := $load.i32($M.0, $p459);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(4, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p463, $i460);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i466 := $load.i32($M.0, $p465);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i467 := $add.i32($i466, $i454);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(0, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p470, $i467);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i473 := $load.i32($M.0, $p472);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p476 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(4, 1));
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p476, $i473);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i479 := $load.i32($M.0, $p478);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i480 := $add.i32($i479, $i467);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(0, 1));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p483, $i480);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i486 := $load.i32($M.0, $p485);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(4, 1));
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p489, $i486);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i492 := $load.i32($M.0, $p491);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i493 := $add.i32($i492, $i480);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(0, 1));
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p496, $i493);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p498 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i499 := $load.i32($M.0, $p498);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p502 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(4, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p502, $i499);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p504 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i505 := $load.i32($M.0, $p504);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i506 := $add.i32($i505, $i493);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(0, 1));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p509, $i506);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i512 := $load.i32($M.0, $p511);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(4, 1));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p515, $i512);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i518 := $load.i32($M.0, $p517);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i519 := $add.i32($i518, $i506);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(0, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p522, $i519);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p524 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i525 := $load.i32($M.0, $p524);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p528 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(4, 1));
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p528, $i525);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i531 := $load.i32($M.0, $p530);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i532 := $add.i32($i531, $i519);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(0, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p535, $i532);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i538 := $load.i32($M.0, $p537);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(4, 1));
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p541, $i538);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i544 := $load.i32($M.0, $p543);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i545 := $add.i32($i544, $i532);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p548 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(32, 16)), $mul.ref(0, 1));
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p548, $i545);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p550 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i551 := $load.i32($M.0, $p550);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(32, 16)), $mul.ref(4, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p554, $i551);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i557 := $load.i32($M.0, $p556);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i558 := $add.i32($i557, $i545);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(33, 16)), $mul.ref(0, 1));
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p561, $i558);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p563 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i564 := $load.i32($M.0, $p563);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p567 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(33, 16)), $mul.ref(4, 1));
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p567, $i564);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i570 := $load.i32($M.0, $p569);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i571 := $add.i32($i570, $i558);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p574 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(34, 16)), $mul.ref(0, 1));
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p574, $i571);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i577 := $load.i32($M.0, $p576);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p580 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(34, 16)), $mul.ref(4, 1));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p580, $i577);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i583 := $load.i32($M.0, $p582);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i584 := $add.i32($i583, $i571);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p587 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(35, 16)), $mul.ref(0, 1));
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p587, $i584);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p589 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i590 := $load.i32($M.0, $p589);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p593 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(35, 16)), $mul.ref(4, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p593, $i590);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p595 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i596 := $load.i32($M.0, $p595);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i597 := $add.i32($i596, $i584);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p600 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(36, 16)), $mul.ref(0, 1));
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p600, $i597);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p602 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i603 := $load.i32($M.0, $p602);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p606 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(36, 16)), $mul.ref(4, 1));
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p606, $i603);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p608 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i609 := $load.i32($M.0, $p608);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i610 := $add.i32($i609, $i597);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(37, 16)), $mul.ref(0, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p613, $i610);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p615 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i616 := $load.i32($M.0, $p615);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p619 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(37, 16)), $mul.ref(4, 1));
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p619, $i616);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p621 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i622 := $load.i32($M.0, $p621);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i623 := $add.i32($i622, $i610);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p626 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(38, 16)), $mul.ref(0, 1));
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p626, $i623);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p628 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i629 := $load.i32($M.0, $p628);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $p632 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(38, 16)), $mul.ref(4, 1));
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p632, $i629);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p634 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i635 := $load.i32($M.0, $p634);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i636 := $add.i32($i635, $i623);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(39, 16)), $mul.ref(0, 1));
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p639, $i636);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i642 := $load.i32($M.0, $p641);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p645 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(39, 16)), $mul.ref(4, 1));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p645, $i642);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p647 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i648 := $load.i32($M.0, $p647);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i649 := $add.i32($i648, $i636);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p652 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(40, 16)), $mul.ref(0, 1));
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p652, $i649);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i655 := $load.i32($M.0, $p654);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p658 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(40, 16)), $mul.ref(4, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p658, $i655);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p660 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i661 := $load.i32($M.0, $p660);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i662 := $add.i32($i661, $i649);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p665 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(41, 16)), $mul.ref(0, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p665, $i662);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p667 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i668 := $load.i32($M.0, $p667);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(41, 16)), $mul.ref(4, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p671, $i668);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i674 := $load.i32($M.0, $p673);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i675 := $add.i32($i674, $i662);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p678 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(42, 16)), $mul.ref(0, 1));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p678, $i675);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p680 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i681 := $load.i32($M.0, $p680);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p684 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(42, 16)), $mul.ref(4, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p684, $i681);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p686 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i687 := $load.i32($M.0, $p686);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i688 := $add.i32($i687, $i675);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(43, 16)), $mul.ref(0, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p691, $i688);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p693 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i694 := $load.i32($M.0, $p693);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p697 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(43, 16)), $mul.ref(4, 1));
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p697, $i694);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p699 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i700 := $load.i32($M.0, $p699);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i701 := $add.i32($i700, $i688);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(44, 16)), $mul.ref(0, 1));
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p704, $i701);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p706 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i707 := $load.i32($M.0, $p706);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p710 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(44, 16)), $mul.ref(4, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p710, $i707);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p712 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i713 := $load.i32($M.0, $p712);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i714 := $add.i32($i713, $i701);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p717 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(45, 16)), $mul.ref(0, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p717, $i714);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p719 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i720 := $load.i32($M.0, $p719);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p723 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(45, 16)), $mul.ref(4, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p723, $i720);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p725 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i726 := $load.i32($M.0, $p725);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i727 := $add.i32($i726, $i714);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p730 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(46, 16)), $mul.ref(0, 1));
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p730, $i727);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i733 := $load.i32($M.0, $p732);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p736 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(46, 16)), $mul.ref(4, 1));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p736, $i733);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p738 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i739 := $load.i32($M.0, $p738);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i740 := $add.i32($i739, $i727);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p743 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(47, 16)), $mul.ref(0, 1));
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p743, $i740);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p745 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i746 := $load.i32($M.0, $p745);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p749 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(47, 16)), $mul.ref(4, 1));
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p749, $i746);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p751 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i752 := $load.i32($M.0, $p751);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i753 := $add.i32($i752, $i740);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p756 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(48, 16)), $mul.ref(0, 1));
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p756, $i753);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p758 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i759 := $load.i32($M.0, $p758);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p762 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(48, 16)), $mul.ref(4, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p762, $i759);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p764 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i765 := $load.i32($M.0, $p764);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i766 := $add.i32($i765, $i753);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p769 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(49, 16)), $mul.ref(0, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p769, $i766);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p771 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i772 := $load.i32($M.0, $p771);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p775 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(49, 16)), $mul.ref(4, 1));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p775, $i772);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p777 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i778 := $load.i32($M.0, $p777);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i779 := $add.i32($i778, $i766);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p782 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(50, 16)), $mul.ref(0, 1));
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p782, $i779);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p784 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i785 := $load.i32($M.0, $p784);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p788 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(50, 16)), $mul.ref(4, 1));
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p788, $i785);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p790 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i791 := $load.i32($M.0, $p790);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i792 := $add.i32($i791, $i779);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p795 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(51, 16)), $mul.ref(0, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p795, $i792);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p797 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i798 := $load.i32($M.0, $p797);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p801 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(51, 16)), $mul.ref(4, 1));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p801, $i798);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p803 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i804 := $load.i32($M.0, $p803);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i805 := $add.i32($i804, $i792);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p808 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(52, 16)), $mul.ref(0, 1));
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p808, $i805);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p810 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i811 := $load.i32($M.0, $p810);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p814 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(52, 16)), $mul.ref(4, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p814, $i811);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p816 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i817 := $load.i32($M.0, $p816);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i818 := $add.i32($i817, $i805);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p821 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(53, 16)), $mul.ref(0, 1));
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p821, $i818);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p823 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i824 := $load.i32($M.0, $p823);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p827 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(53, 16)), $mul.ref(4, 1));
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p827, $i824);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p829 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i830 := $load.i32($M.0, $p829);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i831 := $add.i32($i830, $i818);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p834 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(54, 16)), $mul.ref(0, 1));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p834, $i831);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p836 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i837 := $load.i32($M.0, $p836);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p840 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(54, 16)), $mul.ref(4, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p840, $i837);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p842 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i843 := $load.i32($M.0, $p842);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i844 := $add.i32($i843, $i831);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p847 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(55, 16)), $mul.ref(0, 1));
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p847, $i844);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p849 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i850 := $load.i32($M.0, $p849);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p853 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(55, 16)), $mul.ref(4, 1));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p853, $i850);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p855 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i856 := $load.i32($M.0, $p855);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i857 := $add.i32($i856, $i844);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p860 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(56, 16)), $mul.ref(0, 1));
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p860, $i857);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p862 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i863 := $load.i32($M.0, $p862);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p866 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(56, 16)), $mul.ref(4, 1));
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p866, $i863);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p868 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i869 := $load.i32($M.0, $p868);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i870 := $add.i32($i869, $i857);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p873 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(57, 16)), $mul.ref(0, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p873, $i870);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p875 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i876 := $load.i32($M.0, $p875);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p879 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(57, 16)), $mul.ref(4, 1));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p879, $i876);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p881 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i882 := $load.i32($M.0, $p881);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i883 := $add.i32($i882, $i870);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p886 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(58, 16)), $mul.ref(0, 1));
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p886, $i883);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p888 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i889 := $load.i32($M.0, $p888);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p892 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(58, 16)), $mul.ref(4, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p892, $i889);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p894 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i895 := $load.i32($M.0, $p894);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i896 := $add.i32($i895, $i883);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p899 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(59, 16)), $mul.ref(0, 1));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p899, $i896);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p901 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i902 := $load.i32($M.0, $p901);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p905 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(59, 16)), $mul.ref(4, 1));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p905, $i902);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p907 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i908 := $load.i32($M.0, $p907);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i909 := $add.i32($i908, $i896);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p912 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(60, 16)), $mul.ref(0, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p912, $i909);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p914 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i915 := $load.i32($M.0, $p914);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p918 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(60, 16)), $mul.ref(4, 1));
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p918, $i915);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p920 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i921 := $load.i32($M.0, $p920);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i922 := $add.i32($i921, $i909);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p925 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(61, 16)), $mul.ref(0, 1));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p925, $i922);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p927 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i928 := $load.i32($M.0, $p927);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p931 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(61, 16)), $mul.ref(4, 1));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p931, $i928);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p933 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i934 := $load.i32($M.0, $p933);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i935 := $add.i32($i934, $i922);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p938 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(62, 16)), $mul.ref(0, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p938, $i935);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p940 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i941 := $load.i32($M.0, $p940);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p944 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(62, 16)), $mul.ref(4, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p944, $i941);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p946 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i947 := $load.i32($M.0, $p946);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i948 := $add.i32($i947, $i935);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p951 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(63, 16)), $mul.ref(0, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p951, $i948);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p953 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i954 := $load.i32($M.0, $p953);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p957 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(63, 16)), $mul.ref(4, 1));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p957, $i954);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i119 := $add.i32($i44, 1);
    call {:si_unique_call 370} {:cexpr "i"} boogie_si_record_i32($i119);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i120 := $slt.i32($i119, 16);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} vslice_dummy_var_94 := printk.ref.i32(.str.14, 16);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(4, 1));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p123, 16);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb28:
    assume $i120 == 1;
    assume {:verifier.code 0} true;
    $i44 := $i119;
    goto $bb28_dummy;

  $bb17:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} vslice_dummy_var_92 := printk.ref.i32.i32(.str.13, $i8, $i74);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i76 := $sle.i32($i74, 0);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(8, 1));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i127 := $sext.i32.i64($i74);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p126, $mul.ref($i127, 8));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} ldv_usb_free_urb_15($p129);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(8, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i133 := $sext.i32.i64($i74);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($p132, $mul.ref($i133, 8));
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p134, $0.ref);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i135 := $add.i32($i74, $sub.i32(0, 1));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} vslice_dummy_var_93 := printk.ref.i32(.str.15, $i135);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i137 := $add.i32($i74, $sub.i32(0, 1));
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(4, 1));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p139, $i137);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb6;

  $bb19:
    assume $i76 == 1;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i50 := $i74;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i140 := $add.i32($i50, 1);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(4, 1));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p142, $i140);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} stk1160_free_isoc($p0);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 12);
    goto $bb6;

  $bb13:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} vslice_dummy_var_91 := printk.ref.i32(.str.12, $i48);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i50 := $i48;
    goto $bb15;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} vslice_dummy_var_90 := printk.ref(.str.11);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(8, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} kfree($p43);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 12);
    goto $bb6;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} vslice_dummy_var_89 := printk.ref(.str.10);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} stk1160_uninit_isoc($p0);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb28_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1906;
}



const ldv_usb_submit_urb_10: ref;

axiom ldv_usb_submit_urb_10 == $sub.ref(0, 267568);

procedure ldv_usb_submit_urb_10($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.0, $M.3, $M.20, $M.2, $CurrAddr;



implementation ldv_usb_submit_urb_10($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} {:cexpr "ldv_usb_submit_urb_10:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $i2 := ldv_submit_urb($p0);
    call {:si_unique_call 374} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_submit_urb: ref;

axiom ldv_submit_urb == $sub.ref(0, 268600);

procedure ldv_submit_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.0, $M.3, $M.20, $M.2, $CurrAddr;



implementation ldv_submit_urb($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $i1 := ldv_undef_int();
    call {:si_unique_call 376} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i2 := $sle.i32($i1, 0);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} ldv_stop___3();
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p4 := $M.2;
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i5, $i6);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i8 := $M.16;
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i12 := $M.18;
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p14 := $M.19;
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $p15 := $M.2;
    call {:si_unique_call 380} devirtbounce.5($p14, $p15);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 381} {:cexpr "completeFnBulkCounter"} boogie_si_record_i32(0);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p10 := $M.17;
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $p11 := $M.2;
    call {:si_unique_call 378} devirtbounce.4($p10, $p11);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 379} {:cexpr "completeFnIntCounter"} boogie_si_record_i32(0);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 269632);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 1} true;
    call {:si_unique_call 382} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 383} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 384} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_usb_alloc_urb_14: ref;

axiom ldv_usb_alloc_urb_14 == $sub.ref(0, 270664);

procedure ldv_usb_alloc_urb_14($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_usb_alloc_urb_14($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} {:cexpr "ldv_usb_alloc_urb_14:arg:iso_packets"} boogie_si_record_i32($i0);
    call {:si_unique_call 386} {:cexpr "ldv_usb_alloc_urb_14:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $p2 := ldv_alloc_urb();
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_alloc_coherent: ref;

axiom usb_alloc_coherent == $sub.ref(0, 271696);

procedure usb_alloc_coherent($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_coherent($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} {:cexpr "usb_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 389} {:cexpr "usb_alloc_coherent:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $p4 := external_alloc();
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const stk1160_isoc_irq: ref;

axiom stk1160_isoc_irq == $sub.ref(0, 272728);

procedure stk1160_isoc_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.18, $M.20, $CurrAddr, $M.3, $M.2;



implementation stk1160_isoc_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i20: i64;
  var $p23: ref;
  var $i24: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i19: i32;
  var $i31: i32;
  var $i32: i1;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} vslice_dummy_var_95 := printk.ref.i32(.str.56, $i14);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} stk1160_process_isoc($p3, $p0);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i17, 0);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $i31 := ldv_usb_submit_urb_12($p0, 32);
    call {:si_unique_call 395} {:cexpr "rc"} boogie_si_record_i32($i31);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb30:
    assume $i32 == 1;
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} vslice_dummy_var_96 := printk.ref.i32(.str.57, $i31);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb22:
    assume $i18 == 1;
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb25;

  $bb25:
    call $i20, $p23, $i24, $p27, $i28, $i29, $i30, $i19 := stk1160_isoc_irq_loop_$bb25($p0, $p16, $i20, $p23, $i24, $p27, $i28, $i29, $i30, $i19);
    goto $bb25_last;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i20, 16)), $mul.ref(12, 1));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 0);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i19);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i24, 16)), $mul.ref(8, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 0);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i19, 1);
    call {:si_unique_call 393} {:cexpr "i"} boogie_si_record_i32($i28);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p16);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i30 := $sgt.i32($i29, $i28);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i30 == 1);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb27:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i19 := $i28;
    goto $bb27_dummy;

  $bb4:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i5, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i5, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i5, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i5, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb8;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb17;

  $bb27_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2715;
}



const ldv_usb_free_urb_15: ref;

axiom ldv_usb_free_urb_15 == $sub.ref(0, 273760);

procedure ldv_usb_free_urb_15($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_usb_free_urb_15($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} ldv_free_urb($p0);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    return;
}



const stk1160_process_isoc: ref;

axiom stk1160_process_isoc == $sub.ref(0, 274792);

procedure stk1160_process_isoc($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, $CurrAddr;



implementation stk1160_process_isoc($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i14: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $i56: i8;
  var $i57: i32;
  var $i58: i1;
  var $i59: i8;
  var $i60: i32;
  var $i61: i1;
  var $i62: i8;
  var $i63: i32;
  var $i64: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i13: i32;
  var vslice_dummy_var_97: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 0);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb11;

  $bb11:
    call $i14, $p17, $i18, $i19, $p20, $p21, $i22, $p25, $i26, $i27, $p28, $i29, $p32, $i33, $i34, $i35, $i36, $i37, $p39, $p40, $i41, $i42, $p43, $p45, $p47, $p48, $i49, $i50, $p52, $p53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $p66, $p67, $p68, $p70, $p71, $p72, $i73, $i74, $i75, $i13 := stk1160_process_isoc_loop_$bb11($p0, $p1, $p10, $i14, $p17, $i18, $i19, $p20, $p21, $i22, $p25, $i26, $i27, $p28, $i29, $p32, $i33, $i34, $i35, $i36, $i37, $p39, $p40, $i41, $i42, $p43, $p45, $p47, $p48, $i49, $i50, $p52, $p53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $p66, $p67, $p68, $p70, $p71, $p72, $i73, $i74, $i75, $i13);
    goto $bb11_last;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i14, 16)), $mul.ref(12, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    call {:si_unique_call 400} {:cexpr "status"} boogie_si_record_i32($i18);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 0);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i13);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i22, 16)), $mul.ref(0, 1));
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p21, $mul.ref($i27, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i13);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i29, 16)), $mul.ref(8, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    call {:si_unique_call 403} {:cexpr "len"} boogie_si_record_i32($i33);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i34 := $sle.i32($i33, 4);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p28);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 192);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(24, 1));
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i54, 0);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p28);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 192);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i58 == 1);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p28);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 128);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} stk1160_copy_video($p0, $p28, $i33);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i13, 1);
    call {:si_unique_call 402} {:cexpr "i"} boogie_si_record_i32($i73);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p10);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i75 := $sgt.i32($i74, $i73);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i75 == 1);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb38:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i13 := $i73;
    goto $bb38_dummy;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p28);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 64);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(24, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 880)), $mul.ref(872, 1));
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i64);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(24, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 880)), $mul.ref(876, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, 0);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb33;

  $bb29:
    assume $i55 == 1;
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb20:
    assume $i37 == 1;
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(24, 1));
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $p43 := stk1160_next_buffer($p0);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(24, 1));
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p43);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(24, 1));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i50 == 1;
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22:
    assume $i42 == 1;
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} stk1160_buffer_done($p0);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb17:
    assume $i34 == 1;
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} print_err_status($p0, $i13, $i18);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} print_err_status($p0, $sub.i32(0, 1), $i9);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} vslice_dummy_var_97 := printk.ref.ref(.str.58, .str.59);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb38_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2760;
}



const ldv_usb_submit_urb_12: ref;

axiom ldv_usb_submit_urb_12 == $sub.ref(0, 275824);

procedure ldv_usb_submit_urb_12($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.0, $M.3, $M.20, $M.2, $CurrAddr;



implementation ldv_usb_submit_urb_12($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} {:cexpr "ldv_usb_submit_urb_12:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $i2 := ldv_submit_urb($p0);
    call {:si_unique_call 409} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const print_err_status: ref;

axiom print_err_status == $sub.ref(0, 276856);

procedure print_err_status($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.20, $CurrAddr;



implementation print_err_status($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $i20: i1;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p33: ref;
  var $p37: ref;
  var $p41: ref;
  var $p44: ref;
  var $p47: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $p66: ref;
  var $p68: ref;
  var $p71: ref;
  var $p75: ref;
  var $p79: ref;
  var $p82: ref;
  var $p85: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $p3 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $p4 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    call {:si_unique_call 412} {:cexpr "print_err_status:arg:packet"} boogie_si_record_i32($i1);
    call {:si_unique_call 413} {:cexpr "print_err_status:arg:status"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i2, $sub.i32(0, 63));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i2, $sub.i32(0, 32));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p19 := .str.60;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i1, 0);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i20 == 1);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p62, 0);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p64, $sub.i32(0, 559067475));
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p66, $sub.i32(0, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p68, $i2p.i64.ref($sub.i64(0, 1)));
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p71, $0.ref);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p75, $0.ref);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p79, $0.ref);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p82, .str.69);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p85, 0);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p88, 0);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p89, 1250);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p90, 10);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p91, 0);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p92, 0);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p93, 0);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $i94 := ___ratelimit($p4, .str.70);
    call {:si_unique_call 417} {:cexpr "tmp___0"} boogie_si_record_i32($i94);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    return;

  $bb39:
    assume $i95 == 1;
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} vslice_dummy_var_99 := printk.ref.i32.i32.ref(.str.72, $i1, $i2, $p19);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb33:
    assume $i20 == 1;
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p24, 0);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p26, $sub.i32(0, 559067475));
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p28, $sub.i32(0, 1));
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p30, $i2p.i64.ref($sub.i64(0, 1)));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p33, $0.ref);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p37, $0.ref);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p41, $0.ref);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p44, .str.69);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p47, 0);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p50, 0);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p51, 1250);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p52, 10);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p53, 0);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p54, 0);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p55, 0);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i56 := ___ratelimit($p3, .str.70);
    call {:si_unique_call 415} {:cexpr "tmp"} boogie_si_record_i32($i56);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i57 == 1;
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} vslice_dummy_var_98 := printk.ref.i32.ref(.str.71, $i2, $p19);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p19 := .str.61;
    goto $bb31;

  $bb6:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, $sub.i32(0, 32));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p19 := .str.64;
    goto $bb31;

  $bb4:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i2, $sub.i32(0, 62));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i2, $sub.i32(0, 62));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb15:
    assume $i11 == 1;
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p19 := .str.68;
    goto $bb31;

  $bb13:
    assume $i10 == 1;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p19 := .str.63;
    goto $bb31;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i2, $sub.i32(0, 75));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i2, $sub.i32(0, 71));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i2, $sub.i32(0, 71));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb21:
    assume $i14 == 1;
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p19 := .str.66;
    goto $bb31;

  $bb19:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i2, $sub.i32(0, 75));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb23:
    assume $i15 == 1;
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p19 := .str.65;
    goto $bb31;

  $bb17:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i2, $sub.i32(0, 84));
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i2, $sub.i32(0, 84));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb27:
    assume $i17 == 1;
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p19 := .str.67;
    goto $bb31;

  $bb25:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i2, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb29:
    assume $i18 == 1;
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p19 := .str.62;
    goto $bb31;
}



const stk1160_buffer_done: ref;

axiom stk1160_buffer_done == $sub.ref(0, 277888);

procedure stk1160_buffer_done($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation stk1160_buffer_done($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p13: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p21: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(24, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3448, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3448, 1));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3448, 1));
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i10 := $lshr.i32($i9, 1);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i10);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 4);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 880)), $mul.ref(868, 1));
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i18);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} v4l2_get_timestamp($p24);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 880)), $mul.ref(868, 1));
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} vb2_set_plane_payload($p25, 0, $i28);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} vb2_buffer_done($p29, 4);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(24, 1));
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $0.ref);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    return;
}



const stk1160_next_buffer: ref;

axiom stk1160_next_buffer == $sub.ref(0, 278920);

procedure stk1160_next_buffer($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation stk1160_next_buffer($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var vslice_dummy_var_100: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(24, 1));
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 423} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i6);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 425} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i6, 0);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} vslice_dummy_var_100 := ldv__builtin_expect($i14, 0);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(7144, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $p17 := spinlock_check($p16);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $i18 := _raw_spin_lock_irqsave($p17);
    call {:si_unique_call 430} {:cexpr "flags"} boogie_si_record_i64($i18);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2440, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $i20 := list_empty($p19);
    call {:si_unique_call 432} {:cexpr "tmp___1"} boogie_si_record_i32($i20);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $p28 := $0.ref;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(7144, 1));
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} spin_unlock_irqrestore($p29, $i18);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $r := $p28;
    return;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2440, 1)), $mul.ref(0, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref($sub.ref(0, 840), 880));
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p25, $mul.ref($sub.ref(0, 840), 880)), $mul.ref(840, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} list_del($p27);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $p28 := $p26;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} warn_slowpath_null(.str.73, 138);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const stk1160_copy_video: ref;

axiom stk1160_copy_video == $sub.ref(0, 279952);

procedure stk1160_copy_video($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.20, $M.0, $CurrAddr;



implementation stk1160_copy_video($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i36: i32;
  var $i35: i32;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $i61: i32;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $p67: ref;
  var $p68: ref;
  var $p70: ref;
  var $p72: ref;
  var $p74: ref;
  var $p77: ref;
  var $p81: ref;
  var $p85: ref;
  var $p88: ref;
  var $p91: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $i103: i64;
  var $p104: ref;
  var $i105: i32;
  var $i106: i32;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $i110: i32;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $i118: i32;
  var $i119: i64;
  var $p120: ref;
  var $i121: i64;
  var $p122: ref;
  var $i123: i1;
  var $i124: i32;
  var $p125: ref;
  var $i126: i32;
  var $p127: ref;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $i132: i32;
  var $p133: ref;
  var $i134: i32;
  var $i135: i32;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $i139: i1;
  var $i140: i1;
  var $p143: ref;
  var $p144: ref;
  var $p146: ref;
  var $p148: ref;
  var $p150: ref;
  var $p153: ref;
  var $p157: ref;
  var $p161: ref;
  var $p164: ref;
  var $p167: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i32;
  var $i177: i1;
  var $i179: i64;
  var $i180: i64;
  var $i181: i64;
  var $p182: ref;
  var $p183: ref;
  var $i184: i64;
  var $p185: ref;
  var $i186: i32;
  var $i187: i64;
  var $i188: i64;
  var $i189: i1;
  var $p192: ref;
  var $p193: ref;
  var $p195: ref;
  var $p197: ref;
  var $p199: ref;
  var $p202: ref;
  var $p206: ref;
  var $p210: ref;
  var $p213: ref;
  var $p216: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $i225: i32;
  var $i226: i1;
  var $i228: i64;
  var $i229: i32;
  var $p230: ref;
  var $i231: i32;
  var $i232: i32;
  var $p233: ref;
  var $p234: ref;
  var $i235: i32;
  var $i236: i32;
  var $p237: ref;
  var $i238: i1;
  var $i114: i32;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $p3 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $p4 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $p5 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    call {:si_unique_call 438} {:cexpr "stk1160_copy_video:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3416, 1));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i7, 2);
    call {:si_unique_call 439} {:cexpr "bytesperline"} boogie_si_record_i32($i8);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(24, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(856, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i2, $sub.i32(0, 4));
    call {:si_unique_call 440} {:cexpr "len"} boogie_si_record_i32($i14);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(876, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i18 := $udiv.i32($i17, $i8);
    call {:si_unique_call 441} {:cexpr "linesdone"} boogie_si_record_i32($i18);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(876, 1));
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i21 := $urem.i32($i20, $i8);
    call {:si_unique_call 442} {:cexpr "lineoff"} boogie_si_record_i32($i21);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(872, 1));
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $p27 := $p13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i28 := $mul.i32($i18, $i8);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i29 := $mul.i32($i28, 2);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, $i21);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p27, $mul.ref($i31, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32($i8, $i21);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i34 := $sgt.i32($i33, $i14);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i34 == 1);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32($i8, $i21);
    call {:si_unique_call 443} {:cexpr "lencopy"} boogie_si_record_i32($i36);
    assume {:verifier.code 0} true;
    $i35 := $i36;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(868, 1));
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(864, 1));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i38, $i40);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i42 := $ugt.i32($i35, $i41);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i48, $i49 := $i35, $i14;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i48, 0);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i50 == 1);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i49, 0);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i48, 0);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i48);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p32);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i54, $i55);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(856, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(864, 1));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i62 := $zext.i32.i64($i61);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i59, $i62);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i64 := $ugt.i64($i56, $i63);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64($i48);
    call {:si_unique_call 449} {:cexpr "__len"} boogie_si_record_i64($i103);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.0;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 450} cmdloc_dummy_var_15 := $memcpy.i8(cmdloc_dummy_var_13, cmdloc_dummy_var_14, $p32, $p15, $i103, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(868, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i105, $i48);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(868, 1));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p107, $i106);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(876, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i109, $i48);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(876, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, $i110);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i112 := $sub.i32($i49, $i48);
    call {:si_unique_call 451} {:cexpr "remain"} boogie_si_record_i32($i112);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i113 := $sgt.i32($i112, 0);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i113 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb26:
    assume $i113 == 1;
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i114, $p115, $p116, $i117 := $i112, $p15, $p32, $i48;
    goto $bb29;

  $bb29:
    call $i118, $i119, $p120, $i121, $p122, $i123, $i124, $p125, $i126, $p127, $i128, $i129, $i130, $p131, $i132, $p133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i179, $i180, $i181, $p182, $p183, $i184, $p185, $i186, $i187, $i188, $i189, $i228, $i229, $p230, $i231, $i232, $p233, $p234, $i235, $i236, $p237, $i238, $i114, $p115, $p116, $i117, cmdloc_dummy_var_16, cmdloc_dummy_var_17, cmdloc_dummy_var_18 := stk1160_copy_video_loop_$bb29($i8, $p11, $i118, $i119, $p120, $i121, $p122, $i123, $i124, $p125, $i126, $p127, $i128, $i129, $i130, $p131, $i132, $p133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i179, $i180, $i181, $p182, $p183, $i184, $p185, $i186, $i187, $i188, $i189, $i228, $i229, $p230, $i231, $i232, $p233, $p234, $i235, $i236, $p237, $i238, $i114, $p115, $p116, $i117, cmdloc_dummy_var_16, cmdloc_dummy_var_17, cmdloc_dummy_var_18);
    goto $bb29_last;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i118 := $add.i32($i117, $i8);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i118);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($p116, $mul.ref($i119, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i121 := $sext.i32.i64($i117);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p115, $mul.ref($i121, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i123 := $slt.i32($i114, $i8);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    $i124 := $i8;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(868, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.0, $p125);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(864, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.0, $p127);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i129 := $sub.i32($i126, $i128);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i130 := $ugt.i32($i124, $i129);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    $i136, $i137 := $i124, $i114;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i136, 0);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb39;

  $bb39:
    assume !($i138 == 1);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i137, 0);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i140 := $slt.i32($i136, 0);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i179 := $sext.i32.i64($i136);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i180 := $p2i.ref.i64($p120);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i181 := $add.i64($i179, $i180);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(856, 1));
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i184 := $p2i.ref.i64($p183);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(864, 1));
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.0, $p185);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i187 := $zext.i32.i64($i186);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i188 := $add.i64($i184, $i187);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i189 := $ugt.i64($i181, $i188);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i228 := $sext.i32.i64($i136);
    call {:si_unique_call 459} {:cexpr "__len___0"} boogie_si_record_i64($i228);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    cmdloc_dummy_var_17 := $M.0;
    call {:si_unique_call 460} cmdloc_dummy_var_18 := $memcpy.i8(cmdloc_dummy_var_16, cmdloc_dummy_var_17, $p120, $p122, $i228, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_18;
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i229 := $sub.i32($i137, $i136);
    call {:si_unique_call 461} {:cexpr "remain"} boogie_si_record_i32($i229);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(868, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i231 := $load.i32($M.0, $p230);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i232 := $add.i32($i231, $i136);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(868, 1));
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p233, $i232);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(876, 1));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i235 := $load.i32($M.0, $p234);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i236 := $add.i32($i235, $i136);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(876, 1));
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p237, $i236);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i238 := $sgt.i32($i229, 0);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i238 == 1);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb55:
    assume $i238 == 1;
    assume {:verifier.code 0} true;
    $i114, $p115, $p116, $i117 := $i229, $p122, $p120, $i136;
    goto $bb55_dummy;

  $bb49:
    assume $i189 == 1;
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p192);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p193, 0);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p195, $sub.i32(0, 559067475));
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p197, $sub.i32(0, 1));
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p199, $i2p.i64.ref($sub.i64(0, 1)));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p202, $0.ref);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p206, $0.ref);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p210, $0.ref);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p213, .str.69);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p216, 0);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p219, 0);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p220, 1250);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p221, 10);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p222, 0);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p223, 0);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p224, 0);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $i225 := ___ratelimit($p5, .str.75);
    call {:si_unique_call 457} {:cexpr "tmp___1"} boogie_si_record_i32($i225);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i226 := $ne.i32($i225, 0);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i226} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb51:
    assume $i226 == 1;
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} vslice_dummy_var_104 := printk.ref(.str.76);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb43:
    assume $i140 == 1;
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p144, 0);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p146, $sub.i32(0, 559067475));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p148, $sub.i32(0, 1));
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p150, $i2p.i64.ref($sub.i64(0, 1)));
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p153, $0.ref);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p157, $0.ref);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p161, $0.ref);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p164, .str.69);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p167, 0);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p170, 0);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p171, 1250);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p172, 10);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p173, 0);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p174, 0);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p175, 0);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $i176 := ___ratelimit($p4, .str.75);
    call {:si_unique_call 454} {:cexpr "tmp___0"} boogie_si_record_i32($i176);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb45:
    assume $i177 == 1;
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} vslice_dummy_var_103 := printk.ref(.str.77);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i139 == 1;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i138 == 1;
    goto $bb38;

  $bb34:
    assume $i130 == 1;
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(868, 1));
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(864, 1));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i135 := $sub.i32($i132, $i134);
    call {:si_unique_call 452} {:cexpr "lencopy"} boogie_si_record_i32($i135);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i136, $i137 := $i135, $i135;
    goto $bb36;

  $bb31:
    assume $i123 == 1;
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i124 := $i114;
    goto $bb33;

  $bb20:
    assume $i64 == 1;
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p68, 0);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p70, $sub.i32(0, 559067475));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p72, $sub.i32(0, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p74, $i2p.i64.ref($sub.i64(0, 1)));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p77, $0.ref);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p81, $0.ref);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p85, $0.ref);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p88, .str.69);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p91, 0);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p94, 0);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p95, 1250);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p96, 10);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p97, 0);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p98, 0);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p99, 0);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i100 := ___ratelimit($p3, .str.75);
    call {:si_unique_call 447} {:cexpr "tmp"} boogie_si_record_i32($i100);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb22:
    assume $i101 == 1;
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} vslice_dummy_var_102 := printk.ref(.str.76);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb17:
    assume $i52 == 1;
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} vslice_dummy_var_101 := printk.ref(.str.74);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb11;

  $bb7:
    assume $i42 == 1;
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(868, 1));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(864, 1));
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32($i44, $i46);
    call {:si_unique_call 444} {:cexpr "lencopy"} boogie_si_record_i32($i47);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i48, $i49 := $i47, $i47;
    goto $bb9;

  $bb4:
    assume $i34 == 1;
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i35 := $i14;
    goto $bb6;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i8);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p13, $mul.ref($i25, 1));
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p27 := $p26;
    goto $bb3;

  $bb55_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3140;
}



const ___ratelimit: ref;

axiom ___ratelimit == $sub.ref(0, 280984);

procedure ___ratelimit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ___ratelimit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 1} true;
    call {:si_unique_call 462} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 463} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 282016);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 465} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 283048);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_get_timestamp: ref;

axiom v4l2_get_timestamp == $sub.ref(0, 284080);

procedure v4l2_get_timestamp($p0: ref);
  free requires assertsPassed;



implementation v4l2_get_timestamp($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    return;
}



const vb2_set_plane_payload: ref;

axiom vb2_set_plane_payload == $sub.ref(0, 285112);

procedure vb2_set_plane_payload($p0: ref, $i1: i32, $i2: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation vb2_set_plane_payload($p0: ref, $i1: i32, $i2: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} {:cexpr "vb2_set_plane_payload:arg:plane_no"} boogie_si_record_i32($i1);
    call {:si_unique_call 468} {:cexpr "vb2_set_plane_payload:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 840)), $mul.ref(608, 1));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, $i1);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i1);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 840)), $mul.ref(88, 1)), $mul.ref($i7, 64)), $mul.ref(0, 1));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i6);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_alloc_urb: ref;

axiom ldv_alloc_urb == $sub.ref(0, 286144);

procedure ldv_alloc_urb() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_alloc_urb() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $p0 := ldv_undef_ptr();
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i2 := ldv_undef_int();
    call {:si_unique_call 471} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p6 := $M.2;
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $M.2 := $p0;
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const video_device_release_empty: ref;

axiom video_device_release_empty == $sub.ref(0, 287176);

procedure video_device_release_empty($p0: ref);
  free requires assertsPassed;



implementation video_device_release_empty($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    return;
}



const vb2_fop_read: ref;

axiom vb2_fop_read == $sub.ref(0, 288208);

procedure vb2_fop_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation vb2_fop_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 472} {:cexpr "vb2_fop_read:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 1} true;
    call {:si_unique_call 473} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 474} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const vb2_fop_poll: ref;

axiom vb2_fop_poll == $sub.ref(0, 289240);

procedure vb2_fop_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_fop_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 1} true;
    call {:si_unique_call 475} $i2 := __VERIFIER_nondet_uint();
    call {:si_unique_call 476} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i2);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const video_ioctl2: ref;

axiom video_ioctl2 == $sub.ref(0, 290272);

procedure video_ioctl2($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation video_ioctl2($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 477} {:cexpr "video_ioctl2:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 478} {:cexpr "video_ioctl2:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 1} true;
    call {:si_unique_call 479} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 480} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vb2_fop_mmap: ref;

axiom vb2_fop_mmap == $sub.ref(0, 291304);

procedure vb2_fop_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_fop_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 1} true;
    call {:si_unique_call 481} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 482} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const v4l2_fh_open: ref;

axiom v4l2_fh_open == $sub.ref(0, 292336);

procedure v4l2_fh_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_fh_open($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 1} true;
    call {:si_unique_call 483} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 484} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vb2_fop_release: ref;

axiom vb2_fop_release == $sub.ref(0, 293368);

procedure vb2_fop_release($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_fop_release($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 1} true;
    call {:si_unique_call 485} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 486} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vidioc_querycap: ref;

axiom vidioc_querycap == $sub.ref(0, 294400);

procedure vidioc_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var vslice_dummy_var_105: ref;
  var vslice_dummy_var_106: ref;
  var vslice_dummy_var_107: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $p3 := video_drvdata($p0);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} vslice_dummy_var_105 := strcpy($p6, .str.16);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} vslice_dummy_var_106 := strcpy($p9, .str.16);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(2424, 1));
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} vslice_dummy_var_107 := usb_make_path($p12, $p14, 32);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 83886081);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i18, $sub.i32(0, 2147483648));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(84, 1));
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_enum_fmt_vid_cap: ref;

axiom vidioc_enum_fmt_vid_cap == $sub.ref(0, 295432);

procedure vidioc_enum_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_enum_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i6: i32;
  var vslice_dummy_var_108: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref(format, $mul.ref(0, 16)), $mul.ref($i11, 16)), $mul.ref(0, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} vslice_dummy_var_108 := strlcpy($p8, $p14, 32);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref(format, $mul.ref(0, 16)), $mul.ref($i18, 16)), $mul.ref(8, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_fmt_vid_cap: ref;

axiom vidioc_g_fmt_vid_cap == $sub.ref(0, 296464);

procedure vidioc_g_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $p3 := video_drvdata($p0);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3416, 1));
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i6);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3420, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i11);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 4);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3440, 1));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i21);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3416, 1));
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i27 := $mul.i32($i26, 2);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i27);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3420, 1));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i37 := $mul.i32($i32, $i36);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i37);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 1);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_s_fmt_vid_cap: ref;

axiom vidioc_s_fmt_vid_cap == $sub.ref(0, 297496);

procedure vidioc_s_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_s_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var vslice_dummy_var_109: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $p3 := video_drvdata($p0);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(2456, 1));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i6 := vb2_is_busy($p5);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 495} {:cexpr "tmp___0"} boogie_si_record_i8($i7);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} vslice_dummy_var_109 := vidioc_try_fmt_vid_cap($p0, $p1, $p2);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 16);
    goto $bb3;
}



const vidioc_try_fmt_vid_cap: ref;

axiom vidioc_try_fmt_vid_cap == $sub.ref(0, 298528);

procedure vidioc_try_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_try_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $p3 := video_drvdata($p0);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3440, 1));
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i8);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3416, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i13);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3420, 1));
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i18);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 4);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3416, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i27 := $mul.i32($i26, 2);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i27);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3420, 1));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i37 := $mul.i32($i32, $i36);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i37);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 1);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vb2_ioctl_reqbufs: ref;

axiom vb2_ioctl_reqbufs == $sub.ref(0, 299560);

procedure vb2_ioctl_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_ioctl_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 1} true;
    call {:si_unique_call 498} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 499} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vb2_ioctl_querybuf: ref;

axiom vb2_ioctl_querybuf == $sub.ref(0, 300592);

procedure vb2_ioctl_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_ioctl_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 1} true;
    call {:si_unique_call 500} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 501} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vb2_ioctl_qbuf: ref;

axiom vb2_ioctl_qbuf == $sub.ref(0, 301624);

procedure vb2_ioctl_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_ioctl_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 1} true;
    call {:si_unique_call 502} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 503} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vb2_ioctl_dqbuf: ref;

axiom vb2_ioctl_dqbuf == $sub.ref(0, 302656);

procedure vb2_ioctl_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_ioctl_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 1} true;
    call {:si_unique_call 504} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 505} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vb2_ioctl_streamon: ref;

axiom vb2_ioctl_streamon == $sub.ref(0, 303688);

procedure vb2_ioctl_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_ioctl_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 506} {:cexpr "vb2_ioctl_streamon:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 1} true;
    call {:si_unique_call 507} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 508} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vb2_ioctl_streamoff: ref;

axiom vb2_ioctl_streamoff == $sub.ref(0, 304720);

procedure vb2_ioctl_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_ioctl_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 509} {:cexpr "vb2_ioctl_streamoff:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 1} true;
    call {:si_unique_call 510} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 511} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vidioc_g_std: ref;

axiom vidioc_g_std == $sub.ref(0, 305752);

procedure vidioc_g_std($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_std($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $p3 := video_drvdata($p0);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3432, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i6);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_s_std: ref;

axiom vidioc_s_std == $sub.ref(0, 306784);

procedure vidioc_s_std($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $CurrAddr;



implementation vidioc_s_std($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p43: ref;
  var $i9: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} {:cexpr "vidioc_s_std:arg:norm"} boogie_si_record_i64($i2);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $p3 := video_drvdata($p0);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(2456, 1));
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3432, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, $i2);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i10 := vb2_is_busy($p5);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 516} {:cexpr "tmp___0"} boogie_si_record_i8($i11);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(2424, 1));
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3432, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p17, $i2);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3432, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 63744);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3432, 1));
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 16713471);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} vslice_dummy_var_110 := printk.ref(.str.52);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb14:
    assume $i27 == 1;
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3416, 1));
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 720);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3420, 1));
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 576);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} stk1160_set_std($p4);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p35, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i38, $i41);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb17:
    assume $i42 == 1;
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p43 := $p36;
    goto $bb20;

  $bb20:
    call $p44, $p45, $p46, $p47, $i48, $i49, $p50, $p51, $p52, $p53, $p54, $p55, $i56, $i57, $p58, $p59, $p60, $p61, $p62, $p63, $p64, $i65, $p68, $p69, $p70, $p71, $p72, $i73, $i74, $p43, vslice_dummy_var_111 := vidioc_s_std_loop_$bb20($p4, $i41, $p44, $p45, $p46, $p47, $i48, $i49, $p50, $p51, $p52, $p53, $p54, $p55, $i56, $i57, $p58, $p59, $p60, $p61, $p62, $p63, $p64, $i65, $p68, $p69, $p70, $p71, $p72, $i73, $i74, $p43, vslice_dummy_var_111);
    goto $bb20_last;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 296)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p70, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p70, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, $i41);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i74 == 1);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb28:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $p43 := $p71;
    goto $bb28_dummy;

  $bb22:
    assume $i49 == 1;
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p43, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb24;

  $bb25:
    assume $i57 == 1;
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p43, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3432, 1));
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, $p64);
    call {:si_unique_call 519} vslice_dummy_var_111 := devirtbounce.2($p63, $p43, $i65);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3416, 1));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 720);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3420, 1));
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 480);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 16);
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb28_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3586;
}



const vidioc_querystd: ref;

axiom vidioc_querystd == $sub.ref(0, 307816);

procedure vidioc_querystd($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.3, $M.11, $M.12, $M.13, $M.14, $M.2, $M.16, $M.18, $M.20;



implementation vidioc_querystd($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p17: ref;
  var vslice_dummy_var_112: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $p3 := video_drvdata($p0);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i12, $i15);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p17 := $p10;
    goto $bb4;

  $bb4:
    call $p18, $p19, $p20, $p21, $i22, $i23, $p24, $p25, $p26, $p27, $p28, $p29, $i30, $i31, $p32, $p33, $p34, $p35, $p36, $p37, $p40, $p41, $p42, $p43, $p44, $i45, $i46, $p17, vslice_dummy_var_112 := vidioc_querystd_loop_$bb4($p2, $i15, $p18, $p19, $p20, $p21, $i22, $i23, $p24, $p25, $p26, $p27, $p28, $p29, $i30, $i31, $p32, $p33, $p34, $p35, $p36, $p37, $p40, $p41, $p42, $p43, $p44, $i45, $i46, $p17, vslice_dummy_var_112);
    goto $bb4_last;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 296)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p42, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, $i15);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i46 == 1);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $p17 := $p43;
    goto $bb12_dummy;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p17, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb8;

  $bb9:
    assume $i31 == 1;
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p17, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    call {:si_unique_call 521} vslice_dummy_var_112 := devirtbounce.6($p37, $p17, $p2);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3640;
}



const vidioc_enum_input: ref;

axiom vidioc_enum_input == $sub.ref(0, 308848);

procedure vidioc_enum_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_enum_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p20: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i8: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $p3 := video_drvdata($p0);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i6, 4);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 4);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} vslice_dummy_var_114 := sprintf.ref.ref.i32($p16, .str.55, $i18);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 2);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(360, 1)), $mul.ref(1728, 1));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, $i23);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} vslice_dummy_var_113 := sprintf.ref.ref($p13, .str.54);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_input: ref;

axiom vidioc_g_input == $sub.ref(0, 309880);

procedure vidioc_g_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $p3 := video_drvdata($p0);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3424, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i6);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_s_input: ref;

axiom vidioc_s_input == $sub.ref(0, 310912);

procedure vidioc_s_input($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $CurrAddr;



implementation vidioc_s_input($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $p7: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} {:cexpr "vidioc_s_input:arg:i"} boogie_si_record_i32($i2);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $p3 := video_drvdata($p0);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i2, 4);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 7232)), $mul.ref(3424, 1));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i2);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} stk1160_select_input($p4);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const v4l2_ctrl_log_status: ref;

axiom v4l2_ctrl_log_status == $sub.ref(0, 311944);

procedure v4l2_ctrl_log_status($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_log_status($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 1} true;
    call {:si_unique_call 529} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 530} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vidioc_g_register: ref;

axiom vidioc_g_register == $sub.ref(0, 312976);

procedure vidioc_g_register($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vidioc_g_register($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i8;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $p4 := video_drvdata($p0);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i16($i7);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $i11 := stk1160_read_reg($p5, $i10, $p3);
    call {:si_unique_call 534} {:cexpr "rc"} boogie_si_record_i32($i11);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p3);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i64($i12);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, $i13);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 1);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const vidioc_s_register: ref;

axiom vidioc_s_register == $sub.ref(0, 314008);

procedure vidioc_s_register($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_s_register($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;
  var $p10: ref;
  var $i11: i64;
  var $i12: i16;
  var $i13: i32;
  var $i14: i16;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $p3 := video_drvdata($p0);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i16($i6);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i16($i11);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i15 := stk1160_write_reg($p4, $i9, $i14);
    call {:si_unique_call 537} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const v4l2_ctrl_subscribe_event: ref;

axiom v4l2_ctrl_subscribe_event == $sub.ref(0, 315040);

procedure v4l2_ctrl_subscribe_event($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_subscribe_event($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 1} true;
    call {:si_unique_call 538} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 539} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const v4l2_event_unsubscribe: ref;

axiom v4l2_event_unsubscribe == $sub.ref(0, 316072);

procedure v4l2_event_unsubscribe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_event_unsubscribe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 1} true;
    call {:si_unique_call 540} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 541} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const video_drvdata: ref;

axiom video_drvdata == $sub.ref(0, 317104);

procedure video_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $p1 := video_devdata($p0);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $p2 := video_get_drvdata($p1);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const video_devdata: ref;

axiom video_devdata == $sub.ref(0, 318136);

procedure video_devdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_devdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $p1 := external_alloc();
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const video_get_drvdata: ref;

axiom video_get_drvdata == $sub.ref(0, 319168);

procedure video_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1808)), $mul.ref(136, 1));
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 320200);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $p1 := external_alloc();
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const stk1160_read_reg: ref;

axiom stk1160_read_reg == $sub.ref(0, 321232);

procedure stk1160_read_reg($p0: ref, $i1: i16, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation stk1160_read_reg($p0: ref, $i1: i16, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i15: i32;
  var vslice_dummy_var_115: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} {:cexpr "stk1160_read_reg:arg:reg"} boogie_si_record_i16($i1);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2424, 1));
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $i5 := __create_pipe($p4, 0);
    call {:si_unique_call 549} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, $sub.i32(0, 2147483520));
    call {:si_unique_call 550} {:cexpr "pipe"} boogie_si_record_i32($i6);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 0);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 7232)), $mul.ref(2424, 1));
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i1);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $i11 := usb_control_msg($p8, $i6, 0, $sub.i8(0, 64), 0, $i10, $p2, 1, 250);
    call {:si_unique_call 552} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i1);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} vslice_dummy_var_115 := printk.ref.i32.i32(.str, $i13, $i11);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i15 := $i11;
    goto $bb3;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 322264);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure sprintf.ref.ref($p0: ref, $p1: ref) returns ($r: i32);



const vb2_is_busy: ref;

axiom vb2_is_busy == $sub.ref(0, 323296);

procedure vb2_is_busy($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation vb2_is_busy($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 648)), $mul.ref(328, 1));
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 324328);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 554} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 1} true;
    call {:si_unique_call 555} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 556} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_make_path: ref;

axiom usb_make_path == $sub.ref(0, 325360);

procedure usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} {:cexpr "usb_make_path:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(64, 1));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(4, 1));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i9 := snprintf.ref.i64.ref.ref.ref($p1, $i2, .str.53, $p6, $p8);
    call {:si_unique_call 559} {:cexpr "actual"} boogie_si_record_i32($i9);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i2);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, $i9);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb3;
}



const stk1160_i2c_xfer: ref;

axiom stk1160_i2c_xfer == $sub.ref(0, 326392);

procedure stk1160_i2c_xfer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation stk1160_i2c_xfer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i8: i64;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i17: i64;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i1;
  var $i23: i8;
  var $i24: i32;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i35: i64;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i64;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $i53: i1;
  var $i54: i64;
  var $i55: i64;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i64;
  var $p64: ref;
  var $i65: i16;
  var $i66: i32;
  var $i67: i64;
  var $i68: i64;
  var $p70: ref;
  var $i71: i16;
  var $i72: i32;
  var $i73: i1;
  var $i74: i64;
  var $p76: ref;
  var $i77: i16;
  var $i78: i32;
  var $i79: i1;
  var $i80: i64;
  var $i81: i64;
  var $p83: ref;
  var $i84: i16;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $i90: i32;
  var $i91: i1;
  var $i92: i64;
  var $p94: ref;
  var $p95: ref;
  var $i96: i8;
  var $i97: i32;
  var $i99: i8;
  var $i100: i32;
  var $i101: i8;
  var $i102: i64;
  var $p104: ref;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i8;
  var $i109: i64;
  var $i110: i64;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $i117: i64;
  var $i118: i64;
  var $p120: ref;
  var $p121: ref;
  var $i122: i8;
  var $i123: i32;
  var $i125: i32;
  var $i128: i64;
  var $p130: ref;
  var $i131: i16;
  var $i132: i32;
  var $i133: i1;
  var $i134: i32;
  var $i135: i1;
  var $i137: i32;
  var $i138: i1;
  var $i139: i64;
  var $p141: ref;
  var $p142: ref;
  var $i143: i8;
  var $i144: i32;
  var $i145: i64;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i8;
  var $i151: i32;
  var $i153: i8;
  var $i154: i32;
  var $i155: i8;
  var $i156: i64;
  var $p158: ref;
  var $p159: ref;
  var $i160: i8;
  var $i161: i32;
  var $i162: i8;
  var $i163: i64;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i8;
  var $i169: i32;
  var $i170: i8;
  var $i171: i32;
  var $i126: i32;
  var $i127: i32;
  var $i33: i32;
  var $i34: i32;
  var $i172: i1;
  var $i173: i32;
  var $i174: i32;
  var $i175: i1;
  var $i177: i32;
  var $i178: i1;
  var $i7: i32;
  var $i45: i32;
  var $i179: i32;
  var $i180: i1;
  var $i32: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} {:cexpr "stk1160_i2c_xfer:arg:num"} boogie_si_record_i32($i2);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1904)), $mul.ref(24, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32(0, $i2);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i32 := $i2;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $i8, $p10, $i11, $i12, $i13, $i14, $i15, $i17, $p19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i35, $p37, $i38, $i39, $i40, $i41, $i46, $i47, $i48, $p50, $i51, $i52, $i53, $i54, $i55, $p57, $i58, $i59, $i60, $i61, $i62, $p64, $i65, $i66, $i67, $i68, $p70, $i71, $i72, $i73, $i74, $p76, $i77, $i78, $i79, $i80, $i81, $p83, $i84, $i85, $i86, $i90, $i91, $i92, $p94, $p95, $i96, $i97, $i99, $i100, $i101, $i102, $p104, $p105, $i106, $i107, $i108, $i109, $i110, $p112, $p113, $i114, $i115, $i116, $i117, $i118, $p120, $p121, $i122, $i123, $i125, $i128, $p130, $i131, $i132, $i133, $i137, $i138, $i139, $p141, $p142, $i143, $i144, $i145, $p147, $p148, $p149, $i150, $i151, $i153, $i154, $i155, $i156, $p158, $p159, $i160, $i161, $i162, $i163, $p165, $p166, $p167, $i168, $i169, $i170, $i171, $i126, $i127, $i33, $i34, $i172, $i173, $i174, $i175, $i177, $i178, $i7, vslice_dummy_var_116, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_123, vslice_dummy_var_124 := stk1160_i2c_xfer_loop_$bb4($p1, $i2, $p5, $i8, $p10, $i11, $i12, $i13, $i14, $i15, $i17, $p19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i35, $p37, $i38, $i39, $i40, $i41, $i46, $i47, $i48, $p50, $i51, $i52, $i53, $i54, $i55, $p57, $i58, $i59, $i60, $i61, $i62, $p64, $i65, $i66, $i67, $i68, $p70, $i71, $i72, $i73, $i74, $p76, $i77, $i78, $i79, $i80, $i81, $p83, $i84, $i85, $i86, $i90, $i91, $i92, $p94, $p95, $i96, $i97, $i99, $i100, $i101, $i102, $p104, $p105, $i106, $i107, $i108, $i109, $i110, $p112, $p113, $i114, $i115, $i116, $i117, $i118, $p120, $p121, $i122, $i123, $i125, $i128, $p130, $i131, $i132, $i133, $i137, $i138, $i139, $p141, $p142, $i143, $i144, $i145, $p147, $p148, $p149, $i150, $i151, $i153, $i154, $i155, $i156, $p158, $p159, $i160, $i161, $i162, $i163, $p165, $p166, $p167, $i168, $i169, $i170, $i171, $i126, $i127, $i33, $i34, $i172, $i173, $i174, $i175, $i177, $i178, $i7, vslice_dummy_var_116, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_123, vslice_dummy_var_124);
    goto $bb4_last;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref($i8, 16)), $mul.ref(0, 1));
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i13 := $shl.i32($i12, 1);
    call {:si_unique_call 561} {:cexpr "addr"} boogie_si_record_i32($i13);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i14 := $M.21;
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i7);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref($i17, 16)), $mul.ref(4, 1));
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i7);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref($i35, 16)), $mul.ref(2, 1));
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 1);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i41 == 1);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i7, 1);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, $i2);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i128 := $sext.i32.i64($i7);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p1, $mul.ref($i128, 16)), $mul.ref(4, 1));
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i131 := $load.i16($M.0, $p130);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i132 := $zext.i16.i32($i131);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 2);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i137 := $M.21;
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i153 := $trunc.i32.i8($i13);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i32($i153);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i155 := $trunc.i32.i8($i154);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i156 := $sext.i32.i64($i7);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p1, $mul.ref($i156, 16)), $mul.ref(8, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i160 := $load.i8($M.0, $p159);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i161 := $zext.i8.i32($i160);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i162 := $trunc.i32.i8($i161);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i163 := $sext.i32.i64($i7);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p1, $mul.ref($i163, 16)), $mul.ref(8, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.0, $p165);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($p166, $mul.ref(1, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i168 := $load.i8($M.0, $p167);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i169 := $zext.i8.i32($i168);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i170 := $trunc.i32.i8($i169);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $i171 := stk1160_i2c_write_reg($p5, $i155, $i162, $i170);
    call {:si_unique_call 576} {:cexpr "rc"} boogie_si_record_i32($i171);
    assume {:verifier.code 0} true;
    $i126, $i127 := $i171, $i7;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i126, $i127;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i172 := $slt.i32($i33, 0);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i173 := $i33;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i174 := $M.21;
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i175 := $ne.i32($i174, 0);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i177 := $add.i32($i34, 1);
    call {:si_unique_call 578} {:cexpr "i"} boogie_si_record_i32($i177);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i178 := $slt.i32($i177, $i2);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i178 == 1);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb66:
    assume $i178 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i177;
    goto $bb66_dummy;

  $bb63:
    assume $i175 == 1;
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} vslice_dummy_var_124 := printk.ref(.str.88);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb60:
    assume $i172 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i45 := $i173;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i179 := $M.21;
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i180 := $ne.i32($i179, 0);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i32 := $i2;
    goto $bb16;

  $bb69:
    assume $i180 == 1;
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} vslice_dummy_var_125 := printk.ref.i32(.str.89, $i45);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb56:
    assume $i138 == 1;
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i139 := $sext.i32.i64($i7);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p1, $mul.ref($i139, 16)), $mul.ref(8, 1));
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.0, $p141);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.0, $p142);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i144 := $zext.i8.i32($i143);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i145 := $sext.i32.i64($i7);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p1, $mul.ref($i145, 16)), $mul.ref(8, 1));
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.0, $p147);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($p148, $mul.ref(1, 1));
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.0, $p149);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i150);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} vslice_dummy_var_123 := printk.ref.i32.i32(.str.87, $i144, $i151);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb50:
    assume $i133 == 1;
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i134 := $M.21;
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32(0, 95);
    goto $bb24;

  $bb52:
    assume $i135 == 1;
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} vslice_dummy_var_122 := printk.ref(.str.84);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb25:
    assume $i47 == 1;
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i7);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref($i48, 16)), $mul.ref(4, 1));
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i53 := $ule.i32($i52, 2);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb27;

  $bb28:
    assume $i53 == 1;
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i7);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 1);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref($i55, 16)), $mul.ref(2, 1));
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.0, $p57);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 1);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb27;

  $bb30:
    assume $i61 == 1;
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i7);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref($i62, 16)), $mul.ref(0, 1));
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i65 := $load.i16($M.0, $p64);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i65);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i7);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i67, 1);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref($i68, 16)), $mul.ref(0, 1));
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.0, $p70);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i66, $i72);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb27;

  $bb32:
    assume $i73 == 1;
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i7);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref($i74, 16)), $mul.ref(4, 1));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.0, $p76);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 1);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb36;

  $bb36:
    assume !($i79 == 1);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i7);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i81 := $add.i64($i80, 1);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p1, $mul.ref($i81, 16)), $mul.ref(4, 1));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i84 := $load.i16($M.0, $p83);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i85 := $zext.i16.i32($i84);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 1);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i90 := $M.21;
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i8($i13);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i8($i100);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i102 := $sext.i32.i64($i7);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p1, $mul.ref($i102, 16)), $mul.ref(8, 1));
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i8($i107);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i7);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i110 := $add.i64($i109, 1);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p1, $mul.ref($i110, 16)), $mul.ref(8, 1));
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $i114 := stk1160_i2c_read_reg($p5, $i101, $i108, $p113);
    call {:si_unique_call 570} {:cexpr "rc"} boogie_si_record_i32($i114);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i115 := $M.21;
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i125 := $add.i32($i7, 1);
    call {:si_unique_call 572} {:cexpr "i"} boogie_si_record_i32($i125);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i126, $i127 := $i114, $i125;
    goto $bb49;

  $bb46:
    assume $i116 == 1;
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i117 := $sext.i32.i64($i7);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i118 := $add.i64($i117, 1);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p1, $mul.ref($i118, 16)), $mul.ref(8, 1));
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.0, $p121);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i32($i122);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} vslice_dummy_var_121 := printk.ref.i32(.str.86, $i123);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i91 == 1;
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i7);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref($i92, 16)), $mul.ref(8, 1));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.0, $p95);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} vslice_dummy_var_120 := printk.ref.i32(.str.85, $i97);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i87 := $M.21;
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32(0, 95);
    goto $bb24;

  $bb39:
    assume $i88 == 1;
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} vslice_dummy_var_119 := printk.ref(.str.84);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb35;

  $bb19:
    assume $i41 == 1;
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i42 := $M.21;
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32(0, 95);
    goto $bb24;

  $bb21:
    assume $i43 == 1;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} vslice_dummy_var_118 := printk.ref(.str.83);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i13);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $i26 := stk1160_i2c_check_for_device($p5, $i25);
    call {:si_unique_call 564} {:cexpr "rc"} boogie_si_record_i32($i26);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, 0);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i28 := $i26;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i26, $i7;
    goto $bb18;

  $bb11:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i29 := $M.21;
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i32 := $i28;
    goto $bb16;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} vslice_dummy_var_117 := printk.ref(.str.82);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} vslice_dummy_var_116 := printk.ref.ref.i32(.str.80, .str.81, $i13);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb66_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3837;
}



const functionality: ref;

axiom functionality == $sub.ref(0, 327424);

procedure functionality($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation functionality($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $r := 251592712;
    return;
}



const stk1160_i2c_check_for_device: ref;

axiom stk1160_i2c_check_for_device == $sub.ref(0, 328456);

procedure stk1160_i2c_check_for_device($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation stk1160_i2c_check_for_device($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} {:cexpr "stk1160_i2c_check_for_device:arg:addr"} boogie_si_record_i8($i1);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $i4 := stk1160_write_reg($p0, 515, $i3);
    call {:si_unique_call 582} {:cexpr "rc"} boogie_si_record_i32($i4);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $i7 := stk1160_write_reg($p0, 520, 0);
    call {:si_unique_call 584} {:cexpr "rc"} boogie_si_record_i32($i7);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $i9 := stk1160_write_reg($p0, 512, 32);
    call {:si_unique_call 586} {:cexpr "rc"} boogie_si_record_i32($i9);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i11 := stk1160_i2c_busy_wait($p0, 1);
    call {:si_unique_call 588} {:cexpr "rc"} boogie_si_record_i32($i11);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 19);
    goto $bb3;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb3;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const stk1160_i2c_read_reg: ref;

axiom stk1160_i2c_read_reg == $sub.ref(0, 329488);

procedure stk1160_i2c_read_reg($p0: ref, $i1: i8, $i2: i8, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation stk1160_i2c_read_reg($p0: ref, $i1: i8, $i2: i8, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} {:cexpr "stk1160_i2c_read_reg:arg:addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 590} {:cexpr "stk1160_i2c_read_reg:arg:reg"} boogie_si_record_i8($i2);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i1);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $i6 := stk1160_write_reg($p0, 515, $i5);
    call {:si_unique_call 592} {:cexpr "rc"} boogie_si_record_i32($i6);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i2);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $i11 := stk1160_write_reg($p0, 520, $i10);
    call {:si_unique_call 594} {:cexpr "rc"} boogie_si_record_i32($i11);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $i13 := stk1160_write_reg($p0, 512, 32);
    call {:si_unique_call 596} {:cexpr "rc"} boogie_si_record_i32($i13);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $i15 := stk1160_i2c_busy_wait($p0, 1);
    call {:si_unique_call 598} {:cexpr "rc"} boogie_si_record_i32($i15);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $i17 := stk1160_read_reg($p0, 521, $p3);
    call {:si_unique_call 600} {:cexpr "rc"} boogie_si_record_i32($i17);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb14:
    assume $i18 == 1;
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i8 := $i17;
    goto $bb3;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i8 := $i15;
    goto $bb3;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i8 := $i11;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;
}



const stk1160_i2c_write_reg: ref;

axiom stk1160_i2c_write_reg == $sub.ref(0, 330520);

procedure stk1160_i2c_write_reg($p0: ref, $i1: i8, $i2: i8, $i3: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation stk1160_i2c_write_reg($p0: ref, $i1: i8, $i2: i8, $i3: i8) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} {:cexpr "stk1160_i2c_write_reg:arg:addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 602} {:cexpr "stk1160_i2c_write_reg:arg:reg"} boogie_si_record_i8($i2);
    call {:si_unique_call 603} {:cexpr "stk1160_i2c_write_reg:arg:value"} boogie_si_record_i8($i3);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i1);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $i6 := stk1160_write_reg($p0, 515, $i5);
    call {:si_unique_call 605} {:cexpr "rc"} boogie_si_record_i32($i6);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i2);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $i11 := stk1160_write_reg($p0, 516, $i10);
    call {:si_unique_call 607} {:cexpr "rc"} boogie_si_record_i32($i11);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i3);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $i15 := stk1160_write_reg($p0, 517, $i14);
    call {:si_unique_call 609} {:cexpr "rc"} boogie_si_record_i32($i15);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i17 := stk1160_write_reg($p0, 512, 1);
    call {:si_unique_call 611} {:cexpr "rc"} boogie_si_record_i32($i17);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $i19 := stk1160_i2c_busy_wait($p0, 4);
    call {:si_unique_call 613} {:cexpr "rc"} boogie_si_record_i32($i19);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i8 := $i19;
    goto $bb3;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i8 := $i17;
    goto $bb3;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i8 := $i15;
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i8 := $i11;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;
}



const stk1160_i2c_busy_wait: ref;

axiom stk1160_i2c_busy_wait == $sub.ref(0, 331552);

procedure stk1160_i2c_busy_wait($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation stk1160_i2c_busy_wait($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_126: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 615} {:cexpr "stk1160_i2c_busy_wait:arg:wait_bit_mask"} boogie_si_record_i8($i1);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $i3 := msecs_to_jiffies(100);
    call {:si_unique_call 617} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, jiffies);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i3, $i4);
    call {:si_unique_call 618} {:cexpr "end"} boogie_si_record_i64($i5);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, jiffies);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64($i6, $i5);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i8 := $slt.i64($i7, 0);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 110);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, vslice_dummy_var_126 := stk1160_i2c_busy_wait_loop_$bb4($p0, $i1, $p2, $i5, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, vslice_dummy_var_126);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} vslice_dummy_var_126 := stk1160_read_reg($p0, 513, $p2);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p2);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i1);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i11, $i12);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} usleep_range(10000, 20000);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, jiffies);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i16 := $sub.i64($i15, $i5);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i17 := $slt.i64($i16, 0);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb10_dummy;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb13;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 332584);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 621} {:cexpr "msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 1} true;
    call {:si_unique_call 622} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 623} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usleep_range: ref;

axiom usleep_range == $sub.ref(0, 333616);

procedure usleep_range($i0: i64, $i1: i64);
  free requires assertsPassed;



implementation usleep_range($i0: i64, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} {:cexpr "usleep_range:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 625} {:cexpr "usleep_range:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    return;
}



const stk1160_reset_ac97: ref;

axiom stk1160_reset_ac97 == $sub.ref(0, 334648);

procedure stk1160_reset_ac97($p0: ref);
  free requires assertsPassed;



implementation stk1160_reset_ac97($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(8, 1));
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} vslice_dummy_var_127 := stk1160_write_reg($p3, 1280, 148);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} vslice_dummy_var_128 := stk1160_write_reg($p3, 1280, 136);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} vslice_dummy_var_129 := stk1160_write_reg($p3, 1286, 1);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    return;
}



const stk1160_write_ac97: ref;

axiom stk1160_write_ac97 == $sub.ref(0, 335680);

procedure stk1160_write_ac97($p0: ref, $i1: i16, $i2: i16);
  free requires assertsPassed;



implementation stk1160_write_ac97($p0: ref, $i1: i16, $i2: i16)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i16;
  var $i9: i32;
  var $i10: i32;
  var $i11: i16;
  var $i13: i32;
  var $i14: i32;
  var $i15: i16;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} {:cexpr "stk1160_write_ac97:arg:reg"} boogie_si_record_i16($i1);
    call {:si_unique_call 630} {:cexpr "stk1160_write_ac97:arg:value"} boogie_si_record_i16($i2);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(8, 1));
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i1);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} vslice_dummy_var_130 := stk1160_write_reg($p5, 1284, $i7);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i2);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 255);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} vslice_dummy_var_131 := stk1160_write_reg($p5, 1282, $i11);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i2);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i14 := $ashr.i32($i13, 8);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} vslice_dummy_var_132 := stk1160_write_reg($p5, 1283, $i15);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} vslice_dummy_var_133 := stk1160_write_reg($p5, 1280, 140);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    return;
}



const stk1160_read_ac97: ref;

axiom stk1160_read_ac97 == $sub.ref(0, 336712);

procedure stk1160_read_ac97($p0: ref, $i1: i16) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation stk1160_read_ac97($p0: ref, $i1: i16) returns ($r: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i16;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i16;
  var $i17: i32;
  var $i18: i8;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i16;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 637} {:cexpr "stk1160_read_ac97:arg:reg"} boogie_si_record_i16($i1);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(8, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 0);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 0);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i1);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} vslice_dummy_var_134 := stk1160_write_reg($p6, 1284, $i8);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} vslice_dummy_var_135 := stk1160_write_reg($p6, 1280, 139);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} vslice_dummy_var_136 := stk1160_read_reg($p6, 1282, $p2);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} vslice_dummy_var_137 := stk1160_read_reg($p6, 1283, $p3);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p3);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i15 := $shl.i32($i14, 8);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i17 := $sext.i16.i32($i16);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p2);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i16($i18);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i20 := $sext.i16.i32($i19);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i17, $i20);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 337744);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 642} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 1} true;
    call {:si_unique_call 643} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 644} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 645} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $p4 := calloc(1, $i0);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 1} true;
    call {:si_unique_call 647} __VERIFIER_assume($i7);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 338776);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 648} __VERIFIER_error();
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const ldv_usb_driver_7: ref;

axiom ldv_usb_driver_7 == $sub.ref(0, 339808);

procedure ldv_usb_driver_7();
  free requires assertsPassed;
  modifies $M.22, $M.0, $CurrAddr;



implementation ldv_usb_driver_7()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} $p0 := ldv_zalloc(1520);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $M.22 := $p0;
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 340840);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.0, $M.32, $M.34, $M.22, $M.33, $M.40, $M.41, $M.42, $M.43, $M.44, $M.39, $M.35, $M.36, $M.37, $M.38, $M.50, $M.51, $M.3, $M.2, $M.48, $M.49, $M.16, $M.18, $M.17, $M.19, $M.21, $M.15, $M.72, $M.73, $M.1, $M.10, $M.75, $M.76, $M.77, $M.78, $M.79, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.45, $M.46, $M.47, $M.11, $M.12, $M.13, $M.14, assertsPassed, $M.20;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;

  $bb0:
    call {:si_unique_call 650} $initialize();
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $p0 := ldv_zalloc(32);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} ldv_initialize();
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $M.23 := 0;
    call {:si_unique_call 654} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $M.24 := 0;
    call {:si_unique_call 655} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $M.25 := 0;
    call {:si_unique_call 656} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $M.26 := 0;
    call {:si_unique_call 657} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $M.27 := 0;
    call {:si_unique_call 658} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $M.28 := 0;
    call {:si_unique_call 659} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 660} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 661} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $M.31 := 0;
    call {:si_unique_call 662} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $p24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61 := main_loop_$bb1($p1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $p24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i2, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} ldv_stop();
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb25_dummy;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i60 := $M.31;
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb94:
    assume $i61 == 1;
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} ldv_main_exported_5();
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i43 := $M.30;
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb64:
    assume $i44 == 1;
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 1} true;
    call {:si_unique_call 682} $i45 := __VERIFIER_nondet_int();
    call {:si_unique_call 683} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i45);
    call {:si_unique_call 684} {:cexpr "tmp___2"} boogie_si_record_i32($i45);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i45, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i45, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} ldv_stop();
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb69:
    assume $i47 == 1;
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i53 := $M.30;
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 1);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb82:
    assume $i54 == 1;
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $i55 := stk1160_usb_driver_init();
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $M.34 := $i55;
    call {:si_unique_call 689} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i55);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i56 := $M.34;
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i58 := $M.34;
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb87:
    assume $i59 == 1;
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 691} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 692} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} ldv_initialize_v4l2_ioctl_ops_5();
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 694} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} ldv_initialize_i2c_algorithm_2();
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 696} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 697} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} ldv_initialize_snd_ac97_bus_ops_1();
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 699} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} ldv_initialize_vb2_ops_4();
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 701} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} ldv_initialize_v4l2_file_operations_6();
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb84:
    assume $i57 == 1;
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 690} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} ldv_check_final_state();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb67:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i45, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb71;

  $bb72:
    assume $i48 == 1;
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i49 := $M.30;
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 2);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb74:
    assume $i50 == 1;
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i51 := $M.29;
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb76;

  $bb77:
    assume $i52 == 1;
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} stk1160_usb_driver_exit();
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 686} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb5:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i7 == 1);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i41 := $M.28;
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb61:
    assume $i42 == 1;
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} ldv_main_exported_4();
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb12:
    assume $i7 == 1;
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i39 := $M.27;
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb58:
    assume $i40 == 1;
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} ldv_main_exported_1();
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb3:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i37 := $M.26;
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb55:
    assume $i38 == 1;
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} ldv_main_exported_2();
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb16:
    assume $i9 == 1;
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i16 := $M.25;
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb29:
    assume $i17 == 1;
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 1} true;
    call {:si_unique_call 668} $i18 := __VERIFIER_nondet_int();
    call {:si_unique_call 669} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i18);
    call {:si_unique_call 670} {:cexpr "tmp___1"} boogie_si_record_i32($i18);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i18, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} ldv_stop();
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb34:
    assume $i20 == 1;
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i30 := $M.25;
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 2);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb46:
    assume $i31 == 1;
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i32 := $M.33;
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb48;

  $bb49:
    assume $i33 == 1;
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $p34 := $M.22;
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} stk1160_disconnect($p34);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 676} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i35 := $M.29;
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32($i35, 1);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $M.29 := $i36;
    call {:si_unique_call 677} {:cexpr "ref_cnt"} boogie_si_record_i32($i36);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb32:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i18, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb36;

  $bb37:
    assume $i21 == 1;
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i22 := $M.25;
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 1);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb39:
    assume $i23 == 1;
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p24 := $M.22;
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $i25 := stk1160_probe($p24, $p1);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $M.32 := $i25;
    call {:si_unique_call 672} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i25);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i26 := $M.32;
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i27 == 1;
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 673} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i28 := $M.29;
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, 1);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $M.29 := $i29;
    call {:si_unique_call 674} {:cexpr "ref_cnt"} boogie_si_record_i32($i29);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb14:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i10 == 1);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i14 := $M.24;
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb26:
    assume $i15 == 1;
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} ldv_main_exported_3();
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb18:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb11;

  $bb20:
    assume $i11 == 1;
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i12 := $M.23;
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i13 == 1;
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} ldv_main_exported_6();
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb25_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 663} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 664} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 665} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 341872);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_6: ref;

axiom ldv_main_exported_6 == $sub.ref(0, 342904);

procedure ldv_main_exported_6();
  free requires assertsPassed;
  modifies $M.23, $M.29, $M.36, $M.0, $CurrAddr;



implementation ldv_main_exported_6()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i64;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i64;
  var vslice_dummy_var_145: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $p0 := ldv_zalloc(184);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $p2 := ldv_zalloc(16);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $p4 := ldv_zalloc(1);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 1} true;
    call {:si_unique_call 709} $i5 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 710} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i5);
    call {:si_unique_call 711} {:cexpr "tmp___2"} boogie_si_record_i64($i5);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $p6 := ldv_zalloc(8);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 1} true;
    call {:si_unique_call 713} $i8 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 714} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i8);
    call {:si_unique_call 715} {:cexpr "tmp___4"} boogie_si_record_i64($i8);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 1} true;
    call {:si_unique_call 716} $i9 := __VERIFIER_nondet_uint();
    call {:si_unique_call 717} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i9);
    call {:si_unique_call 718} {:cexpr "tmp___5"} boogie_si_record_i32($i9);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 1} true;
    call {:si_unique_call 719} $i10 := __VERIFIER_nondet_int();
    call {:si_unique_call 720} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i10);
    call {:si_unique_call 721} {:cexpr "tmp___6"} boogie_si_record_i32($i10);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i10, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} ldv_stop();
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i52 := $M.23;
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 1);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i56 := $M.23;
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 2);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb45:
    assume $i57 == 1;
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p58 := $M.35;
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} vslice_dummy_var_145 := video_ioctl2($p58, $i9, $i5);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $M.23 := 2;
    call {:si_unique_call 742} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i53 == 1;
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $p54 := $M.35;
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} vslice_dummy_var_144 := video_ioctl2($p54, $i9, $i5);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 740} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i44 := $M.23;
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 1);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb36:
    assume $i45 == 1;
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p46 := $M.35;
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $i47 := v4l2_fh_open($p46);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $M.36 := $i47;
    call {:si_unique_call 736} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i47);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i48 := $M.36;
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i49 == 1;
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $M.23 := 2;
    call {:si_unique_call 737} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i50 := $M.29;
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i50, 1);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $M.29 := $i51;
    call {:si_unique_call 738} {:cexpr "ref_cnt"} boogie_si_record_i32($i51);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i36 := $M.23;
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 1);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i40 := $M.23;
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 2);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb33:
    assume $i41 == 1;
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $p42 := $M.35;
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} vslice_dummy_var_143 := vb2_fop_poll($p42, $p3);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $M.23 := 2;
    call {:si_unique_call 734} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i37 == 1;
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p38 := $M.35;
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} vslice_dummy_var_142 := vb2_fop_poll($p38, $p3);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 732} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb2:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i10, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i10, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i16 == 1);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i32 := $M.23;
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb27:
    assume $i33 == 1;
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p34 := $M.35;
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} vslice_dummy_var_141 := vb2_fop_read($p34, $p4, $i8, $p7);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $M.23 := 2;
    call {:si_unique_call 730} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb13:
    assume $i16 == 1;
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i26 := $M.23;
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 2);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb24:
    assume $i27 == 1;
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p28 := $M.35;
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} vslice_dummy_var_140 := vb2_fop_release($p28);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 727} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i30 := $M.29;
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i30, 1);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $M.29 := $i31;
    call {:si_unique_call 728} {:cexpr "ref_cnt"} boogie_si_record_i32($i31);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb11:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i10, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb15:
    assume $i17 == 1;
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i18 := $M.23;
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i22 := $M.23;
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i23 == 1;
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p24 := $M.35;
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} vslice_dummy_var_139 := vb2_fop_mmap($p24, $p1);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $M.23 := 2;
    call {:si_unique_call 725} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i19 == 1;
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $p20 := $M.35;
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} vslice_dummy_var_138 := vb2_fop_mmap($p20, $p1);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 723} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    goto $bb19;
}



const ldv_main_exported_3: ref;

axiom ldv_main_exported_3 == $sub.ref(0, 343936);

procedure ldv_main_exported_3();
  free requires assertsPassed;
  modifies $M.24, $M.29, $M.0, $CurrAddr;



implementation ldv_main_exported_3()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i32;
  var vslice_dummy_var_146: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $p0 := ldv_zalloc(1800);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 1} true;
    call {:si_unique_call 745} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 746} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 747} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} ldv_stop();
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i10 := $M.24;
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} vslice_dummy_var_146 := ldv_probe_3();
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $M.24 := 2;
    call {:si_unique_call 752} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i13 := $M.29;
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 1);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $M.29 := $i14;
    call {:si_unique_call 753} {:cexpr "ref_cnt"} boogie_si_record_i32($i14);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb6;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i6 := $M.24;
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} video_device_release_empty($p1);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 749} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i8 := $M.29;
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i8, 1);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $M.29 := $i9;
    call {:si_unique_call 750} {:cexpr "ref_cnt"} boogie_si_record_i32($i9);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 344968);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_main_exported_2: ref;

axiom ldv_main_exported_2 == $sub.ref(0, 346000);

procedure ldv_main_exported_2();
  free requires assertsPassed;
  modifies $M.26, $M.0, $CurrAddr;



implementation ldv_main_exported_2()
{
  var $i0: i32;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 1} true;
    call {:si_unique_call 755} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 756} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 757} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $p1 := ldv_zalloc(16);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 1} true;
    call {:si_unique_call 759} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 760} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 761} {:cexpr "tmp___1"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} ldv_stop();
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i11 := $M.26;
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume $i12 == 1;
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $p13 := $M.37;
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} vslice_dummy_var_148 := functionality($p13);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 765} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb2:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i3, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb7:
    assume $i6 == 1;
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i7 := $M.26;
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i8 == 1;
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p9 := $M.37;
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} vslice_dummy_var_147 := stk1160_i2c_xfer($p9, $p2, $i0);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 763} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const ldv_main_exported_1: ref;

axiom ldv_main_exported_1 == $sub.ref(0, 347032);

procedure ldv_main_exported_1();
  free requires assertsPassed;
  modifies $M.27, $M.0, $M.29, $CurrAddr;



implementation ldv_main_exported_1()
{
  var $i0: i16;
  var $i1: i16;
  var $i2: i16;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i16;
  var $i15: i32;
  var $i16: i16;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i16;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i37: i32;
  var $i38: i32;
  var vslice_dummy_var_149: i16;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 1} true;
    call {:si_unique_call 767} $i0 := __VERIFIER_nondet_ushort();
    call {:si_unique_call 768} {:cexpr "smack:ext:__VERIFIER_nondet_ushort"} boogie_si_record_i16($i0);
    call {:si_unique_call 769} {:cexpr "tmp"} boogie_si_record_i16($i0);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 1} true;
    call {:si_unique_call 770} $i1 := __VERIFIER_nondet_ushort();
    call {:si_unique_call 771} {:cexpr "smack:ext:__VERIFIER_nondet_ushort"} boogie_si_record_i16($i1);
    call {:si_unique_call 772} {:cexpr "tmp___0"} boogie_si_record_i16($i1);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 1} true;
    call {:si_unique_call 773} $i2 := __VERIFIER_nondet_ushort();
    call {:si_unique_call 774} {:cexpr "smack:ext:__VERIFIER_nondet_ushort"} boogie_si_record_i16($i2);
    call {:si_unique_call 775} {:cexpr "tmp___1"} boogie_si_record_i16($i2);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 1} true;
    call {:si_unique_call 776} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 777} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 778} {:cexpr "tmp___2"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i3, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i3, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i3, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} ldv_stop();
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i34 := $M.27;
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 1);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb31:
    assume $i35 == 1;
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} vslice_dummy_var_151 := ldv_probe_1();
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 791} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i37 := $M.29;
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, 1);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $M.29 := $i38;
    call {:si_unique_call 792} {:cexpr "ref_cnt"} boogie_si_record_i32($i38);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i29 := $M.27;
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 2);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb28:
    assume $i30 == 1;
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} vslice_dummy_var_150 := ldv_release_1();
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 788} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i32 := $M.29;
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32($i32, 1);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $M.29 := $i33;
    call {:si_unique_call 789} {:cexpr "ref_cnt"} boogie_si_record_i32($i33);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i23 := $M.27;
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i26 := $M.27;
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 2);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb25:
    assume $i27 == 1;
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p28 := $M.38;
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} stk1160_reset_ac97($p28);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 786} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i24 == 1;
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p25 := $M.38;
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} stk1160_reset_ac97($p25);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 784} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb2:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i8 == 1);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i17 := $M.27;
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 2);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19:
    assume $i18 == 1;
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p19 := $M.38;
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i2);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i20);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} vslice_dummy_var_149 := stk1160_read_ac97($p19, $i21);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 782} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i3, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i10 := $M.27;
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i11 == 1;
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $p12 := $M.38;
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i1);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i0);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} stk1160_write_ac97($p12, $i14, $i16);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 780} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_4: ref;

axiom ldv_main_exported_4 == $sub.ref(0, 348064);

procedure ldv_main_exported_4();
  free requires assertsPassed;
  modifies $M.28, $M.0, $CurrAddr, $M.2, $M.16, $M.18, $M.3, $M.20;



implementation ldv_main_exported_4()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $p0 := ldv_zalloc(840);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $p2 := ldv_zalloc(8);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $p4 := ldv_zalloc(208);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 1} true;
    call {:si_unique_call 797} $i6 := __VERIFIER_nondet_uint();
    call {:si_unique_call 798} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i6);
    call {:si_unique_call 799} {:cexpr "tmp___2"} boogie_si_record_i32($i6);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $p7 := ldv_zalloc(4);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $p9 := ldv_zalloc(4);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $p11 := ldv_zalloc(4);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 1} true;
    call {:si_unique_call 803} $i13 := __VERIFIER_nondet_int();
    call {:si_unique_call 804} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i13);
    call {:si_unique_call 805} {:cexpr "tmp___6"} boogie_si_record_i32($i13);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i13, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i13, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} ldv_stop();
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i37 := $M.28;
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 1);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb33:
    assume $i38 == 1;
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $p39 := $M.39;
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} vslice_dummy_var_154 := start_streaming($p39, $i6);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 817} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i35 := $M.28;
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 1);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb30:
    assume $i36 == 1;
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} buffer_queue($p1);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 815} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i32 := $M.28;
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb27:
    assume $i33 == 1;
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $p34 := $M.39;
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} vb2_ops_wait_finish($p34);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 813} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb2:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i13, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i13, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $i28 := $M.28;
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb24:
    assume $i29 == 1;
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p30 := $M.39;
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} vslice_dummy_var_153 := queue_setup($p30, $p5, $p12, $p8, $p10, $p3);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 811} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i25 := $M.28;
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21:
    assume $i26 == 1;
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $p27 := $M.39;
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} vb2_ops_wait_prepare($p27);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 809} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb11:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i13, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb10;

  $bb15:
    assume $i20 == 1;
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i21 := $M.28;
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 1);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i22 == 1;
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p23 := $M.39;
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} vslice_dummy_var_152 := stop_streaming($p23);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 807} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    goto $bb19;
}



const stk1160_usb_driver_exit: ref;

axiom stk1160_usb_driver_exit == $sub.ref(0, 349096);

procedure stk1160_usb_driver_exit();
  free requires assertsPassed;
  modifies $M.25;



implementation stk1160_usb_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} ldv_usb_deregister_6(stk1160_usb_driver);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    return;
}



const stk1160_usb_driver_init: ref;

axiom stk1160_usb_driver_init == $sub.ref(0, 350128);

procedure stk1160_usb_driver_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $M.33, $M.22, $M.0, $CurrAddr;



implementation stk1160_usb_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $i0 := ldv_usb_register_driver_5(stk1160_usb_driver, __this_module, .str.16);
    call {:si_unique_call 821} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_initialize_v4l2_ioctl_ops_5: ref;

axiom ldv_initialize_v4l2_ioctl_ops_5 == $sub.ref(0, 351160);

procedure ldv_initialize_v4l2_ioctl_ops_5();
  free requires assertsPassed;
  modifies $M.40, $M.41, $M.42, $M.43, $M.44, $M.0, $CurrAddr;



implementation ldv_initialize_v4l2_ioctl_ops_5()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $p0 := ldv_zalloc(360);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $M.40 := $p0;
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $p2 := ldv_zalloc(208);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $M.41 := $p2;
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $p4 := ldv_zalloc(32);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $M.42 := $p4;
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $p6 := ldv_zalloc(88);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $M.43 := $p6;
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $p8 := ldv_zalloc(168);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $M.44 := $p8;
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_i2c_algorithm_2: ref;

axiom ldv_initialize_i2c_algorithm_2 == $sub.ref(0, 352192);

procedure ldv_initialize_i2c_algorithm_2();
  free requires assertsPassed;
  modifies $M.37, $M.0, $CurrAddr;



implementation ldv_initialize_i2c_algorithm_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $p0 := ldv_zalloc(1896);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $M.37 := $p0;
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_snd_ac97_bus_ops_1: ref;

axiom ldv_initialize_snd_ac97_bus_ops_1 == $sub.ref(0, 353224);

procedure ldv_initialize_snd_ac97_bus_ops_1();
  free requires assertsPassed;
  modifies $M.38, $M.0, $CurrAddr;



implementation ldv_initialize_snd_ac97_bus_ops_1()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $p0 := ldv_zalloc(2392);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $M.38 := $p0;
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_vb2_ops_4: ref;

axiom ldv_initialize_vb2_ops_4 == $sub.ref(0, 354256);

procedure ldv_initialize_vb2_ops_4();
  free requires assertsPassed;
  modifies $M.39, $M.0, $CurrAddr;



implementation ldv_initialize_vb2_ops_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $p0 := ldv_zalloc(648);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $M.39 := $p0;
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_v4l2_file_operations_6: ref;

axiom ldv_initialize_v4l2_file_operations_6 == $sub.ref(0, 355288);

procedure ldv_initialize_v4l2_file_operations_6();
  free requires assertsPassed;
  modifies $M.35, $M.0, $CurrAddr;



implementation ldv_initialize_v4l2_file_operations_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $p0 := ldv_zalloc(360);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $M.35 := $p0;
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_5: ref;

axiom ldv_main_exported_5 == $sub.ref(0, 356320);

procedure ldv_main_exported_5();
  free requires assertsPassed;
  modifies $M.45, $M.46, $M.47, $M.31, $M.0, $M.11, $M.12, $M.13, $M.14, $M.6, $CurrAddr, $M.4, $M.5, $M.7, $M.8, $M.3, $M.2, $M.16, $M.18, $M.20;



implementation ldv_main_exported_5()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i86: i64;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $i105: i32;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $p153: ref;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $i166: i32;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $p3 := ldv_zalloc(20);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $p5 := ldv_zalloc(1);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 1} true;
    call {:si_unique_call 836} $i6 := __VERIFIER_nondet_uint();
    call {:si_unique_call 837} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i6);
    call {:si_unique_call 838} {:cexpr "tmp___1"} boogie_si_record_i32($i6);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $p7 := ldv_zalloc(1);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $p8 := ldv_zalloc(1);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $p9 := ldv_zalloc(80);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $p11 := ldv_zalloc(1);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $p12 := ldv_zalloc(64);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $p14 := ldv_zalloc(4);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $p16 := ldv_zalloc(1);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $p17 := ldv_zalloc(8);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $p19 := ldv_zalloc(1);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $p20 := ldv_zalloc(1);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $p21 := ldv_zalloc(1);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} $p22 := ldv_zalloc(1);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $p23 := ldv_zalloc(1);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $p24 := ldv_zalloc(104);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $p26 := ldv_zalloc(1);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $p27 := ldv_zalloc(1);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $p28 := ldv_zalloc(1);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} $p29 := ldv_zalloc(56);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $p31 := ldv_zalloc(1);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $p32 := ldv_zalloc(1);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $p33 := ldv_zalloc(1);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $p34 := ldv_zalloc(1);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $p35 := ldv_zalloc(8);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $p37 := ldv_zalloc(1);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $p38 := ldv_zalloc(56);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $p40 := ldv_zalloc(1);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $p41 := ldv_zalloc(1);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p0);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.45;
    call {:si_unique_call 866} cmdloc_dummy_var_20 := $memset.i8(cmdloc_dummy_var_19, $p42, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.45 := cmdloc_dummy_var_20;
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p1);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.46;
    call {:si_unique_call 867} cmdloc_dummy_var_22 := $memset.i8(cmdloc_dummy_var_21, $p43, 0, 8, $zext.i32.i64(8), 0 == 1);
    $M.46 := cmdloc_dummy_var_22;
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p2);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.47;
    call {:si_unique_call 868} cmdloc_dummy_var_24 := $memset.i8(cmdloc_dummy_var_23, $p44, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.47 := cmdloc_dummy_var_24;
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 1} true;
    call {:si_unique_call 869} $i45 := __VERIFIER_nondet_int();
    call {:si_unique_call 870} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i45);
    call {:si_unique_call 871} {:cexpr "tmp___29"} boogie_si_record_i32($i45);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i45, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i45, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i45, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i45, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i45, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i45, 21);
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} ldv_stop();
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i51 == 1;
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i163 := $M.31;
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i163, 1);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb113:
    assume $i164 == 1;
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p165 := $M.40;
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.45, $p0);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} vslice_dummy_var_176 := vb2_ioctl_streamon($p165, $p5, $i166);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 915} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb10:
    assume $i50 == 1;
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i159 := $M.31;
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i160 := $eq.i32($i159, 1);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb110:
    assume $i160 == 1;
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $p161 := $M.40;
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} vslice_dummy_var_175 := vidioc_s_register($p161, $p28, $p39);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 913} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb8:
    assume $i49 == 1;
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i155 := $M.31;
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 1);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb107:
    assume $i156 == 1;
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p157 := $M.40;
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} vslice_dummy_var_174 := vidioc_s_input($p157, $p8, $i6);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 911} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb6:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i45, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i45, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i53 == 1);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i150 := $M.31;
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 1);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb104:
    assume $i151 == 1;
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p152 := $M.44;
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $p153 := $M.42;
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} vslice_dummy_var_173 := v4l2_ctrl_subscribe_event($p152, $p153);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 909} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb17:
    assume $i53 == 1;
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i146 := $M.31;
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 1);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb101:
    assume $i147 == 1;
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p148 := $M.40;
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} vslice_dummy_var_172 := vidioc_enum_input($p148, $p22, $p10);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 907} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb15:
    assume $i52 == 1;
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i142 := $M.31;
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 1);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb98:
    assume $i143 == 1;
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p144 := $M.40;
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} vslice_dummy_var_171 := vidioc_g_register($p144, $p7, $p30);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 905} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb4:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i45, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i45, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i45, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i56 == 1);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i138 := $M.31;
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 1);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb95:
    assume $i139 == 1;
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p140 := $M.40;
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} vslice_dummy_var_170 := vidioc_g_std($p140, $p40, $p18);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 903} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb23:
    assume $i56 == 1;
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i134 := $M.31;
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 1);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb92:
    assume $i135 == 1;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p136 := $M.40;
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} vslice_dummy_var_169 := vidioc_querycap($p136, $p21, $p25);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 901} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb21:
    assume $i55 == 1;
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i129 := $M.31;
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 1);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb89:
    assume $i130 == 1;
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $p131 := $M.40;
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p132 := $M.43;
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} vslice_dummy_var_168 := vb2_ioctl_qbuf($p131, $p27, $p132);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 899} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb19:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i45, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i57 == 1);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i125 := $M.31;
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 1);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb86:
    assume $i126 == 1;
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $p127 := $M.40;
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} vslice_dummy_var_167 := vidioc_g_input($p127, $p32, $p15);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 897} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb25:
    assume $i57 == 1;
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i120 := $M.31;
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 1);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb83:
    assume $i121 == 1;
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p122 := $M.40;
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p123 := $M.41;
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} vslice_dummy_var_166 := vidioc_g_fmt_vid_cap($p122, $p26, $p123);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 895} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb2:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i45, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i45, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i45, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i45, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i61 == 1);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i115 := $M.31;
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, 1);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb80:
    assume $i116 == 1;
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p117 := $M.40;
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p118 := $M.41;
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} vslice_dummy_var_165 := vidioc_s_fmt_vid_cap($p117, $p19, $p118);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 893} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb33:
    assume $i61 == 1;
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i111 := $M.31;
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i111, 1);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb77:
    assume $i112 == 1;
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p113 := $M.40;
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} vslice_dummy_var_164 := vidioc_enum_fmt_vid_cap($p113, $p16, $p13);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 891} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb31:
    assume $i60 == 1;
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i107 := $M.31;
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 1);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb74:
    assume $i108 == 1;
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p109 := $M.40;
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} vslice_dummy_var_163 := vidioc_querystd($p109, $p37, $p36);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 889} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb29:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i45, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i45, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i63 == 1);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i102 := $M.31;
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 1);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb71:
    assume $i103 == 1;
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p104 := $M.40;
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.47, $p2);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} vslice_dummy_var_162 := vb2_ioctl_streamoff($p104, $p11, $i105);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 887} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb37:
    assume $i63 == 1;
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i97 := $M.31;
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 1);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb68:
    assume $i98 == 1;
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $p99 := $M.40;
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p100 := $M.43;
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} vslice_dummy_var_161 := vb2_ioctl_querybuf($p99, $p33, $p100);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 885} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb35:
    assume $i62 == 1;
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i92 := $M.31;
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 1);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb65:
    assume $i93 == 1;
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p94 := $M.40;
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $p95 := $M.43;
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} vslice_dummy_var_160 := vb2_ioctl_dqbuf($p94, $p20, $p95);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 883} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb27:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i45, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i45, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i45, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i66 == 1);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i88 := $M.31;
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 1);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb62:
    assume $i89 == 1;
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p90 := $M.40;
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} vslice_dummy_var_159 := v4l2_ctrl_log_status($p90, $p23);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 881} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb43:
    assume $i66 == 1;
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i83 := $M.31;
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 1);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb59:
    assume $i84 == 1;
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p85 := $M.40;
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i86 := $load.i64($M.46, $p1);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} vslice_dummy_var_158 := vidioc_s_std($p85, $p34, $i86);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 879} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb41:
    assume $i65 == 1;
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i78 := $M.31;
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 1);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb56:
    assume $i79 == 1;
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p80 := $M.40;
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $p81 := $M.41;
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} vslice_dummy_var_157 := vidioc_try_fmt_vid_cap($p80, $p41, $p81);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 877} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb39:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i45, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i67 == 1);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i73 := $M.31;
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 1);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb53:
    assume $i74 == 1;
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p75 := $M.44;
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $p76 := $M.42;
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} vslice_dummy_var_156 := v4l2_event_unsubscribe($p75, $p76);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 875} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb45:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i45, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb14;

  $bb47:
    assume $i68 == 1;
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i69 := $M.31;
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 1);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb49:
    assume $i70 == 1;
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $p71 := $M.40;
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} vslice_dummy_var_155 := vb2_ioctl_reqbufs($p71, $p31, $p4);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 873} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    goto $bb51;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 357352);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p0 := $M.2;
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p3 := $M.48;
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} ldv_error();
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i6 := $M.49;
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i7 == 1);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} ldv_error();
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i8 := $M.50;
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i9 == 1);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} ldv_error();
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i10 := $M.51;
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} ldv_error();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i9 == 1;
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i7 == 1;
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_register_driver_5: ref;

axiom ldv_usb_register_driver_5 == $sub.ref(0, 358384);

procedure ldv_usb_register_driver_5($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $M.33, $M.22, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_5($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 923} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 924} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $M.33 := 0;
    call {:si_unique_call 925} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} ldv_usb_driver_7();
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 359416);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 1} true;
    call {:si_unique_call 927} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 928} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_deregister_6: ref;

axiom ldv_usb_deregister_6 == $sub.ref(0, 360448);

procedure ldv_usb_deregister_6($p0: ref);
  free requires assertsPassed;
  modifies $M.25;



implementation ldv_usb_deregister_6($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} usb_deregister($p0);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $M.25 := 0;
    call {:si_unique_call 930} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 361480);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    return;
}



const ldv_release_1: ref;

axiom ldv_release_1 == $sub.ref(0, 362512);

procedure ldv_release_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 1} true;
    call {:si_unique_call 931} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 932} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_1: ref;

axiom ldv_probe_1 == $sub.ref(0, 363544);

procedure ldv_probe_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 1} true;
    call {:si_unique_call 933} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 934} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_3: ref;

axiom ldv_probe_3 == $sub.ref(0, 364576);

procedure ldv_probe_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 1} true;
    call {:si_unique_call 935} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 936} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_size_t: ref;

axiom __VERIFIER_nondet_size_t == $sub.ref(0, 365608);

procedure __VERIFIER_nondet_size_t() returns ($r: i64);



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 366640);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 937} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 1} true;
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 367672);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 368704);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 369736);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 370768);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 371800);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 372832);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 373864);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 374896);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 375928);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 376960);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __VERIFIER_nondet_unsigned_short: ref;

axiom __VERIFIER_nondet_unsigned_short == $sub.ref(0, 377992);

procedure __VERIFIER_nondet_unsigned_short() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_short() returns ($r: i16)
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 1} true;
    call {:si_unique_call 938} $i0 := __SMACK_nondet_unsigned_short();
    call {:si_unique_call 939} {:cexpr "smack:ext:__SMACK_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 940} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 1} true;
    call {:si_unique_call 941} __VERIFIER_assume($i6);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 1} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 65535);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 379024);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 380056);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 381088);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 1} true;
    call {:si_unique_call 942} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 943} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 944} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 1} true;
    call {:si_unique_call 945} __VERIFIER_assume($i4);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 382120);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 383152);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 384184);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 385216);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 1} true;
    call {:si_unique_call 946} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 947} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 948} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 1} true;
    call {:si_unique_call 949} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 950} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 951} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 1} true;
    call {:si_unique_call 952} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 953} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 954} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 1} true;
    call {:si_unique_call 955} __VERIFIER_assume($i7);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 1} true;
    call {:si_unique_call 956} __VERIFIER_assume($i11);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 386248);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 387280);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 1} true;
    call {:si_unique_call 957} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 958} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 959} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 1} true;
    call {:si_unique_call 960} __VERIFIER_assume($i4);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 388312);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 389344);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 390376);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 391408);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 392440);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 1} true;
    call {:si_unique_call 961} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 962} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 963} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 1} true;
    call {:si_unique_call 964} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 965} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 966} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 1} true;
    call {:si_unique_call 967} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 968} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 969} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 1} true;
    call {:si_unique_call 970} __VERIFIER_assume($i7);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 1} true;
    call {:si_unique_call 971} __VERIFIER_assume($i11);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 393472);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 394504);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 395536);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 396568);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 397600);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 398632);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 399664);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 400696);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_ushort: ref;

axiom __VERIFIER_nondet_ushort == $sub.ref(0, 401728);

procedure __VERIFIER_nondet_ushort() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ushort() returns ($r: i16)
{
  var $i0: i16;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 1} true;
    call {:si_unique_call 972} $i0 := __VERIFIER_nondet_unsigned_short();
    call {:si_unique_call 973} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 974} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 402760);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 1} true;
    call {:si_unique_call 975} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 976} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 977} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 403792);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 1} true;
    call {:si_unique_call 978} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 979} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 980} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 404824);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 1} true;
    call {:si_unique_call 981} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 982} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 405856);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 406888);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 983} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 984} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 407920);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 408952);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 409984);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 985} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 986} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 1} true;
    call {:si_unique_call 987} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 988} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $p6 := malloc($i5);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 990} cmdloc_dummy_var_26 := $memset.i8(cmdloc_dummy_var_25, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 411016);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 412048);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.40, $M.41, $M.42, $M.43, $M.44, $M.39, $M.35, $M.36, $M.37, $M.38, $M.50, $M.51, $M.3, $M.2, $M.48, $M.49, $M.16, $M.18, $M.17, $M.19, $M.21, $M.0, $M.15, $M.72, $M.73, $M.1, $M.10, $M.75, $M.76, $M.77, $M.78, $M.79;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 991} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.22 := $0.ref;
    $M.23 := 0;
    call {:si_unique_call 992} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.24 := 0;
    call {:si_unique_call 993} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.25 := 0;
    call {:si_unique_call 994} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.26 := 0;
    call {:si_unique_call 995} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.27 := 0;
    call {:si_unique_call 996} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.28 := 0;
    call {:si_unique_call 997} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.29 := 0;
    call {:si_unique_call 998} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.30 := 0;
    call {:si_unique_call 999} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 1000} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.32 := 0;
    call {:si_unique_call 1001} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.33 := 0;
    call {:si_unique_call 1002} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.34 := 0;
    call {:si_unique_call 1003} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.40 := $0.ref;
    $M.41 := $0.ref;
    $M.42 := $0.ref;
    $M.43 := $0.ref;
    $M.44 := $0.ref;
    $M.39 := $0.ref;
    $M.35 := $0.ref;
    $M.36 := 0;
    call {:si_unique_call 1004} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.37 := $0.ref;
    $M.38 := $0.ref;
    $M.50 := 0;
    call {:si_unique_call 1005} {:cexpr "INTERF_STATE"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 1006} {:cexpr "SERIAL_STATE"} boogie_si_record_i32(0);
    $M.3 := $0.ref;
    $M.2 := $0.ref;
    $M.48 := $0.ref;
    $M.49 := 0;
    call {:si_unique_call 1007} {:cexpr "dev_counter"} boogie_si_record_i32(0);
    $M.16 := 0;
    call {:si_unique_call 1008} {:cexpr "completeFnIntCounter"} boogie_si_record_i32(0);
    $M.18 := 0;
    call {:si_unique_call 1009} {:cexpr "completeFnBulkCounter"} boogie_si_record_i32(0);
    $M.17 := $0.ref;
    $M.19 := $0.ref;
    $M.21 := 0;
    call {:si_unique_call 1010} {:cexpr "i2c_debug"} boogie_si_record_i32(0);
    $M.0 := $store.i16($M.0, client_template, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(4, 1)), $mul.ref(0, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(4, 1)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(4, 1)), $mul.ref(2, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(4, 1)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(4, 1)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(4, 1)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(4, 1)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(4, 1)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(4, 1)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(4, 1)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(4, 1)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(4, 1)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(4, 1)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(4, 1)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(4, 1)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(4, 1)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(4, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(4, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(4, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(4, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(216, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(16, 1)), $mul.ref(288, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(328, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(328, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(328, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(208, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(209, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(344, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(524, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(528, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(529, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(532, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(536, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(540, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(544, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(552, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(560, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(568, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(576, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(584, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(520, 1)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1120, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1128, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1136, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1144, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1160, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1160, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1184, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1184, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1208, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1216, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1220, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1296, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1296, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1312, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1312, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1312, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1312, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1368, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1376, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(40, 1)), $mul.ref(1377, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(1424, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(1432, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(client_template, $mul.ref(0, 1448)), $mul.ref(1432, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, algo, stk1160_i2c_xfer);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(algo, $mul.ref(0, 24)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(algo, $mul.ref(0, 24)), $mul.ref(16, 1)), functionality);
    $M.0 := $store.ref($M.0, adap_template, __this_module);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(16, 1)), algo);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(32, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(32, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(32, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(32, 1)), $mul.ref(96, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(32, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(32, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(32, 1)), $mul.ref(120, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(32, 1)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(168, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(172, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(216, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(288, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(328, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(328, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(328, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(208, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(209, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(344, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(524, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(528, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(529, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(532, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(536, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(540, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(544, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(552, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(560, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(568, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(576, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(584, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(520, 1)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1120, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1128, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1136, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1144, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1160, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1160, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1184, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1184, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1208, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1216, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1220, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1296, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1296, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1312, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1312, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1312, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1312, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1368, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1376, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(176, 1)), $mul.ref(1377, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1560, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(0, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(2, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(38, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(39, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(41, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(42, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(43, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(45, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(46, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1564, 1)), $mul.ref(47, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1616, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1616, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1616, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1616, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1616, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1616, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1616, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1616, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1616, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1616, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1616, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1616, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1616, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1712, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1712, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1712, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1712, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1712, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1712, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1712, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1712, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1712, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1712, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1712, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1712, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1712, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1712, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1712, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1712, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1712, 1)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1712, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1712, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1712, 1)), $mul.ref(120, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1712, 1)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1712, 1)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1880, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1880, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(adap_template, $mul.ref(0, 1904)), $mul.ref(1896, 1)), $0.ref);
    $M.15 := 0;
    call {:si_unique_call 1011} {:cexpr "keep_buffers"} boogie_si_record_i8(0);
    $M.0 := $store.ref($M.0, format, .str.41);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(format, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(8, 1)), 1498831189);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(format, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(12, 1)), 16);
    $M.0 := $store.ref($M.0, stk1160_ioctl_ops, vidioc_querycap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(24, 1)), vidioc_enum_fmt_vid_cap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(64, 1)), vidioc_g_fmt_vid_cap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(144, 1)), vidioc_s_fmt_vid_cap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(224, 1)), vidioc_try_fmt_vid_cap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(304, 1)), vb2_ioctl_reqbufs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(312, 1)), vb2_ioctl_querybuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(320, 1)), vb2_ioctl_qbuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(336, 1)), vb2_ioctl_dqbuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(384, 1)), vb2_ioctl_streamon);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(392, 1)), vb2_ioctl_streamoff);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(400, 1)), vidioc_g_std);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(408, 1)), vidioc_s_std);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(416, 1)), vidioc_querystd);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(424, 1)), vidioc_enum_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(432, 1)), vidioc_g_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(440, 1)), vidioc_s_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(520, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(528, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(536, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(544, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(552, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(560, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(568, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(576, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(584, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(600, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(608, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(616, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(624, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(632, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(640, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(648, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(656, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(664, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(672, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(680, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(688, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(696, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(704, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(712, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(720, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(728, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(736, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(744, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(752, 1)), v4l2_ctrl_log_status);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(760, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(768, 1)), vidioc_g_register);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(776, 1)), vidioc_s_register);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(784, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(792, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(800, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(808, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(816, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(824, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(832, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(840, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(848, 1)), v4l2_ctrl_subscribe_event);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(856, 1)), v4l2_event_unsubscribe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_ioctl_ops, $mul.ref(0, 872)), $mul.ref(864, 1)), $0.ref);
    $M.0 := $store.ref($M.0, stk1160_fops, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_fops, $mul.ref(0, 88)), $mul.ref(8, 1)), vb2_fop_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_fops, $mul.ref(0, 88)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_fops, $mul.ref(0, 88)), $mul.ref(24, 1)), vb2_fop_poll);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_fops, $mul.ref(0, 88)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_fops, $mul.ref(0, 88)), $mul.ref(40, 1)), video_ioctl2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_fops, $mul.ref(0, 88)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_fops, $mul.ref(0, 88)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_fops, $mul.ref(0, 88)), $mul.ref(64, 1)), vb2_fop_mmap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_fops, $mul.ref(0, 88)), $mul.ref(72, 1)), v4l2_fh_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_fops, $mul.ref(0, 88)), $mul.ref(80, 1)), vb2_fop_release);
    $M.0 := $store.ref($M.0, v4l_template, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(62, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(64, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(66, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(96, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(100, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(128, 1)), stk1160_fops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(216, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(288, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(208, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(209, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(344, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(524, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(528, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(529, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(532, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(536, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(540, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(544, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(552, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(560, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(568, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(576, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(584, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1120, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1128, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1136, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1144, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1160, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1160, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1184, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1184, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1208, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1216, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1220, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1296, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1296, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1368, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1376, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1377, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1520, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1528, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1536, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1544, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1552, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1560, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(0, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(2, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1600, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1604, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1608, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1612, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1616, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1624, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1704, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1704, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1720, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1728, 1)), 16777215);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1736, 1)), video_device_release_empty);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1744, 1)), stk1160_ioctl_ops);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1752, 1)), $mul.ref(0, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1752, 1)), $mul.ref(1, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1752, 1)), $mul.ref(2, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1776, 1)), $mul.ref(0, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1776, 1)), $mul.ref(1, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1776, 1)), $mul.ref(2, 8)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_template, $mul.ref(0, 1808)), $mul.ref(1800, 1)), $0.ref);
    $M.0 := $store.ref($M.0, stk1160_video_qops, queue_setup);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_video_qops, $mul.ref(0, 80)), $mul.ref(8, 1)), vb2_ops_wait_prepare);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_video_qops, $mul.ref(0, 80)), $mul.ref(16, 1)), vb2_ops_wait_finish);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_video_qops, $mul.ref(0, 80)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_video_qops, $mul.ref(0, 80)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_video_qops, $mul.ref(0, 80)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_video_qops, $mul.ref(0, 80)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_video_qops, $mul.ref(0, 80)), $mul.ref(56, 1)), start_streaming);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_video_qops, $mul.ref(0, 80)), $mul.ref(64, 1)), stop_streaming);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk1160_video_qops, $mul.ref(0, 80)), $mul.ref(72, 1)), buffer_queue);
    $M.0 := $store.i16($M.0, stk1160_id_table, 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(2, 1)), 1505);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 1032);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(stk1160_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.72 := $store.ref($M.72, stk1160_usb_driver, .str.16);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), stk1160_probe);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), stk1160_disconnect);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), stk1160_id_table);
    $M.72 := $store.i32($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.72 := $store.i32($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.72 := $store.i32($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.72 := $store.i32($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.72 := $store.i64($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.72 := $store.i32($M.72, $add.ref($add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(stk1160_usb_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 0);
    $M.73 := $store.i16($M.73, saa7113_addrs, 37);
    $M.73 := $store.i16($M.73, $add.ref($add.ref(saa7113_addrs, $mul.ref(0, 4)), $mul.ref(1, 2)), $sub.i16(0, 2));
    $M.1 := 0;
    call {:si_unique_call 1012} {:cexpr "input"} boogie_si_record_i32(0);
    $M.10 := 0;
    call {:si_unique_call 1013} {:cexpr "vidioc_debug"} boogie_si_record_i32(0);
    $M.0 := $store.i8($M.0, .str.16, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(2, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.75 := $store.i8($M.75, .str.18, 115);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(.str.18, $mul.ref(0, 14)), $mul.ref(1, 1)), 116);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(.str.18, $mul.ref(0, 14)), $mul.ref(2, 1)), 107);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(.str.18, $mul.ref(0, 14)), $mul.ref(3, 1)), 49);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(.str.18, $mul.ref(0, 14)), $mul.ref(4, 1)), 49);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(.str.18, $mul.ref(0, 14)), $mul.ref(5, 1)), 54);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(.str.18, $mul.ref(0, 14)), $mul.ref(6, 1)), 48);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(.str.18, $mul.ref(0, 14)), $mul.ref(7, 1)), 45);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(.str.18, $mul.ref(0, 14)), $mul.ref(8, 1)), 109);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(.str.18, $mul.ref(0, 14)), $mul.ref(9, 1)), 105);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(.str.18, $mul.ref(0, 14)), $mul.ref(10, 1)), 120);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(.str.18, $mul.ref(0, 14)), $mul.ref(11, 1)), 101);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(.str.18, $mul.ref(0, 14)), $mul.ref(12, 1)), 114);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(.str.18, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.76 := $store.i8($M.76, .str.19, 115);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(1, 1)), 116);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(2, 1)), 107);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(3, 1)), 49);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(4, 1)), 49);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(5, 1)), 54);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(6, 1)), 48);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(7, 1)), 32);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(8, 1)), 97);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(9, 1)), 99);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(10, 1)), 57);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(11, 1)), 55);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(12, 1)), 32);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(13, 1)), 99);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(14, 1)), 111);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(15, 1)), 100);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(16, 1)), 101);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(17, 1)), 99);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(18, 1)), 32);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(19, 1)), 109);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(20, 1)), 105);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(21, 1)), 120);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(22, 1)), 101);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(23, 1)), 114);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(25, 1)), 99);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(26, 1)), 111);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(27, 1)), 110);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(28, 1)), 116);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(29, 1)), 114);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(30, 1)), 111);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(31, 1)), 108);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.19, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, .str.30, 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 4)), $mul.ref(1, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 4)), $mul.ref(2, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.31, 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 3)), $mul.ref(1, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, .str.32, 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 4)), $mul.ref(1, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 4)), $mul.ref(2, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.33, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 8)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 8)), $mul.ref(2, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 8)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 8)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 8)), $mul.ref(5, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 8)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.35, 0);
    $M.77 := $store.i8($M.77, .str.54, 83);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.54, $mul.ref(0, 8)), $mul.ref(1, 1)), 45);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.54, $mul.ref(0, 8)), $mul.ref(2, 1)), 86);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.54, $mul.ref(0, 8)), $mul.ref(3, 1)), 105);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.54, $mul.ref(0, 8)), $mul.ref(4, 1)), 100);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.54, $mul.ref(0, 8)), $mul.ref(5, 1)), 101);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.54, $mul.ref(0, 8)), $mul.ref(6, 1)), 111);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.54, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.78 := $store.i8($M.78, .str.55, 67);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(1, 1)), 111);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(2, 1)), 109);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(3, 1)), 112);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(4, 1)), 111);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(5, 1)), 115);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(6, 1)), 105);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(7, 1)), 116);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(8, 1)), 101);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(9, 1)), 37);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(10, 1)), 100);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.79 := $store.i8($M.79, .str.53, 117);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.53, $mul.ref(0, 10)), $mul.ref(1, 1)), 115);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.53, $mul.ref(0, 10)), $mul.ref(2, 1)), 98);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.53, $mul.ref(0, 10)), $mul.ref(3, 1)), 45);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.53, $mul.ref(0, 10)), $mul.ref(4, 1)), 37);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.53, $mul.ref(0, 10)), $mul.ref(5, 1)), 115);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.53, $mul.ref(0, 10)), $mul.ref(6, 1)), 45);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.53, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.53, $mul.ref(0, 10)), $mul.ref(8, 1)), 115);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.53, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.41, 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(1, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(7, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(8, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(9, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(10, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(11, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(13, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(14, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(15, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(16, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(17, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(18, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(19, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(20, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(22, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(23, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(24, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(25, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    call {:si_unique_call 1014} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 413080);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.16, $M.18, $CurrAddr, $M.3, $M.20;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(start_streaming, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1015} $i2 := start_streaming($p1, arg1);
    $r := $i2;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 414112);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 415144);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 416176);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 417208);

procedure devirtbounce.4(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.18, $M.3, $M.20, $M.2, $CurrAddr;



implementation devirtbounce.4(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(stk1160_isoc_irq, $p0);
    assume {:branchcond $i16} true;
    goto $bb21, $bb20;

  $bb20:
    assume !($i16 == 1);
    $i15 := $eq.ref(stk1160_reset_ac97, $p0);
    assume true;
    goto $bb9, $bb19;

  $bb19:
    assume !($i15 == 1);
    $i14 := $eq.ref(video_device_release_empty, $p0);
    assume true;
    goto $bb8, $bb18;

  $bb18:
    assume !($i14 == 1);
    $i13 := $eq.ref(buffer_queue, $p0);
    assume true;
    goto $bb7, $bb17;

  $bb17:
    assume !($i13 == 1);
    $i12 := $eq.ref(vb2_ops_wait_finish, $p0);
    assume true;
    goto $bb6, $bb16;

  $bb16:
    assume !($i12 == 1);
    $i11 := $eq.ref(vb2_ops_wait_prepare, $p0);
    assume true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i11 == 1);
    $i10 := $eq.ref(stk1160_isoc_irq, $p0);
    assume true;
    goto $bb15, $bb13;

  $bb13:
    assume !($i10 == 1);
    $i9 := $eq.ref(stk1160_release, $p0);
    assume true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i9 == 1);
    $i8 := $eq.ref(stk1160_disconnect, $p0);
    assume true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i8 == 1);
    assume false;
    return;

  $bb2:
    assume $i8 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1016} stk1160_disconnect($p1);
    return;

  $bb3:
    assume $i9 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1017} stk1160_release($p2);
    return;

  $bb15:
    assume $i10 == 1;
    goto $bb10;

  $bb10:
    call {:si_unique_call 1024} stk1160_isoc_irq(arg);
    return;

  $bb5:
    assume $i11 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1019} vb2_ops_wait_prepare($p3);
    return;

  $bb6:
    assume $i12 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1020} vb2_ops_wait_finish($p4);
    return;

  $bb7:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1021} buffer_queue($p5);
    return;

  $bb8:
    assume $i14 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1022} video_device_release_empty($p6);
    return;

  $bb9:
    assume $i15 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1023} stk1160_reset_ac97($p7);
    return;

  $bb21:
    assume $i16 == 1;
    goto $bb10;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 418240);

procedure devirtbounce.5(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.18, $M.20, $CurrAddr, $M.3, $M.2;



implementation devirtbounce.5(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(stk1160_isoc_irq, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1025} stk1160_isoc_irq(arg);
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 419272);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.3, $M.11, $M.12, $M.13, $M.14, $M.2, $M.16, $M.18, $M.20;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i24 := $eq.ref(v4l2_event_unsubscribe, $p0);
    assume {:branchcond $i24} true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i24 == 1);
    $i23 := $eq.ref(v4l2_ctrl_subscribe_event, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i23 == 1);
    $i22 := $eq.ref(v4l2_ctrl_log_status, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i22 == 1);
    $i21 := $eq.ref(vb2_fop_mmap, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i21 == 1);
    $i20 := $eq.ref(vb2_fop_poll, $p0);
    assume true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i20 == 1);
    $i19 := $eq.ref(stk1160_probe, $p0);
    assume true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume false;
    return;

  $bb2:
    assume $i19 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1026} $i3 := stk1160_probe($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i20 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1027} $i6 := vb2_fop_poll($p4, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i21 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1028} $i9 := vb2_fop_mmap($p7, $p8);
    $r := $i9;
    return;

  $bb5:
    assume $i22 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1029} $i12 := v4l2_ctrl_log_status($p10, $p11);
    $r := $i12;
    return;

  $bb6:
    assume $i23 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1030} $i15 := v4l2_ctrl_subscribe_event($p13, $p14);
    $r := $i15;
    return;

  $bb7:
    assume $i24 == 1;
    $p16 := $bitcast.ref.ref(arg);
    $p17 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1031} $i18 := v4l2_event_unsubscribe($p16, $p17);
    $r := $i18;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.40, $M.41, $M.42, $M.43, $M.44, $M.39, $M.35, $M.36, $M.37, $M.38, $M.50, $M.51, $M.3, $M.2, $M.48, $M.49, $M.16, $M.18, $M.17, $M.19, $M.21, $M.0, $M.15, $M.72, $M.73, $M.1, $M.10, $M.75, $M.76, $M.77, $M.78, $M.79, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1032} __SMACK_static_init();
    call {:si_unique_call 1033} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.0, $M.32, $M.34, $M.22, $M.33, $M.40, $M.41, $M.42, $M.43, $M.44, $M.39, $M.35, $M.36, $M.37, $M.38, $M.50, $M.51, $M.3, $M.2, $M.48, $M.49, $M.16, $M.18, $M.17, $M.19, $M.21, $M.15, $M.72, $M.73, $M.1, $M.10, $M.75, $M.76, $M.77, $M.78, $M.79, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.45, $M.46, $M.47, $M.11, $M.12, $M.13, $M.14, $M.20;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation stk1160_probe_loop_$bb46(in_$i127: i64, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$i134: i64, in_$i135: i1, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$i142: i64, in_$i143: i1, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p152: ref, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$i157: i64, in_$i158: i1, in_$p129: ref, in_vslice_dummy_var_32: i32) returns (out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$i134: i64, out_$i135: i1, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$i142: i64, out_$i143: i1, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p152: ref, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$i157: i64, out_$i158: i1, out_$p129: ref, out_vslice_dummy_var_32: i32)
{

  entry:
    out_$p130, out_$p131, out_$p132, out_$p133, out_$i134, out_$i135, out_$p136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$i142, out_$i143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p152, out_$p153, out_$p154, out_$p155, out_$p156, out_$i157, out_$i158, out_$p129, out_vslice_dummy_var_32 := in_$p130, in_$p131, in_$p132, in_$p133, in_$i134, in_$i135, in_$p136, in_$p137, in_$p138, in_$p139, in_$p140, in_$p141, in_$i142, in_$i143, in_$p144, in_$p145, in_$p146, in_$p147, in_$p148, in_$p149, in_$p152, in_$p153, in_$p154, in_$p155, in_$p156, in_$i157, in_$i158, in_$p129, in_vslice_dummy_var_32;
    goto $bb46, exit;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_196;

  $bb54:
    assume out_$i158 == 1;
    assume {:verifier.code 0} true;
    out_$p129 := out_$p155;
    goto $bb54_dummy;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    out_$i158 := $ne.i64(out_$i157, in_$i127);
    goto corral_source_split_229;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    out_$i157 := $p2i.ref.i64(out_$p156);
    goto corral_source_split_228;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(out_$p154, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_227;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref(out_$p154, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_226;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    out_$p154 := $bitcast.ref.ref(out_$p153);
    goto corral_source_split_225;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    out_$p153 := $load.ref($M.0, out_$p152);
    goto corral_source_split_224;

  $bb53:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref($add.ref(out_$p129, $mul.ref(0, 296)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_223;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    out_$p149 := $load.ref($M.0, out_$p148);
    call {:si_unique_call 43} out_vslice_dummy_var_32 := devirtbounce(out_$p149, out_$p129, 0);
    goto corral_source_split_221;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(out_$p147, $mul.ref(0, 240)), $mul.ref(56, 1));
    goto corral_source_split_220;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    out_$p147 := $load.ref($M.0, out_$p146);
    goto corral_source_split_219;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(out_$p145, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_218;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    out_$p145 := $load.ref($M.0, out_$p144);
    goto corral_source_split_217;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(out_$p129, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_216;

  $bb51:
    assume out_$i143 == 1;
    goto corral_source_split_215;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    out_$i143 := $ne.i64(out_$i142, 0);
    goto corral_source_split_213;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    out_$i142 := $p2i.ref.i64(out_$p141);
    goto corral_source_split_212;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    out_$p141 := $load.ref($M.0, out_$p140);
    goto corral_source_split_211;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(out_$p139, $mul.ref(0, 240)), $mul.ref(56, 1));
    goto corral_source_split_210;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    out_$p139 := $load.ref($M.0, out_$p138);
    goto corral_source_split_209;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(out_$p137, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_208;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    out_$p137 := $load.ref($M.0, out_$p136);
    goto corral_source_split_207;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(out_$p129, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_206;

  $bb48:
    assume out_$i135 == 1;
    goto corral_source_split_205;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    out_$i135 := $ne.i64(out_$i134, 0);
    goto corral_source_split_203;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    out_$i134 := $p2i.ref.i64(out_$p133);
    goto corral_source_split_202;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    out_$p133 := $load.ref($M.0, out_$p132);
    goto corral_source_split_201;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(out_$p131, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_200;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    out_$p131 := $load.ref($M.0, out_$p130);
    goto corral_source_split_199;

  $bb47:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(out_$p129, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb49:
    assume {:verifier.code 0} true;
    assume !(out_$i135 == 1);
    goto $bb50;

  $bb52:
    assume {:verifier.code 0} true;
    assume !(out_$i143 == 1);
    goto $bb50;

  $bb54_dummy:
    call {:si_unique_call 1} out_$p130, out_$p131, out_$p132, out_$p133, out_$i134, out_$i135, out_$p136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$i142, out_$i143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p152, out_$p153, out_$p154, out_$p155, out_$p156, out_$i157, out_$i158, out_$p129, out_vslice_dummy_var_32 := stk1160_probe_loop_$bb46(in_$i127, out_$p130, out_$p131, out_$p132, out_$p133, out_$i134, out_$i135, out_$p136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$i142, out_$i143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p152, out_$p153, out_$p154, out_$p155, out_$p156, out_$i157, out_$i158, out_$p129, out_vslice_dummy_var_32);
    return;

  exit:
    return;
}



procedure stk1160_probe_loop_$bb46(in_$i127: i64, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$i134: i64, in_$i135: i1, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$i142: i64, in_$i143: i1, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p152: ref, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$i157: i64, in_$i158: i1, in_$p129: ref, in_vslice_dummy_var_32: i32) returns (out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$i134: i64, out_$i135: i1, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$i142: i64, out_$i143: i1, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p152: ref, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$i157: i64, out_$i158: i1, out_$p129: ref, out_vslice_dummy_var_32: i32);
  modifies $M.0, $M.2, $M.16, $M.18, $CurrAddr, $M.3, $M.20;



implementation stk1160_probe_loop_$bb32(in_$i85: i64, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$i92: i64, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i64, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$i115: i64, in_$i116: i1, in_$p87: ref, in_vslice_dummy_var_31: i32) returns (out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$i92: i64, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i64, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$i115: i64, out_$i116: i1, out_$p87: ref, out_vslice_dummy_var_31: i32)
{

  entry:
    out_$p88, out_$p89, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p87, out_vslice_dummy_var_31 := in_$p88, in_$p89, in_$p90, in_$p91, in_$i92, in_$i93, in_$p94, in_$p95, in_$p96, in_$p97, in_$p98, in_$p99, in_$i100, in_$i101, in_$p102, in_$p103, in_$p104, in_$p105, in_$p106, in_$p107, in_$p110, in_$p111, in_$p112, in_$p113, in_$p114, in_$i115, in_$i116, in_$p87, in_vslice_dummy_var_31;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_147;

  $bb40:
    assume out_$i116 == 1;
    assume {:verifier.code 0} true;
    out_$p87 := out_$p113;
    goto $bb40_dummy;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    out_$i116 := $ne.i64(out_$i115, in_$i85);
    goto corral_source_split_180;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    out_$i115 := $p2i.ref.i64(out_$p114);
    goto corral_source_split_179;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(out_$p112, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_178;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref(out_$p112, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_177;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    out_$p112 := $bitcast.ref.ref(out_$p111);
    goto corral_source_split_176;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    out_$p111 := $load.ref($M.0, out_$p110);
    goto corral_source_split_175;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref($add.ref(out_$p87, $mul.ref(0, 296)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_174;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    out_$p107 := $load.ref($M.0, out_$p106);
    call {:si_unique_call 42} out_vslice_dummy_var_31 := devirtbounce(out_$p107, out_$p87, 0);
    goto corral_source_split_172;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p105, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_171;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_170;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p103, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_169;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    out_$p103 := $load.ref($M.0, out_$p102);
    goto corral_source_split_168;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(out_$p87, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_167;

  $bb37:
    assume out_$i101 == 1;
    goto corral_source_split_166;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.i64(out_$i100, 0);
    goto corral_source_split_164;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    out_$i100 := $p2i.ref.i64(out_$p99);
    goto corral_source_split_163;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.0, out_$p98);
    goto corral_source_split_162;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(out_$p97, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_161;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.0, out_$p96);
    goto corral_source_split_160;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p95, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_159;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_158;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p87, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_157;

  $bb34:
    assume out_$i93 == 1;
    goto corral_source_split_156;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i64(out_$i92, 0);
    goto corral_source_split_154;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    out_$i92 := $p2i.ref.i64(out_$p91);
    goto corral_source_split_153;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.0, out_$p90);
    goto corral_source_split_152;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p89, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_151;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    out_$p89 := $load.ref($M.0, out_$p88);
    goto corral_source_split_150;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p87, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_149;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i93 == 1);
    goto $bb36;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(out_$i101 == 1);
    goto $bb36;

  $bb40_dummy:
    call {:si_unique_call 1} out_$p88, out_$p89, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p87, out_vslice_dummy_var_31 := stk1160_probe_loop_$bb32(in_$i85, out_$p88, out_$p89, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p87, out_vslice_dummy_var_31);
    return;

  exit:
    return;
}



procedure stk1160_probe_loop_$bb32(in_$i85: i64, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$i92: i64, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i64, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$i115: i64, in_$i116: i1, in_$p87: ref, in_vslice_dummy_var_31: i32) returns (out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$i92: i64, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i64, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$i115: i64, out_$i116: i1, out_$p87: ref, out_vslice_dummy_var_31: i32);
  modifies $M.0, $M.2, $M.16, $M.18, $CurrAddr, $M.3, $M.20;



implementation stk1160_clear_queue_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p16: ref, in_$i17: i32, in_$i19: i32, in_$i20: i1, in_vslice_dummy_var_38: i32) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p16: ref, out_$i17: i32, out_$i19: i32, out_$i20: i1, out_vslice_dummy_var_38: i32)
{

  entry:
    out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p16, out_$i17, out_$i19, out_$i20, out_vslice_dummy_var_38 := in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p16, in_$i17, in_$i19, in_$i20, in_vslice_dummy_var_38;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i20 == 1;
    goto $bb6_dummy;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i19, 0);
    goto corral_source_split_316;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} out_$i19 := list_empty(in_$p4);
    call {:si_unique_call 77} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_315;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} out_vslice_dummy_var_38 := printk.ref.ref.i32(.str.2, out_$p11, out_$i17);
    goto corral_source_split_314;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, out_$p16);
    goto corral_source_split_313;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref($add.ref(out_$p10, $mul.ref($sub.ref(0, 840), 880)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_312;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} vb2_buffer_done(out_$p13, 5);
    goto corral_source_split_311;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p10, $mul.ref($sub.ref(0, 840), 880)), $mul.ref(0, 1));
    goto corral_source_split_310;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} list_del(out_$p12);
    goto corral_source_split_309;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p10, $mul.ref($sub.ref(0, 840), 880)), $mul.ref(840, 1));
    goto corral_source_split_308;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref(out_$p10, $mul.ref($sub.ref(0, 840), 880));
    goto corral_source_split_307;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    out_$p10 := $bitcast.ref.ref(out_$p9);
    goto corral_source_split_306;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_305;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(2440, 1)), $mul.ref(0, 1));
    goto corral_source_split_304;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p16, out_$i17, out_$i19, out_$i20, out_vslice_dummy_var_38 := stk1160_clear_queue_loop_$bb4(in_$p0, in_$p4, out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p16, out_$i17, out_$i19, out_$i20, out_vslice_dummy_var_38);
    return;

  exit:
    return;
}



procedure stk1160_clear_queue_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p16: ref, in_$i17: i32, in_$i19: i32, in_$i20: i1, in_vslice_dummy_var_38: i32) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p16: ref, out_$i17: i32, out_$i19: i32, out_$i20: i1, out_vslice_dummy_var_38: i32);



implementation stk1160_cancel_isoc_loop_$bb8(in_$p0: ref, in_$i3: i32, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$i7: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$i7: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i7 := in_$p9, in_$p10, in_$i11, in_$p12, in_$p13, in_$i14, in_$i15, in_$i7;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_402;

  $bb10:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i14;
    goto $bb10_dummy;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i14, in_$i3);
    goto corral_source_split_411;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i32(out_$i7, 1);
    call {:si_unique_call 110} {:cexpr "i"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_410;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} usb_kill_urb(out_$p13);
    goto corral_source_split_409;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_408;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p10, $mul.ref(out_$i11, 8));
    goto corral_source_split_407;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i7);
    goto corral_source_split_406;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_405;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(8, 1));
    goto corral_source_split_404;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i7 := stk1160_cancel_isoc_loop_$bb8(in_$p0, in_$i3, out_$p9, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i7);
    return;

  exit:
    return;
}



procedure stk1160_cancel_isoc_loop_$bb8(in_$p0: ref, in_$i3: i32, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$i7: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$i7: i32);



implementation stk1160_free_isoc_loop_$bb4(in_$p0: ref, in_$i3: i32, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i6: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i6: i32)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p16, out_$p17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p29, out_$p30, out_$i31, out_$p32, out_$p33, out_$p34, out_$i35, out_$p37, out_$p38, out_$i39, out_$p40, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i6 := in_$p8, in_$p9, in_$i10, in_$p11, in_$p12, in_$i13, in_$i14, in_$p16, in_$p17, in_$i18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$p29, in_$p30, in_$i31, in_$p32, in_$p33, in_$p34, in_$i35, in_$p37, in_$p38, in_$i39, in_$p40, in_$p42, in_$p43, in_$i44, in_$p45, in_$i46, in_$i47, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_425;

  $bb12:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i46;
    goto $bb12_dummy;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i46, in_$i3);
    goto corral_source_split_472;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i6, 1);
    call {:si_unique_call 116} {:cexpr "i"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_471;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p45, $0.ref);
    goto corral_source_split_470;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p43, $mul.ref(out_$i44, 8));
    goto corral_source_split_469;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i6);
    goto corral_source_split_468;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_467;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(16, 1));
    goto corral_source_split_466;

  $bb7:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p40, $0.ref);
    goto corral_source_split_464;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(out_$p38, $mul.ref(out_$i39, 8));
    goto corral_source_split_463;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i6);
    goto corral_source_split_462;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_461;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(8, 1));
    goto corral_source_split_460;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} ldv_usb_free_urb_13(out_$p12);
    goto corral_source_split_459;

  $bb9:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} usb_free_coherent(out_$p24, out_$i27, out_$p33, out_$i35);
    goto corral_source_split_457;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i64($M.0, out_$p34);
    goto corral_source_split_456;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_455;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_454;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(out_$p30, $mul.ref(out_$i31, 8));
    goto corral_source_split_453;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i6);
    goto corral_source_split_452;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_451;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(16, 1));
    goto corral_source_split_450;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i32.i64(out_$i26);
    goto corral_source_split_449;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    goto corral_source_split_448;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p12, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_447;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_446;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(2424, 1));
    goto corral_source_split_445;

  $bb8:
    assume out_$i22 == 1;
    goto corral_source_split_444;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_442;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_441;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_440;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(out_$p17, $mul.ref(out_$i18, 8));
    goto corral_source_split_439;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i6);
    goto corral_source_split_438;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_437;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(16, 1));
    goto corral_source_split_436;

  $bb6:
    assume out_$i14 == 1;
    goto corral_source_split_435;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i64(out_$i13, 0);
    goto corral_source_split_433;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(out_$p12);
    goto corral_source_split_432;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_431;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref(out_$p9, $mul.ref(out_$i10, 8));
    goto corral_source_split_430;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i6);
    goto corral_source_split_429;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_428;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(8, 1));
    goto corral_source_split_427;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p16, out_$p17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p29, out_$p30, out_$i31, out_$p32, out_$p33, out_$p34, out_$i35, out_$p37, out_$p38, out_$i39, out_$p40, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i6 := stk1160_free_isoc_loop_$bb4(in_$p0, in_$i3, out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p16, out_$p17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p29, out_$p30, out_$i31, out_$p32, out_$p33, out_$p34, out_$i35, out_$p37, out_$p38, out_$i39, out_$p40, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i6);
    return;

  exit:
    return;
}



procedure stk1160_free_isoc_loop_$bb4(in_$p0: ref, in_$i3: i32, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i6: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i6: i32);
  modifies $M.0, $M.2;



implementation stk1160_scan_usb_loop_$bb9(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p17: ref, in_$i19: i64, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p39: ref, in_$p40: ref, in_$i41: i16, in_$i42: i32, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i64: i64, in_$p65: ref, in_$i62: i8, in_$i63: i8, in_$i66: i8, in_$i67: i8, in_$i68: i8, in_$i69: i8, in_$i70: i32, in_$p71: ref, in_$p74: ref, in_$i75: i8, in_$i76: i32, in_$i77: i1, in_$i28: i8, in_$i29: i8, in_$i30: i32, in_$i78: i8, in_$i79: i8, in_$i16: i32) returns (out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p39: ref, out_$p40: ref, out_$i41: i16, out_$i42: i32, out_$i43: i32, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i64: i64, out_$p65: ref, out_$i62: i8, out_$i63: i8, out_$i66: i8, out_$i67: i8, out_$i68: i8, out_$i69: i8, out_$i70: i32, out_$p71: ref, out_$p74: ref, out_$i75: i8, out_$i76: i32, out_$i77: i1, out_$i28: i8, out_$i29: i8, out_$i30: i32, out_$i78: i8, out_$i79: i8)
{

  entry:
    out_$p31, out_$p32, out_$i33, out_$p35, out_$p36, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i64, out_$p65, out_$i62, out_$i63, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p74, out_$i75, out_$i76, out_$i77, out_$i28, out_$i29, out_$i30, out_$i78, out_$i79 := in_$p31, in_$p32, in_$i33, in_$p35, in_$p36, in_$i37, in_$p39, in_$p40, in_$i41, in_$i42, in_$i43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i64, in_$p65, in_$i62, in_$i63, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$p71, in_$p74, in_$i75, in_$i76, in_$i77, in_$i28, in_$i29, in_$i30, in_$i78, in_$i79;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_553;

  $bb30:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$i28, out_$i29, out_$i30 := out_$i69, out_$i68, out_$i70;
    goto $bb30_dummy;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    out_$i78, out_$i79 := out_$i68, out_$i69;
    assume true;
    goto $bb30;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    out_$i77 := $sgt.i32(out_$i76, out_$i70);
    goto corral_source_split_606;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i8.i32(out_$i75);
    goto corral_source_split_605;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i8($M.0, out_$p74);
    goto corral_source_split_604;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref(out_$p71, $mul.ref(in_$i19, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_603;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    goto corral_source_split_602;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.0, in_$p17);
    goto corral_source_split_601;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i30, 1);
    call {:si_unique_call 137} {:cexpr "e"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_600;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_599;

  $bb15:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i68, out_$i69 := out_$i29, out_$i28;
    goto $bb29;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    out_$i68, out_$i69 := out_$i66, out_$i67;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_597;

  $bb17:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    out_$i66, out_$i67 := out_$i29, out_$i28;
    goto $bb28;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    out_$i66, out_$i67 := out_$i62, out_$i63;
    goto $bb28;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_595;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i62, out_$i63 := out_$i29, out_$i28;
    goto $bb26;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    out_$i62, out_$i63 := 1, out_$i28;
    goto $bb26;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    out_$i62, out_$i63 := out_$i29, 1;
    goto $bb26;

  $bb24:
    assume out_$i61 == 1;
    goto corral_source_split_593;

  $bb19:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i58, 129);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i59 := $slt.i32(out_$i58, 130);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i8.i32(out_$i57);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i8($M.0, out_$p56);
    goto corral_source_split_586;

  $bb16:
    assume out_$i55 == 1;
    out_$p56 := $add.ref($add.ref($add.ref(out_$p36, $mul.ref(out_$i37, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_585;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i32(out_$i54, 0);
    goto corral_source_split_583;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} out_$i54 := usb_endpoint_dir_in(out_$p39);
    call {:si_unique_call 136} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_582;

  $bb14:
    assume out_$i53 == 1;
    goto corral_source_split_581;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i52, 0);
    goto corral_source_split_579;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} out_$i52 := usb_endpoint_xfer_isoc(out_$p39);
    call {:si_unique_call 134} {:cexpr "tmp"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_578;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_577;

  $bb12:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    out_$i51 := out_$i43;
    goto $bb13;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i50;
    goto $bb13;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    out_$i50 := $mul.i32(out_$i49, out_$i43);
    call {:si_unique_call 132} {:cexpr "size"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_575;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i48, 1);
    goto corral_source_split_574;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    out_$i48 := $and.i32(out_$i47, 3);
    goto corral_source_split_573;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    out_$i47 := $ashr.i32(out_$i42, 11);
    goto corral_source_split_572;

  $bb11:
    assume out_$i46 == 1;
    goto corral_source_split_571;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 3);
    goto corral_source_split_569;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_568;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p1, $mul.ref(0, 1992)), $mul.ref(28, 1));
    goto corral_source_split_567;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    out_$i43 := $and.i32(out_$i42, 2047);
    call {:si_unique_call 131} {:cexpr "size"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_566;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i16.i32(out_$i41);
    call {:si_unique_call 130} {:cexpr "sizedescr"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_565;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i16($M.0, out_$p40);
    goto corral_source_split_564;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p36, $mul.ref(out_$i37, 64)), $mul.ref(0, 1));
    out_$p40 := $add.ref($add.ref($add.ref(out_$p36, $mul.ref(out_$i37, 64)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_563;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    goto corral_source_split_562;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i30);
    goto corral_source_split_561;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_560;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p32, $mul.ref(out_$i33, 40)), $mul.ref(24, 1));
    goto corral_source_split_559;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    goto corral_source_split_558;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(in_$i16);
    goto corral_source_split_557;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_556;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_555;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p65, out_$i51);
    goto corral_source_split_591;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref(in_$p2, $mul.ref(out_$i64, 4));
    goto corral_source_split_590;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    out_$i64 := $sext.i32.i64(in_$i16);
    goto corral_source_split_589;

  $bb21:
    assume out_$i60 == 1;
    goto corral_source_split_588;

  $bb20:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i58, 130);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume !(out_$i60 == 1);
    goto $bb23;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i61 == 1);
    goto $bb23;

  $bb30_dummy:
    call {:si_unique_call 1} out_$p31, out_$p32, out_$i33, out_$p35, out_$p36, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i64, out_$p65, out_$i62, out_$i63, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p74, out_$i75, out_$i76, out_$i77, out_$i28, out_$i29, out_$i30, out_$i78, out_$i79 := stk1160_scan_usb_loop_$bb9(in_$p0, in_$p1, in_$p2, in_$p17, in_$i19, out_$p31, out_$p32, out_$i33, out_$p35, out_$p36, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i64, out_$p65, out_$i62, out_$i63, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p74, out_$i75, out_$i76, out_$i77, out_$i28, out_$i29, out_$i30, out_$i78, out_$i79, in_$i16);
    return;

  exit:
    return;
}



procedure stk1160_scan_usb_loop_$bb9(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p17: ref, in_$i19: i64, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p39: ref, in_$p40: ref, in_$i41: i16, in_$i42: i32, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i64: i64, in_$p65: ref, in_$i62: i8, in_$i63: i8, in_$i66: i8, in_$i67: i8, in_$i68: i8, in_$i69: i8, in_$i70: i32, in_$p71: ref, in_$p74: ref, in_$i75: i8, in_$i76: i32, in_$i77: i1, in_$i28: i8, in_$i29: i8, in_$i30: i32, in_$i78: i8, in_$i79: i8, in_$i16: i32) returns (out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p39: ref, out_$p40: ref, out_$i41: i16, out_$i42: i32, out_$i43: i32, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i64: i64, out_$p65: ref, out_$i62: i8, out_$i63: i8, out_$i66: i8, out_$i67: i8, out_$i68: i8, out_$i69: i8, out_$i70: i32, out_$p71: ref, out_$p74: ref, out_$i75: i8, out_$i76: i32, out_$i77: i1, out_$i28: i8, out_$i29: i8, out_$i30: i32, out_$i78: i8, out_$i79: i8);
  modifies $M.0;



implementation stk1160_scan_usb_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p9: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p22: ref, in_$i23: i8, in_$i24: i32, in_$i25: i1, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p39: ref, in_$p40: ref, in_$i41: i16, in_$i42: i32, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i64: i64, in_$p65: ref, in_$i62: i8, in_$i63: i8, in_$i66: i8, in_$i67: i8, in_$i68: i8, in_$i69: i8, in_$i70: i32, in_$p71: ref, in_$p74: ref, in_$i75: i8, in_$i76: i32, in_$i77: i1, in_$i28: i8, in_$i29: i8, in_$i30: i32, in_$i78: i8, in_$i79: i8, in_$i26: i8, in_$i27: i8, in_$i80: i32, in_$i81: i32, in_$i82: i1, in_$i14: i8, in_$i15: i8, in_$i16: i32, in_$i83: i8, in_$i84: i8) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p22: ref, out_$i23: i8, out_$i24: i32, out_$i25: i1, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p39: ref, out_$p40: ref, out_$i41: i16, out_$i42: i32, out_$i43: i32, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i64: i64, out_$p65: ref, out_$i62: i8, out_$i63: i8, out_$i66: i8, out_$i67: i8, out_$i68: i8, out_$i69: i8, out_$i70: i32, out_$p71: ref, out_$p74: ref, out_$i75: i8, out_$i76: i32, out_$i77: i1, out_$i28: i8, out_$i29: i8, out_$i30: i32, out_$i78: i8, out_$i79: i8, out_$i26: i8, out_$i27: i8, out_$i80: i32, out_$i81: i32, out_$i82: i1, out_$i14: i8, out_$i15: i8, out_$i16: i32, out_$i83: i8, out_$i84: i8)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$p22, out_$i23, out_$i24, out_$i25, out_$p31, out_$p32, out_$i33, out_$p35, out_$p36, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i64, out_$p65, out_$i62, out_$i63, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p74, out_$i75, out_$i76, out_$i77, out_$i28, out_$i29, out_$i30, out_$i78, out_$i79, out_$i26, out_$i27, out_$i80, out_$i81, out_$i82, out_$i14, out_$i15, out_$i16, out_$i83, out_$i84 := in_$p17, in_$p18, in_$i19, in_$p22, in_$i23, in_$i24, in_$i25, in_$p31, in_$p32, in_$i33, in_$p35, in_$p36, in_$i37, in_$p39, in_$p40, in_$i41, in_$i42, in_$i43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i64, in_$p65, in_$i62, in_$i63, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$p71, in_$p74, in_$i75, in_$i76, in_$i77, in_$i28, in_$i29, in_$i30, in_$i78, in_$i79, in_$i26, in_$i27, in_$i80, in_$i81, in_$i82, in_$i14, in_$i15, in_$i16, in_$i83, in_$i84;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_540;

  $bb33:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    out_$i14, out_$i15, out_$i16 := out_$i27, out_$i26, out_$i80;
    goto $bb33_dummy;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84 := out_$i26, out_$i27;
    assume true;
    goto $bb33;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    out_$i82 := $ult.i32(out_$i80, out_$i81);
    goto corral_source_split_612;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i32($M.0, in_$p9);
    goto corral_source_split_611;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i80 := $add.i32(out_$i16, 1);
    call {:si_unique_call 138} {:cexpr "i"} boogie_si_record_i32(out_$i80);
    goto corral_source_split_610;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb8;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    out_$i26, out_$i27 := out_$i78, out_$i79;
    goto $bb8;

  $bb31:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_608;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    out_$i78, out_$i79 := out_$i68, out_$i69;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    out_$i77 := $sgt.i32(out_$i76, out_$i70);
    goto corral_source_split_606;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i8.i32(out_$i75);
    goto corral_source_split_605;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i8($M.0, out_$p74);
    goto corral_source_split_604;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref(out_$p71, $mul.ref(out_$i19, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_603;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    goto corral_source_split_602;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.0, out_$p17);
    goto corral_source_split_601;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i30, 1);
    call {:si_unique_call 137} {:cexpr "e"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_600;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_599;

  $bb15:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i68, out_$i69 := out_$i29, out_$i28;
    goto $bb29;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    out_$i68, out_$i69 := out_$i66, out_$i67;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_597;

  $bb17:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    out_$i66, out_$i67 := out_$i29, out_$i28;
    goto $bb28;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    out_$i66, out_$i67 := out_$i62, out_$i63;
    goto $bb28;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_595;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i62, out_$i63 := out_$i29, out_$i28;
    goto $bb26;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    out_$i62, out_$i63 := 1, out_$i28;
    goto $bb26;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    out_$i62, out_$i63 := out_$i29, 1;
    goto $bb26;

  $bb24:
    assume out_$i61 == 1;
    goto corral_source_split_593;

  $bb19:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i58, 129);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i59 := $slt.i32(out_$i58, 130);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i8.i32(out_$i57);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i8($M.0, out_$p56);
    goto corral_source_split_586;

  $bb16:
    assume out_$i55 == 1;
    out_$p56 := $add.ref($add.ref($add.ref(out_$p36, $mul.ref(out_$i37, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_585;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i32(out_$i54, 0);
    goto corral_source_split_583;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} out_$i54 := usb_endpoint_dir_in(out_$p39);
    call {:si_unique_call 136} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_582;

  $bb14:
    assume out_$i53 == 1;
    goto corral_source_split_581;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i52, 0);
    goto corral_source_split_579;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} out_$i52 := usb_endpoint_xfer_isoc(out_$p39);
    call {:si_unique_call 134} {:cexpr "tmp"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_578;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_577;

  $bb12:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    out_$i51 := out_$i43;
    goto $bb13;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i50;
    goto $bb13;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    out_$i50 := $mul.i32(out_$i49, out_$i43);
    call {:si_unique_call 132} {:cexpr "size"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_575;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i48, 1);
    goto corral_source_split_574;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    out_$i48 := $and.i32(out_$i47, 3);
    goto corral_source_split_573;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    out_$i47 := $ashr.i32(out_$i42, 11);
    goto corral_source_split_572;

  $bb11:
    assume out_$i46 == 1;
    goto corral_source_split_571;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 3);
    goto corral_source_split_569;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_568;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p1, $mul.ref(0, 1992)), $mul.ref(28, 1));
    goto corral_source_split_567;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    out_$i43 := $and.i32(out_$i42, 2047);
    call {:si_unique_call 131} {:cexpr "size"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_566;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i16.i32(out_$i41);
    call {:si_unique_call 130} {:cexpr "sizedescr"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_565;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i16($M.0, out_$p40);
    goto corral_source_split_564;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p36, $mul.ref(out_$i37, 64)), $mul.ref(0, 1));
    out_$p40 := $add.ref($add.ref($add.ref(out_$p36, $mul.ref(out_$i37, 64)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_563;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    goto corral_source_split_562;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i30);
    goto corral_source_split_561;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_560;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p32, $mul.ref(out_$i33, 40)), $mul.ref(24, 1));
    goto corral_source_split_559;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    goto corral_source_split_558;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i16);
    goto corral_source_split_557;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_556;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_555;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$p31, out_$p32, out_$i33, out_$p35, out_$p36, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i64, out_$p65, out_$i62, out_$i63, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p74, out_$i75, out_$i76, out_$i77, out_$i28, out_$i29, out_$i30, out_$i78, out_$i79 := stk1160_scan_usb_loop_$bb9(in_$p0, in_$p1, in_$p2, out_$p17, out_$i19, out_$p31, out_$p32, out_$i33, out_$p35, out_$p36, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i64, out_$p65, out_$i62, out_$i63, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p74, out_$i75, out_$i76, out_$i77, out_$i28, out_$i29, out_$i30, out_$i78, out_$i79, out_$i16);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_553;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    out_$i28, out_$i29, out_$i30 := out_$i14, out_$i15, 0;
    goto $bb9;

  $bb30:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$i28, out_$i29, out_$i30 := out_$i69, out_$i68, out_$i70;
    assume false;
    return;

  $bb6:
    assume out_$i25 == 1;
    goto corral_source_split_551;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    out_$i26, out_$i27 := out_$i15, out_$i14;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    out_$i25 := $sgt.i32(out_$i24, 0);
    goto corral_source_split_549;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i8.i32(out_$i23);
    goto corral_source_split_548;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i8($M.0, out_$p22);
    goto corral_source_split_547;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_546;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    goto corral_source_split_545;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i16);
    goto corral_source_split_544;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_543;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_542;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p65, out_$i51);
    goto corral_source_split_591;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref(in_$p2, $mul.ref(out_$i64, 4));
    goto corral_source_split_590;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    out_$i64 := $sext.i32.i64(out_$i16);
    goto corral_source_split_589;

  $bb21:
    assume out_$i60 == 1;
    goto corral_source_split_588;

  $bb20:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i58, 130);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume !(out_$i60 == 1);
    goto $bb23;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i61 == 1);
    goto $bb23;

  $bb33_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$p22, out_$i23, out_$i24, out_$i25, out_$p31, out_$p32, out_$i33, out_$p35, out_$p36, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i64, out_$p65, out_$i62, out_$i63, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p74, out_$i75, out_$i76, out_$i77, out_$i28, out_$i29, out_$i30, out_$i78, out_$i79, out_$i26, out_$i27, out_$i80, out_$i81, out_$i82, out_$i14, out_$i15, out_$i16, out_$i83, out_$i84 := stk1160_scan_usb_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$p9, out_$p17, out_$p18, out_$i19, out_$p22, out_$i23, out_$i24, out_$i25, out_$p31, out_$p32, out_$i33, out_$p35, out_$p36, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i64, out_$p65, out_$i62, out_$i63, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p74, out_$i75, out_$i76, out_$i77, out_$i28, out_$i29, out_$i30, out_$i78, out_$i79, out_$i26, out_$i27, out_$i80, out_$i81, out_$i82, out_$i14, out_$i15, out_$i16, out_$i83, out_$i84);
    return;

  exit:
    return;
}



procedure stk1160_scan_usb_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p9: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p22: ref, in_$i23: i8, in_$i24: i32, in_$i25: i1, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p39: ref, in_$p40: ref, in_$i41: i16, in_$i42: i32, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i64: i64, in_$p65: ref, in_$i62: i8, in_$i63: i8, in_$i66: i8, in_$i67: i8, in_$i68: i8, in_$i69: i8, in_$i70: i32, in_$p71: ref, in_$p74: ref, in_$i75: i8, in_$i76: i32, in_$i77: i1, in_$i28: i8, in_$i29: i8, in_$i30: i32, in_$i78: i8, in_$i79: i8, in_$i26: i8, in_$i27: i8, in_$i80: i32, in_$i81: i32, in_$i82: i1, in_$i14: i8, in_$i15: i8, in_$i16: i32, in_$i83: i8, in_$i84: i8) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p22: ref, out_$i23: i8, out_$i24: i32, out_$i25: i1, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p39: ref, out_$p40: ref, out_$i41: i16, out_$i42: i32, out_$i43: i32, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i64: i64, out_$p65: ref, out_$i62: i8, out_$i63: i8, out_$i66: i8, out_$i67: i8, out_$i68: i8, out_$i69: i8, out_$i70: i32, out_$p71: ref, out_$p74: ref, out_$i75: i8, out_$i76: i32, out_$i77: i1, out_$i28: i8, out_$i29: i8, out_$i30: i32, out_$i78: i8, out_$i79: i8, out_$i26: i8, out_$i27: i8, out_$i80: i32, out_$i81: i32, out_$i82: i1, out_$i14: i8, out_$i15: i8, out_$i16: i32, out_$i83: i8, out_$i84: i8);
  modifies $M.0;



implementation stk1160_reg_reset_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i68: i64, in_$p70: ref, in_$i71: i16, in_$i72: i32, in_$i73: i16, in_$i74: i64, in_$p76: ref, in_$i77: i16, in_$i78: i32, in_$i79: i16, in_$i81: i32, in_$i82: i64, in_$p84: ref, in_$i85: i16, in_$i86: i32, in_$i87: i1, in_$i67: i32, in_vslice_dummy_var_54: i32) returns (out_$i68: i64, out_$p70: ref, out_$i71: i16, out_$i72: i32, out_$i73: i16, out_$i74: i64, out_$p76: ref, out_$i77: i16, out_$i78: i32, out_$i79: i16, out_$i81: i32, out_$i82: i64, out_$p84: ref, out_$i85: i16, out_$i86: i32, out_$i87: i1, out_$i67: i32, out_vslice_dummy_var_54: i32)
{

  entry:
    out_$i68, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p76, out_$i77, out_$i78, out_$i79, out_$i81, out_$i82, out_$p84, out_$i85, out_$i86, out_$i87, out_$i67, out_vslice_dummy_var_54 := in_$i68, in_$p70, in_$i71, in_$i72, in_$i73, in_$i74, in_$p76, in_$i77, in_$i78, in_$i79, in_$i81, in_$i82, in_$p84, in_$i85, in_$i86, in_$i87, in_$i67, in_vslice_dummy_var_54;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_850;

  $bb6:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$i67 := out_$i81;
    goto $bb6_dummy;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i32(out_$i86, 65535);
    goto corral_source_split_868;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    out_$i86 := $zext.i16.i32(out_$i85);
    goto corral_source_split_867;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i16($M.4, out_$p84);
    goto corral_source_split_866;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 60)), $mul.ref(out_$i82, 4)), $mul.ref(0, 1));
    goto corral_source_split_865;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i32.i64(out_$i81);
    goto corral_source_split_864;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i32(out_$i67, 1);
    call {:si_unique_call 174} {:cexpr "i"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_863;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} out_vslice_dummy_var_54 := stk1160_write_reg(in_$p0, out_$i73, out_$i79);
    goto corral_source_split_862;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    out_$i79 := $trunc.i32.i16(out_$i78);
    goto corral_source_split_861;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i16.i32(out_$i77);
    goto corral_source_split_860;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i16($M.5, out_$p76);
    goto corral_source_split_859;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 60)), $mul.ref(out_$i74, 4)), $mul.ref(2, 1));
    goto corral_source_split_858;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    out_$i74 := $sext.i32.i64(out_$i67);
    goto corral_source_split_857;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    out_$i73 := $trunc.i32.i16(out_$i72);
    goto corral_source_split_856;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i16.i32(out_$i71);
    goto corral_source_split_855;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i16($M.4, out_$p70);
    goto corral_source_split_854;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 60)), $mul.ref(out_$i68, 4)), $mul.ref(0, 1));
    goto corral_source_split_853;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(out_$i67);
    goto corral_source_split_852;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i68, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p76, out_$i77, out_$i78, out_$i79, out_$i81, out_$i82, out_$p84, out_$i85, out_$i86, out_$i87, out_$i67, out_vslice_dummy_var_54 := stk1160_reg_reset_loop_$bb4(in_$p0, in_$p1, out_$i68, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p76, out_$i77, out_$i78, out_$i79, out_$i81, out_$i82, out_$p84, out_$i85, out_$i86, out_$i87, out_$i67, out_vslice_dummy_var_54);
    return;

  exit:
    return;
}



procedure stk1160_reg_reset_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i68: i64, in_$p70: ref, in_$i71: i16, in_$i72: i32, in_$i73: i16, in_$i74: i64, in_$p76: ref, in_$i77: i16, in_$i78: i32, in_$i79: i16, in_$i81: i32, in_$i82: i64, in_$p84: ref, in_$i85: i16, in_$i86: i32, in_$i87: i1, in_$i67: i32, in_vslice_dummy_var_54: i32) returns (out_$i68: i64, out_$p70: ref, out_$i71: i16, out_$i72: i32, out_$i73: i16, out_$i74: i64, out_$p76: ref, out_$i77: i16, out_$i78: i32, out_$i79: i16, out_$i81: i32, out_$i82: i64, out_$p84: ref, out_$i85: i16, out_$i86: i32, out_$i87: i1, out_$i67: i32, out_vslice_dummy_var_54: i32);



implementation stk1160_select_input_loop_$bb9(in_$i10: i32, in_$i24: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p26: ref, in_vslice_dummy_var_55: i32) returns (out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p26: ref, out_vslice_dummy_var_55: i32)
{

  entry:
    out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p26, out_vslice_dummy_var_55 := in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$p26, in_vslice_dummy_var_55;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_907;

  $bb17:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$p26 := out_$p52;
    goto $bb17_dummy;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, in_$i24);
    goto corral_source_split_940;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_939;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p51, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_938;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref(out_$p51, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_937;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_936;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_935;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($add.ref(out_$p26, $mul.ref(0, 296)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_934;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    call {:si_unique_call 176} out_vslice_dummy_var_55 := devirtbounce.1(out_$p46, out_$p26, in_$i10, 0, 0);
    goto corral_source_split_932;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p44, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_931;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_930;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p42, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_929;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_928;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p26, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_927;

  $bb14:
    assume out_$i40 == 1;
    goto corral_source_split_926;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i39, 0);
    goto corral_source_split_924;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_923;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_922;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p36, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_921;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_920;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p34, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_919;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_918;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p26, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_917;

  $bb11:
    assume out_$i32 == 1;
    goto corral_source_split_916;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, 0);
    goto corral_source_split_914;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_913;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_912;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p28, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_911;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_910;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_909;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb13;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i40 == 1);
    goto $bb13;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p26, out_vslice_dummy_var_55 := stk1160_select_input_loop_$bb9(in_$i10, in_$i24, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p26, out_vslice_dummy_var_55);
    return;

  exit:
    return;
}



procedure stk1160_select_input_loop_$bb9(in_$i10: i32, in_$i24: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p26: ref, in_vslice_dummy_var_55: i32) returns (out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p26: ref, out_vslice_dummy_var_55: i32);



implementation stk1160_video_register_loop_$bb4(in_$p0: ref, in_$i36: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$i69: i1, in_$p38: ref, in_vslice_dummy_var_61: i32) returns (out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$i69: i1, out_$p38: ref, out_vslice_dummy_var_61: i32)
{

  entry:
    out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p38, out_vslice_dummy_var_61 := in_$p39, in_$p40, in_$p41, in_$p42, in_$i43, in_$i44, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$i60, in_$p63, in_$p64, in_$p65, in_$p66, in_$p67, in_$i68, in_$i69, in_$p38, in_vslice_dummy_var_61;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1063;

  $bb12:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$p38 := out_$p66;
    goto $bb12_dummy;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i64(out_$i68, in_$i36);
    goto corral_source_split_1098;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    out_$i68 := $p2i.ref.i64(out_$p67);
    goto corral_source_split_1097;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p65, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_1096;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(out_$p65, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_1095;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    out_$p65 := $bitcast.ref.ref(out_$p64);
    goto corral_source_split_1094;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.0, out_$p63);
    goto corral_source_split_1093;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref($add.ref(out_$p38, $mul.ref(0, 296)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_1092;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i64($M.0, out_$p59);
    call {:si_unique_call 197} out_vslice_dummy_var_61 := devirtbounce.2(out_$p58, out_$p38, out_$i60);
    goto corral_source_split_1090;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3432, 1));
    goto corral_source_split_1089;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_1088;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p56, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_1087;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_1086;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p54, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1085;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_1084;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p38, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_1083;

  $bb9:
    assume out_$i52 == 1;
    goto corral_source_split_1082;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_1080;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_1079;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_1078;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p48, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_1077;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_1076;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p46, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1075;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_1074;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p38, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_1073;

  $bb6:
    assume out_$i44 == 1;
    goto corral_source_split_1072;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i43, 0);
    goto corral_source_split_1070;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p42);
    goto corral_source_split_1069;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_1068;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p40, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1067;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_1066;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p38, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_1065;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i44 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i52 == 1);
    goto $bb8;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p38, out_vslice_dummy_var_61 := stk1160_video_register_loop_$bb4(in_$p0, in_$i36, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p38, out_vslice_dummy_var_61);
    return;

  exit:
    return;
}



procedure stk1160_video_register_loop_$bb4(in_$p0: ref, in_$i36: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$i69: i1, in_$p38: ref, in_vslice_dummy_var_61: i32) returns (out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$i69: i1, out_$p38: ref, out_vslice_dummy_var_61: i32);



implementation stk1160_set_std_loop_$bb15(in_$p0: ref, in_$p2: ref, in_$i113: i64, in_$p115: ref, in_$i116: i16, in_$i117: i32, in_$i118: i16, in_$i119: i64, in_$p121: ref, in_$i122: i16, in_$i123: i32, in_$i124: i16, in_$i126: i32, in_$i127: i64, in_$p129: ref, in_$i130: i16, in_$i131: i32, in_$i132: i1, in_$i112: i32, in_vslice_dummy_var_67: i32) returns (out_$i113: i64, out_$p115: ref, out_$i116: i16, out_$i117: i32, out_$i118: i16, out_$i119: i64, out_$p121: ref, out_$i122: i16, out_$i123: i32, out_$i124: i16, out_$i126: i32, out_$i127: i64, out_$p129: ref, out_$i130: i16, out_$i131: i32, out_$i132: i1, out_$i112: i32, out_vslice_dummy_var_67: i32)
{

  entry:
    out_$i113, out_$p115, out_$i116, out_$i117, out_$i118, out_$i119, out_$p121, out_$i122, out_$i123, out_$i124, out_$i126, out_$i127, out_$p129, out_$i130, out_$i131, out_$i132, out_$i112, out_vslice_dummy_var_67 := in_$i113, in_$p115, in_$i116, in_$i117, in_$i118, in_$i119, in_$p121, in_$i122, in_$i123, in_$i124, in_$i126, in_$i127, in_$p129, in_$i130, in_$i131, in_$i132, in_$i112, in_vslice_dummy_var_67;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1250;

  $bb17:
    assume out_$i132 == 1;
    assume {:verifier.code 0} true;
    out_$i112 := out_$i126;
    goto $bb17_dummy;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    out_$i132 := $ne.i32(out_$i131, 65535);
    goto corral_source_split_1268;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    out_$i131 := $zext.i16.i32(out_$i130);
    goto corral_source_split_1267;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i16($M.13, out_$p129);
    goto corral_source_split_1266;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 36)), $mul.ref(out_$i127, 4)), $mul.ref(0, 1));
    goto corral_source_split_1265;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    out_$i127 := $sext.i32.i64(out_$i126);
    goto corral_source_split_1264;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    out_$i126 := $add.i32(out_$i112, 1);
    call {:si_unique_call 214} {:cexpr "i"} boogie_si_record_i32(out_$i126);
    goto corral_source_split_1263;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} out_vslice_dummy_var_67 := stk1160_write_reg(in_$p0, out_$i118, out_$i124);
    goto corral_source_split_1262;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    out_$i124 := $trunc.i32.i16(out_$i123);
    goto corral_source_split_1261;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i16.i32(out_$i122);
    goto corral_source_split_1260;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i16($M.14, out_$p121);
    goto corral_source_split_1259;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 36)), $mul.ref(out_$i119, 4)), $mul.ref(2, 1));
    goto corral_source_split_1258;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    out_$i119 := $sext.i32.i64(out_$i112);
    goto corral_source_split_1257;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    out_$i118 := $trunc.i32.i16(out_$i117);
    goto corral_source_split_1256;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    out_$i117 := $zext.i16.i32(out_$i116);
    goto corral_source_split_1255;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i16($M.13, out_$p115);
    goto corral_source_split_1254;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 36)), $mul.ref(out_$i113, 4)), $mul.ref(0, 1));
    goto corral_source_split_1253;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i113 := $sext.i32.i64(out_$i112);
    goto corral_source_split_1252;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i113, out_$p115, out_$i116, out_$i117, out_$i118, out_$i119, out_$p121, out_$i122, out_$i123, out_$i124, out_$i126, out_$i127, out_$p129, out_$i130, out_$i131, out_$i132, out_$i112, out_vslice_dummy_var_67 := stk1160_set_std_loop_$bb15(in_$p0, in_$p2, out_$i113, out_$p115, out_$i116, out_$i117, out_$i118, out_$i119, out_$p121, out_$i122, out_$i123, out_$i124, out_$i126, out_$i127, out_$p129, out_$i130, out_$i131, out_$i132, out_$i112, out_vslice_dummy_var_67);
    return;

  exit:
    return;
}



procedure stk1160_set_std_loop_$bb15(in_$p0: ref, in_$p2: ref, in_$i113: i64, in_$p115: ref, in_$i116: i16, in_$i117: i32, in_$i118: i16, in_$i119: i64, in_$p121: ref, in_$i122: i16, in_$i123: i32, in_$i124: i16, in_$i126: i32, in_$i127: i64, in_$p129: ref, in_$i130: i16, in_$i131: i32, in_$i132: i1, in_$i112: i32, in_vslice_dummy_var_67: i32) returns (out_$i113: i64, out_$p115: ref, out_$i116: i16, out_$i117: i32, out_$i118: i16, out_$i119: i64, out_$p121: ref, out_$i122: i16, out_$i123: i32, out_$i124: i16, out_$i126: i32, out_$i127: i64, out_$p129: ref, out_$i130: i16, out_$i131: i32, out_$i132: i1, out_$i112: i32, out_vslice_dummy_var_67: i32);



implementation stk1160_set_std_loop_$bb6(in_$p0: ref, in_$p1: ref, in_$i86: i64, in_$p88: ref, in_$i89: i16, in_$i90: i32, in_$i91: i16, in_$i92: i64, in_$p94: ref, in_$i95: i16, in_$i96: i32, in_$i97: i16, in_$i99: i32, in_$i100: i64, in_$p102: ref, in_$i103: i16, in_$i104: i32, in_$i105: i1, in_$i85: i32, in_vslice_dummy_var_66: i32) returns (out_$i86: i64, out_$p88: ref, out_$i89: i16, out_$i90: i32, out_$i91: i16, out_$i92: i64, out_$p94: ref, out_$i95: i16, out_$i96: i32, out_$i97: i16, out_$i99: i32, out_$i100: i64, out_$p102: ref, out_$i103: i16, out_$i104: i32, out_$i105: i1, out_$i85: i32, out_vslice_dummy_var_66: i32)
{

  entry:
    out_$i86, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p94, out_$i95, out_$i96, out_$i97, out_$i99, out_$i100, out_$p102, out_$i103, out_$i104, out_$i105, out_$i85, out_vslice_dummy_var_66 := in_$i86, in_$p88, in_$i89, in_$i90, in_$i91, in_$i92, in_$p94, in_$i95, in_$i96, in_$i97, in_$i99, in_$i100, in_$p102, in_$i103, in_$i104, in_$i105, in_$i85, in_vslice_dummy_var_66;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1226;

  $bb8:
    assume out_$i105 == 1;
    assume {:verifier.code 0} true;
    out_$i85 := out_$i99;
    goto $bb8_dummy;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    out_$i105 := $ne.i32(out_$i104, 65535);
    goto corral_source_split_1244;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i16.i32(out_$i103);
    goto corral_source_split_1243;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i16($M.11, out_$p102);
    goto corral_source_split_1242;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 36)), $mul.ref(out_$i100, 4)), $mul.ref(0, 1));
    goto corral_source_split_1241;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    out_$i100 := $sext.i32.i64(out_$i99);
    goto corral_source_split_1240;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    out_$i99 := $add.i32(out_$i85, 1);
    call {:si_unique_call 212} {:cexpr "i"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_1239;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} out_vslice_dummy_var_66 := stk1160_write_reg(in_$p0, out_$i91, out_$i97);
    goto corral_source_split_1238;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    out_$i97 := $trunc.i32.i16(out_$i96);
    goto corral_source_split_1237;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i16.i32(out_$i95);
    goto corral_source_split_1236;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i16($M.12, out_$p94);
    goto corral_source_split_1235;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 36)), $mul.ref(out_$i92, 4)), $mul.ref(2, 1));
    goto corral_source_split_1234;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    out_$i92 := $sext.i32.i64(out_$i85);
    goto corral_source_split_1233;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    out_$i91 := $trunc.i32.i16(out_$i90);
    goto corral_source_split_1232;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    out_$i90 := $zext.i16.i32(out_$i89);
    goto corral_source_split_1231;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i16($M.11, out_$p88);
    goto corral_source_split_1230;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 36)), $mul.ref(out_$i86, 4)), $mul.ref(0, 1));
    goto corral_source_split_1229;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i86 := $sext.i32.i64(out_$i85);
    goto corral_source_split_1228;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    call {:si_unique_call 1} out_$i86, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p94, out_$i95, out_$i96, out_$i97, out_$i99, out_$i100, out_$p102, out_$i103, out_$i104, out_$i105, out_$i85, out_vslice_dummy_var_66 := stk1160_set_std_loop_$bb6(in_$p0, in_$p1, out_$i86, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p94, out_$i95, out_$i96, out_$i97, out_$i99, out_$i100, out_$p102, out_$i103, out_$i104, out_$i105, out_$i85, out_vslice_dummy_var_66);
    return;

  exit:
    return;
}



procedure stk1160_set_std_loop_$bb6(in_$p0: ref, in_$p1: ref, in_$i86: i64, in_$p88: ref, in_$i89: i16, in_$i90: i32, in_$i91: i16, in_$i92: i64, in_$p94: ref, in_$i95: i16, in_$i96: i32, in_$i97: i16, in_$i99: i32, in_$i100: i64, in_$p102: ref, in_$i103: i16, in_$i104: i32, in_$i105: i1, in_$i85: i32, in_vslice_dummy_var_66: i32) returns (out_$i86: i64, out_$p88: ref, out_$i89: i16, out_$i90: i32, out_$i91: i16, out_$i92: i64, out_$p94: ref, out_$i95: i16, out_$i96: i32, out_$i97: i16, out_$i99: i32, out_$i100: i64, out_$p102: ref, out_$i103: i16, out_$i104: i32, out_$i105: i1, out_$i85: i32, out_vslice_dummy_var_66: i32);



implementation ldv_stop___3_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop___3_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop___3_loop_$bb1();



implementation stk1160_stop_hw_loop_$bb8(in_$i24: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p26: ref, in_vslice_dummy_var_77: i32) returns (out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p26: ref, out_vslice_dummy_var_77: i32)
{

  entry:
    out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p26, out_vslice_dummy_var_77 := in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$p26, in_vslice_dummy_var_77;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1598;

  $bb16:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$p26 := out_$p52;
    goto $bb16_dummy;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, in_$i24);
    goto corral_source_split_1631;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_1630;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p51, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_1629;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref(out_$p51, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_1628;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_1627;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_1626;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($add.ref(out_$p26, $mul.ref(0, 296)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_1625;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    call {:si_unique_call 320} out_vslice_dummy_var_77 := devirtbounce(out_$p46, out_$p26, 0);
    goto corral_source_split_1623;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p44, $mul.ref(0, 240)), $mul.ref(56, 1));
    goto corral_source_split_1622;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_1621;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p42, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1620;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_1619;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p26, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_1618;

  $bb13:
    assume out_$i40 == 1;
    goto corral_source_split_1617;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i39, 0);
    goto corral_source_split_1615;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_1614;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_1613;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p36, $mul.ref(0, 240)), $mul.ref(56, 1));
    goto corral_source_split_1612;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_1611;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p34, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1610;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_1609;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p26, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_1608;

  $bb10:
    assume out_$i32 == 1;
    goto corral_source_split_1607;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, 0);
    goto corral_source_split_1605;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_1604;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_1603;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p28, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1602;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_1601;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_1600;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb12;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i40 == 1);
    goto $bb12;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p26, out_vslice_dummy_var_77 := stk1160_stop_hw_loop_$bb8(in_$i24, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p26, out_vslice_dummy_var_77);
    return;

  exit:
    return;
}



procedure stk1160_stop_hw_loop_$bb8(in_$i24: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p26: ref, in_vslice_dummy_var_77: i32) returns (out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p26: ref, out_vslice_dummy_var_77: i32);
  modifies $M.0, $M.2, $M.16, $M.18, $CurrAddr, $M.3, $M.20;



implementation stk1160_start_streaming_loop_$bb33(in_$i48: i64, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$p50: ref, in_vslice_dummy_var_80: i32) returns (out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$p50: ref, out_vslice_dummy_var_80: i32)
{

  entry:
    out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$p50, out_vslice_dummy_var_80 := in_$p51, in_$p52, in_$p53, in_$p54, in_$i55, in_$i56, in_$p57, in_$p58, in_$p59, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p65, in_$p66, in_$p67, in_$p68, in_$p69, in_$p70, in_$p73, in_$p74, in_$p75, in_$p76, in_$p77, in_$i78, in_$i79, in_$p50, in_vslice_dummy_var_80;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_1715;

  $bb41:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$p50 := out_$p76;
    goto $bb41_dummy;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i64(out_$i78, in_$i48);
    goto corral_source_split_1748;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    out_$i78 := $p2i.ref.i64(out_$p77);
    goto corral_source_split_1747;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p75, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_1746;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref(out_$p75, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_1745;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    out_$p75 := $bitcast.ref.ref(out_$p74);
    goto corral_source_split_1744;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_1743;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($add.ref(out_$p50, $mul.ref(0, 296)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_1742;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.0, out_$p69);
    call {:si_unique_call 339} out_vslice_dummy_var_80 := devirtbounce(out_$p70, out_$p50, 1);
    goto corral_source_split_1740;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p68, $mul.ref(0, 240)), $mul.ref(56, 1));
    goto corral_source_split_1739;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    goto corral_source_split_1738;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p66, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1737;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_1736;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p50, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_1735;

  $bb38:
    assume out_$i64 == 1;
    goto corral_source_split_1734;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i64(out_$i63, 0);
    goto corral_source_split_1732;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_1731;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_1730;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p60, $mul.ref(0, 240)), $mul.ref(56, 1));
    goto corral_source_split_1729;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_1728;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p58, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1727;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_1726;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p50, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_1725;

  $bb35:
    assume out_$i56 == 1;
    goto corral_source_split_1724;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i55, 0);
    goto corral_source_split_1722;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p54);
    goto corral_source_split_1721;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_1720;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p52, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1719;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_1718;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p50, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_1717;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(out_$i56 == 1);
    goto $bb37;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb37;

  $bb41_dummy:
    call {:si_unique_call 1} out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$p50, out_vslice_dummy_var_80 := stk1160_start_streaming_loop_$bb33(in_$i48, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$p50, out_vslice_dummy_var_80);
    return;

  exit:
    return;
}



procedure stk1160_start_streaming_loop_$bb33(in_$i48: i64, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$p50: ref, in_vslice_dummy_var_80: i32) returns (out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$p50: ref, out_vslice_dummy_var_80: i32);
  modifies $M.0, $M.2, $M.16, $M.18, $CurrAddr, $M.3, $M.20;



implementation stk1160_start_streaming_loop_$bb21(in_$p0: ref, in_$p20: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i23: i32) returns (out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i23: i32)
{

  entry:
    out_$p25, out_$p26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i35, out_$i36, out_$i37, out_$i23 := in_$p25, in_$p26, in_$i27, in_$p28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i35, in_$i36, in_$i37, in_$i23;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1682;

  $bb27:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i23 := out_$i35;
    goto $bb27_dummy;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    out_$i37 := $sgt.i32(out_$i36, out_$i35);
    goto corral_source_split_1699;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, in_$p20);
    goto corral_source_split_1698;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i23, 1);
    call {:si_unique_call 338} {:cexpr "i"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_1697;

  $bb24:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i23, out_$i30;
    assume true;
    goto $bb24;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_1690;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} out_$i30 := ldv_usb_submit_urb_10(out_$p29, 208);
    call {:si_unique_call 335} {:cexpr "rc"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_1689;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_1688;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref(out_$p26, $mul.ref(out_$i27, 8));
    goto corral_source_split_1687;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i23);
    goto corral_source_split_1686;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_1685;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(8, 1));
    goto corral_source_split_1684;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb27_dummy:
    call {:si_unique_call 1} out_$p25, out_$p26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i35, out_$i36, out_$i37, out_$i23 := stk1160_start_streaming_loop_$bb21(in_$p0, in_$p20, out_$p25, out_$p26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i35, out_$i36, out_$i37, out_$i23);
    return;

  exit:
    return;
}



procedure stk1160_start_streaming_loop_$bb21(in_$p0: ref, in_$p20: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i23: i32) returns (out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i23: i32);
  modifies $M.16, $M.18, $M.0, $M.3, $M.20, $M.2, $CurrAddr;



implementation stk1160_set_alternate_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$i19: i32, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i64, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i6: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$i19: i32, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i64, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i6: i32)
{

  entry:
    out_$p7, out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i6 := in_$p7, in_$p8, in_$i9, in_$p10, in_$i11, in_$i12, in_$i13, in_$p15, in_$p16, in_$i17, in_$p18, in_$i19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$p28, in_$i29, in_$i30, in_$i31, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1767;

  $bb13:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i29;
    goto $bb13_dummy;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    out_$i31 := $sgt.i32(out_$i30, out_$i29);
    goto corral_source_split_1808;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, in_$p3);
    goto corral_source_split_1807;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i6, 1);
    call {:si_unique_call 346} {:cexpr "i"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_1806;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p28, out_$i6);
    goto corral_source_split_1804;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3120, 1));
    goto corral_source_split_1803;

  $bb9:
    assume out_$i27 == 1;
    goto corral_source_split_1802;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    out_$i27 := $ugt.i32(out_$i19, out_$i26);
    goto corral_source_split_1793;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    goto corral_source_split_1792;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p21, $mul.ref(out_$i24, 4));
    goto corral_source_split_1791;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(out_$i23);
    goto corral_source_split_1790;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, out_$p22);
    goto corral_source_split_1789;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3120, 1));
    goto corral_source_split_1788;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_1787;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3112, 1));
    goto corral_source_split_1786;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    goto corral_source_split_1785;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p16, $mul.ref(out_$i17, 4));
    goto corral_source_split_1784;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i6);
    goto corral_source_split_1783;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_1782;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3112, 1));
    goto corral_source_split_1781;

  $bb7:
    assume !(out_$i12 == 1);
    goto corral_source_split_1780;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i6;
    assume true;
    goto $bb7;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    out_$i12 := $uge.i32(out_$i11, 3072);
    goto corral_source_split_1774;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.0, out_$p10);
    goto corral_source_split_1773;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref(out_$p8, $mul.ref(out_$i9, 4));
    goto corral_source_split_1772;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i6);
    goto corral_source_split_1771;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_1770;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3112, 1));
    goto corral_source_split_1769;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i6 := stk1160_set_alternate_loop_$bb4(in_$p0, in_$p3, out_$p7, out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i6);
    return;

  exit:
    return;
}



procedure stk1160_set_alternate_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$i19: i32, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i64, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i6: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$i19: i32, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i64, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i6: i32);
  modifies $M.0;



implementation stk1160_alloc_isoc_loop_$bb11(in_$p0: ref, in_$i8: i32, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$i48: i32, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$p59: ref, in_$p60: ref, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$p65: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$i74: i32, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$p91: ref, in_$p93: ref, in_$p94: ref, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p109: ref, in_$p111: ref, in_$i112: i32, in_$p115: ref, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i44: i32, in_$p145: ref, in_$p147: ref, in_$i148: i32, in_$p151: ref, in_$p153: ref, in_$i154: i32, in_$i155: i32, in_$p158: ref, in_$p160: ref, in_$i161: i32, in_$p164: ref, in_$p166: ref, in_$i167: i32, in_$i168: i32, in_$p171: ref, in_$p173: ref, in_$i174: i32, in_$p177: ref, in_$p179: ref, in_$i180: i32, in_$i181: i32, in_$p184: ref, in_$p186: ref, in_$i187: i32, in_$p190: ref, in_$p192: ref, in_$i193: i32, in_$i194: i32, in_$p197: ref, in_$p199: ref, in_$i200: i32, in_$p203: ref, in_$p205: ref, in_$i206: i32, in_$i207: i32, in_$p210: ref, in_$p212: ref, in_$i213: i32, in_$p216: ref, in_$p218: ref, in_$i219: i32, in_$i220: i32, in_$p223: ref, in_$p225: ref, in_$i226: i32, in_$p229: ref, in_$p231: ref, in_$i232: i32, in_$i233: i32, in_$p236: ref, in_$p238: ref, in_$i239: i32, in_$p242: ref, in_$p244: ref, in_$i245: i32, in_$i246: i32, in_$p249: ref, in_$p251: ref, in_$i252: i32, in_$p255: ref, in_$p257: ref, in_$i258: i32, in_$i259: i32, in_$p262: ref, in_$p264: ref, in_$i265: i32, in_$p268: ref, in_$p270: ref, in_$i271: i32, in_$i272: i32, in_$p275: ref, in_$p277: ref, in_$i278: i32, in_$p281: ref, in_$p283: ref, in_$i284: i32, in_$i285: i32, in_$p288: ref, in_$p290: ref, in_$i291: i32, in_$p294: ref, in_$p296: ref, in_$i297: i32, in_$i298: i32, in_$p301: ref, in_$p303: ref, in_$i304: i32, in_$p307: ref, in_$p309: ref, in_$i310: i32, in_$i311: i32, in_$p314: ref, in_$p316: ref, in_$i317: i32, in_$p320: ref, in_$p322: ref, in_$i323: i32, in_$i324: i32, in_$p327: ref, in_$p329: ref, in_$i330: i32, in_$p333: ref, in_$p335: ref, in_$i336: i32, in_$i337: i32, in_$p340: ref, in_$p342: ref, in_$i343: i32, in_$p346: ref, in_$p348: ref, in_$i349: i32, in_$i350: i32, in_$p353: ref, in_$p355: ref, in_$i356: i32, in_$p359: ref, in_$p361: ref, in_$i362: i32, in_$i363: i32, in_$p366: ref, in_$p368: ref, in_$i369: i32, in_$p372: ref, in_$p374: ref, in_$i375: i32, in_$i376: i32, in_$p379: ref, in_$p381: ref, in_$i382: i32, in_$p385: ref, in_$p387: ref, in_$i388: i32, in_$i389: i32, in_$p392: ref, in_$p394: ref, in_$i395: i32, in_$p398: ref, in_$p400: ref, in_$i401: i32, in_$i402: i32, in_$p405: ref, in_$p407: ref, in_$i408: i32, in_$p411: ref, in_$p413: ref, in_$i414: i32, in_$i415: i32, in_$p418: ref, in_$p420: ref, in_$i421: i32, in_$p424: ref, in_$p426: ref, in_$i427: i32, in_$i428: i32, in_$p431: ref, in_$p433: ref, in_$i434: i32, in_$p437: ref, in_$p439: ref, in_$i440: i32, in_$i441: i32, in_$p444: ref, in_$p446: ref, in_$i447: i32, in_$p450: ref, in_$p452: ref, in_$i453: i32, in_$i454: i32, in_$p457: ref, in_$p459: ref, in_$i460: i32, in_$p463: ref, in_$p465: ref, in_$i466: i32, in_$i467: i32, in_$p470: ref, in_$p472: ref, in_$i473: i32, in_$p476: ref, in_$p478: ref, in_$i479: i32, in_$i480: i32, in_$p483: ref, in_$p485: ref, in_$i486: i32, in_$p489: ref, in_$p491: ref, in_$i492: i32, in_$i493: i32, in_$p496: ref, in_$p498: ref, in_$i499: i32, in_$p502: ref, in_$p504: ref, in_$i505: i32, in_$i506: i32, in_$p509: ref, in_$p511: ref, in_$i512: i32, in_$p515: ref, in_$p517: ref, in_$i518: i32, in_$i519: i32, in_$p522: ref, in_$p524: ref, in_$i525: i32, in_$p528: ref, in_$p530: ref, in_$i531: i32, in_$i532: i32, in_$p535: ref, in_$p537: ref, in_$i538: i32, in_$p541: ref, in_$p543: ref, in_$i544: i32, in_$i545: i32, in_$p548: ref, in_$p550: ref, in_$i551: i32, in_$p554: ref, in_$p556: ref, in_$i557: i32, in_$i558: i32, in_$p561: ref, in_$p563: ref, in_$i564: i32, in_$p567: ref, in_$p569: ref, in_$i570: i32, in_$i571: i32, in_$p574: ref, in_$p576: ref, in_$i577: i32, in_$p580: ref, in_$p582: ref, in_$i583: i32, in_$i584: i32, in_$p587: ref, in_$p589: ref, in_$i590: i32, in_$p593: ref, in_$p595: ref, in_$i596: i32, in_$i597: i32, in_$p600: ref, in_$p602: ref, in_$i603: i32, in_$p606: ref, in_$p608: ref, in_$i609: i32, in_$i610: i32, in_$p613: ref, in_$p615: ref, in_$i616: i32, in_$p619: ref, in_$p621: ref, in_$i622: i32, in_$i623: i32, in_$p626: ref, in_$p628: ref, in_$i629: i32, in_$p632: ref, in_$p634: ref, in_$i635: i32, in_$i636: i32, in_$p639: ref, in_$p641: ref, in_$i642: i32, in_$p645: ref, in_$p647: ref, in_$i648: i32, in_$i649: i32, in_$p652: ref, in_$p654: ref, in_$i655: i32, in_$p658: ref, in_$p660: ref, in_$i661: i32, in_$i662: i32, in_$p665: ref, in_$p667: ref, in_$i668: i32, in_$p671: ref, in_$p673: ref, in_$i674: i32, in_$i675: i32, in_$p678: ref, in_$p680: ref, in_$i681: i32, in_$p684: ref, in_$p686: ref, in_$i687: i32, in_$i688: i32, in_$p691: ref, in_$p693: ref, in_$i694: i32, in_$p697: ref, in_$p699: ref, in_$i700: i32, in_$i701: i32, in_$p704: ref, in_$p706: ref, in_$i707: i32, in_$p710: ref, in_$p712: ref, in_$i713: i32, in_$i714: i32, in_$p717: ref, in_$p719: ref, in_$i720: i32, in_$p723: ref, in_$p725: ref, in_$i726: i32, in_$i727: i32, in_$p730: ref, in_$p732: ref, in_$i733: i32, in_$p736: ref, in_$p738: ref, in_$i739: i32, in_$i740: i32, in_$p743: ref, in_$p745: ref, in_$i746: i32, in_$p749: ref, in_$p751: ref, in_$i752: i32, in_$i753: i32, in_$p756: ref, in_$p758: ref, in_$i759: i32, in_$p762: ref, in_$p764: ref, in_$i765: i32, in_$i766: i32, in_$p769: ref, in_$p771: ref, in_$i772: i32, in_$p775: ref, in_$p777: ref, in_$i778: i32, in_$i779: i32, in_$p782: ref, in_$p784: ref, in_$i785: i32, in_$p788: ref, in_$p790: ref, in_$i791: i32, in_$i792: i32, in_$p795: ref, in_$p797: ref, in_$i798: i32, in_$p801: ref, in_$p803: ref, in_$i804: i32, in_$i805: i32, in_$p808: ref, in_$p810: ref, in_$i811: i32, in_$p814: ref, in_$p816: ref, in_$i817: i32, in_$i818: i32, in_$p821: ref, in_$p823: ref, in_$i824: i32, in_$p827: ref, in_$p829: ref, in_$i830: i32, in_$i831: i32, in_$p834: ref, in_$p836: ref, in_$i837: i32, in_$p840: ref, in_$p842: ref, in_$i843: i32, in_$i844: i32, in_$p847: ref, in_$p849: ref, in_$i850: i32, in_$p853: ref, in_$p855: ref, in_$i856: i32, in_$i857: i32, in_$p860: ref, in_$p862: ref, in_$i863: i32, in_$p866: ref, in_$p868: ref, in_$i869: i32, in_$i870: i32, in_$p873: ref, in_$p875: ref, in_$i876: i32, in_$p879: ref, in_$p881: ref, in_$i882: i32, in_$i883: i32, in_$p886: ref, in_$p888: ref, in_$i889: i32, in_$p892: ref, in_$p894: ref, in_$i895: i32, in_$i896: i32, in_$p899: ref, in_$p901: ref, in_$i902: i32, in_$p905: ref, in_$p907: ref, in_$i908: i32, in_$i909: i32, in_$p912: ref, in_$p914: ref, in_$i915: i32, in_$p918: ref, in_$p920: ref, in_$i921: i32, in_$i922: i32, in_$p925: ref, in_$p927: ref, in_$i928: i32, in_$p931: ref, in_$p933: ref, in_$i934: i32, in_$i935: i32, in_$p938: ref, in_$p940: ref, in_$i941: i32, in_$p944: ref, in_$p946: ref, in_$i947: i32, in_$i948: i32, in_$p951: ref, in_$p953: ref, in_$i954: i32, in_$p957: ref, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8) returns (out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$i48: i32, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$p59: ref, out_$p60: ref, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$p65: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$i74: i32, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$p91: ref, out_$p93: ref, out_$p94: ref, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p109: ref, out_$p111: ref, out_$i112: i32, out_$p115: ref, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i44: i32, out_$p145: ref, out_$p147: ref, out_$i148: i32, out_$p151: ref, out_$p153: ref, out_$i154: i32, out_$i155: i32, out_$p158: ref, out_$p160: ref, out_$i161: i32, out_$p164: ref, out_$p166: ref, out_$i167: i32, out_$i168: i32, out_$p171: ref, out_$p173: ref, out_$i174: i32, out_$p177: ref, out_$p179: ref, out_$i180: i32, out_$i181: i32, out_$p184: ref, out_$p186: ref, out_$i187: i32, out_$p190: ref, out_$p192: ref, out_$i193: i32, out_$i194: i32, out_$p197: ref, out_$p199: ref, out_$i200: i32, out_$p203: ref, out_$p205: ref, out_$i206: i32, out_$i207: i32, out_$p210: ref, out_$p212: ref, out_$i213: i32, out_$p216: ref, out_$p218: ref, out_$i219: i32, out_$i220: i32, out_$p223: ref, out_$p225: ref, out_$i226: i32, out_$p229: ref, out_$p231: ref, out_$i232: i32, out_$i233: i32, out_$p236: ref, out_$p238: ref, out_$i239: i32, out_$p242: ref, out_$p244: ref, out_$i245: i32, out_$i246: i32, out_$p249: ref, out_$p251: ref, out_$i252: i32, out_$p255: ref, out_$p257: ref, out_$i258: i32, out_$i259: i32, out_$p262: ref, out_$p264: ref, out_$i265: i32, out_$p268: ref, out_$p270: ref, out_$i271: i32, out_$i272: i32, out_$p275: ref, out_$p277: ref, out_$i278: i32, out_$p281: ref, out_$p283: ref, out_$i284: i32, out_$i285: i32, out_$p288: ref, out_$p290: ref, out_$i291: i32, out_$p294: ref, out_$p296: ref, out_$i297: i32, out_$i298: i32, out_$p301: ref, out_$p303: ref, out_$i304: i32, out_$p307: ref, out_$p309: ref, out_$i310: i32, out_$i311: i32, out_$p314: ref, out_$p316: ref, out_$i317: i32, out_$p320: ref, out_$p322: ref, out_$i323: i32, out_$i324: i32, out_$p327: ref, out_$p329: ref, out_$i330: i32, out_$p333: ref, out_$p335: ref, out_$i336: i32, out_$i337: i32, out_$p340: ref, out_$p342: ref, out_$i343: i32, out_$p346: ref, out_$p348: ref, out_$i349: i32, out_$i350: i32, out_$p353: ref, out_$p355: ref, out_$i356: i32, out_$p359: ref, out_$p361: ref, out_$i362: i32, out_$i363: i32, out_$p366: ref, out_$p368: ref, out_$i369: i32, out_$p372: ref, out_$p374: ref, out_$i375: i32, out_$i376: i32, out_$p379: ref, out_$p381: ref, out_$i382: i32, out_$p385: ref, out_$p387: ref, out_$i388: i32, out_$i389: i32, out_$p392: ref, out_$p394: ref, out_$i395: i32, out_$p398: ref, out_$p400: ref, out_$i401: i32, out_$i402: i32, out_$p405: ref, out_$p407: ref, out_$i408: i32, out_$p411: ref, out_$p413: ref, out_$i414: i32, out_$i415: i32, out_$p418: ref, out_$p420: ref, out_$i421: i32, out_$p424: ref, out_$p426: ref, out_$i427: i32, out_$i428: i32, out_$p431: ref, out_$p433: ref, out_$i434: i32, out_$p437: ref, out_$p439: ref, out_$i440: i32, out_$i441: i32, out_$p444: ref, out_$p446: ref, out_$i447: i32, out_$p450: ref, out_$p452: ref, out_$i453: i32, out_$i454: i32, out_$p457: ref, out_$p459: ref, out_$i460: i32, out_$p463: ref, out_$p465: ref, out_$i466: i32, out_$i467: i32, out_$p470: ref, out_$p472: ref, out_$i473: i32, out_$p476: ref, out_$p478: ref, out_$i479: i32, out_$i480: i32, out_$p483: ref, out_$p485: ref, out_$i486: i32, out_$p489: ref, out_$p491: ref, out_$i492: i32, out_$i493: i32, out_$p496: ref, out_$p498: ref, out_$i499: i32, out_$p502: ref, out_$p504: ref, out_$i505: i32, out_$i506: i32, out_$p509: ref, out_$p511: ref, out_$i512: i32, out_$p515: ref, out_$p517: ref, out_$i518: i32, out_$i519: i32, out_$p522: ref, out_$p524: ref, out_$i525: i32, out_$p528: ref, out_$p530: ref, out_$i531: i32, out_$i532: i32, out_$p535: ref, out_$p537: ref, out_$i538: i32, out_$p541: ref, out_$p543: ref, out_$i544: i32, out_$i545: i32, out_$p548: ref, out_$p550: ref, out_$i551: i32, out_$p554: ref, out_$p556: ref, out_$i557: i32, out_$i558: i32, out_$p561: ref, out_$p563: ref, out_$i564: i32, out_$p567: ref, out_$p569: ref, out_$i570: i32, out_$i571: i32, out_$p574: ref, out_$p576: ref, out_$i577: i32, out_$p580: ref, out_$p582: ref, out_$i583: i32, out_$i584: i32, out_$p587: ref, out_$p589: ref, out_$i590: i32, out_$p593: ref, out_$p595: ref, out_$i596: i32, out_$i597: i32, out_$p600: ref, out_$p602: ref, out_$i603: i32, out_$p606: ref, out_$p608: ref, out_$i609: i32, out_$i610: i32, out_$p613: ref, out_$p615: ref, out_$i616: i32, out_$p619: ref, out_$p621: ref, out_$i622: i32, out_$i623: i32, out_$p626: ref, out_$p628: ref, out_$i629: i32, out_$p632: ref, out_$p634: ref, out_$i635: i32, out_$i636: i32, out_$p639: ref, out_$p641: ref, out_$i642: i32, out_$p645: ref, out_$p647: ref, out_$i648: i32, out_$i649: i32, out_$p652: ref, out_$p654: ref, out_$i655: i32, out_$p658: ref, out_$p660: ref, out_$i661: i32, out_$i662: i32, out_$p665: ref, out_$p667: ref, out_$i668: i32, out_$p671: ref, out_$p673: ref, out_$i674: i32, out_$i675: i32, out_$p678: ref, out_$p680: ref, out_$i681: i32, out_$p684: ref, out_$p686: ref, out_$i687: i32, out_$i688: i32, out_$p691: ref, out_$p693: ref, out_$i694: i32, out_$p697: ref, out_$p699: ref, out_$i700: i32, out_$i701: i32, out_$p704: ref, out_$p706: ref, out_$i707: i32, out_$p710: ref, out_$p712: ref, out_$i713: i32, out_$i714: i32, out_$p717: ref, out_$p719: ref, out_$i720: i32, out_$p723: ref, out_$p725: ref, out_$i726: i32, out_$i727: i32, out_$p730: ref, out_$p732: ref, out_$i733: i32, out_$p736: ref, out_$p738: ref, out_$i739: i32, out_$i740: i32, out_$p743: ref, out_$p745: ref, out_$i746: i32, out_$p749: ref, out_$p751: ref, out_$i752: i32, out_$i753: i32, out_$p756: ref, out_$p758: ref, out_$i759: i32, out_$p762: ref, out_$p764: ref, out_$i765: i32, out_$i766: i32, out_$p769: ref, out_$p771: ref, out_$i772: i32, out_$p775: ref, out_$p777: ref, out_$i778: i32, out_$i779: i32, out_$p782: ref, out_$p784: ref, out_$i785: i32, out_$p788: ref, out_$p790: ref, out_$i791: i32, out_$i792: i32, out_$p795: ref, out_$p797: ref, out_$i798: i32, out_$p801: ref, out_$p803: ref, out_$i804: i32, out_$i805: i32, out_$p808: ref, out_$p810: ref, out_$i811: i32, out_$p814: ref, out_$p816: ref, out_$i817: i32, out_$i818: i32, out_$p821: ref, out_$p823: ref, out_$i824: i32, out_$p827: ref, out_$p829: ref, out_$i830: i32, out_$i831: i32, out_$p834: ref, out_$p836: ref, out_$i837: i32, out_$p840: ref, out_$p842: ref, out_$i843: i32, out_$i844: i32, out_$p847: ref, out_$p849: ref, out_$i850: i32, out_$p853: ref, out_$p855: ref, out_$i856: i32, out_$i857: i32, out_$p860: ref, out_$p862: ref, out_$i863: i32, out_$p866: ref, out_$p868: ref, out_$i869: i32, out_$i870: i32, out_$p873: ref, out_$p875: ref, out_$i876: i32, out_$p879: ref, out_$p881: ref, out_$i882: i32, out_$i883: i32, out_$p886: ref, out_$p888: ref, out_$i889: i32, out_$p892: ref, out_$p894: ref, out_$i895: i32, out_$i896: i32, out_$p899: ref, out_$p901: ref, out_$i902: i32, out_$p905: ref, out_$p907: ref, out_$i908: i32, out_$i909: i32, out_$p912: ref, out_$p914: ref, out_$i915: i32, out_$p918: ref, out_$p920: ref, out_$i921: i32, out_$i922: i32, out_$p925: ref, out_$p927: ref, out_$i928: i32, out_$p931: ref, out_$p933: ref, out_$i934: i32, out_$i935: i32, out_$p938: ref, out_$p940: ref, out_$i941: i32, out_$p944: ref, out_$p946: ref, out_$i947: i32, out_$i948: i32, out_$p951: ref, out_$p953: ref, out_$i954: i32, out_$p957: ref, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8)
{

  entry:
    out_$p45, out_$i46, out_$i47, out_$i48, out_$p52, out_$p53, out_$i54, out_$p55, out_$p56, out_$p57, out_$i58, out_$p59, out_$p60, out_$p62, out_$p63, out_$i64, out_$p65, out_$p67, out_$p68, out_$i69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$p78, out_$p79, out_$i80, out_$p81, out_$p82, out_$i83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p93, out_$p94, out_$i95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p109, out_$p111, out_$i112, out_$p115, out_$p117, out_$i118, out_$i119, out_$i120, out_$i44, out_$p145, out_$p147, out_$i148, out_$p151, out_$p153, out_$i154, out_$i155, out_$p158, out_$p160, out_$i161, out_$p164, out_$p166, out_$i167, out_$i168, out_$p171, out_$p173, out_$i174, out_$p177, out_$p179, out_$i180, out_$i181, out_$p184, out_$p186, out_$i187, out_$p190, out_$p192, out_$i193, out_$i194, out_$p197, out_$p199, out_$i200, out_$p203, out_$p205, out_$i206, out_$i207, out_$p210, out_$p212, out_$i213, out_$p216, out_$p218, out_$i219, out_$i220, out_$p223, out_$p225, out_$i226, out_$p229, out_$p231, out_$i232, out_$i233, out_$p236, out_$p238, out_$i239, out_$p242, out_$p244, out_$i245, out_$i246, out_$p249, out_$p251, out_$i252, out_$p255, out_$p257, out_$i258, out_$i259, out_$p262, out_$p264, out_$i265, out_$p268, out_$p270, out_$i271, out_$i272, out_$p275, out_$p277, out_$i278, out_$p281, out_$p283, out_$i284, out_$i285, out_$p288, out_$p290, out_$i291, out_$p294, out_$p296, out_$i297, out_$i298, out_$p301, out_$p303, out_$i304, out_$p307, out_$p309, out_$i310, out_$i311, out_$p314, out_$p316, out_$i317, out_$p320, out_$p322, out_$i323, out_$i324, out_$p327, out_$p329, out_$i330, out_$p333, out_$p335, out_$i336, out_$i337, out_$p340, out_$p342, out_$i343, out_$p346, out_$p348, out_$i349, out_$i350, out_$p353, out_$p355, out_$i356, out_$p359, out_$p361, out_$i362, out_$i363, out_$p366, out_$p368, out_$i369, out_$p372, out_$p374, out_$i375, out_$i376, out_$p379, out_$p381, out_$i382, out_$p385, out_$p387, out_$i388, out_$i389, out_$p392, out_$p394, out_$i395, out_$p398, out_$p400, out_$i401, out_$i402, out_$p405, out_$p407, out_$i408, out_$p411, out_$p413, out_$i414, out_$i415, out_$p418, out_$p420, out_$i421, out_$p424, out_$p426, out_$i427, out_$i428, out_$p431, out_$p433, out_$i434, out_$p437, out_$p439, out_$i440, out_$i441, out_$p444, out_$p446, out_$i447, out_$p450, out_$p452, out_$i453, out_$i454, out_$p457, out_$p459, out_$i460, out_$p463, out_$p465, out_$i466, out_$i467, out_$p470, out_$p472, out_$i473, out_$p476, out_$p478, out_$i479, out_$i480, out_$p483, out_$p485, out_$i486, out_$p489, out_$p491, out_$i492, out_$i493, out_$p496, out_$p498, out_$i499, out_$p502, out_$p504, out_$i505, out_$i506, out_$p509, out_$p511, out_$i512, out_$p515, out_$p517, out_$i518, out_$i519, out_$p522, out_$p524, out_$i525, out_$p528, out_$p530, out_$i531, out_$i532, out_$p535, out_$p537, out_$i538, out_$p541, out_$p543, out_$i544, out_$i545, out_$p548, out_$p550, out_$i551, out_$p554, out_$p556, out_$i557, out_$i558, out_$p561, out_$p563, out_$i564, out_$p567, out_$p569, out_$i570, out_$i571, out_$p574, out_$p576, out_$i577, out_$p580, out_$p582, out_$i583, out_$i584, out_$p587, out_$p589, out_$i590, out_$p593, out_$p595, out_$i596, out_$i597, out_$p600, out_$p602, out_$i603, out_$p606, out_$p608, out_$i609, out_$i610, out_$p613, out_$p615, out_$i616, out_$p619, out_$p621, out_$i622, out_$i623, out_$p626, out_$p628, out_$i629, out_$p632, out_$p634, out_$i635, out_$i636, out_$p639, out_$p641, out_$i642, out_$p645, out_$p647, out_$i648, out_$i649, out_$p652, out_$p654, out_$i655, out_$p658, out_$p660, out_$i661, out_$i662, out_$p665, out_$p667, out_$i668, out_$p671, out_$p673, out_$i674, out_$i675, out_$p678, out_$p680, out_$i681, out_$p684, out_$p686, out_$i687, out_$i688, out_$p691, out_$p693, out_$i694, out_$p697, out_$p699, out_$i700, out_$i701, out_$p704, out_$p706, out_$i707, out_$p710, out_$p712, out_$i713, out_$i714, out_$p717, out_$p719, out_$i720, out_$p723, out_$p725, out_$i726, out_$i727, out_$p730, out_$p732, out_$i733, out_$p736, out_$p738, out_$i739, out_$i740, out_$p743, out_$p745, out_$i746, out_$p749, out_$p751, out_$i752, out_$i753, out_$p756, out_$p758, out_$i759, out_$p762, out_$p764, out_$i765, out_$i766, out_$p769, out_$p771, out_$i772, out_$p775, out_$p777, out_$i778, out_$i779, out_$p782, out_$p784, out_$i785, out_$p788, out_$p790, out_$i791, out_$i792, out_$p795, out_$p797, out_$i798, out_$p801, out_$p803, out_$i804, out_$i805, out_$p808, out_$p810, out_$i811, out_$p814, out_$p816, out_$i817, out_$i818, out_$p821, out_$p823, out_$i824, out_$p827, out_$p829, out_$i830, out_$i831, out_$p834, out_$p836, out_$i837, out_$p840, out_$p842, out_$i843, out_$i844, out_$p847, out_$p849, out_$i850, out_$p853, out_$p855, out_$i856, out_$i857, out_$p860, out_$p862, out_$i863, out_$p866, out_$p868, out_$i869, out_$i870, out_$p873, out_$p875, out_$i876, out_$p879, out_$p881, out_$i882, out_$i883, out_$p886, out_$p888, out_$i889, out_$p892, out_$p894, out_$i895, out_$i896, out_$p899, out_$p901, out_$i902, out_$p905, out_$p907, out_$i908, out_$i909, out_$p912, out_$p914, out_$i915, out_$p918, out_$p920, out_$i921, out_$i922, out_$p925, out_$p927, out_$i928, out_$p931, out_$p933, out_$i934, out_$i935, out_$p938, out_$p940, out_$i941, out_$p944, out_$p946, out_$i947, out_$i948, out_$p951, out_$p953, out_$i954, out_$p957, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12 := in_$p45, in_$i46, in_$i47, in_$i48, in_$p52, in_$p53, in_$i54, in_$p55, in_$p56, in_$p57, in_$i58, in_$p59, in_$p60, in_$p62, in_$p63, in_$i64, in_$p65, in_$p67, in_$p68, in_$i69, in_$p70, in_$p71, in_$i72, in_$i73, in_$i74, in_$p78, in_$p79, in_$i80, in_$p81, in_$p82, in_$i83, in_$p84, in_$p85, in_$p86, in_$p87, in_$p88, in_$i89, in_$i90, in_$p91, in_$p93, in_$p94, in_$i95, in_$p96, in_$p97, in_$p98, in_$p99, in_$p100, in_$p102, in_$p103, in_$p104, in_$p105, in_$p106, in_$p109, in_$p111, in_$i112, in_$p115, in_$p117, in_$i118, in_$i119, in_$i120, in_$i44, in_$p145, in_$p147, in_$i148, in_$p151, in_$p153, in_$i154, in_$i155, in_$p158, in_$p160, in_$i161, in_$p164, in_$p166, in_$i167, in_$i168, in_$p171, in_$p173, in_$i174, in_$p177, in_$p179, in_$i180, in_$i181, in_$p184, in_$p186, in_$i187, in_$p190, in_$p192, in_$i193, in_$i194, in_$p197, in_$p199, in_$i200, in_$p203, in_$p205, in_$i206, in_$i207, in_$p210, in_$p212, in_$i213, in_$p216, in_$p218, in_$i219, in_$i220, in_$p223, in_$p225, in_$i226, in_$p229, in_$p231, in_$i232, in_$i233, in_$p236, in_$p238, in_$i239, in_$p242, in_$p244, in_$i245, in_$i246, in_$p249, in_$p251, in_$i252, in_$p255, in_$p257, in_$i258, in_$i259, in_$p262, in_$p264, in_$i265, in_$p268, in_$p270, in_$i271, in_$i272, in_$p275, in_$p277, in_$i278, in_$p281, in_$p283, in_$i284, in_$i285, in_$p288, in_$p290, in_$i291, in_$p294, in_$p296, in_$i297, in_$i298, in_$p301, in_$p303, in_$i304, in_$p307, in_$p309, in_$i310, in_$i311, in_$p314, in_$p316, in_$i317, in_$p320, in_$p322, in_$i323, in_$i324, in_$p327, in_$p329, in_$i330, in_$p333, in_$p335, in_$i336, in_$i337, in_$p340, in_$p342, in_$i343, in_$p346, in_$p348, in_$i349, in_$i350, in_$p353, in_$p355, in_$i356, in_$p359, in_$p361, in_$i362, in_$i363, in_$p366, in_$p368, in_$i369, in_$p372, in_$p374, in_$i375, in_$i376, in_$p379, in_$p381, in_$i382, in_$p385, in_$p387, in_$i388, in_$i389, in_$p392, in_$p394, in_$i395, in_$p398, in_$p400, in_$i401, in_$i402, in_$p405, in_$p407, in_$i408, in_$p411, in_$p413, in_$i414, in_$i415, in_$p418, in_$p420, in_$i421, in_$p424, in_$p426, in_$i427, in_$i428, in_$p431, in_$p433, in_$i434, in_$p437, in_$p439, in_$i440, in_$i441, in_$p444, in_$p446, in_$i447, in_$p450, in_$p452, in_$i453, in_$i454, in_$p457, in_$p459, in_$i460, in_$p463, in_$p465, in_$i466, in_$i467, in_$p470, in_$p472, in_$i473, in_$p476, in_$p478, in_$i479, in_$i480, in_$p483, in_$p485, in_$i486, in_$p489, in_$p491, in_$i492, in_$i493, in_$p496, in_$p498, in_$i499, in_$p502, in_$p504, in_$i505, in_$i506, in_$p509, in_$p511, in_$i512, in_$p515, in_$p517, in_$i518, in_$i519, in_$p522, in_$p524, in_$i525, in_$p528, in_$p530, in_$i531, in_$i532, in_$p535, in_$p537, in_$i538, in_$p541, in_$p543, in_$i544, in_$i545, in_$p548, in_$p550, in_$i551, in_$p554, in_$p556, in_$i557, in_$i558, in_$p561, in_$p563, in_$i564, in_$p567, in_$p569, in_$i570, in_$i571, in_$p574, in_$p576, in_$i577, in_$p580, in_$p582, in_$i583, in_$i584, in_$p587, in_$p589, in_$i590, in_$p593, in_$p595, in_$i596, in_$i597, in_$p600, in_$p602, in_$i603, in_$p606, in_$p608, in_$i609, in_$i610, in_$p613, in_$p615, in_$i616, in_$p619, in_$p621, in_$i622, in_$i623, in_$p626, in_$p628, in_$i629, in_$p632, in_$p634, in_$i635, in_$i636, in_$p639, in_$p641, in_$i642, in_$p645, in_$p647, in_$i648, in_$i649, in_$p652, in_$p654, in_$i655, in_$p658, in_$p660, in_$i661, in_$i662, in_$p665, in_$p667, in_$i668, in_$p671, in_$p673, in_$i674, in_$i675, in_$p678, in_$p680, in_$i681, in_$p684, in_$p686, in_$i687, in_$i688, in_$p691, in_$p693, in_$i694, in_$p697, in_$p699, in_$i700, in_$i701, in_$p704, in_$p706, in_$i707, in_$p710, in_$p712, in_$i713, in_$i714, in_$p717, in_$p719, in_$i720, in_$p723, in_$p725, in_$i726, in_$i727, in_$p730, in_$p732, in_$i733, in_$p736, in_$p738, in_$i739, in_$i740, in_$p743, in_$p745, in_$i746, in_$p749, in_$p751, in_$i752, in_$i753, in_$p756, in_$p758, in_$i759, in_$p762, in_$p764, in_$i765, in_$i766, in_$p769, in_$p771, in_$i772, in_$p775, in_$p777, in_$i778, in_$i779, in_$p782, in_$p784, in_$i785, in_$p788, in_$p790, in_$i791, in_$i792, in_$p795, in_$p797, in_$i798, in_$p801, in_$p803, in_$i804, in_$i805, in_$p808, in_$p810, in_$i811, in_$p814, in_$p816, in_$i817, in_$i818, in_$p821, in_$p823, in_$i824, in_$p827, in_$p829, in_$i830, in_$i831, in_$p834, in_$p836, in_$i837, in_$p840, in_$p842, in_$i843, in_$i844, in_$p847, in_$p849, in_$i850, in_$p853, in_$p855, in_$i856, in_$i857, in_$p860, in_$p862, in_$i863, in_$p866, in_$p868, in_$i869, in_$i870, in_$p873, in_$p875, in_$i876, in_$p879, in_$p881, in_$i882, in_$i883, in_$p886, in_$p888, in_$i889, in_$p892, in_$p894, in_$i895, in_$i896, in_$p899, in_$p901, in_$i902, in_$p905, in_$p907, in_$i908, in_$i909, in_$p912, in_$p914, in_$i915, in_$p918, in_$p920, in_$i921, in_$i922, in_$p925, in_$p927, in_$i928, in_$p931, in_$p933, in_$i934, in_$i935, in_$p938, in_$p940, in_$i941, in_$p944, in_$p946, in_$i947, in_$i948, in_$p951, in_$p953, in_$i954, in_$p957, in_cmdloc_dummy_var_11, in_cmdloc_dummy_var_12;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1906;

  $bb28:
    assume out_$i120 == 1;
    assume {:verifier.code 0} true;
    out_$i44 := out_$i119;
    goto $bb28_dummy;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    out_$i120 := $slt.i32(out_$i119, 16);
    goto corral_source_split_2027;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i119 := $add.i32(out_$i44, 1);
    call {:si_unique_call 370} {:cexpr "i"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_2026;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p957, out_$i954);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    out_$p957 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(63, 16)), $mul.ref(4, 1));
    goto corral_source_split_2647;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    out_$i954 := $load.i32($M.0, out_$p953);
    goto corral_source_split_2646;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    out_$p953 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2645;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p951, out_$i948);
    goto corral_source_split_2644;

  $bb92:
    assume {:verifier.code 0} true;
    out_$p951 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(63, 16)), $mul.ref(0, 1));
    goto corral_source_split_2643;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    out_$i948 := $add.i32(out_$i947, out_$i935);
    goto corral_source_split_2641;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    out_$i947 := $load.i32($M.0, out_$p946);
    goto corral_source_split_2640;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    out_$p946 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2639;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p944, out_$i941);
    goto corral_source_split_2638;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    out_$p944 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(62, 16)), $mul.ref(4, 1));
    goto corral_source_split_2637;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    out_$i941 := $load.i32($M.0, out_$p940);
    goto corral_source_split_2636;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    out_$p940 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2635;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p938, out_$i935);
    goto corral_source_split_2634;

  $bb91:
    assume {:verifier.code 0} true;
    out_$p938 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(62, 16)), $mul.ref(0, 1));
    goto corral_source_split_2633;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    out_$i935 := $add.i32(out_$i934, out_$i922);
    goto corral_source_split_2631;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    out_$i934 := $load.i32($M.0, out_$p933);
    goto corral_source_split_2630;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    out_$p933 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2629;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p931, out_$i928);
    goto corral_source_split_2628;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    out_$p931 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(61, 16)), $mul.ref(4, 1));
    goto corral_source_split_2627;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    out_$i928 := $load.i32($M.0, out_$p927);
    goto corral_source_split_2626;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    out_$p927 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2625;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p925, out_$i922);
    goto corral_source_split_2624;

  $bb90:
    assume {:verifier.code 0} true;
    out_$p925 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(61, 16)), $mul.ref(0, 1));
    goto corral_source_split_2623;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    out_$i922 := $add.i32(out_$i921, out_$i909);
    goto corral_source_split_2621;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    out_$i921 := $load.i32($M.0, out_$p920);
    goto corral_source_split_2620;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    out_$p920 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2619;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p918, out_$i915);
    goto corral_source_split_2618;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    out_$p918 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(60, 16)), $mul.ref(4, 1));
    goto corral_source_split_2617;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    out_$i915 := $load.i32($M.0, out_$p914);
    goto corral_source_split_2616;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    out_$p914 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2615;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p912, out_$i909);
    goto corral_source_split_2614;

  $bb89:
    assume {:verifier.code 0} true;
    out_$p912 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(60, 16)), $mul.ref(0, 1));
    goto corral_source_split_2613;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    out_$i909 := $add.i32(out_$i908, out_$i896);
    goto corral_source_split_2611;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    out_$i908 := $load.i32($M.0, out_$p907);
    goto corral_source_split_2610;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    out_$p907 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2609;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p905, out_$i902);
    goto corral_source_split_2608;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    out_$p905 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(59, 16)), $mul.ref(4, 1));
    goto corral_source_split_2607;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    out_$i902 := $load.i32($M.0, out_$p901);
    goto corral_source_split_2606;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    out_$p901 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2605;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p899, out_$i896);
    goto corral_source_split_2604;

  $bb88:
    assume {:verifier.code 0} true;
    out_$p899 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(59, 16)), $mul.ref(0, 1));
    goto corral_source_split_2603;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    out_$i896 := $add.i32(out_$i895, out_$i883);
    goto corral_source_split_2601;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    out_$i895 := $load.i32($M.0, out_$p894);
    goto corral_source_split_2600;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    out_$p894 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2599;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p892, out_$i889);
    goto corral_source_split_2598;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    out_$p892 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(58, 16)), $mul.ref(4, 1));
    goto corral_source_split_2597;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    out_$i889 := $load.i32($M.0, out_$p888);
    goto corral_source_split_2596;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    out_$p888 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2595;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p886, out_$i883);
    goto corral_source_split_2594;

  $bb87:
    assume {:verifier.code 0} true;
    out_$p886 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(58, 16)), $mul.ref(0, 1));
    goto corral_source_split_2593;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    out_$i883 := $add.i32(out_$i882, out_$i870);
    goto corral_source_split_2591;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    out_$i882 := $load.i32($M.0, out_$p881);
    goto corral_source_split_2590;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    out_$p881 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2589;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p879, out_$i876);
    goto corral_source_split_2588;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    out_$p879 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(57, 16)), $mul.ref(4, 1));
    goto corral_source_split_2587;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    out_$i876 := $load.i32($M.0, out_$p875);
    goto corral_source_split_2586;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    out_$p875 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2585;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p873, out_$i870);
    goto corral_source_split_2584;

  $bb86:
    assume {:verifier.code 0} true;
    out_$p873 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(57, 16)), $mul.ref(0, 1));
    goto corral_source_split_2583;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    out_$i870 := $add.i32(out_$i869, out_$i857);
    goto corral_source_split_2581;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    out_$i869 := $load.i32($M.0, out_$p868);
    goto corral_source_split_2580;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    out_$p868 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2579;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p866, out_$i863);
    goto corral_source_split_2578;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    out_$p866 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(56, 16)), $mul.ref(4, 1));
    goto corral_source_split_2577;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    out_$i863 := $load.i32($M.0, out_$p862);
    goto corral_source_split_2576;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    out_$p862 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2575;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p860, out_$i857);
    goto corral_source_split_2574;

  $bb85:
    assume {:verifier.code 0} true;
    out_$p860 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(56, 16)), $mul.ref(0, 1));
    goto corral_source_split_2573;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    out_$i857 := $add.i32(out_$i856, out_$i844);
    goto corral_source_split_2571;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    out_$i856 := $load.i32($M.0, out_$p855);
    goto corral_source_split_2570;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    out_$p855 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2569;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p853, out_$i850);
    goto corral_source_split_2568;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    out_$p853 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(55, 16)), $mul.ref(4, 1));
    goto corral_source_split_2567;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    out_$i850 := $load.i32($M.0, out_$p849);
    goto corral_source_split_2566;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    out_$p849 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2565;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p847, out_$i844);
    goto corral_source_split_2564;

  $bb84:
    assume {:verifier.code 0} true;
    out_$p847 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(55, 16)), $mul.ref(0, 1));
    goto corral_source_split_2563;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    out_$i844 := $add.i32(out_$i843, out_$i831);
    goto corral_source_split_2561;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    out_$i843 := $load.i32($M.0, out_$p842);
    goto corral_source_split_2560;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    out_$p842 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2559;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p840, out_$i837);
    goto corral_source_split_2558;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    out_$p840 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(54, 16)), $mul.ref(4, 1));
    goto corral_source_split_2557;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    out_$i837 := $load.i32($M.0, out_$p836);
    goto corral_source_split_2556;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    out_$p836 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2555;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p834, out_$i831);
    goto corral_source_split_2554;

  $bb83:
    assume {:verifier.code 0} true;
    out_$p834 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(54, 16)), $mul.ref(0, 1));
    goto corral_source_split_2553;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    out_$i831 := $add.i32(out_$i830, out_$i818);
    goto corral_source_split_2551;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    out_$i830 := $load.i32($M.0, out_$p829);
    goto corral_source_split_2550;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    out_$p829 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2549;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p827, out_$i824);
    goto corral_source_split_2548;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    out_$p827 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(53, 16)), $mul.ref(4, 1));
    goto corral_source_split_2547;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    out_$i824 := $load.i32($M.0, out_$p823);
    goto corral_source_split_2546;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    out_$p823 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2545;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p821, out_$i818);
    goto corral_source_split_2544;

  $bb82:
    assume {:verifier.code 0} true;
    out_$p821 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(53, 16)), $mul.ref(0, 1));
    goto corral_source_split_2543;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    out_$i818 := $add.i32(out_$i817, out_$i805);
    goto corral_source_split_2541;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    out_$i817 := $load.i32($M.0, out_$p816);
    goto corral_source_split_2540;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    out_$p816 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2539;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p814, out_$i811);
    goto corral_source_split_2538;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    out_$p814 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(52, 16)), $mul.ref(4, 1));
    goto corral_source_split_2537;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    out_$i811 := $load.i32($M.0, out_$p810);
    goto corral_source_split_2536;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    out_$p810 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2535;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p808, out_$i805);
    goto corral_source_split_2534;

  $bb81:
    assume {:verifier.code 0} true;
    out_$p808 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(52, 16)), $mul.ref(0, 1));
    goto corral_source_split_2533;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    out_$i805 := $add.i32(out_$i804, out_$i792);
    goto corral_source_split_2531;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    out_$i804 := $load.i32($M.0, out_$p803);
    goto corral_source_split_2530;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    out_$p803 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2529;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p801, out_$i798);
    goto corral_source_split_2528;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    out_$p801 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(51, 16)), $mul.ref(4, 1));
    goto corral_source_split_2527;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    out_$i798 := $load.i32($M.0, out_$p797);
    goto corral_source_split_2526;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    out_$p797 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2525;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p795, out_$i792);
    goto corral_source_split_2524;

  $bb80:
    assume {:verifier.code 0} true;
    out_$p795 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(51, 16)), $mul.ref(0, 1));
    goto corral_source_split_2523;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    out_$i792 := $add.i32(out_$i791, out_$i779);
    goto corral_source_split_2521;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    out_$i791 := $load.i32($M.0, out_$p790);
    goto corral_source_split_2520;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    out_$p790 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2519;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p788, out_$i785);
    goto corral_source_split_2518;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    out_$p788 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(50, 16)), $mul.ref(4, 1));
    goto corral_source_split_2517;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    out_$i785 := $load.i32($M.0, out_$p784);
    goto corral_source_split_2516;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    out_$p784 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2515;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p782, out_$i779);
    goto corral_source_split_2514;

  $bb79:
    assume {:verifier.code 0} true;
    out_$p782 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(50, 16)), $mul.ref(0, 1));
    goto corral_source_split_2513;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    out_$i779 := $add.i32(out_$i778, out_$i766);
    goto corral_source_split_2511;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    out_$i778 := $load.i32($M.0, out_$p777);
    goto corral_source_split_2510;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    out_$p777 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2509;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p775, out_$i772);
    goto corral_source_split_2508;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    out_$p775 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(49, 16)), $mul.ref(4, 1));
    goto corral_source_split_2507;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    out_$i772 := $load.i32($M.0, out_$p771);
    goto corral_source_split_2506;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    out_$p771 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2505;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p769, out_$i766);
    goto corral_source_split_2504;

  $bb78:
    assume {:verifier.code 0} true;
    out_$p769 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(49, 16)), $mul.ref(0, 1));
    goto corral_source_split_2503;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    out_$i766 := $add.i32(out_$i765, out_$i753);
    goto corral_source_split_2501;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    out_$i765 := $load.i32($M.0, out_$p764);
    goto corral_source_split_2500;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    out_$p764 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2499;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p762, out_$i759);
    goto corral_source_split_2498;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    out_$p762 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(48, 16)), $mul.ref(4, 1));
    goto corral_source_split_2497;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    out_$i759 := $load.i32($M.0, out_$p758);
    goto corral_source_split_2496;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    out_$p758 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2495;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p756, out_$i753);
    goto corral_source_split_2494;

  $bb77:
    assume {:verifier.code 0} true;
    out_$p756 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(48, 16)), $mul.ref(0, 1));
    goto corral_source_split_2493;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    out_$i753 := $add.i32(out_$i752, out_$i740);
    goto corral_source_split_2491;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    out_$i752 := $load.i32($M.0, out_$p751);
    goto corral_source_split_2490;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    out_$p751 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2489;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p749, out_$i746);
    goto corral_source_split_2488;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    out_$p749 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(47, 16)), $mul.ref(4, 1));
    goto corral_source_split_2487;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    out_$i746 := $load.i32($M.0, out_$p745);
    goto corral_source_split_2486;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    out_$p745 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2485;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p743, out_$i740);
    goto corral_source_split_2484;

  $bb76:
    assume {:verifier.code 0} true;
    out_$p743 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(47, 16)), $mul.ref(0, 1));
    goto corral_source_split_2483;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    out_$i740 := $add.i32(out_$i739, out_$i727);
    goto corral_source_split_2481;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    out_$i739 := $load.i32($M.0, out_$p738);
    goto corral_source_split_2480;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    out_$p738 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2479;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p736, out_$i733);
    goto corral_source_split_2478;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    out_$p736 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(46, 16)), $mul.ref(4, 1));
    goto corral_source_split_2477;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    out_$i733 := $load.i32($M.0, out_$p732);
    goto corral_source_split_2476;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    out_$p732 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2475;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p730, out_$i727);
    goto corral_source_split_2474;

  $bb75:
    assume {:verifier.code 0} true;
    out_$p730 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(46, 16)), $mul.ref(0, 1));
    goto corral_source_split_2473;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    out_$i727 := $add.i32(out_$i726, out_$i714);
    goto corral_source_split_2471;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    out_$i726 := $load.i32($M.0, out_$p725);
    goto corral_source_split_2470;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    out_$p725 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2469;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p723, out_$i720);
    goto corral_source_split_2468;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    out_$p723 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(45, 16)), $mul.ref(4, 1));
    goto corral_source_split_2467;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    out_$i720 := $load.i32($M.0, out_$p719);
    goto corral_source_split_2466;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    out_$p719 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2465;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p717, out_$i714);
    goto corral_source_split_2464;

  $bb74:
    assume {:verifier.code 0} true;
    out_$p717 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(45, 16)), $mul.ref(0, 1));
    goto corral_source_split_2463;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    out_$i714 := $add.i32(out_$i713, out_$i701);
    goto corral_source_split_2461;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    out_$i713 := $load.i32($M.0, out_$p712);
    goto corral_source_split_2460;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    out_$p712 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2459;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p710, out_$i707);
    goto corral_source_split_2458;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    out_$p710 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(44, 16)), $mul.ref(4, 1));
    goto corral_source_split_2457;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    out_$i707 := $load.i32($M.0, out_$p706);
    goto corral_source_split_2456;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    out_$p706 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2455;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p704, out_$i701);
    goto corral_source_split_2454;

  $bb73:
    assume {:verifier.code 0} true;
    out_$p704 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(44, 16)), $mul.ref(0, 1));
    goto corral_source_split_2453;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    out_$i701 := $add.i32(out_$i700, out_$i688);
    goto corral_source_split_2451;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    out_$i700 := $load.i32($M.0, out_$p699);
    goto corral_source_split_2450;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    out_$p699 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2449;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p697, out_$i694);
    goto corral_source_split_2448;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    out_$p697 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(43, 16)), $mul.ref(4, 1));
    goto corral_source_split_2447;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    out_$i694 := $load.i32($M.0, out_$p693);
    goto corral_source_split_2446;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    out_$p693 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2445;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p691, out_$i688);
    goto corral_source_split_2444;

  $bb72:
    assume {:verifier.code 0} true;
    out_$p691 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(43, 16)), $mul.ref(0, 1));
    goto corral_source_split_2443;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    out_$i688 := $add.i32(out_$i687, out_$i675);
    goto corral_source_split_2441;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    out_$i687 := $load.i32($M.0, out_$p686);
    goto corral_source_split_2440;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    out_$p686 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2439;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p684, out_$i681);
    goto corral_source_split_2438;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    out_$p684 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(42, 16)), $mul.ref(4, 1));
    goto corral_source_split_2437;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    out_$i681 := $load.i32($M.0, out_$p680);
    goto corral_source_split_2436;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    out_$p680 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2435;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p678, out_$i675);
    goto corral_source_split_2434;

  $bb71:
    assume {:verifier.code 0} true;
    out_$p678 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(42, 16)), $mul.ref(0, 1));
    goto corral_source_split_2433;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    out_$i675 := $add.i32(out_$i674, out_$i662);
    goto corral_source_split_2431;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    out_$i674 := $load.i32($M.0, out_$p673);
    goto corral_source_split_2430;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    out_$p673 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2429;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p671, out_$i668);
    goto corral_source_split_2428;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    out_$p671 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(41, 16)), $mul.ref(4, 1));
    goto corral_source_split_2427;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    out_$i668 := $load.i32($M.0, out_$p667);
    goto corral_source_split_2426;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    out_$p667 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2425;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p665, out_$i662);
    goto corral_source_split_2424;

  $bb70:
    assume {:verifier.code 0} true;
    out_$p665 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(41, 16)), $mul.ref(0, 1));
    goto corral_source_split_2423;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    out_$i662 := $add.i32(out_$i661, out_$i649);
    goto corral_source_split_2421;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    out_$i661 := $load.i32($M.0, out_$p660);
    goto corral_source_split_2420;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    out_$p660 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2419;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p658, out_$i655);
    goto corral_source_split_2418;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    out_$p658 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(40, 16)), $mul.ref(4, 1));
    goto corral_source_split_2417;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    out_$i655 := $load.i32($M.0, out_$p654);
    goto corral_source_split_2416;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    out_$p654 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2415;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p652, out_$i649);
    goto corral_source_split_2414;

  $bb69:
    assume {:verifier.code 0} true;
    out_$p652 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(40, 16)), $mul.ref(0, 1));
    goto corral_source_split_2413;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    out_$i649 := $add.i32(out_$i648, out_$i636);
    goto corral_source_split_2411;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    out_$i648 := $load.i32($M.0, out_$p647);
    goto corral_source_split_2410;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    out_$p647 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2409;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p645, out_$i642);
    goto corral_source_split_2408;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    out_$p645 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(39, 16)), $mul.ref(4, 1));
    goto corral_source_split_2407;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    out_$i642 := $load.i32($M.0, out_$p641);
    goto corral_source_split_2406;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    out_$p641 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2405;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p639, out_$i636);
    goto corral_source_split_2404;

  $bb68:
    assume {:verifier.code 0} true;
    out_$p639 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(39, 16)), $mul.ref(0, 1));
    goto corral_source_split_2403;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    out_$i636 := $add.i32(out_$i635, out_$i623);
    goto corral_source_split_2401;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    out_$i635 := $load.i32($M.0, out_$p634);
    goto corral_source_split_2400;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    out_$p634 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2399;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p632, out_$i629);
    goto corral_source_split_2398;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    out_$p632 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(38, 16)), $mul.ref(4, 1));
    goto corral_source_split_2397;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    out_$i629 := $load.i32($M.0, out_$p628);
    goto corral_source_split_2396;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    out_$p628 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2395;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p626, out_$i623);
    goto corral_source_split_2394;

  $bb67:
    assume {:verifier.code 0} true;
    out_$p626 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(38, 16)), $mul.ref(0, 1));
    goto corral_source_split_2393;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    out_$i623 := $add.i32(out_$i622, out_$i610);
    goto corral_source_split_2391;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    out_$i622 := $load.i32($M.0, out_$p621);
    goto corral_source_split_2390;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    out_$p621 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2389;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p619, out_$i616);
    goto corral_source_split_2388;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    out_$p619 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(37, 16)), $mul.ref(4, 1));
    goto corral_source_split_2387;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    out_$i616 := $load.i32($M.0, out_$p615);
    goto corral_source_split_2386;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    out_$p615 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2385;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p613, out_$i610);
    goto corral_source_split_2384;

  $bb66:
    assume {:verifier.code 0} true;
    out_$p613 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(37, 16)), $mul.ref(0, 1));
    goto corral_source_split_2383;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    out_$i610 := $add.i32(out_$i609, out_$i597);
    goto corral_source_split_2381;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    out_$i609 := $load.i32($M.0, out_$p608);
    goto corral_source_split_2380;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    out_$p608 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2379;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p606, out_$i603);
    goto corral_source_split_2378;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    out_$p606 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(36, 16)), $mul.ref(4, 1));
    goto corral_source_split_2377;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    out_$i603 := $load.i32($M.0, out_$p602);
    goto corral_source_split_2376;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    out_$p602 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2375;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p600, out_$i597);
    goto corral_source_split_2374;

  $bb65:
    assume {:verifier.code 0} true;
    out_$p600 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(36, 16)), $mul.ref(0, 1));
    goto corral_source_split_2373;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    out_$i597 := $add.i32(out_$i596, out_$i584);
    goto corral_source_split_2371;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    out_$i596 := $load.i32($M.0, out_$p595);
    goto corral_source_split_2370;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    out_$p595 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2369;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p593, out_$i590);
    goto corral_source_split_2368;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    out_$p593 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(35, 16)), $mul.ref(4, 1));
    goto corral_source_split_2367;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    out_$i590 := $load.i32($M.0, out_$p589);
    goto corral_source_split_2366;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    out_$p589 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2365;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p587, out_$i584);
    goto corral_source_split_2364;

  $bb64:
    assume {:verifier.code 0} true;
    out_$p587 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(35, 16)), $mul.ref(0, 1));
    goto corral_source_split_2363;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    out_$i584 := $add.i32(out_$i583, out_$i571);
    goto corral_source_split_2361;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    out_$i583 := $load.i32($M.0, out_$p582);
    goto corral_source_split_2360;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    out_$p582 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2359;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p580, out_$i577);
    goto corral_source_split_2358;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    out_$p580 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(34, 16)), $mul.ref(4, 1));
    goto corral_source_split_2357;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    out_$i577 := $load.i32($M.0, out_$p576);
    goto corral_source_split_2356;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    out_$p576 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2355;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p574, out_$i571);
    goto corral_source_split_2354;

  $bb63:
    assume {:verifier.code 0} true;
    out_$p574 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(34, 16)), $mul.ref(0, 1));
    goto corral_source_split_2353;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    out_$i571 := $add.i32(out_$i570, out_$i558);
    goto corral_source_split_2351;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    out_$i570 := $load.i32($M.0, out_$p569);
    goto corral_source_split_2350;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    out_$p569 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2349;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p567, out_$i564);
    goto corral_source_split_2348;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    out_$p567 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(33, 16)), $mul.ref(4, 1));
    goto corral_source_split_2347;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    out_$i564 := $load.i32($M.0, out_$p563);
    goto corral_source_split_2346;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    out_$p563 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2345;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p561, out_$i558);
    goto corral_source_split_2344;

  $bb62:
    assume {:verifier.code 0} true;
    out_$p561 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(33, 16)), $mul.ref(0, 1));
    goto corral_source_split_2343;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    out_$i558 := $add.i32(out_$i557, out_$i545);
    goto corral_source_split_2341;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    out_$i557 := $load.i32($M.0, out_$p556);
    goto corral_source_split_2340;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    out_$p556 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2339;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p554, out_$i551);
    goto corral_source_split_2338;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    out_$p554 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(32, 16)), $mul.ref(4, 1));
    goto corral_source_split_2337;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    out_$i551 := $load.i32($M.0, out_$p550);
    goto corral_source_split_2336;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    out_$p550 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2335;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p548, out_$i545);
    goto corral_source_split_2334;

  $bb61:
    assume {:verifier.code 0} true;
    out_$p548 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(32, 16)), $mul.ref(0, 1));
    goto corral_source_split_2333;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    out_$i545 := $add.i32(out_$i544, out_$i532);
    goto corral_source_split_2331;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    out_$i544 := $load.i32($M.0, out_$p543);
    goto corral_source_split_2330;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    out_$p543 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2329;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p541, out_$i538);
    goto corral_source_split_2328;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    out_$p541 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(4, 1));
    goto corral_source_split_2327;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    out_$i538 := $load.i32($M.0, out_$p537);
    goto corral_source_split_2326;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    out_$p537 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2325;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p535, out_$i532);
    goto corral_source_split_2324;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p535 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(31, 16)), $mul.ref(0, 1));
    goto corral_source_split_2323;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    out_$i532 := $add.i32(out_$i531, out_$i519);
    goto corral_source_split_2321;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    out_$i531 := $load.i32($M.0, out_$p530);
    goto corral_source_split_2320;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    out_$p530 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2319;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p528, out_$i525);
    goto corral_source_split_2318;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    out_$p528 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(4, 1));
    goto corral_source_split_2317;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    out_$i525 := $load.i32($M.0, out_$p524);
    goto corral_source_split_2316;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    out_$p524 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2315;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p522, out_$i519);
    goto corral_source_split_2314;

  $bb59:
    assume {:verifier.code 0} true;
    out_$p522 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(30, 16)), $mul.ref(0, 1));
    goto corral_source_split_2313;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    out_$i519 := $add.i32(out_$i518, out_$i506);
    goto corral_source_split_2311;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    out_$i518 := $load.i32($M.0, out_$p517);
    goto corral_source_split_2310;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    out_$p517 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2309;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p515, out_$i512);
    goto corral_source_split_2308;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    out_$p515 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(4, 1));
    goto corral_source_split_2307;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    out_$i512 := $load.i32($M.0, out_$p511);
    goto corral_source_split_2306;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    out_$p511 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2305;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p509, out_$i506);
    goto corral_source_split_2304;

  $bb58:
    assume {:verifier.code 0} true;
    out_$p509 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(29, 16)), $mul.ref(0, 1));
    goto corral_source_split_2303;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    out_$i506 := $add.i32(out_$i505, out_$i493);
    goto corral_source_split_2301;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    out_$i505 := $load.i32($M.0, out_$p504);
    goto corral_source_split_2300;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    out_$p504 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2299;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p502, out_$i499);
    goto corral_source_split_2298;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    out_$p502 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(4, 1));
    goto corral_source_split_2297;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    out_$i499 := $load.i32($M.0, out_$p498);
    goto corral_source_split_2296;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    out_$p498 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2295;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p496, out_$i493);
    goto corral_source_split_2294;

  $bb57:
    assume {:verifier.code 0} true;
    out_$p496 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(28, 16)), $mul.ref(0, 1));
    goto corral_source_split_2293;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    out_$i493 := $add.i32(out_$i492, out_$i480);
    goto corral_source_split_2291;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    out_$i492 := $load.i32($M.0, out_$p491);
    goto corral_source_split_2290;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    out_$p491 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2289;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p489, out_$i486);
    goto corral_source_split_2288;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    out_$p489 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(4, 1));
    goto corral_source_split_2287;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    out_$i486 := $load.i32($M.0, out_$p485);
    goto corral_source_split_2286;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    out_$p485 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2285;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p483, out_$i480);
    goto corral_source_split_2284;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p483 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(27, 16)), $mul.ref(0, 1));
    goto corral_source_split_2283;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    out_$i480 := $add.i32(out_$i479, out_$i467);
    goto corral_source_split_2281;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    out_$i479 := $load.i32($M.0, out_$p478);
    goto corral_source_split_2280;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    out_$p478 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2279;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p476, out_$i473);
    goto corral_source_split_2278;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    out_$p476 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(4, 1));
    goto corral_source_split_2277;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    out_$i473 := $load.i32($M.0, out_$p472);
    goto corral_source_split_2276;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    out_$p472 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2275;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p470, out_$i467);
    goto corral_source_split_2274;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p470 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(26, 16)), $mul.ref(0, 1));
    goto corral_source_split_2273;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    out_$i467 := $add.i32(out_$i466, out_$i454);
    goto corral_source_split_2271;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    out_$i466 := $load.i32($M.0, out_$p465);
    goto corral_source_split_2270;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    out_$p465 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2269;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p463, out_$i460);
    goto corral_source_split_2268;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    out_$p463 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(4, 1));
    goto corral_source_split_2267;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    out_$i460 := $load.i32($M.0, out_$p459);
    goto corral_source_split_2266;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    out_$p459 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2265;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p457, out_$i454);
    goto corral_source_split_2264;

  $bb54:
    assume {:verifier.code 0} true;
    out_$p457 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(25, 16)), $mul.ref(0, 1));
    goto corral_source_split_2263;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    out_$i454 := $add.i32(out_$i453, out_$i441);
    goto corral_source_split_2261;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    out_$i453 := $load.i32($M.0, out_$p452);
    goto corral_source_split_2260;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    out_$p452 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2259;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p450, out_$i447);
    goto corral_source_split_2258;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    out_$p450 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(4, 1));
    goto corral_source_split_2257;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    out_$i447 := $load.i32($M.0, out_$p446);
    goto corral_source_split_2256;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    out_$p446 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2255;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p444, out_$i441);
    goto corral_source_split_2254;

  $bb53:
    assume {:verifier.code 0} true;
    out_$p444 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(24, 16)), $mul.ref(0, 1));
    goto corral_source_split_2253;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    out_$i441 := $add.i32(out_$i440, out_$i428);
    goto corral_source_split_2251;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    out_$i440 := $load.i32($M.0, out_$p439);
    goto corral_source_split_2250;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    out_$p439 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2249;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p437, out_$i434);
    goto corral_source_split_2248;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    out_$p437 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(4, 1));
    goto corral_source_split_2247;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    out_$i434 := $load.i32($M.0, out_$p433);
    goto corral_source_split_2246;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    out_$p433 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2245;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p431, out_$i428);
    goto corral_source_split_2244;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p431 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(23, 16)), $mul.ref(0, 1));
    goto corral_source_split_2243;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    out_$i428 := $add.i32(out_$i427, out_$i415);
    goto corral_source_split_2241;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    out_$i427 := $load.i32($M.0, out_$p426);
    goto corral_source_split_2240;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    out_$p426 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2239;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p424, out_$i421);
    goto corral_source_split_2238;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    out_$p424 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(4, 1));
    goto corral_source_split_2237;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    out_$i421 := $load.i32($M.0, out_$p420);
    goto corral_source_split_2236;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    out_$p420 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2235;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p418, out_$i415);
    goto corral_source_split_2234;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p418 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(22, 16)), $mul.ref(0, 1));
    goto corral_source_split_2233;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    out_$i415 := $add.i32(out_$i414, out_$i402);
    goto corral_source_split_2231;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    out_$i414 := $load.i32($M.0, out_$p413);
    goto corral_source_split_2230;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    out_$p413 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2229;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p411, out_$i408);
    goto corral_source_split_2228;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    out_$p411 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(4, 1));
    goto corral_source_split_2227;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    out_$i408 := $load.i32($M.0, out_$p407);
    goto corral_source_split_2226;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    out_$p407 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2225;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p405, out_$i402);
    goto corral_source_split_2224;

  $bb50:
    assume {:verifier.code 0} true;
    out_$p405 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(21, 16)), $mul.ref(0, 1));
    goto corral_source_split_2223;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    out_$i402 := $add.i32(out_$i401, out_$i389);
    goto corral_source_split_2221;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    out_$i401 := $load.i32($M.0, out_$p400);
    goto corral_source_split_2220;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    out_$p400 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2219;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p398, out_$i395);
    goto corral_source_split_2218;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    out_$p398 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(4, 1));
    goto corral_source_split_2217;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    out_$i395 := $load.i32($M.0, out_$p394);
    goto corral_source_split_2216;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    out_$p394 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2215;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p392, out_$i389);
    goto corral_source_split_2214;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p392 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(20, 16)), $mul.ref(0, 1));
    goto corral_source_split_2213;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    out_$i389 := $add.i32(out_$i388, out_$i376);
    goto corral_source_split_2211;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    out_$i388 := $load.i32($M.0, out_$p387);
    goto corral_source_split_2210;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    out_$p387 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2209;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p385, out_$i382);
    goto corral_source_split_2208;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    out_$p385 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(4, 1));
    goto corral_source_split_2207;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    out_$i382 := $load.i32($M.0, out_$p381);
    goto corral_source_split_2206;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    out_$p381 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2205;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p379, out_$i376);
    goto corral_source_split_2204;

  $bb48:
    assume {:verifier.code 0} true;
    out_$p379 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(19, 16)), $mul.ref(0, 1));
    goto corral_source_split_2203;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    out_$i376 := $add.i32(out_$i375, out_$i363);
    goto corral_source_split_2201;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    out_$i375 := $load.i32($M.0, out_$p374);
    goto corral_source_split_2200;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    out_$p374 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2199;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p372, out_$i369);
    goto corral_source_split_2198;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    out_$p372 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(4, 1));
    goto corral_source_split_2197;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    out_$i369 := $load.i32($M.0, out_$p368);
    goto corral_source_split_2196;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    out_$p368 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2195;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p366, out_$i363);
    goto corral_source_split_2194;

  $bb47:
    assume {:verifier.code 0} true;
    out_$p366 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(18, 16)), $mul.ref(0, 1));
    goto corral_source_split_2193;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    out_$i363 := $add.i32(out_$i362, out_$i350);
    goto corral_source_split_2191;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    out_$i362 := $load.i32($M.0, out_$p361);
    goto corral_source_split_2190;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    out_$p361 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2189;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p359, out_$i356);
    goto corral_source_split_2188;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    out_$p359 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(4, 1));
    goto corral_source_split_2187;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    out_$i356 := $load.i32($M.0, out_$p355);
    goto corral_source_split_2186;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    out_$p355 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2185;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p353, out_$i350);
    goto corral_source_split_2184;

  $bb46:
    assume {:verifier.code 0} true;
    out_$p353 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(17, 16)), $mul.ref(0, 1));
    goto corral_source_split_2183;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    out_$i350 := $add.i32(out_$i349, out_$i337);
    goto corral_source_split_2181;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    out_$i349 := $load.i32($M.0, out_$p348);
    goto corral_source_split_2180;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    out_$p348 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2179;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p346, out_$i343);
    goto corral_source_split_2178;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    out_$p346 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(4, 1));
    goto corral_source_split_2177;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    out_$i343 := $load.i32($M.0, out_$p342);
    goto corral_source_split_2176;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    out_$p342 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2175;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p340, out_$i337);
    goto corral_source_split_2174;

  $bb45:
    assume {:verifier.code 0} true;
    out_$p340 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(16, 16)), $mul.ref(0, 1));
    goto corral_source_split_2173;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    out_$i337 := $add.i32(out_$i336, out_$i324);
    goto corral_source_split_2171;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    out_$i336 := $load.i32($M.0, out_$p335);
    goto corral_source_split_2170;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    out_$p335 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2169;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p333, out_$i330);
    goto corral_source_split_2168;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    out_$p333 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(4, 1));
    goto corral_source_split_2167;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    out_$i330 := $load.i32($M.0, out_$p329);
    goto corral_source_split_2166;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    out_$p329 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2165;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p327, out_$i324);
    goto corral_source_split_2164;

  $bb44:
    assume {:verifier.code 0} true;
    out_$p327 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_2163;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    out_$i324 := $add.i32(out_$i323, out_$i311);
    goto corral_source_split_2161;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    out_$i323 := $load.i32($M.0, out_$p322);
    goto corral_source_split_2160;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    out_$p322 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2159;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p320, out_$i317);
    goto corral_source_split_2158;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    out_$p320 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(4, 1));
    goto corral_source_split_2157;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    out_$i317 := $load.i32($M.0, out_$p316);
    goto corral_source_split_2156;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    out_$p316 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2155;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p314, out_$i311);
    goto corral_source_split_2154;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p314 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_2153;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    out_$i311 := $add.i32(out_$i310, out_$i298);
    goto corral_source_split_2151;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    out_$i310 := $load.i32($M.0, out_$p309);
    goto corral_source_split_2150;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    out_$p309 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2149;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p307, out_$i304);
    goto corral_source_split_2148;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    out_$p307 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(4, 1));
    goto corral_source_split_2147;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    out_$i304 := $load.i32($M.0, out_$p303);
    goto corral_source_split_2146;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    out_$p303 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2145;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p301, out_$i298);
    goto corral_source_split_2144;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p301 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_2143;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    out_$i298 := $add.i32(out_$i297, out_$i285);
    goto corral_source_split_2141;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    out_$i297 := $load.i32($M.0, out_$p296);
    goto corral_source_split_2140;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    out_$p296 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2139;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p294, out_$i291);
    goto corral_source_split_2138;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    out_$p294 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(4, 1));
    goto corral_source_split_2137;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    out_$i291 := $load.i32($M.0, out_$p290);
    goto corral_source_split_2136;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    out_$p290 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2135;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p288, out_$i285);
    goto corral_source_split_2134;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p288 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_2133;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    out_$i285 := $add.i32(out_$i284, out_$i272);
    goto corral_source_split_2131;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    out_$i284 := $load.i32($M.0, out_$p283);
    goto corral_source_split_2130;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    out_$p283 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2129;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p281, out_$i278);
    goto corral_source_split_2128;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    out_$p281 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(4, 1));
    goto corral_source_split_2127;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    out_$i278 := $load.i32($M.0, out_$p277);
    goto corral_source_split_2126;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    out_$p277 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2125;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p275, out_$i272);
    goto corral_source_split_2124;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p275 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_2123;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    out_$i272 := $add.i32(out_$i271, out_$i259);
    goto corral_source_split_2121;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    out_$i271 := $load.i32($M.0, out_$p270);
    goto corral_source_split_2120;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    out_$p270 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2119;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p268, out_$i265);
    goto corral_source_split_2118;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    out_$p268 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(4, 1));
    goto corral_source_split_2117;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    out_$i265 := $load.i32($M.0, out_$p264);
    goto corral_source_split_2116;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    out_$p264 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2115;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p262, out_$i259);
    goto corral_source_split_2114;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p262 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_2113;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    out_$i259 := $add.i32(out_$i258, out_$i246);
    goto corral_source_split_2111;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    out_$i258 := $load.i32($M.0, out_$p257);
    goto corral_source_split_2110;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    out_$p257 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2109;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p255, out_$i252);
    goto corral_source_split_2108;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    out_$p255 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_2107;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    out_$i252 := $load.i32($M.0, out_$p251);
    goto corral_source_split_2106;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    out_$p251 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2105;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p249, out_$i246);
    goto corral_source_split_2104;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p249 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_2103;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    out_$i246 := $add.i32(out_$i245, out_$i233);
    goto corral_source_split_2101;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    out_$i245 := $load.i32($M.0, out_$p244);
    goto corral_source_split_2100;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    out_$p244 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2099;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p242, out_$i239);
    goto corral_source_split_2098;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    out_$p242 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_2097;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    out_$i239 := $load.i32($M.0, out_$p238);
    goto corral_source_split_2096;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    out_$p238 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2095;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p236, out_$i233);
    goto corral_source_split_2094;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p236 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_2093;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    out_$i233 := $add.i32(out_$i232, out_$i220);
    goto corral_source_split_2091;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    out_$i232 := $load.i32($M.0, out_$p231);
    goto corral_source_split_2090;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    out_$p231 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2089;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p229, out_$i226);
    goto corral_source_split_2088;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    out_$p229 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_2087;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    out_$i226 := $load.i32($M.0, out_$p225);
    goto corral_source_split_2086;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    out_$p225 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2085;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p223, out_$i220);
    goto corral_source_split_2084;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p223 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_2083;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    out_$i220 := $add.i32(out_$i219, out_$i207);
    goto corral_source_split_2081;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    out_$i219 := $load.i32($M.0, out_$p218);
    goto corral_source_split_2080;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    out_$p218 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2079;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p216, out_$i213);
    goto corral_source_split_2078;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    out_$p216 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_2077;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    out_$i213 := $load.i32($M.0, out_$p212);
    goto corral_source_split_2076;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    out_$p212 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2075;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p210, out_$i207);
    goto corral_source_split_2074;

  $bb35:
    assume {:verifier.code 0} true;
    out_$p210 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_2073;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    out_$i207 := $add.i32(out_$i206, out_$i194);
    goto corral_source_split_2071;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    out_$i206 := $load.i32($M.0, out_$p205);
    goto corral_source_split_2070;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    out_$p205 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2069;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p203, out_$i200);
    goto corral_source_split_2068;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    out_$p203 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_2067;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    out_$i200 := $load.i32($M.0, out_$p199);
    goto corral_source_split_2066;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    out_$p199 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2065;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p197, out_$i194);
    goto corral_source_split_2064;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p197 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_2063;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    out_$i194 := $add.i32(out_$i193, out_$i181);
    goto corral_source_split_2061;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    out_$i193 := $load.i32($M.0, out_$p192);
    goto corral_source_split_2060;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    out_$p192 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2059;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p190, out_$i187);
    goto corral_source_split_2058;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    out_$p190 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_2057;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    out_$i187 := $load.i32($M.0, out_$p186);
    goto corral_source_split_2056;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    out_$p186 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2055;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p184, out_$i181);
    goto corral_source_split_2054;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p184 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_2053;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    out_$i181 := $add.i32(out_$i180, out_$i168);
    goto corral_source_split_2051;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    out_$i180 := $load.i32($M.0, out_$p179);
    goto corral_source_split_2050;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    out_$p179 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2049;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p177, out_$i174);
    goto corral_source_split_2048;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    out_$p177 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_2047;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    out_$i174 := $load.i32($M.0, out_$p173);
    goto corral_source_split_2046;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    out_$p173 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2045;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p171, out_$i168);
    goto corral_source_split_2044;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_2043;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    out_$i168 := $add.i32(out_$i167, out_$i155);
    goto corral_source_split_2041;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    out_$i167 := $load.i32($M.0, out_$p166);
    goto corral_source_split_2040;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2039;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p164, out_$i161);
    goto corral_source_split_2038;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_2037;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    out_$i161 := $load.i32($M.0, out_$p160);
    goto corral_source_split_2036;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2035;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p158, out_$i155);
    goto corral_source_split_2034;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_2033;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    out_$i155 := $add.i32(out_$i154, out_$i118);
    goto corral_source_split_2024;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    out_$i154 := $load.i32($M.0, out_$p153);
    goto corral_source_split_2023;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2022;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p151, out_$i148);
    goto corral_source_split_2021;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_2020;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    out_$i148 := $load.i32($M.0, out_$p147);
    goto corral_source_split_2019;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2018;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p145, out_$i118);
    goto corral_source_split_2017;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_2016;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i32($M.0, out_$p117);
    call {:si_unique_call 369} {:cexpr "k"} boogie_si_record_i32(out_$i118);
    goto corral_source_split_2014;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2013;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p115, out_$i112);
    goto corral_source_split_2012;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2011;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i32($M.0, out_$p111);
    goto corral_source_split_2010;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2009;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p109, 0);
    goto corral_source_split_2008;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2007;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p106, 6);
    goto corral_source_split_2005;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_2004;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p105, 64);
    goto corral_source_split_2003;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2002;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p104, 0);
    goto corral_source_split_2001;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_2000;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p103, 1);
    goto corral_source_split_1999;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_1998;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p102, in_$p0);
    goto corral_source_split_1997;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1996;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    goto corral_source_split_1995;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p100, stk1160_isoc_irq);
    goto corral_source_split_1994;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1993;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p99, in_$i8);
    goto corral_source_split_1992;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1991;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p98, out_$p97);
    goto corral_source_split_1990;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1989;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.0, out_$p96);
    goto corral_source_split_1988;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref(out_$p94, $mul.ref(out_$i95, 8));
    goto corral_source_split_1987;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    out_$i95 := $sext.i32.i64(out_$i44);
    goto corral_source_split_1986;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.0, out_$p93);
    goto corral_source_split_1985;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(16, 1));
    goto corral_source_split_1984;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p91, out_$i90);
    goto corral_source_split_1983;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1982;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    out_$i90 := $or.i32(out_$i89, 128);
    goto corral_source_split_1981;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} out_$i89 := __create_pipe(out_$p88, 130);
    call {:si_unique_call 368} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_1980;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_1979;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(2424, 1));
    goto corral_source_split_1978;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p86, out_$p85);
    goto corral_source_split_1977;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1976;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.0, out_$p84);
    goto corral_source_split_1975;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(2424, 1));
    goto corral_source_split_1974;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_11 := $M.0;
    call {:si_unique_call 366} out_cmdloc_dummy_var_12 := $memset.i8(out_cmdloc_dummy_var_11, out_$p82, 0, out_$i83, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_12;
    goto corral_source_split_1973;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    out_$i83 := $sext.i32.i64(in_$i8);
    goto corral_source_split_1972;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.0, out_$p81);
    goto corral_source_split_1971;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref(out_$p79, $mul.ref(out_$i80, 8));
    goto corral_source_split_1970;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    out_$i80 := $sext.i32.i64(out_$i44);
    goto corral_source_split_1969;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.0, out_$p78);
    goto corral_source_split_1968;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(16, 1));
    goto corral_source_split_1967;

  $bb18:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    out_$i74 := out_$i44;
    assume true;
    goto $bb18;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i64(out_$i72, 0);
    goto corral_source_split_1942;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(out_$p71);
    goto corral_source_split_1941;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.0, out_$p70);
    goto corral_source_split_1940;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref(out_$p68, $mul.ref(out_$i69, 8));
    goto corral_source_split_1939;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i32.i64(out_$i44);
    goto corral_source_split_1938;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    goto corral_source_split_1937;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(16, 1));
    goto corral_source_split_1936;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p65, out_$p60);
    goto corral_source_split_1935;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref(out_$p63, $mul.ref(out_$i64, 8));
    goto corral_source_split_1934;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    out_$i64 := $sext.i32.i64(out_$i44);
    goto corral_source_split_1933;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.0, out_$p62);
    goto corral_source_split_1932;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(16, 1));
    goto corral_source_split_1931;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} out_$p60 := usb_alloc_coherent(out_$p57, out_$i58, 208, out_$p59);
    goto corral_source_split_1930;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p45, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_1929;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    out_$i58 := $sext.i32.i64(in_$i8);
    goto corral_source_split_1928;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_1927;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(2424, 1));
    goto corral_source_split_1926;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p55, out_$p45);
    goto corral_source_split_1925;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref(out_$p53, $mul.ref(out_$i54, 8));
    goto corral_source_split_1924;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i44);
    goto corral_source_split_1923;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_1922;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(8, 1));
    goto corral_source_split_1921;

  $bb14:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i44;
    assume true;
    goto $bb14;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i64(out_$i46, 0);
    goto corral_source_split_1910;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_1909;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} out_$p45 := ldv_usb_alloc_urb_14(64, 208);
    goto corral_source_split_1908;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p45, out_$i46, out_$i47, out_$i48, out_$p52, out_$p53, out_$i54, out_$p55, out_$p56, out_$p57, out_$i58, out_$p59, out_$p60, out_$p62, out_$p63, out_$i64, out_$p65, out_$p67, out_$p68, out_$i69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$p78, out_$p79, out_$i80, out_$p81, out_$p82, out_$i83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p93, out_$p94, out_$i95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p109, out_$p111, out_$i112, out_$p115, out_$p117, out_$i118, out_$i119, out_$i120, out_$i44, out_$p145, out_$p147, out_$i148, out_$p151, out_$p153, out_$i154, out_$i155, out_$p158, out_$p160, out_$i161, out_$p164, out_$p166, out_$i167, out_$i168, out_$p171, out_$p173, out_$i174, out_$p177, out_$p179, out_$i180, out_$i181, out_$p184, out_$p186, out_$i187, out_$p190, out_$p192, out_$i193, out_$i194, out_$p197, out_$p199, out_$i200, out_$p203, out_$p205, out_$i206, out_$i207, out_$p210, out_$p212, out_$i213, out_$p216, out_$p218, out_$i219, out_$i220, out_$p223, out_$p225, out_$i226, out_$p229, out_$p231, out_$i232, out_$i233, out_$p236, out_$p238, out_$i239, out_$p242, out_$p244, out_$i245, out_$i246, out_$p249, out_$p251, out_$i252, out_$p255, out_$p257, out_$i258, out_$i259, out_$p262, out_$p264, out_$i265, out_$p268, out_$p270, out_$i271, out_$i272, out_$p275, out_$p277, out_$i278, out_$p281, out_$p283, out_$i284, out_$i285, out_$p288, out_$p290, out_$i291, out_$p294, out_$p296, out_$i297, out_$i298, out_$p301, out_$p303, out_$i304, out_$p307, out_$p309, out_$i310, out_$i311, out_$p314, out_$p316, out_$i317, out_$p320, out_$p322, out_$i323, out_$i324, out_$p327, out_$p329, out_$i330, out_$p333, out_$p335, out_$i336, out_$i337, out_$p340, out_$p342, out_$i343, out_$p346, out_$p348, out_$i349, out_$i350, out_$p353, out_$p355, out_$i356, out_$p359, out_$p361, out_$i362, out_$i363, out_$p366, out_$p368, out_$i369, out_$p372, out_$p374, out_$i375, out_$i376, out_$p379, out_$p381, out_$i382, out_$p385, out_$p387, out_$i388, out_$i389, out_$p392, out_$p394, out_$i395, out_$p398, out_$p400, out_$i401, out_$i402, out_$p405, out_$p407, out_$i408, out_$p411, out_$p413, out_$i414, out_$i415, out_$p418, out_$p420, out_$i421, out_$p424, out_$p426, out_$i427, out_$i428, out_$p431, out_$p433, out_$i434, out_$p437, out_$p439, out_$i440, out_$i441, out_$p444, out_$p446, out_$i447, out_$p450, out_$p452, out_$i453, out_$i454, out_$p457, out_$p459, out_$i460, out_$p463, out_$p465, out_$i466, out_$i467, out_$p470, out_$p472, out_$i473, out_$p476, out_$p478, out_$i479, out_$i480, out_$p483, out_$p485, out_$i486, out_$p489, out_$p491, out_$i492, out_$i493, out_$p496, out_$p498, out_$i499, out_$p502, out_$p504, out_$i505, out_$i506, out_$p509, out_$p511, out_$i512, out_$p515, out_$p517, out_$i518, out_$i519, out_$p522, out_$p524, out_$i525, out_$p528, out_$p530, out_$i531, out_$i532, out_$p535, out_$p537, out_$i538, out_$p541, out_$p543, out_$i544, out_$i545, out_$p548, out_$p550, out_$i551, out_$p554, out_$p556, out_$i557, out_$i558, out_$p561, out_$p563, out_$i564, out_$p567, out_$p569, out_$i570, out_$i571, out_$p574, out_$p576, out_$i577, out_$p580, out_$p582, out_$i583, out_$i584, out_$p587, out_$p589, out_$i590, out_$p593, out_$p595, out_$i596, out_$i597, out_$p600, out_$p602, out_$i603, out_$p606, out_$p608, out_$i609, out_$i610, out_$p613, out_$p615, out_$i616, out_$p619, out_$p621, out_$i622, out_$i623, out_$p626, out_$p628, out_$i629, out_$p632, out_$p634, out_$i635, out_$i636, out_$p639, out_$p641, out_$i642, out_$p645, out_$p647, out_$i648, out_$i649, out_$p652, out_$p654, out_$i655, out_$p658, out_$p660, out_$i661, out_$i662, out_$p665, out_$p667, out_$i668, out_$p671, out_$p673, out_$i674, out_$i675, out_$p678, out_$p680, out_$i681, out_$p684, out_$p686, out_$i687, out_$i688, out_$p691, out_$p693, out_$i694, out_$p697, out_$p699, out_$i700, out_$i701, out_$p704, out_$p706, out_$i707, out_$p710, out_$p712, out_$i713, out_$i714, out_$p717, out_$p719, out_$i720, out_$p723, out_$p725, out_$i726, out_$i727, out_$p730, out_$p732, out_$i733, out_$p736, out_$p738, out_$i739, out_$i740, out_$p743, out_$p745, out_$i746, out_$p749, out_$p751, out_$i752, out_$i753, out_$p756, out_$p758, out_$i759, out_$p762, out_$p764, out_$i765, out_$i766, out_$p769, out_$p771, out_$i772, out_$p775, out_$p777, out_$i778, out_$i779, out_$p782, out_$p784, out_$i785, out_$p788, out_$p790, out_$i791, out_$i792, out_$p795, out_$p797, out_$i798, out_$p801, out_$p803, out_$i804, out_$i805, out_$p808, out_$p810, out_$i811, out_$p814, out_$p816, out_$i817, out_$i818, out_$p821, out_$p823, out_$i824, out_$p827, out_$p829, out_$i830, out_$i831, out_$p834, out_$p836, out_$i837, out_$p840, out_$p842, out_$i843, out_$i844, out_$p847, out_$p849, out_$i850, out_$p853, out_$p855, out_$i856, out_$i857, out_$p860, out_$p862, out_$i863, out_$p866, out_$p868, out_$i869, out_$i870, out_$p873, out_$p875, out_$i876, out_$p879, out_$p881, out_$i882, out_$i883, out_$p886, out_$p888, out_$i889, out_$p892, out_$p894, out_$i895, out_$i896, out_$p899, out_$p901, out_$i902, out_$p905, out_$p907, out_$i908, out_$i909, out_$p912, out_$p914, out_$i915, out_$p918, out_$p920, out_$i921, out_$i922, out_$p925, out_$p927, out_$i928, out_$p931, out_$p933, out_$i934, out_$i935, out_$p938, out_$p940, out_$i941, out_$p944, out_$p946, out_$i947, out_$i948, out_$p951, out_$p953, out_$i954, out_$p957, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12 := stk1160_alloc_isoc_loop_$bb11(in_$p0, in_$i8, out_$p45, out_$i46, out_$i47, out_$i48, out_$p52, out_$p53, out_$i54, out_$p55, out_$p56, out_$p57, out_$i58, out_$p59, out_$p60, out_$p62, out_$p63, out_$i64, out_$p65, out_$p67, out_$p68, out_$i69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$p78, out_$p79, out_$i80, out_$p81, out_$p82, out_$i83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p93, out_$p94, out_$i95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p109, out_$p111, out_$i112, out_$p115, out_$p117, out_$i118, out_$i119, out_$i120, out_$i44, out_$p145, out_$p147, out_$i148, out_$p151, out_$p153, out_$i154, out_$i155, out_$p158, out_$p160, out_$i161, out_$p164, out_$p166, out_$i167, out_$i168, out_$p171, out_$p173, out_$i174, out_$p177, out_$p179, out_$i180, out_$i181, out_$p184, out_$p186, out_$i187, out_$p190, out_$p192, out_$i193, out_$i194, out_$p197, out_$p199, out_$i200, out_$p203, out_$p205, out_$i206, out_$i207, out_$p210, out_$p212, out_$i213, out_$p216, out_$p218, out_$i219, out_$i220, out_$p223, out_$p225, out_$i226, out_$p229, out_$p231, out_$i232, out_$i233, out_$p236, out_$p238, out_$i239, out_$p242, out_$p244, out_$i245, out_$i246, out_$p249, out_$p251, out_$i252, out_$p255, out_$p257, out_$i258, out_$i259, out_$p262, out_$p264, out_$i265, out_$p268, out_$p270, out_$i271, out_$i272, out_$p275, out_$p277, out_$i278, out_$p281, out_$p283, out_$i284, out_$i285, out_$p288, out_$p290, out_$i291, out_$p294, out_$p296, out_$i297, out_$i298, out_$p301, out_$p303, out_$i304, out_$p307, out_$p309, out_$i310, out_$i311, out_$p314, out_$p316, out_$i317, out_$p320, out_$p322, out_$i323, out_$i324, out_$p327, out_$p329, out_$i330, out_$p333, out_$p335, out_$i336, out_$i337, out_$p340, out_$p342, out_$i343, out_$p346, out_$p348, out_$i349, out_$i350, out_$p353, out_$p355, out_$i356, out_$p359, out_$p361, out_$i362, out_$i363, out_$p366, out_$p368, out_$i369, out_$p372, out_$p374, out_$i375, out_$i376, out_$p379, out_$p381, out_$i382, out_$p385, out_$p387, out_$i388, out_$i389, out_$p392, out_$p394, out_$i395, out_$p398, out_$p400, out_$i401, out_$i402, out_$p405, out_$p407, out_$i408, out_$p411, out_$p413, out_$i414, out_$i415, out_$p418, out_$p420, out_$i421, out_$p424, out_$p426, out_$i427, out_$i428, out_$p431, out_$p433, out_$i434, out_$p437, out_$p439, out_$i440, out_$i441, out_$p444, out_$p446, out_$i447, out_$p450, out_$p452, out_$i453, out_$i454, out_$p457, out_$p459, out_$i460, out_$p463, out_$p465, out_$i466, out_$i467, out_$p470, out_$p472, out_$i473, out_$p476, out_$p478, out_$i479, out_$i480, out_$p483, out_$p485, out_$i486, out_$p489, out_$p491, out_$i492, out_$i493, out_$p496, out_$p498, out_$i499, out_$p502, out_$p504, out_$i505, out_$i506, out_$p509, out_$p511, out_$i512, out_$p515, out_$p517, out_$i518, out_$i519, out_$p522, out_$p524, out_$i525, out_$p528, out_$p530, out_$i531, out_$i532, out_$p535, out_$p537, out_$i538, out_$p541, out_$p543, out_$i544, out_$i545, out_$p548, out_$p550, out_$i551, out_$p554, out_$p556, out_$i557, out_$i558, out_$p561, out_$p563, out_$i564, out_$p567, out_$p569, out_$i570, out_$i571, out_$p574, out_$p576, out_$i577, out_$p580, out_$p582, out_$i583, out_$i584, out_$p587, out_$p589, out_$i590, out_$p593, out_$p595, out_$i596, out_$i597, out_$p600, out_$p602, out_$i603, out_$p606, out_$p608, out_$i609, out_$i610, out_$p613, out_$p615, out_$i616, out_$p619, out_$p621, out_$i622, out_$i623, out_$p626, out_$p628, out_$i629, out_$p632, out_$p634, out_$i635, out_$i636, out_$p639, out_$p641, out_$i642, out_$p645, out_$p647, out_$i648, out_$i649, out_$p652, out_$p654, out_$i655, out_$p658, out_$p660, out_$i661, out_$i662, out_$p665, out_$p667, out_$i668, out_$p671, out_$p673, out_$i674, out_$i675, out_$p678, out_$p680, out_$i681, out_$p684, out_$p686, out_$i687, out_$i688, out_$p691, out_$p693, out_$i694, out_$p697, out_$p699, out_$i700, out_$i701, out_$p704, out_$p706, out_$i707, out_$p710, out_$p712, out_$i713, out_$i714, out_$p717, out_$p719, out_$i720, out_$p723, out_$p725, out_$i726, out_$i727, out_$p730, out_$p732, out_$i733, out_$p736, out_$p738, out_$i739, out_$i740, out_$p743, out_$p745, out_$i746, out_$p749, out_$p751, out_$i752, out_$i753, out_$p756, out_$p758, out_$i759, out_$p762, out_$p764, out_$i765, out_$i766, out_$p769, out_$p771, out_$i772, out_$p775, out_$p777, out_$i778, out_$i779, out_$p782, out_$p784, out_$i785, out_$p788, out_$p790, out_$i791, out_$i792, out_$p795, out_$p797, out_$i798, out_$p801, out_$p803, out_$i804, out_$i805, out_$p808, out_$p810, out_$i811, out_$p814, out_$p816, out_$i817, out_$i818, out_$p821, out_$p823, out_$i824, out_$p827, out_$p829, out_$i830, out_$i831, out_$p834, out_$p836, out_$i837, out_$p840, out_$p842, out_$i843, out_$i844, out_$p847, out_$p849, out_$i850, out_$p853, out_$p855, out_$i856, out_$i857, out_$p860, out_$p862, out_$i863, out_$p866, out_$p868, out_$i869, out_$i870, out_$p873, out_$p875, out_$i876, out_$p879, out_$p881, out_$i882, out_$i883, out_$p886, out_$p888, out_$i889, out_$p892, out_$p894, out_$i895, out_$i896, out_$p899, out_$p901, out_$i902, out_$p905, out_$p907, out_$i908, out_$i909, out_$p912, out_$p914, out_$i915, out_$p918, out_$p920, out_$i921, out_$i922, out_$p925, out_$p927, out_$i928, out_$p931, out_$p933, out_$i934, out_$i935, out_$p938, out_$p940, out_$i941, out_$p944, out_$p946, out_$i947, out_$i948, out_$p951, out_$p953, out_$i954, out_$p957, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12);
    return;

  exit:
    return;
}



procedure stk1160_alloc_isoc_loop_$bb11(in_$p0: ref, in_$i8: i32, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$i48: i32, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$p59: ref, in_$p60: ref, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$p65: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$i74: i32, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$p91: ref, in_$p93: ref, in_$p94: ref, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p109: ref, in_$p111: ref, in_$i112: i32, in_$p115: ref, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i44: i32, in_$p145: ref, in_$p147: ref, in_$i148: i32, in_$p151: ref, in_$p153: ref, in_$i154: i32, in_$i155: i32, in_$p158: ref, in_$p160: ref, in_$i161: i32, in_$p164: ref, in_$p166: ref, in_$i167: i32, in_$i168: i32, in_$p171: ref, in_$p173: ref, in_$i174: i32, in_$p177: ref, in_$p179: ref, in_$i180: i32, in_$i181: i32, in_$p184: ref, in_$p186: ref, in_$i187: i32, in_$p190: ref, in_$p192: ref, in_$i193: i32, in_$i194: i32, in_$p197: ref, in_$p199: ref, in_$i200: i32, in_$p203: ref, in_$p205: ref, in_$i206: i32, in_$i207: i32, in_$p210: ref, in_$p212: ref, in_$i213: i32, in_$p216: ref, in_$p218: ref, in_$i219: i32, in_$i220: i32, in_$p223: ref, in_$p225: ref, in_$i226: i32, in_$p229: ref, in_$p231: ref, in_$i232: i32, in_$i233: i32, in_$p236: ref, in_$p238: ref, in_$i239: i32, in_$p242: ref, in_$p244: ref, in_$i245: i32, in_$i246: i32, in_$p249: ref, in_$p251: ref, in_$i252: i32, in_$p255: ref, in_$p257: ref, in_$i258: i32, in_$i259: i32, in_$p262: ref, in_$p264: ref, in_$i265: i32, in_$p268: ref, in_$p270: ref, in_$i271: i32, in_$i272: i32, in_$p275: ref, in_$p277: ref, in_$i278: i32, in_$p281: ref, in_$p283: ref, in_$i284: i32, in_$i285: i32, in_$p288: ref, in_$p290: ref, in_$i291: i32, in_$p294: ref, in_$p296: ref, in_$i297: i32, in_$i298: i32, in_$p301: ref, in_$p303: ref, in_$i304: i32, in_$p307: ref, in_$p309: ref, in_$i310: i32, in_$i311: i32, in_$p314: ref, in_$p316: ref, in_$i317: i32, in_$p320: ref, in_$p322: ref, in_$i323: i32, in_$i324: i32, in_$p327: ref, in_$p329: ref, in_$i330: i32, in_$p333: ref, in_$p335: ref, in_$i336: i32, in_$i337: i32, in_$p340: ref, in_$p342: ref, in_$i343: i32, in_$p346: ref, in_$p348: ref, in_$i349: i32, in_$i350: i32, in_$p353: ref, in_$p355: ref, in_$i356: i32, in_$p359: ref, in_$p361: ref, in_$i362: i32, in_$i363: i32, in_$p366: ref, in_$p368: ref, in_$i369: i32, in_$p372: ref, in_$p374: ref, in_$i375: i32, in_$i376: i32, in_$p379: ref, in_$p381: ref, in_$i382: i32, in_$p385: ref, in_$p387: ref, in_$i388: i32, in_$i389: i32, in_$p392: ref, in_$p394: ref, in_$i395: i32, in_$p398: ref, in_$p400: ref, in_$i401: i32, in_$i402: i32, in_$p405: ref, in_$p407: ref, in_$i408: i32, in_$p411: ref, in_$p413: ref, in_$i414: i32, in_$i415: i32, in_$p418: ref, in_$p420: ref, in_$i421: i32, in_$p424: ref, in_$p426: ref, in_$i427: i32, in_$i428: i32, in_$p431: ref, in_$p433: ref, in_$i434: i32, in_$p437: ref, in_$p439: ref, in_$i440: i32, in_$i441: i32, in_$p444: ref, in_$p446: ref, in_$i447: i32, in_$p450: ref, in_$p452: ref, in_$i453: i32, in_$i454: i32, in_$p457: ref, in_$p459: ref, in_$i460: i32, in_$p463: ref, in_$p465: ref, in_$i466: i32, in_$i467: i32, in_$p470: ref, in_$p472: ref, in_$i473: i32, in_$p476: ref, in_$p478: ref, in_$i479: i32, in_$i480: i32, in_$p483: ref, in_$p485: ref, in_$i486: i32, in_$p489: ref, in_$p491: ref, in_$i492: i32, in_$i493: i32, in_$p496: ref, in_$p498: ref, in_$i499: i32, in_$p502: ref, in_$p504: ref, in_$i505: i32, in_$i506: i32, in_$p509: ref, in_$p511: ref, in_$i512: i32, in_$p515: ref, in_$p517: ref, in_$i518: i32, in_$i519: i32, in_$p522: ref, in_$p524: ref, in_$i525: i32, in_$p528: ref, in_$p530: ref, in_$i531: i32, in_$i532: i32, in_$p535: ref, in_$p537: ref, in_$i538: i32, in_$p541: ref, in_$p543: ref, in_$i544: i32, in_$i545: i32, in_$p548: ref, in_$p550: ref, in_$i551: i32, in_$p554: ref, in_$p556: ref, in_$i557: i32, in_$i558: i32, in_$p561: ref, in_$p563: ref, in_$i564: i32, in_$p567: ref, in_$p569: ref, in_$i570: i32, in_$i571: i32, in_$p574: ref, in_$p576: ref, in_$i577: i32, in_$p580: ref, in_$p582: ref, in_$i583: i32, in_$i584: i32, in_$p587: ref, in_$p589: ref, in_$i590: i32, in_$p593: ref, in_$p595: ref, in_$i596: i32, in_$i597: i32, in_$p600: ref, in_$p602: ref, in_$i603: i32, in_$p606: ref, in_$p608: ref, in_$i609: i32, in_$i610: i32, in_$p613: ref, in_$p615: ref, in_$i616: i32, in_$p619: ref, in_$p621: ref, in_$i622: i32, in_$i623: i32, in_$p626: ref, in_$p628: ref, in_$i629: i32, in_$p632: ref, in_$p634: ref, in_$i635: i32, in_$i636: i32, in_$p639: ref, in_$p641: ref, in_$i642: i32, in_$p645: ref, in_$p647: ref, in_$i648: i32, in_$i649: i32, in_$p652: ref, in_$p654: ref, in_$i655: i32, in_$p658: ref, in_$p660: ref, in_$i661: i32, in_$i662: i32, in_$p665: ref, in_$p667: ref, in_$i668: i32, in_$p671: ref, in_$p673: ref, in_$i674: i32, in_$i675: i32, in_$p678: ref, in_$p680: ref, in_$i681: i32, in_$p684: ref, in_$p686: ref, in_$i687: i32, in_$i688: i32, in_$p691: ref, in_$p693: ref, in_$i694: i32, in_$p697: ref, in_$p699: ref, in_$i700: i32, in_$i701: i32, in_$p704: ref, in_$p706: ref, in_$i707: i32, in_$p710: ref, in_$p712: ref, in_$i713: i32, in_$i714: i32, in_$p717: ref, in_$p719: ref, in_$i720: i32, in_$p723: ref, in_$p725: ref, in_$i726: i32, in_$i727: i32, in_$p730: ref, in_$p732: ref, in_$i733: i32, in_$p736: ref, in_$p738: ref, in_$i739: i32, in_$i740: i32, in_$p743: ref, in_$p745: ref, in_$i746: i32, in_$p749: ref, in_$p751: ref, in_$i752: i32, in_$i753: i32, in_$p756: ref, in_$p758: ref, in_$i759: i32, in_$p762: ref, in_$p764: ref, in_$i765: i32, in_$i766: i32, in_$p769: ref, in_$p771: ref, in_$i772: i32, in_$p775: ref, in_$p777: ref, in_$i778: i32, in_$i779: i32, in_$p782: ref, in_$p784: ref, in_$i785: i32, in_$p788: ref, in_$p790: ref, in_$i791: i32, in_$i792: i32, in_$p795: ref, in_$p797: ref, in_$i798: i32, in_$p801: ref, in_$p803: ref, in_$i804: i32, in_$i805: i32, in_$p808: ref, in_$p810: ref, in_$i811: i32, in_$p814: ref, in_$p816: ref, in_$i817: i32, in_$i818: i32, in_$p821: ref, in_$p823: ref, in_$i824: i32, in_$p827: ref, in_$p829: ref, in_$i830: i32, in_$i831: i32, in_$p834: ref, in_$p836: ref, in_$i837: i32, in_$p840: ref, in_$p842: ref, in_$i843: i32, in_$i844: i32, in_$p847: ref, in_$p849: ref, in_$i850: i32, in_$p853: ref, in_$p855: ref, in_$i856: i32, in_$i857: i32, in_$p860: ref, in_$p862: ref, in_$i863: i32, in_$p866: ref, in_$p868: ref, in_$i869: i32, in_$i870: i32, in_$p873: ref, in_$p875: ref, in_$i876: i32, in_$p879: ref, in_$p881: ref, in_$i882: i32, in_$i883: i32, in_$p886: ref, in_$p888: ref, in_$i889: i32, in_$p892: ref, in_$p894: ref, in_$i895: i32, in_$i896: i32, in_$p899: ref, in_$p901: ref, in_$i902: i32, in_$p905: ref, in_$p907: ref, in_$i908: i32, in_$i909: i32, in_$p912: ref, in_$p914: ref, in_$i915: i32, in_$p918: ref, in_$p920: ref, in_$i921: i32, in_$i922: i32, in_$p925: ref, in_$p927: ref, in_$i928: i32, in_$p931: ref, in_$p933: ref, in_$i934: i32, in_$i935: i32, in_$p938: ref, in_$p940: ref, in_$i941: i32, in_$p944: ref, in_$p946: ref, in_$i947: i32, in_$i948: i32, in_$p951: ref, in_$p953: ref, in_$i954: i32, in_$p957: ref, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8) returns (out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$i48: i32, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$p59: ref, out_$p60: ref, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$p65: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$i74: i32, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$p91: ref, out_$p93: ref, out_$p94: ref, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p109: ref, out_$p111: ref, out_$i112: i32, out_$p115: ref, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i44: i32, out_$p145: ref, out_$p147: ref, out_$i148: i32, out_$p151: ref, out_$p153: ref, out_$i154: i32, out_$i155: i32, out_$p158: ref, out_$p160: ref, out_$i161: i32, out_$p164: ref, out_$p166: ref, out_$i167: i32, out_$i168: i32, out_$p171: ref, out_$p173: ref, out_$i174: i32, out_$p177: ref, out_$p179: ref, out_$i180: i32, out_$i181: i32, out_$p184: ref, out_$p186: ref, out_$i187: i32, out_$p190: ref, out_$p192: ref, out_$i193: i32, out_$i194: i32, out_$p197: ref, out_$p199: ref, out_$i200: i32, out_$p203: ref, out_$p205: ref, out_$i206: i32, out_$i207: i32, out_$p210: ref, out_$p212: ref, out_$i213: i32, out_$p216: ref, out_$p218: ref, out_$i219: i32, out_$i220: i32, out_$p223: ref, out_$p225: ref, out_$i226: i32, out_$p229: ref, out_$p231: ref, out_$i232: i32, out_$i233: i32, out_$p236: ref, out_$p238: ref, out_$i239: i32, out_$p242: ref, out_$p244: ref, out_$i245: i32, out_$i246: i32, out_$p249: ref, out_$p251: ref, out_$i252: i32, out_$p255: ref, out_$p257: ref, out_$i258: i32, out_$i259: i32, out_$p262: ref, out_$p264: ref, out_$i265: i32, out_$p268: ref, out_$p270: ref, out_$i271: i32, out_$i272: i32, out_$p275: ref, out_$p277: ref, out_$i278: i32, out_$p281: ref, out_$p283: ref, out_$i284: i32, out_$i285: i32, out_$p288: ref, out_$p290: ref, out_$i291: i32, out_$p294: ref, out_$p296: ref, out_$i297: i32, out_$i298: i32, out_$p301: ref, out_$p303: ref, out_$i304: i32, out_$p307: ref, out_$p309: ref, out_$i310: i32, out_$i311: i32, out_$p314: ref, out_$p316: ref, out_$i317: i32, out_$p320: ref, out_$p322: ref, out_$i323: i32, out_$i324: i32, out_$p327: ref, out_$p329: ref, out_$i330: i32, out_$p333: ref, out_$p335: ref, out_$i336: i32, out_$i337: i32, out_$p340: ref, out_$p342: ref, out_$i343: i32, out_$p346: ref, out_$p348: ref, out_$i349: i32, out_$i350: i32, out_$p353: ref, out_$p355: ref, out_$i356: i32, out_$p359: ref, out_$p361: ref, out_$i362: i32, out_$i363: i32, out_$p366: ref, out_$p368: ref, out_$i369: i32, out_$p372: ref, out_$p374: ref, out_$i375: i32, out_$i376: i32, out_$p379: ref, out_$p381: ref, out_$i382: i32, out_$p385: ref, out_$p387: ref, out_$i388: i32, out_$i389: i32, out_$p392: ref, out_$p394: ref, out_$i395: i32, out_$p398: ref, out_$p400: ref, out_$i401: i32, out_$i402: i32, out_$p405: ref, out_$p407: ref, out_$i408: i32, out_$p411: ref, out_$p413: ref, out_$i414: i32, out_$i415: i32, out_$p418: ref, out_$p420: ref, out_$i421: i32, out_$p424: ref, out_$p426: ref, out_$i427: i32, out_$i428: i32, out_$p431: ref, out_$p433: ref, out_$i434: i32, out_$p437: ref, out_$p439: ref, out_$i440: i32, out_$i441: i32, out_$p444: ref, out_$p446: ref, out_$i447: i32, out_$p450: ref, out_$p452: ref, out_$i453: i32, out_$i454: i32, out_$p457: ref, out_$p459: ref, out_$i460: i32, out_$p463: ref, out_$p465: ref, out_$i466: i32, out_$i467: i32, out_$p470: ref, out_$p472: ref, out_$i473: i32, out_$p476: ref, out_$p478: ref, out_$i479: i32, out_$i480: i32, out_$p483: ref, out_$p485: ref, out_$i486: i32, out_$p489: ref, out_$p491: ref, out_$i492: i32, out_$i493: i32, out_$p496: ref, out_$p498: ref, out_$i499: i32, out_$p502: ref, out_$p504: ref, out_$i505: i32, out_$i506: i32, out_$p509: ref, out_$p511: ref, out_$i512: i32, out_$p515: ref, out_$p517: ref, out_$i518: i32, out_$i519: i32, out_$p522: ref, out_$p524: ref, out_$i525: i32, out_$p528: ref, out_$p530: ref, out_$i531: i32, out_$i532: i32, out_$p535: ref, out_$p537: ref, out_$i538: i32, out_$p541: ref, out_$p543: ref, out_$i544: i32, out_$i545: i32, out_$p548: ref, out_$p550: ref, out_$i551: i32, out_$p554: ref, out_$p556: ref, out_$i557: i32, out_$i558: i32, out_$p561: ref, out_$p563: ref, out_$i564: i32, out_$p567: ref, out_$p569: ref, out_$i570: i32, out_$i571: i32, out_$p574: ref, out_$p576: ref, out_$i577: i32, out_$p580: ref, out_$p582: ref, out_$i583: i32, out_$i584: i32, out_$p587: ref, out_$p589: ref, out_$i590: i32, out_$p593: ref, out_$p595: ref, out_$i596: i32, out_$i597: i32, out_$p600: ref, out_$p602: ref, out_$i603: i32, out_$p606: ref, out_$p608: ref, out_$i609: i32, out_$i610: i32, out_$p613: ref, out_$p615: ref, out_$i616: i32, out_$p619: ref, out_$p621: ref, out_$i622: i32, out_$i623: i32, out_$p626: ref, out_$p628: ref, out_$i629: i32, out_$p632: ref, out_$p634: ref, out_$i635: i32, out_$i636: i32, out_$p639: ref, out_$p641: ref, out_$i642: i32, out_$p645: ref, out_$p647: ref, out_$i648: i32, out_$i649: i32, out_$p652: ref, out_$p654: ref, out_$i655: i32, out_$p658: ref, out_$p660: ref, out_$i661: i32, out_$i662: i32, out_$p665: ref, out_$p667: ref, out_$i668: i32, out_$p671: ref, out_$p673: ref, out_$i674: i32, out_$i675: i32, out_$p678: ref, out_$p680: ref, out_$i681: i32, out_$p684: ref, out_$p686: ref, out_$i687: i32, out_$i688: i32, out_$p691: ref, out_$p693: ref, out_$i694: i32, out_$p697: ref, out_$p699: ref, out_$i700: i32, out_$i701: i32, out_$p704: ref, out_$p706: ref, out_$i707: i32, out_$p710: ref, out_$p712: ref, out_$i713: i32, out_$i714: i32, out_$p717: ref, out_$p719: ref, out_$i720: i32, out_$p723: ref, out_$p725: ref, out_$i726: i32, out_$i727: i32, out_$p730: ref, out_$p732: ref, out_$i733: i32, out_$p736: ref, out_$p738: ref, out_$i739: i32, out_$i740: i32, out_$p743: ref, out_$p745: ref, out_$i746: i32, out_$p749: ref, out_$p751: ref, out_$i752: i32, out_$i753: i32, out_$p756: ref, out_$p758: ref, out_$i759: i32, out_$p762: ref, out_$p764: ref, out_$i765: i32, out_$i766: i32, out_$p769: ref, out_$p771: ref, out_$i772: i32, out_$p775: ref, out_$p777: ref, out_$i778: i32, out_$i779: i32, out_$p782: ref, out_$p784: ref, out_$i785: i32, out_$p788: ref, out_$p790: ref, out_$i791: i32, out_$i792: i32, out_$p795: ref, out_$p797: ref, out_$i798: i32, out_$p801: ref, out_$p803: ref, out_$i804: i32, out_$i805: i32, out_$p808: ref, out_$p810: ref, out_$i811: i32, out_$p814: ref, out_$p816: ref, out_$i817: i32, out_$i818: i32, out_$p821: ref, out_$p823: ref, out_$i824: i32, out_$p827: ref, out_$p829: ref, out_$i830: i32, out_$i831: i32, out_$p834: ref, out_$p836: ref, out_$i837: i32, out_$p840: ref, out_$p842: ref, out_$i843: i32, out_$i844: i32, out_$p847: ref, out_$p849: ref, out_$i850: i32, out_$p853: ref, out_$p855: ref, out_$i856: i32, out_$i857: i32, out_$p860: ref, out_$p862: ref, out_$i863: i32, out_$p866: ref, out_$p868: ref, out_$i869: i32, out_$i870: i32, out_$p873: ref, out_$p875: ref, out_$i876: i32, out_$p879: ref, out_$p881: ref, out_$i882: i32, out_$i883: i32, out_$p886: ref, out_$p888: ref, out_$i889: i32, out_$p892: ref, out_$p894: ref, out_$i895: i32, out_$i896: i32, out_$p899: ref, out_$p901: ref, out_$i902: i32, out_$p905: ref, out_$p907: ref, out_$i908: i32, out_$i909: i32, out_$p912: ref, out_$p914: ref, out_$i915: i32, out_$p918: ref, out_$p920: ref, out_$i921: i32, out_$i922: i32, out_$p925: ref, out_$p927: ref, out_$i928: i32, out_$p931: ref, out_$p933: ref, out_$i934: i32, out_$i935: i32, out_$p938: ref, out_$p940: ref, out_$i941: i32, out_$p944: ref, out_$p946: ref, out_$i947: i32, out_$i948: i32, out_$p951: ref, out_$p953: ref, out_$i954: i32, out_$p957: ref, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8);
  modifies $M.0, $M.2;



implementation stk1160_isoc_irq_loop_$bb25(in_$p0: ref, in_$p16: ref, in_$i20: i64, in_$p23: ref, in_$i24: i64, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i19: i32) returns (out_$i20: i64, out_$p23: ref, out_$i24: i64, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i19: i32)
{

  entry:
    out_$i20, out_$p23, out_$i24, out_$p27, out_$i28, out_$i29, out_$i30, out_$i19 := in_$i20, in_$p23, in_$i24, in_$p27, in_$i28, in_$i29, in_$i30, in_$i19;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2715;

  $bb27:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := out_$i28;
    goto $bb27_dummy;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    out_$i30 := $sgt.i32(out_$i29, out_$i28);
    goto corral_source_split_2725;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, in_$p16);
    goto corral_source_split_2724;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i19, 1);
    call {:si_unique_call 393} {:cexpr "i"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_2723;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p27, 0);
    goto corral_source_split_2722;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i24, 16)), $mul.ref(8, 1));
    goto corral_source_split_2721;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(out_$i19);
    goto corral_source_split_2720;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p23, 0);
    goto corral_source_split_2719;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i20, 16)), $mul.ref(12, 1));
    goto corral_source_split_2718;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i19);
    goto corral_source_split_2717;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i20, out_$p23, out_$i24, out_$p27, out_$i28, out_$i29, out_$i30, out_$i19 := stk1160_isoc_irq_loop_$bb25(in_$p0, in_$p16, out_$i20, out_$p23, out_$i24, out_$p27, out_$i28, out_$i29, out_$i30, out_$i19);
    return;

  exit:
    return;
}



procedure stk1160_isoc_irq_loop_$bb25(in_$p0: ref, in_$p16: ref, in_$i20: i64, in_$p23: ref, in_$i24: i64, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i19: i32) returns (out_$i20: i64, out_$p23: ref, out_$i24: i64, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i19: i32);
  modifies $M.0;



implementation stk1160_process_isoc_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p10: ref, in_$i14: i64, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p25: ref, in_$i26: i32, in_$i27: i64, in_$p28: ref, in_$i29: i64, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i35: i8, in_$i36: i32, in_$i37: i1, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$p45: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$i56: i8, in_$i57: i32, in_$i58: i1, in_$i59: i8, in_$i60: i32, in_$i61: i1, in_$i62: i8, in_$i63: i32, in_$i64: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i13: i32) returns (out_$i14: i64, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p25: ref, out_$i26: i32, out_$i27: i64, out_$p28: ref, out_$i29: i64, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i35: i8, out_$i36: i32, out_$i37: i1, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$p45: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$i56: i8, out_$i57: i32, out_$i58: i1, out_$i59: i8, out_$i60: i32, out_$i61: i1, out_$i62: i8, out_$i63: i32, out_$i64: i32, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i13: i32)
{

  entry:
    out_$i14, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p45, out_$p47, out_$p48, out_$i49, out_$i50, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p66, out_$p67, out_$p68, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i13 := in_$i14, in_$p17, in_$i18, in_$i19, in_$p20, in_$p21, in_$i22, in_$p25, in_$i26, in_$i27, in_$p28, in_$i29, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$p39, in_$p40, in_$i41, in_$i42, in_$p43, in_$p45, in_$p47, in_$p48, in_$i49, in_$i50, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$p66, in_$p67, in_$p68, in_$p70, in_$p71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i13;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2760;

  $bb38:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := out_$i73;
    goto $bb38_dummy;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    out_$i75 := $sgt.i32(out_$i74, out_$i73);
    goto corral_source_split_2772;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.0, in_$p10);
    goto corral_source_split_2771;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i32(out_$i13, 1);
    call {:si_unique_call 402} {:cexpr "i"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_2770;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} print_err_status(in_$p0, out_$i13, out_$i18);
    goto corral_source_split_2768;

  $bb13:
    assume out_$i19 == 1;
    goto corral_source_split_2767;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i18, 0);
    goto corral_source_split_2765;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, out_$p17);
    call {:si_unique_call 400} {:cexpr "status"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_2764;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i14, 16)), $mul.ref(12, 1));
    goto corral_source_split_2763;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i13);
    goto corral_source_split_2762;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb17:
    assume out_$i34 == 1;
    goto corral_source_split_2786;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    out_$i34 := $sle.i32(out_$i33, 4);
    goto corral_source_split_2784;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    call {:si_unique_call 403} {:cexpr "len"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_2783;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i29, 16)), $mul.ref(8, 1));
    goto corral_source_split_2782;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i13);
    goto corral_source_split_2781;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref(out_$p21, $mul.ref(out_$i27, 1));
    goto corral_source_split_2780;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i32.i64(out_$i26);
    goto corral_source_split_2779;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    goto corral_source_split_2778;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i22, 16)), $mul.ref(0, 1));
    goto corral_source_split_2777;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i13);
    goto corral_source_split_2776;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_2775;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2774;

  $bb14:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb29:
    assume out_$i55 == 1;
    goto corral_source_split_2816;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i64(out_$i54, 0);
    goto corral_source_split_2814;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_2813;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_2812;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(24, 1));
    goto corral_source_split_2811;

  $bb21:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i64(out_$i49, 0);
    goto corral_source_split_2807;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    goto corral_source_split_2806;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_2805;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(24, 1));
    goto corral_source_split_2804;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p45, out_$p43);
    goto corral_source_split_2803;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(24, 1));
    goto corral_source_split_2802;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} out_$p43 := stk1160_next_buffer(in_$p0);
    goto corral_source_split_2801;

  $bb23:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} stk1160_buffer_done(in_$p0);
    goto corral_source_split_2799;

  $bb22:
    assume out_$i42 == 1;
    goto corral_source_split_2798;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, 0);
    goto corral_source_split_2796;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_2795;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_2794;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(24, 1));
    goto corral_source_split_2793;

  $bb20:
    assume out_$i37 == 1;
    goto corral_source_split_2792;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, 192);
    goto corral_source_split_2790;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i8.i32(out_$i35);
    goto corral_source_split_2789;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i8($M.0, out_$p28);
    goto corral_source_split_2788;

  $bb18:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p72, 0);
    goto corral_source_split_2832;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p71, $mul.ref(0, 880)), $mul.ref(876, 1));
    goto corral_source_split_2831;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.0, out_$p70);
    goto corral_source_split_2830;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(24, 1));
    goto corral_source_split_2829;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p68, out_$i64);
    goto corral_source_split_2828;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p67, $mul.ref(0, 880)), $mul.ref(872, 1));
    goto corral_source_split_2827;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_2826;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 7232)), $mul.ref(3128, 1)), $mul.ref(24, 1));
    goto corral_source_split_2825;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    out_$i64 := $and.i32(out_$i63, 64);
    goto corral_source_split_2824;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i8.i32(out_$i62);
    goto corral_source_split_2823;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i8($M.0, out_$p28);
    goto corral_source_split_2822;

  $bb35:
    assume {:verifier.code 0} true;
    assume out_$i61 == 1;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    assume out_$i58 == 1;
    goto $bb33;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 192);
    goto corral_source_split_2820;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i8.i32(out_$i56);
    goto corral_source_split_2819;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i8($M.0, out_$p28);
    goto corral_source_split_2818;

  $bb30:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, 128);
    goto corral_source_split_2837;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i8.i32(out_$i59);
    goto corral_source_split_2836;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i8($M.0, out_$p28);
    goto corral_source_split_2835;

  $bb34:
    assume !(out_$i58 == 1);
    goto corral_source_split_2834;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} stk1160_copy_video(in_$p0, out_$p28, out_$i33);
    goto corral_source_split_2839;

  $bb36:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb38_dummy:
    call {:si_unique_call 1} out_$i14, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p45, out_$p47, out_$p48, out_$i49, out_$i50, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p66, out_$p67, out_$p68, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i13 := stk1160_process_isoc_loop_$bb11(in_$p0, in_$p1, in_$p10, out_$i14, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p45, out_$p47, out_$p48, out_$i49, out_$i50, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p66, out_$p67, out_$p68, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i13);
    return;

  exit:
    return;
}



procedure stk1160_process_isoc_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p10: ref, in_$i14: i64, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p25: ref, in_$i26: i32, in_$i27: i64, in_$p28: ref, in_$i29: i64, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i35: i8, in_$i36: i32, in_$i37: i1, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$p45: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$i56: i8, in_$i57: i32, in_$i58: i1, in_$i59: i8, in_$i60: i32, in_$i61: i1, in_$i62: i8, in_$i63: i32, in_$i64: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i13: i32) returns (out_$i14: i64, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p25: ref, out_$i26: i32, out_$i27: i64, out_$p28: ref, out_$i29: i64, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i35: i8, out_$i36: i32, out_$i37: i1, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$p45: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$i56: i8, out_$i57: i32, out_$i58: i1, out_$i59: i8, out_$i60: i32, out_$i61: i1, out_$i62: i8, out_$i63: i32, out_$i64: i32, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i13: i32);
  modifies $M.20, $CurrAddr, $M.0;



implementation stk1160_copy_video_loop_$bb29(in_$i8: i32, in_$p11: ref, in_$i118: i32, in_$i119: i64, in_$p120: ref, in_$i121: i64, in_$p122: ref, in_$i123: i1, in_$i124: i32, in_$p125: ref, in_$i126: i32, in_$p127: ref, in_$i128: i32, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i132: i32, in_$p133: ref, in_$i134: i32, in_$i135: i32, in_$i136: i32, in_$i137: i32, in_$i138: i1, in_$i139: i1, in_$i140: i1, in_$i179: i64, in_$i180: i64, in_$i181: i64, in_$p182: ref, in_$p183: ref, in_$i184: i64, in_$p185: ref, in_$i186: i32, in_$i187: i64, in_$i188: i64, in_$i189: i1, in_$i228: i64, in_$i229: i32, in_$p230: ref, in_$i231: i32, in_$i232: i32, in_$p233: ref, in_$p234: ref, in_$i235: i32, in_$i236: i32, in_$p237: ref, in_$i238: i1, in_$i114: i32, in_$p115: ref, in_$p116: ref, in_$i117: i32, in_cmdloc_dummy_var_16: [ref]i8, in_cmdloc_dummy_var_17: [ref]i8, in_cmdloc_dummy_var_18: [ref]i8) returns (out_$i118: i32, out_$i119: i64, out_$p120: ref, out_$i121: i64, out_$p122: ref, out_$i123: i1, out_$i124: i32, out_$p125: ref, out_$i126: i32, out_$p127: ref, out_$i128: i32, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i132: i32, out_$p133: ref, out_$i134: i32, out_$i135: i32, out_$i136: i32, out_$i137: i32, out_$i138: i1, out_$i139: i1, out_$i140: i1, out_$i179: i64, out_$i180: i64, out_$i181: i64, out_$p182: ref, out_$p183: ref, out_$i184: i64, out_$p185: ref, out_$i186: i32, out_$i187: i64, out_$i188: i64, out_$i189: i1, out_$i228: i64, out_$i229: i32, out_$p230: ref, out_$i231: i32, out_$i232: i32, out_$p233: ref, out_$p234: ref, out_$i235: i32, out_$i236: i32, out_$p237: ref, out_$i238: i1, out_$i114: i32, out_$p115: ref, out_$p116: ref, out_$i117: i32, out_cmdloc_dummy_var_16: [ref]i8, out_cmdloc_dummy_var_17: [ref]i8, out_cmdloc_dummy_var_18: [ref]i8)
{

  entry:
    out_$i118, out_$i119, out_$p120, out_$i121, out_$p122, out_$i123, out_$i124, out_$p125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$p131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i179, out_$i180, out_$i181, out_$p182, out_$p183, out_$i184, out_$p185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$p233, out_$p234, out_$i235, out_$i236, out_$p237, out_$i238, out_$i114, out_$p115, out_$p116, out_$i117, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18 := in_$i118, in_$i119, in_$p120, in_$i121, in_$p122, in_$i123, in_$i124, in_$p125, in_$i126, in_$p127, in_$i128, in_$i129, in_$i130, in_$p131, in_$i132, in_$p133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i179, in_$i180, in_$i181, in_$p182, in_$p183, in_$i184, in_$p185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i228, in_$i229, in_$p230, in_$i231, in_$i232, in_$p233, in_$p234, in_$i235, in_$i236, in_$p237, in_$i238, in_$i114, in_$p115, in_$p116, in_$i117, in_cmdloc_dummy_var_16, in_cmdloc_dummy_var_17, in_cmdloc_dummy_var_18;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3140;

  $bb55:
    assume out_$i238 == 1;
    assume {:verifier.code 0} true;
    out_$i114, out_$p115, out_$p116, out_$i117 := out_$i229, out_$p122, out_$p120, out_$i136;
    goto $bb55_dummy;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    out_$i238 := $sgt.i32(out_$i229, 0);
    goto corral_source_split_3275;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p237, out_$i236);
    goto corral_source_split_3274;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    out_$p237 := $add.ref($add.ref(in_$p11, $mul.ref(0, 880)), $mul.ref(876, 1));
    goto corral_source_split_3273;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    out_$i236 := $add.i32(out_$i235, out_$i136);
    goto corral_source_split_3272;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    out_$i235 := $load.i32($M.0, out_$p234);
    goto corral_source_split_3271;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    out_$p234 := $add.ref($add.ref(in_$p11, $mul.ref(0, 880)), $mul.ref(876, 1));
    goto corral_source_split_3270;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p233, out_$i232);
    goto corral_source_split_3269;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    out_$p233 := $add.ref($add.ref(in_$p11, $mul.ref(0, 880)), $mul.ref(868, 1));
    goto corral_source_split_3268;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    out_$i232 := $add.i32(out_$i231, out_$i136);
    goto corral_source_split_3267;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    out_$i231 := $load.i32($M.0, out_$p230);
    goto corral_source_split_3266;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    out_$p230 := $add.ref($add.ref(in_$p11, $mul.ref(0, 880)), $mul.ref(868, 1));
    goto corral_source_split_3265;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    out_$i229 := $sub.i32(out_$i137, out_$i136);
    call {:si_unique_call 461} {:cexpr "remain"} boogie_si_record_i32(out_$i229);
    goto corral_source_split_3264;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_16 := $M.0;
    out_cmdloc_dummy_var_17 := $M.0;
    call {:si_unique_call 460} out_cmdloc_dummy_var_18 := $memcpy.i8(out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_$p120, out_$p122, out_$i228, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_18;
    goto corral_source_split_3263;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i228 := $sext.i32.i64(out_$i136);
    call {:si_unique_call 459} {:cexpr "__len___0"} boogie_si_record_i64(out_$i228);
    goto corral_source_split_3262;

  $bb50:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    out_$i189 := $ugt.i64(out_$i181, out_$i188);
    goto corral_source_split_3222;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    out_$i188 := $add.i64(out_$i184, out_$i187);
    goto corral_source_split_3221;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    out_$i187 := $zext.i32.i64(out_$i186);
    goto corral_source_split_3220;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    out_$i186 := $load.i32($M.0, out_$p185);
    goto corral_source_split_3219;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    out_$p185 := $add.ref($add.ref(in_$p11, $mul.ref(0, 880)), $mul.ref(864, 1));
    goto corral_source_split_3218;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    out_$i184 := $p2i.ref.i64(out_$p183);
    goto corral_source_split_3217;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    out_$p183 := $load.ref($M.0, out_$p182);
    goto corral_source_split_3216;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    out_$p182 := $add.ref($add.ref(in_$p11, $mul.ref(0, 880)), $mul.ref(856, 1));
    goto corral_source_split_3215;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    out_$i181 := $add.i64(out_$i179, out_$i180);
    goto corral_source_split_3214;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    out_$i180 := $p2i.ref.i64(out_$p120);
    goto corral_source_split_3213;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i179 := $sext.i32.i64(out_$i136);
    goto corral_source_split_3212;

  $bb44:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i140 := $slt.i32(out_$i136, 0);
    goto corral_source_split_3172;

  $bb41:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i137, 0);
    goto corral_source_split_3170;

  $bb39:
    assume !(out_$i138 == 1);
    goto corral_source_split_3169;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i136, 0);
    goto corral_source_split_3167;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3166;

  $bb35:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    out_$i136, out_$i137 := out_$i124, out_$i114;
    goto $bb36;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    out_$i136, out_$i137 := out_$i135, out_$i135;
    goto $bb36;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    out_$i135 := $sub.i32(out_$i132, out_$i134);
    call {:si_unique_call 452} {:cexpr "lencopy"} boogie_si_record_i32(out_$i135);
    goto corral_source_split_3164;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    out_$i134 := $load.i32($M.0, out_$p133);
    goto corral_source_split_3163;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(in_$p11, $mul.ref(0, 880)), $mul.ref(864, 1));
    goto corral_source_split_3162;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    out_$i132 := $load.i32($M.0, out_$p131);
    goto corral_source_split_3161;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(in_$p11, $mul.ref(0, 880)), $mul.ref(868, 1));
    goto corral_source_split_3160;

  $bb34:
    assume out_$i130 == 1;
    goto corral_source_split_3159;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    out_$i130 := $ugt.i32(out_$i124, out_$i129);
    goto corral_source_split_3157;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    out_$i129 := $sub.i32(out_$i126, out_$i128);
    goto corral_source_split_3156;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    out_$i128 := $load.i32($M.0, out_$p127);
    goto corral_source_split_3155;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(in_$p11, $mul.ref(0, 880)), $mul.ref(864, 1));
    goto corral_source_split_3154;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i32($M.0, out_$p125);
    goto corral_source_split_3153;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p11, $mul.ref(0, 880)), $mul.ref(868, 1));
    goto corral_source_split_3152;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_3151;

  $bb32:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    out_$i124 := in_$i8;
    goto $bb33;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    out_$i124 := out_$i114;
    goto $bb33;

  $bb31:
    assume out_$i123 == 1;
    goto corral_source_split_3149;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    out_$i123 := $slt.i32(out_$i114, in_$i8);
    goto corral_source_split_3147;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref(out_$p115, $mul.ref(out_$i121, 1));
    goto corral_source_split_3146;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    out_$i121 := $sext.i32.i64(out_$i117);
    goto corral_source_split_3145;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref(out_$p116, $mul.ref(out_$i119, 1));
    goto corral_source_split_3144;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    out_$i119 := $sext.i32.i64(out_$i118);
    goto corral_source_split_3143;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i118 := $add.i32(out_$i117, in_$i8);
    goto corral_source_split_3142;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb55_dummy:
    call {:si_unique_call 1} out_$i118, out_$i119, out_$p120, out_$i121, out_$p122, out_$i123, out_$i124, out_$p125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$p131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i179, out_$i180, out_$i181, out_$p182, out_$p183, out_$i184, out_$p185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$p233, out_$p234, out_$i235, out_$i236, out_$p237, out_$i238, out_$i114, out_$p115, out_$p116, out_$i117, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18 := stk1160_copy_video_loop_$bb29(in_$i8, in_$p11, out_$i118, out_$i119, out_$p120, out_$i121, out_$p122, out_$i123, out_$i124, out_$p125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$p131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i179, out_$i180, out_$i181, out_$p182, out_$p183, out_$i184, out_$p185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$p233, out_$p234, out_$i235, out_$i236, out_$p237, out_$i238, out_$i114, out_$p115, out_$p116, out_$i117, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18);
    return;

  exit:
    return;
}



procedure stk1160_copy_video_loop_$bb29(in_$i8: i32, in_$p11: ref, in_$i118: i32, in_$i119: i64, in_$p120: ref, in_$i121: i64, in_$p122: ref, in_$i123: i1, in_$i124: i32, in_$p125: ref, in_$i126: i32, in_$p127: ref, in_$i128: i32, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i132: i32, in_$p133: ref, in_$i134: i32, in_$i135: i32, in_$i136: i32, in_$i137: i32, in_$i138: i1, in_$i139: i1, in_$i140: i1, in_$i179: i64, in_$i180: i64, in_$i181: i64, in_$p182: ref, in_$p183: ref, in_$i184: i64, in_$p185: ref, in_$i186: i32, in_$i187: i64, in_$i188: i64, in_$i189: i1, in_$i228: i64, in_$i229: i32, in_$p230: ref, in_$i231: i32, in_$i232: i32, in_$p233: ref, in_$p234: ref, in_$i235: i32, in_$i236: i32, in_$p237: ref, in_$i238: i1, in_$i114: i32, in_$p115: ref, in_$p116: ref, in_$i117: i32, in_cmdloc_dummy_var_16: [ref]i8, in_cmdloc_dummy_var_17: [ref]i8, in_cmdloc_dummy_var_18: [ref]i8) returns (out_$i118: i32, out_$i119: i64, out_$p120: ref, out_$i121: i64, out_$p122: ref, out_$i123: i1, out_$i124: i32, out_$p125: ref, out_$i126: i32, out_$p127: ref, out_$i128: i32, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i132: i32, out_$p133: ref, out_$i134: i32, out_$i135: i32, out_$i136: i32, out_$i137: i32, out_$i138: i1, out_$i139: i1, out_$i140: i1, out_$i179: i64, out_$i180: i64, out_$i181: i64, out_$p182: ref, out_$p183: ref, out_$i184: i64, out_$p185: ref, out_$i186: i32, out_$i187: i64, out_$i188: i64, out_$i189: i1, out_$i228: i64, out_$i229: i32, out_$p230: ref, out_$i231: i32, out_$i232: i32, out_$p233: ref, out_$p234: ref, out_$i235: i32, out_$i236: i32, out_$p237: ref, out_$i238: i1, out_$i114: i32, out_$p115: ref, out_$p116: ref, out_$i117: i32, out_cmdloc_dummy_var_16: [ref]i8, out_cmdloc_dummy_var_17: [ref]i8, out_cmdloc_dummy_var_18: [ref]i8);
  modifies $M.0;



implementation vidioc_s_std_loop_$bb20(in_$p4: ref, in_$i41: i64, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$p43: ref, in_vslice_dummy_var_111: i32) returns (out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$p43: ref, out_vslice_dummy_var_111: i32)
{

  entry:
    out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p43, out_vslice_dummy_var_111 := in_$p44, in_$p45, in_$p46, in_$p47, in_$i48, in_$i49, in_$p50, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$i56, in_$i57, in_$p58, in_$p59, in_$p60, in_$p61, in_$p62, in_$p63, in_$p64, in_$i65, in_$p68, in_$p69, in_$p70, in_$p71, in_$p72, in_$i73, in_$i74, in_$p43, in_vslice_dummy_var_111;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3586;

  $bb28:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$p43 := out_$p71;
    goto $bb28_dummy;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i64(out_$i73, in_$i41);
    goto corral_source_split_3621;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    out_$i73 := $p2i.ref.i64(out_$p72);
    goto corral_source_split_3620;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p70, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_3619;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref(out_$p70, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_3618;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    out_$p70 := $bitcast.ref.ref(out_$p69);
    goto corral_source_split_3617;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_3616;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 296)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_3615;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i64($M.0, out_$p64);
    call {:si_unique_call 519} out_vslice_dummy_var_111 := devirtbounce.2(out_$p63, out_$p43, out_$i65);
    goto corral_source_split_3613;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p4, $mul.ref(0, 7232)), $mul.ref(3432, 1));
    goto corral_source_split_3612;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.0, out_$p62);
    goto corral_source_split_3611;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p61, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_3610;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_3609;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p59, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3608;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_3607;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p43, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_3606;

  $bb25:
    assume out_$i57 == 1;
    goto corral_source_split_3605;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i56, 0);
    goto corral_source_split_3603;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p55);
    goto corral_source_split_3602;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.0, out_$p54);
    goto corral_source_split_3601;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p53, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_3600;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_3599;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p51, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3598;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_3597;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p43, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_3596;

  $bb22:
    assume out_$i49 == 1;
    goto corral_source_split_3595;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i64(out_$i48, 0);
    goto corral_source_split_3593;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(out_$p47);
    goto corral_source_split_3592;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_3591;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p45, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3590;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_3589;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_3588;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i49 == 1);
    goto $bb24;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i57 == 1);
    goto $bb24;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p43, out_vslice_dummy_var_111 := vidioc_s_std_loop_$bb20(in_$p4, in_$i41, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p43, out_vslice_dummy_var_111);
    return;

  exit:
    return;
}



procedure vidioc_s_std_loop_$bb20(in_$p4: ref, in_$i41: i64, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$p43: ref, in_vslice_dummy_var_111: i32) returns (out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$p43: ref, out_vslice_dummy_var_111: i32);



implementation vidioc_querystd_loop_$bb4(in_$p2: ref, in_$i15: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p17: ref, in_vslice_dummy_var_112: i32) returns (out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p17: ref, out_vslice_dummy_var_112: i32)
{

  entry:
    out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p17, out_vslice_dummy_var_112 := in_$p18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p17, in_vslice_dummy_var_112;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3640;

  $bb12:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$p17 := out_$p43;
    goto $bb12_dummy;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, in_$i15);
    goto corral_source_split_3673;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_3672;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p42, $mul.ref($sub.ref(0, 128), 296)), $mul.ref(128, 1));
    goto corral_source_split_3671;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref(out_$p42, $mul.ref($sub.ref(0, 128), 296));
    goto corral_source_split_3670;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    out_$p42 := $bitcast.ref.ref(out_$p41);
    goto corral_source_split_3669;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_3668;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 296)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_3667;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    call {:si_unique_call 521} out_vslice_dummy_var_112 := devirtbounce.6(out_$p37, out_$p17, in_$p2);
    goto corral_source_split_3665;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p35, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_3664;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_3663;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p33, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3662;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_3661;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p17, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_3660;

  $bb9:
    assume out_$i31 == 1;
    goto corral_source_split_3659;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, 0);
    goto corral_source_split_3657;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_3656;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_3655;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_3654;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_3653;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p25, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3652;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_3651;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p17, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_3650;

  $bb6:
    assume out_$i23 == 1;
    goto corral_source_split_3649;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i64(out_$i22, 0);
    goto corral_source_split_3647;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_3646;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_3645;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3644;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_3643;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p17, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_3642;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i31 == 1);
    goto $bb8;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p17, out_vslice_dummy_var_112 := vidioc_querystd_loop_$bb4(in_$p2, in_$i15, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p17, out_vslice_dummy_var_112);
    return;

  exit:
    return;
}



procedure vidioc_querystd_loop_$bb4(in_$p2: ref, in_$i15: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p17: ref, in_vslice_dummy_var_112: i32) returns (out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p17: ref, out_vslice_dummy_var_112: i32);
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.3, $M.11, $M.12, $M.13, $M.14, $M.2, $M.16, $M.18, $M.20;



implementation stk1160_i2c_xfer_loop_$bb4(in_$p1: ref, in_$i2: i32, in_$p5: ref, in_$i8: i64, in_$p10: ref, in_$i11: i16, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i17: i64, in_$p19: ref, in_$i20: i16, in_$i21: i32, in_$i22: i1, in_$i23: i8, in_$i24: i32, in_$i25: i8, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i35: i64, in_$p37: ref, in_$i38: i16, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i46: i32, in_$i47: i1, in_$i48: i64, in_$p50: ref, in_$i51: i16, in_$i52: i32, in_$i53: i1, in_$i54: i64, in_$i55: i64, in_$p57: ref, in_$i58: i16, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i64, in_$p64: ref, in_$i65: i16, in_$i66: i32, in_$i67: i64, in_$i68: i64, in_$p70: ref, in_$i71: i16, in_$i72: i32, in_$i73: i1, in_$i74: i64, in_$p76: ref, in_$i77: i16, in_$i78: i32, in_$i79: i1, in_$i80: i64, in_$i81: i64, in_$p83: ref, in_$i84: i16, in_$i85: i32, in_$i86: i1, in_$i90: i32, in_$i91: i1, in_$i92: i64, in_$p94: ref, in_$p95: ref, in_$i96: i8, in_$i97: i32, in_$i99: i8, in_$i100: i32, in_$i101: i8, in_$i102: i64, in_$p104: ref, in_$p105: ref, in_$i106: i8, in_$i107: i32, in_$i108: i8, in_$i109: i64, in_$i110: i64, in_$p112: ref, in_$p113: ref, in_$i114: i32, in_$i115: i32, in_$i116: i1, in_$i117: i64, in_$i118: i64, in_$p120: ref, in_$p121: ref, in_$i122: i8, in_$i123: i32, in_$i125: i32, in_$i128: i64, in_$p130: ref, in_$i131: i16, in_$i132: i32, in_$i133: i1, in_$i137: i32, in_$i138: i1, in_$i139: i64, in_$p141: ref, in_$p142: ref, in_$i143: i8, in_$i144: i32, in_$i145: i64, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$i150: i8, in_$i151: i32, in_$i153: i8, in_$i154: i32, in_$i155: i8, in_$i156: i64, in_$p158: ref, in_$p159: ref, in_$i160: i8, in_$i161: i32, in_$i162: i8, in_$i163: i64, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$i168: i8, in_$i169: i32, in_$i170: i8, in_$i171: i32, in_$i126: i32, in_$i127: i32, in_$i33: i32, in_$i34: i32, in_$i172: i1, in_$i173: i32, in_$i174: i32, in_$i175: i1, in_$i177: i32, in_$i178: i1, in_$i7: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32) returns (out_$i8: i64, out_$p10: ref, out_$i11: i16, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i17: i64, out_$p19: ref, out_$i20: i16, out_$i21: i32, out_$i22: i1, out_$i23: i8, out_$i24: i32, out_$i25: i8, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i35: i64, out_$p37: ref, out_$i38: i16, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i46: i32, out_$i47: i1, out_$i48: i64, out_$p50: ref, out_$i51: i16, out_$i52: i32, out_$i53: i1, out_$i54: i64, out_$i55: i64, out_$p57: ref, out_$i58: i16, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i64, out_$p64: ref, out_$i65: i16, out_$i66: i32, out_$i67: i64, out_$i68: i64, out_$p70: ref, out_$i71: i16, out_$i72: i32, out_$i73: i1, out_$i74: i64, out_$p76: ref, out_$i77: i16, out_$i78: i32, out_$i79: i1, out_$i80: i64, out_$i81: i64, out_$p83: ref, out_$i84: i16, out_$i85: i32, out_$i86: i1, out_$i90: i32, out_$i91: i1, out_$i92: i64, out_$p94: ref, out_$p95: ref, out_$i96: i8, out_$i97: i32, out_$i99: i8, out_$i100: i32, out_$i101: i8, out_$i102: i64, out_$p104: ref, out_$p105: ref, out_$i106: i8, out_$i107: i32, out_$i108: i8, out_$i109: i64, out_$i110: i64, out_$p112: ref, out_$p113: ref, out_$i114: i32, out_$i115: i32, out_$i116: i1, out_$i117: i64, out_$i118: i64, out_$p120: ref, out_$p121: ref, out_$i122: i8, out_$i123: i32, out_$i125: i32, out_$i128: i64, out_$p130: ref, out_$i131: i16, out_$i132: i32, out_$i133: i1, out_$i137: i32, out_$i138: i1, out_$i139: i64, out_$p141: ref, out_$p142: ref, out_$i143: i8, out_$i144: i32, out_$i145: i64, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$i150: i8, out_$i151: i32, out_$i153: i8, out_$i154: i32, out_$i155: i8, out_$i156: i64, out_$p158: ref, out_$p159: ref, out_$i160: i8, out_$i161: i32, out_$i162: i8, out_$i163: i64, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$i168: i8, out_$i169: i32, out_$i170: i8, out_$i171: i32, out_$i126: i32, out_$i127: i32, out_$i33: i32, out_$i34: i32, out_$i172: i1, out_$i173: i32, out_$i174: i32, out_$i175: i1, out_$i177: i32, out_$i178: i1, out_$i7: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32)
{

  entry:
    out_$i8, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i17, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i46, out_$i47, out_$i48, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p83, out_$i84, out_$i85, out_$i86, out_$i90, out_$i91, out_$i92, out_$p94, out_$p95, out_$i96, out_$i97, out_$i99, out_$i100, out_$i101, out_$i102, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p120, out_$p121, out_$i122, out_$i123, out_$i125, out_$i128, out_$p130, out_$i131, out_$i132, out_$i133, out_$i137, out_$i138, out_$i139, out_$p141, out_$p142, out_$i143, out_$i144, out_$i145, out_$p147, out_$p148, out_$p149, out_$i150, out_$i151, out_$i153, out_$i154, out_$i155, out_$i156, out_$p158, out_$p159, out_$i160, out_$i161, out_$i162, out_$i163, out_$p165, out_$p166, out_$p167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i126, out_$i127, out_$i33, out_$i34, out_$i172, out_$i173, out_$i174, out_$i175, out_$i177, out_$i178, out_$i7, out_vslice_dummy_var_116, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_123, out_vslice_dummy_var_124 := in_$i8, in_$p10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i17, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i35, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i46, in_$i47, in_$i48, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$p70, in_$i71, in_$i72, in_$i73, in_$i74, in_$p76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$p83, in_$i84, in_$i85, in_$i86, in_$i90, in_$i91, in_$i92, in_$p94, in_$p95, in_$i96, in_$i97, in_$i99, in_$i100, in_$i101, in_$i102, in_$p104, in_$p105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p112, in_$p113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$p120, in_$p121, in_$i122, in_$i123, in_$i125, in_$i128, in_$p130, in_$i131, in_$i132, in_$i133, in_$i137, in_$i138, in_$i139, in_$p141, in_$p142, in_$i143, in_$i144, in_$i145, in_$p147, in_$p148, in_$p149, in_$i150, in_$i151, in_$i153, in_$i154, in_$i155, in_$i156, in_$p158, in_$p159, in_$i160, in_$i161, in_$i162, in_$i163, in_$p165, in_$p166, in_$p167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i126, in_$i127, in_$i33, in_$i34, in_$i172, in_$i173, in_$i174, in_$i175, in_$i177, in_$i178, in_$i7, in_vslice_dummy_var_116, in_vslice_dummy_var_120, in_vslice_dummy_var_121, in_vslice_dummy_var_123, in_vslice_dummy_var_124;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3837;

  $bb66:
    assume out_$i178 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i177;
    goto $bb66_dummy;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    out_$i178 := $slt.i32(out_$i177, in_$i2);
    goto corral_source_split_4060;

  $bb65:
    assume {:verifier.code 0} true;
    out_$i177 := $add.i32(out_$i34, 1);
    call {:si_unique_call 578} {:cexpr "i"} boogie_si_record_i32(out_$i177);
    goto corral_source_split_4059;

  $bb64:
    assume !(out_$i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} out_vslice_dummy_var_124 := printk.ref(.str.88);
    goto corral_source_split_4057;

  $bb63:
    assume out_$i175 == 1;
    goto corral_source_split_4056;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    out_$i175 := $ne.i32(out_$i174, 0);
    goto corral_source_split_4054;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i174 := $M.21;
    goto corral_source_split_4053;

  $bb61:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    out_$i173 := out_$i33;
    assume true;
    goto $bb61;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    out_$i172 := $slt.i32(out_$i33, 0);
    goto corral_source_split_3884;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3883;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i126, out_$i127;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i26, out_$i7;
    goto $bb18;

  $bb12:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i26;
    assume true;
    goto $bb12;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(out_$i26, 0);
    goto corral_source_split_3863;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} out_$i26 := stk1160_i2c_check_for_device(in_$p5, out_$i25);
    call {:si_unique_call 564} {:cexpr "rc"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_3862;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    out_$i25 := $trunc.i32.i8(out_$i24);
    goto corral_source_split_3861;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i8.i32(out_$i23);
    goto corral_source_split_3860;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    out_$i23 := $trunc.i32.i8(out_$i13);
    goto corral_source_split_3859;

  $bb9:
    assume out_$i22 == 1;
    goto corral_source_split_3858;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, 0);
    goto corral_source_split_3856;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i16.i32(out_$i20);
    goto corral_source_split_3855;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i16($M.0, out_$p19);
    goto corral_source_split_3854;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i17, 16)), $mul.ref(4, 1));
    goto corral_source_split_3853;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    goto corral_source_split_3852;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3851;

  $bb7:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} out_vslice_dummy_var_116 := printk.ref.ref.i32(.str.80, .str.81, out_$i13);
    goto corral_source_split_3849;

  $bb6:
    assume out_$i15 == 1;
    goto corral_source_split_3848;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_3846;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$i14 := $M.21;
    goto corral_source_split_3845;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    out_$i13 := $shl.i32(out_$i12, 1);
    call {:si_unique_call 561} {:cexpr "addr"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_3844;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i16.i32(out_$i11);
    goto corral_source_split_3843;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i16($M.0, out_$p10);
    goto corral_source_split_3842;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i8, 16)), $mul.ref(0, 1));
    goto corral_source_split_3841;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    goto corral_source_split_3840;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3839;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} out_$i171 := stk1160_i2c_write_reg(in_$p5, out_$i155, out_$i162, out_$i170);
    call {:si_unique_call 576} {:cexpr "rc"} boogie_si_record_i32(out_$i171);
    assume {:verifier.code 0} true;
    out_$i126, out_$i127 := out_$i171, out_$i7;
    goto $bb49;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    out_$i126, out_$i127 := out_$i114, out_$i125;
    goto $bb49;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i125 := $add.i32(out_$i7, 1);
    call {:si_unique_call 572} {:cexpr "i"} boogie_si_record_i32(out_$i125);
    goto corral_source_split_4004;

  $bb47:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} out_vslice_dummy_var_121 := printk.ref.i32(.str.86, out_$i123);
    goto corral_source_split_4002;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i8.i32(out_$i122);
    goto corral_source_split_4001;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i8($M.0, out_$p121);
    goto corral_source_split_4000;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    out_$p121 := $load.ref($M.0, out_$p120);
    goto corral_source_split_3999;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i118, 16)), $mul.ref(8, 1));
    goto corral_source_split_3998;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    goto corral_source_split_3997;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    out_$i118 := $add.i64(out_$i117, 1);
    goto corral_source_split_3996;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    out_$i117 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3995;

  $bb46:
    assume out_$i116 == 1;
    goto corral_source_split_3994;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    out_$i116 := $ne.i32(out_$i115, 0);
    goto corral_source_split_3992;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    out_$i115 := $M.21;
    goto corral_source_split_3991;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} out_$i114 := stk1160_i2c_read_reg(in_$p5, out_$i101, out_$i108, out_$p113);
    call {:si_unique_call 570} {:cexpr "rc"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_3990;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    out_$p113 := $load.ref($M.0, out_$p112);
    goto corral_source_split_3989;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i110, 16)), $mul.ref(8, 1));
    goto corral_source_split_3988;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    goto corral_source_split_3987;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    out_$i110 := $add.i64(out_$i109, 1);
    goto corral_source_split_3986;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    out_$i109 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3985;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    out_$i108 := $trunc.i32.i8(out_$i107);
    goto corral_source_split_3984;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    out_$i107 := $zext.i8.i32(out_$i106);
    goto corral_source_split_3983;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i8($M.0, out_$p105);
    goto corral_source_split_3982;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_3981;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i102, 16)), $mul.ref(8, 1));
    goto corral_source_split_3980;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    goto corral_source_split_3979;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    out_$i102 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3978;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    out_$i101 := $trunc.i32.i8(out_$i100);
    goto corral_source_split_3977;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    out_$i100 := $zext.i8.i32(out_$i99);
    goto corral_source_split_3976;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i99 := $trunc.i32.i8(out_$i13);
    goto corral_source_split_3975;

  $bb44:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} out_vslice_dummy_var_120 := printk.ref.i32(.str.85, out_$i97);
    goto corral_source_split_3973;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    out_$i97 := $zext.i8.i32(out_$i96);
    goto corral_source_split_3972;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i8($M.0, out_$p95);
    goto corral_source_split_3971;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_3970;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i92, 16)), $mul.ref(8, 1));
    goto corral_source_split_3969;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    goto corral_source_split_3968;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    out_$i92 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3967;

  $bb43:
    assume out_$i91 == 1;
    goto corral_source_split_3966;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    out_$i91 := $ne.i32(out_$i90, 0);
    goto corral_source_split_3964;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i90 := $M.21;
    goto corral_source_split_3963;

  $bb38:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i32(out_$i85, 1);
    goto corral_source_split_3958;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i16.i32(out_$i84);
    goto corral_source_split_3957;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i16($M.0, out_$p83);
    goto corral_source_split_3956;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i81, 16)), $mul.ref(4, 1));
    goto corral_source_split_3955;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    goto corral_source_split_3954;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i64(out_$i80, 1);
    goto corral_source_split_3953;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    out_$i80 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3952;

  $bb36:
    assume !(out_$i79 == 1);
    goto corral_source_split_3951;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 1);
    goto corral_source_split_3946;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i16.i32(out_$i77);
    goto corral_source_split_3945;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i16($M.0, out_$p76);
    goto corral_source_split_3944;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i74, 16)), $mul.ref(4, 1));
    goto corral_source_split_3943;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    goto corral_source_split_3942;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    out_$i74 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3941;

  $bb32:
    assume out_$i73 == 1;
    goto corral_source_split_3940;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i66, out_$i72);
    goto corral_source_split_3938;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i16.i32(out_$i71);
    goto corral_source_split_3937;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i16($M.0, out_$p70);
    goto corral_source_split_3936;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i68, 16)), $mul.ref(0, 1));
    goto corral_source_split_3935;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    goto corral_source_split_3934;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i64(out_$i67, 1);
    goto corral_source_split_3933;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3932;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    out_$i66 := $zext.i16.i32(out_$i65);
    goto corral_source_split_3931;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i16($M.0, out_$p64);
    goto corral_source_split_3930;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i62, 16)), $mul.ref(0, 1));
    goto corral_source_split_3929;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    goto corral_source_split_3928;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3927;

  $bb30:
    assume out_$i61 == 1;
    goto corral_source_split_3926;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(out_$i60, 0);
    goto corral_source_split_3924;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    out_$i60 := $and.i32(out_$i59, 1);
    goto corral_source_split_3923;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i16.i32(out_$i58);
    goto corral_source_split_3922;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i16($M.0, out_$p57);
    goto corral_source_split_3921;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i55, 16)), $mul.ref(2, 1));
    goto corral_source_split_3920;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    goto corral_source_split_3919;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i64(out_$i54, 1);
    goto corral_source_split_3918;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3917;

  $bb28:
    assume out_$i53 == 1;
    goto corral_source_split_3916;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    out_$i53 := $ule.i32(out_$i52, 2);
    goto corral_source_split_3907;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i16.i32(out_$i51);
    goto corral_source_split_3906;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i16($M.0, out_$p50);
    goto corral_source_split_3905;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i48, 16)), $mul.ref(4, 1));
    goto corral_source_split_3904;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    goto corral_source_split_3903;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3902;

  $bb25:
    assume out_$i47 == 1;
    goto corral_source_split_3901;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i46, in_$i2);
    goto corral_source_split_3892;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i7, 1);
    goto corral_source_split_3891;

  $bb20:
    assume !(out_$i41 == 1);
    goto corral_source_split_3890;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_3872;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    out_$i40 := $and.i32(out_$i39, 1);
    goto corral_source_split_3871;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i16.i32(out_$i38);
    goto corral_source_split_3870;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i16($M.0, out_$p37);
    goto corral_source_split_3869;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i35, 16)), $mul.ref(2, 1));
    goto corral_source_split_3868;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    goto corral_source_split_3867;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3866;

  $bb10:
    assume !(out_$i22 == 1);
    goto corral_source_split_3865;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    out_$i170 := $trunc.i32.i8(out_$i169);
    goto corral_source_split_4049;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    out_$i169 := $zext.i8.i32(out_$i168);
    goto corral_source_split_4048;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    out_$i168 := $load.i8($M.0, out_$p167);
    goto corral_source_split_4047;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref(out_$p166, $mul.ref(1, 1));
    goto corral_source_split_4046;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    out_$p166 := $load.ref($M.0, out_$p165);
    goto corral_source_split_4045;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i163, 16)), $mul.ref(8, 1));
    goto corral_source_split_4044;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    goto corral_source_split_4043;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    out_$i163 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4042;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    out_$i162 := $trunc.i32.i8(out_$i161);
    goto corral_source_split_4041;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    out_$i161 := $zext.i8.i32(out_$i160);
    goto corral_source_split_4040;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    out_$i160 := $load.i8($M.0, out_$p159);
    goto corral_source_split_4039;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    out_$p159 := $load.ref($M.0, out_$p158);
    goto corral_source_split_4038;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i156, 16)), $mul.ref(8, 1));
    goto corral_source_split_4037;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    goto corral_source_split_4036;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    out_$i156 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4035;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    out_$i155 := $trunc.i32.i8(out_$i154);
    goto corral_source_split_4034;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    out_$i154 := $zext.i8.i32(out_$i153);
    goto corral_source_split_4033;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i153 := $trunc.i32.i8(out_$i13);
    goto corral_source_split_4032;

  $bb57:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} out_vslice_dummy_var_123 := printk.ref.i32.i32(.str.87, out_$i144, out_$i151);
    goto corral_source_split_4030;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    out_$i151 := $zext.i8.i32(out_$i150);
    goto corral_source_split_4029;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    out_$i150 := $load.i8($M.0, out_$p149);
    goto corral_source_split_4028;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref(out_$p148, $mul.ref(1, 1));
    goto corral_source_split_4027;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    out_$p148 := $load.ref($M.0, out_$p147);
    goto corral_source_split_4026;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i145, 16)), $mul.ref(8, 1));
    goto corral_source_split_4025;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    goto corral_source_split_4024;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    out_$i145 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4023;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    out_$i144 := $zext.i8.i32(out_$i143);
    goto corral_source_split_4022;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    out_$i143 := $load.i8($M.0, out_$p142);
    goto corral_source_split_4021;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    out_$p142 := $load.ref($M.0, out_$p141);
    goto corral_source_split_4020;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i139, 16)), $mul.ref(8, 1));
    goto corral_source_split_4019;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    goto corral_source_split_4018;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    out_$i139 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4017;

  $bb56:
    assume out_$i138 == 1;
    goto corral_source_split_4016;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    out_$i138 := $ne.i32(out_$i137, 0);
    goto corral_source_split_4014;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i137 := $M.21;
    goto corral_source_split_4013;

  $bb51:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    out_$i133 := $ne.i32(out_$i132, 2);
    goto corral_source_split_3914;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    out_$i132 := $zext.i16.i32(out_$i131);
    goto corral_source_split_3913;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    out_$i131 := $load.i16($M.0, out_$p130);
    goto corral_source_split_3912;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i128, 16)), $mul.ref(4, 1));
    goto corral_source_split_3911;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    goto corral_source_split_3910;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i128 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3909;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i47 == 1);
    goto $bb27;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i53 == 1);
    goto $bb27;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i61 == 1);
    goto $bb27;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i73 == 1);
    goto $bb27;

  $bb66_dummy:
    call {:si_unique_call 1} out_$i8, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i17, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i46, out_$i47, out_$i48, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p83, out_$i84, out_$i85, out_$i86, out_$i90, out_$i91, out_$i92, out_$p94, out_$p95, out_$i96, out_$i97, out_$i99, out_$i100, out_$i101, out_$i102, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p120, out_$p121, out_$i122, out_$i123, out_$i125, out_$i128, out_$p130, out_$i131, out_$i132, out_$i133, out_$i137, out_$i138, out_$i139, out_$p141, out_$p142, out_$i143, out_$i144, out_$i145, out_$p147, out_$p148, out_$p149, out_$i150, out_$i151, out_$i153, out_$i154, out_$i155, out_$i156, out_$p158, out_$p159, out_$i160, out_$i161, out_$i162, out_$i163, out_$p165, out_$p166, out_$p167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i126, out_$i127, out_$i33, out_$i34, out_$i172, out_$i173, out_$i174, out_$i175, out_$i177, out_$i178, out_$i7, out_vslice_dummy_var_116, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_123, out_vslice_dummy_var_124 := stk1160_i2c_xfer_loop_$bb4(in_$p1, in_$i2, in_$p5, out_$i8, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i17, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i46, out_$i47, out_$i48, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p83, out_$i84, out_$i85, out_$i86, out_$i90, out_$i91, out_$i92, out_$p94, out_$p95, out_$i96, out_$i97, out_$i99, out_$i100, out_$i101, out_$i102, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p120, out_$p121, out_$i122, out_$i123, out_$i125, out_$i128, out_$p130, out_$i131, out_$i132, out_$i133, out_$i137, out_$i138, out_$i139, out_$p141, out_$p142, out_$i143, out_$i144, out_$i145, out_$p147, out_$p148, out_$p149, out_$i150, out_$i151, out_$i153, out_$i154, out_$i155, out_$i156, out_$p158, out_$p159, out_$i160, out_$i161, out_$i162, out_$i163, out_$p165, out_$p166, out_$p167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i126, out_$i127, out_$i33, out_$i34, out_$i172, out_$i173, out_$i174, out_$i175, out_$i177, out_$i178, out_$i7, out_vslice_dummy_var_116, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_123, out_vslice_dummy_var_124);
    return;

  exit:
    return;
}



procedure stk1160_i2c_xfer_loop_$bb4(in_$p1: ref, in_$i2: i32, in_$p5: ref, in_$i8: i64, in_$p10: ref, in_$i11: i16, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i17: i64, in_$p19: ref, in_$i20: i16, in_$i21: i32, in_$i22: i1, in_$i23: i8, in_$i24: i32, in_$i25: i8, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i35: i64, in_$p37: ref, in_$i38: i16, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i46: i32, in_$i47: i1, in_$i48: i64, in_$p50: ref, in_$i51: i16, in_$i52: i32, in_$i53: i1, in_$i54: i64, in_$i55: i64, in_$p57: ref, in_$i58: i16, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i64, in_$p64: ref, in_$i65: i16, in_$i66: i32, in_$i67: i64, in_$i68: i64, in_$p70: ref, in_$i71: i16, in_$i72: i32, in_$i73: i1, in_$i74: i64, in_$p76: ref, in_$i77: i16, in_$i78: i32, in_$i79: i1, in_$i80: i64, in_$i81: i64, in_$p83: ref, in_$i84: i16, in_$i85: i32, in_$i86: i1, in_$i90: i32, in_$i91: i1, in_$i92: i64, in_$p94: ref, in_$p95: ref, in_$i96: i8, in_$i97: i32, in_$i99: i8, in_$i100: i32, in_$i101: i8, in_$i102: i64, in_$p104: ref, in_$p105: ref, in_$i106: i8, in_$i107: i32, in_$i108: i8, in_$i109: i64, in_$i110: i64, in_$p112: ref, in_$p113: ref, in_$i114: i32, in_$i115: i32, in_$i116: i1, in_$i117: i64, in_$i118: i64, in_$p120: ref, in_$p121: ref, in_$i122: i8, in_$i123: i32, in_$i125: i32, in_$i128: i64, in_$p130: ref, in_$i131: i16, in_$i132: i32, in_$i133: i1, in_$i137: i32, in_$i138: i1, in_$i139: i64, in_$p141: ref, in_$p142: ref, in_$i143: i8, in_$i144: i32, in_$i145: i64, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$i150: i8, in_$i151: i32, in_$i153: i8, in_$i154: i32, in_$i155: i8, in_$i156: i64, in_$p158: ref, in_$p159: ref, in_$i160: i8, in_$i161: i32, in_$i162: i8, in_$i163: i64, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$i168: i8, in_$i169: i32, in_$i170: i8, in_$i171: i32, in_$i126: i32, in_$i127: i32, in_$i33: i32, in_$i34: i32, in_$i172: i1, in_$i173: i32, in_$i174: i32, in_$i175: i1, in_$i177: i32, in_$i178: i1, in_$i7: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32) returns (out_$i8: i64, out_$p10: ref, out_$i11: i16, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i17: i64, out_$p19: ref, out_$i20: i16, out_$i21: i32, out_$i22: i1, out_$i23: i8, out_$i24: i32, out_$i25: i8, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i35: i64, out_$p37: ref, out_$i38: i16, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i46: i32, out_$i47: i1, out_$i48: i64, out_$p50: ref, out_$i51: i16, out_$i52: i32, out_$i53: i1, out_$i54: i64, out_$i55: i64, out_$p57: ref, out_$i58: i16, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i64, out_$p64: ref, out_$i65: i16, out_$i66: i32, out_$i67: i64, out_$i68: i64, out_$p70: ref, out_$i71: i16, out_$i72: i32, out_$i73: i1, out_$i74: i64, out_$p76: ref, out_$i77: i16, out_$i78: i32, out_$i79: i1, out_$i80: i64, out_$i81: i64, out_$p83: ref, out_$i84: i16, out_$i85: i32, out_$i86: i1, out_$i90: i32, out_$i91: i1, out_$i92: i64, out_$p94: ref, out_$p95: ref, out_$i96: i8, out_$i97: i32, out_$i99: i8, out_$i100: i32, out_$i101: i8, out_$i102: i64, out_$p104: ref, out_$p105: ref, out_$i106: i8, out_$i107: i32, out_$i108: i8, out_$i109: i64, out_$i110: i64, out_$p112: ref, out_$p113: ref, out_$i114: i32, out_$i115: i32, out_$i116: i1, out_$i117: i64, out_$i118: i64, out_$p120: ref, out_$p121: ref, out_$i122: i8, out_$i123: i32, out_$i125: i32, out_$i128: i64, out_$p130: ref, out_$i131: i16, out_$i132: i32, out_$i133: i1, out_$i137: i32, out_$i138: i1, out_$i139: i64, out_$p141: ref, out_$p142: ref, out_$i143: i8, out_$i144: i32, out_$i145: i64, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$i150: i8, out_$i151: i32, out_$i153: i8, out_$i154: i32, out_$i155: i8, out_$i156: i64, out_$p158: ref, out_$p159: ref, out_$i160: i8, out_$i161: i32, out_$i162: i8, out_$i163: i64, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$i168: i8, out_$i169: i32, out_$i170: i8, out_$i171: i32, out_$i126: i32, out_$i127: i32, out_$i33: i32, out_$i34: i32, out_$i172: i1, out_$i173: i32, out_$i174: i32, out_$i175: i1, out_$i177: i32, out_$i178: i1, out_$i7: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32);
  modifies $M.0, $CurrAddr;



implementation stk1160_i2c_busy_wait_loop_$bb4(in_$p0: ref, in_$i1: i8, in_$p2: ref, in_$i5: i64, in_$i10: i8, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i64, in_$i16: i64, in_$i17: i1, in_vslice_dummy_var_126: i32) returns (out_$i10: i8, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i64, out_$i16: i64, out_$i17: i1, out_vslice_dummy_var_126: i32)
{

  entry:
    out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_vslice_dummy_var_126 := in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_vslice_dummy_var_126;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i17 == 1;
    goto $bb10_dummy;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i64(out_$i16, 0);
    goto corral_source_split_4182;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    out_$i16 := $sub.i64(out_$i15, in_$i5);
    goto corral_source_split_4181;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i64($M.0, jiffies);
    goto corral_source_split_4180;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} usleep_range(10000, 20000);
    goto corral_source_split_4179;

  $bb7:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_4175;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    out_$i13 := $and.i32(out_$i11, out_$i12);
    goto corral_source_split_4174;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i8.i32(in_$i1);
    goto corral_source_split_4173;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i8.i32(out_$i10);
    goto corral_source_split_4172;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i8($M.0, in_$p2);
    goto corral_source_split_4171;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} out_vslice_dummy_var_126 := stk1160_read_reg(in_$p0, 513, in_$p2);
    goto corral_source_split_4170;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_vslice_dummy_var_126 := stk1160_i2c_busy_wait_loop_$bb4(in_$p0, in_$i1, in_$p2, in_$i5, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_vslice_dummy_var_126);
    return;

  exit:
    return;
}



procedure stk1160_i2c_busy_wait_loop_$bb4(in_$p0: ref, in_$i1: i8, in_$p2: ref, in_$i5: i64, in_$i10: i8, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i64, in_$i16: i64, in_$i17: i1, in_vslice_dummy_var_126: i32) returns (out_$i10: i8, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i64, out_$i16: i64, out_$i17: i1, out_vslice_dummy_var_126: i32);
  modifies $M.0;



implementation main_loop_$bb1(in_$p1: ref, in_$i2: i32, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1) returns (out_$i2: i32, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1)
{

  entry:
    out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61 := in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 663} out_$i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 664} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i2);
    call {:si_unique_call 665} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i2);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb25_dummy;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} ldv_main_exported_6();
    goto corral_source_split_4313;

  $bb22:
    assume out_$i13 == 1;
    goto corral_source_split_4312;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i12, 0);
    goto corral_source_split_4310;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    out_$i12 := $M.23;
    goto corral_source_split_4309;

  $bb20:
    assume out_$i11 == 1;
    goto corral_source_split_4308;

  $bb18:
    assume out_$i10 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb14:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := $slt.i32(out_$i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i3 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i3 := $slt.i32(out_$i2, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb27:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} ldv_main_exported_3();
    goto corral_source_split_4316;

  $bb26:
    assume out_$i15 == 1;
    goto corral_source_split_4315;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_4306;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    out_$i14 := $M.24;
    goto corral_source_split_4305;

  $bb19:
    assume !(out_$i10 == 1);
    goto corral_source_split_4304;

  $bb30:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb42:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $M.29 := out_$i29;
    call {:si_unique_call 674} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_4339;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i28, 1);
    goto corral_source_split_4338;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    out_$i28 := $M.29;
    goto corral_source_split_4337;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 673} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_4336;

  $bb41:
    assume out_$i27 == 1;
    goto corral_source_split_4335;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, 0);
    goto corral_source_split_4333;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    out_$i26 := $M.32;
    goto corral_source_split_4332;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $M.32 := out_$i25;
    call {:si_unique_call 672} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_4331;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} out_$i25 := stk1160_probe(out_$p24, in_$p1);
    goto corral_source_split_4330;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    out_$p24 := $M.22;
    goto corral_source_split_4329;

  $bb39:
    assume out_$i23 == 1;
    goto corral_source_split_4328;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i22, 1);
    goto corral_source_split_4326;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    out_$i22 := $M.25;
    goto corral_source_split_4325;

  $bb37:
    assume out_$i21 == 1;
    goto corral_source_split_4324;

  $bb32:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i18, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i18, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_4318:
    assume {:verifier.code 1} true;
    call {:si_unique_call 668} out_$i18 := __VERIFIER_nondet_int();
    call {:si_unique_call 669} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i18);
    call {:si_unique_call 670} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i18);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb29:
    assume out_$i17 == 1;
    goto corral_source_split_4318;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_4298;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    out_$i16 := $M.25;
    goto corral_source_split_4297;

  $bb16:
    assume out_$i9 == 1;
    goto corral_source_split_4296;

  $bb15:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i2, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $M.29 := out_$i36;
    call {:si_unique_call 677} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_4351;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    out_$i36 := $sub.i32(out_$i35, 1);
    goto corral_source_split_4350;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    out_$i35 := $M.29;
    goto corral_source_split_4349;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 676} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4348;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} stk1160_disconnect(out_$p34);
    goto corral_source_split_4347;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    out_$p34 := $M.22;
    goto corral_source_split_4346;

  $bb49:
    assume out_$i33 == 1;
    goto corral_source_split_4345;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i32, 0);
    goto corral_source_split_4343;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    out_$i32 := $M.33;
    goto corral_source_split_4342;

  $bb46:
    assume out_$i31 == 1;
    goto corral_source_split_4341;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 2);
    goto corral_source_split_4322;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    out_$i30 := $M.25;
    goto corral_source_split_4321;

  $bb34:
    assume out_$i20 == 1;
    goto corral_source_split_4320;

  $bb33:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i18, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i31 == 1);
    goto $bb48;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i33 == 1);
    goto $bb48;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} ldv_stop();
    goto corral_source_split_4353;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i20 == 1);
    goto $bb36;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(out_$i21 == 1);
    goto $bb36;

  $bb56:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} ldv_main_exported_2();
    goto corral_source_split_4356;

  $bb55:
    assume out_$i38 == 1;
    goto corral_source_split_4355;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_4302;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    out_$i37 := $M.26;
    goto corral_source_split_4301;

  $bb17:
    assume !(out_$i9 == 1);
    goto corral_source_split_4300;

  $bb59:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} ldv_main_exported_1();
    goto corral_source_split_4359;

  $bb58:
    assume out_$i40 == 1;
    goto corral_source_split_4358;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 0);
    goto corral_source_split_4290;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    out_$i39 := $M.27;
    goto corral_source_split_4289;

  $bb12:
    assume out_$i7 == 1;
    goto corral_source_split_4288;

  $bb5:
    assume out_$i4 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := $slt.i32(out_$i2, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    out_$i4 := $slt.i32(out_$i2, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb62:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} ldv_main_exported_4();
    goto corral_source_split_4362;

  $bb61:
    assume out_$i42 == 1;
    goto corral_source_split_4361;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_4294;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    out_$i41 := $M.28;
    goto corral_source_split_4293;

  $bb13:
    assume !(out_$i7 == 1);
    goto corral_source_split_4292;

  $bb65:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb75:
    assume {:verifier.code 0} true;
    assume !(out_$i50 == 1);
    goto $bb76;

  $bb78:
    assume {:verifier.code 0} true;
    assume !(out_$i52 == 1);
    goto $bb76;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 0);
    goto corral_source_split_4376;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    out_$i51 := $M.29;
    goto corral_source_split_4375;

  $bb74:
    assume out_$i50 == 1;
    goto corral_source_split_4374;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i49, 2);
    goto corral_source_split_4372;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    out_$i49 := $M.30;
    goto corral_source_split_4371;

  $bb72:
    assume out_$i48 == 1;
    goto corral_source_split_4370;

  $bb67:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i45, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i45, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_4364:
    assume {:verifier.code 1} true;
    call {:si_unique_call 682} out_$i45 := __VERIFIER_nondet_int();
    call {:si_unique_call 683} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i45);
    call {:si_unique_call 684} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i45);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb64:
    assume out_$i44 == 1;
    goto corral_source_split_4364;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, 0);
    goto corral_source_split_4282;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    out_$i43 := $M.30;
    goto corral_source_split_4281;

  $bb7:
    assume out_$i5 == 1;
    goto corral_source_split_4280;

  $bb6:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    out_$i5 := $slt.i32(out_$i2, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb83:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb88:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} ldv_initialize_v4l2_file_operations_6();
    goto corral_source_split_4408;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 701} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4407;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} ldv_initialize_vb2_ops_4();
    goto corral_source_split_4406;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 699} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4405;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} ldv_initialize_snd_ac97_bus_ops_1();
    goto corral_source_split_4404;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 697} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4403;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 696} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4402;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} ldv_initialize_i2c_algorithm_2();
    goto corral_source_split_4401;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 694} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4400;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} ldv_initialize_v4l2_ioctl_ops_5();
    goto corral_source_split_4399;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 692} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4398;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 691} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4397;

  $bb87:
    assume out_$i59 == 1;
    goto corral_source_split_4396;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i58, 0);
    goto corral_source_split_4394;

  $bb86:
    assume {:verifier.code 0} true;
    out_$i58 := $M.34;
    goto corral_source_split_4393;

  $bb85:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 0);
    goto corral_source_split_4388;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    out_$i56 := $M.34;
    goto corral_source_split_4387;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $M.34 := out_$i55;
    call {:si_unique_call 689} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_4386;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} out_$i55 := stk1160_usb_driver_init();
    goto corral_source_split_4385;

  $bb82:
    assume out_$i54 == 1;
    goto corral_source_split_4384;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i53, 1);
    goto corral_source_split_4368;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    out_$i53 := $M.30;
    goto corral_source_split_4367;

  $bb69:
    assume out_$i47 == 1;
    goto corral_source_split_4366;

  $bb68:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i45, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} ldv_stop();
    goto corral_source_split_4410;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb70:
    assume {:verifier.code 0} true;
    assume !(out_$i47 == 1);
    goto $bb71;

  $bb73:
    assume {:verifier.code 0} true;
    assume !(out_$i48 == 1);
    goto $bb71;

  $bb95:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} ldv_main_exported_5();
    goto corral_source_split_4413;

  $bb94:
    assume out_$i61 == 1;
    goto corral_source_split_4412;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(out_$i60, 0);
    goto corral_source_split_4286;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    out_$i60 := $M.31;
    goto corral_source_split_4285;

  $bb9:
    assume out_$i6 == 1;
    goto corral_source_split_4284;

  $bb8:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i2, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} ldv_stop();
    goto corral_source_split_4415;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i6 == 1);
    goto $bb11;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i11 == 1);
    goto $bb11;

  $bb25_dummy:
    call {:si_unique_call 1} out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61 := main_loop_$bb1(in_$p1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p1: ref, in_$i2: i32, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1) returns (out_$i2: i32, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1);
  modifies $M.23, $M.29, $M.36, $M.0, $CurrAddr, $M.24, $M.25, $M.32, $M.4, $M.5, $M.6, $M.7, $M.8, $M.3, $M.11, $M.12, $M.13, $M.14, $M.2, $M.16, $M.18, $M.20, $M.26, $M.27, $M.28, $M.35, $M.39, $M.38, $M.37, $M.40, $M.41, $M.42, $M.43, $M.44, $M.31, $M.30, $M.34, $M.33, $M.22, $M.45, $M.46, $M.47;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


