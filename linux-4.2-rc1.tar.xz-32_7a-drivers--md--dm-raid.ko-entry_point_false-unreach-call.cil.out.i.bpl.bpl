var $M.0: [ref]i8;

var $M.1: [ref]i64;

var $M.2: [ref]i8;

var $M.3: i8;

var $M.4: i32;

var $M.5: i32;

var $M.6: ref;

var $M.7: i32;

var $M.8: i32;

var $M.9: i32;

var $M.10: ref;

var $M.11: i32;

var $M.12: i32;

var $M.13: i32;

var $M.14: i32;

var $M.15: i32;

var $M.16: i32;

var $M.17: i32;

var $M.18: [ref]i8;

var $M.19: i32;

var $M.20: i32;

var $M.21: i32;

var $M.26: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 351615);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 2056);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 3088);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 4116);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 5148);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 6176);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 7208);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 8236);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 9268);

const raid_target_group1: ref;

axiom raid_target_group1 == $sub.ref(0, 10300);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 11328);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 12356);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 13384);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 14412);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 15440);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 16468);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 17496);

const ldv_mutex_reconfig_mutex_of_mddev: ref;

axiom ldv_mutex_reconfig_mutex_of_mddev == $sub.ref(0, 18524);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 19552);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 20580);

const ldv_mutex_i_mutex_of_inode: ref;

axiom ldv_mutex_i_mutex_of_inode == $sub.ref(0, 21608);

const devices_handle_discard_safely: ref;

axiom devices_handle_discard_safely == $sub.ref(0, 22633);

const {:count 11} raid_types: ref;

axiom raid_types == $sub.ref(0, 24009);

const raid_target: ref;

axiom raid_target == $sub.ref(0, 25249);

const .str: ref;

axiom .str == $sub.ref(0, 26278);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 8} .str.108: ref;

axiom .str.108 == $sub.ref(0, 27310);

const {:count 46} .str.109: ref;

axiom .str.109 == $sub.ref(0, 28380);

const {:count 7} .str.110: ref;

axiom .str.110 == $sub.ref(0, 29411);

const {:count 5} .str.111: ref;

axiom .str.111 == $sub.ref(0, 30440);

const {:count 7} .str.112: ref;

axiom .str.112 == $sub.ref(0, 31471);

const {:count 8} .str.113: ref;

axiom .str.113 == $sub.ref(0, 32503);

const {:count 6} .str.114: ref;

axiom .str.114 == $sub.ref(0, 33533);

const {:count 7} .str.115: ref;

axiom .str.115 == $sub.ref(0, 34564);

const {:count 7} .str.116: ref;

axiom .str.116 == $sub.ref(0, 35595);

const {:count 2} .str.117: ref;

axiom .str.117 == $sub.ref(0, 36621);

const {:count 2} .str.118: ref;

axiom .str.118 == $sub.ref(0, 37647);

const {:count 2} .str.119: ref;

axiom .str.119 == $sub.ref(0, 38673);

const {:count 11} .str.120: ref;

axiom .str.120 == $sub.ref(0, 39708);

const {:count 4} .str.121: ref;

axiom .str.121 == $sub.ref(0, 40736);

const {:count 6} .str.122: ref;

axiom .str.122 == $sub.ref(0, 41766);

const {:count 9} .str.123: ref;

axiom .str.123 == $sub.ref(0, 42799);

const {:count 6} .str.124: ref;

axiom .str.124 == $sub.ref(0, 43829);

const {:count 8} .str.125: ref;

axiom .str.125 == $sub.ref(0, 44861);

const {:count 12} .str.126: ref;

axiom .str.126 == $sub.ref(0, 45897);

const {:count 18} .str.127: ref;

axiom .str.127 == $sub.ref(0, 46939);

const {:count 22} .str.128: ref;

axiom .str.128 == $sub.ref(0, 47985);

const {:count 22} .str.129: ref;

axiom .str.129 == $sub.ref(0, 49031);

const {:count 17} .str.130: ref;

axiom .str.130 == $sub.ref(0, 50072);

const {:count 22} .str.131: ref;

axiom .str.131 == $sub.ref(0, 51118);

const {:count 17} .str.132: ref;

axiom .str.132 == $sub.ref(0, 52159);

const {:count 17} .str.133: ref;

axiom .str.133 == $sub.ref(0, 53200);

const {:count 18} .str.134: ref;

axiom .str.134 == $sub.ref(0, 54242);

const {:count 18} .str.135: ref;

axiom .str.135 == $sub.ref(0, 55284);

const {:count 4} .str.136: ref;

axiom .str.136 == $sub.ref(0, 56312);

const {:count 3} .str.137: ref;

axiom .str.137 == $sub.ref(0, 57339);

const {:count 7} .str.46: ref;

axiom .str.46 == $sub.ref(0, 58370);

const {:count 5} .str.35: ref;

axiom .str.35 == $sub.ref(0, 59399);

const {:count 4} .str.45: ref;

axiom .str.45 == $sub.ref(0, 60427);

const {:count 96} .str.138: ref;

axiom .str.138 == $sub.ref(0, 61547);

const {:count 18} .str.2: ref;

axiom .str.2 == $sub.ref(0, 62589);

const {:count 23} .str.3: ref;

axiom .str.3 == $sub.ref(0, 63636);

const {:count 44} .str.4: ref;

axiom .str.4 == $sub.ref(0, 64704);

const {:count 41} .str.5: ref;

axiom .str.5 == $sub.ref(0, 65769);

const {:count 41} .str.6: ref;

axiom .str.6 == $sub.ref(0, 66834);

const {:count 53} .str.7: ref;

axiom .str.7 == $sub.ref(0, 67911);

const {:count 21} .str.8: ref;

axiom .str.8 == $sub.ref(0, 68956);

const {:count 23} .str.9: ref;

axiom .str.9 == $sub.ref(0, 70003);

const {:count 50} .str.10: ref;

axiom .str.10 == $sub.ref(0, 71077);

const {:count 96} .str.106: ref;

axiom .str.106 == $sub.ref(0, 72197);

const {:count 80} .str.107: ref;

axiom .str.107 == $sub.ref(0, 73301);

const {:count 42} .str.87: ref;

axiom .str.87 == $sub.ref(0, 74367);

const {:count 46} .str.88: ref;

axiom .str.88 == $sub.ref(0, 75437);

const {:count 79} .str.92: ref;

axiom .str.92 == $sub.ref(0, 76540);

const {:count 80} .str.93: ref;

axiom .str.93 == $sub.ref(0, 77644);

const {:count 38} .str.94: ref;

axiom .str.94 == $sub.ref(0, 78706);

const {:count 53} .str.95: ref;

axiom .str.95 == $sub.ref(0, 79783);

const {:count 53} .str.96: ref;

axiom .str.96 == $sub.ref(0, 80860);

const {:count 83} .str.97: ref;

axiom .str.97 == $sub.ref(0, 81967);

const {:count 81} .str.98: ref;

axiom .str.98 == $sub.ref(0, 83072);

const {:count 76} .str.99: ref;

axiom .str.99 == $sub.ref(0, 84172);

const {:count 57} .str.100: ref;

axiom .str.100 == $sub.ref(0, 85253);

const {:count 101} .str.101: ref;

axiom .str.101 == $sub.ref(0, 86378);

const {:count 104} .str.102: ref;

axiom .str.102 == $sub.ref(0, 87506);

const {:count 70} .str.103: ref;

axiom .str.103 == $sub.ref(0, 88600);

const {:count 45} .str.104: ref;

axiom .str.104 == $sub.ref(0, 89669);

const {:count 60} .str.105: ref;

axiom .str.105 == $sub.ref(0, 90753);

const {:count 77} .str.89: ref;

axiom .str.89 == $sub.ref(0, 91854);

const {:count 198} .str.90: ref;

axiom .str.90 == $sub.ref(0, 93076);

const {:count 74} .str.91: ref;

axiom .str.91 == $sub.ref(0, 94174);

const {:count 2} .str.81: ref;

axiom .str.81 == $sub.ref(0, 95200);

const {:count 36} .str.82: ref;

axiom .str.82 == $sub.ref(0, 96260);

const {:count 43} .str.83: ref;

axiom .str.83 == $sub.ref(0, 97327);

const {:count 45} .str.84: ref;

axiom .str.84 == $sub.ref(0, 98396);

const {:count 27} .str.85: ref;

axiom .str.85 == $sub.ref(0, 99447);

const {:count 74} .str.86: ref;

axiom .str.86 == $sub.ref(0, 100545);

const {:count 15} .str.36: ref;

axiom .str.36 == $sub.ref(0, 101584);

const {:count 64} .str.37: ref;

axiom .str.37 == $sub.ref(0, 102672);

const {:count 32} .str.38: ref;

axiom .str.38 == $sub.ref(0, 103728);

const {:count 30} .str.39: ref;

axiom .str.39 == $sub.ref(0, 104782);

const {:count 7} .str.40: ref;

axiom .str.40 == $sub.ref(0, 105813);

const {:count 5} .str.41: ref;

axiom .str.41 == $sub.ref(0, 106842);

const {:count 38} .str.42: ref;

axiom .str.42 == $sub.ref(0, 107904);

const {:count 14} .str.43: ref;

axiom .str.43 == $sub.ref(0, 108942);

const {:count 59} .str.44: ref;

axiom .str.44 == $sub.ref(0, 110025);

const {:count 36} .str.47: ref;

axiom .str.47 == $sub.ref(0, 111085);

const {:count 44} .str.48: ref;

axiom .str.48 == $sub.ref(0, 112153);

const {:count 8} .str.49: ref;

axiom .str.49 == $sub.ref(0, 113185);

const {:count 28} .str.50: ref;

axiom .str.50 == $sub.ref(0, 114237);

const {:count 13} .str.51: ref;

axiom .str.51 == $sub.ref(0, 115274);

const {:count 44} .str.52: ref;

axiom .str.52 == $sub.ref(0, 116342);

const {:count 39} .str.53: ref;

axiom .str.53 == $sub.ref(0, 117405);

const {:count 17} .str.54: ref;

axiom .str.54 == $sub.ref(0, 118446);

const {:count 48} .str.55: ref;

axiom .str.55 == $sub.ref(0, 119518);

const {:count 36} .str.56: ref;

axiom .str.56 == $sub.ref(0, 120578);

const {:count 13} .str.57: ref;

axiom .str.57 == $sub.ref(0, 121615);

const {:count 33} .str.58: ref;

axiom .str.58 == $sub.ref(0, 122672);

const {:count 13} .str.59: ref;

axiom .str.59 == $sub.ref(0, 123709);

const {:count 37} .str.60: ref;

axiom .str.60 == $sub.ref(0, 124770);

const {:count 22} .str.61: ref;

axiom .str.61 == $sub.ref(0, 125816);

const {:count 18} .str.62: ref;

axiom .str.62 == $sub.ref(0, 126858);

const {:count 31} .str.63: ref;

axiom .str.63 == $sub.ref(0, 127913);

const {:count 18} .str.64: ref;

axiom .str.64 == $sub.ref(0, 128955);

const {:count 31} .str.65: ref;

axiom .str.65 == $sub.ref(0, 130010);

const {:count 12} .str.66: ref;

axiom .str.66 == $sub.ref(0, 131046);

const {:count 14} .str.67: ref;

axiom .str.67 == $sub.ref(0, 132084);

const {:count 30} .str.68: ref;

axiom .str.68 == $sub.ref(0, 133138);

const {:count 58} .str.69: ref;

axiom .str.69 == $sub.ref(0, 134220);

const {:count 32} .str.70: ref;

axiom .str.70 == $sub.ref(0, 135276);

const {:count 44} .str.71: ref;

axiom .str.71 == $sub.ref(0, 136344);

const {:count 41} .str.72: ref;

axiom .str.72 == $sub.ref(0, 137409);

const {:count 54} .str.73: ref;

axiom .str.73 == $sub.ref(0, 138487);

const {:count 67} .str.74: ref;

axiom .str.74 == $sub.ref(0, 139578);

const {:count 60} .str.75: ref;

axiom .str.75 == $sub.ref(0, 140662);

const {:count 34} .str.76: ref;

axiom .str.76 == $sub.ref(0, 141720);

const {:count 78} .str.77: ref;

axiom .str.77 == $sub.ref(0, 142822);

const {:count 34} .str.78: ref;

axiom .str.78 == $sub.ref(0, 143880);

const {:count 32} .str.79: ref;

axiom .str.79 == $sub.ref(0, 144936);

const {:count 43} .str.80: ref;

axiom .str.80 == $sub.ref(0, 146003);

const {:count 31} .str.33: ref;

axiom .str.33 == $sub.ref(0, 147058);

const {:count 29} .str.34: ref;

axiom .str.34 == $sub.ref(0, 148111);

const {:count 6} .str.11: ref;

axiom .str.11 == $sub.ref(0, 149141);

const {:count 17} .str.12: ref;

axiom .str.12 == $sub.ref(0, 150182);

const {:count 6} .str.13: ref;

axiom .str.13 == $sub.ref(0, 151212);

const {:count 18} .str.14: ref;

axiom .str.14 == $sub.ref(0, 152254);

const {:count 7} .str.15: ref;

axiom .str.15 == $sub.ref(0, 153285);

const {:count 25} .str.16: ref;

axiom .str.16 == $sub.ref(0, 154334);

const {:count 6} .str.17: ref;

axiom .str.17 == $sub.ref(0, 155364);

const {:count 30} .str.18: ref;

axiom .str.18 == $sub.ref(0, 156418);

const {:count 9} .str.19: ref;

axiom .str.19 == $sub.ref(0, 157451);

const {:count 24} .str.20: ref;

axiom .str.20 == $sub.ref(0, 158499);

const {:count 9} .str.21: ref;

axiom .str.21 == $sub.ref(0, 159532);

const {:count 25} .str.22: ref;

axiom .str.22 == $sub.ref(0, 160581);

const {:count 9} .str.23: ref;

axiom .str.23 == $sub.ref(0, 161614);

const {:count 23} .str.24: ref;

axiom .str.24 == $sub.ref(0, 162661);

const {:count 9} .str.25: ref;

axiom .str.25 == $sub.ref(0, 163694);

const {:count 24} .str.26: ref;

axiom .str.26 == $sub.ref(0, 164742);

const {:count 9} .str.27: ref;

axiom .str.27 == $sub.ref(0, 165775);

const {:count 21} .str.28: ref;

axiom .str.28 == $sub.ref(0, 166820);

const {:count 9} .str.29: ref;

axiom .str.29 == $sub.ref(0, 167853);

const {:count 18} .str.30: ref;

axiom .str.30 == $sub.ref(0, 168895);

const {:count 9} .str.31: ref;

axiom .str.31 == $sub.ref(0, 169928);

const {:count 19} .str.32: ref;

axiom .str.32 == $sub.ref(0, 170971);

const {:count 55} .str.1: ref;

axiom .str.1 == $sub.ref(0, 172050);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 173082);

const {:count 3} .str.1.290: ref;

axiom .str.1.290 == $sub.ref(0, 174109);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 175147);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 176175);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 177207);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 178239);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const raid_ctr: ref;

axiom raid_ctr == $sub.ref(0, 179271);

procedure raid_ctr($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr, $M.2, $M.4, assertsPassed;



implementation raid_ctr($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $i37: i64;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $i46: i64;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i1;
  var $i51: i8;
  var $i52: i1;
  var $p53: ref;
  var $i54: i64;
  var $i55: i32;
  var $i56: i64;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p72: ref;
  var $p73: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p81: ref;
  var $p84: ref;
  var $p87: ref;
  var $p88: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $p96: ref;
  var $p97: ref;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $p103: ref;
  var $i104: i64;
  var $i105: i1;
  var $p106: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i60: i32;
  var $i9: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 5} {:cexpr "raid_ctr:arg:argc"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i7 := $ule.i32($i1, 1);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p2);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $p11 := get_raid_type($p10);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i1, 1);
    call {:si_unique_call 7} {:cexpr "argc"} boogie_si_record_i32($i15);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p2, $mul.ref(1, 8));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $i18 := kstrtoul($p17, 10, $p3);
    call {:si_unique_call 9} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 0);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i15, 1);
    call {:si_unique_call 10} {:cexpr "argc"} boogie_si_record_i32($i21);
    $i22 := $add.i64(1, 1);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p2, $mul.ref($i22, 8));
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i21);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.1, $p3);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i26 := $ule.i64($i24, $i25);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.1, $p3);
    $i29 := $add.i64($i22, $i28);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p2, $mul.ref($i29, 8));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i32 := kstrtoul($p31, 10, $p4);
    call {:si_unique_call 12} {:cexpr "tmp___0"} boogie_si_record_i32($i32);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 0);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i33 == 1);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.1, $p4);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i35 := $ugt.i64($i34, 253);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.1, $p3);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i37);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i21, $i38);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i39, 1);
    call {:si_unique_call 13} {:cexpr "argc"} boogie_si_record_i32($i40);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i40);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.1, $p4);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i43 := $mul.i64($i42, 2);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i41, $i43);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.1, $p4);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i64.i32($i46);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $p48 := context_alloc($p0, $p11, $i47);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $i50 := IS_ERR($p49);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i8($i50);
    call {:si_unique_call 16} {:cexpr "tmp___2"} boogie_si_record_i8($i51);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i8.i1($i51);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.1, $p3);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i64.i32($i56);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i58 := parse_raid_params($p48, $p23, $i57);
    call {:si_unique_call 20} {:cexpr "ret"} boogie_si_record_i32($i58);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.1, $p3);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, 1);
    $i63 := $add.i64($i22, $i62);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p2, $mul.ref($i63, 8));
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $i65 := dev_parms($p48, $p64);
    call {:si_unique_call 23} {:cexpr "ret"} boogie_si_record_i32($i65);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p48, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(2080, 1));
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, super_sync);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i69 := analyse_superblocks($p0, $p48);
    call {:si_unique_call 25} {:cexpr "ret"} boogie_si_record_i32($i69);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p48, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(2000, 1));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} __init_work($p72, 0);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p73, 137438953408);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(2000, 1)), $mul.ref(0, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p6);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 27} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p77, $p78, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(2000, 1)), $mul.ref(32, 1));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} lockdep_init_map($p81, .str.8, $p5, 0);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(2000, 1)), $mul.ref(8, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} INIT_LIST_HEAD($p84);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(2000, 1)), $mul.ref(24, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p88, do_table_event);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p90, $p48);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(36, 1));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, 1);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} configure_discard_support($p0, $p48);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p48, $mul.ref(0, 2144)), $mul.ref(16, 1));
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} mddev_lock_nointr($p92);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p48, $mul.ref(0, 2144)), $mul.ref(16, 1));
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $i94 := md_run($p93);
    call {:si_unique_call 33} {:cexpr "ret"} boogie_si_record_i32($i94);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p48, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(684, 1));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, 0);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p48, $mul.ref(0, 2144)), $mul.ref(16, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} mddev_unlock($p97);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i94, 0);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.0, $p100);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p48, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(480, 1));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i104 := $load.i64($M.0, $p103);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i101, $i104);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p48, $mul.ref(0, 2144)), $mul.ref(2120, 1)), $mul.ref(16, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p108, raid_is_congested);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p48, $mul.ref(0, 2144)), $mul.ref(2120, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} dm_table_add_target_callbacks($p110, $p111);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p48, $mul.ref(0, 2144)), $mul.ref(16, 1));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} mddev_suspend($p112);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb39:
    assume $i105 == 1;
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p106, .str.10);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p48, $mul.ref(0, 2144)), $mul.ref(16, 1));
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} md_stop($p113);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 22);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} context_free($p48);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i9 := $i60;
    goto $bb3;

  $bb36:
    assume $i98 == 1;
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p99, .str.9);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i60 := $i94;
    goto $bb28;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i70 == 1;
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i60 := $i69;
    goto $bb28;

  $bb30:
    assume $i66 == 1;
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i60 := $i65;
    goto $bb28;

  $bb26:
    assume $i59 == 1;
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i60 := $i58;
    goto $bb28;

  $bb23:
    assume $i52 == 1;
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p48);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i54 := PTR_ERR($p53);
    call {:si_unique_call 18} {:cexpr "tmp___1"} boogie_si_record_i64($i54);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i64.i32($i54);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i9 := $i55;
    goto $bb3;

  $bb20:
    assume $i44 == 1;
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, .str.7);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, .str.6);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb15;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, .str.5);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, .str.4);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, .str.3);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, .str.2);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const raid_dtr: ref;

axiom raid_dtr == $sub.ref(0, 180303);

procedure raid_dtr($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation raid_dtr($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2144)), $mul.ref(2120, 1)), $mul.ref(0, 1));
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} list_del_init($p5);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 2144)), $mul.ref(16, 1));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} md_stop($p6);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} context_free($p3);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    return;
}



const raid_map: ref;

axiom raid_map == $sub.ref(0, 181335);

procedure raid_map($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation raid_map($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2144)), $mul.ref(16, 1));
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    call {:si_unique_call 41} devirtbounce($p9, $p5, $p1);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const raid_presuspend: ref;

axiom raid_presuspend == $sub.ref(0, 182367);

procedure raid_presuspend($p0: ref);
  free requires assertsPassed;



implementation raid_presuspend($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2144)), $mul.ref(16, 1));
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} md_stop_writes($p4);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    return;
}



const raid_postsuspend: ref;

axiom raid_postsuspend == $sub.ref(0, 183399);

procedure raid_postsuspend($p0: ref);
  free requires assertsPassed;



implementation raid_postsuspend($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2144)), $mul.ref(16, 1));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} mddev_suspend($p4);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    return;
}



const raid_resume: ref;

axiom raid_resume == $sub.ref(0, 184431);

procedure raid_resume($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2;



implementation raid_resume($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var vslice_dummy_var_9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 2144)), $mul.ref(16, 1));
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} mddev_resume($p19);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(40, 1));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} set_bit(0, $p10);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} attempt_restore_of_faulty_devices($p3);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(672, 1));
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} clear_bit(9, $p18);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 2144)), $mul.ref(16, 1));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} vslice_dummy_var_9 := bitmap_load($p14);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 2144)), $mul.ref(8, 1));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 1);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const raid_status: ref;

axiom raid_status == $sub.ref(0, 185463);

procedure raid_status($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32);
  free requires assertsPassed;



implementation raid_status($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $i37: i64;
  var $p40: ref;
  var $i41: i64;
  var $i38: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p47: ref;
  var $i48: i64;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $i63: i64;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i61: i32;
  var $i62: i32;
  var $i74: i32;
  var $i60: i32;
  var $i55: i32;
  var $i49: i64;
  var $i50: i32;
  var $p78: ref;
  var $i79: i64;
  var $i75: i64;
  var $i76: i32;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $i87: i64;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $i94: i1;
  var $i95: i64;
  var $p96: ref;
  var $i97: i32;
  var $i98: i64;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i103: i1;
  var $i104: i64;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
  var $i111: i1;
  var $i112: i64;
  var $p113: ref;
  var $i114: i32;
  var $i115: i64;
  var $i116: i32;
  var $i117: i32;
  var $i118: i32;
  var $i120: i1;
  var $i121: i64;
  var $p122: ref;
  var $i123: i32;
  var $i124: i64;
  var $i125: i32;
  var $i126: i32;
  var $i127: i32;
  var $i119: i32;
  var $i102: i32;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $i85: i32;
  var $i86: i32;
  var $i131: i32;
  var $i84: i32;
  var $i132: i1;
  var $i133: i64;
  var $p134: ref;
  var $i135: i32;
  var $i136: i64;
  var $p138: ref;
  var $i139: i64;
  var $i140: i32;
  var $i141: i32;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $p145: ref;
  var $i146: i64;
  var $p147: ref;
  var $i148: i32;
  var $i149: i64;
  var $i150: i32;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $p155: ref;
  var $p156: ref;
  var $i157: i32;
  var $i158: i1;
  var $p160: ref;
  var $i161: i64;
  var $i162: i64;
  var $i163: i64;
  var $p164: ref;
  var $i165: i32;
  var $i166: i64;
  var $i167: i32;
  var $p169: ref;
  var $i170: i32;
  var $i171: i1;
  var $p175: ref;
  var $i176: i32;
  var $i177: i32;
  var $i178: i1;
  var $i179: i64;
  var $p182: ref;
  var $p183: ref;
  var $i184: i64;
  var $i185: i1;
  var $i186: i64;
  var $p190: ref;
  var $i191: i32;
  var $i192: i1;
  var $i193: i32;
  var $i194: i32;
  var $i195: i32;
  var $i196: i64;
  var $p199: ref;
  var $p200: ref;
  var $i201: i64;
  var $i202: i1;
  var $i203: i64;
  var $p207: ref;
  var $i208: i32;
  var $i209: i1;
  var $i210: i32;
  var $i211: i32;
  var $i212: i32;
  var $i213: i32;
  var $i214: i32;
  var $i215: i1;
  var $i173: i32;
  var $i174: i32;
  var $i216: i32;
  var $i172: i32;
  var $p217: ref;
  var $i218: i32;
  var $i219: i32;
  var $i220: i32;
  var $i221: i32;
  var $i222: i32;
  var $p223: ref;
  var $i224: i32;
  var $i225: i32;
  var $i226: i1;
  var $i227: i32;
  var $i228: i32;
  var $i229: i1;
  var $i230: i64;
  var $p231: ref;
  var $i232: i32;
  var $i233: i64;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p239: ref;
  var $i240: i32;
  var $i241: i32;
  var $i242: i32;
  var $i243: i32;
  var $p244: ref;
  var $i245: i32;
  var $i246: i32;
  var $i247: i1;
  var $p249: ref;
  var $i250: i64;
  var $i251: i1;
  var $i252: i1;
  var $i253: i64;
  var $p254: ref;
  var $i255: i32;
  var $i256: i64;
  var $i257: i32;
  var $i258: i32;
  var $i259: i32;
  var $i260: i32;
  var $p261: ref;
  var $i262: i32;
  var $i263: i32;
  var $i264: i1;
  var $i265: i1;
  var $i266: i64;
  var $p267: ref;
  var $i268: i32;
  var $i269: i64;
  var $i270: i32;
  var $i271: i32;
  var $i272: i32;
  var $i273: i32;
  var $p275: ref;
  var $i276: i32;
  var $i277: i1;
  var $p281: ref;
  var $i282: i32;
  var $i283: i32;
  var $i284: i1;
  var $i285: i64;
  var $p288: ref;
  var $p289: ref;
  var $i290: i64;
  var $i291: i1;
  var $i292: i64;
  var $p296: ref;
  var $i297: i32;
  var $i298: i1;
  var $i299: i1;
  var $i300: i64;
  var $p301: ref;
  var $i302: i32;
  var $i303: i64;
  var $i304: i32;
  var $i305: i32;
  var $i306: i32;
  var $i307: i32;
  var $i308: i32;
  var $i309: i32;
  var $i310: i32;
  var $i311: i1;
  var $i279: i32;
  var $i280: i32;
  var $i312: i32;
  var $i278: i32;
  var $p313: ref;
  var $i314: i32;
  var $i315: i32;
  var $i316: i1;
  var $i317: i1;
  var $i318: i64;
  var $p319: ref;
  var $i320: i32;
  var $i321: i64;
  var $p324: ref;
  var $i325: i64;
  var $i326: i32;
  var $i327: i32;
  var $i328: i32;
  var $i329: i32;
  var $p330: ref;
  var $i331: i32;
  var $i332: i32;
  var $i333: i1;
  var $i334: i1;
  var $i335: i64;
  var $p336: ref;
  var $i337: i32;
  var $i338: i64;
  var $p340: ref;
  var $i341: i32;
  var $i342: i32;
  var $i343: i32;
  var $i344: i32;
  var $i345: i32;
  var $p346: ref;
  var $i347: i32;
  var $i348: i32;
  var $i349: i1;
  var $i350: i1;
  var $i351: i64;
  var $p352: ref;
  var $i353: i32;
  var $i354: i64;
  var $p356: ref;
  var $i357: i32;
  var $i358: i32;
  var $i359: i32;
  var $i360: i32;
  var $i361: i32;
  var $p363: ref;
  var $i364: i32;
  var $i365: i1;
  var $i369: i64;
  var $p372: ref;
  var $p373: ref;
  var $i374: i64;
  var $i375: i1;
  var $i376: i64;
  var $p380: ref;
  var $i381: i32;
  var $i382: i1;
  var $i383: i1;
  var $i384: i64;
  var $p385: ref;
  var $i386: i32;
  var $i387: i64;
  var $i388: i32;
  var $i389: i32;
  var $i390: i32;
  var $i391: i32;
  var $i392: i32;
  var $i393: i32;
  var $i394: i32;
  var $i395: i1;
  var $i367: i32;
  var $i368: i32;
  var $i396: i32;
  var $i366: i32;
  var $p397: ref;
  var $i398: i32;
  var $i399: i32;
  var $i400: i1;
  var $i401: i1;
  var $i402: i64;
  var $p403: ref;
  var $i404: i32;
  var $i405: i64;
  var $p408: ref;
  var $i409: i64;
  var $i410: i32;
  var $i411: i32;
  var $i412: i32;
  var $i413: i32;
  var $p414: ref;
  var $i415: i32;
  var $i416: i32;
  var $i417: i1;
  var $p419: ref;
  var $p420: ref;
  var $p421: ref;
  var $i422: i1;
  var $i423: i64;
  var $p424: ref;
  var $i425: i32;
  var $i426: i64;
  var $i427: i64;
  var $i428: i1;
  var $p429: ref;
  var $i430: i32;
  var $i431: i32;
  var $i432: i32;
  var $i433: i32;
  var $i434: i32;
  var $i435: i32;
  var $i436: i32;
  var $p437: ref;
  var $i438: i32;
  var $i439: i32;
  var $i440: i1;
  var $i441: i1;
  var $i442: i64;
  var $p443: ref;
  var $i444: i32;
  var $i445: i64;
  var $p448: ref;
  var $i449: i64;
  var $i450: i64;
  var $i451: i32;
  var $i452: i32;
  var $i453: i32;
  var $i454: i32;
  var $p455: ref;
  var $i456: i32;
  var $i457: i32;
  var $i458: i1;
  var $i459: i1;
  var $p461: ref;
  var $i462: i32;
  var $i463: i32;
  var $i464: i64;
  var $p465: ref;
  var $i466: i32;
  var $i467: i64;
  var $i468: i32;
  var $i469: i32;
  var $i470: i32;
  var $i471: i32;
  var $p472: ref;
  var $i473: i32;
  var $i474: i32;
  var $i475: i1;
  var $i476: i1;
  var $p478: ref;
  var $i479: i32;
  var $p480: ref;
  var $i481: i64;
  var $p482: ref;
  var $i483: i32;
  var $i484: i64;
  var $i485: i32;
  var $i486: i32;
  var $i487: i32;
  var $i488: i32;
  var $i489: i1;
  var $i490: i64;
  var $p491: ref;
  var $i492: i32;
  var $i493: i64;
  var $p495: ref;
  var $i496: i32;
  var $i497: i32;
  var $i498: i32;
  var $i499: i32;
  var $p501: ref;
  var $i502: i32;
  var $i503: i1;
  var $i506: i64;
  var $p509: ref;
  var $p510: ref;
  var $i511: i64;
  var $i512: i1;
  var $i513: i1;
  var $i514: i64;
  var $p515: ref;
  var $i516: i32;
  var $i517: i64;
  var $i518: i64;
  var $p521: ref;
  var $p522: ref;
  var $p523: ref;
  var $p524: ref;
  var $i525: i32;
  var $i526: i32;
  var $i527: i32;
  var $i529: i1;
  var $i530: i64;
  var $p531: ref;
  var $i532: i32;
  var $i533: i64;
  var $i534: i32;
  var $i535: i32;
  var $i536: i32;
  var $i528: i32;
  var $i537: i64;
  var $p540: ref;
  var $p541: ref;
  var $i542: i64;
  var $i543: i1;
  var $i544: i1;
  var $i545: i64;
  var $p546: ref;
  var $i547: i32;
  var $i548: i64;
  var $i549: i64;
  var $p552: ref;
  var $p553: ref;
  var $p554: ref;
  var $p555: ref;
  var $i556: i32;
  var $i557: i32;
  var $i558: i32;
  var $i560: i1;
  var $i561: i64;
  var $p562: ref;
  var $i563: i32;
  var $i564: i64;
  var $i565: i32;
  var $i566: i32;
  var $i567: i32;
  var $i559: i32;
  var $i568: i32;
  var $i569: i32;
  var $i570: i1;
  var $i504: i32;
  var $i505: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} {:cexpr "raid_status:arg:type"} boogie_si_record_i32($i1);
    call {:si_unique_call 50} {:cexpr "raid_status:arg:status_flags"} boogie_si_record_i32($i2);
    call {:si_unique_call 51} {:cexpr "raid_status:arg:maxlen"} boogie_si_record_i32($i4);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i170 := $load.i32($M.0, $p169);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i171 := $sgt.i32($i170, 0);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i172 := 1;
    assume {:branchcond $i171} true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i171 == 1);
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i218 := $load.i32($M.0, $p217);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i219 := $and.i32($i218, $sub.i32(0, 5));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $i220 := __arch_hweight32($i219);
    call {:si_unique_call 101} {:cexpr "tmp___25"} boogie_si_record_i32($i220);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i221 := $mul.i32($i220, 2);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i222 := $add.i32($i221, $i172);
    call {:si_unique_call 102} {:cexpr "raid_param_cnt"} boogie_si_record_i32($i222);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i224 := $load.i32($M.0, $p223);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i225 := $and.i32($i224, 3);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i226 := $ne.i32($i225, 0);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    $i228 := $i222;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i229 := $ult.i32(0, $i4);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i229} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    $i242 := 0;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i243 := $add.i32($i242, 0);
    call {:si_unique_call 106} {:cexpr "sz"} boogie_si_record_i32($i243);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i245 := $load.i32($M.0, $p244);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i246 := $and.i32($i245, 1);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i247 := $ne.i32($i246, 0);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    assume !($i247 == 1);
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i260 := $i243;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i262 := $load.i32($M.0, $p261);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i263 := $and.i32($i262, 2);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i264 := $ne.i32($i263, 0);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    assume {:branchcond $i264} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    $i273 := $i260;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i276 := $load.i32($M.0, $p275);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i277 := $sgt.i32($i276, 0);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i278 := $i273;
    assume {:branchcond $i277} true;
    goto $bb119, $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    assume !($i277 == 1);
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i314 := $load.i32($M.0, $p313);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i315 := $and.i32($i314, 8);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i316 := $ne.i32($i315, 0);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i316} true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    $i329 := $i278;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i331 := $load.i32($M.0, $p330);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i332 := $and.i32($i331, 16);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i333 := $ne.i32($i332, 0);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i333} true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    $i345 := $i329;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i347 := $load.i32($M.0, $p346);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i348 := $and.i32($i347, 32);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i349 := $ne.i32($i348, 0);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i349} true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i349 == 1);
    assume {:verifier.code 0} true;
    $i361 := $i345;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i364 := $load.i32($M.0, $p363);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i365 := $sgt.i32($i364, 0);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i366 := $i361;
    assume {:branchcond $i365} true;
    goto $bb157, $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    assume !($i365 == 1);
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i398 := $load.i32($M.0, $p397);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i399 := $and.i32($i398, 64);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i400 := $ne.i32($i399, 0);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i400} true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i400 == 1);
    assume {:verifier.code 0} true;
    $i413 := $i366;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i415 := $load.i32($M.0, $p414);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i416 := $and.i32($i415, 128);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i417 := $ne.i32($i416, 0);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    assume {:branchcond $i417} true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i417 == 1);
    assume {:verifier.code 0} true;
    $i436 := $i413;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i438 := $load.i32($M.0, $p437);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i439 := $and.i32($i438, 256);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i440 := $ne.i32($i439, 0);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i440} true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i440 == 1);
    assume {:verifier.code 0} true;
    $i454 := $i436;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i456 := $load.i32($M.0, $p455);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i457 := $and.i32($i456, 512);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i458 := $ne.i32($i457, 0);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i458} true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i458 == 1);
    assume {:verifier.code 0} true;
    $i471 := $i454;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i473 := $load.i32($M.0, $p472);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i474 := $and.i32($i473, 1024);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i475 := $ne.i32($i474, 0);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    assume {:branchcond $i475} true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i475 == 1);
    assume {:verifier.code 0} true;
    $i488 := $i471;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i489 := $ult.i32($i488, $i4);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i489} true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i489 == 1);
    assume {:verifier.code 0} true;
    $i498 := 0;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i499 := $add.i32($i498, $i488);
    call {:si_unique_call 154} {:cexpr "sz"} boogie_si_record_i32($i499);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i502 := $load.i32($M.0, $p501);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i503 := $sgt.i32($i502, 0);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i503} true;
    goto $bb210, $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    assume !($i503 == 1);
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb210:
    assume $i503 == 1;
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i504, $i505 := $i499, 0;
    goto $bb213;

  $bb213:
    call $i506, $p509, $p510, $i511, $i512, $i513, $i514, $p515, $i516, $i517, $i518, $p521, $p522, $p523, $p524, $i525, $i526, $i527, $i529, $i530, $p531, $i532, $i533, $i534, $i535, $i536, $i528, $i537, $p540, $p541, $i542, $i543, $i544, $i545, $p546, $i547, $i548, $i549, $p552, $p553, $p554, $p555, $i556, $i557, $i558, $i560, $i561, $p562, $i563, $i564, $i565, $i566, $i567, $i559, $i568, $i569, $i570, $i504, $i505 := raid_status_loop_$bb213($p3, $i4, $p7, $p501, $i506, $p509, $p510, $i511, $i512, $i513, $i514, $p515, $i516, $i517, $i518, $p521, $p522, $p523, $p524, $i525, $i526, $i527, $i529, $i530, $p531, $i532, $i533, $i534, $i535, $i536, $i528, $i537, $p540, $p541, $i542, $i543, $i544, $i545, $p546, $i547, $i548, $i549, $p552, $p553, $p554, $p555, $i556, $i557, $i558, $i560, $i561, $p562, $i563, $i564, $i565, $i566, $i567, $i559, $i568, $i569, $i570, $i504, $i505);
    goto $bb213_last;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $i506 := $sext.i32.i64($i505);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i506, 848)), $mul.ref(0, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p510 := $load.ref($M.0, $p509);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i511 := $p2i.ref.i64($p510);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i512 := $ne.i64($i511, 0);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i512 == 1);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i529 := $ult.i32($i504, $i4);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i529 == 1);
    assume {:verifier.code 0} true;
    $i535 := 0;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i536 := $add.i32($i535, $i504);
    call {:si_unique_call 160} {:cexpr "sz"} boogie_si_record_i32($i536);
    assume {:verifier.code 0} true;
    $i528 := $i536;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i537 := $sext.i32.i64($i505);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p540 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i537, 848)), $mul.ref(8, 1));
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p541 := $load.ref($M.0, $p540);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i542 := $p2i.ref.i64($p541);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i543 := $ne.i64($i542, 0);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i543 == 1);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i560 := $ult.i32($i528, $i4);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i560 == 1);
    assume {:verifier.code 0} true;
    $i566 := 0;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i567 := $add.i32($i566, $i528);
    call {:si_unique_call 167} {:cexpr "sz"} boogie_si_record_i32($i567);
    assume {:verifier.code 0} true;
    $i559 := $i567;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i568 := $add.i32($i505, 1);
    call {:si_unique_call 164} {:cexpr "i"} boogie_si_record_i32($i568);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i569 := $load.i32($M.0, $p501);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i570 := $sgt.i32($i569, $i568);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i570 == 1);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb233:
    assume $i570 == 1;
    assume {:verifier.code 0} true;
    $i504, $i505 := $i559, $i568;
    goto $bb233_dummy;

  $bb230:
    assume $i560 == 1;
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i561 := $zext.i32.i64($i528);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($p3, $mul.ref($i561, 1));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i563 := $sub.i32($i4, $i528);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i564 := $zext.i32.i64($i563);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i565 := scnprintf.ref.i64.ref($p562, $i564, .str.137);
    call {:si_unique_call 166} {:cexpr "tmp___64"} boogie_si_record_i32($i565);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i566 := $i565;
    goto $bb232;

  $bb224:
    assume $i543 == 1;
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i544 := $ult.i32($i528, $i4);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i544 == 1);
    assume {:verifier.code 0} true;
    $i557 := 0;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i558 := $add.i32($i557, $i528);
    call {:si_unique_call 163} {:cexpr "sz"} boogie_si_record_i32($i558);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i559 := $i558;
    goto $bb229;

  $bb226:
    assume $i544 == 1;
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i545 := $zext.i32.i64($i528);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p546 := $add.ref($p3, $mul.ref($i545, 1));
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i547 := $sub.i32($i4, $i528);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i548 := $zext.i32.i64($i547);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i549 := $sext.i32.i64($i505);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i549, 848)), $mul.ref(8, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p553 := $load.ref($M.0, $p552);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($add.ref($p553, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p555 := $bitcast.ref.ref($p554);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $i556 := scnprintf.ref.i64.ref.ref($p546, $i548, .str.121, $p555);
    call {:si_unique_call 162} {:cexpr "tmp___62"} boogie_si_record_i32($i556);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i557 := $i556;
    goto $bb228;

  $bb221:
    assume $i529 == 1;
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i530 := $zext.i32.i64($i504);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($p3, $mul.ref($i530, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i532 := $sub.i32($i4, $i504);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i533 := $zext.i32.i64($i532);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $i534 := scnprintf.ref.i64.ref($p531, $i533, .str.137);
    call {:si_unique_call 159} {:cexpr "tmp___60"} boogie_si_record_i32($i534);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i535 := $i534;
    goto $bb223;

  $bb215:
    assume $i512 == 1;
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i513 := $ult.i32($i504, $i4);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i513 == 1);
    assume {:verifier.code 0} true;
    $i526 := 0;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i527 := $add.i32($i526, $i504);
    call {:si_unique_call 157} {:cexpr "sz"} boogie_si_record_i32($i527);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i528 := $i527;
    goto $bb220;

  $bb217:
    assume $i513 == 1;
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i514 := $zext.i32.i64($i504);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($p3, $mul.ref($i514, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i516 := $sub.i32($i4, $i504);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i517 := $zext.i32.i64($i516);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i518 := $sext.i32.i64($i505);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p521 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i518, 848)), $mul.ref(0, 1));
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p522 := $load.ref($M.0, $p521);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($p522, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p524 := $bitcast.ref.ref($p523);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $i525 := scnprintf.ref.i64.ref.ref($p515, $i517, .str.121, $p524);
    call {:si_unique_call 156} {:cexpr "tmp___58"} boogie_si_record_i32($i525);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i526 := $i525;
    goto $bb219;

  $bb207:
    assume $i489 == 1;
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i490 := $zext.i32.i64($i488);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($p3, $mul.ref($i490, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i492 := $sub.i32($i4, $i488);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i493 := $zext.i32.i64($i492);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i496 := $load.i32($M.0, $p495);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $i497 := scnprintf.ref.i64.ref.i32($p491, $i493, .str.136, $i496);
    call {:si_unique_call 153} {:cexpr "tmp___56"} boogie_si_record_i32($i497);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i498 := $i497;
    goto $bb209;

  $bb201:
    assume $i475 == 1;
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i476 := $ult.i32($i471, $i4);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i476} true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i476 == 1);
    assume {:verifier.code 0} true;
    $i486 := 0;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i487 := $add.i32($i486, $i471);
    call {:si_unique_call 151} {:cexpr "sz"} boogie_si_record_i32($i487);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i488 := $i487;
    goto $bb206;

  $bb203:
    assume $i476 == 1;
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(444, 1));
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i479 := $load.i32($M.0, $p478);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $p480 := raid10_md_layout_to_format($i479);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i481 := $zext.i32.i64($i471);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($p3, $mul.ref($i481, 1));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i483 := $sub.i32($i4, $i471);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i484 := $zext.i32.i64($i483);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $i485 := scnprintf.ref.i64.ref.ref($p482, $i484, .str.135, $p480);
    call {:si_unique_call 150} {:cexpr "tmp___54"} boogie_si_record_i32($i485);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i486 := $i485;
    goto $bb205;

  $bb195:
    assume $i458 == 1;
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i459 := $ult.i32($i454, $i4);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    assume {:branchcond $i459} true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i459 == 1);
    assume {:verifier.code 0} true;
    $i469 := 0;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i470 := $add.i32($i469, $i454);
    call {:si_unique_call 147} {:cexpr "sz"} boogie_si_record_i32($i470);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i471 := $i470;
    goto $bb200;

  $bb197:
    assume $i459 == 1;
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(444, 1));
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i462 := $load.i32($M.0, $p461);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $i463 := raid10_md_layout_to_copies($i462);
    call {:si_unique_call 144} {:cexpr "tmp___50"} boogie_si_record_i32($i463);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i464 := $zext.i32.i64($i454);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($p3, $mul.ref($i464, 1));
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i466 := $sub.i32($i4, $i454);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i467 := $zext.i32.i64($i466);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $i468 := scnprintf.ref.i64.ref.i32($p465, $i467, .str.134, $i463);
    call {:si_unique_call 146} {:cexpr "tmp___51"} boogie_si_record_i32($i468);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i469 := $i468;
    goto $bb199;

  $bb189:
    assume $i440 == 1;
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i441 := $ult.i32($i436, $i4);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i441} true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i441 == 1);
    assume {:verifier.code 0} true;
    $i452 := 0;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i453 := $add.i32($i452, $i436);
    call {:si_unique_call 142} {:cexpr "sz"} boogie_si_record_i32($i453);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i454 := $i453;
    goto $bb194;

  $bb191:
    assume $i441 == 1;
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i442 := $zext.i32.i64($i436);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($p3, $mul.ref($i442, 1));
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i444 := $sub.i32($i4, $i436);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i445 := $zext.i32.i64($i444);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(1568, 1)), $mul.ref(200, 1));
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i449 := $load.i64($M.0, $p448);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i450 := $lshr.i64($i449, 9);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $i451 := scnprintf.ref.i64.ref.i64($p443, $i445, .str.133, $i450);
    call {:si_unique_call 141} {:cexpr "tmp___48"} boogie_si_record_i32($i451);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i452 := $i451;
    goto $bb193;

  $bb180:
    assume $i417 == 1;
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p420 := $load.ref($M.0, $p419);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p421 := $bitcast.ref.ref($p420);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i422 := $ult.i32($i413, $i4);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i422} true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i422 == 1);
    assume {:verifier.code 0} true;
    $i434 := 0;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i435 := $add.i32($i434, $i413);
    call {:si_unique_call 139} {:cexpr "sz"} boogie_si_record_i32($i435);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i436 := $i435;
    goto $bb188;

  $bb182:
    assume $i422 == 1;
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i423 := $zext.i32.i64($i413);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($p3, $mul.ref($i423, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i425 := $sub.i32($i4, $i413);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i426 := $zext.i32.i64($i425);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i427 := $p2i.ref.i64($p421);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i428 := $ne.i64($i427, 0);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    assume {:branchcond $i428} true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i428 == 1);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i432 := 0;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $i433 := scnprintf.ref.i64.ref.i32($p424, $i426, .str.132, $i432);
    call {:si_unique_call 138} {:cexpr "tmp___46"} boogie_si_record_i32($i433);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i434 := $i433;
    goto $bb187;

  $bb184:
    assume $i428 == 1;
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($p421, $mul.ref(0, 2320)), $mul.ref(616, 1));
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i430 := $load.i32($M.0, $p429);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i431 := $mul.i32($i430, 2);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i432 := $i431;
    goto $bb186;

  $bb174:
    assume $i400 == 1;
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i401 := $ult.i32($i366, $i4);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i401} true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i401 == 1);
    assume {:verifier.code 0} true;
    $i411 := 0;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i412 := $add.i32($i411, $i366);
    call {:si_unique_call 136} {:cexpr "sz"} boogie_si_record_i32($i412);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i413 := $i412;
    goto $bb179;

  $bb176:
    assume $i401 == 1;
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i402 := $zext.i32.i64($i366);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($p3, $mul.ref($i402, 1));
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i404 := $sub.i32($i4, $i366);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i405 := $zext.i32.i64($i404);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(1568, 1)), $mul.ref(216, 1));
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i409 := $load.i64($M.0, $p408);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $i410 := scnprintf.ref.i64.ref.i64($p403, $i405, .str.131, $i409);
    call {:si_unique_call 135} {:cexpr "tmp___44"} boogie_si_record_i32($i410);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i411 := $i410;
    goto $bb178;

  $bb157:
    assume $i365 == 1;
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i367, $i368 := $i361, 0;
    goto $bb160;

  $bb160:
    call $i369, $p372, $p373, $i374, $i375, $i376, $p380, $i381, $i382, $i383, $i384, $p385, $i386, $i387, $i388, $i389, $i390, $i391, $i392, $i393, $i394, $i395, $i367, $i368, $i396 := raid_status_loop_$bb160($p3, $i4, $p7, $p363, $i369, $p372, $p373, $i374, $i375, $i376, $p380, $i381, $i382, $i383, $i384, $p385, $i386, $i387, $i388, $i389, $i390, $i391, $i392, $i393, $i394, $i395, $i367, $i368, $i396);
    goto $bb160_last;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $i369 := $sext.i32.i64($i368);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i369, 848)), $mul.ref(8, 1));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p373 := $load.ref($M.0, $p372);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i374 := $p2i.ref.i64($p373);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i375 := $ne.i64($i374, 0);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i375 == 1);
    assume {:verifier.code 0} true;
    $i392 := $i367;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i393 := $add.i32($i368, 1);
    call {:si_unique_call 133} {:cexpr "i"} boogie_si_record_i32($i393);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i394 := $load.i32($M.0, $p363);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i395 := $sgt.i32($i394, $i393);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i396 := $i392;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i395 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i366 := $i396;
    goto $bb159;

  $bb171:
    assume $i395 == 1;
    assume {:verifier.code 0} true;
    $i367, $i368 := $i392, $i393;
    goto $bb171_dummy;

  $bb162:
    assume $i375 == 1;
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i376 := $sext.i32.i64($i368);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i376, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $i381 := constant_test_bit(4, $p380);
    call {:si_unique_call 129} {:cexpr "tmp___43"} boogie_si_record_i32($i381);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i382 := $ne.i32($i381, 0);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i382 == 1);
    assume {:verifier.code 0} true;
    $i391 := $i367;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i392 := $i391;
    goto $bb170;

  $bb164:
    assume $i382 == 1;
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i383 := $ult.i32($i367, $i4);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i383 == 1);
    assume {:verifier.code 0} true;
    $i389 := 0;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i390 := $add.i32($i389, $i367);
    call {:si_unique_call 132} {:cexpr "sz"} boogie_si_record_i32($i390);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i391 := $i390;
    goto $bb169;

  $bb166:
    assume $i383 == 1;
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i384 := $zext.i32.i64($i367);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($p3, $mul.ref($i384, 1));
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i386 := $sub.i32($i4, $i367);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i387 := $zext.i32.i64($i386);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} $i388 := scnprintf.ref.i64.ref.i32($p385, $i387, .str.130, $i368);
    call {:si_unique_call 131} {:cexpr "tmp___41"} boogie_si_record_i32($i388);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i389 := $i388;
    goto $bb168;

  $bb151:
    assume $i349 == 1;
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i350 := $ult.i32($i345, $i4);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i350} true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    $i359 := 0;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i360 := $add.i32($i359, $i345);
    call {:si_unique_call 127} {:cexpr "sz"} boogie_si_record_i32($i360);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i361 := $i360;
    goto $bb156;

  $bb153:
    assume $i350 == 1;
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i351 := $zext.i32.i64($i345);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($p3, $mul.ref($i351, 1));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i353 := $sub.i32($i4, $i345);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i354 := $zext.i32.i64($i353);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(660, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i357 := $load.i32($M.0, $p356);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i358 := scnprintf.ref.i64.ref.i32($p352, $i354, .str.129, $i357);
    call {:si_unique_call 126} {:cexpr "tmp___39"} boogie_si_record_i32($i358);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i359 := $i358;
    goto $bb155;

  $bb145:
    assume $i333 == 1;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i334 := $ult.i32($i329, $i4);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i334} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    $i343 := 0;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i344 := $add.i32($i343, $i329);
    call {:si_unique_call 124} {:cexpr "sz"} boogie_si_record_i32($i344);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i345 := $i344;
    goto $bb150;

  $bb147:
    assume $i334 == 1;
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i335 := $zext.i32.i64($i329);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($p3, $mul.ref($i335, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i337 := $sub.i32($i4, $i329);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i338 := $zext.i32.i64($i337);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(656, 1));
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i341 := $load.i32($M.0, $p340);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $i342 := scnprintf.ref.i64.ref.i32($p336, $i338, .str.128, $i341);
    call {:si_unique_call 123} {:cexpr "tmp___37"} boogie_si_record_i32($i342);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i343 := $i342;
    goto $bb149;

  $bb139:
    assume $i316 == 1;
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i317 := $ult.i32($i278, $i4);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i317} true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    $i327 := 0;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i328 := $add.i32($i327, $i278);
    call {:si_unique_call 121} {:cexpr "sz"} boogie_si_record_i32($i328);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i329 := $i328;
    goto $bb144;

  $bb141:
    assume $i317 == 1;
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i318 := $zext.i32.i64($i278);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($p3, $mul.ref($i318, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i320 := $sub.i32($i4, $i278);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i321 := $zext.i32.i64($i320);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(1568, 1)), $mul.ref(208, 1));
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i325 := $load.i64($M.0, $p324);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $i326 := scnprintf.ref.i64.ref.i64($p319, $i321, .str.127, $i325);
    call {:si_unique_call 120} {:cexpr "tmp___35"} boogie_si_record_i32($i326);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i327 := $i326;
    goto $bb143;

  $bb119:
    assume $i277 == 1;
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i279, $i280 := $i273, 0;
    goto $bb122;

  $bb122:
    call $p281, $i282, $i283, $i284, $i285, $p288, $p289, $i290, $i291, $i292, $p296, $i297, $i298, $i299, $i300, $p301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i279, $i280, $i312 := raid_status_loop_$bb122($p3, $i4, $p7, $p275, $p281, $i282, $i283, $i284, $i285, $p288, $p289, $i290, $i291, $i292, $p296, $i297, $i298, $i299, $i300, $p301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i279, $i280, $i312);
    goto $bb122_last;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i282 := $load.i32($M.0, $p281);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i283 := $and.i32($i282, 4);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i284 := $ne.i32($i283, 0);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    assume !($i284 == 1);
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i308 := $i279;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i309 := $add.i32($i280, 1);
    call {:si_unique_call 118} {:cexpr "i"} boogie_si_record_i32($i309);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i310 := $load.i32($M.0, $p275);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i311 := $sgt.i32($i310, $i309);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i312 := $i308;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i278 := $i312;
    goto $bb121;

  $bb136:
    assume $i311 == 1;
    assume {:verifier.code 0} true;
    $i279, $i280 := $i308, $i309;
    goto $bb136_dummy;

  $bb124:
    assume $i284 == 1;
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i285 := $sext.i32.i64($i280);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i285, 848)), $mul.ref(8, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p289 := $load.ref($M.0, $p288);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i290 := $p2i.ref.i64($p289);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i291 := $ne.i64($i290, 0);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    assume !($i291 == 1);
    goto $bb126;

  $bb127:
    assume $i291 == 1;
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i292 := $sext.i32.i64($i280);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i292, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $i297 := constant_test_bit(1, $p296);
    call {:si_unique_call 114} {:cexpr "tmp___34"} boogie_si_record_i32($i297);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i298 := $eq.i32($i297, 0);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i298 == 1);
    assume {:verifier.code 0} true;
    $i307 := $i279;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i308 := $i307;
    goto $bb135;

  $bb129:
    assume $i298 == 1;
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i299 := $ult.i32($i279, $i4);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    $i305 := 0;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i306 := $add.i32($i305, $i279);
    call {:si_unique_call 117} {:cexpr "sz"} boogie_si_record_i32($i306);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i307 := $i306;
    goto $bb134;

  $bb131:
    assume $i299 == 1;
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i300 := $zext.i32.i64($i279);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($p3, $mul.ref($i300, 1));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i302 := $sub.i32($i4, $i279);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i303 := $zext.i32.i64($i302);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $i304 := scnprintf.ref.i64.ref.i32($p301, $i303, .str.126, $i280);
    call {:si_unique_call 116} {:cexpr "tmp___32"} boogie_si_record_i32($i304);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i305 := $i304;
    goto $bb133;

  $bb113:
    assume $i264 == 1;
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i265 := $ult.i32($i260, $i4);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i265} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    $i271 := 0;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i272 := $add.i32($i271, $i260);
    call {:si_unique_call 112} {:cexpr "sz"} boogie_si_record_i32($i272);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i273 := $i272;
    goto $bb118;

  $bb115:
    assume $i265 == 1;
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i266 := $zext.i32.i64($i260);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($p3, $mul.ref($i266, 1));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i268 := $sub.i32($i4, $i260);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i269 := $zext.i32.i64($i268);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $i270 := scnprintf.ref.i64.ref($p267, $i269, .str.125);
    call {:si_unique_call 111} {:cexpr "tmp___30"} boogie_si_record_i32($i270);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i271 := $i270;
    goto $bb117;

  $bb104:
    assume $i247 == 1;
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(1120, 1));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i250 := $load.i64($M.0, $p249);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i251 := $eq.i64($i250, $sub.i64(0, 1));
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i251 == 1);
    goto $bb106;

  $bb107:
    assume $i251 == 1;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i252 := $ult.i32($i243, $i4);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i252} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    $i258 := 0;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i259 := $add.i32($i258, $i243);
    call {:si_unique_call 109} {:cexpr "sz"} boogie_si_record_i32($i259);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i260 := $i259;
    goto $bb112;

  $bb109:
    assume $i252 == 1;
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i253 := $zext.i32.i64($i243);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($p3, $mul.ref($i253, 1));
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i255 := $sub.i32($i4, $i243);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i256 := $zext.i32.i64($i255);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i257 := scnprintf.ref.i64.ref($p254, $i256, .str.124);
    call {:si_unique_call 108} {:cexpr "tmp___28"} boogie_si_record_i32($i257);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i258 := $i257;
    goto $bb111;

  $bb101:
    assume $i229 == 1;
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i230 := $zext.i32.i64(0);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($p3, $mul.ref($i230, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i232 := $sub.i32($i4, 0);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i233 := $zext.i32.i64($i232);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p235 := $load.ref($M.0, $p234);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p235, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p237 := $load.ref($M.0, $p236);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(420, 1));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i240 := $load.i32($M.0, $p239);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $i241 := scnprintf.ref.i64.ref.ref.i32.i32($p231, $i233, .str.123, $p237, $i228, $i240);
    call {:si_unique_call 105} {:cexpr "tmp___26"} boogie_si_record_i32($i241);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i242 := $i241;
    goto $bb103;

  $bb98:
    assume $i226 == 1;
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i227 := $sub.i32($i222, 1);
    call {:si_unique_call 103} {:cexpr "raid_param_cnt"} boogie_si_record_i32($i227);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i228 := $i227;
    goto $bb100;

  $bb75:
    assume $i171 == 1;
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i173, $i174 := 1, 0;
    goto $bb78;

  $bb78:
    call $p175, $i176, $i177, $i178, $i179, $p182, $p183, $i184, $i185, $i186, $p190, $i191, $i192, $i193, $i194, $i195, $i196, $p199, $p200, $i201, $i202, $i203, $p207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i173, $i174, $i216 := raid_status_loop_$bb78($p7, $p169, $p175, $i176, $i177, $i178, $i179, $p182, $p183, $i184, $i185, $i186, $p190, $i191, $i192, $i193, $i194, $i195, $i196, $p199, $p200, $i201, $i202, $i203, $p207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i173, $i174, $i216);
    goto $bb78_last;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i176 := $load.i32($M.0, $p175);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i177 := $and.i32($i176, 4);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i178 := $ne.i32($i177, 0);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    assume !($i178 == 1);
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i195 := $i173;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i196 := $sext.i32.i64($i174);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i196, 848)), $mul.ref(8, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p200 := $load.ref($M.0, $p199);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i201 := $p2i.ref.i64($p200);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i202 := $ne.i64($i201, 0);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    $i212 := $i195;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i213 := $add.i32($i174, 1);
    call {:si_unique_call 99} {:cexpr "i"} boogie_si_record_i32($i213);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i214 := $load.i32($M.0, $p169);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i215 := $sgt.i32($i214, $i213);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i216 := $i212;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i172 := $i216;
    goto $bb77;

  $bb95:
    assume $i215 == 1;
    assume {:verifier.code 0} true;
    $i173, $i174 := $i212, $i213;
    goto $bb95_dummy;

  $bb89:
    assume $i202 == 1;
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i203 := $sext.i32.i64($i174);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i203, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $i208 := constant_test_bit(4, $p207);
    call {:si_unique_call 97} {:cexpr "tmp___24"} boogie_si_record_i32($i208);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i209 := $ne.i32($i208, 0);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    $i211 := $i195;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i212 := $i211;
    goto $bb94;

  $bb91:
    assume $i209 == 1;
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i210 := $add.i32($i195, 2);
    call {:si_unique_call 98} {:cexpr "raid_param_cnt"} boogie_si_record_i32($i210);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i211 := $i210;
    goto $bb93;

  $bb80:
    assume $i178 == 1;
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i179 := $sext.i32.i64($i174);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i179, 848)), $mul.ref(8, 1));
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i184 := $p2i.ref.i64($p183);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i185 := $ne.i64($i184, 0);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !($i185 == 1);
    goto $bb82;

  $bb83:
    assume $i185 == 1;
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i186 := $sext.i32.i64($i174);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i186, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i191 := constant_test_bit(1, $p190);
    call {:si_unique_call 94} {:cexpr "tmp___23"} boogie_si_record_i32($i191);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 0);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    $i194 := $i173;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i195 := $i194;
    goto $bb88;

  $bb85:
    assume $i192 == 1;
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i193 := $add.i32($i173, 2);
    call {:si_unique_call 95} {:cexpr "raid_param_cnt"} boogie_si_record_i32($i193);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i194 := $i193;
    goto $bb87;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i11 := $ult.i32(0, $i4);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 0);
    call {:si_unique_call 54} {:cexpr "sz"} boogie_si_record_i32($i25);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i30 == 1);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(624, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.0, $p78);
    call {:si_unique_call 57} {:cexpr "sync"} boogie_si_record_i64($i79);
    assume {:verifier.code 0} true;
    $i75, $i76 := $i79, 1;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i83 := $sgt.i32($i82, 0);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i84 := $i25;
    assume {:branchcond $i83} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i132 := $ult.i32($i84, $i4);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    $i141 := 0;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i142 := $add.i32($i141, $i84);
    call {:si_unique_call 82} {:cexpr "sz"} boogie_si_record_i32($i142);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i143 := $ult.i32($i142, $i4);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    $i151 := 0;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i152 := $add.i32($i151, $i142);
    call {:si_unique_call 86} {:cexpr "sz"} boogie_si_record_i32($i152);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i153 := $ult.i32($i152, $i4);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb68:
    assume $i153 == 1;
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(576, 1));
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i157 := strcmp($p156, .str.114);
    call {:si_unique_call 88} {:cexpr "tmp___20"} boogie_si_record_i32($i157);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 0);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    $i162 := 0;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i163 := $zext.i32.i64($i152);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($p3, $mul.ref($i163, 1));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i165 := $sub.i32($i4, $i152);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i166 := $zext.i32.i64($i165);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $i167 := scnprintf.ref.i64.ref.i64($p164, $i166, .str.122, $i162);
    call {:si_unique_call 92} {:cexpr "tmp___21"} boogie_si_record_i32($i167);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb70:
    assume $i158 == 1;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(632, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i161 := atomic64_read($p160);
    call {:si_unique_call 90} {:cexpr "tmp___18"} boogie_si_record_i64($i161);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i162 := $i161;
    goto $bb72;

  $bb65:
    assume $i143 == 1;
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1));
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $p145 := decipher_sync_action($p144);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i146 := $zext.i32.i64($i142);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($p3, $mul.ref($i146, 1));
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i148 := $sub.i32($i4, $i142);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i149 := $zext.i32.i64($i148);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $i150 := scnprintf.ref.i64.ref.ref($p147, $i149, .str.121, $p145);
    call {:si_unique_call 85} {:cexpr "tmp___15"} boogie_si_record_i32($i150);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i151 := $i150;
    goto $bb67;

  $bb62:
    assume $i132 == 1;
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i133 := $zext.i32.i64($i84);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($p3, $mul.ref($i133, 1));
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i135 := $sub.i32($i4, $i84);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i136 := $zext.i32.i64($i135);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(624, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i139 := $load.i64($M.0, $p138);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i140 := scnprintf.ref.i64.ref.i64.i64($p134, $i136, .str.120, $i75, $i139);
    call {:si_unique_call 81} {:cexpr "tmp___12"} boogie_si_record_i32($i140);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i141 := $i140;
    goto $bb64;

  $bb35:
    assume $i83 == 1;
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i85, $i86 := $i25, 0;
    goto $bb38;

  $bb38:
    call $i87, $p91, $i92, $i93, $i94, $i95, $p96, $i97, $i98, $i99, $i100, $i101, $i103, $i104, $p108, $i109, $i110, $i111, $i112, $p113, $i114, $i115, $i116, $i117, $i118, $i120, $i121, $p122, $i123, $i124, $i125, $i126, $i127, $i119, $i102, $i128, $i129, $i130, $i85, $i86, $i131 := raid_status_loop_$bb38($p3, $i4, $p7, $i76, $p81, $i87, $p91, $i92, $i93, $i94, $i95, $p96, $i97, $i98, $i99, $i100, $i101, $i103, $i104, $p108, $i109, $i110, $i111, $i112, $p113, $i114, $i115, $i116, $i117, $i118, $i120, $i121, $p122, $i123, $i124, $i125, $i126, $i127, $i119, $i102, $i128, $i129, $i130, $i85, $i86, $i131);
    goto $bb38_last;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i86);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i87, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $i92 := constant_test_bit(0, $p91);
    call {:si_unique_call 67} {:cexpr "tmp___11"} boogie_si_record_i32($i92);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i93 == 1);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i76, 0);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i103 == 1);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i86);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i104, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $i109 := constant_test_bit(1, $p108);
    call {:si_unique_call 73} {:cexpr "tmp___10"} boogie_si_record_i32($i109);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 0);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i110 == 1);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i120 := $ult.i32($i85, $i4);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    $i126 := 0;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i127 := $add.i32($i126, $i85);
    call {:si_unique_call 79} {:cexpr "sz"} boogie_si_record_i32($i127);
    assume {:verifier.code 0} true;
    $i119 := $i127;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i102 := $i119;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i128 := $add.i32($i86, 1);
    call {:si_unique_call 71} {:cexpr "i"} boogie_si_record_i32($i128);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p81);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i130 := $sgt.i32($i129, $i128);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i131 := $i102;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i84 := $i131;
    goto $bb37;

  $bb59:
    assume $i130 == 1;
    assume {:verifier.code 0} true;
    $i85, $i86 := $i102, $i128;
    goto $bb59_dummy;

  $bb55:
    assume $i120 == 1;
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i121 := $zext.i32.i64($i85);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p3, $mul.ref($i121, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i123 := $sub.i32($i4, $i85);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i124 := $zext.i32.i64($i123);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i125 := scnprintf.ref.i64.ref($p122, $i124, .str.119);
    call {:si_unique_call 78} {:cexpr "tmp___8"} boogie_si_record_i32($i125);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i126 := $i125;
    goto $bb57;

  $bb49:
    assume $i110 == 1;
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i111 := $ult.i32($i85, $i4);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $i117 := 0;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i118 := $add.i32($i117, $i85);
    call {:si_unique_call 76} {:cexpr "sz"} boogie_si_record_i32($i118);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i119 := $i118;
    goto $bb54;

  $bb51:
    assume $i111 == 1;
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i112 := $zext.i32.i64($i85);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p3, $mul.ref($i112, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i114 := $sub.i32($i4, $i85);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i115 := $zext.i32.i64($i114);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $i116 := scnprintf.ref.i64.ref($p113, $i115, .str.118);
    call {:si_unique_call 75} {:cexpr "tmp___6"} boogie_si_record_i32($i116);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i117 := $i116;
    goto $bb53;

  $bb46:
    assume $i103 == 1;
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb40:
    assume $i93 == 1;
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i94 := $ult.i32($i85, $i4);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i100 := 0;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i101 := $add.i32($i100, $i85);
    call {:si_unique_call 70} {:cexpr "sz"} boogie_si_record_i32($i101);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i102 := $i101;
    goto $bb45;

  $bb42:
    assume $i94 == 1;
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i95 := $zext.i32.i64($i85);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p3, $mul.ref($i95, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i97 := $sub.i32($i4, $i85);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i98 := $zext.i32.i64($i97);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $i99 := scnprintf.ref.i64.ref($p96, $i98, .str.117);
    call {:si_unique_call 69} {:cexpr "tmp___4"} boogie_si_record_i32($i99);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i100 := $i99;
    goto $bb44;

  $bb12:
    assume $i30 == 1;
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(672, 1));
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $i33 := constant_test_bit(0, $p32);
    call {:si_unique_call 56} {:cexpr "tmp___1"} boogie_si_record_i32($i33);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(1120, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    call {:si_unique_call 59} {:cexpr "sync"} boogie_si_record_i64($i41);
    assume {:verifier.code 0} true;
    $i38 := $i41;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(624, 1));
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i45 := $ule.i64($i44, $i38);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i45 == 1);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(672, 1));
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $i53 := constant_test_bit(6, $p52);
    call {:si_unique_call 62} {:cexpr "tmp___3"} boogie_si_record_i32($i53);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i54 == 1);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i59 := $sgt.i32($i58, 0);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i60 := 0;
    assume {:branchcond $i59} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i55 := $i60;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i49, $i50 := $i38, $i55;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i75, $i76 := $i49, $i50;
    goto $bb34;

  $bb23:
    assume $i59 == 1;
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i61, $i62 := 0, 0;
    goto $bb26;

  $bb26:
    call $i63, $p67, $i68, $i69, $i70, $i71, $i72, $i73, $i61, $i62, $i74 := raid_status_loop_$bb26($p7, $p57, $i63, $p67, $i68, $i69, $i70, $i71, $i72, $i73, $i61, $i62, $i74);
    goto $bb26_last;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i61);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i63, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $i68 := constant_test_bit(1, $p67);
    call {:si_unique_call 64} {:cexpr "tmp___2"} boogie_si_record_i32($i68);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $i62;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i61, 1);
    call {:si_unique_call 65} {:cexpr "i"} boogie_si_record_i32($i71);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p57);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i73 := $sgt.i32($i72, $i71);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i74 := $i70;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i60 := $i74;
    goto $bb25;

  $bb31:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i61, $i62 := $i71, $i70;
    goto $bb31_dummy;

  $bb28:
    assume $i69 == 1;
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i70 := 1;
    goto $bb30;

  $bb20:
    assume $i54 == 1;
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i55 := 1;
    goto $bb22;

  $bb17:
    assume $i45 == 1;
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(624, 1));
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.0, $p47);
    call {:si_unique_call 60} {:cexpr "sync"} boogie_si_record_i64($i48);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i49, $i50 := $i48, 1;
    goto $bb19;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(592, 1));
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    call {:si_unique_call 58} {:cexpr "sync"} boogie_si_record_i64($i37);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb16;

  $bb9:
    assume $i11 == 1;
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64(0);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p3, $mul.ref($i12, 1));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32($i4, 0);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $i23 := scnprintf.ref.i64.ref.ref.i32($p13, $i15, .str.116, $p19, $i22);
    call {:si_unique_call 53} {:cexpr "tmp"} boogie_si_record_i32($i23);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb11;

  $bb233_dummy:
    assume false;
    return;

  $bb213_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_848;

  $bb171_dummy:
    assume false;
    return;

  $bb160_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_673;

  $bb136_dummy:
    assume false;
    return;

  $bb122_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_562;

  $bb95_dummy:
    assume false;
    return;

  $bb78_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_431;

  $bb59_dummy:
    assume false;
    return;

  $bb38_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_320;

  $bb31_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_297;
}



const raid_message: ref;

axiom raid_message == $sub.ref(0, 186495);

procedure raid_message($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation raid_message($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $i11: i32;
  var vslice_dummy_var_10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} {:cexpr "raid_message:arg:argc"} boogie_si_record_i32($i1);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p2);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i8 := strcasecmp($p7, .str.108);
    call {:si_unique_call 170} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p12 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i15 == 1);
    $p16 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p2);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i23 := strcasecmp($p22, .str.110);
    call {:si_unique_call 173} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    $p26 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(672, 1));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} clear_bit(9, $p26);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p2);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i28 := strcasecmp($p27, .str.111);
    call {:si_unique_call 177} {:cexpr "tmp___7"} boogie_si_record_i32($i28);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p2);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $i31 := strcasecmp($p30, .str.110);
    call {:si_unique_call 179} {:cexpr "tmp___8"} boogie_si_record_i32($i31);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    $p38 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(672, 1));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $i39 := constant_test_bit(0, $p38);
    call {:si_unique_call 181} {:cexpr "tmp___5"} boogie_si_record_i32($i39);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i40 == 1);
    $p41 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(672, 1));
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $i42 := constant_test_bit(5, $p41);
    call {:si_unique_call 185} {:cexpr "tmp___6"} boogie_si_record_i32($i42);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i43 == 1);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p2);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $i45 := strcasecmp($p44, .str.112);
    call {:si_unique_call 187} {:cexpr "tmp___4"} boogie_si_record_i32($i45);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i46 == 1);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p2);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $i49 := strcasecmp($p48, .str.113);
    call {:si_unique_call 190} {:cexpr "tmp___3"} boogie_si_record_i32($i49);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i50 == 1);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p2);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $i54 := strcasecmp($p53, .str.114);
    call {:si_unique_call 194} {:cexpr "tmp___2"} boogie_si_record_i32($i54);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i55 == 1);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p2);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $i58 := strcasecmp($p57, .str.115);
    call {:si_unique_call 197} {:cexpr "tmp___1"} boogie_si_record_i32($i58);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    $p60 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(672, 1));
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} set_bit(6, $p60);
    $p61 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(672, 1));
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} set_bit(1, $p61);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    $p62 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 2);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    $p71 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(672, 1));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} set_bit(5, $p71);
    $p72 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(48, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 0);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb48:
    assume $i74 == 1;
    $p75 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(560, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} md_wakeup_thread($p76);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb42:
    assume $i64 == 1;
    $p65 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, 0);
    $p66 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(48, 1));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 0);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume $i68 == 1;
    $p69 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(568, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} md_wakeup_thread($p70);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb36:
    assume $i59 == 1;
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb33:
    assume $i55 == 1;
    $p56 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(672, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} set_bit(7, $p56);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i50 == 1;
    $p51 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(672, 1));
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} set_bit(2, $p51);
    $p52 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(672, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} set_bit(5, $p52);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i46 == 1;
    $p47 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(672, 1));
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} set_bit(5, $p47);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb25:
    assume $i43 == 1;
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 16);
    goto $bb3;

  $bb23:
    assume $i40 == 1;
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 16);
    goto $bb3;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    $p33 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(568, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i36 == 1;
    $p37 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(672, 1));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} set_bit(3, $p37);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} md_reap_sync_thread($p6);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i24 == 1;
    $p25 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(672, 1));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} set_bit(9, $p25);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} vslice_dummy_var_10 := printk.ref(.str.109);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;
}



const raid_merge: ref;

axiom raid_merge == $sub.ref(0, 187527);

procedure raid_merge($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation raid_merge($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $p24: ref;
  var $i25: i32;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} {:cexpr "raid_merge:arg:max_size"} boogie_si_record_i32($i3);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(420, 1));
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i22 := $i25;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb4:
    assume $i15 == 1;
    call {:si_unique_call 204} {:cexpr "raid_merge:arg:_min1"} boogie_si_record_i32($i3);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 2144)), $mul.ref(16, 1));
    call {:si_unique_call 205} $i19 := devirtbounce.1($p17, $p18, $p1, $p2);
    call {:si_unique_call 206} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i3, $i19);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb9;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i21 := $i3;
    goto $bb8;
}



const raid_iterate_devices: ref;

axiom raid_iterate_devices == $sub.ref(0, 188559);

procedure raid_iterate_devices($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation raid_iterate_devices($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i10: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i64;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i8: i32;
  var $i9: i32;
  var $i30: i32;
  var $i31: i1;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i8, $i9 := 0, 0;
    goto $bb1;

  $bb1:
    call $i10, $p13, $p14, $i15, $i16, $i17, $p20, $p21, $p23, $i24, $i25, $i26, $i27, $i28, $i8, $i9, $i30, $i31, $i29 := raid_iterate_devices_loop_$bb1($p0, $p1, $p2, $p5, $p7, $i10, $p13, $p14, $i15, $i16, $i17, $p20, $p21, $p23, $i24, $i25, $i26, $i27, $i28, $i8, $i9, $i30, $i31, $i29);
    goto $bb1_last;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p7);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i31 := $ugt.i32($i30, $i9);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i29 := $i8;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb9:
    assume $i31 == 1;
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i10, 848)), $mul.ref(8, 1));
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i8;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i9, 1);
    call {:si_unique_call 209} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i26, 0);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i29 := $i26;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb8;

  $bb6:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i8, $i9 := $i26, $i27;
    goto $bb6_dummy;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i9);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i17, 848)), $mul.ref(8, 1));
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(472, 1));
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    call {:si_unique_call 207} $i25 := devirtbounce.2($p1, $p0, $p21, 0, $i24, $p2);
    call {:si_unique_call 208} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb5;

  $bb6_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1094;
}



const raid_io_hints: ref;

axiom raid_io_hints == $sub.ref(0, 189591);

procedure raid_io_hints($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation raid_io_hints($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(420, 1));
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32($i7, 9);
    call {:si_unique_call 210} {:cexpr "chunk_size"} boogie_si_record_i32($i8);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} blk_limits_io_min($p1, $i8);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2320)), $mul.ref(612, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p12, $mul.ref(0, 2320)), $mul.ref(608, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i14, $i16);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i18 := $mul.i32($i17, $i8);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} blk_limits_io_opt($p1, $i18);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    return;
}



const blk_limits_io_min: ref;

axiom blk_limits_io_min == $sub.ref(0, 190623);

procedure blk_limits_io_min($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_limits_io_min($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} {:cexpr "blk_limits_io_min:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    return;
}



const blk_limits_io_opt: ref;

axiom blk_limits_io_opt == $sub.ref(0, 191655);

procedure blk_limits_io_opt($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_limits_io_opt($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} {:cexpr "blk_limits_io_opt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    return;
}



const strcasecmp: ref;

axiom strcasecmp == $sub.ref(0, 192687);

procedure strcasecmp($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation strcasecmp($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 1} true;
    call {:si_unique_call 215} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 216} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 193719);

procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 1} true;
    call {:si_unique_call 217} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 218} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64.i64($p0: ref, p.1: i64, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64.i64($p0: ref, p.1: i64, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 1} true;
    call {:si_unique_call 219} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 220} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 1} true;
    call {:si_unique_call 221} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 222} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64($p0: ref, p.1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64($p0: ref, p.1: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 1} true;
    call {:si_unique_call 223} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 224} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 1} true;
    call {:si_unique_call 225} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 226} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 1} true;
    call {:si_unique_call 227} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 228} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 1} true;
    call {:si_unique_call 229} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 230} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 1} true;
    call {:si_unique_call 231} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 232} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 194751);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 234} devirtbounce.3(0, $p1, $i0, $p1);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 195783);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 236} devirtbounce.3(0, $p1, $i0, $p1);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    return;
}



const md_reap_sync_thread: ref;

axiom md_reap_sync_thread == $sub.ref(0, 196815);

procedure md_reap_sync_thread($p0: ref);
  free requires assertsPassed;



implementation md_reap_sync_thread($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 197847);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const md_wakeup_thread: ref;

axiom md_wakeup_thread == $sub.ref(0, 198879);

procedure md_wakeup_thread($p0: ref);
  free requires assertsPassed;



implementation md_wakeup_thread($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    return;
}



const scnprintf: ref;

axiom scnprintf == $sub.ref(0, 199911);

procedure scnprintf.ref.i64.ref($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 238} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 1} true;
    call {:si_unique_call 239} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 240} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 241} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 1} true;
    call {:si_unique_call 242} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 243} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb2:
    assume {:verifier.code 1} true;
    call {:si_unique_call 244} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 1} true;
    call {:si_unique_call 245} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 246} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.i64($p0: ref, $i1: i64, $p2: ref, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i64($p0: ref, $i1: i64, $p2: ref, p.3: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb3:
    assume {:verifier.code 1} true;
    call {:si_unique_call 247} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 1} true;
    call {:si_unique_call 248} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 249} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.ref.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.ref.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 250} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 1} true;
    call {:si_unique_call 251} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 252} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.i64.i64($p0: ref, $i1: i64, $p2: ref, p.3: i64, p.4: i64) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i64.i64($p0: ref, $i1: i64, $p2: ref, p.3: i64, p.4: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb5:
    assume {:verifier.code 1} true;
    call {:si_unique_call 253} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 1} true;
    call {:si_unique_call 254} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 255} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 256} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 1} true;
    call {:si_unique_call 257} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 258} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const decipher_sync_action: ref;

axiom decipher_sync_action == $sub.ref(0, 200943);

procedure decipher_sync_action($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation decipher_sync_action($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(672, 1));
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $i2 := constant_test_bit(9, $p1);
    call {:si_unique_call 260} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(672, 1));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $i6 := constant_test_bit(0, $p5);
    call {:si_unique_call 262} {:cexpr "tmp___5"} boogie_si_record_i32($i6);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(56, 1));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p4 := .str.111;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(672, 1));
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $i12 := constant_test_bit(5, $p11);
    call {:si_unique_call 266} {:cexpr "tmp___6"} boogie_si_record_i32($i12);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(672, 1));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i15 := constant_test_bit(8, $p14);
    call {:si_unique_call 264} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(672, 1));
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $i18 := constant_test_bit(1, $p17);
    call {:si_unique_call 268} {:cexpr "tmp___3"} boogie_si_record_i32($i18);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(672, 1));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i27 := constant_test_bit(2, $p26);
    call {:si_unique_call 274} {:cexpr "tmp___4"} boogie_si_record_i32($i27);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i28 == 1;
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p4 := .str.113;
    goto $bb3;

  $bb15:
    assume $i19 == 1;
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(672, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $i21 := constant_test_bit(6, $p20);
    call {:si_unique_call 270} {:cexpr "tmp___2"} boogie_si_record_i32($i21);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i22 == 1);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(672, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $i24 := constant_test_bit(7, $p23);
    call {:si_unique_call 272} {:cexpr "tmp___1"} boogie_si_record_i32($i24);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p4 := .str.115;
    goto $bb3;

  $bb19:
    assume $i25 == 1;
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p4 := .str.114;
    goto $bb3;

  $bb17:
    assume $i22 == 1;
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p4 := .str.112;
    goto $bb3;

  $bb12:
    assume $i16 == 1;
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $p4 := .str.108;
    goto $bb3;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p4 := .str.110;
    goto $bb3;
}



const strcmp: ref;

axiom strcmp == $sub.ref(0, 201975);

procedure strcmp($p0: ref, $p1: ref) returns ($r: i32);



const atomic64_read: ref;

axiom atomic64_read == $sub.ref(0, 203007);

procedure atomic64_read($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation atomic64_read($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __arch_hweight32: ref;

axiom __arch_hweight32 == $sub.ref(0, 204039);

procedure __arch_hweight32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __arch_hweight32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} {:cexpr "__arch_hweight32:arg:w"} boogie_si_record_i32($i0);
    call {:si_unique_call 276} $i1 := devirtbounce.4(0, $i0);
    call {:si_unique_call 277} {:cexpr "res"} boogie_si_record_i32($i1);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const raid10_md_layout_to_copies: ref;

axiom raid10_md_layout_to_copies == $sub.ref(0, 205071);

procedure raid10_md_layout_to_copies($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation raid10_md_layout_to_copies($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i5: i32;
  var $i6: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} {:cexpr "raid10_md_layout_to_copies:arg:layout"} boogie_si_record_i32($i0);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i1 := $and.i32($i0, 255);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 1);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $ashr.i32($i0, 8);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 255);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 255);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i4 := $i3;
    goto $bb3;
}



const raid10_md_layout_to_format: ref;

axiom raid10_md_layout_to_format == $sub.ref(0, 206103);

procedure raid10_md_layout_to_format($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation raid10_md_layout_to_format($i0: i32) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} {:cexpr "raid10_md_layout_to_format:arg:layout"} boogie_si_record_i32($i0);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i1 := $and.i32($i0, 65536);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i0, 255);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 1);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p5 := .str.45;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p5 := .str.35;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 131072);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p5 := .str.46;
    goto $bb6;
}



const bitmap_load: ref;

axiom bitmap_load == $sub.ref(0, 207135);

procedure bitmap_load($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bitmap_load($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 1} true;
    call {:si_unique_call 280} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 281} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const attempt_restore_of_faulty_devices: ref;

axiom attempt_restore_of_faulty_devices == $sub.ref(0, 208167);

procedure attempt_restore_of_faulty_devices($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2;



implementation attempt_restore_of_faulty_devices($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i8: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i64;
  var $i69: i64;
  var $i65: i64;
  var $i70: i32;
  var $i71: i64;
  var $i72: i32;
  var $i73: i64;
  var $i43: i32;
  var $i44: i64;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $i6: i32;
  var $i7: i64;
  var $i77: i64;
  var $i5: i64;
  var $i78: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $i97: i64;
  var $i98: i64;
  var $p99: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $i106: i1;
  var $p90: ref;
  var vslice_dummy_var_11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i5, 0);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    return;

  $bb28:
    assume $i78 == 1;
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p87);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i85, $i88);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb30:
    assume $i89 == 1;
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p90 := $p82;
    goto $bb33;

  $bb33:
    call $p91, $p92, $p93, $p94, $p95, $i96, $i97, $i98, $p99, $p101, $p102, $p103, $p104, $i105, $i106, $p90 := attempt_restore_of_faulty_devices_loop_$bb33($i5, $i88, $p91, $p92, $p93, $p94, $p95, $i96, $i97, $i98, $p99, $p101, $p102, $p103, $p104, $i105, $i106, $p90);
    goto $bb33_last;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p90, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $p93 := lowmem_page_address($p92);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i96 := $load.i64($M.2, $p95);
    call {:si_unique_call 298} {:cexpr "failed_devices"} boogie_si_record_i64($i96);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i97 := $xor.i64($i5, $sub.i64(0, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i98 := $and.i64($i97, $i96);
    call {:si_unique_call 299} {:cexpr "failed_devices"} boogie_si_record_i64($i98);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p94, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p99, $i98);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p90, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p104);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, $i88);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i106 == 1);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb35:
    assume $i106 == 1;
    assume {:verifier.code 0} true;
    $p90 := $p102;
    goto $bb35_dummy;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i6, $i7 := 0, 0;
    goto $bb4;

  $bb4:
    call $i8, $p11, $p12, $i13, $i14, $p15, $p16, $i17, $i18, $p19, $i20, $p21, $p22, $i23, $i24, $p25, $p26, $p27, $p28, $p30, $i31, $i32, $p33, $p34, $p35, $p36, $p37, $p38, $p39, $p40, $i41, $i42, $p45, $p46, $p47, $i48, $p49, $p50, $p51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $i60, $i61, $p62, $p63, $p64, $p66, $i67, $i68, $i69, $i65, $i70, $i71, $i72, $i73, $i43, $i44, $i74, $i75, $i76, $i6, $i7, $i77, vslice_dummy_var_11 := attempt_restore_of_faulty_devices_loop_$bb4($p0, $p2, $i8, $p11, $p12, $i13, $i14, $p15, $p16, $i17, $i18, $p19, $i20, $p21, $p22, $i23, $i24, $p25, $p26, $p27, $p28, $p30, $i31, $i32, $p33, $p34, $p35, $p36, $p37, $p38, $p39, $p40, $i41, $i42, $p45, $p46, $p47, $i48, $p49, $p50, $p51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $i60, $i61, $p62, $p63, $p64, $p66, $i67, $i68, $i69, $i65, $i70, $i71, $i72, $i73, $i43, $i44, $i74, $i75, $i76, $i6, $i7, $i77, vslice_dummy_var_11);
    goto $bb4_last;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i6);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i8, 848)), $mul.ref(16, 1));
    $p12 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i8, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i13 := constant_test_bit(0, $p12);
    call {:si_unique_call 283} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i72, $i73 := $i6, $i7;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i43, $i44 := $i72, $i73;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i43, 1);
    call {:si_unique_call 289} {:cexpr "i"} boogie_si_record_i32($i74);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p2);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i76 := $sgt.i32($i75, $i74);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i77 := $i44;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i5 := $i77;
    goto $bb3;

  $bb25:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i6, $i7 := $i74, $i44;
    goto $bb25_dummy;

  $bb6:
    assume $i14 == 1;
    $p15 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i8, 848)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb8;

  $bb9:
    assume $i18 == 1;
    $p19 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i8, 848)), $mul.ref(16, 1)), $mul.ref(112, 1));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    $p21 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i8, 848)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $i23 := sync_page_io($p11, 0, $i20, $p22, 0, 1);
    call {:si_unique_call 285} {:cexpr "tmp___2"} boogie_si_record_i32($i23);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i70, $i71 := $i6, $i7;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i72, $i73 := $i70, $i71;
    goto $bb24;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} vslice_dummy_var_11 := printk.ref.ref.i32(.str.138, $p28, $i6);
    $p30 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i8, 848)), $mul.ref(16, 1)), $mul.ref(516, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i32 := $sge.i32($i31, 0);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    $p45 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i8, 848)), $mul.ref(16, 1)), $mul.ref(516, 1));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i6);
    $p46 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i8, 848)), $mul.ref(16, 1)), $mul.ref(524, 1));
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i6);
    $p47 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i8, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.0, $p47);
    call {:si_unique_call 290} {:cexpr "flags"} boogie_si_record_i64($i48);
    $p49 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i8, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} clear_bit(0, $p49);
    $p50 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i8, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} clear_bit(7, $p50);
    $p51 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i8, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} clear_bit(1, $p51);
    $p52 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i8, 848)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 2096)), $mul.ref(8, 1));
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    $p58 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i8, 848)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    call {:si_unique_call 294} $i60 := devirtbounce.5($p57, $p59, $p11);
    call {:si_unique_call 295} {:cexpr "tmp___0"} boogie_si_record_i32($i60);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i61 == 1);
    $p66 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i8, 848)), $mul.ref(16, 1)), $mul.ref(528, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p66, 0);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i67 := $shl.i32(1, $i6);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i69 := $or.i64($i68, $i7);
    call {:si_unique_call 296} {:cexpr "cleared_failed_devices"} boogie_si_record_i64($i69);
    assume {:verifier.code 0} true;
    $i65 := $i69;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i70, $i71 := $i6, $i65;
    goto $bb23;

  $bb20:
    assume $i61 == 1;
    $p62 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i8, 848)), $mul.ref(16, 1)), $mul.ref(516, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $sub.i32(0, 1));
    $p63 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i8, 848)), $mul.ref(16, 1)), $mul.ref(524, 1));
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $sub.i32(0, 1));
    $p64 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i8, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p64, $i48);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i65 := $i7;
    goto $bb22;

  $bb13:
    assume $i32 == 1;
    $p33 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i8, 848)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 2096)), $mul.ref(8, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    $p39 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i8, 848)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    call {:si_unique_call 287} $i41 := devirtbounce.5($p38, $p40, $p11);
    call {:si_unique_call 288} {:cexpr "tmp"} boogie_si_record_i32($i41);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb15:
    assume $i42 == 1;
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i43, $i44 := $i6, $i7;
    goto $bb17;

  $bb35_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1399;

  $bb25_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1309;
}



const mddev_resume: ref;

axiom mddev_resume == $sub.ref(0, 209199);

procedure mddev_resume($p0: ref);
  free requires assertsPassed;



implementation mddev_resume($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    return;
}



const sync_page_io: ref;

axiom sync_page_io == $sub.ref(0, 210231);

procedure sync_page_io($p0: ref, $i1: i64, $i2: i32, $p3: ref, $i4: i32, $i5: i1) returns ($r: i32);
  free requires assertsPassed;



implementation sync_page_io($p0: ref, $i1: i64, $i2: i32, $p3: ref, $i4: i32, $i5: i1) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 300} {:cexpr "sync_page_io:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 301} {:cexpr "sync_page_io:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 302} {:cexpr "sync_page_io:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 303} {:cexpr "sync_page_io:arg:arg5"} boogie_si_record_i1($i5);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 1} true;
    call {:si_unique_call 304} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 305} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 211263);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const mddev_suspend: ref;

axiom mddev_suspend == $sub.ref(0, 212295);

procedure mddev_suspend($p0: ref);
  free requires assertsPassed;



implementation mddev_suspend($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    return;
}



const md_stop_writes: ref;

axiom md_stop_writes == $sub.ref(0, 213327);

procedure md_stop_writes($p0: ref);
  free requires assertsPassed;



implementation md_stop_writes($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    return;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 214359);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} __list_del_entry($p0);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} INIT_LIST_HEAD($p0);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    return;
}



const md_stop: ref;

axiom md_stop == $sub.ref(0, 215391);

procedure md_stop($p0: ref);
  free requires assertsPassed;



implementation md_stop($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    return;
}



const context_free: ref;

axiom context_free == $sub.ref(0, 216423);

procedure context_free($p0: ref);
  free requires assertsPassed;



implementation context_free($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p23: ref;
  var $i24: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i5: i32;
  var $p41: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p0);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} kfree($p41);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $i6, $p9, $p10, $i11, $i12, $p13, $p14, $i15, $p18, $p19, $i20, $p23, $i24, $p27, $p28, $i29, $i30, $p31, $p32, $i33, $p36, $p37, $i38, $i39, $i40, $i5 := context_free_loop_$bb4($p0, $p2, $i6, $p9, $p10, $i11, $i12, $p13, $p14, $i15, $p18, $p19, $i20, $p23, $i24, $p27, $p28, $i29, $i30, $p31, $p32, $i33, $p36, $p37, $i38, $i39, $i40, $i5);
    goto $bb4_last;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i6, 848)), $mul.ref(0, 1));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i5);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i20, 848)), $mul.ref(16, 1));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} md_rdev_clear($p23);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i5);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i24, 848)), $mul.ref(8, 1));
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i5, 1);
    call {:si_unique_call 311} {:cexpr "i"} boogie_si_record_i32($i38);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p2);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i40 := $sgt.i32($i39, $i38);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i40 == 1);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i38;
    goto $bb12_dummy;

  $bb9:
    assume $i30 == 1;
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i5);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i33, 848)), $mul.ref(8, 1));
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} dm_put_device($p32, $p37);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i5);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i15, 848)), $mul.ref(0, 1));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} dm_put_device($p14, $p19);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1450;
}



const dm_put_device: ref;

axiom dm_put_device == $sub.ref(0, 217455);

procedure dm_put_device($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dm_put_device($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    return;
}



const md_rdev_clear: ref;

axiom md_rdev_clear == $sub.ref(0, 218487);

procedure md_rdev_clear($p0: ref);
  free requires assertsPassed;



implementation md_rdev_clear($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 219519);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} free_($p0);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 220551);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 314} $free($p0);
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 221583);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 222615);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    return;
}



const get_raid_type: ref;

axiom get_raid_type == $sub.ref(0, 223647);

procedure get_raid_type($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_raid_type($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, raid_types);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $i2 := strcmp($p1, $p0);
    call {:si_unique_call 316} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(0, 1)));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $i9 := strcmp($p8, $p0);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume {:branchcond $i10} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(0, 1)));
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i12 := strcmp($p11, $p0);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i4 := 2;
    assume {:branchcond $i13} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(0, 1)));
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $i15 := strcmp($p14, $p0);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i4 := 3;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(0, 1)));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $i18 := strcmp($p17, $p0);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i4 := 4;
    assume {:branchcond $i19} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(0, 1)));
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $i21 := strcmp($p20, $p0);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i4 := 5;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(0, 1)));
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $i24 := strcmp($p23, $p0);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i4 := 6;
    assume {:branchcond $i25} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(0, 1)));
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $i27 := strcmp($p26, $p0);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i4 := 7;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(0, 1)));
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $i30 := strcmp($p29, $p0);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i4 := 8;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(0, 1)));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $i33 := strcmp($p32, $p0);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i4 := 9;
    assume {:branchcond $i34} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(0, 1)));
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i36 := strcmp($p35, $p0);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i4 := 10;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    $p6 := $add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref($i5, 32));
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb6;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb4;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb4;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb4;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb4;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb4;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb4;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb4;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb4;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb4;
}



const kstrtoul: ref;

axiom kstrtoul == $sub.ref(0, 224679);

procedure kstrtoul($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoul($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} {:cexpr "kstrtoul:arg:base"} boogie_si_record_i32($i1);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $i3 := kstrtoull($p0, $i1, $p2);
    call {:si_unique_call 329} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const context_alloc: ref;

axiom context_alloc == $sub.ref(0, 225711);

procedure context_alloc($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation context_alloc($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p28: ref;
  var $p30: ref;
  var $i31: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p37: ref;
  var $p39: ref;
  var $i40: i32;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $i47: i1;
  var $i49: i64;
  var $p52: ref;
  var $i54: i32;
  var $i55: i1;
  var $i48: i32;
  var $p9: ref;
  var vslice_dummy_var_12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} {:cexpr "context_alloc:arg:raid_devs"} boogie_si_record_i32($i2);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i4, $i2);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i2);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i11 := $mul.i64($i10, 848);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 2144);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $p13 := kzalloc($i12, 208);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p14, $mul.ref(0, 2144)), $mul.ref(16, 1));
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} mddev_init($p20);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p14, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p0);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p14, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p1);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i2);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(440, 1));
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i26);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(440, 1));
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(540, 1));
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i31);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(444, 1));
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i35);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(444, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(544, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i40);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(536, 1));
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, 0);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(1120, 1));
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p46, 0);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i47 := $ult.i32(0, $i2);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p9 := $p13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb8:
    assume $i47 == 1;
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb11;

  $bb11:
    call $i49, $p52, $i54, $i55, $i48, vslice_dummy_var_12 := context_alloc_loop_$bb11($i2, $p14, $i49, $p52, $i54, $i55, $i48, vslice_dummy_var_12);
    goto $bb11_last;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i48);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p14, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i49, 848)), $mul.ref(16, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} vslice_dummy_var_12 := md_rdev_init($p52);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i48, 1);
    call {:si_unique_call 336} {:cexpr "i"} boogie_si_record_i32($i54);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i55 := $ult.i32($i54, $i2);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i55 == 1);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i48 := $i54;
    goto $bb13_dummy;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, .str.34);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $p18 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p9 := $p18;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, .str.33);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $p7 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $p9 := $p7;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1620;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 226743);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $i1 := ldv_is_err($p0);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 338} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 227775);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 340} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const parse_raid_params: ref;

axiom parse_raid_params == $sub.ref(0, 228807);

procedure parse_raid_params($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr;



implementation parse_raid_params($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i64;
  var $i21: i1;
  var $i23: i64;
  var $i24: i1;
  var $i25: i8;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i32;
  var $p40: ref;
  var $p42: ref;
  var $i44: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i50: i64;
  var $p54: ref;
  var $i55: i64;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i49: i32;
  var $i63: i1;
  var $i71: i64;
  var $i72: i64;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $i87: i64;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $i105: i64;
  var $i106: i64;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i64;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $i124: i1;
  var $i125: i64;
  var $i126: i64;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $i130: i1;
  var $i131: i64;
  var $i132: i64;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i64;
  var $i141: i64;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $i146: i32;
  var $p147: ref;
  var $i148: i64;
  var $i149: i64;
  var $p150: ref;
  var $p151: ref;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i32;
  var $i158: i1;
  var $p160: ref;
  var $i161: i32;
  var $i162: i64;
  var $i163: i64;
  var $i164: i1;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i64;
  var $p172: ref;
  var $i173: i64;
  var $p177: ref;
  var $p178: ref;
  var $i179: i32;
  var $i180: i32;
  var $p181: ref;
  var $i184: i32;
  var $i185: i1;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $i189: i32;
  var $i190: i1;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p195: ref;
  var $i196: i32;
  var $i197: i64;
  var $i198: i64;
  var $i199: i1;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $i203: i64;
  var $p207: ref;
  var $i210: i32;
  var $i211: i1;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $i215: i32;
  var $i216: i1;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $i221: i32;
  var $i222: i32;
  var $p223: ref;
  var $i224: i64;
  var $i225: i64;
  var $i226: i64;
  var $i227: i1;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $i231: i64;
  var $p234: ref;
  var $i237: i32;
  var $i238: i1;
  var $p239: ref;
  var $i240: i32;
  var $i241: i32;
  var $p242: ref;
  var $i243: i64;
  var $i244: i1;
  var $i245: i64;
  var $i246: i1;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $i250: i64;
  var $p253: ref;
  var $i256: i32;
  var $i257: i1;
  var $p258: ref;
  var $i259: i32;
  var $i260: i32;
  var $p261: ref;
  var $i262: i64;
  var $i263: i64;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $i267: i32;
  var $i268: i1;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $i272: i32;
  var $i273: i1;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $i278: i64;
  var $i279: i32;
  var $i280: i32;
  var $i281: i1;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $i287: i32;
  var $i288: i1;
  var $p289: ref;
  var $i290: i32;
  var $i291: i32;
  var $p292: ref;
  var $i293: i64;
  var $i294: i1;
  var $p295: ref;
  var $p296: ref;
  var $p297: ref;
  var $i298: i64;
  var $i299: i32;
  var $p301: ref;
  var $i304: i32;
  var $i305: i1;
  var $p306: ref;
  var $i307: i32;
  var $i308: i32;
  var $p309: ref;
  var $i310: i64;
  var $i311: i1;
  var $p312: ref;
  var $p313: ref;
  var $p314: ref;
  var $i315: i64;
  var $i316: i32;
  var $p318: ref;
  var $i321: i32;
  var $i322: i1;
  var $p323: ref;
  var $i324: i32;
  var $i325: i32;
  var $p326: ref;
  var $i327: i64;
  var $i330: i32;
  var $i331: i1;
  var $p333: ref;
  var $p334: ref;
  var $p335: ref;
  var $i336: i32;
  var $i337: i1;
  var $i338: i64;
  var $i339: i1;
  var $i340: i64;
  var $i341: i1;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $p345: ref;
  var $i346: i32;
  var $i347: i32;
  var $p348: ref;
  var $i349: i64;
  var $i350: i32;
  var $p332: ref;
  var $p352: ref;
  var $p353: ref;
  var $p354: ref;
  var $i328: i64;
  var $i329: i32;
  var $i319: i64;
  var $i320: i32;
  var $i302: i64;
  var $i303: i32;
  var $i285: i64;
  var $i286: i32;
  var $i254: i64;
  var $i255: i32;
  var $i235: i64;
  var $i236: i32;
  var $i208: i64;
  var $i209: i32;
  var $i182: i64;
  var $i183: i32;
  var $i83: i64;
  var $i84: i32;
  var $i85: i32;
  var $p86: ref;
  var $i355: i32;
  var $i356: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i64;
  var $i357: i64;
  var $i358: i32;
  var $p359: ref;
  var $i64: i64;
  var $i65: i32;
  var $p66: ref;
  var $i360: i32;
  var $i361: i1;
  var $p363: ref;
  var $i364: i32;
  var $i365: i1;
  var $p367: ref;
  var $i368: i32;
  var $i369: i64;
  var $i370: i64;
  var $p371: ref;
  var $p372: ref;
  var $i373: i32;
  var $i374: i1;
  var $p375: ref;
  var $p376: ref;
  var $p377: ref;
  var $i378: i32;
  var $i379: i1;
  var $p381: ref;
  var $i382: i32;
  var $i383: i1;
  var $p384: ref;
  var $p385: ref;
  var $p386: ref;
  var $i387: i32;
  var $i388: i1;
  var $i389: i1;
  var $p390: ref;
  var $p391: ref;
  var $p392: ref;
  var $p393: ref;
  var $p394: ref;
  var $p395: ref;
  var $i396: i64;
  var $i397: i64;
  var $i398: i64;
  var $p400: ref;
  var $i401: i32;
  var $i402: i64;
  var $i403: i64;
  var $i404: i32;
  var $p406: ref;
  var $p408: ref;
  var $i409: i32;
  var $p411: ref;
  var $p413: ref;
  var $p414: ref;
  var $p415: ref;
  var $i416: i32;
  var $i417: i1;
  var $p418: ref;
  var $p419: ref;
  var $p420: ref;
  var $i421: i32;
  var $i422: i1;
  var $p424: ref;
  var $i425: i32;
  var $p426: ref;
  var $p427: ref;
  var $p428: ref;
  var $i429: i32;
  var $i430: i32;
  var $i431: i64;
  var $i432: i64;
  var $i433: i32;
  var $p435: ref;
  var $i436: i32;
  var $p437: ref;
  var $p438: ref;
  var $p439: ref;
  var $i440: i32;
  var $i441: i32;
  var $i442: i64;
  var $i443: i64;
  var $i444: i1;
  var $p445: ref;
  var $p446: ref;
  var $p447: ref;
  var $i448: i64;
  var $i412: i64;
  var $p450: ref;
  var $p452: ref;
  var $p454: ref;
  var $i14: i32;
  var vslice_dummy_var_13: i32;
  var vslice_dummy_var_14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 342} {:cexpr "parse_raid_params:arg:num_raid_params"} boogie_si_record_i32($i2);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    call {:si_unique_call 343} {:cexpr "sectors_per_dev"} boogie_si_record_i64($i7);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p1);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $i9 := kstrtoul($p8, 10, $p3);
    call {:si_unique_call 345} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.1, $p3);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $i24 := is_power_of_2($i23);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i8($i24);
    call {:si_unique_call 347} {:cexpr "tmp"} boogie_si_record_i8($i25);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.1, $p3);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i33 := $ule.i64($i32, 7);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.1, $p3);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i37);
    call {:si_unique_call 349} {:cexpr "tmp___2"} boogie_si_record_i32($i38);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(420, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i38);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(548, 1));
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i38);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32($i2, 1);
    call {:si_unique_call 350} {:cexpr "num_raid_params"} boogie_si_record_i32($i44);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i48 := $ugt.i32($i47, 0);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i63 := $ult.i32(0, $i44);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i64, $i65, $p66 := 0, 2, .str.35;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $i360 := validate_region_size($p0, $i64);
    call {:si_unique_call 395} {:cexpr "tmp___21"} boogie_si_record_i32($i360);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i361 := $ne.i32($i360, 0);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i361} true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(420, 1));
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i364 := $load.i32($M.0, $p363);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i365 := $ne.i32($i364, 0);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i365} true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    $i370 := $i64;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.0, $p371);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $i373 := dm_set_target_max_io_len($p372, $i370);
    call {:si_unique_call 398} {:cexpr "tmp___22"} boogie_si_record_i32($i373);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i374 := $ne.i32($i373, 0);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    assume {:branchcond $i374} true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p376 := $load.ref($M.0, $p375);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p376, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i378 := $load.i32($M.0, $p377);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i379 := $eq.i32($i378, 10);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i379} true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i379 == 1);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p414 := $load.ref($M.0, $p413);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($p414, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i416 := $load.i32($M.0, $p415);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i417 := $eq.i32($i416, 0);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i417} true;
    goto $bb157, $bb159;

  $bb159:
    assume !($i417 == 1);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $p419 := $load.ref($M.0, $p418);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($p419, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i421 := $load.i32($M.0, $p420);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i422 := $ugt.i32($i421, 1);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i422} true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i422 == 1);
    assume {:verifier.code 0} true;
    $i448 := $i7;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i412 := $i448;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(472, 1));
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p450, $i412);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(392, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p452, 0);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(396, 1));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p454, 1);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb160:
    assume {:verifier.code 0} true;
    assume $i422 == 1;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i425 := $load.i32($M.0, $p424);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p427 := $load.ref($M.0, $p426);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($p427, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i429 := $load.i32($M.0, $p428);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i430 := $sub.i32($i425, $i429);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i431 := $zext.i32.i64($i430);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i432 := $urem.i64($i7, $i431);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i433 := $trunc.i64.i32($i432);
    call {:si_unique_call 404} {:cexpr "_res___0"} boogie_si_record_i32($i433);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i436 := $load.i32($M.0, $p435);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p438 := $load.ref($M.0, $p437);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($p438, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i440 := $load.i32($M.0, $p439);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i441 := $sub.i32($i436, $i440);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i442 := $zext.i32.i64($i441);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i443 := $udiv.i64($i7, $i442);
    call {:si_unique_call 405} {:cexpr "sectors_per_dev"} boogie_si_record_i64($i443);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i444 := $ne.i32($i433, 0);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i444} true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i444 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $i448 := $i443;
    goto $bb165;

  $bb162:
    assume $i444 == 1;
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p446 := $load.ref($M.0, $p445);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($p446, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p447, .str.73);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb157:
    assume {:verifier.code 0} true;
    assume $i417 == 1;
    goto $bb158;

  $bb145:
    assume $i379 == 1;
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i382 := $load.i32($M.0, $p381);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i383 := $ult.i32($i382, $i65);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i383 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $i387 := strcmp(.str.35, $p66);
    call {:si_unique_call 400} {:cexpr "tmp___23"} boogie_si_record_i32($i387);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i388 := $ne.i32($i387, 0);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i388} true;
    goto $bb150, $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    assume !($i388 == 1);
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p394 := $load.ref($M.0, $p393);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p394, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i396 := $load.i64($M.0, $p395);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i397 := $zext.i32.i64($i65);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i398 := $mul.i64($i396, $i397);
    call {:si_unique_call 401} {:cexpr "sectors_per_dev"} boogie_si_record_i64($i398);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i401 := $load.i32($M.0, $p400);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i402 := $sext.i32.i64($i401);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i403 := $udiv.i64($i398, $i402);
    call {:si_unique_call 402} {:cexpr "sectors_per_dev"} boogie_si_record_i64($i403);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i404 := raid10_format_to_md_layout($p66, $i65);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(444, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p406, $i404);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(444, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i409 := $load.i32($M.0, $p408);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(544, 1));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p411, $i409);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i412 := $i403;
    goto $bb156;

  $bb150:
    assume $i388 == 1;
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i389 := $ugt.i32($i65, 2);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i389} true;
    goto $bb153, $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    assume !($i389 == 1);
    goto $bb152;

  $bb153:
    assume $i389 == 1;
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p391 := $load.ref($M.0, $p390);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p391, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p392, .str.72);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb147:
    assume $i383 == 1;
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p385 := $load.ref($M.0, $p384);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p385, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p386, .str.71);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb142:
    assume $i374 == 1;
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb139:
    assume $i365 == 1;
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(420, 1));
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i368 := $load.i32($M.0, $p367);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i369 := $sext.i32.i64($i368);
    call {:si_unique_call 396} {:cexpr "max_io_len"} boogie_si_record_i64($i369);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i370 := $i369;
    goto $bb141;

  $bb136:
    assume $i361 == 1;
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb28:
    assume $i63 == 1;
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p67, $i68, $i69, $i70 := .str.35, 2, 0, 0;
    goto $bb31;

  $bb31:
    call $i71, $i72, $p73, $p74, $i75, $i76, $p78, $p79, $i80, $i81, $p82, $i87, $i88, $p89, $p90, $i91, $i92, $p94, $p95, $i96, $i97, $p98, $i99, $i100, $i104, $i105, $i106, $p107, $p108, $i109, $i110, $p111, $p112, $p113, $i114, $i115, $i119, $i120, $p121, $p122, $i123, $i124, $i125, $i126, $p127, $p128, $i129, $i130, $i131, $i132, $p133, $p134, $i135, $i136, $i140, $i141, $p142, $p143, $p144, $i145, $i146, $p147, $i148, $i149, $p150, $p151, $i152, $i153, $i157, $i158, $p160, $i161, $i162, $i163, $i164, $i168, $p172, $i173, $p177, $p178, $i179, $i180, $p181, $i184, $i185, $p186, $p187, $p188, $i189, $i190, $p195, $i196, $i197, $i198, $i199, $i203, $p207, $i210, $i211, $p212, $p213, $p214, $i215, $i216, $p220, $i221, $i222, $p223, $i224, $i225, $i226, $i227, $i231, $p234, $i237, $i238, $p239, $i240, $i241, $p242, $i243, $i244, $i245, $i246, $i250, $p253, $i256, $i257, $p258, $i259, $i260, $p261, $i262, $i263, $p264, $p265, $p266, $i267, $i268, $p269, $p270, $p271, $i272, $i273, $p277, $i278, $i279, $i280, $i281, $i287, $i288, $p289, $i290, $i291, $p292, $i293, $i294, $i298, $i299, $p301, $i304, $i305, $p306, $i307, $i308, $p309, $i310, $i311, $i315, $i316, $p318, $i321, $i322, $p323, $i324, $i325, $p326, $i327, $i330, $i331, $p333, $p334, $p335, $i336, $i337, $i338, $i339, $i340, $i341, $p345, $i346, $i347, $p348, $i349, $i350, $p332, $i328, $i329, $i319, $i320, $i302, $i303, $i285, $i286, $i254, $i255, $i235, $i236, $i208, $i209, $i182, $i183, $i83, $i84, $i85, $p86, $i355, $i356, $p67, $i68, $i69, $i70, $i357, $i358, $p359 := parse_raid_params_loop_$bb31($p0, $p1, $p3, $i44, $i71, $i72, $p73, $p74, $i75, $i76, $p78, $p79, $i80, $i81, $p82, $i87, $i88, $p89, $p90, $i91, $i92, $p94, $p95, $i96, $i97, $p98, $i99, $i100, $i104, $i105, $i106, $p107, $p108, $i109, $i110, $p111, $p112, $p113, $i114, $i115, $i119, $i120, $p121, $p122, $i123, $i124, $i125, $i126, $p127, $p128, $i129, $i130, $i131, $i132, $p133, $p134, $i135, $i136, $i140, $i141, $p142, $p143, $p144, $i145, $i146, $p147, $i148, $i149, $p150, $p151, $i152, $i153, $i157, $i158, $p160, $i161, $i162, $i163, $i164, $i168, $p172, $i173, $p177, $p178, $i179, $i180, $p181, $i184, $i185, $p186, $p187, $p188, $i189, $i190, $p195, $i196, $i197, $i198, $i199, $i203, $p207, $i210, $i211, $p212, $p213, $p214, $i215, $i216, $p220, $i221, $i222, $p223, $i224, $i225, $i226, $i227, $i231, $p234, $i237, $i238, $p239, $i240, $i241, $p242, $i243, $i244, $i245, $i246, $i250, $p253, $i256, $i257, $p258, $i259, $i260, $p261, $i262, $i263, $p264, $p265, $p266, $i267, $i268, $p269, $p270, $p271, $i272, $i273, $p277, $i278, $i279, $i280, $i281, $i287, $i288, $p289, $i290, $i291, $p292, $i293, $i294, $i298, $i299, $p301, $i304, $i305, $p306, $i307, $i308, $p309, $i310, $i311, $i315, $i316, $p318, $i321, $i322, $p323, $i324, $i325, $p326, $i327, $i330, $i331, $p333, $p334, $p335, $i336, $i337, $i338, $i339, $i340, $i341, $p345, $i346, $i347, $p348, $i349, $i350, $p332, $i328, $i329, $i319, $i320, $i302, $i303, $i285, $i286, $i254, $i255, $i235, $i236, $i208, $i209, $i182, $i183, $i83, $i84, $i85, $p86, $i355, $i356, $p67, $i68, $i69, $i70, $i357, $i358, $p359);
    goto $bb31_last;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i71 := $zext.i32.i64($i69);
    $i72 := $add.i64(1, $i71);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p1, $mul.ref($i72, 8));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $i75 := strcasecmp($p74, .str.40);
    call {:si_unique_call 354} {:cexpr "tmp___3"} boogie_si_record_i32($i75);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 0);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i87 := $zext.i32.i64($i69);
    $i88 := $add.i64(1, $i87);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p1, $mul.ref($i88, 8));
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $i91 := strcasecmp($p90, .str.41);
    call {:si_unique_call 357} {:cexpr "tmp___4"} boogie_si_record_i32($i91);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 0);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i69, 1);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i100 := $uge.i32($i99, $i44);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i69, 1);
    call {:si_unique_call 358} {:cexpr "i"} boogie_si_record_i32($i104);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i105 := $zext.i32.i64($i69);
    $i106 := $add.i64(1, $i105);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p1, $mul.ref($i106, 8));
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $i109 := strcasecmp($p108, .str.43);
    call {:si_unique_call 360} {:cexpr "tmp___9"} boogie_si_record_i32($i109);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 0);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i148 := $zext.i32.i64($i104);
    $i149 := $add.i64(1, $i148);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($p1, $mul.ref($i149, 8));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $i152 := kstrtoul($p151, 10, $p3);
    call {:si_unique_call 368} {:cexpr "tmp___10"} boogie_si_record_i32($i152);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i153 := $slt.i32($i152, 0);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $i157 := strcasecmp($p108, .str.49);
    call {:si_unique_call 370} {:cexpr "tmp___20"} boogie_si_record_i32($i157);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 0);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i158 == 1);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i184 := strcasecmp($p108, .str.51);
    call {:si_unique_call 372} {:cexpr "tmp___19"} boogie_si_record_i32($i184);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 0);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i185 == 1);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $i210 := strcasecmp($p108, .str.54);
    call {:si_unique_call 375} {:cexpr "tmp___18"} boogie_si_record_i32($i210);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 0);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i211 == 1);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $i237 := strcasecmp($p108, .str.57);
    call {:si_unique_call 378} {:cexpr "tmp___17"} boogie_si_record_i32($i237);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 0);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i238 == 1);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $i256 := strcasecmp($p108, .str.59);
    call {:si_unique_call 380} {:cexpr "tmp___16"} boogie_si_record_i32($i256);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i256, 0);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i257 == 1);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $i287 := strcasecmp($p108, .str.62);
    call {:si_unique_call 382} {:cexpr "tmp___15"} boogie_si_record_i32($i287);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i288 := $eq.i32($i287, 0);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i288 == 1);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $i304 := strcasecmp($p108, .str.64);
    call {:si_unique_call 386} {:cexpr "tmp___14"} boogie_si_record_i32($i304);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i305 := $eq.i32($i304, 0);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i305 == 1);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $i321 := strcasecmp($p108, .str.66);
    call {:si_unique_call 388} {:cexpr "tmp___13"} boogie_si_record_i32($i321);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i322 := $eq.i32($i321, 0);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i322 == 1);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $i330 := strcasecmp($p108, .str.67);
    call {:si_unique_call 391} {:cexpr "tmp___12"} boogie_si_record_i32($i330);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i331 := $eq.i32($i330, 0);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p332 := $p108;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    assume !($i331 == 1);
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} vslice_dummy_var_14 := printk.ref.ref(.str.69, $p332);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p353 := $load.ref($M.0, $p352);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p353, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p354, .str.70);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb121:
    assume $i331 == 1;
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p334 := $load.ref($M.0, $p333);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p334, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i336 := $load.i32($M.0, $p335);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i337 := $eq.i32($i336, 10);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p332 := $p108;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    assume !($i337 == 1);
    goto $bb123;

  $bb124:
    assume $i337 == 1;
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i338 := $load.i64($M.1, $p3);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i339 := $ule.i64($i338, 1);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb128;

  $bb128:
    assume !($i339 == 1);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i340 := $load.i64($M.1, $p3);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i341 := $ugt.i64($i340, 255);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i346 := $load.i32($M.0, $p345);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i347 := $or.i32($i346, 512);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p348, $i347);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i349 := $load.i64($M.1, $p3);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i350 := $trunc.i64.i32($i349);
    call {:si_unique_call 393} {:cexpr "raid10_copies"} boogie_si_record_i32($i350);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i328, $i329 := $i70, $i350;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i319, $i320 := $i328, $i329;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i302, $i303 := $i319, $i320;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i285, $i286 := $i302, $i303;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i254, $i255 := $i285, $i286;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i235, $i236 := $i254, $i255;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i208, $i209 := $i235, $i236;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i182, $i183 := $i208, $i209;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i83, $i84, $i85, $p86 := $i182, $i104, $i183, $p67;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i355 := $add.i32($i84, 1);
    call {:si_unique_call 355} {:cexpr "i"} boogie_si_record_i32($i355);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i356 := $ult.i32($i355, $i44);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i357, $i358, $p359 := $i83, $i85, $p86;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i356 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i64, $i65, $p66 := $i357, $i358, $p359;
    goto $bb30;

  $bb133:
    assume $i356 == 1;
    assume {:verifier.code 0} true;
    $p67, $i68, $i69, $i70 := $p86, $i85, $i355, $i83;
    goto $bb133_dummy;

  $bb129:
    assume {:verifier.code 0} true;
    assume $i341 == 1;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p343 := $load.ref($M.0, $p342);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p343, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p344, .str.68);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb126:
    assume {:verifier.code 0} true;
    assume $i339 == 1;
    goto $bb127;

  $bb118:
    assume $i322 == 1;
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i324 := $load.i32($M.0, $p323);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i325 := $or.i32($i324, 256);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p326, $i325);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i327 := $load.i64($M.1, $p3);
    call {:si_unique_call 389} {:cexpr "region_size"} boogie_si_record_i64($i327);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i328, $i329 := $i327, $i68;
    goto $bb120;

  $bb112:
    assume $i305 == 1;
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i307 := $load.i32($M.0, $p306);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i308 := $or.i32($i307, 32);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p309, $i308);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i310 := $load.i64($M.1, $p3);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i311 := $ugt.i64($i310, 2147483647);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $i315 := $load.i64($M.1, $p3);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i316 := $trunc.i64.i32($i315);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(660, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p318, $i316);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i319, $i320 := $i70, $i68;
    goto $bb117;

  $bb114:
    assume $i311 == 1;
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p313 := $load.ref($M.0, $p312);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p313, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p314, .str.65);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb106:
    assume $i288 == 1;
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i290 := $load.i32($M.0, $p289);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i291 := $or.i32($i290, 16);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p292, $i291);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i293 := $load.i64($M.1, $p3);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i294 := $ugt.i64($i293, 2147483647);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i298 := $load.i64($M.1, $p3);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i299 := $trunc.i64.i32($i298);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(656, 1));
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p301, $i299);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i302, $i303 := $i70, $i68;
    goto $bb111;

  $bb108:
    assume $i294 == 1;
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p296 := $load.ref($M.0, $p295);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p296, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p297, .str.63);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb94:
    assume $i257 == 1;
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i259 := $load.i32($M.0, $p258);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i260 := $or.i32($i259, 128);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p261, $i260);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i262 := $load.i64($M.1, $p3);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i263 := $udiv.i64($i262, 2);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p3, $i263);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p265 := $load.ref($M.0, $p264);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p265, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i267 := $load.i32($M.0, $p266);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i268 := $ne.i32($i267, 5);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    assume !($i268 == 1);
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i278 := $load.i64($M.1, $p3);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i279 := $trunc.i64.i32($i278);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $i280 := raid5_set_cache_size($p277, $i279);
    call {:si_unique_call 384} {:cexpr "tmp___11"} boogie_si_record_i32($i280);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i281 := $ne.i32($i280, 0);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i285, $i286 := $i70, $i68;
    goto $bb105;

  $bb102:
    assume $i281 == 1;
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p283, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p284, .str.61);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb96:
    assume $i268 == 1;
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p270 := $load.ref($M.0, $p269);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p270, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i272 := $load.i32($M.0, $p271);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i273 := $ne.i32($i272, 6);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume !($i273 == 1);
    goto $bb98;

  $bb99:
    assume $i273 == 1;
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p275 := $load.ref($M.0, $p274);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p275, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p276, .str.60);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb85:
    assume $i238 == 1;
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i240 := $load.i32($M.0, $p239);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i241 := $or.i32($i240, 8);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p242, $i241);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i243 := $load.i64($M.1, $p3);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i244 := $eq.i64($i243, 0);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb89;

  $bb89:
    assume !($i244 == 1);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i245 := $load.i64($M.1, $p3);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i246 := $slt.i64($i245, 0);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i250 := $load.i64($M.1, $p3);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(1568, 1)), $mul.ref(208, 1));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p253, $i250);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i254, $i255 := $i70, $i68;
    goto $bb93;

  $bb90:
    assume {:verifier.code 0} true;
    assume $i246 == 1;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p248 := $load.ref($M.0, $p247);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p248, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p249, .str.58);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i244 == 1;
    goto $bb88;

  $bb76:
    assume $i211 == 1;
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p213 := $load.ref($M.0, $p212);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p213, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.0, $p214);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i216 := $ne.i32($i215, 1);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i221 := $load.i32($M.0, $p220);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i222 := $or.i32($i221, 64);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p223, $i222);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i224 := $load.i64($M.1, $p3);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i225 := $udiv.i64($i224, 2);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p3, $i225);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i226 := $load.i64($M.1, $p3);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i227 := $ugt.i64($i226, 16383);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i231 := $load.i64($M.1, $p3);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(1568, 1)), $mul.ref(216, 1));
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p234, $i231);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i235, $i236 := $i70, $i68;
    goto $bb84;

  $bb81:
    assume $i227 == 1;
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p229 := $load.ref($M.0, $p228);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p229, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p230, .str.56);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb78:
    assume $i216 == 1;
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p218, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p219, .str.55);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb67:
    assume $i185 == 1;
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p187 := $load.ref($M.0, $p186);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p187, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.0, $p188);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i190 := $ne.i32($i189, 1);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i196 := $load.i32($M.0, $p195);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i197 := $sext.i32.i64($i196);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i198 := $load.i64($M.1, $p3);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i199 := $ule.i64($i197, $i198);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i203 := $load.i64($M.1, $p3);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i203, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} set_bit(4, $p207);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i208, $i209 := $i70, $i68;
    goto $bb75;

  $bb72:
    assume $i199 == 1;
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p201 := $load.ref($M.0, $p200);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p201, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p202, .str.53);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb69:
    assume $i190 == 1;
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p192, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p193, .str.52);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb61:
    assume $i158 == 1;
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.0, $p160);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i162 := $sext.i32.i64($i161);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i163 := $load.i64($M.1, $p3);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i164 := $ule.i64($i162, $i163);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i168 := $load.i64($M.1, $p3);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i168, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} clear_bit(1, $p172);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i173 := $load.i64($M.1, $p3);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i173, 848)), $mul.ref(16, 1)), $mul.ref(528, 1));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p177, 0);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i180 := $or.i32($i179, 4);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p181, $i180);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i182, $i183 := $i70, $i68;
    goto $bb66;

  $bb63:
    assume $i164 == 1;
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.0, $p165);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p166, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p167, .str.50);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb58:
    assume $i153 == 1;
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p155, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p156, .str.48);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb43:
    assume $i110 == 1;
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 10);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i119 := $zext.i32.i64($i104);
    $i120 := $add.i64(1, $i119);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p1, $mul.ref($i120, 8));
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i123 := strcmp(.str.35, $p122);
    call {:si_unique_call 362} {:cexpr "tmp___6"} boogie_si_record_i32($i123);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i124 := $ne.i32($i123, 0);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i140 := $zext.i32.i64($i104);
    $i141 := $add.i64(1, $i140);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($p1, $mul.ref($i141, 8));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i146 := $or.i32($i145, 1024);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p147, $i146);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i83, $i84, $i85, $p86 := $i70, $i104, $i68, $p143;
    goto $bb35;

  $bb48:
    assume $i124 == 1;
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i125 := $zext.i32.i64($i104);
    $i126 := $add.i64(1, $i125);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p1, $mul.ref($i126, 8));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $i129 := strcmp(.str.45, $p128);
    call {:si_unique_call 364} {:cexpr "tmp___7"} boogie_si_record_i32($i129);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb50:
    assume $i130 == 1;
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i131 := $zext.i32.i64($i104);
    $i132 := $add.i64(1, $i131);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p1, $mul.ref($i132, 8));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $i135 := strcmp(.str.46, $p134);
    call {:si_unique_call 366} {:cexpr "tmp___8"} boogie_si_record_i32($i135);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i135, 0);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb52:
    assume $i136 == 1;
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p138, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p139, .str.47);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb45:
    assume $i115 == 1;
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p117, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p118, .str.44);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb40:
    assume $i100 == 1;
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p103, .str.42);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb37:
    assume $i92 == 1;
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(1120, 1));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p94, 0);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i97 := $or.i32($i96, 1);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p98, $i97);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i83, $i84, $i85, $p86 := $i70, $i69, $i68, $p67;
    goto $bb35;

  $bb33:
    assume $i76 == 1;
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(1120, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p78, $sub.i64(0, 1));
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i81 := $or.i32($i80, 2);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, $i81);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i83, $i84, $i85, $p86 := $i70, $i69, $i68, $p67;
    goto $bb35;

  $bb20:
    assume $i48 == 1;
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i49 := 0;
    goto $bb23;

  $bb23:
    call $i50, $p54, $i55, $p59, $i60, $i61, $i62, $i49 := parse_raid_params_loop_$bb23($p0, $p46, $i50, $p54, $i55, $p59, $i60, $i61, $i62, $i49);
    goto $bb23_last;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i50 := $zext.i32.i64($i49);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i50, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} set_bit(1, $p54);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i55 := $zext.i32.i64($i49);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i55, 848)), $mul.ref(16, 1)), $mul.ref(528, 1));
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p59, $sub.i64(0, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i49, 1);
    call {:si_unique_call 352} {:cexpr "i"} boogie_si_record_i32($i60);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p46);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i62 := $ugt.i32($i61, $i60);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i62 == 1);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb25:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i49 := $i60;
    goto $bb25_dummy;

  $bb15:
    assume $i33 == 1;
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, .str.39);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, .str.38);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb12;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.1, $p3);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p3, 0);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} vslice_dummy_var_13 := printk.ref(.str.37);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, .str.36);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb133_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1730;

  $bb25_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1712;
}



const dev_parms: ref;

axiom dev_parms == $sub.ref(0, 229839);

procedure dev_parms($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_parms($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i12: i64;
  var $p16: ref;
  var $i17: i64;
  var $p20: ref;
  var $i21: i64;
  var $p24: ref;
  var $i25: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i1;
  var $i56: i32;
  var $p58: ref;
  var $i59: i64;
  var $p63: ref;
  var $i64: i64;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $i76: i64;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $i83: i64;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i1;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $p128: ref;
  var $p129: ref;
  var $i130: i64;
  var $i131: i1;
  var $i132: i64;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i64;
  var $p143: ref;
  var $i144: i32;
  var $i145: i64;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i64;
  var $p156: ref;
  var $i157: i64;
  var $p161: ref;
  var $p163: ref;
  var $i164: i64;
  var $p168: ref;
  var $i169: i32;
  var $i170: i1;
  var $i171: i32;
  var $i172: i32;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $i173: i32;
  var $p174: ref;
  var $i175: i32;
  var $i176: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i177: i32;
  var $i178: i32;
  var $i6: i32;
  var $i7: i32;
  var $i179: i1;
  var $p181: ref;
  var $p183: ref;
  var $p185: ref;
  var $i186: i1;
  var $p188: ref;
  var $i189: i64;
  var $i190: i1;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i57: i32;
  var vslice_dummy_var_15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 0);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i6, $i7 := 0, 0;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i179 := $ne.i32($i6, 0);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i179 == 1);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i186 := $ne.i32($i7, 0);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i186 == 1);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $r := $i57;
    return;

  $bb44:
    assume $i186 == 1;
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(1120, 1));
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i189 := $load.i64($M.0, $p188);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i190 := $eq.i64($i189, 0);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i190 == 1);
    goto $bb46;

  $bb47:
    assume $i190 == 1;
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} vslice_dummy_var_15 := printk.ref(.str.86);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.0, $p192);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p193, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p194, .str.85);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32(0, 22);
    goto $bb10;

  $bb41:
    assume $i179 == 1;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(396, 1));
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p181, 0);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(392, 1));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p183, 1);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(380, 1));
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p185, 2);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p8, $i9, $i10, $i11 := $p1, 0, 0, 0;
    goto $bb4;

  $bb4:
    call $i12, $p16, $i17, $p20, $i21, $p24, $i25, $p29, $p30, $i31, $p35, $p36, $i37, $i38, $p39, $p40, $p41, $p42, $i43, $p44, $p45, $p46, $i47, $p50, $i51, $p52, $p53, $p54, $i55, $i56, $p58, $i59, $p63, $i64, $p68, $p69, $i70, $i71, $p72, $p73, $i74, $i75, $i76, $p80, $i81, $i82, $i83, $p87, $i88, $i89, $p93, $p94, $p95, $i96, $p99, $p100, $i101, $i102, $p106, $p107, $p108, $p109, $i110, $p111, $p112, $p113, $p114, $i115, $p118, $i119, $i120, $i121, $i125, $p128, $p129, $i130, $i131, $i132, $p135, $p136, $p137, $p138, $i139, $p143, $i144, $i145, $p148, $p149, $p150, $p151, $i152, $p156, $i157, $p161, $p163, $i164, $p168, $i169, $i170, $i171, $i172, $i103, $i104, $i105, $i173, $p174, $i175, $i176, $p8, $i9, $i10, $i11, $i177, $i178 := dev_parms_loop_$bb4($p0, $p3, $i12, $p16, $i17, $p20, $i21, $p24, $i25, $p29, $p30, $i31, $p35, $p36, $i37, $i38, $p39, $p40, $p41, $p42, $i43, $p44, $p45, $p46, $i47, $p50, $i51, $p52, $p53, $p54, $i55, $i56, $p58, $i59, $p63, $i64, $p68, $p69, $i70, $i71, $p72, $p73, $i74, $i75, $i76, $p80, $i81, $i82, $i83, $p87, $i88, $i89, $p93, $p94, $p95, $i96, $p99, $p100, $i101, $i102, $p106, $p107, $p108, $p109, $i110, $p111, $p112, $p113, $p114, $i115, $p118, $i119, $i120, $i121, $i125, $p128, $p129, $i130, $i131, $i132, $p135, $p136, $p137, $p138, $i139, $p143, $i144, $i145, $p148, $p149, $p150, $p151, $i152, $p156, $i157, $p161, $p163, $i164, $p168, $i169, $i170, $i171, $i172, $i103, $i104, $i105, $i173, $p174, $i175, $i176, $p8, $i9, $i10, $i11, $i177, $i178);
    goto $bb4_last;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i9);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i12, 848)), $mul.ref(16, 1)), $mul.ref(516, 1));
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i9);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i9);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i17, 848)), $mul.ref(0, 1));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $0.ref);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i9);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i21, 848)), $mul.ref(8, 1));
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $0.ref);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i9);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i25, 848)), $mul.ref(16, 1)), $mul.ref(88, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, 0);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i9);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i31, 848)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p30);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p8);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $i37 := strcmp($p36, .str.81);
    call {:si_unique_call 407} {:cexpr "tmp___0"} boogie_si_record_i32($i37);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p8, $mul.ref(1, 8));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $i74 := strcmp($p73, .str.81);
    call {:si_unique_call 414} {:cexpr "tmp___2"} boogie_si_record_i32($i74);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 0);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $i110 := dm_table_get_mode($p109);
    call {:si_unique_call 419} {:cexpr "tmp___3"} boogie_si_record_i32($i110);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p8, $mul.ref(1, 8));
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i115 := $sext.i32.i64($i9);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i115, 848)), $mul.ref(8, 1));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $i119 := dm_get_device($p112, $p114, $i110, $p118);
    call {:si_unique_call 421} {:cexpr "ret"} boogie_si_record_i32($i119);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i121 := $i119;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i125 := $sext.i32.i64($i9);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i125, 848)), $mul.ref(0, 1));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i130 := $p2i.ref.i64($p129);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i131 := $ne.i64($i130, 0);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    $i144 := $i11;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i145 := $sext.i32.i64($i9);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i145, 848)), $mul.ref(8, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p149, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i152 := $sext.i32.i64($i9);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i152, 848)), $mul.ref(16, 1)), $mul.ref(48, 1));
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p156, $p151);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i157 := $sext.i32.i64($i9);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i157, 848)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} list_add($p161, $p163);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i164 := $sext.i32.i64($i9);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i164, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $i169 := constant_test_bit(1, $p168);
    call {:si_unique_call 424} {:cexpr "tmp___4"} boogie_si_record_i32($i169);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i169, 0);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    $i172 := $i10;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i103, $i104, $i105 := $i9, $i144, $i172;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i173 := $add.i32($i103, 1);
    call {:si_unique_call 417} {:cexpr "i"} boogie_si_record_i32($i173);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($p8, $mul.ref(2, 8));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.0, $p3);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i176 := $sgt.i32($i175, $i173);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i177, $i178 := $i104, $i105;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i6, $i7 := $i177, $i178;
    goto $bb3;

  $bb38:
    assume $i176 == 1;
    assume {:verifier.code 0} true;
    $p8, $i9, $i10, $i11 := $p174, $i173, $i105, $i104;
    goto $bb38_dummy;

  $bb35:
    assume $i170 == 1;
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i171 := $add.i32($i10, 1);
    call {:si_unique_call 425} {:cexpr "rebuild"} boogie_si_record_i32($i171);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i172 := $i171;
    goto $bb37;

  $bb32:
    assume $i131 == 1;
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i132 := $sext.i32.i64($i9);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i132, 848)), $mul.ref(0, 1));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p136, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i139 := $sext.i32.i64($i9);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i139, 848)), $mul.ref(16, 1)), $mul.ref(40, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p143, $p138);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i144 := 1;
    goto $bb34;

  $bb29:
    assume $i120 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p124, .str.85);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i57 := $i121;
    goto $bb10;

  $bb16:
    assume $i75 == 1;
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i9);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i76, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $i81 := constant_test_bit(1, $p80);
    call {:si_unique_call 416} {:cexpr "tmp___1"} boogie_si_record_i32($i81);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 0);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p95, .str.84);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i96 := $sext.i32.i64($i9);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i96, 848)), $mul.ref(0, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p100);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i103, $i104, $i105 := $i9, $i11, $i10;
    goto $bb27;

  $bb24:
    assume $i102 == 1;
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32(0, 22);
    goto $bb10;

  $bb18:
    assume $i82 == 1;
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i9);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i83, 848)), $mul.ref(16, 1)), $mul.ref(528, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.0, $p87);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i89 := $eq.i64($i88, 0);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb20;

  $bb21:
    assume $i89 == 1;
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p92, .str.83);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32(0, 22);
    goto $bb10;

  $bb6:
    assume $i38 == 1;
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $i43 := dm_table_get_mode($p42);
    call {:si_unique_call 409} {:cexpr "tmp"} boogie_si_record_i32($i43);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p8);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i9);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i47, 848)), $mul.ref(0, 1));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $i51 := dm_get_device($p45, $p46, $i43, $p50);
    call {:si_unique_call 411} {:cexpr "ret"} boogie_si_record_i32($i51);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p54, .str.82);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i51, 0);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i56 := $i51;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $p58 := alloc_pages(208, 0);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i9);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i59, 848)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p63, $p58);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i9);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i64, 848)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i71 := $eq.i64($i70, 0);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i71 == 1;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32(0, 12);
    goto $bb10;

  $bb8:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb10;

  $bb38_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2239;
}



const super_sync: ref;

axiom super_sync == $sub.ref(0, 230871);

procedure super_sync($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation super_sync($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i16: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i27: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i26: i64;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i14: i64;
  var $i15: i32;
  var $i41: i64;
  var $i13: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $p6 := lowmem_page_address($p5);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.2, $p8);
    call {:si_unique_call 428} {:cexpr "failed_devices"} boogie_si_record_i64($i9);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(464, 1));
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 0);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i13 := $i9;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p7);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref(1, 1));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(112, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i45);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i47 := $sub.i64($i46, 60);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.2;
    call {:si_unique_call 434} cmdloc_dummy_var_4 := $memset.i8(cmdloc_dummy_var_3, $p43, 0, $i47, $zext.i32.i64(1), 0 == 1);
    $M.2 := cmdloc_dummy_var_4;
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p48, 1683123524);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p49, 0);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(464, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p52, $i51);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p55, $i54);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(496, 1));
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p56);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p58, $i57);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p59, $i13);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.0, $p60);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p62, $i61);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(1120, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.0, $p63);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p65, $i64);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(440, 1));
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p68, $i67);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(444, 1));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p71, $i70);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(420, 1));
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p74, $i73);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i14, $i15 := $i9, 0;
    goto $bb4;

  $bb4:
    call $i16, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $i27, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i26, $i38, $i39, $i40, $i14, $i15, $i41 := super_sync_loop_$bb4($p2, $p10, $i16, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $i27, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i26, $i38, $i39, $i40, $i14, $i15, $i41);
    goto $bb4_last;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 16), 2144)), $mul.ref(2144, 1)), $mul.ref($i16, 848)), $mul.ref(8, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i15);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 16), 2144)), $mul.ref(2144, 1)), $mul.ref($i27, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i32 := constant_test_bit(0, $p31);
    call {:si_unique_call 431} {:cexpr "tmp___0"} boogie_si_record_i32($i32);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i37 := $i14;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i26 := $i37;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i15, 1);
    call {:si_unique_call 432} {:cexpr "i"} boogie_si_record_i32($i38);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p10);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i40 := $sgt.i32($i39, $i38);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i41 := $i26;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i13 := $i41;
    goto $bb3;

  $bb12:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i14, $i15 := $i26, $i38;
    goto $bb12_dummy;

  $bb9:
    assume $i33 == 1;
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i15);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i35 := $shl.i64(1, $i34);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i36 := $or.i64($i35, $i14);
    call {:si_unique_call 433} {:cexpr "failed_devices"} boogie_si_record_i64($i36);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb11;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i15);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i24 := $shl.i64(1, $i23);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i25 := $or.i64($i24, $i14);
    call {:si_unique_call 429} {:cexpr "failed_devices"} boogie_si_record_i64($i25);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb8;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2437;
}



const analyse_superblocks: ref;

axiom analyse_superblocks == $sub.ref(0, 231903);

procedure analyse_superblocks($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2;



implementation analyse_superblocks($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p40: ref;
  var $p31: ref;
  var $p69: ref;
  var $p70: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p75: ref;
  var $p16: ref;
  var $i76: i64;
  var $i77: i1;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $p93: ref;
  var $i94: i64;
  var $i95: i1;
  var $i97: i64;
  var $i98: i64;
  var $i99: i1;
  var $i100: i32;
  var $i101: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p96: ref;
  var $i78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i12, $i14);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p16 := $0.ref;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p16);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i77 := $eq.i64($i76, 0);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i79 := validate_raid_redundancy($p1);
    call {:si_unique_call 445} {:cexpr "tmp___1"} boogie_si_record_i32($i79);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p84, .str.88);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i85 := super_validate($p1, $p16);
    call {:si_unique_call 447} {:cexpr "tmp___2"} boogie_si_record_i32($i85);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    $p88 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p90, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p91);
    $p93 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p93);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i92, $i94);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i78 := 0;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $r := $i78;
    return;

  $bb46:
    assume $i95 == 1;
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p96 := $p89;
    goto $bb49;

  $bb49:
    call $i97, $i98, $i99, $i100, $i101, $p103, $p104, $p105, $p106, $i107, $i108, $p96 := analyse_superblocks_loop_$bb49($p1, $p16, $i94, $i97, $i98, $i99, $i100, $i101, $p103, $p104, $p105, $p106, $i107, $i108, $p96);
    goto $bb49_last;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p96);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p16);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i97, $i98);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p96, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, $i94);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i108 == 1);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb57:
    assume $i108 == 1;
    assume {:verifier.code 0} true;
    $p96 := $p104;
    goto $bb57_dummy;

  $bb51:
    assume $i99 == 1;
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $i100 := super_validate($p1, $p96);
    call {:si_unique_call 449} {:cexpr "tmp___3"} boogie_si_record_i32($i100);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i101 == 1;
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i78 := $sub.i32(0, 22);
    goto $bb38;

  $bb43:
    assume $i86 == 1;
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i78 := $sub.i32(0, 22);
    goto $bb38;

  $bb40:
    assume $i80 == 1;
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p83, .str.87);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i78 := $sub.i32(0, 22);
    goto $bb38;

  $bb36:
    assume $i77 == 1;
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i78 := 0;
    goto $bb38;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p17, $p18, $p19 := $0.ref, $p9, $p5;
    goto $bb4;

  $bb4:
    call $p20, $p21, $p22, $p23, $i24, $i25, $p26, $p27, $i28, $i29, $i30, $p32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $p41, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $p50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $p58, $p59, $p60, $i61, $i62, $p63, $p64, $p65, $p66, $p67, $p40, $p31, $p69, $p70, $p72, $i73, $i74, $p17, $p18, $p19, $p75 := analyse_superblocks_loop_$bb4($p0, $p1, $i14, $p20, $p21, $p22, $p23, $i24, $i25, $p26, $p27, $i28, $i29, $i30, $p32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $p41, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $p50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $p58, $p59, $p60, $i61, $i62, $p63, $p64, $p65, $p66, $p67, $p40, $p31, $p69, $p70, $p72, $i73, $i74, $p17, $p18, $p19, $p75);
    goto $bb4_last;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 480)), $mul.ref(8, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i24 := i_size_read($p23);
    call {:si_unique_call 436} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $i25 := to_sector($i24);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p19, $mul.ref(0, 832)), $mul.ref(16, 1));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p26, $i25);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 1);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p19, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $i36 := super_load($p19, $p17);
    call {:si_unique_call 439} {:cexpr "ret"} boogie_si_record_i32($i36);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i36, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p19);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p41, $mul.ref($sub.ref(0, 16), 848)), $mul.ref(0, 1));
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p41, $mul.ref($sub.ref(0, 16), 848)), $mul.ref(0, 1));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, $0.ref);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p19, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $0.ref);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p19, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p19, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, $0.ref);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p19, $mul.ref(0, 832)), $mul.ref(72, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 0);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p41, $mul.ref($sub.ref(0, 16), 848)), $mul.ref(8, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p41, $mul.ref($sub.ref(0, 16), 848)), $mul.ref(8, 1));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p65, $0.ref);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p19, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $0.ref);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p19, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} list_del($p67);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p40 := $p17;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p31 := $p40;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p18, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, $i14);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p75 := $p31;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p16 := $p75;
    goto $bb3;

  $bb33:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $p17, $p18, $p19 := $p31, $p70, $p18;
    goto $bb33_dummy;

  $bb29:
    assume $i62 == 1;
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p41, $mul.ref($sub.ref(0, 16), 848)), $mul.ref(8, 1));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} dm_put_device($p0, $p64);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i54 == 1;
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p19, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} put_page($p56);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i46 == 1;
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p41, $mul.ref($sub.ref(0, 16), 848)), $mul.ref(0, 1));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} dm_put_device($p0, $p48);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb16:
    assume $i38 == 1;
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p40 := $p19;
    goto $bb21;

  $bb14:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i36, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb18;

  $bb19:
    assume $i39 == 1;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p40 := $p17;
    goto $bb21;

  $bb10:
    assume $i35 == 1;
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p31 := $p17;
    goto $bb8;

  $bb6:
    assume $i30 == 1;
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p31 := $p17;
    goto $bb8;

  $bb57_dummy:
    assume false;
    return;

  $bb49_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2648;

  $bb33_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2528;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 232935);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 233967);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 234999);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    return;
}



const do_table_event: ref;

axiom do_table_event == $sub.ref(0, 236031);

procedure do_table_event($p0: ref);
  free requires assertsPassed;



implementation do_table_event($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2016), 2144)), $mul.ref(0, 1));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.2, $p5);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} dm_table_event($p6);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    return;
}



const configure_discard_support: ref;

axiom configure_discard_support == $sub.ref(0, 237063);

procedure configure_discard_support($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation configure_discard_support($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i7: i1;
  var $i16: i8;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i22: i64;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $i48: i8;
  var $i49: i1;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i21: i32;
  var $p55: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i60: i1;
  var $p65: ref;
  var $i66: i8;
  var $p67: ref;
  var vslice_dummy_var_16: i32;
  var vslice_dummy_var_17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(81, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 0);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(440, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 4);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(440, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 5);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(440, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 6);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i7 := $i15;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i8($i7);
    call {:si_unique_call 453} {:cexpr "raid456"} boogie_si_record_i8($i16);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i19, 0);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(81, 1));
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, 1);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(440, 1));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 1);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i60 := 1;
    assume {:branchcond $i59} true;
    goto $bb34, $bb36;

  $bb36:
    assume !($i59 == 1);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(440, 1));
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 10);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i60 := $i64;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(82, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i66 := $zext.i1.i8($i60);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, $i66);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, 1);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb35;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb9;

  $bb9:
    call $i22, $p26, $p27, $i28, $i29, $i30, $p34, $p35, $p36, $i37, $i38, $p39, $i40, $i41, $i42, $p44, $i45, $i46, $i47, $i48, $i49, $i52, $i53, $i54, $i21 := configure_discard_support_loop_$bb9($p1, $i16, $p18, $i22, $p26, $p27, $i28, $i29, $i30, $p34, $p35, $p36, $i37, $i38, $p39, $i40, $i41, $i42, $p44, $i45, $i46, $i47, $i48, $i49, $i52, $i53, $i54, $i21);
    goto $bb9_last;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i22, 848)), $mul.ref(16, 1)), $mul.ref(48, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i21);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i30, 848)), $mul.ref(16, 1)), $mul.ref(48, 1));
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $p36 := bdev_get_queue($p35);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i38 == 1);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p36, $mul.ref(0, 4208)), $mul.ref(2504, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $i40 := constant_test_bit(14, $p39);
    call {:si_unique_call 457} {:cexpr "tmp"} boogie_si_record_i32($i40);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i16);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i21, 1);
    call {:si_unique_call 454} {:cexpr "i"} boogie_si_record_i32($i52);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p18);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i54 := $sgt.i32($i53, $i52);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i54 == 1);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb31:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i21 := $i52;
    goto $bb31_dummy;

  $bb22:
    assume $i42 == 1;
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 4208)), $mul.ref(3488, 1)), $mul.ref(73, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i48 := $M.3;
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i8.i1($i48);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i49 == 1);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} vslice_dummy_var_16 := printk.ref(.str.106);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} vslice_dummy_var_17 := printk.ref(.str.107);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb27:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb24:
    assume $i47 == 1;
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18:
    assume $i41 == 1;
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume $i38 == 1;
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb31_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2707;
}



const mddev_lock_nointr: ref;

axiom mddev_lock_nointr == $sub.ref(0, 238095);

procedure mddev_lock_nointr($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation mddev_lock_nointr($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(848, 1));
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} ldv_mutex_lock_18($p1);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;
}



const md_run: ref;

axiom md_run == $sub.ref(0, 239127);

procedure md_run($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation md_run($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 1} true;
    call {:si_unique_call 461} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 462} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mddev_unlock: ref;

axiom mddev_unlock == $sub.ref(0, 240159);

procedure mddev_unlock($p0: ref);
  free requires assertsPassed;



implementation mddev_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    return;
}



const raid_is_congested: ref;

axiom raid_is_congested == $sub.ref(0, 241191);

procedure raid_is_congested($p0: ref, $i1: i32) returns ($r: i32);



const dm_table_add_target_callbacks: ref;

axiom dm_table_add_target_callbacks == $sub.ref(0, 242223);

procedure dm_table_add_target_callbacks($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dm_table_add_target_callbacks($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    return;
}



const mddev_congested: ref;

axiom mddev_congested == $sub.ref(0, 243255);

procedure mddev_congested($p0: ref, $i1: i32) returns ($r: i32);



const ldv_mutex_lock_18: ref;

axiom ldv_mutex_lock_18 == $sub.ref(0, 244287);

procedure ldv_mutex_lock_18($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_lock_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} ldv_mutex_lock_reconfig_mutex_of_mddev($p0);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} mutex_lock($p0);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_reconfig_mutex_of_mddev: ref;

axiom ldv_mutex_lock_reconfig_mutex_of_mddev == $sub.ref(0, 245319);

procedure ldv_mutex_lock_reconfig_mutex_of_mddev($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_lock_reconfig_mutex_of_mddev($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i1 := $M.4;
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.4 := 2;
    call {:si_unique_call 466} {:cexpr "ldv_mutex_reconfig_mutex_of_mddev"} boogie_si_record_i32(2);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} ldv_error();
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 246351);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 247383);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 467} __VERIFIER_error();
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const bdev_get_queue: ref;

axiom bdev_get_queue == $sub.ref(0, 248415);

procedure bdev_get_queue($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation bdev_get_queue($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1752)), $mul.ref(1672, 1));
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const dm_table_event: ref;

axiom dm_table_event == $sub.ref(0, 249447);

procedure dm_table_event($p0: ref);
  free requires assertsPassed;



implementation dm_table_event($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    return;
}



const i_size_read: ref;

axiom i_size_read == $sub.ref(0, 250479);

procedure i_size_read($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation i_size_read($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1000)), $mul.ref(80, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const to_sector: ref;

axiom to_sector == $sub.ref(0, 251511);

procedure to_sector($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation to_sector($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} {:cexpr "to_sector:arg:n"} boogie_si_record_i64($i0);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i1 := $lshr.i64($i0, 9);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const super_load: ref;

axiom super_load == $sub.ref(0, 252543);

procedure super_load($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2;



implementation super_load($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $i50: i32;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $i62: i32;
  var $i15: i32;
  var vslice_dummy_var_18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(104, 1));
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, 0);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $i5 := bdev_logical_block_size($p4);
    call {:si_unique_call 470} {:cexpr "tmp"} boogie_si_record_i16($i5);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(112, 1));
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(112, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i10 := $ule.i32($i9, 59);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i10 == 1);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(112, 1));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, 4096);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(112, 1));
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $i18 := read_disk_sb($p0, $i17);
    call {:si_unique_call 473} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $p22 := lowmem_page_address($p21);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.2, $p24);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 1683123524);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $i37 := constant_test_bit(1, $p36);
    call {:si_unique_call 479} {:cexpr "tmp___1"} boogie_si_record_i32($i37);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p1);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, 0);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p23, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.2, $p53);
    call {:si_unique_call 483} {:cexpr "events_sb"} boogie_si_record_i64($i54);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $p57 := lowmem_page_address($p56);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.2, $p59);
    call {:si_unique_call 485} {:cexpr "events_refsb"} boogie_si_record_i64($i60);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i61 := $ugt.i64($i54, $i60);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i62 := $zext.i1.i32($i61);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i15 := $i62;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb20:
    assume $i52 == 1;
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb6;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p39);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb15;

  $bb16:
    assume $i41 == 1;
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} super_sync($p43, $p0);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} set_bit(10, $p44);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 2096)), $mul.ref(40, 1));
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} set_bit(0, $p47);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p1);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i48, 0);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i32($i49);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i15 := $i50;
    goto $bb6;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} super_sync($p28, $p0);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} set_bit(10, $p29);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 2096)), $mul.ref(40, 1));
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} set_bit(0, $p32);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p1);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i15 := $i35;
    goto $bb6;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i15 := $i18;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} vslice_dummy_var_18 := printk.ref(.str.89);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;
}



const put_page: ref;

axiom put_page == $sub.ref(0, 253575);

procedure put_page($p0: ref);
  free requires assertsPassed;



implementation put_page($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 254607);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    return;
}



const validate_raid_redundancy: ref;

axiom validate_raid_redundancy == $sub.ref(0, 255639);

procedure validate_raid_redundancy($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation validate_raid_redundancy($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i8: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i6: i32;
  var $i7: i32;
  var $i28: i32;
  var $i5: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i64;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $i82: i64;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $i65: i32;
  var $i66: i32;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $p107: ref;
  var $i108: i32;
  var $i109: i1;
  var $i112: i32;
  var $i113: i1;
  var $i114: i1;
  var $i115: i32;
  var $i116: i64;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $i123: i1;
  var $i124: i64;
  var $p128: ref;
  var $i129: i32;
  var $i130: i1;
  var $i131: i32;
  var $i132: i1;
  var $i133: i32;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;
  var $i110: i32;
  var $i111: i32;
  var $i137: i1;
  var $i138: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i32($i3, 0);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i32, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i32, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i32, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i137 := $ne.i32($i5, 0);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i138 := 0;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $r := $i138;
    return;

  $bb93:
    assume $i137 == 1;
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i138 := $sub.i32(0, 22);
    goto $bb95;

  $bb23:
    assume $i36 == 1;
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(444, 1));
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $i52 := raid10_md_layout_to_copies($i51);
    call {:si_unique_call 491} {:cexpr "copies"} boogie_si_record_i32($i52);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i53 := $ult.i32($i5, $i52);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(444, 1));
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $p57 := raid10_md_layout_to_format($i56);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $i58 := strcmp(.str.35, $p57);
    call {:si_unique_call 494} {:cexpr "tmp___2"} boogie_si_record_i32($i58);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i99 := $udiv.i32($i98, $i52);
    call {:si_unique_call 500} {:cexpr "group_size"} boogie_si_record_i32($i99);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i103 := $udiv.i32($i102, $i99);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i104 := $sub.i32($i103, 1);
    call {:si_unique_call 501} {:cexpr "last_group_start"} boogie_si_record_i32($i104);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i105 := $mul.i32($i104, $i99);
    call {:si_unique_call 502} {:cexpr "last_group_start"} boogie_si_record_i32($i105);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i109 := $ugt.i32($i108, 0);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb68:
    assume $i109 == 1;
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i110, $i111 := 0, 0;
    goto $bb71;

  $bb71:
    call $i112, $i113, $i114, $i115, $i116, $p120, $p121, $i122, $i123, $i124, $p128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i110, $i111 := validate_raid_redundancy_loop_$bb71($p0, $i52, $i105, $p107, $i112, $i113, $i114, $i115, $i116, $p120, $p121, $i122, $i123, $i124, $p128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i110, $i111);
    goto $bb71_last;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i112 := $urem.i32($i110, $i52);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 0);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i113 == 1);
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i115 := $i111;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i116 := $zext.i32.i64($i110);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i116, 848)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i122 := $p2i.ref.i64($p121);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i123 := $eq.i64($i122, 0);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i123 == 1);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i124 := $zext.i32.i64($i110);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i124, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i129 := constant_test_bit(1, $p128);
    call {:si_unique_call 504} {:cexpr "tmp___3"} boogie_si_record_i32($i129);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 0);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    $i133 := $i115;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i134 := $add.i32($i110, 1);
    call {:si_unique_call 506} {:cexpr "i"} boogie_si_record_i32($i134);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p107);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i136 := $ugt.i32($i135, $i134);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i136 == 1);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb89:
    assume $i136 == 1;
    assume {:verifier.code 0} true;
    $i110, $i111 := $i134, $i133;
    goto $bb89_dummy;

  $bb82:
    assume $i130 == 1;
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i131 := $add.i32($i115, 1);
    call {:si_unique_call 505} {:cexpr "rebuilds_per_group"} boogie_si_record_i32($i131);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i132 := $uge.i32($i131, $i52);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i133 := $i131;
    goto $bb87;

  $bb84:
    assume $i132 == 1;
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i138 := $sub.i32(0, 22);
    goto $bb95;

  $bb79:
    assume $i123 == 1;
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb73:
    assume $i113 == 1;
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i114 := $ule.i32($i110, $i105);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb75;

  $bb76:
    assume $i114 == 1;
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i115 := 0;
    goto $bb78;

  $bb44:
    assume $i59 == 1;
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i63 := $mul.i32($i62, $i52);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i64 := $ugt.i32($i63, 0);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb46:
    assume $i64 == 1;
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i65, $i66 := 0, 0;
    goto $bb49;

  $bb49:
    call $i67, $i68, $i69, $p71, $i72, $i73, $i74, $p78, $p79, $i80, $i81, $i82, $p86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i65, $i66 := validate_raid_redundancy_loop_$bb49($p0, $i52, $p61, $i67, $i68, $i69, $p71, $i72, $i73, $i74, $p78, $p79, $i80, $i81, $i82, $p86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i65, $i66);
    goto $bb49_last;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i67 := $urem.i32($i65, $i52);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 0);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := $i66;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i73 := $urem.i32($i65, $i72);
    call {:si_unique_call 495} {:cexpr "d"} boogie_si_record_i32($i73);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i74 := $zext.i32.i64($i73);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i74, 848)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i81 := $eq.i64($i80, 0);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i81 == 1);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i82 := $zext.i32.i64($i73);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i82, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $i87 := constant_test_bit(1, $p86);
    call {:si_unique_call 497} {:cexpr "tmp___0"} boogie_si_record_i32($i87);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 0);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i91 := $i69;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i65, 1);
    call {:si_unique_call 499} {:cexpr "i"} boogie_si_record_i32($i92);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p61);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i94 := $mul.i32($i93, $i52);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i95 := $ugt.i32($i94, $i92);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i95 == 1);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb64:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $i65, $i66 := $i92, $i91;
    goto $bb64_dummy;

  $bb57:
    assume $i88 == 1;
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i69, 1);
    call {:si_unique_call 498} {:cexpr "rebuilds_per_group"} boogie_si_record_i32($i89);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i90 := $uge.i32($i89, $i52);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i91 := $i89;
    goto $bb62;

  $bb59:
    assume $i90 == 1;
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb54:
    assume $i81 == 1;
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume $i68 == 1;
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i69 := 0;
    goto $bb53;

  $bb41:
    assume $i53 == 1;
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb21:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i32, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb25;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i48 := $ult.i32($i47, $i5);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb38:
    assume $i48 == 1;
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb16:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i32, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i38 == 1);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i32, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb25;

  $bb31:
    assume $i39 == 1;
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i43 := $ule.i32($i42, $i5);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb33:
    assume $i43 == 1;
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i6, $i7 := 0, 0;
    goto $bb4;

  $bb4:
    call $i8, $p12, $i13, $i14, $i15, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i6, $i7, $i28 := validate_raid_redundancy_loop_$bb4($p0, $p2, $i8, $p12, $i13, $i14, $i15, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i6, $i7, $i28);
    goto $bb4_last;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i6);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i8, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $i13 := constant_test_bit(1, $p12);
    call {:si_unique_call 487} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i14 == 1);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i6);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref($i15, 848)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i7;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i6, 1);
    call {:si_unique_call 489} {:cexpr "i"} boogie_si_record_i32($i25);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p2);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i27 := $ugt.i32($i26, $i25);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i28 := $i24;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i5 := $i28;
    goto $bb3;

  $bb12:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i6, $i7 := $i25, $i24;
    goto $bb12_dummy;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i7, 1);
    call {:si_unique_call 488} {:cexpr "rebuild_cnt"} boogie_si_record_i32($i23);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb11;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb7;

  $bb89_dummy:
    assume false;
    return;

  $bb71_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3040;

  $bb64_dummy:
    assume false;
    return;

  $bb49_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2987;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2921;
}



const super_validate: ref;

axiom super_validate == $sub.ref(0, 256671);

procedure super_validate($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2;



implementation super_validate($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i64;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1));
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $p5 := lowmem_page_address($p4);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(496, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(1568, 1)), $mul.ref(8, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p22, 0);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    $p24 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(1568, 1)), $mul.ref(8, 1));
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 2096)), $mul.ref(1568, 1)), $mul.ref(24, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i25);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $i31 := constant_test_bit(10, $p30);
    call {:si_unique_call 513} {:cexpr "tmp___2"} boogie_si_record_i32($i31);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i41 := constant_test_bit(0, $p40);
    call {:si_unique_call 516} {:cexpr "tmp___3"} boogie_si_record_i32($i41);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} clear_bit(10, $p49);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb17:
    assume $i42 == 1;
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} clear_bit(0, $p43);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} clear_bit(1, $p44);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(524, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i46);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p48, 0);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.2, $p33);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p35, $i34);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, $sub.i64(0, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} clear_bit(1, $p39);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $i18 := to_sector(4096);
    call {:si_unique_call 511} {:cexpr "tmp___1"} boogie_si_record_i64($i18);
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(1568, 1)), $mul.ref(8, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i18);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $i10 := super_init_validation($p2, $p1);
    call {:si_unique_call 509} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb5;
}



const super_init_validation: ref;

axiom super_init_validation == $sub.ref(0, 257703);

procedure super_init_validation($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2;



implementation super_init_validation($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i64;
  var $p73: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i92: i32;
  var $i94: i32;
  var $p97: ref;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i101: i32;
  var $i95: i32;
  var $i96: i32;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $i109: i32;
  var $i110: i32;
  var $i83: i32;
  var $i84: i32;
  var $i111: i1;
  var $p112: ref;
  var $i113: i32;
  var $i114: i1;
  var $p116: ref;
  var $i117: i1;
  var $i119: i1;
  var $p121: ref;
  var $i122: i64;
  var $i123: i1;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i64;
  var $p131: ref;
  var $i132: i64;
  var $i133: i1;
  var $p135: ref;
  var $p136: ref;
  var $i137: i64;
  var $i138: i1;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $i152: i32;
  var $p153: ref;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i32;
  var $i167: i32;
  var $i168: i64;
  var $i169: i64;
  var $i170: i1;
  var $p171: ref;
  var $p172: ref;
  var $p139: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $i178: i64;
  var $i179: i1;
  var $p134: ref;
  var $i24: i32;
  var vslice_dummy_var_19: i32;
  var vslice_dummy_var_20: i32;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i32;
  var vslice_dummy_var_23: i32;
  var vslice_dummy_var_24: i32;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $p6 := lowmem_page_address($p5);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.2, $p8);
    call {:si_unique_call 521} {:cexpr "events_sb"} boogie_si_record_i64($i9);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.2, $p10);
    call {:si_unique_call 522} {:cexpr "failed_devices"} boogie_si_record_i64($i11);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i9, 0);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(496, 1));
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p17, $i16);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.2, $p18);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(440, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i19, $i21);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.2, $p25);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(444, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i26, $i28);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.2, $p50);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(420, 1));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i51, $i53);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 16), 2144)), $mul.ref(2112, 1));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 1);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 16), 2144)), $mul.ref(12, 1));
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 3);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 0);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(24, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i79, $i81);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i83, $i84 := 0, 0;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i84, 0);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i111 == 1);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i83, 0);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i119 == 1);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(1120, 1));
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i122 := $load.i64($M.0, $p121);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i123 := $ne.i64($i122, $sub.i64(0, 1));
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p127);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p128, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i130 := $p2i.ref.i64($p129);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(24, 1));
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i132 := $p2i.ref.i64($p131);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i133 := $ne.i64($i130, $i132);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i133 == 1);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb52:
    assume $i133 == 1;
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p134 := $p127;
    goto $bb55;

  $bb55:
    call $p135, $p136, $i137, $i138, $p140, $p141, $p142, $p143, $p144, $p145, $i146, $i147, $p148, $i149, $i150, $p151, $i152, $p153, $i154, $i155, $p156, $p157, $p158, $i159, $i160, $p164, $i165, $i167, $i168, $i169, $i170, $p171, $p172, $p139, $p174, $p175, $p176, $p177, $i178, $i179, $p134, vslice_dummy_var_31 := super_init_validation_loop_$bb55($p2, $i11, $i132, $p135, $p136, $i137, $i138, $p140, $p141, $p142, $p143, $p144, $p145, $i146, $i147, $p148, $i149, $i150, $p151, $i152, $p153, $i154, $i155, $p156, $p157, $p158, $i159, $i160, $p164, $i165, $i167, $i168, $i169, $i170, $p171, $p172, $p139, $p174, $p175, $p176, $p177, $i178, $i179, $p134, vslice_dummy_var_31);
    goto $bb55_last;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p134, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i137 := $p2i.ref.i64($p136);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i138 := $eq.i64($i137, 0);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p134, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $p142 := lowmem_page_address($p141);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p142);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p143, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p144, 0);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p134, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $i146 := constant_test_bit(10, $p145);
    call {:si_unique_call 550} {:cexpr "tmp___7"} boogie_si_record_i32($i146);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 0);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i147 == 1);
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p172 := $p134;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p139 := $p172;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p139, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.0, $p174);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p175);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p176, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i178 := $p2i.ref.i64($p177);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i179 := $ne.i64($i178, $i132);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i179 == 1);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb76:
    assume $i179 == 1;
    assume {:verifier.code 0} true;
    $p134 := $p175;
    goto $bb76_dummy;

  $bb61:
    assume $i147 == 1;
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p134, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.0, $p148);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i150 := $sge.i32($i149, 0);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i150 == 1);
    goto $bb63;

  $bb64:
    assume $i150 == 1;
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p143, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.2, $p151);
    call {:si_unique_call 551} {:cexpr "role"} boogie_si_record_i32($i152);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p134, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.0, $p153);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, $i152);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i167 := $shl.i32(1, $i152);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i168 := $sext.i32.i64($i167);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i169 := $and.i64($i168, $i11);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i170 := $ne.i64($i169, 0);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p172 := $p134;
    goto $bb75;

  $bb72:
    assume $i170 == 1;
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p134, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} set_bit(0, $p171);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb66:
    assume $i155 == 1;
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 16), 2144)), $mul.ref(2112, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p157, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.0, $p158);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i159, 1);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p134, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.0, $p164);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} vslice_dummy_var_31 := printk.ref.i32.i32(.str.105, $i152, $i165);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb68:
    assume $i160 == 1;
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 16), 2144)), $mul.ref(0, 1));
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, $p161);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p162, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p163, .str.104);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb6;

  $bb57:
    assume $i138 == 1;
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p139 := $p134;
    goto $bb59;

  $bb48:
    assume $i123 == 1;
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} vslice_dummy_var_30 := printk.ref(.str.103);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb6;

  $bb46:
    assume $i119 == 1;
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} vslice_dummy_var_29 := printk.ref(.str.102);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb6;

  $bb37:
    assume $i111 == 1;
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(464, 1));
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, $i83);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i114 == 1);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i83, 0);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb42:
    assume $i117 == 1;
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} vslice_dummy_var_28 := printk.ref(.str.101);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb6;

  $bb39:
    assume $i114 == 1;
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} vslice_dummy_var_27 := printk.ref(.str.100);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(40, 1));
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} set_bit(3, $p116);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb23:
    assume $i82 == 1;
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $p85, $i86, $i87 := $p76, 0, 0;
    goto $bb26;

  $bb26:
    call $p88, $i89, $i90, $p91, $i92, $i94, $p97, $i98, $i99, $i100, $i101, $i95, $i96, $p103, $p104, $p105, $p106, $i107, $i108, $p85, $i86, $i87, $i109, $i110, vslice_dummy_var_26 := super_init_validation_loop_$bb26($i81, $p88, $i89, $i90, $p91, $i92, $i94, $p97, $i98, $i99, $i100, $i101, $i95, $i96, $p103, $p104, $p105, $p106, $i107, $i108, $p85, $i86, $i87, $i109, $i110, vslice_dummy_var_26);
    goto $bb26_last;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p85, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i89 := constant_test_bit(1, $p88);
    call {:si_unique_call 537} {:cexpr "tmp___5"} boogie_si_record_i32($i89);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 0);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i90 == 1);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p85, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $i98 := constant_test_bit(10, $p97);
    call {:si_unique_call 541} {:cexpr "tmp___4"} boogie_si_record_i32($i98);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i101 := $i87;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i95, $i96 := $i101, $i86;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p85, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, $i81);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i109, $i110 := $i95, $i96;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i83, $i84 := $i109, $i110;
    goto $bb25;

  $bb34:
    assume $i108 == 1;
    assume {:verifier.code 0} true;
    $p85, $i86, $i87 := $p104, $i96, $i95;
    goto $bb34_dummy;

  $bb31:
    assume $i99 == 1;
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i87, 1);
    call {:si_unique_call 542} {:cexpr "new_devs"} boogie_si_record_i32($i100);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i101 := $i100;
    goto $bb33;

  $bb28:
    assume $i90 == 1;
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p85, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} vslice_dummy_var_26 := printk.ref.i32(.str.99, $i92);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i86, 1);
    call {:si_unique_call 539} {:cexpr "rebuilds"} boogie_si_record_i32($i94);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i95, $i96 := $i87, $i94;
    goto $bb30;

  $bb20:
    assume $i70 == 1;
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.2, $p71);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(1120, 1));
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p73, $i72);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i60 == 1;
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.2, $p61);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(464, 1));
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i62, $i64);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb16;

  $bb17:
    assume $i65 == 1;
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} vslice_dummy_var_25 := printk.ref(.str.98);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb6;

  $bb11:
    assume $i54 == 1;
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} vslice_dummy_var_24 := printk.ref(.str.97);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb6;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} vslice_dummy_var_20 := printk.ref(.str.93);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.2, $p31);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(444, 1));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} vslice_dummy_var_21 := printk.ref.i32.i32(.str.94, $i32, $i34);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.2, $p36);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $i38 := raid10_md_layout_to_copies($i37);
    call {:si_unique_call 527} {:cexpr "tmp___0"} boogie_si_record_i32($i38);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.2, $p39);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $p41 := raid10_md_layout_to_format($i40);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} vslice_dummy_var_22 := printk.ref.ref.i32(.str.95, $p41, $i38);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(444, 1));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i45 := raid10_md_layout_to_copies($i44);
    call {:si_unique_call 531} {:cexpr "tmp___2"} boogie_si_record_i32($i45);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 2096)), $mul.ref(444, 1));
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $p48 := raid10_md_layout_to_format($i47);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} vslice_dummy_var_23 := printk.ref.ref.i32(.str.96, $p48, $i45);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb6;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} vslice_dummy_var_19 := printk.ref(.str.92);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i9, 0);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb3;

  $bb76_dummy:
    assume false;
    return;

  $bb55_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3337;

  $bb34_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3264;
}



const bdev_logical_block_size: ref;

axiom bdev_logical_block_size == $sub.ref(0, 258735);

procedure bdev_logical_block_size($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation bdev_logical_block_size($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $p1 := bdev_get_queue($p0);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $i2 := queue_logical_block_size($p1);
    call {:si_unique_call 556} {:cexpr "tmp___0"} boogie_si_record_i16($i2);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const read_disk_sb: ref;

axiom read_disk_sb == $sub.ref(0, 259767);

procedure read_disk_sb($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation read_disk_sb($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i13: i32;
  var vslice_dummy_var_32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} {:cexpr "read_disk_sb:arg:size"} boogie_si_record_i32($i1);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 559} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(72, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $i16 := sync_page_io($p0, 0, $i1, $p15, 0, 1);
    call {:si_unique_call 562} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(72, 1));
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 1);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} vslice_dummy_var_32 := printk.ref.i32(.str.91, $i19);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} md_error($p22, $p0);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb7;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    call {:si_unique_call 560} devirtbounce.6(0, .str.90, 791, 12);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call read_disk_sb_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 260799);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 566} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const md_error: ref;

axiom md_error == $sub.ref(0, 261831);

procedure md_error($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation md_error($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    return;
}



const queue_logical_block_size: ref;

axiom queue_logical_block_size == $sub.ref(0, 262863);

procedure queue_logical_block_size($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation queue_logical_block_size($p0: ref) returns ($r: i16)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $i13: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := 512;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4208)), $mul.ref(3488, 1)), $mul.ref(64, 1));
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4208)), $mul.ref(3488, 1)), $mul.ref(64, 1));
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    call {:si_unique_call 567} {:cexpr "retval"} boogie_si_record_i32($i11);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb6;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 263895);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const dm_table_get_mode: ref;

axiom dm_table_get_mode == $sub.ref(0, 264927);

procedure dm_table_get_mode($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_table_get_mode($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 1} true;
    call {:si_unique_call 568} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 569} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dm_get_device: ref;

axiom dm_get_device == $sub.ref(0, 265959);

procedure dm_get_device($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_get_device($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 570} {:cexpr "dm_get_device:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 1} true;
    call {:si_unique_call 571} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 572} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const alloc_pages: ref;

axiom alloc_pages == $sub.ref(0, 266991);

procedure alloc_pages($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_pages($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} {:cexpr "alloc_pages:arg:gfp_mask"} boogie_si_record_i32($i0);
    call {:si_unique_call 574} {:cexpr "alloc_pages:arg:order"} boogie_si_record_i32($i1);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $p2 := alloc_pages_current($i0, $i1);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 268023);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} __list_add($p0, $p1, $p3);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 269055);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    return;
}



const alloc_pages_current: ref;

axiom alloc_pages_current == $sub.ref(0, 270087);

procedure alloc_pages_current($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_pages_current($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} {:cexpr "alloc_pages_current:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 578} {:cexpr "alloc_pages_current:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $p2 := external_alloc();
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 271119);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 1} true;
    call {:si_unique_call 580} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 581} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const is_power_of_2: ref;

axiom is_power_of_2 == $sub.ref(0, 272151);

procedure is_power_of_2($i0: i64) returns ($r: i1);
  free requires assertsPassed;



implementation is_power_of_2($i0: i64) returns ($r: i1)
{
  var $i1: i1;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} {:cexpr "is_power_of_2:arg:n"} boogie_si_record_i64($i0);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i1 := $ne.i64($i0, 0);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i3 := $sub.i64($i0, 1);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, $i0);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    assume {:verifier.code 0} true;
    $i2 := $i5;
    goto $bb3;
}



const raid5_set_cache_size: ref;

axiom raid5_set_cache_size == $sub.ref(0, 273183);

procedure raid5_set_cache_size($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation raid5_set_cache_size($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 583} {:cexpr "raid5_set_cache_size:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 1} true;
    call {:si_unique_call 584} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 585} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const validate_region_size: ref;

axiom validate_region_size == $sub.ref(0, 274215);

procedure validate_region_size($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation validate_region_size($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i1;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i18: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $i36: i8;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i20: i64;
  var $i51: i64;
  var $p54: ref;
  var $i29: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} {:cexpr "validate_region_size:arg:region_size"} boogie_si_record_i64($i1);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i6 := $udiv.i64($i5, 2097152);
    call {:si_unique_call 587} {:cexpr "min_region_size"} boogie_si_record_i64($i6);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i1, 0);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i25 := $ult.i64($i24, $i1);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i30 := $ult.i64($i1, $i6);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $i35 := is_power_of_2($i1);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i8($i35);
    call {:si_unique_call 595} {:cexpr "tmp___0"} boogie_si_record_i8($i36);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($i36);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(420, 1));
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i45);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i47 := $ugt.i64($i46, $i1);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i20 := $i1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i51 := $shl.i64($i20, 9);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(1568, 1)), $mul.ref(200, 1));
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p54, $i51);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb23:
    assume $i47 == 1;
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, .str.80);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb12;

  $bb20:
    assume $i39 == 1;
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, .str.79);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb12;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb19;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} vslice_dummy_var_35 := printk.ref.i64.i64(.str.77, $i1, $i6);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, .str.78);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb12;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, .str.76);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i64($i6, 8192);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} vslice_dummy_var_33 := printk.ref(.str.75);
    assume {:verifier.code 0} true;
    $i18 := 8192;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    goto $bb9;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64($i6, 1);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i10 := $and.i64($i9, $i6);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i16 := $i1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} vslice_dummy_var_34 := printk.ref.i64(.str.74, $i16);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i18 := $i16;
    goto $bb8;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i1);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i13 := fls($i12);
    call {:si_unique_call 590} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i14 := $shl.i32(1, $i13);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    call {:si_unique_call 591} {:cexpr "region_size"} boogie_si_record_i64($i15);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb7;
}



const dm_set_target_max_io_len: ref;

axiom dm_set_target_max_io_len == $sub.ref(0, 275247);

procedure dm_set_target_max_io_len($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dm_set_target_max_io_len($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 596} {:cexpr "dm_set_target_max_io_len:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 1} true;
    call {:si_unique_call 597} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 598} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const raid10_format_to_md_layout: ref;

axiom raid10_format_to_md_layout == $sub.ref(0, 276279);

procedure raid10_format_to_md_layout($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation raid10_format_to_md_layout($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} {:cexpr "raid10_format_to_md_layout:arg:copies"} boogie_si_record_i32($i1);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $i2 := strcasecmp(.str.35, $p0);
    call {:si_unique_call 601} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    call {:si_unique_call 603} {:cexpr "raid10_format_to_md_layout:arg:f"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i4, $i5 := 1, $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $i6 := strcasecmp(.str.46, $p0);
    call {:si_unique_call 605} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $i12 := strcasecmp(.str.45, $p0);
    call {:si_unique_call 607} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i17 := $shl.i32($i5, 8);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, $i4);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i11 := $i18;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i14 := $shl.i32($i5, 8);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i14, $i4);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 131072);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb6;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32($i5, 8);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, $i4);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 196608);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    call {:si_unique_call 602} {:cexpr "raid10_format_to_md_layout:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i4, $i5 := $i1, 1;
    goto $bb3;
}



const fls: ref;

axiom fls == $sub.ref(0, 277311);

procedure fls($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fls($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} {:cexpr "fls:arg:x"} boogie_si_record_i32($i0);
    call {:si_unique_call 609} $i1 := devirtbounce.7(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 610} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 278343);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 279375);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 280407);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 281439);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 614} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const mddev_init: ref;

axiom mddev_init == $sub.ref(0, 282471);

procedure mddev_init($p0: ref);
  free requires assertsPassed;



implementation mddev_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    return;
}



const md_rdev_init: ref;

axiom md_rdev_init == $sub.ref(0, 283503);

procedure md_rdev_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation md_rdev_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 1} true;
    call {:si_unique_call 616} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 617} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 284535);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 619} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 285567);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} {:cexpr "__kmalloc:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 622} {:cexpr "__kmalloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $p2 := external_alloc();
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 286599);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(2012, $i0);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kstrtoull: ref;

axiom kstrtoull == $sub.ref(0, 287631);

procedure kstrtoull($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoull($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 625} {:cexpr "kstrtoull:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 1} true;
    call {:si_unique_call 626} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 627} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 288663);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $p1 := calloc(1, $i0);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 1} true;
    call {:si_unique_call 630} __VERIFIER_assume($i4);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 289695);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 632} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.2;
    call {:si_unique_call 633} cmdloc_dummy_var_6 := $memset.i8(cmdloc_dummy_var_5, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.2 := cmdloc_dummy_var_6;
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const invoke_work_1: ref;

axiom invoke_work_1 == $sub.ref(0, 290727);

procedure invoke_work_1();
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.8, $M.9;



implementation invoke_work_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 1} true;
    call {:si_unique_call 634} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 635} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 636} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} ldv_stop();
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i21 := $M.9;
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i23 := $M.9;
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.9 := 4;
    call {:si_unique_call 646} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(4);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p25 := $M.6;
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} do_table_event($p25);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 648} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i16 := $M.8;
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i18 := $M.8;
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.8 := 4;
    call {:si_unique_call 643} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(4);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p20 := $M.6;
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} do_table_event($p20);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 645} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i11 := $M.7;
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i13 := $M.7;
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.7 := 4;
    call {:si_unique_call 640} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(4);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p15 := $M.6;
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} do_table_event($p15);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 642} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i6 := $M.5;
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i8 := $M.5;
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.5 := 4;
    call {:si_unique_call 637} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(4);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p10 := $M.6;
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} do_table_event($p10);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 639} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 291759);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_target_type_2: ref;

axiom ldv_target_type_2 == $sub.ref(0, 292791);

procedure ldv_target_type_2();
  free requires assertsPassed;
  modifies $M.10, $M.0, $CurrAddr;



implementation ldv_target_type_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $p0 := ldv_init_zalloc(88);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $M.10 := $p0;
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    return;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 293823);

procedure work_init_1();
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.8, $M.9;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $M.5 := 0;
    call {:si_unique_call 651} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 652} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $M.8 := 0;
    call {:si_unique_call 653} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 654} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 294855);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.5, $M.7, $M.8, $M.9, $M.11, $M.12, $M.13, $M.14, $M.15, $M.10, $M.0, $M.16, $M.17, $M.6, $M.4, $M.21, $M.20, $M.19, $M.3, $M.18, $M.26, $CurrAddr, $M.1, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $p127: ref;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $i132: i32;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $i137: i32;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $i142: i32;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $i147: i32;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $i152: i32;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $i173: i32;
  var $i174: i1;
  var $p175: ref;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $i181: i32;
  var $i182: i1;
  var $p183: ref;
  var $i185: i32;
  var $i186: i1;
  var $p187: ref;
  var $i188: i32;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $i193: i32;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $i198: i32;
  var $i200: i32;
  var $i201: i1;
  var $p202: ref;
  var $i203: i32;
  var $i205: i32;
  var $i206: i1;
  var $p207: ref;
  var $i208: i32;
  var $i210: i32;
  var $i211: i1;
  var $p212: ref;
  var $i213: i32;
  var $i214: i1;
  var $p215: ref;
  var $i216: i32;
  var $i217: i32;
  var $i218: i32;
  var $i219: i32;
  var $i220: i1;
  var $p221: ref;
  var $i222: i32;
  var $i223: i32;
  var $i224: i32;
  var $i225: i32;
  var $i226: i1;
  var $p227: ref;
  var $i228: i32;
  var $i229: i32;
  var $i230: i32;
  var $i231: i32;
  var $i232: i1;
  var $p233: ref;
  var $i234: i32;
  var $i235: i32;
  var $i236: i32;
  var $i237: i32;
  var $i238: i1;
  var $p239: ref;
  var $i240: i32;
  var $i241: i32;
  var $i242: i32;
  var $i243: i32;
  var $i244: i1;
  var $p245: ref;
  var $i246: i32;
  var $i247: i1;
  var $p248: ref;
  var $i249: i32;
  var $i250: i1;
  var $i251: i32;
  var $i252: i32;
  var $i253: i1;
  var vslice_dummy_var_36: ref;
  var vslice_dummy_var_37: ref;
  var vslice_dummy_var_38: ref;
  var vslice_dummy_var_39: ref;
  var vslice_dummy_var_40: ref;
  var vslice_dummy_var_41: ref;
  var vslice_dummy_var_42: ref;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;

  $bb0:
    call {:si_unique_call 655} $initialize();
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $p7 := ldv_init_zalloc(1);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $p8 := ldv_init_zalloc(80);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $p10 := ldv_init_zalloc(1);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $p11 := ldv_init_zalloc(136);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $p13 := ldv_init_zalloc(8);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $p15 := ldv_init_zalloc(8);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $p17 := ldv_init_zalloc(32);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $p19 := ldv_init_zalloc(16);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} ldv_initialize();
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p0);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} vslice_dummy_var_36 := ldv_memset($p21, 0, 4);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p1);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} vslice_dummy_var_37 := ldv_memset($p23, 0, 8);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p2);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} vslice_dummy_var_38 := ldv_memset($p25, 0, 4);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p3);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} vslice_dummy_var_39 := ldv_memset($p27, 0, 4);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p4);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} vslice_dummy_var_40 := ldv_memset($p29, 0, 4);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p5);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} vslice_dummy_var_41 := ldv_memset($p31, 0, 4);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p6);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} vslice_dummy_var_42 := ldv_memset($p33, 0, 4);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} work_init_1();
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 681} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $M.12 := 0;
    call {:si_unique_call 682} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 683} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $M.14 := 0;
    call {:si_unique_call 684} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $p77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $p91, $i92, $i93, $i94, $i95, $p96, $i97, $i98, $i99, $i100, $p101, $i102, $i103, $i104, $i105, $p106, $p107, $i109, $i110, $p111, $p112, $i114, $i115, $p116, $p117, $i119, $i120, $p121, $p122, $i124, $i125, $p126, $p127, $i129, $i130, $p131, $i132, $i134, $i135, $p136, $i137, $i139, $i140, $p141, $i142, $i144, $i145, $p146, $i147, $i149, $i150, $p151, $i152, $i154, $i155, $p156, $i157, $i158, $p159, $i160, $i161, $p162, $i163, $i164, $p165, $i166, $i167, $p168, $i169, $i170, $p171, $i173, $i174, $p175, $i177, $i178, $p179, $i181, $i182, $p183, $i185, $i186, $p187, $i188, $i190, $i191, $p192, $i193, $i195, $i196, $p197, $i198, $i200, $i201, $p202, $i203, $i205, $i206, $p207, $i208, $i210, $i211, $p212, $i213, $i214, $p215, $i216, $i217, $i218, $i219, $i220, $p221, $i222, $i223, $i224, $i225, $i226, $p227, $i228, $i229, $i230, $i231, $i232, $p233, $i234, $i235, $i236, $i237, $i238, $p239, $i240, $i241, $i242, $i243, $i244, $p245, $i246, $i247, $p248, $i249, $i250, $i251, $i252, $i253, vslice_dummy_var_43, vslice_dummy_var_44, vslice_dummy_var_45, vslice_dummy_var_46, vslice_dummy_var_47, vslice_dummy_var_48, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51, vslice_dummy_var_52, vslice_dummy_var_53, vslice_dummy_var_54, vslice_dummy_var_55, vslice_dummy_var_56, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p9, $p10, $p12, $p14, $p16, $p18, $p20, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $p77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $p91, $i92, $i93, $i94, $i95, $p96, $i97, $i98, $i99, $i100, $p101, $i102, $i103, $i104, $i105, $p106, $p107, $i109, $i110, $p111, $p112, $i114, $i115, $p116, $p117, $i119, $i120, $p121, $p122, $i124, $i125, $p126, $p127, $i129, $i130, $p131, $i132, $i134, $i135, $p136, $i137, $i139, $i140, $p141, $i142, $i144, $i145, $p146, $i147, $i149, $i150, $p151, $i152, $i154, $i155, $p156, $i157, $i158, $p159, $i160, $i161, $p162, $i163, $i164, $p165, $i166, $i167, $p168, $i169, $i170, $p171, $i173, $i174, $p175, $i177, $i178, $p179, $i181, $i182, $p183, $i185, $i186, $p187, $i188, $i190, $i191, $p192, $i193, $i195, $i196, $p197, $i198, $i200, $i201, $p202, $i203, $i205, $i206, $p207, $i208, $i210, $i211, $p212, $i213, $i214, $p215, $i216, $i217, $i218, $i219, $i220, $p221, $i222, $i223, $i224, $i225, $i226, $p227, $i228, $i229, $i230, $i231, $i232, $p233, $i234, $i235, $i236, $i237, $i238, $p239, $i240, $i241, $i242, $i243, $i244, $p245, $i246, $i247, $p248, $i249, $i250, $i251, $i252, $i253, vslice_dummy_var_43, vslice_dummy_var_44, vslice_dummy_var_45, vslice_dummy_var_46, vslice_dummy_var_47, vslice_dummy_var_48, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51, vslice_dummy_var_52, vslice_dummy_var_53, vslice_dummy_var_54, vslice_dummy_var_55, vslice_dummy_var_56, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i35, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i35, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} ldv_stop();
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  $bb7:
    assume $i38 == 1;
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i59 := $M.14;
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb46:
    assume $i60 == 1;
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 1} true;
    call {:si_unique_call 702} $i61 := __VERIFIER_nondet_int();
    call {:si_unique_call 703} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i61);
    call {:si_unique_call 704} {:cexpr "tmp___9"} boogie_si_record_i32($i61);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i61, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i61, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i61, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i61, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i61, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} ldv_stop();
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb57:
    assume $i66 == 1;
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i249 := $M.14;
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i249, 4);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb191:
    assume $i250 == 1;
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $i251 := ldv_preresume_2();
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $M.17 := $i251;
    call {:si_unique_call 786} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i251);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i252 := $M.17;
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i252, 0);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb193:
    assume $i253 == 1;
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $M.14 := 5;
    call {:si_unique_call 787} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb55:
    assume $i65 == 1;
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i246 := $M.14;
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i246, 5);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb188:
    assume $i247 == 1;
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p248 := $M.10;
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} raid_resume($p248);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $M.14 := 2;
    call {:si_unique_call 784} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb53:
    assume $i64 == 1;
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i243 := $M.14;
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i244 := $eq.i32($i243, 2);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb185:
    assume $i244 == 1;
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $p245 := $M.10;
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} raid_presuspend($p245);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $M.14 := 3;
    call {:si_unique_call 782} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb51:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i61, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i61, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i68 == 1);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i213 := $M.14;
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i214 := $eq.i32($i213, 4);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $i219 := $M.14;
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i220 := $eq.i32($i219, 1);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $i225 := $M.14;
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i226 := $eq.i32($i225, 3);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $i231 := $M.14;
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i232 := $eq.i32($i231, 2);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $i237 := $M.14;
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 5);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb182:
    assume $i238 == 1;
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p239 := $M.10;
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i240 := $load.i32($M.2, $p6);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.2, $p4);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i242 := $load.i32($M.2, $p0);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} raid_status($p239, $i240, $i241, $p10, $i242);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $M.14 := 5;
    call {:si_unique_call 780} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb179:
    assume $i232 == 1;
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p233 := $M.10;
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i234 := $load.i32($M.2, $p6);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i235 := $load.i32($M.2, $p4);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i236 := $load.i32($M.2, $p0);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} raid_status($p233, $i234, $i235, $p10, $i236);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $M.14 := 2;
    call {:si_unique_call 778} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb176:
    assume $i226 == 1;
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $p227 := $M.10;
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i228 := $load.i32($M.2, $p6);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i229 := $load.i32($M.2, $p4);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i230 := $load.i32($M.2, $p0);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} raid_status($p227, $i228, $i229, $p10, $i230);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $M.14 := 3;
    call {:si_unique_call 776} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb173:
    assume $i220 == 1;
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p221 := $M.10;
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i222 := $load.i32($M.2, $p6);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i223 := $load.i32($M.2, $p4);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i224 := $load.i32($M.2, $p0);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} raid_status($p221, $i222, $i223, $p10, $i224);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 774} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb170:
    assume $i214 == 1;
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p215 := $M.10;
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i216 := $load.i32($M.2, $p6);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i217 := $load.i32($M.2, $p4);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i218 := $load.i32($M.2, $p0);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} raid_status($p215, $i216, $i217, $p10, $i218);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $M.14 := 4;
    call {:si_unique_call 772} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb62:
    assume $i68 == 1;
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i210 := $M.14;
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 3);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb167:
    assume $i211 == 1;
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $p212 := $M.10;
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} raid_postsuspend($p212);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $M.14 := 4;
    call {:si_unique_call 770} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb60:
    assume $i67 == 1;
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i185 := $M.14;
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, 4);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $i190 := $M.14;
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 1);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $i195 := $M.14;
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i195, 3);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $i200 := $M.14;
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i200, 2);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i205 := $M.14;
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i205, 5);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb164:
    assume $i206 == 1;
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p207 := $M.10;
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i208 := $load.i32($M.2, $p2);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} vslice_dummy_var_61 := raid_message($p207, $i208, $p14);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $M.14 := 5;
    call {:si_unique_call 768} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb161:
    assume $i201 == 1;
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p202 := $M.10;
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.2, $p2);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} vslice_dummy_var_60 := raid_message($p202, $i203, $p14);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $M.14 := 2;
    call {:si_unique_call 766} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb158:
    assume $i196 == 1;
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $p197 := $M.10;
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i198 := $load.i32($M.2, $p2);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} vslice_dummy_var_59 := raid_message($p197, $i198, $p14);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $M.14 := 3;
    call {:si_unique_call 764} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb155:
    assume $i191 == 1;
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p192 := $M.10;
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.2, $p2);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} vslice_dummy_var_58 := raid_message($p192, $i193, $p14);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 762} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb152:
    assume $i186 == 1;
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $p187 := $M.10;
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i188 := $load.i32($M.2, $p2);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} vslice_dummy_var_57 := raid_message($p187, $i188, $p14);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $M.14 := 4;
    call {:si_unique_call 760} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb49:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i61, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i61, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i61, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i71 == 1);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i169 := $M.14;
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i169, 4);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $i173 := $M.14;
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 3);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $i177 := $M.14;
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i177, 2);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $i181 := $M.14;
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i181, 5);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb149:
    assume $i182 == 1;
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $p183 := $M.10;
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} vslice_dummy_var_56 := raid_map($p183, $p12);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $M.14 := 5;
    call {:si_unique_call 758} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb146:
    assume $i178 == 1;
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p179 := $M.10;
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} vslice_dummy_var_55 := raid_map($p179, $p12);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $M.14 := 2;
    call {:si_unique_call 756} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb143:
    assume $i174 == 1;
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p175 := $M.10;
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} vslice_dummy_var_54 := raid_map($p175, $p12);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $M.14 := 3;
    call {:si_unique_call 754} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb140:
    assume $i170 == 1;
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p171 := $M.10;
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} vslice_dummy_var_53 := raid_map($p171, $p12);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $M.14 := 4;
    call {:si_unique_call 752} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb68:
    assume $i71 == 1;
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i154 := $M.14;
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 4);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $i157 := $M.14;
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 1);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $i160 := $M.14;
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 3);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $i163 := $M.14;
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i163, 2);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $i166 := $M.14;
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 5);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb137:
    assume $i167 == 1;
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p168 := $M.10;
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} raid_io_hints($p168, $p9);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $M.14 := 5;
    call {:si_unique_call 750} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb134:
    assume $i164 == 1;
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p165 := $M.10;
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} raid_io_hints($p165, $p9);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $M.14 := 2;
    call {:si_unique_call 748} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb131:
    assume $i161 == 1;
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p162 := $M.10;
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} raid_io_hints($p162, $p9);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $M.14 := 3;
    call {:si_unique_call 746} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb128:
    assume $i158 == 1;
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p159 := $M.10;
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} raid_io_hints($p159, $p9);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 744} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb125:
    assume $i155 == 1;
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $p156 := $M.10;
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} raid_io_hints($p156, $p9);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $M.14 := 4;
    call {:si_unique_call 742} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb66:
    assume $i70 == 1;
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i129 := $M.14;
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 4);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i134 := $M.14;
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 1);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i139 := $M.14;
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 3);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i144 := $M.14;
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 2);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i149 := $M.14;
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 5);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb122:
    assume $i150 == 1;
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p151 := $M.10;
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.2, $p3);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} vslice_dummy_var_52 := raid_merge($p151, $p18, $p20, $i152);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $M.14 := 5;
    call {:si_unique_call 740} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb119:
    assume $i145 == 1;
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p146 := $M.10;
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.2, $p3);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} vslice_dummy_var_51 := raid_merge($p146, $p18, $p20, $i147);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $M.14 := 2;
    call {:si_unique_call 738} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb116:
    assume $i140 == 1;
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p141 := $M.10;
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.2, $p3);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} vslice_dummy_var_50 := raid_merge($p141, $p18, $p20, $i142);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $M.14 := 3;
    call {:si_unique_call 736} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb113:
    assume $i135 == 1;
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p136 := $M.10;
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.2, $p3);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} vslice_dummy_var_49 := raid_merge($p136, $p18, $p20, $i137);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 734} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb110:
    assume $i130 == 1;
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p131 := $M.10;
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.2, $p3);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} vslice_dummy_var_48 := raid_merge($p131, $p18, $p20, $i132);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $M.14 := 4;
    call {:si_unique_call 732} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb64:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i61, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i61, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i73 == 1);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i104 := $M.14;
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 4);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $i109 := $M.14;
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 1);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i114 := $M.14;
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 3);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i119 := $M.14;
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 2);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i124 := $M.14;
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 5);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb107:
    assume $i125 == 1;
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p126 := $M.10;
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.2, $p1);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} vslice_dummy_var_47 := raid_iterate_devices($p126, $p127, $p7);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $M.14 := 5;
    call {:si_unique_call 730} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb104:
    assume $i120 == 1;
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p121 := $M.10;
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.2, $p1);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} vslice_dummy_var_46 := raid_iterate_devices($p121, $p122, $p7);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $M.14 := 2;
    call {:si_unique_call 728} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb101:
    assume $i115 == 1;
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $p116 := $M.10;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.2, $p1);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} vslice_dummy_var_45 := raid_iterate_devices($p116, $p117, $p7);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $M.14 := 3;
    call {:si_unique_call 726} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb98:
    assume $i110 == 1;
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p111 := $M.10;
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.2, $p1);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} vslice_dummy_var_44 := raid_iterate_devices($p111, $p112, $p7);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 724} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb95:
    assume $i105 == 1;
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p106 := $M.10;
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.2, $p1);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} vslice_dummy_var_43 := raid_iterate_devices($p106, $p107, $p7);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $M.14 := 4;
    call {:si_unique_call 722} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb72:
    assume $i73 == 1;
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i84 := $M.14;
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 4);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i89 := $M.14;
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 3);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i94 := $M.14;
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 2);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i99 := $M.14;
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 5);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb92:
    assume $i100 == 1;
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p101 := $M.10;
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} raid_dtr($p101);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 719} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i102 := $M.12;
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i103 := $sub.i32($i102, 1);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $M.12 := $i103;
    call {:si_unique_call 720} {:cexpr "ref_cnt"} boogie_si_record_i32($i103);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb89:
    assume $i95 == 1;
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p96 := $M.10;
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} raid_dtr($p96);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 716} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i97 := $M.12;
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i98 := $sub.i32($i97, 1);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $M.12 := $i98;
    call {:si_unique_call 717} {:cexpr "ref_cnt"} boogie_si_record_i32($i98);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb86:
    assume $i90 == 1;
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $p91 := $M.10;
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} raid_dtr($p91);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 713} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i92 := $M.12;
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i93 := $sub.i32($i92, 1);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $M.12 := $i93;
    call {:si_unique_call 714} {:cexpr "ref_cnt"} boogie_si_record_i32($i93);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb83:
    assume $i85 == 1;
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $p86 := $M.10;
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} raid_dtr($p86);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 710} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i87 := $M.12;
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i88 := $sub.i32($i87, 1);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $M.12 := $i88;
    call {:si_unique_call 711} {:cexpr "ref_cnt"} boogie_si_record_i32($i88);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb70:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i61, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb59;

  $bb74:
    assume $i74 == 1;
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i75 := $M.14;
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 1);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb76:
    assume $i76 == 1;
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p77 := $M.10;
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.2, $p5);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $i79 := raid_ctr($p77, $i78, $p16);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $M.16 := $i79;
    call {:si_unique_call 706} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i79);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i80 := $M.16;
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 0);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb78:
    assume $i81 == 1;
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $M.14 := 2;
    call {:si_unique_call 707} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i82 := $M.12;
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i82, 1);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $M.12 := $i83;
    call {:si_unique_call 708} {:cexpr "ref_cnt"} boogie_si_record_i32($i83);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    goto $bb80;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i37 == 1;
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i42 := $M.13;
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16:
    assume $i43 == 1;
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 1} true;
    call {:si_unique_call 689} $i44 := __VERIFIER_nondet_int();
    call {:si_unique_call 690} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i44);
    call {:si_unique_call 691} {:cexpr "tmp___8"} boogie_si_record_i32($i44);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i44, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i44, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} ldv_stop();
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb21:
    assume $i46 == 1;
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i52 := $M.13;
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 1);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb34:
    assume $i53 == 1;
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $i54 := dm_raid_init();
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $M.15 := $i54;
    call {:si_unique_call 696} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i54);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i55 := $M.15;
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i57 := $M.15;
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb39:
    assume $i58 == 1;
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $M.13 := 2;
    call {:si_unique_call 700} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} ldv_check_final_state();
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i56 == 1;
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $M.13 := 3;
    call {:si_unique_call 697} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 698} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} ldv_target_type_2();
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb19:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i44, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb23;

  $bb24:
    assume $i47 == 1;
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i48 := $M.13;
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 3);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb26:
    assume $i49 == 1;
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i50 := $M.12;
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 0);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb28;

  $bb29:
    assume $i51 == 1;
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} dm_raid_exit();
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $M.13 := 2;
    call {:si_unique_call 693} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb3:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i35, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb9;

  $bb10:
    assume $i39 == 1;
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i40 := $M.11;
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i41 == 1;
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} invoke_work_1();
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 685} $i35 := __VERIFIER_nondet_int();
    call {:si_unique_call 686} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i35);
    call {:si_unique_call 687} {:cexpr "tmp___7"} boogie_si_record_i32($i35);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 295887);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    return;
}



const dm_raid_exit: ref;

axiom dm_raid_exit == $sub.ref(0, 296919);

procedure dm_raid_exit();
  free requires assertsPassed;



implementation dm_raid_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} dm_unregister_target(raid_target);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    return;
}



const dm_raid_init: ref;

axiom dm_raid_init == $sub.ref(0, 297951);

procedure dm_raid_init() returns ($r: i32);
  free requires assertsPassed;



implementation dm_raid_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i4: i32;
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i0 := $load.i32($M.18, $add.ref($add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(0, 4)));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.18, $add.ref($add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(1, 4)));
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.18, $add.ref($add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(2, 4)));
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} vslice_dummy_var_62 := printk.ref.i32.i32.i32(.str.1, $i0, $i1, $i2);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $i4 := dm_register_target(raid_target);
    call {:si_unique_call 793} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_preresume_2: ref;

axiom ldv_preresume_2 == $sub.ref(0, 298983);

procedure ldv_preresume_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_preresume_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 1} true;
    call {:si_unique_call 794} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 795} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 300015);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i0 := $M.19;
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.20;
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 1);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.21;
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 1);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.4;
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 1);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} ldv_error();
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} ldv_error();
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} ldv_error();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} ldv_error();
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const dm_register_target: ref;

axiom dm_register_target == $sub.ref(0, 301047);

procedure dm_register_target($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_register_target($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 1} true;
    call {:si_unique_call 800} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 801} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dm_unregister_target: ref;

axiom dm_unregister_target == $sub.ref(0, 302079);

procedure dm_unregister_target($p0: ref);
  free requires assertsPassed;



implementation dm_unregister_target($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 303111);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 802} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 1} true;
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 304143);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 305175);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 306207);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 307239);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 308271);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 309303);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 310335);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 311367);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 312399);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 313431);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 314463);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 315495);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 316527);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 1} true;
    call {:si_unique_call 803} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 804} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 805} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 1} true;
    call {:si_unique_call 806} __VERIFIER_assume($i4);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 317559);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 318591);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 319623);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 320655);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 1} true;
    call {:si_unique_call 807} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 808} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 809} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 1} true;
    call {:si_unique_call 810} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 811} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 812} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 1} true;
    call {:si_unique_call 813} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 814} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 815} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 1} true;
    call {:si_unique_call 816} __VERIFIER_assume($i7);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 1} true;
    call {:si_unique_call 817} __VERIFIER_assume($i11);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 321687);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 322719);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 323751);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 324783);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 325815);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 326847);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 327879);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 328911);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 329943);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 330975);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 332007);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 333039);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 334071);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 335103);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 1} true;
    call {:si_unique_call 818} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 819} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 820} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 336135);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 1} true;
    call {:si_unique_call 821} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 822} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 337167);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 338199);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 823} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 824} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 339231);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 340263);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 341295);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 825} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 826} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 1} true;
    call {:si_unique_call 827} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 828} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $p6 := malloc($i5);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 830} cmdloc_dummy_var_8 := $memset.i8(cmdloc_dummy_var_7, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 342327);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 343359);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.4, $M.21, $M.20, $M.19, $M.3, $M.0, $M.18, $M.26;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 831} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.5 := 0;
    call {:si_unique_call 832} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    $M.6 := $0.ref;
    $M.7 := 0;
    call {:si_unique_call 833} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    $M.8 := 0;
    call {:si_unique_call 834} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    $M.9 := 0;
    call {:si_unique_call 835} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.10 := $0.ref;
    $M.11 := 0;
    call {:si_unique_call 836} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.12 := 0;
    call {:si_unique_call 837} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.13 := 0;
    call {:si_unique_call 838} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.14 := 0;
    call {:si_unique_call 839} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.15 := 0;
    call {:si_unique_call 840} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.16 := 0;
    call {:si_unique_call 841} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.17 := 0;
    call {:si_unique_call 842} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.4 := 1;
    call {:si_unique_call 843} {:cexpr "ldv_mutex_reconfig_mutex_of_mddev"} boogie_si_record_i32(1);
    $M.21 := 1;
    call {:si_unique_call 844} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    $M.20 := 1;
    call {:si_unique_call 845} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    $M.19 := 1;
    call {:si_unique_call 846} {:cexpr "ldv_mutex_i_mutex_of_inode"} boogie_si_record_i32(1);
    $M.3 := 0;
    call {:si_unique_call 847} {:cexpr "devices_handle_discard_safely"} boogie_si_record_i8(0);
    $M.0 := $store.ref($M.0, raid_types, .str.11);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(8, 1)), .str.12);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(20, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(28, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(0, 1)), .str.13);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(8, 1)), .str.14);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(20, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(28, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(0, 1)), .str.15);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(8, 1)), .str.16);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(20, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(24, 1)), 10);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(28, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(0, 1)), .str.17);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(8, 1)), .str.18);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(16, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(20, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(24, 1)), 5);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(28, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(0, 1)), .str.19);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(8, 1)), .str.20);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(16, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(20, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(24, 1)), 5);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(28, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(0, 1)), .str.21);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(8, 1)), .str.22);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(16, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(20, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(24, 1)), 5);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(28, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(0, 1)), .str.23);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(8, 1)), .str.24);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(16, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(20, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(24, 1)), 5);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(28, 1)), 2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(0, 1)), .str.25);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(8, 1)), .str.26);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(16, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(20, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(24, 1)), 5);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(28, 1)), 3);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(0, 1)), .str.27);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(8, 1)), .str.28);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(16, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(20, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(24, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(28, 1)), 8);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(0, 1)), .str.29);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(8, 1)), .str.30);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(16, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(20, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(24, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(28, 1)), 9);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(0, 1)), .str.31);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(8, 1)), .str.32);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(16, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(20, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(24, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(raid_types, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(28, 1)), 10);
    $M.18 := $store.i64($M.18, raid_target, 0);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(8, 1)), .str);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(16, 1)), __this_module);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(0, 4)), 1);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(1, 4)), 7);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(2, 4)), 0);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(40, 1)), raid_ctr);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(48, 1)), raid_dtr);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(56, 1)), raid_map);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(64, 1)), $0.ref);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(72, 1)), $0.ref);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(80, 1)), $0.ref);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(88, 1)), $0.ref);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(96, 1)), $0.ref);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(104, 1)), raid_presuspend);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(112, 1)), $0.ref);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(120, 1)), raid_postsuspend);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(128, 1)), $0.ref);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(136, 1)), raid_resume);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(144, 1)), raid_status);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(152, 1)), raid_message);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(160, 1)), $0.ref);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(168, 1)), raid_merge);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(176, 1)), $0.ref);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(184, 1)), raid_iterate_devices);
    $M.18 := $store.ref($M.18, $add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(192, 1)), raid_io_hints);
    $M.18 := $store.ref($M.18, $add.ref($add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1)), $0.ref);
    $M.18 := $store.ref($M.18, $add.ref($add.ref($add.ref(raid_target, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(8, 1)), $0.ref);
    $M.26 := $store.i8($M.26, .str.81, 45);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(.str.81, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    call {:si_unique_call 848} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 344391);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(super_sync, $p0);
    assume {:branchcond $i5} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    $i4 := $eq.ref(raid_io_hints, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 849} raid_io_hints($p1, $p2);
    return;

  $bb3:
    assume $i5 == 1;
    $p3 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 850} super_sync(arg, $p3);
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 345423);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(raid_iterate_devices, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    $p3 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 851} $i4 := raid_iterate_devices($p1, $p2, $p3);
    $r := $i4;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 346455);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 347487);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 348519);

procedure devirtbounce.4(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 349551);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(raid_map, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 852} $i3 := raid_map($p1, $p2);
    $r := $i3;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 350583);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 351615);

procedure devirtbounce.7(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.4, $M.21, $M.20, $M.19, $M.3, $M.0, $M.18, $M.26, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 853} __SMACK_static_init();
    call {:si_unique_call 854} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.2, $M.5, $M.7, $M.8, $M.9, $M.11, $M.12, $M.13, $M.14, $M.15, $M.10, $M.0, $M.16, $M.17, $M.6, $M.4, $M.21, $M.20, $M.19, $M.3, $M.18, $M.26, $CurrAddr, $M.1;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation raid_status_loop_$bb213(in_$p3: ref, in_$i4: i32, in_$p7: ref, in_$p501: ref, in_$i506: i64, in_$p509: ref, in_$p510: ref, in_$i511: i64, in_$i512: i1, in_$i513: i1, in_$i514: i64, in_$p515: ref, in_$i516: i32, in_$i517: i64, in_$i518: i64, in_$p521: ref, in_$p522: ref, in_$p523: ref, in_$p524: ref, in_$i525: i32, in_$i526: i32, in_$i527: i32, in_$i529: i1, in_$i530: i64, in_$p531: ref, in_$i532: i32, in_$i533: i64, in_$i534: i32, in_$i535: i32, in_$i536: i32, in_$i528: i32, in_$i537: i64, in_$p540: ref, in_$p541: ref, in_$i542: i64, in_$i543: i1, in_$i544: i1, in_$i545: i64, in_$p546: ref, in_$i547: i32, in_$i548: i64, in_$i549: i64, in_$p552: ref, in_$p553: ref, in_$p554: ref, in_$p555: ref, in_$i556: i32, in_$i557: i32, in_$i558: i32, in_$i560: i1, in_$i561: i64, in_$p562: ref, in_$i563: i32, in_$i564: i64, in_$i565: i32, in_$i566: i32, in_$i567: i32, in_$i559: i32, in_$i568: i32, in_$i569: i32, in_$i570: i1, in_$i504: i32, in_$i505: i32) returns (out_$i506: i64, out_$p509: ref, out_$p510: ref, out_$i511: i64, out_$i512: i1, out_$i513: i1, out_$i514: i64, out_$p515: ref, out_$i516: i32, out_$i517: i64, out_$i518: i64, out_$p521: ref, out_$p522: ref, out_$p523: ref, out_$p524: ref, out_$i525: i32, out_$i526: i32, out_$i527: i32, out_$i529: i1, out_$i530: i64, out_$p531: ref, out_$i532: i32, out_$i533: i64, out_$i534: i32, out_$i535: i32, out_$i536: i32, out_$i528: i32, out_$i537: i64, out_$p540: ref, out_$p541: ref, out_$i542: i64, out_$i543: i1, out_$i544: i1, out_$i545: i64, out_$p546: ref, out_$i547: i32, out_$i548: i64, out_$i549: i64, out_$p552: ref, out_$p553: ref, out_$p554: ref, out_$p555: ref, out_$i556: i32, out_$i557: i32, out_$i558: i32, out_$i560: i1, out_$i561: i64, out_$p562: ref, out_$i563: i32, out_$i564: i64, out_$i565: i32, out_$i566: i32, out_$i567: i32, out_$i559: i32, out_$i568: i32, out_$i569: i32, out_$i570: i1, out_$i504: i32, out_$i505: i32)
{

  entry:
    out_$i506, out_$p509, out_$p510, out_$i511, out_$i512, out_$i513, out_$i514, out_$p515, out_$i516, out_$i517, out_$i518, out_$p521, out_$p522, out_$p523, out_$p524, out_$i525, out_$i526, out_$i527, out_$i529, out_$i530, out_$p531, out_$i532, out_$i533, out_$i534, out_$i535, out_$i536, out_$i528, out_$i537, out_$p540, out_$p541, out_$i542, out_$i543, out_$i544, out_$i545, out_$p546, out_$i547, out_$i548, out_$i549, out_$p552, out_$p553, out_$p554, out_$p555, out_$i556, out_$i557, out_$i558, out_$i560, out_$i561, out_$p562, out_$i563, out_$i564, out_$i565, out_$i566, out_$i567, out_$i559, out_$i568, out_$i569, out_$i570, out_$i504, out_$i505 := in_$i506, in_$p509, in_$p510, in_$i511, in_$i512, in_$i513, in_$i514, in_$p515, in_$i516, in_$i517, in_$i518, in_$p521, in_$p522, in_$p523, in_$p524, in_$i525, in_$i526, in_$i527, in_$i529, in_$i530, in_$p531, in_$i532, in_$i533, in_$i534, in_$i535, in_$i536, in_$i528, in_$i537, in_$p540, in_$p541, in_$i542, in_$i543, in_$i544, in_$i545, in_$p546, in_$i547, in_$i548, in_$i549, in_$p552, in_$p553, in_$p554, in_$p555, in_$i556, in_$i557, in_$i558, in_$i560, in_$i561, in_$p562, in_$i563, in_$i564, in_$i565, in_$i566, in_$i567, in_$i559, in_$i568, in_$i569, in_$i570, in_$i504, in_$i505;
    goto $bb213, exit;

  $bb213:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_848;

  $bb233:
    assume out_$i570 == 1;
    assume {:verifier.code 0} true;
    out_$i504, out_$i505 := out_$i559, out_$i568;
    goto $bb233_dummy;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    out_$i570 := $sgt.i32(out_$i569, out_$i568);
    goto corral_source_split_917;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    out_$i569 := $load.i32($M.0, in_$p501);
    goto corral_source_split_916;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    out_$i568 := $add.i32(out_$i505, 1);
    call {:si_unique_call 164} {:cexpr "i"} boogie_si_record_i32(out_$i568);
    goto corral_source_split_915;

  $bb229:
    assume {:verifier.code 0} true;
    goto corral_source_split_914;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    out_$i567 := $add.i32(out_$i566, out_$i528);
    call {:si_unique_call 167} {:cexpr "sz"} boogie_si_record_i32(out_$i567);
    assume {:verifier.code 0} true;
    out_$i559 := out_$i567;
    goto $bb229;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    out_$i559 := out_$i558;
    goto $bb229;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    out_$i558 := $add.i32(out_$i557, out_$i528);
    call {:si_unique_call 163} {:cexpr "sz"} boogie_si_record_i32(out_$i558);
    goto corral_source_split_912;

  $bb228:
    assume {:verifier.code 0} true;
    goto corral_source_split_911;

  $bb227:
    assume !(out_$i544 == 1);
    assume {:verifier.code 0} true;
    out_$i557 := 0;
    goto $bb228;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    out_$i557 := out_$i556;
    goto $bb228;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} out_$i556 := scnprintf.ref.i64.ref.ref(out_$p546, out_$i548, .str.121, out_$p555);
    call {:si_unique_call 162} {:cexpr "tmp___62"} boogie_si_record_i32(out_$i556);
    goto corral_source_split_909;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    out_$p555 := $bitcast.ref.ref(out_$p554);
    goto corral_source_split_908;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    out_$p554 := $add.ref($add.ref(out_$p553, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_907;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    out_$p553 := $load.ref($M.0, out_$p552);
    goto corral_source_split_906;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    out_$p552 := $add.ref($add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i549, 848)), $mul.ref(8, 1));
    goto corral_source_split_905;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    out_$i549 := $sext.i32.i64(out_$i505);
    goto corral_source_split_904;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    out_$i548 := $zext.i32.i64(out_$i547);
    goto corral_source_split_903;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    out_$i547 := $sub.i32(in_$i4, out_$i528);
    goto corral_source_split_902;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    out_$p546 := $add.ref(in_$p3, $mul.ref(out_$i545, 1));
    goto corral_source_split_901;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    out_$i545 := $zext.i32.i64(out_$i528);
    goto corral_source_split_900;

  $bb226:
    assume out_$i544 == 1;
    goto corral_source_split_899;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    out_$i544 := $ult.i32(out_$i528, in_$i4);
    goto corral_source_split_894;

  $bb224:
    assume out_$i543 == 1;
    goto corral_source_split_893;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    out_$i543 := $ne.i64(out_$i542, 0);
    goto corral_source_split_882;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    out_$i542 := $p2i.ref.i64(out_$p541);
    goto corral_source_split_881;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    out_$p541 := $load.ref($M.0, out_$p540);
    goto corral_source_split_880;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    out_$p540 := $add.ref($add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i537, 848)), $mul.ref(8, 1));
    goto corral_source_split_879;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    out_$i537 := $sext.i32.i64(out_$i505);
    goto corral_source_split_878;

  $bb220:
    assume {:verifier.code 0} true;
    goto corral_source_split_877;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    out_$i536 := $add.i32(out_$i535, out_$i504);
    call {:si_unique_call 160} {:cexpr "sz"} boogie_si_record_i32(out_$i536);
    assume {:verifier.code 0} true;
    out_$i528 := out_$i536;
    goto $bb220;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    out_$i528 := out_$i527;
    goto $bb220;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    out_$i527 := $add.i32(out_$i526, out_$i504);
    call {:si_unique_call 157} {:cexpr "sz"} boogie_si_record_i32(out_$i527);
    goto corral_source_split_875;

  $bb219:
    assume {:verifier.code 0} true;
    goto corral_source_split_874;

  $bb218:
    assume !(out_$i513 == 1);
    assume {:verifier.code 0} true;
    out_$i526 := 0;
    goto $bb219;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    out_$i526 := out_$i525;
    goto $bb219;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} out_$i525 := scnprintf.ref.i64.ref.ref(out_$p515, out_$i517, .str.121, out_$p524);
    call {:si_unique_call 156} {:cexpr "tmp___58"} boogie_si_record_i32(out_$i525);
    goto corral_source_split_872;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    out_$p524 := $bitcast.ref.ref(out_$p523);
    goto corral_source_split_871;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    out_$p523 := $add.ref($add.ref(out_$p522, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_870;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    out_$p522 := $load.ref($M.0, out_$p521);
    goto corral_source_split_869;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    out_$p521 := $add.ref($add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i518, 848)), $mul.ref(0, 1));
    goto corral_source_split_868;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    out_$i518 := $sext.i32.i64(out_$i505);
    goto corral_source_split_867;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    out_$i517 := $zext.i32.i64(out_$i516);
    goto corral_source_split_866;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    out_$i516 := $sub.i32(in_$i4, out_$i504);
    goto corral_source_split_865;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    out_$p515 := $add.ref(in_$p3, $mul.ref(out_$i514, 1));
    goto corral_source_split_864;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    out_$i514 := $zext.i32.i64(out_$i504);
    goto corral_source_split_863;

  $bb217:
    assume out_$i513 == 1;
    goto corral_source_split_862;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    out_$i513 := $ult.i32(out_$i504, in_$i4);
    goto corral_source_split_857;

  $bb215:
    assume out_$i512 == 1;
    goto corral_source_split_856;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    out_$i512 := $ne.i64(out_$i511, 0);
    goto corral_source_split_854;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    out_$i511 := $p2i.ref.i64(out_$p510);
    goto corral_source_split_853;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    out_$p510 := $load.ref($M.0, out_$p509);
    goto corral_source_split_852;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    out_$p509 := $add.ref($add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i506, 848)), $mul.ref(0, 1));
    goto corral_source_split_851;

  $bb214:
    assume {:verifier.code 0} true;
    out_$i506 := $sext.i32.i64(out_$i505);
    goto corral_source_split_850;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb223:
    assume {:verifier.code 0} true;
    goto corral_source_split_891;

  $bb222:
    assume !(out_$i529 == 1);
    assume {:verifier.code 0} true;
    out_$i535 := 0;
    goto $bb223;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    out_$i535 := out_$i534;
    goto $bb223;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} out_$i534 := scnprintf.ref.i64.ref(out_$p531, out_$i533, .str.137);
    call {:si_unique_call 159} {:cexpr "tmp___60"} boogie_si_record_i32(out_$i534);
    goto corral_source_split_889;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    out_$i533 := $zext.i32.i64(out_$i532);
    goto corral_source_split_888;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    out_$i532 := $sub.i32(in_$i4, out_$i504);
    goto corral_source_split_887;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    out_$p531 := $add.ref(in_$p3, $mul.ref(out_$i530, 1));
    goto corral_source_split_886;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    out_$i530 := $zext.i32.i64(out_$i504);
    goto corral_source_split_885;

  $bb221:
    assume out_$i529 == 1;
    goto corral_source_split_884;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    out_$i529 := $ult.i32(out_$i504, in_$i4);
    goto corral_source_split_860;

  $bb216:
    assume !(out_$i512 == 1);
    goto corral_source_split_859;

  $bb232:
    assume {:verifier.code 0} true;
    goto corral_source_split_926;

  $bb231:
    assume !(out_$i560 == 1);
    assume {:verifier.code 0} true;
    out_$i566 := 0;
    goto $bb232;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    out_$i566 := out_$i565;
    goto $bb232;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} out_$i565 := scnprintf.ref.i64.ref(out_$p562, out_$i564, .str.137);
    call {:si_unique_call 166} {:cexpr "tmp___64"} boogie_si_record_i32(out_$i565);
    goto corral_source_split_924;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    out_$i564 := $zext.i32.i64(out_$i563);
    goto corral_source_split_923;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    out_$i563 := $sub.i32(in_$i4, out_$i528);
    goto corral_source_split_922;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    out_$p562 := $add.ref(in_$p3, $mul.ref(out_$i561, 1));
    goto corral_source_split_921;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    out_$i561 := $zext.i32.i64(out_$i528);
    goto corral_source_split_920;

  $bb230:
    assume out_$i560 == 1;
    goto corral_source_split_919;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    out_$i560 := $ult.i32(out_$i528, in_$i4);
    goto corral_source_split_897;

  $bb225:
    assume !(out_$i543 == 1);
    goto corral_source_split_896;

  $bb233_dummy:
    call {:si_unique_call 1} out_$i506, out_$p509, out_$p510, out_$i511, out_$i512, out_$i513, out_$i514, out_$p515, out_$i516, out_$i517, out_$i518, out_$p521, out_$p522, out_$p523, out_$p524, out_$i525, out_$i526, out_$i527, out_$i529, out_$i530, out_$p531, out_$i532, out_$i533, out_$i534, out_$i535, out_$i536, out_$i528, out_$i537, out_$p540, out_$p541, out_$i542, out_$i543, out_$i544, out_$i545, out_$p546, out_$i547, out_$i548, out_$i549, out_$p552, out_$p553, out_$p554, out_$p555, out_$i556, out_$i557, out_$i558, out_$i560, out_$i561, out_$p562, out_$i563, out_$i564, out_$i565, out_$i566, out_$i567, out_$i559, out_$i568, out_$i569, out_$i570, out_$i504, out_$i505 := raid_status_loop_$bb213(in_$p3, in_$i4, in_$p7, in_$p501, out_$i506, out_$p509, out_$p510, out_$i511, out_$i512, out_$i513, out_$i514, out_$p515, out_$i516, out_$i517, out_$i518, out_$p521, out_$p522, out_$p523, out_$p524, out_$i525, out_$i526, out_$i527, out_$i529, out_$i530, out_$p531, out_$i532, out_$i533, out_$i534, out_$i535, out_$i536, out_$i528, out_$i537, out_$p540, out_$p541, out_$i542, out_$i543, out_$i544, out_$i545, out_$p546, out_$i547, out_$i548, out_$i549, out_$p552, out_$p553, out_$p554, out_$p555, out_$i556, out_$i557, out_$i558, out_$i560, out_$i561, out_$p562, out_$i563, out_$i564, out_$i565, out_$i566, out_$i567, out_$i559, out_$i568, out_$i569, out_$i570, out_$i504, out_$i505);
    return;

  exit:
    return;
}



procedure raid_status_loop_$bb213(in_$p3: ref, in_$i4: i32, in_$p7: ref, in_$p501: ref, in_$i506: i64, in_$p509: ref, in_$p510: ref, in_$i511: i64, in_$i512: i1, in_$i513: i1, in_$i514: i64, in_$p515: ref, in_$i516: i32, in_$i517: i64, in_$i518: i64, in_$p521: ref, in_$p522: ref, in_$p523: ref, in_$p524: ref, in_$i525: i32, in_$i526: i32, in_$i527: i32, in_$i529: i1, in_$i530: i64, in_$p531: ref, in_$i532: i32, in_$i533: i64, in_$i534: i32, in_$i535: i32, in_$i536: i32, in_$i528: i32, in_$i537: i64, in_$p540: ref, in_$p541: ref, in_$i542: i64, in_$i543: i1, in_$i544: i1, in_$i545: i64, in_$p546: ref, in_$i547: i32, in_$i548: i64, in_$i549: i64, in_$p552: ref, in_$p553: ref, in_$p554: ref, in_$p555: ref, in_$i556: i32, in_$i557: i32, in_$i558: i32, in_$i560: i1, in_$i561: i64, in_$p562: ref, in_$i563: i32, in_$i564: i64, in_$i565: i32, in_$i566: i32, in_$i567: i32, in_$i559: i32, in_$i568: i32, in_$i569: i32, in_$i570: i1, in_$i504: i32, in_$i505: i32) returns (out_$i506: i64, out_$p509: ref, out_$p510: ref, out_$i511: i64, out_$i512: i1, out_$i513: i1, out_$i514: i64, out_$p515: ref, out_$i516: i32, out_$i517: i64, out_$i518: i64, out_$p521: ref, out_$p522: ref, out_$p523: ref, out_$p524: ref, out_$i525: i32, out_$i526: i32, out_$i527: i32, out_$i529: i1, out_$i530: i64, out_$p531: ref, out_$i532: i32, out_$i533: i64, out_$i534: i32, out_$i535: i32, out_$i536: i32, out_$i528: i32, out_$i537: i64, out_$p540: ref, out_$p541: ref, out_$i542: i64, out_$i543: i1, out_$i544: i1, out_$i545: i64, out_$p546: ref, out_$i547: i32, out_$i548: i64, out_$i549: i64, out_$p552: ref, out_$p553: ref, out_$p554: ref, out_$p555: ref, out_$i556: i32, out_$i557: i32, out_$i558: i32, out_$i560: i1, out_$i561: i64, out_$p562: ref, out_$i563: i32, out_$i564: i64, out_$i565: i32, out_$i566: i32, out_$i567: i32, out_$i559: i32, out_$i568: i32, out_$i569: i32, out_$i570: i1, out_$i504: i32, out_$i505: i32);



implementation raid_status_loop_$bb160(in_$p3: ref, in_$i4: i32, in_$p7: ref, in_$p363: ref, in_$i369: i64, in_$p372: ref, in_$p373: ref, in_$i374: i64, in_$i375: i1, in_$i376: i64, in_$p380: ref, in_$i381: i32, in_$i382: i1, in_$i383: i1, in_$i384: i64, in_$p385: ref, in_$i386: i32, in_$i387: i64, in_$i388: i32, in_$i389: i32, in_$i390: i32, in_$i391: i32, in_$i392: i32, in_$i393: i32, in_$i394: i32, in_$i395: i1, in_$i367: i32, in_$i368: i32, in_$i396: i32) returns (out_$i369: i64, out_$p372: ref, out_$p373: ref, out_$i374: i64, out_$i375: i1, out_$i376: i64, out_$p380: ref, out_$i381: i32, out_$i382: i1, out_$i383: i1, out_$i384: i64, out_$p385: ref, out_$i386: i32, out_$i387: i64, out_$i388: i32, out_$i389: i32, out_$i390: i32, out_$i391: i32, out_$i392: i32, out_$i393: i32, out_$i394: i32, out_$i395: i1, out_$i367: i32, out_$i368: i32, out_$i396: i32)
{

  entry:
    out_$i369, out_$p372, out_$p373, out_$i374, out_$i375, out_$i376, out_$p380, out_$i381, out_$i382, out_$i383, out_$i384, out_$p385, out_$i386, out_$i387, out_$i388, out_$i389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i367, out_$i368, out_$i396 := in_$i369, in_$p372, in_$p373, in_$i374, in_$i375, in_$i376, in_$p380, in_$i381, in_$i382, in_$i383, in_$i384, in_$p385, in_$i386, in_$i387, in_$i388, in_$i389, in_$i390, in_$i391, in_$i392, in_$i393, in_$i394, in_$i395, in_$i367, in_$i368, in_$i396;
    goto $bb160, exit;

  $bb160:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_673;

  $bb171:
    assume out_$i395 == 1;
    assume {:verifier.code 0} true;
    out_$i367, out_$i368 := out_$i392, out_$i393;
    goto $bb171_dummy;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    out_$i396 := out_$i392;
    assume true;
    goto $bb171;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    out_$i395 := $sgt.i32(out_$i394, out_$i393);
    goto corral_source_split_705;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    out_$i394 := $load.i32($M.0, in_$p363);
    goto corral_source_split_704;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    out_$i393 := $add.i32(out_$i368, 1);
    call {:si_unique_call 133} {:cexpr "i"} boogie_si_record_i32(out_$i393);
    goto corral_source_split_703;

  $bb170:
    assume {:verifier.code 0} true;
    goto corral_source_split_702;

  $bb163:
    assume !(out_$i375 == 1);
    assume {:verifier.code 0} true;
    out_$i392 := out_$i367;
    goto $bb170;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    out_$i392 := out_$i391;
    goto $bb170;

  $bb169:
    assume {:verifier.code 0} true;
    goto corral_source_split_700;

  $bb165:
    assume !(out_$i382 == 1);
    assume {:verifier.code 0} true;
    out_$i391 := out_$i367;
    goto $bb169;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    out_$i391 := out_$i390;
    goto $bb169;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    out_$i390 := $add.i32(out_$i389, out_$i367);
    call {:si_unique_call 132} {:cexpr "sz"} boogie_si_record_i32(out_$i390);
    goto corral_source_split_698;

  $bb168:
    assume {:verifier.code 0} true;
    goto corral_source_split_697;

  $bb167:
    assume !(out_$i383 == 1);
    assume {:verifier.code 0} true;
    out_$i389 := 0;
    goto $bb168;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    out_$i389 := out_$i388;
    goto $bb168;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} out_$i388 := scnprintf.ref.i64.ref.i32(out_$p385, out_$i387, .str.130, out_$i368);
    call {:si_unique_call 131} {:cexpr "tmp___41"} boogie_si_record_i32(out_$i388);
    goto corral_source_split_695;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    out_$i387 := $zext.i32.i64(out_$i386);
    goto corral_source_split_694;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    out_$i386 := $sub.i32(in_$i4, out_$i367);
    goto corral_source_split_693;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    out_$p385 := $add.ref(in_$p3, $mul.ref(out_$i384, 1));
    goto corral_source_split_692;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    out_$i384 := $zext.i32.i64(out_$i367);
    goto corral_source_split_691;

  $bb166:
    assume out_$i383 == 1;
    goto corral_source_split_690;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    out_$i383 := $ult.i32(out_$i367, in_$i4);
    goto corral_source_split_688;

  $bb164:
    assume out_$i382 == 1;
    goto corral_source_split_687;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    out_$i382 := $ne.i32(out_$i381, 0);
    goto corral_source_split_685;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} out_$i381 := constant_test_bit(4, out_$p380);
    call {:si_unique_call 129} {:cexpr "tmp___43"} boogie_si_record_i32(out_$i381);
    goto corral_source_split_684;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    out_$p380 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i376, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_683;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    out_$i376 := $sext.i32.i64(out_$i368);
    goto corral_source_split_682;

  $bb162:
    assume out_$i375 == 1;
    goto corral_source_split_681;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    out_$i375 := $ne.i64(out_$i374, 0);
    goto corral_source_split_679;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    out_$i374 := $p2i.ref.i64(out_$p373);
    goto corral_source_split_678;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    out_$p373 := $load.ref($M.0, out_$p372);
    goto corral_source_split_677;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    out_$p372 := $add.ref($add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i369, 848)), $mul.ref(8, 1));
    goto corral_source_split_676;

  $bb161:
    assume {:verifier.code 0} true;
    out_$i369 := $sext.i32.i64(out_$i368);
    goto corral_source_split_675;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb171_dummy:
    call {:si_unique_call 1} out_$i369, out_$p372, out_$p373, out_$i374, out_$i375, out_$i376, out_$p380, out_$i381, out_$i382, out_$i383, out_$i384, out_$p385, out_$i386, out_$i387, out_$i388, out_$i389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i367, out_$i368, out_$i396 := raid_status_loop_$bb160(in_$p3, in_$i4, in_$p7, in_$p363, out_$i369, out_$p372, out_$p373, out_$i374, out_$i375, out_$i376, out_$p380, out_$i381, out_$i382, out_$i383, out_$i384, out_$p385, out_$i386, out_$i387, out_$i388, out_$i389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i367, out_$i368, out_$i396);
    return;

  exit:
    return;
}



procedure raid_status_loop_$bb160(in_$p3: ref, in_$i4: i32, in_$p7: ref, in_$p363: ref, in_$i369: i64, in_$p372: ref, in_$p373: ref, in_$i374: i64, in_$i375: i1, in_$i376: i64, in_$p380: ref, in_$i381: i32, in_$i382: i1, in_$i383: i1, in_$i384: i64, in_$p385: ref, in_$i386: i32, in_$i387: i64, in_$i388: i32, in_$i389: i32, in_$i390: i32, in_$i391: i32, in_$i392: i32, in_$i393: i32, in_$i394: i32, in_$i395: i1, in_$i367: i32, in_$i368: i32, in_$i396: i32) returns (out_$i369: i64, out_$p372: ref, out_$p373: ref, out_$i374: i64, out_$i375: i1, out_$i376: i64, out_$p380: ref, out_$i381: i32, out_$i382: i1, out_$i383: i1, out_$i384: i64, out_$p385: ref, out_$i386: i32, out_$i387: i64, out_$i388: i32, out_$i389: i32, out_$i390: i32, out_$i391: i32, out_$i392: i32, out_$i393: i32, out_$i394: i32, out_$i395: i1, out_$i367: i32, out_$i368: i32, out_$i396: i32);



implementation raid_status_loop_$bb122(in_$p3: ref, in_$i4: i32, in_$p7: ref, in_$p275: ref, in_$p281: ref, in_$i282: i32, in_$i283: i32, in_$i284: i1, in_$i285: i64, in_$p288: ref, in_$p289: ref, in_$i290: i64, in_$i291: i1, in_$i292: i64, in_$p296: ref, in_$i297: i32, in_$i298: i1, in_$i299: i1, in_$i300: i64, in_$p301: ref, in_$i302: i32, in_$i303: i64, in_$i304: i32, in_$i305: i32, in_$i306: i32, in_$i307: i32, in_$i308: i32, in_$i309: i32, in_$i310: i32, in_$i311: i1, in_$i279: i32, in_$i280: i32, in_$i312: i32) returns (out_$p281: ref, out_$i282: i32, out_$i283: i32, out_$i284: i1, out_$i285: i64, out_$p288: ref, out_$p289: ref, out_$i290: i64, out_$i291: i1, out_$i292: i64, out_$p296: ref, out_$i297: i32, out_$i298: i1, out_$i299: i1, out_$i300: i64, out_$p301: ref, out_$i302: i32, out_$i303: i64, out_$i304: i32, out_$i305: i32, out_$i306: i32, out_$i307: i32, out_$i308: i32, out_$i309: i32, out_$i310: i32, out_$i311: i1, out_$i279: i32, out_$i280: i32, out_$i312: i32)
{

  entry:
    out_$p281, out_$i282, out_$i283, out_$i284, out_$i285, out_$p288, out_$p289, out_$i290, out_$i291, out_$i292, out_$p296, out_$i297, out_$i298, out_$i299, out_$i300, out_$p301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i279, out_$i280, out_$i312 := in_$p281, in_$i282, in_$i283, in_$i284, in_$i285, in_$p288, in_$p289, in_$i290, in_$i291, in_$i292, in_$p296, in_$i297, in_$i298, in_$i299, in_$i300, in_$p301, in_$i302, in_$i303, in_$i304, in_$i305, in_$i306, in_$i307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i279, in_$i280, in_$i312;
    goto $bb122, exit;

  $bb122:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_562;

  $bb136:
    assume out_$i311 == 1;
    assume {:verifier.code 0} true;
    out_$i279, out_$i280 := out_$i308, out_$i309;
    goto $bb136_dummy;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    out_$i312 := out_$i308;
    assume true;
    goto $bb136;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    out_$i311 := $sgt.i32(out_$i310, out_$i309);
    goto corral_source_split_600;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    out_$i310 := $load.i32($M.0, in_$p275);
    goto corral_source_split_599;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    out_$i309 := $add.i32(out_$i280, 1);
    call {:si_unique_call 118} {:cexpr "i"} boogie_si_record_i32(out_$i309);
    goto corral_source_split_598;

  $bb135:
    assume {:verifier.code 0} true;
    goto corral_source_split_597;

  $bb126:
    assume {:verifier.code 0} true;
    out_$i308 := out_$i279;
    goto $bb135;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    out_$i308 := out_$i307;
    goto $bb135;

  $bb134:
    assume {:verifier.code 0} true;
    goto corral_source_split_595;

  $bb130:
    assume !(out_$i298 == 1);
    assume {:verifier.code 0} true;
    out_$i307 := out_$i279;
    goto $bb134;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    out_$i307 := out_$i306;
    goto $bb134;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    out_$i306 := $add.i32(out_$i305, out_$i279);
    call {:si_unique_call 117} {:cexpr "sz"} boogie_si_record_i32(out_$i306);
    goto corral_source_split_593;

  $bb133:
    assume {:verifier.code 0} true;
    goto corral_source_split_592;

  $bb132:
    assume !(out_$i299 == 1);
    assume {:verifier.code 0} true;
    out_$i305 := 0;
    goto $bb133;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    out_$i305 := out_$i304;
    goto $bb133;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} out_$i304 := scnprintf.ref.i64.ref.i32(out_$p301, out_$i303, .str.126, out_$i280);
    call {:si_unique_call 116} {:cexpr "tmp___32"} boogie_si_record_i32(out_$i304);
    goto corral_source_split_590;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    out_$i303 := $zext.i32.i64(out_$i302);
    goto corral_source_split_589;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    out_$i302 := $sub.i32(in_$i4, out_$i279);
    goto corral_source_split_588;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    out_$p301 := $add.ref(in_$p3, $mul.ref(out_$i300, 1));
    goto corral_source_split_587;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    out_$i300 := $zext.i32.i64(out_$i279);
    goto corral_source_split_586;

  $bb131:
    assume out_$i299 == 1;
    goto corral_source_split_585;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    out_$i299 := $ult.i32(out_$i279, in_$i4);
    goto corral_source_split_583;

  $bb129:
    assume out_$i298 == 1;
    goto corral_source_split_582;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    out_$i298 := $eq.i32(out_$i297, 0);
    goto corral_source_split_580;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} out_$i297 := constant_test_bit(1, out_$p296);
    call {:si_unique_call 114} {:cexpr "tmp___34"} boogie_si_record_i32(out_$i297);
    goto corral_source_split_579;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    out_$p296 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i292, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_578;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    out_$i292 := $sext.i32.i64(out_$i280);
    goto corral_source_split_577;

  $bb127:
    assume out_$i291 == 1;
    goto corral_source_split_576;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    out_$i291 := $ne.i64(out_$i290, 0);
    goto corral_source_split_574;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    out_$i290 := $p2i.ref.i64(out_$p289);
    goto corral_source_split_573;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    out_$p289 := $load.ref($M.0, out_$p288);
    goto corral_source_split_572;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    out_$p288 := $add.ref($add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i285, 848)), $mul.ref(8, 1));
    goto corral_source_split_571;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    out_$i285 := $sext.i32.i64(out_$i280);
    goto corral_source_split_570;

  $bb124:
    assume out_$i284 == 1;
    goto corral_source_split_569;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    out_$i284 := $ne.i32(out_$i283, 0);
    goto corral_source_split_567;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    out_$i283 := $and.i32(out_$i282, 4);
    goto corral_source_split_566;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    out_$i282 := $load.i32($M.0, out_$p281);
    goto corral_source_split_565;

  $bb123:
    assume {:verifier.code 0} true;
    out_$p281 := $add.ref($add.ref(in_$p7, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_564;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb125:
    assume {:verifier.code 0} true;
    assume !(out_$i284 == 1);
    goto $bb126;

  $bb128:
    assume {:verifier.code 0} true;
    assume !(out_$i291 == 1);
    goto $bb126;

  $bb136_dummy:
    call {:si_unique_call 1} out_$p281, out_$i282, out_$i283, out_$i284, out_$i285, out_$p288, out_$p289, out_$i290, out_$i291, out_$i292, out_$p296, out_$i297, out_$i298, out_$i299, out_$i300, out_$p301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i279, out_$i280, out_$i312 := raid_status_loop_$bb122(in_$p3, in_$i4, in_$p7, in_$p275, out_$p281, out_$i282, out_$i283, out_$i284, out_$i285, out_$p288, out_$p289, out_$i290, out_$i291, out_$i292, out_$p296, out_$i297, out_$i298, out_$i299, out_$i300, out_$p301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i279, out_$i280, out_$i312);
    return;

  exit:
    return;
}



procedure raid_status_loop_$bb122(in_$p3: ref, in_$i4: i32, in_$p7: ref, in_$p275: ref, in_$p281: ref, in_$i282: i32, in_$i283: i32, in_$i284: i1, in_$i285: i64, in_$p288: ref, in_$p289: ref, in_$i290: i64, in_$i291: i1, in_$i292: i64, in_$p296: ref, in_$i297: i32, in_$i298: i1, in_$i299: i1, in_$i300: i64, in_$p301: ref, in_$i302: i32, in_$i303: i64, in_$i304: i32, in_$i305: i32, in_$i306: i32, in_$i307: i32, in_$i308: i32, in_$i309: i32, in_$i310: i32, in_$i311: i1, in_$i279: i32, in_$i280: i32, in_$i312: i32) returns (out_$p281: ref, out_$i282: i32, out_$i283: i32, out_$i284: i1, out_$i285: i64, out_$p288: ref, out_$p289: ref, out_$i290: i64, out_$i291: i1, out_$i292: i64, out_$p296: ref, out_$i297: i32, out_$i298: i1, out_$i299: i1, out_$i300: i64, out_$p301: ref, out_$i302: i32, out_$i303: i64, out_$i304: i32, out_$i305: i32, out_$i306: i32, out_$i307: i32, out_$i308: i32, out_$i309: i32, out_$i310: i32, out_$i311: i1, out_$i279: i32, out_$i280: i32, out_$i312: i32);



implementation raid_status_loop_$bb78(in_$p7: ref, in_$p169: ref, in_$p175: ref, in_$i176: i32, in_$i177: i32, in_$i178: i1, in_$i179: i64, in_$p182: ref, in_$p183: ref, in_$i184: i64, in_$i185: i1, in_$i186: i64, in_$p190: ref, in_$i191: i32, in_$i192: i1, in_$i193: i32, in_$i194: i32, in_$i195: i32, in_$i196: i64, in_$p199: ref, in_$p200: ref, in_$i201: i64, in_$i202: i1, in_$i203: i64, in_$p207: ref, in_$i208: i32, in_$i209: i1, in_$i210: i32, in_$i211: i32, in_$i212: i32, in_$i213: i32, in_$i214: i32, in_$i215: i1, in_$i173: i32, in_$i174: i32, in_$i216: i32) returns (out_$p175: ref, out_$i176: i32, out_$i177: i32, out_$i178: i1, out_$i179: i64, out_$p182: ref, out_$p183: ref, out_$i184: i64, out_$i185: i1, out_$i186: i64, out_$p190: ref, out_$i191: i32, out_$i192: i1, out_$i193: i32, out_$i194: i32, out_$i195: i32, out_$i196: i64, out_$p199: ref, out_$p200: ref, out_$i201: i64, out_$i202: i1, out_$i203: i64, out_$p207: ref, out_$i208: i32, out_$i209: i1, out_$i210: i32, out_$i211: i32, out_$i212: i32, out_$i213: i32, out_$i214: i32, out_$i215: i1, out_$i173: i32, out_$i174: i32, out_$i216: i32)
{

  entry:
    out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p182, out_$p183, out_$i184, out_$i185, out_$i186, out_$p190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$p199, out_$p200, out_$i201, out_$i202, out_$i203, out_$p207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i173, out_$i174, out_$i216 := in_$p175, in_$i176, in_$i177, in_$i178, in_$i179, in_$p182, in_$p183, in_$i184, in_$i185, in_$i186, in_$p190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$p199, in_$p200, in_$i201, in_$i202, in_$i203, in_$p207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i173, in_$i174, in_$i216;
    goto $bb78, exit;

  $bb78:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_431;

  $bb95:
    assume out_$i215 == 1;
    assume {:verifier.code 0} true;
    out_$i173, out_$i174 := out_$i212, out_$i213;
    goto $bb95_dummy;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    out_$i216 := out_$i212;
    assume true;
    goto $bb95;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    out_$i215 := $sgt.i32(out_$i214, out_$i213);
    goto corral_source_split_477;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    out_$i214 := $load.i32($M.0, in_$p169);
    goto corral_source_split_476;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    out_$i213 := $add.i32(out_$i174, 1);
    call {:si_unique_call 99} {:cexpr "i"} boogie_si_record_i32(out_$i213);
    goto corral_source_split_475;

  $bb94:
    assume {:verifier.code 0} true;
    goto corral_source_split_474;

  $bb90:
    assume !(out_$i202 == 1);
    assume {:verifier.code 0} true;
    out_$i212 := out_$i195;
    goto $bb94;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    out_$i212 := out_$i211;
    goto $bb94;

  $bb93:
    assume {:verifier.code 0} true;
    goto corral_source_split_472;

  $bb92:
    assume !(out_$i209 == 1);
    assume {:verifier.code 0} true;
    out_$i211 := out_$i195;
    goto $bb93;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    out_$i211 := out_$i210;
    goto $bb93;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    out_$i210 := $add.i32(out_$i195, 2);
    call {:si_unique_call 98} {:cexpr "raid_param_cnt"} boogie_si_record_i32(out_$i210);
    goto corral_source_split_470;

  $bb91:
    assume out_$i209 == 1;
    goto corral_source_split_469;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    out_$i209 := $ne.i32(out_$i208, 0);
    goto corral_source_split_467;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} out_$i208 := constant_test_bit(4, out_$p207);
    call {:si_unique_call 97} {:cexpr "tmp___24"} boogie_si_record_i32(out_$i208);
    goto corral_source_split_466;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    out_$p207 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i203, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_465;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    out_$i203 := $sext.i32.i64(out_$i174);
    goto corral_source_split_464;

  $bb89:
    assume out_$i202 == 1;
    goto corral_source_split_463;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    out_$i202 := $ne.i64(out_$i201, 0);
    goto corral_source_split_461;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    out_$i201 := $p2i.ref.i64(out_$p200);
    goto corral_source_split_460;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    out_$p200 := $load.ref($M.0, out_$p199);
    goto corral_source_split_459;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    out_$p199 := $add.ref($add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i196, 848)), $mul.ref(8, 1));
    goto corral_source_split_458;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    out_$i196 := $sext.i32.i64(out_$i174);
    goto corral_source_split_457;

  $bb88:
    assume {:verifier.code 0} true;
    goto corral_source_split_456;

  $bb82:
    assume {:verifier.code 0} true;
    out_$i195 := out_$i173;
    goto $bb88;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    out_$i195 := out_$i194;
    goto $bb88;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_454;

  $bb86:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    out_$i194 := out_$i173;
    goto $bb87;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    out_$i194 := out_$i193;
    goto $bb87;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    out_$i193 := $add.i32(out_$i173, 2);
    call {:si_unique_call 95} {:cexpr "raid_param_cnt"} boogie_si_record_i32(out_$i193);
    goto corral_source_split_452;

  $bb85:
    assume out_$i192 == 1;
    goto corral_source_split_451;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    out_$i192 := $eq.i32(out_$i191, 0);
    goto corral_source_split_449;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} out_$i191 := constant_test_bit(1, out_$p190);
    call {:si_unique_call 94} {:cexpr "tmp___23"} boogie_si_record_i32(out_$i191);
    goto corral_source_split_448;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    out_$p190 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i186, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_447;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    out_$i186 := $sext.i32.i64(out_$i174);
    goto corral_source_split_446;

  $bb83:
    assume out_$i185 == 1;
    goto corral_source_split_445;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    out_$i185 := $ne.i64(out_$i184, 0);
    goto corral_source_split_443;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    out_$i184 := $p2i.ref.i64(out_$p183);
    goto corral_source_split_442;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    out_$p183 := $load.ref($M.0, out_$p182);
    goto corral_source_split_441;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    out_$p182 := $add.ref($add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i179, 848)), $mul.ref(8, 1));
    goto corral_source_split_440;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    out_$i179 := $sext.i32.i64(out_$i174);
    goto corral_source_split_439;

  $bb80:
    assume out_$i178 == 1;
    goto corral_source_split_438;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    out_$i178 := $ne.i32(out_$i177, 0);
    goto corral_source_split_436;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    out_$i177 := $and.i32(out_$i176, 4);
    goto corral_source_split_435;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    out_$i176 := $load.i32($M.0, out_$p175);
    goto corral_source_split_434;

  $bb79:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref(in_$p7, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_433;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb81:
    assume {:verifier.code 0} true;
    assume !(out_$i178 == 1);
    goto $bb82;

  $bb84:
    assume {:verifier.code 0} true;
    assume !(out_$i185 == 1);
    goto $bb82;

  $bb95_dummy:
    call {:si_unique_call 1} out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p182, out_$p183, out_$i184, out_$i185, out_$i186, out_$p190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$p199, out_$p200, out_$i201, out_$i202, out_$i203, out_$p207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i173, out_$i174, out_$i216 := raid_status_loop_$bb78(in_$p7, in_$p169, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p182, out_$p183, out_$i184, out_$i185, out_$i186, out_$p190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$p199, out_$p200, out_$i201, out_$i202, out_$i203, out_$p207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i173, out_$i174, out_$i216);
    return;

  exit:
    return;
}



procedure raid_status_loop_$bb78(in_$p7: ref, in_$p169: ref, in_$p175: ref, in_$i176: i32, in_$i177: i32, in_$i178: i1, in_$i179: i64, in_$p182: ref, in_$p183: ref, in_$i184: i64, in_$i185: i1, in_$i186: i64, in_$p190: ref, in_$i191: i32, in_$i192: i1, in_$i193: i32, in_$i194: i32, in_$i195: i32, in_$i196: i64, in_$p199: ref, in_$p200: ref, in_$i201: i64, in_$i202: i1, in_$i203: i64, in_$p207: ref, in_$i208: i32, in_$i209: i1, in_$i210: i32, in_$i211: i32, in_$i212: i32, in_$i213: i32, in_$i214: i32, in_$i215: i1, in_$i173: i32, in_$i174: i32, in_$i216: i32) returns (out_$p175: ref, out_$i176: i32, out_$i177: i32, out_$i178: i1, out_$i179: i64, out_$p182: ref, out_$p183: ref, out_$i184: i64, out_$i185: i1, out_$i186: i64, out_$p190: ref, out_$i191: i32, out_$i192: i1, out_$i193: i32, out_$i194: i32, out_$i195: i32, out_$i196: i64, out_$p199: ref, out_$p200: ref, out_$i201: i64, out_$i202: i1, out_$i203: i64, out_$p207: ref, out_$i208: i32, out_$i209: i1, out_$i210: i32, out_$i211: i32, out_$i212: i32, out_$i213: i32, out_$i214: i32, out_$i215: i1, out_$i173: i32, out_$i174: i32, out_$i216: i32);



implementation raid_status_loop_$bb38(in_$p3: ref, in_$i4: i32, in_$p7: ref, in_$i76: i32, in_$p81: ref, in_$i87: i64, in_$p91: ref, in_$i92: i32, in_$i93: i1, in_$i94: i1, in_$i95: i64, in_$p96: ref, in_$i97: i32, in_$i98: i64, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i103: i1, in_$i104: i64, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$i111: i1, in_$i112: i64, in_$p113: ref, in_$i114: i32, in_$i115: i64, in_$i116: i32, in_$i117: i32, in_$i118: i32, in_$i120: i1, in_$i121: i64, in_$p122: ref, in_$i123: i32, in_$i124: i64, in_$i125: i32, in_$i126: i32, in_$i127: i32, in_$i119: i32, in_$i102: i32, in_$i128: i32, in_$i129: i32, in_$i130: i1, in_$i85: i32, in_$i86: i32, in_$i131: i32) returns (out_$i87: i64, out_$p91: ref, out_$i92: i32, out_$i93: i1, out_$i94: i1, out_$i95: i64, out_$p96: ref, out_$i97: i32, out_$i98: i64, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i103: i1, out_$i104: i64, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$i111: i1, out_$i112: i64, out_$p113: ref, out_$i114: i32, out_$i115: i64, out_$i116: i32, out_$i117: i32, out_$i118: i32, out_$i120: i1, out_$i121: i64, out_$p122: ref, out_$i123: i32, out_$i124: i64, out_$i125: i32, out_$i126: i32, out_$i127: i32, out_$i119: i32, out_$i102: i32, out_$i128: i32, out_$i129: i32, out_$i130: i1, out_$i85: i32, out_$i86: i32, out_$i131: i32)
{

  entry:
    out_$i87, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i103, out_$i104, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i119, out_$i102, out_$i128, out_$i129, out_$i130, out_$i85, out_$i86, out_$i131 := in_$i87, in_$p91, in_$i92, in_$i93, in_$i94, in_$i95, in_$p96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i103, in_$i104, in_$p108, in_$i109, in_$i110, in_$i111, in_$i112, in_$p113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i120, in_$i121, in_$p122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i119, in_$i102, in_$i128, in_$i129, in_$i130, in_$i85, in_$i86, in_$i131;
    goto $bb38, exit;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_320;

  $bb59:
    assume out_$i130 == 1;
    assume {:verifier.code 0} true;
    out_$i85, out_$i86 := out_$i102, out_$i128;
    goto $bb59_dummy;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    out_$i131 := out_$i102;
    assume true;
    goto $bb59;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    out_$i130 := $sgt.i32(out_$i129, out_$i128);
    goto corral_source_split_346;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    out_$i129 := $load.i32($M.0, in_$p81);
    goto corral_source_split_345;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    out_$i128 := $add.i32(out_$i86, 1);
    call {:si_unique_call 71} {:cexpr "i"} boogie_si_record_i32(out_$i128);
    goto corral_source_split_344;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_343;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i102 := out_$i119;
    goto $bb45;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    out_$i102 := out_$i101;
    goto $bb45;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    out_$i101 := $add.i32(out_$i100, out_$i85);
    call {:si_unique_call 70} {:cexpr "sz"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_341;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_340;

  $bb43:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    out_$i100 := 0;
    goto $bb44;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    out_$i100 := out_$i99;
    goto $bb44;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} out_$i99 := scnprintf.ref.i64.ref(out_$p96, out_$i98, .str.117);
    call {:si_unique_call 69} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_338;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    out_$i98 := $zext.i32.i64(out_$i97);
    goto corral_source_split_337;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    out_$i97 := $sub.i32(in_$i4, out_$i85);
    goto corral_source_split_336;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref(in_$p3, $mul.ref(out_$i95, 1));
    goto corral_source_split_335;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i32.i64(out_$i85);
    goto corral_source_split_334;

  $bb42:
    assume out_$i94 == 1;
    goto corral_source_split_333;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    out_$i94 := $ult.i32(out_$i85, in_$i4);
    goto corral_source_split_328;

  $bb40:
    assume out_$i93 == 1;
    goto corral_source_split_327;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i32(out_$i92, 0);
    goto corral_source_split_325;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} out_$i92 := constant_test_bit(0, out_$p91);
    call {:si_unique_call 67} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_324;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i87, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_323;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i87 := $sext.i32.i64(out_$i86);
    goto corral_source_split_322;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    out_$i127 := $add.i32(out_$i126, out_$i85);
    call {:si_unique_call 79} {:cexpr "sz"} boogie_si_record_i32(out_$i127);
    assume {:verifier.code 0} true;
    out_$i119 := out_$i127;
    goto $bb54;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    out_$i119 := out_$i118;
    goto $bb54;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    out_$i118 := $add.i32(out_$i117, out_$i85);
    call {:si_unique_call 76} {:cexpr "sz"} boogie_si_record_i32(out_$i118);
    goto corral_source_split_371;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_370;

  $bb52:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    out_$i117 := 0;
    goto $bb53;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    out_$i117 := out_$i116;
    goto $bb53;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} out_$i116 := scnprintf.ref.i64.ref(out_$p113, out_$i115, .str.118);
    call {:si_unique_call 75} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_368;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    out_$i115 := $zext.i32.i64(out_$i114);
    goto corral_source_split_367;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    out_$i114 := $sub.i32(in_$i4, out_$i85);
    goto corral_source_split_366;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref(in_$p3, $mul.ref(out_$i112, 1));
    goto corral_source_split_365;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i32.i64(out_$i85);
    goto corral_source_split_364;

  $bb51:
    assume out_$i111 == 1;
    goto corral_source_split_363;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i111 := $ult.i32(out_$i85, in_$i4);
    goto corral_source_split_356;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb46:
    assume out_$i103 == 1;
    goto corral_source_split_348;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(in_$i76, 0);
    goto corral_source_split_331;

  $bb41:
    assume !(out_$i93 == 1);
    goto corral_source_split_330;

  $bb49:
    assume out_$i110 == 1;
    goto corral_source_split_358;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i109, 0);
    goto corral_source_split_354;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} out_$i109 := constant_test_bit(1, out_$p108);
    call {:si_unique_call 73} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_353;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i104, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_352;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    out_$i104 := $sext.i32.i64(out_$i86);
    goto corral_source_split_351;

  $bb47:
    assume !(out_$i103 == 1);
    goto corral_source_split_350;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_380;

  $bb56:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    out_$i126 := 0;
    goto $bb57;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    out_$i126 := out_$i125;
    goto $bb57;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} out_$i125 := scnprintf.ref.i64.ref(out_$p122, out_$i124, .str.119);
    call {:si_unique_call 78} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i125);
    goto corral_source_split_378;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    out_$i124 := $zext.i32.i64(out_$i123);
    goto corral_source_split_377;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    out_$i123 := $sub.i32(in_$i4, out_$i85);
    goto corral_source_split_376;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref(in_$p3, $mul.ref(out_$i121, 1));
    goto corral_source_split_375;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    out_$i121 := $zext.i32.i64(out_$i85);
    goto corral_source_split_374;

  $bb55:
    assume out_$i120 == 1;
    goto corral_source_split_373;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    out_$i120 := $ult.i32(out_$i85, in_$i4);
    goto corral_source_split_361;

  $bb50:
    assume !(out_$i110 == 1);
    goto corral_source_split_360;

  $bb59_dummy:
    call {:si_unique_call 1} out_$i87, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i103, out_$i104, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i119, out_$i102, out_$i128, out_$i129, out_$i130, out_$i85, out_$i86, out_$i131 := raid_status_loop_$bb38(in_$p3, in_$i4, in_$p7, in_$i76, in_$p81, out_$i87, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i103, out_$i104, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i119, out_$i102, out_$i128, out_$i129, out_$i130, out_$i85, out_$i86, out_$i131);
    return;

  exit:
    return;
}



procedure raid_status_loop_$bb38(in_$p3: ref, in_$i4: i32, in_$p7: ref, in_$i76: i32, in_$p81: ref, in_$i87: i64, in_$p91: ref, in_$i92: i32, in_$i93: i1, in_$i94: i1, in_$i95: i64, in_$p96: ref, in_$i97: i32, in_$i98: i64, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i103: i1, in_$i104: i64, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$i111: i1, in_$i112: i64, in_$p113: ref, in_$i114: i32, in_$i115: i64, in_$i116: i32, in_$i117: i32, in_$i118: i32, in_$i120: i1, in_$i121: i64, in_$p122: ref, in_$i123: i32, in_$i124: i64, in_$i125: i32, in_$i126: i32, in_$i127: i32, in_$i119: i32, in_$i102: i32, in_$i128: i32, in_$i129: i32, in_$i130: i1, in_$i85: i32, in_$i86: i32, in_$i131: i32) returns (out_$i87: i64, out_$p91: ref, out_$i92: i32, out_$i93: i1, out_$i94: i1, out_$i95: i64, out_$p96: ref, out_$i97: i32, out_$i98: i64, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i103: i1, out_$i104: i64, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$i111: i1, out_$i112: i64, out_$p113: ref, out_$i114: i32, out_$i115: i64, out_$i116: i32, out_$i117: i32, out_$i118: i32, out_$i120: i1, out_$i121: i64, out_$p122: ref, out_$i123: i32, out_$i124: i64, out_$i125: i32, out_$i126: i32, out_$i127: i32, out_$i119: i32, out_$i102: i32, out_$i128: i32, out_$i129: i32, out_$i130: i1, out_$i85: i32, out_$i86: i32, out_$i131: i32);



implementation raid_status_loop_$bb26(in_$p7: ref, in_$p57: ref, in_$i63: i64, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i61: i32, in_$i62: i32, in_$i74: i32) returns (out_$i63: i64, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i61: i32, out_$i62: i32, out_$i74: i32)
{

  entry:
    out_$i63, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i61, out_$i62, out_$i74 := in_$i63, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i61, in_$i62, in_$i74;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_297;

  $bb31:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i61, out_$i62 := out_$i71, out_$i70;
    goto $bb31_dummy;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    out_$i74 := out_$i70;
    assume true;
    goto $bb31;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    out_$i73 := $sgt.i32(out_$i72, out_$i71);
    goto corral_source_split_309;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i32($M.0, in_$p57);
    goto corral_source_split_308;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i32(out_$i61, 1);
    call {:si_unique_call 65} {:cexpr "i"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_307;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_306;

  $bb29:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    out_$i70 := out_$i62;
    goto $bb30;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    out_$i70 := 1;
    goto $bb30;

  $bb28:
    assume out_$i69 == 1;
    goto corral_source_split_304;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 0);
    goto corral_source_split_302;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} out_$i68 := constant_test_bit(1, out_$p67);
    call {:si_unique_call 64} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_301;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i63, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_300;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i63 := $sext.i32.i64(out_$i61);
    goto corral_source_split_299;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i63, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i61, out_$i62, out_$i74 := raid_status_loop_$bb26(in_$p7, in_$p57, out_$i63, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i61, out_$i62, out_$i74);
    return;

  exit:
    return;
}



procedure raid_status_loop_$bb26(in_$p7: ref, in_$p57: ref, in_$i63: i64, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i61: i32, in_$i62: i32, in_$i74: i32) returns (out_$i63: i64, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i61: i32, out_$i62: i32, out_$i74: i32);



implementation raid_iterate_devices_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p5: ref, in_$p7: ref, in_$i10: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i17: i64, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$i24: i64, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i8: i32, in_$i9: i32, in_$i30: i32, in_$i31: i1, in_$i29: i32) returns (out_$i10: i64, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i17: i64, out_$p20: ref, out_$p21: ref, out_$p23: ref, out_$i24: i64, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i8: i32, out_$i9: i32, out_$i30: i32, out_$i31: i1, out_$i29: i32)
{

  entry:
    out_$i10, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$p21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i8, out_$i9, out_$i30, out_$i31, out_$i29 := in_$i10, in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p20, in_$p21, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i8, in_$i9, in_$i30, in_$i31, in_$i29;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1094;

  $bb6:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$i9 := out_$i26, out_$i27;
    goto $bb6_dummy;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i26;
    assume true;
    goto $bb6;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i26, 0);
    goto corral_source_split_1113;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i9, 1);
    call {:si_unique_call 209} {:cexpr "i"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_1112;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1111;

  $bb4:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i26 := out_$i8;
    goto $bb5;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i25;
    goto $bb5;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.0, out_$p23);
    call {:si_unique_call 207} out_$i25 := devirtbounce.2(in_$p1, in_$p0, out_$p21, 0, out_$i24, in_$p2);
    call {:si_unique_call 208} {:cexpr "ret"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_1109;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(472, 1));
    goto corral_source_split_1108;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_1107;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i17, 848)), $mul.ref(8, 1));
    goto corral_source_split_1106;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i32.i64(out_$i9);
    goto corral_source_split_1105;

  $bb3:
    assume out_$i16 == 1;
    goto corral_source_split_1104;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_1102;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_1101;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_1100;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i10, 848)), $mul.ref(8, 1));
    goto corral_source_split_1099;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i32.i64(out_$i9);
    goto corral_source_split_1098;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb9:
    assume out_$i31 == 1;
    goto corral_source_split_1115;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i8;
    assume true;
    goto $bb9;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    out_$i31 := $ugt.i32(out_$i30, out_$i9);
    goto corral_source_split_1096;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, in_$p7);
    goto corral_source_split_1095;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i10, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$p21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i8, out_$i9, out_$i30, out_$i31, out_$i29 := raid_iterate_devices_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p5, in_$p7, out_$i10, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$p21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i8, out_$i9, out_$i30, out_$i31, out_$i29);
    return;

  exit:
    return;
}



procedure raid_iterate_devices_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p5: ref, in_$p7: ref, in_$i10: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i17: i64, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$i24: i64, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i8: i32, in_$i9: i32, in_$i30: i32, in_$i31: i1, in_$i29: i32) returns (out_$i10: i64, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i17: i64, out_$p20: ref, out_$p21: ref, out_$p23: ref, out_$i24: i64, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i8: i32, out_$i9: i32, out_$i30: i32, out_$i31: i1, out_$i29: i32);



implementation attempt_restore_of_faulty_devices_loop_$bb33(in_$i5: i64, in_$i88: i64, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i64, in_$i97: i64, in_$i98: i64, in_$p99: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i64, in_$i106: i1, in_$p90: ref) returns (out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i64, out_$i97: i64, out_$i98: i64, out_$p99: ref, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i64, out_$i106: i1, out_$p90: ref)
{

  entry:
    out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$p90 := in_$p91, in_$p92, in_$p93, in_$p94, in_$p95, in_$i96, in_$i97, in_$i98, in_$p99, in_$p101, in_$p102, in_$p103, in_$p104, in_$i105, in_$i106, in_$p90;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_1399;

  $bb35:
    assume out_$i106 == 1;
    assume {:verifier.code 0} true;
    out_$p90 := out_$p102;
    goto $bb35_dummy;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    out_$i106 := $ne.i64(out_$i105, in_$i88);
    goto corral_source_split_1416;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    out_$i105 := $p2i.ref.i64(out_$p104);
    goto corral_source_split_1415;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p103, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_1414;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    out_$p103 := $bitcast.ref.ref(out_$p102);
    goto corral_source_split_1413;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    out_$p102 := $load.ref($M.0, out_$p101);
    goto corral_source_split_1412;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref($add.ref(out_$p90, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1411;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, out_$p99, out_$i98);
    goto corral_source_split_1410;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1409;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    out_$i98 := $and.i64(out_$i97, out_$i96);
    call {:si_unique_call 299} {:cexpr "failed_devices"} boogie_si_record_i64(out_$i98);
    goto corral_source_split_1408;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    out_$i97 := $xor.i64(in_$i5, $sub.i64(0, 1));
    goto corral_source_split_1407;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i64($M.2, out_$p95);
    call {:si_unique_call 298} {:cexpr "failed_devices"} boogie_si_record_i64(out_$i96);
    goto corral_source_split_1406;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1405;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    out_$p94 := $bitcast.ref.ref(out_$p93);
    goto corral_source_split_1404;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} out_$p93 := lowmem_page_address(out_$p92);
    goto corral_source_split_1403;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.0, out_$p91);
    goto corral_source_split_1402;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p90, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_1401;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb35_dummy:
    call {:si_unique_call 1} out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$p90 := attempt_restore_of_faulty_devices_loop_$bb33(in_$i5, in_$i88, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$p90);
    return;

  exit:
    return;
}



procedure attempt_restore_of_faulty_devices_loop_$bb33(in_$i5: i64, in_$i88: i64, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i64, in_$i97: i64, in_$i98: i64, in_$p99: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i64, in_$i106: i1, in_$p90: ref) returns (out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i64, out_$i97: i64, out_$i98: i64, out_$p99: ref, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i64, out_$i106: i1, out_$p90: ref);
  modifies $M.2;



implementation attempt_restore_of_faulty_devices_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i8: i64, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p66: ref, in_$i67: i32, in_$i68: i64, in_$i69: i64, in_$i65: i64, in_$i70: i32, in_$i71: i64, in_$i72: i32, in_$i73: i64, in_$i43: i32, in_$i44: i64, in_$i74: i32, in_$i75: i32, in_$i76: i1, in_$i6: i32, in_$i7: i64, in_$i77: i64, in_vslice_dummy_var_11: i32) returns (out_$i8: i64, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p66: ref, out_$i67: i32, out_$i68: i64, out_$i69: i64, out_$i65: i64, out_$i70: i32, out_$i71: i64, out_$i72: i32, out_$i73: i64, out_$i43: i32, out_$i44: i64, out_$i74: i32, out_$i75: i32, out_$i76: i1, out_$i6: i32, out_$i7: i64, out_$i77: i64, out_vslice_dummy_var_11: i32)
{

  entry:
    out_$i8, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$p66, out_$i67, out_$i68, out_$i69, out_$i65, out_$i70, out_$i71, out_$i72, out_$i73, out_$i43, out_$i44, out_$i74, out_$i75, out_$i76, out_$i6, out_$i7, out_$i77, out_vslice_dummy_var_11 := in_$i8, in_$p11, in_$p12, in_$i13, in_$i14, in_$p15, in_$p16, in_$i17, in_$i18, in_$p19, in_$i20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p30, in_$i31, in_$i32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p45, in_$p46, in_$p47, in_$i48, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$i60, in_$i61, in_$p62, in_$p63, in_$p64, in_$p66, in_$i67, in_$i68, in_$i69, in_$i65, in_$i70, in_$i71, in_$i72, in_$i73, in_$i43, in_$i44, in_$i74, in_$i75, in_$i76, in_$i6, in_$i7, in_$i77, in_vslice_dummy_var_11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1309;

  $bb25:
    assume out_$i76 == 1;
    assume {:verifier.code 0} true;
    out_$i6, out_$i7 := out_$i74, out_$i44;
    goto $bb25_dummy;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    out_$i77 := out_$i44;
    assume true;
    goto $bb25;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    out_$i76 := $sgt.i32(out_$i75, out_$i74);
    goto corral_source_split_1350;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.0, in_$p2);
    goto corral_source_split_1349;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i32(out_$i43, 1);
    call {:si_unique_call 289} {:cexpr "i"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_1348;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1347;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    out_$i43, out_$i44 := out_$i72, out_$i73;
    goto $bb17;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    out_$i43, out_$i44 := out_$i6, out_$i7;
    goto $bb17;

  $bb15:
    assume out_$i42 == 1;
    goto corral_source_split_1345;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_1343;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    call {:si_unique_call 287} out_$i41 := devirtbounce.5(out_$p38, out_$p40, out_$p11);
    call {:si_unique_call 288} {:cexpr "tmp"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_1342;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    out_$p39 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i8, 848)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_1341;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p36, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_1340;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_1339;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p34, $mul.ref(0, 2096)), $mul.ref(8, 1));
    goto corral_source_split_1338;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_1337;

  $bb13:
    assume out_$i32 == 1;
    out_$p33 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i8, 848)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_1336;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    out_$i32 := $sge.i32(out_$i31, 0);
    goto corral_source_split_1334;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, out_$p30);
    goto corral_source_split_1333;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} out_vslice_dummy_var_11 := printk.ref.ref.i32(.str.138, out_$p28, out_$i6);
    out_$p30 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i8, 848)), $mul.ref(16, 1)), $mul.ref(516, 1));
    goto corral_source_split_1332;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_1331;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1330;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_1329;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_1328;

  $bb11:
    assume out_$i24 == 1;
    goto corral_source_split_1327;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_1325;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} out_$i23 := sync_page_io(out_$p11, 0, out_$i20, out_$p22, 0, 1);
    call {:si_unique_call 285} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_1324;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_1323;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    out_$p21 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i8, 848)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_1322;

  $bb9:
    assume out_$i18 == 1;
    out_$p19 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i8, 848)), $mul.ref(16, 1)), $mul.ref(112, 1));
    goto corral_source_split_1321;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i64(out_$i17, 0);
    goto corral_source_split_1319;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_1318;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_1317;

  $bb6:
    assume out_$i14 == 1;
    out_$p15 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i8, 848)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_1316;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_1314;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} out_$i13 := constant_test_bit(0, out_$p12);
    call {:si_unique_call 283} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_1313;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i8, 848)), $mul.ref(16, 1));
    out_$p12 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i8, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_1312;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i6);
    goto corral_source_split_1311;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1381;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i72, out_$i73 := out_$i6, out_$i7;
    goto $bb24;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    out_$i72, out_$i73 := out_$i70, out_$i71;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1379;

  $bb12:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    out_$i70, out_$i71 := out_$i6, out_$i7;
    goto $bb23;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    out_$i70, out_$i71 := out_$i6, out_$i65;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1377;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    out_$i69 := $or.i64(out_$i68, out_$i7);
    call {:si_unique_call 296} {:cexpr "cleared_failed_devices"} boogie_si_record_i64(out_$i69);
    assume {:verifier.code 0} true;
    out_$i65 := out_$i69;
    goto $bb22;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    out_$i65 := out_$i7;
    goto $bb22;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p64, out_$i48);
    goto corral_source_split_1370;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p63, $sub.i32(0, 1));
    out_$p64 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i8, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_1369;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p62, $sub.i32(0, 1));
    out_$p63 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i8, 848)), $mul.ref(16, 1)), $mul.ref(524, 1));
    goto corral_source_split_1368;

  $bb20:
    assume out_$i61 == 1;
    out_$p62 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i8, 848)), $mul.ref(16, 1)), $mul.ref(516, 1));
    goto corral_source_split_1367;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(out_$i60, 0);
    goto corral_source_split_1365;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    call {:si_unique_call 294} out_$i60 := devirtbounce.5(out_$p57, out_$p59, out_$p11);
    call {:si_unique_call 295} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_1364;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    out_$p58 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i8, 848)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_1363;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p55, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_1362;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.0, out_$p54);
    goto corral_source_split_1361;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p53, $mul.ref(0, 2096)), $mul.ref(8, 1));
    goto corral_source_split_1360;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_1359;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} clear_bit(1, out_$p51);
    out_$p52 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i8, 848)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_1358;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} clear_bit(7, out_$p50);
    out_$p51 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i8, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_1357;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} clear_bit(0, out_$p49);
    out_$p50 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i8, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_1356;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i64($M.0, out_$p47);
    call {:si_unique_call 290} {:cexpr "flags"} boogie_si_record_i64(out_$i48);
    out_$p49 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i8, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_1355;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p46, out_$i6);
    out_$p47 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i8, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_1354;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p45, out_$i6);
    out_$p46 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i8, 848)), $mul.ref(16, 1)), $mul.ref(524, 1));
    goto corral_source_split_1353;

  $bb19:
    out_$p45 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i8, 848)), $mul.ref(16, 1)), $mul.ref(516, 1));
    goto corral_source_split_1352;

  $bb14:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(out_$i67);
    goto corral_source_split_1375;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    out_$i67 := $shl.i32(1, out_$i6);
    goto corral_source_split_1374;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p66, 0);
    goto corral_source_split_1373;

  $bb21:
    assume !(out_$i61 == 1);
    out_$p66 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i8, 848)), $mul.ref(16, 1)), $mul.ref(528, 1));
    goto corral_source_split_1372;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i14 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i18 == 1);
    goto $bb8;

  $bb25_dummy:
    call {:si_unique_call 1} out_$i8, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$p66, out_$i67, out_$i68, out_$i69, out_$i65, out_$i70, out_$i71, out_$i72, out_$i73, out_$i43, out_$i44, out_$i74, out_$i75, out_$i76, out_$i6, out_$i7, out_$i77, out_vslice_dummy_var_11 := attempt_restore_of_faulty_devices_loop_$bb4(in_$p0, in_$p2, out_$i8, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$p66, out_$i67, out_$i68, out_$i69, out_$i65, out_$i70, out_$i71, out_$i72, out_$i73, out_$i43, out_$i44, out_$i74, out_$i75, out_$i76, out_$i6, out_$i7, out_$i77, out_vslice_dummy_var_11);
    return;

  exit:
    return;
}



procedure attempt_restore_of_faulty_devices_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i8: i64, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p66: ref, in_$i67: i32, in_$i68: i64, in_$i69: i64, in_$i65: i64, in_$i70: i32, in_$i71: i64, in_$i72: i32, in_$i73: i64, in_$i43: i32, in_$i44: i64, in_$i74: i32, in_$i75: i32, in_$i76: i1, in_$i6: i32, in_$i7: i64, in_$i77: i64, in_vslice_dummy_var_11: i32) returns (out_$i8: i64, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p66: ref, out_$i67: i32, out_$i68: i64, out_$i69: i64, out_$i65: i64, out_$i70: i32, out_$i71: i64, out_$i72: i32, out_$i73: i64, out_$i43: i32, out_$i44: i64, out_$i74: i32, out_$i75: i32, out_$i76: i1, out_$i6: i32, out_$i7: i64, out_$i77: i64, out_vslice_dummy_var_11: i32);
  modifies $M.2, $M.0;



implementation context_free_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i6: i64, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p23: ref, in_$i24: i64, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i5: i32) returns (out_$i6: i64, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p23: ref, out_$i24: i64, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i5: i32)
{

  entry:
    out_$i6, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$i15, out_$p18, out_$p19, out_$i20, out_$p23, out_$i24, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i5 := in_$i6, in_$p9, in_$p10, in_$i11, in_$i12, in_$p13, in_$p14, in_$i15, in_$p18, in_$p19, in_$i20, in_$p23, in_$i24, in_$p27, in_$p28, in_$i29, in_$i30, in_$p31, in_$p32, in_$i33, in_$p36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1450;

  $bb12:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i38;
    goto $bb12_dummy;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    out_$i40 := $sgt.i32(out_$i39, out_$i38);
    goto corral_source_split_1485;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, in_$p2);
    goto corral_source_split_1484;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i5, 1);
    call {:si_unique_call 311} {:cexpr "i"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_1483;

  $bb10:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} dm_put_device(out_$p32, out_$p37);
    goto corral_source_split_1481;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_1480;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i33, 848)), $mul.ref(8, 1));
    goto corral_source_split_1479;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i5);
    goto corral_source_split_1478;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_1477;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_1476;

  $bb9:
    assume out_$i30 == 1;
    goto corral_source_split_1475;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, 0);
    goto corral_source_split_1473;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_1472;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_1471;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i24, 848)), $mul.ref(8, 1));
    goto corral_source_split_1470;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(out_$i5);
    goto corral_source_split_1469;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} md_rdev_clear(out_$p23);
    goto corral_source_split_1468;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i20, 848)), $mul.ref(16, 1));
    goto corral_source_split_1467;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i5);
    goto corral_source_split_1466;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} dm_put_device(out_$p14, out_$p19);
    goto corral_source_split_1464;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_1463;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i15, 848)), $mul.ref(0, 1));
    goto corral_source_split_1462;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i5);
    goto corral_source_split_1461;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_1460;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_1459;

  $bb6:
    assume out_$i12 == 1;
    goto corral_source_split_1458;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i64(out_$i11, 0);
    goto corral_source_split_1456;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_1455;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_1454;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i6, 848)), $mul.ref(0, 1));
    goto corral_source_split_1453;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i5);
    goto corral_source_split_1452;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i6, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$i15, out_$p18, out_$p19, out_$i20, out_$p23, out_$i24, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i5 := context_free_loop_$bb4(in_$p0, in_$p2, out_$i6, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$i15, out_$p18, out_$p19, out_$i20, out_$p23, out_$i24, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i5);
    return;

  exit:
    return;
}



procedure context_free_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i6: i64, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p23: ref, in_$i24: i64, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i5: i32) returns (out_$i6: i64, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p23: ref, out_$i24: i64, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i5: i32);



implementation context_alloc_loop_$bb11(in_$i2: i32, in_$p14: ref, in_$i49: i64, in_$p52: ref, in_$i54: i32, in_$i55: i1, in_$i48: i32, in_vslice_dummy_var_12: i32) returns (out_$i49: i64, out_$p52: ref, out_$i54: i32, out_$i55: i1, out_$i48: i32, out_vslice_dummy_var_12: i32)
{

  entry:
    out_$i49, out_$p52, out_$i54, out_$i55, out_$i48, out_vslice_dummy_var_12 := in_$i49, in_$p52, in_$i54, in_$i55, in_$i48, in_vslice_dummy_var_12;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1620;

  $bb13:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$i48 := out_$i54;
    goto $bb13_dummy;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    out_$i55 := $ult.i32(out_$i54, in_$i2);
    goto corral_source_split_1626;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i48, 1);
    call {:si_unique_call 336} {:cexpr "i"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_1625;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} out_vslice_dummy_var_12 := md_rdev_init(out_$p52);
    goto corral_source_split_1624;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref($add.ref(in_$p14, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i49, 848)), $mul.ref(16, 1));
    goto corral_source_split_1623;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i32.i64(out_$i48);
    goto corral_source_split_1622;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i49, out_$p52, out_$i54, out_$i55, out_$i48, out_vslice_dummy_var_12 := context_alloc_loop_$bb11(in_$i2, in_$p14, out_$i49, out_$p52, out_$i54, out_$i55, out_$i48, out_vslice_dummy_var_12);
    return;

  exit:
    return;
}



procedure context_alloc_loop_$bb11(in_$i2: i32, in_$p14: ref, in_$i49: i64, in_$p52: ref, in_$i54: i32, in_$i55: i1, in_$i48: i32, in_vslice_dummy_var_12: i32) returns (out_$i49: i64, out_$p52: ref, out_$i54: i32, out_$i55: i1, out_$i48: i32, out_vslice_dummy_var_12: i32);



implementation parse_raid_params_loop_$bb31(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i44: i32, in_$i71: i64, in_$i72: i64, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$p78: ref, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$p82: ref, in_$i87: i64, in_$i88: i64, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$p94: ref, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$p98: ref, in_$i99: i32, in_$i100: i1, in_$i104: i32, in_$i105: i64, in_$i106: i64, in_$p107: ref, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i32, in_$i115: i1, in_$i119: i64, in_$i120: i64, in_$p121: ref, in_$p122: ref, in_$i123: i32, in_$i124: i1, in_$i125: i64, in_$i126: i64, in_$p127: ref, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$i131: i64, in_$i132: i64, in_$p133: ref, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$i140: i64, in_$i141: i64, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$i145: i32, in_$i146: i32, in_$p147: ref, in_$i148: i64, in_$i149: i64, in_$p150: ref, in_$p151: ref, in_$i152: i32, in_$i153: i1, in_$i157: i32, in_$i158: i1, in_$p160: ref, in_$i161: i32, in_$i162: i64, in_$i163: i64, in_$i164: i1, in_$i168: i64, in_$p172: ref, in_$i173: i64, in_$p177: ref, in_$p178: ref, in_$i179: i32, in_$i180: i32, in_$p181: ref, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$p187: ref, in_$p188: ref, in_$i189: i32, in_$i190: i1, in_$p195: ref, in_$i196: i32, in_$i197: i64, in_$i198: i64, in_$i199: i1, in_$i203: i64, in_$p207: ref, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$p213: ref, in_$p214: ref, in_$i215: i32, in_$i216: i1, in_$p220: ref, in_$i221: i32, in_$i222: i32, in_$p223: ref, in_$i224: i64, in_$i225: i64, in_$i226: i64, in_$i227: i1, in_$i231: i64, in_$p234: ref, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i240: i32, in_$i241: i32, in_$p242: ref, in_$i243: i64, in_$i244: i1, in_$i245: i64, in_$i246: i1, in_$i250: i64, in_$p253: ref, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$i259: i32, in_$i260: i32, in_$p261: ref, in_$i262: i64, in_$i263: i64, in_$p264: ref, in_$p265: ref, in_$p266: ref, in_$i267: i32, in_$i268: i1, in_$p269: ref, in_$p270: ref, in_$p271: ref, in_$i272: i32, in_$i273: i1, in_$p277: ref, in_$i278: i64, in_$i279: i32, in_$i280: i32, in_$i281: i1, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$i290: i32, in_$i291: i32, in_$p292: ref, in_$i293: i64, in_$i294: i1, in_$i298: i64, in_$i299: i32, in_$p301: ref, in_$i304: i32, in_$i305: i1, in_$p306: ref, in_$i307: i32, in_$i308: i32, in_$p309: ref, in_$i310: i64, in_$i311: i1, in_$i315: i64, in_$i316: i32, in_$p318: ref, in_$i321: i32, in_$i322: i1, in_$p323: ref, in_$i324: i32, in_$i325: i32, in_$p326: ref, in_$i327: i64, in_$i330: i32, in_$i331: i1, in_$p333: ref, in_$p334: ref, in_$p335: ref, in_$i336: i32, in_$i337: i1, in_$i338: i64, in_$i339: i1, in_$i340: i64, in_$i341: i1, in_$p345: ref, in_$i346: i32, in_$i347: i32, in_$p348: ref, in_$i349: i64, in_$i350: i32, in_$p332: ref, in_$i328: i64, in_$i329: i32, in_$i319: i64, in_$i320: i32, in_$i302: i64, in_$i303: i32, in_$i285: i64, in_$i286: i32, in_$i254: i64, in_$i255: i32, in_$i235: i64, in_$i236: i32, in_$i208: i64, in_$i209: i32, in_$i182: i64, in_$i183: i32, in_$i83: i64, in_$i84: i32, in_$i85: i32, in_$p86: ref, in_$i355: i32, in_$i356: i1, in_$p67: ref, in_$i68: i32, in_$i69: i32, in_$i70: i64, in_$i357: i64, in_$i358: i32, in_$p359: ref) returns (out_$i71: i64, out_$i72: i64, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$p78: ref, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$p82: ref, out_$i87: i64, out_$i88: i64, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$p94: ref, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$p98: ref, out_$i99: i32, out_$i100: i1, out_$i104: i32, out_$i105: i64, out_$i106: i64, out_$p107: ref, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i32, out_$i115: i1, out_$i119: i64, out_$i120: i64, out_$p121: ref, out_$p122: ref, out_$i123: i32, out_$i124: i1, out_$i125: i64, out_$i126: i64, out_$p127: ref, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$i131: i64, out_$i132: i64, out_$p133: ref, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$i140: i64, out_$i141: i64, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$i145: i32, out_$i146: i32, out_$p147: ref, out_$i148: i64, out_$i149: i64, out_$p150: ref, out_$p151: ref, out_$i152: i32, out_$i153: i1, out_$i157: i32, out_$i158: i1, out_$p160: ref, out_$i161: i32, out_$i162: i64, out_$i163: i64, out_$i164: i1, out_$i168: i64, out_$p172: ref, out_$i173: i64, out_$p177: ref, out_$p178: ref, out_$i179: i32, out_$i180: i32, out_$p181: ref, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$p187: ref, out_$p188: ref, out_$i189: i32, out_$i190: i1, out_$p195: ref, out_$i196: i32, out_$i197: i64, out_$i198: i64, out_$i199: i1, out_$i203: i64, out_$p207: ref, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$p213: ref, out_$p214: ref, out_$i215: i32, out_$i216: i1, out_$p220: ref, out_$i221: i32, out_$i222: i32, out_$p223: ref, out_$i224: i64, out_$i225: i64, out_$i226: i64, out_$i227: i1, out_$i231: i64, out_$p234: ref, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i240: i32, out_$i241: i32, out_$p242: ref, out_$i243: i64, out_$i244: i1, out_$i245: i64, out_$i246: i1, out_$i250: i64, out_$p253: ref, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$i259: i32, out_$i260: i32, out_$p261: ref, out_$i262: i64, out_$i263: i64, out_$p264: ref, out_$p265: ref, out_$p266: ref, out_$i267: i32, out_$i268: i1, out_$p269: ref, out_$p270: ref, out_$p271: ref, out_$i272: i32, out_$i273: i1, out_$p277: ref, out_$i278: i64, out_$i279: i32, out_$i280: i32, out_$i281: i1, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$i290: i32, out_$i291: i32, out_$p292: ref, out_$i293: i64, out_$i294: i1, out_$i298: i64, out_$i299: i32, out_$p301: ref, out_$i304: i32, out_$i305: i1, out_$p306: ref, out_$i307: i32, out_$i308: i32, out_$p309: ref, out_$i310: i64, out_$i311: i1, out_$i315: i64, out_$i316: i32, out_$p318: ref, out_$i321: i32, out_$i322: i1, out_$p323: ref, out_$i324: i32, out_$i325: i32, out_$p326: ref, out_$i327: i64, out_$i330: i32, out_$i331: i1, out_$p333: ref, out_$p334: ref, out_$p335: ref, out_$i336: i32, out_$i337: i1, out_$i338: i64, out_$i339: i1, out_$i340: i64, out_$i341: i1, out_$p345: ref, out_$i346: i32, out_$i347: i32, out_$p348: ref, out_$i349: i64, out_$i350: i32, out_$p332: ref, out_$i328: i64, out_$i329: i32, out_$i319: i64, out_$i320: i32, out_$i302: i64, out_$i303: i32, out_$i285: i64, out_$i286: i32, out_$i254: i64, out_$i255: i32, out_$i235: i64, out_$i236: i32, out_$i208: i64, out_$i209: i32, out_$i182: i64, out_$i183: i32, out_$i83: i64, out_$i84: i32, out_$i85: i32, out_$p86: ref, out_$i355: i32, out_$i356: i1, out_$p67: ref, out_$i68: i32, out_$i69: i32, out_$i70: i64, out_$i357: i64, out_$i358: i32, out_$p359: ref)
{

  entry:
    out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$p94, out_$p95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i104, out_$i105, out_$i106, out_$p107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$p134, out_$i135, out_$i136, out_$i140, out_$i141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$p150, out_$p151, out_$i152, out_$i153, out_$i157, out_$i158, out_$p160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i168, out_$p172, out_$i173, out_$p177, out_$p178, out_$i179, out_$i180, out_$p181, out_$i184, out_$i185, out_$p186, out_$p187, out_$p188, out_$i189, out_$i190, out_$p195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i203, out_$p207, out_$i210, out_$i211, out_$p212, out_$p213, out_$p214, out_$i215, out_$i216, out_$p220, out_$i221, out_$i222, out_$p223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i231, out_$p234, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$p242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i250, out_$p253, out_$i256, out_$i257, out_$p258, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$p264, out_$p265, out_$p266, out_$i267, out_$i268, out_$p269, out_$p270, out_$p271, out_$i272, out_$i273, out_$p277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i287, out_$i288, out_$p289, out_$i290, out_$i291, out_$p292, out_$i293, out_$i294, out_$i298, out_$i299, out_$p301, out_$i304, out_$i305, out_$p306, out_$i307, out_$i308, out_$p309, out_$i310, out_$i311, out_$i315, out_$i316, out_$p318, out_$i321, out_$i322, out_$p323, out_$i324, out_$i325, out_$p326, out_$i327, out_$i330, out_$i331, out_$p333, out_$p334, out_$p335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$p345, out_$i346, out_$i347, out_$p348, out_$i349, out_$i350, out_$p332, out_$i328, out_$i329, out_$i319, out_$i320, out_$i302, out_$i303, out_$i285, out_$i286, out_$i254, out_$i255, out_$i235, out_$i236, out_$i208, out_$i209, out_$i182, out_$i183, out_$i83, out_$i84, out_$i85, out_$p86, out_$i355, out_$i356, out_$p67, out_$i68, out_$i69, out_$i70, out_$i357, out_$i358, out_$p359 := in_$i71, in_$i72, in_$p73, in_$p74, in_$i75, in_$i76, in_$p78, in_$p79, in_$i80, in_$i81, in_$p82, in_$i87, in_$i88, in_$p89, in_$p90, in_$i91, in_$i92, in_$p94, in_$p95, in_$i96, in_$i97, in_$p98, in_$i99, in_$i100, in_$i104, in_$i105, in_$i106, in_$p107, in_$p108, in_$i109, in_$i110, in_$p111, in_$p112, in_$p113, in_$i114, in_$i115, in_$i119, in_$i120, in_$p121, in_$p122, in_$i123, in_$i124, in_$i125, in_$i126, in_$p127, in_$p128, in_$i129, in_$i130, in_$i131, in_$i132, in_$p133, in_$p134, in_$i135, in_$i136, in_$i140, in_$i141, in_$p142, in_$p143, in_$p144, in_$i145, in_$i146, in_$p147, in_$i148, in_$i149, in_$p150, in_$p151, in_$i152, in_$i153, in_$i157, in_$i158, in_$p160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i168, in_$p172, in_$i173, in_$p177, in_$p178, in_$i179, in_$i180, in_$p181, in_$i184, in_$i185, in_$p186, in_$p187, in_$p188, in_$i189, in_$i190, in_$p195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i203, in_$p207, in_$i210, in_$i211, in_$p212, in_$p213, in_$p214, in_$i215, in_$i216, in_$p220, in_$i221, in_$i222, in_$p223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i231, in_$p234, in_$i237, in_$i238, in_$p239, in_$i240, in_$i241, in_$p242, in_$i243, in_$i244, in_$i245, in_$i246, in_$i250, in_$p253, in_$i256, in_$i257, in_$p258, in_$i259, in_$i260, in_$p261, in_$i262, in_$i263, in_$p264, in_$p265, in_$p266, in_$i267, in_$i268, in_$p269, in_$p270, in_$p271, in_$i272, in_$i273, in_$p277, in_$i278, in_$i279, in_$i280, in_$i281, in_$i287, in_$i288, in_$p289, in_$i290, in_$i291, in_$p292, in_$i293, in_$i294, in_$i298, in_$i299, in_$p301, in_$i304, in_$i305, in_$p306, in_$i307, in_$i308, in_$p309, in_$i310, in_$i311, in_$i315, in_$i316, in_$p318, in_$i321, in_$i322, in_$p323, in_$i324, in_$i325, in_$p326, in_$i327, in_$i330, in_$i331, in_$p333, in_$p334, in_$p335, in_$i336, in_$i337, in_$i338, in_$i339, in_$i340, in_$i341, in_$p345, in_$i346, in_$i347, in_$p348, in_$i349, in_$i350, in_$p332, in_$i328, in_$i329, in_$i319, in_$i320, in_$i302, in_$i303, in_$i285, in_$i286, in_$i254, in_$i255, in_$i235, in_$i236, in_$i208, in_$i209, in_$i182, in_$i183, in_$i83, in_$i84, in_$i85, in_$p86, in_$i355, in_$i356, in_$p67, in_$i68, in_$i69, in_$i70, in_$i357, in_$i358, in_$p359;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1730;

  $bb133:
    assume out_$i356 == 1;
    assume {:verifier.code 0} true;
    out_$p67, out_$i68, out_$i69, out_$i70 := out_$p86, out_$i85, out_$i355, out_$i83;
    goto $bb133_dummy;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    out_$i357, out_$i358, out_$p359 := out_$i83, out_$i85, out_$p86;
    assume true;
    goto $bb133;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    out_$i356 := $ult.i32(out_$i355, in_$i44);
    goto corral_source_split_1749;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    out_$i355 := $add.i32(out_$i84, 1);
    call {:si_unique_call 355} {:cexpr "i"} boogie_si_record_i32(out_$i355);
    goto corral_source_split_1748;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1747;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$p86 := out_$i182, out_$i104, out_$i183, out_$p67;
    goto $bb35;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$p86 := out_$i70, out_$i104, out_$i68, out_$p143;
    goto $bb35;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$p86 := out_$i70, out_$i69, out_$i68, out_$p67;
    goto $bb35;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84, out_$i85, out_$p86 := out_$i70, out_$i69, out_$i68, out_$p67;
    goto $bb35;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p82, out_$i81);
    goto corral_source_split_1745;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1744;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    out_$i81 := $or.i32(out_$i80, 2);
    goto corral_source_split_1743;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.0, out_$p79);
    goto corral_source_split_1742;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1741;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p78, $sub.i64(0, 1));
    goto corral_source_split_1740;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(1120, 1));
    goto corral_source_split_1739;

  $bb33:
    assume out_$i76 == 1;
    goto corral_source_split_1738;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i75, 0);
    goto corral_source_split_1736;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} out_$i75 := strcasecmp(out_$p74, .str.40);
    call {:si_unique_call 354} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_1735;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_1734;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref(in_$p1, $mul.ref(out_$i72, 8));
    goto corral_source_split_1733;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i32.i64(out_$i69);
    out_$i72 := $add.i64(1, out_$i71);
    goto corral_source_split_1732;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p98, out_$i97);
    goto corral_source_split_1764;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1763;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    out_$i97 := $or.i32(out_$i96, 1);
    goto corral_source_split_1762;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i32($M.0, out_$p95);
    goto corral_source_split_1761;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1760;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p94, 0);
    goto corral_source_split_1759;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(1120, 1));
    goto corral_source_split_1758;

  $bb37:
    assume out_$i92 == 1;
    goto corral_source_split_1757;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 0);
    goto corral_source_split_1755;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} out_$i91 := strcasecmp(out_$p90, .str.41);
    call {:si_unique_call 357} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_1754;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.0, out_$p89);
    goto corral_source_split_1753;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref(in_$p1, $mul.ref(out_$i88, 8));
    goto corral_source_split_1752;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i87 := $zext.i32.i64(out_$i69);
    out_$i88 := $add.i64(1, out_$i87);
    goto corral_source_split_1751;

  $bb34:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p147, out_$i146);
    goto corral_source_split_1828;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1827;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    out_$i146 := $or.i32(out_$i145, 1024);
    goto corral_source_split_1826;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    out_$i145 := $load.i32($M.0, out_$p144);
    goto corral_source_split_1825;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1824;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    out_$p143 := $load.ref($M.0, out_$p142);
    goto corral_source_split_1823;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref(in_$p1, $mul.ref(out_$i141, 8));
    goto corral_source_split_1822;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i140 := $zext.i32.i64(out_$i104);
    out_$i141 := $add.i64(1, out_$i140);
    goto corral_source_split_1821;

  $bb49:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb53:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    out_$i136 := $ne.i32(out_$i135, 0);
    goto corral_source_split_1813;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} out_$i135 := strcmp(.str.46, out_$p134);
    call {:si_unique_call 366} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i135);
    goto corral_source_split_1812;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    out_$p134 := $load.ref($M.0, out_$p133);
    goto corral_source_split_1811;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref(in_$p1, $mul.ref(out_$i132, 8));
    goto corral_source_split_1810;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    out_$i131 := $zext.i32.i64(out_$i104);
    out_$i132 := $add.i64(1, out_$i131);
    goto corral_source_split_1809;

  $bb50:
    assume out_$i130 == 1;
    goto corral_source_split_1808;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    out_$i130 := $ne.i32(out_$i129, 0);
    goto corral_source_split_1806;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} out_$i129 := strcmp(.str.45, out_$p128);
    call {:si_unique_call 364} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i129);
    goto corral_source_split_1805;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    out_$p128 := $load.ref($M.0, out_$p127);
    goto corral_source_split_1804;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref(in_$p1, $mul.ref(out_$i126, 8));
    goto corral_source_split_1803;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    out_$i125 := $zext.i32.i64(out_$i104);
    out_$i126 := $add.i64(1, out_$i125);
    goto corral_source_split_1802;

  $bb48:
    assume out_$i124 == 1;
    goto corral_source_split_1801;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    out_$i124 := $ne.i32(out_$i123, 0);
    goto corral_source_split_1799;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} out_$i123 := strcmp(.str.35, out_$p122);
    call {:si_unique_call 362} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i123);
    goto corral_source_split_1798;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    out_$p122 := $load.ref($M.0, out_$p121);
    goto corral_source_split_1797;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref(in_$p1, $mul.ref(out_$i120, 8));
    goto corral_source_split_1796;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i119 := $zext.i32.i64(out_$i104);
    out_$i120 := $add.i64(1, out_$i119);
    goto corral_source_split_1795;

  $bb46:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    out_$i115 := $ne.i32(out_$i114, 10);
    goto corral_source_split_1787;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i32($M.0, out_$p113);
    goto corral_source_split_1786;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(out_$p112, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1785;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.0, out_$p111);
    goto corral_source_split_1784;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_1783;

  $bb43:
    assume out_$i110 == 1;
    goto corral_source_split_1782;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i109, 0);
    goto corral_source_split_1780;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} out_$i109 := strcasecmp(out_$p108, .str.43);
    call {:si_unique_call 360} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_1779;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    out_$p108 := $load.ref($M.0, out_$p107);
    goto corral_source_split_1778;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref(in_$p1, $mul.ref(out_$i106, 8));
    goto corral_source_split_1777;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    out_$i105 := $zext.i32.i64(out_$i69);
    out_$i106 := $add.i64(1, out_$i105);
    goto corral_source_split_1776;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i104 := $add.i32(out_$i69, 1);
    call {:si_unique_call 358} {:cexpr "i"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_1775;

  $bb41:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    out_$i100 := $uge.i32(out_$i99, in_$i44);
    goto corral_source_split_1767;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i99 := $add.i32(out_$i69, 1);
    goto corral_source_split_1766;

  $bb38:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb66:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1874;

  $bb75:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i182, out_$i183 := out_$i208, out_$i209;
    goto $bb66;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    out_$i182, out_$i183 := out_$i70, out_$i68;
    goto $bb66;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p181, out_$i180);
    goto corral_source_split_1872;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1871;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    out_$i180 := $or.i32(out_$i179, 4);
    goto corral_source_split_1870;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    out_$i179 := $load.i32($M.0, out_$p178);
    goto corral_source_split_1869;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    out_$p178 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1868;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p177, 0);
    goto corral_source_split_1867;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    out_$p177 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i173, 848)), $mul.ref(16, 1)), $mul.ref(528, 1));
    goto corral_source_split_1866;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    out_$i173 := $load.i64($M.1, in_$p3);
    goto corral_source_split_1865;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} clear_bit(1, out_$p172);
    goto corral_source_split_1864;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i168, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_1863;

  $bb65:
    assume {:verifier.code 0} true;
    out_$i168 := $load.i64($M.1, in_$p3);
    goto corral_source_split_1862;

  $bb64:
    assume !(out_$i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    out_$i164 := $ule.i64(out_$i162, out_$i163);
    goto corral_source_split_1850;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i64($M.1, in_$p3);
    goto corral_source_split_1849;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    out_$i162 := $sext.i32.i64(out_$i161);
    goto corral_source_split_1848;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    out_$i161 := $load.i32($M.0, out_$p160);
    goto corral_source_split_1847;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_1846;

  $bb61:
    assume out_$i158 == 1;
    goto corral_source_split_1845;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    out_$i158 := $eq.i32(out_$i157, 0);
    goto corral_source_split_1843;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} out_$i157 := strcasecmp(out_$p108, .str.49);
    call {:si_unique_call 370} {:cexpr "tmp___20"} boogie_si_record_i32(out_$i157);
    goto corral_source_split_1842;

  $bb59:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    out_$i153 := $slt.i32(out_$i152, 0);
    goto corral_source_split_1834;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} out_$i152 := kstrtoul(out_$p151, 10, in_$p3);
    call {:si_unique_call 368} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i152);
    goto corral_source_split_1833;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    out_$p151 := $load.ref($M.0, out_$p150);
    goto corral_source_split_1832;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref(in_$p1, $mul.ref(out_$i149, 8));
    goto corral_source_split_1831;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i148 := $zext.i32.i64(out_$i104);
    out_$i149 := $add.i64(1, out_$i148);
    goto corral_source_split_1830;

  $bb44:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb84:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i208, out_$i209 := out_$i235, out_$i236;
    goto $bb75;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    out_$i208, out_$i209 := out_$i70, out_$i68;
    goto $bb75;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} set_bit(4, out_$p207);
    goto corral_source_split_1907;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$p207 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i203, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_1906;

  $bb74:
    assume {:verifier.code 0} true;
    out_$i203 := $load.i64($M.1, in_$p3);
    goto corral_source_split_1905;

  $bb73:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    out_$i199 := $ule.i64(out_$i197, out_$i198);
    goto corral_source_split_1897;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    out_$i198 := $load.i64($M.1, in_$p3);
    goto corral_source_split_1896;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    out_$i197 := $sext.i32.i64(out_$i196);
    goto corral_source_split_1895;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    out_$i196 := $load.i32($M.0, out_$p195);
    goto corral_source_split_1894;

  $bb71:
    assume {:verifier.code 0} true;
    out_$p195 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_1893;

  $bb70:
    assume !(out_$i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    out_$i190 := $ne.i32(out_$i189, 1);
    goto corral_source_split_1881;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    out_$i189 := $load.i32($M.0, out_$p188);
    goto corral_source_split_1880;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    out_$p188 := $add.ref($add.ref(out_$p187, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1879;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    out_$p187 := $load.ref($M.0, out_$p186);
    goto corral_source_split_1878;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    out_$p186 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_1877;

  $bb67:
    assume out_$i185 == 1;
    goto corral_source_split_1876;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    out_$i185 := $eq.i32(out_$i184, 0);
    goto corral_source_split_1854;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} out_$i184 := strcasecmp(out_$p108, .str.51);
    call {:si_unique_call 372} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i184);
    goto corral_source_split_1853;

  $bb62:
    assume !(out_$i158 == 1);
    goto corral_source_split_1852;

  $bb93:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i235, out_$i236 := out_$i254, out_$i255;
    goto $bb84;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    out_$i235, out_$i236 := out_$i70, out_$i68;
    goto $bb84;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p234, out_$i231);
    goto corral_source_split_1945;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    out_$p234 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(1568, 1)), $mul.ref(216, 1));
    goto corral_source_split_1944;

  $bb83:
    assume {:verifier.code 0} true;
    out_$i231 := $load.i64($M.1, in_$p3);
    goto corral_source_split_1943;

  $bb82:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    out_$i227 := $ugt.i64(out_$i226, 16383);
    goto corral_source_split_1935;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    out_$i226 := $load.i64($M.1, in_$p3);
    goto corral_source_split_1934;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, in_$p3, out_$i225);
    goto corral_source_split_1933;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    out_$i225 := $udiv.i64(out_$i224, 2);
    goto corral_source_split_1932;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    out_$i224 := $load.i64($M.1, in_$p3);
    goto corral_source_split_1931;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p223, out_$i222);
    goto corral_source_split_1930;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    out_$p223 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1929;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    out_$i222 := $or.i32(out_$i221, 64);
    goto corral_source_split_1928;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    out_$i221 := $load.i32($M.0, out_$p220);
    goto corral_source_split_1927;

  $bb80:
    assume {:verifier.code 0} true;
    out_$p220 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1926;

  $bb79:
    assume !(out_$i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    out_$i216 := $ne.i32(out_$i215, 1);
    goto corral_source_split_1914;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    out_$i215 := $load.i32($M.0, out_$p214);
    goto corral_source_split_1913;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    out_$p214 := $add.ref($add.ref(out_$p213, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1912;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    out_$p213 := $load.ref($M.0, out_$p212);
    goto corral_source_split_1911;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    out_$p212 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_1910;

  $bb76:
    assume out_$i211 == 1;
    goto corral_source_split_1909;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    out_$i211 := $eq.i32(out_$i210, 0);
    goto corral_source_split_1885;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} out_$i210 := strcasecmp(out_$p108, .str.54);
    call {:si_unique_call 375} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i210);
    goto corral_source_split_1884;

  $bb68:
    assume !(out_$i185 == 1);
    goto corral_source_split_1883;

  $bb105:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i254, out_$i255 := out_$i285, out_$i286;
    goto $bb93;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    out_$i254, out_$i255 := out_$i70, out_$i68;
    goto $bb93;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p253, out_$i250);
    goto corral_source_split_1971;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    out_$p253 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(1568, 1)), $mul.ref(208, 1));
    goto corral_source_split_1970;

  $bb92:
    assume {:verifier.code 0} true;
    out_$i250 := $load.i64($M.1, in_$p3);
    goto corral_source_split_1969;

  $bb91:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    out_$i246 := $slt.i64(out_$i245, 0);
    goto corral_source_split_1967;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    out_$i245 := $load.i64($M.1, in_$p3);
    goto corral_source_split_1966;

  $bb89:
    assume !(out_$i244 == 1);
    goto corral_source_split_1965;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    out_$i244 := $eq.i64(out_$i243, 0);
    goto corral_source_split_1954;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    out_$i243 := $load.i64($M.1, in_$p3);
    goto corral_source_split_1953;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p242, out_$i241);
    goto corral_source_split_1952;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    out_$p242 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1951;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    out_$i241 := $or.i32(out_$i240, 8);
    goto corral_source_split_1950;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    out_$i240 := $load.i32($M.0, out_$p239);
    goto corral_source_split_1949;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    out_$p239 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1948;

  $bb85:
    assume out_$i238 == 1;
    goto corral_source_split_1947;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    out_$i238 := $eq.i32(out_$i237, 0);
    goto corral_source_split_1918;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} out_$i237 := strcasecmp(out_$p108, .str.57);
    call {:si_unique_call 378} {:cexpr "tmp___17"} boogie_si_record_i32(out_$i237);
    goto corral_source_split_1917;

  $bb77:
    assume !(out_$i211 == 1);
    goto corral_source_split_1916;

  $bb111:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i285, out_$i286 := out_$i302, out_$i303;
    goto $bb105;

  $bb104:
    assume {:verifier.code 0} true;
    out_$i285, out_$i286 := out_$i70, out_$i68;
    goto $bb105;

  $bb103:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    out_$i281 := $ne.i32(out_$i280, 0);
    goto corral_source_split_2009;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} out_$i280 := raid5_set_cache_size(out_$p277, out_$i279);
    call {:si_unique_call 384} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i280);
    goto corral_source_split_2008;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    out_$i279 := $trunc.i64.i32(out_$i278);
    goto corral_source_split_2007;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    out_$i278 := $load.i64($M.1, in_$p3);
    goto corral_source_split_2006;

  $bb101:
    assume {:verifier.code 0} true;
    out_$p277 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(16, 1));
    goto corral_source_split_2005;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb97:
    assume {:verifier.code 0} true;
    assume !(out_$i268 == 1);
    goto $bb98;

  $bb100:
    assume {:verifier.code 0} true;
    assume !(out_$i273 == 1);
    goto $bb98;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    out_$i273 := $ne.i32(out_$i272, 6);
    goto corral_source_split_1997;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    out_$i272 := $load.i32($M.0, out_$p271);
    goto corral_source_split_1996;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    out_$p271 := $add.ref($add.ref(out_$p270, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1995;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    out_$p270 := $load.ref($M.0, out_$p269);
    goto corral_source_split_1994;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    out_$p269 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_1993;

  $bb96:
    assume out_$i268 == 1;
    goto corral_source_split_1992;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    out_$i268 := $ne.i32(out_$i267, 5);
    goto corral_source_split_1986;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    out_$i267 := $load.i32($M.0, out_$p266);
    goto corral_source_split_1985;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    out_$p266 := $add.ref($add.ref(out_$p265, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1984;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    out_$p265 := $load.ref($M.0, out_$p264);
    goto corral_source_split_1983;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    out_$p264 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_1982;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, in_$p3, out_$i263);
    goto corral_source_split_1981;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    out_$i263 := $udiv.i64(out_$i262, 2);
    goto corral_source_split_1980;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    out_$i262 := $load.i64($M.1, in_$p3);
    goto corral_source_split_1979;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p261, out_$i260);
    goto corral_source_split_1978;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    out_$p261 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1977;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    out_$i260 := $or.i32(out_$i259, 128);
    goto corral_source_split_1976;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    out_$i259 := $load.i32($M.0, out_$p258);
    goto corral_source_split_1975;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    out_$p258 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_1974;

  $bb94:
    assume out_$i257 == 1;
    goto corral_source_split_1973;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    out_$i257 := $eq.i32(out_$i256, 0);
    goto corral_source_split_1958;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} out_$i256 := strcasecmp(out_$p108, .str.59);
    call {:si_unique_call 380} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i256);
    goto corral_source_split_1957;

  $bb86:
    assume !(out_$i238 == 1);
    goto corral_source_split_1956;

  $bb117:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i302, out_$i303 := out_$i319, out_$i320;
    goto $bb111;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    out_$i302, out_$i303 := out_$i70, out_$i68;
    goto $bb111;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p301, out_$i299);
    goto corral_source_split_2039;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    out_$p301 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(656, 1));
    goto corral_source_split_2038;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    out_$i299 := $trunc.i64.i32(out_$i298);
    goto corral_source_split_2037;

  $bb110:
    assume {:verifier.code 0} true;
    out_$i298 := $load.i64($M.1, in_$p3);
    goto corral_source_split_2036;

  $bb109:
    assume !(out_$i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    out_$i294 := $ugt.i64(out_$i293, 2147483647);
    goto corral_source_split_2024;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    out_$i293 := $load.i64($M.1, in_$p3);
    goto corral_source_split_2023;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p292, out_$i291);
    goto corral_source_split_2022;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    out_$p292 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_2021;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    out_$i291 := $or.i32(out_$i290, 16);
    goto corral_source_split_2020;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    out_$i290 := $load.i32($M.0, out_$p289);
    goto corral_source_split_2019;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    out_$p289 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_2018;

  $bb106:
    assume out_$i288 == 1;
    goto corral_source_split_2017;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    out_$i288 := $eq.i32(out_$i287, 0);
    goto corral_source_split_1990;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} out_$i287 := strcasecmp(out_$p108, .str.62);
    call {:si_unique_call 382} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i287);
    goto corral_source_split_1989;

  $bb95:
    assume !(out_$i257 == 1);
    goto corral_source_split_1988;

  $bb120:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i319, out_$i320 := out_$i328, out_$i329;
    goto $bb117;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    out_$i319, out_$i320 := out_$i70, out_$i68;
    goto $bb117;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p318, out_$i316);
    goto corral_source_split_2063;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    out_$p318 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(660, 1));
    goto corral_source_split_2062;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    out_$i316 := $trunc.i64.i32(out_$i315);
    goto corral_source_split_2061;

  $bb116:
    assume {:verifier.code 0} true;
    out_$i315 := $load.i64($M.1, in_$p3);
    goto corral_source_split_2060;

  $bb115:
    assume !(out_$i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    out_$i311 := $ugt.i64(out_$i310, 2147483647);
    goto corral_source_split_2048;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    out_$i310 := $load.i64($M.1, in_$p3);
    goto corral_source_split_2047;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p309, out_$i308);
    goto corral_source_split_2046;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    out_$p309 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_2045;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    out_$i308 := $or.i32(out_$i307, 32);
    goto corral_source_split_2044;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    out_$i307 := $load.i32($M.0, out_$p306);
    goto corral_source_split_2043;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    out_$p306 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_2042;

  $bb112:
    assume out_$i305 == 1;
    goto corral_source_split_2041;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    out_$i305 := $eq.i32(out_$i304, 0);
    goto corral_source_split_2028;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} out_$i304 := strcasecmp(out_$p108, .str.64);
    call {:si_unique_call 386} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i304);
    goto corral_source_split_2027;

  $bb107:
    assume !(out_$i288 == 1);
    goto corral_source_split_2026;

  $bb132:
    assume {:verifier.code 0} true;
    out_$i328, out_$i329 := out_$i70, out_$i350;
    goto $bb120;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    out_$i328, out_$i329 := out_$i327, out_$i68;
    goto $bb120;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    out_$i327 := $load.i64($M.1, in_$p3);
    call {:si_unique_call 389} {:cexpr "region_size"} boogie_si_record_i64(out_$i327);
    goto corral_source_split_2071;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p326, out_$i325);
    goto corral_source_split_2070;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    out_$p326 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_2069;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    out_$i325 := $or.i32(out_$i324, 256);
    goto corral_source_split_2068;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    out_$i324 := $load.i32($M.0, out_$p323);
    goto corral_source_split_2067;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    out_$p323 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_2066;

  $bb118:
    assume out_$i322 == 1;
    goto corral_source_split_2065;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    out_$i322 := $eq.i32(out_$i321, 0);
    goto corral_source_split_2052;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} out_$i321 := strcasecmp(out_$p108, .str.66);
    call {:si_unique_call 388} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i321);
    goto corral_source_split_2051;

  $bb113:
    assume !(out_$i305 == 1);
    goto corral_source_split_2050;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    out_$i350 := $trunc.i64.i32(out_$i349);
    call {:si_unique_call 393} {:cexpr "raid10_copies"} boogie_si_record_i32(out_$i350);
    goto corral_source_split_2110;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    out_$i349 := $load.i64($M.1, in_$p3);
    goto corral_source_split_2109;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p348, out_$i347);
    goto corral_source_split_2108;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    out_$p348 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_2107;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    out_$i347 := $or.i32(out_$i346, 512);
    goto corral_source_split_2106;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    out_$i346 := $load.i32($M.0, out_$p345);
    goto corral_source_split_2105;

  $bb131:
    assume {:verifier.code 0} true;
    out_$p345 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_2104;

  $bb130:
    assume !(out_$i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    out_$i341 := $ugt.i64(out_$i340, 255);
    goto corral_source_split_2102;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    out_$i340 := $load.i64($M.1, in_$p3);
    goto corral_source_split_2101;

  $bb128:
    assume !(out_$i339 == 1);
    goto corral_source_split_2100;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    out_$i339 := $ule.i64(out_$i338, 1);
    goto corral_source_split_2093;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    out_$i338 := $load.i64($M.1, in_$p3);
    goto corral_source_split_2092;

  $bb124:
    assume out_$i337 == 1;
    goto corral_source_split_2091;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    out_$p332 := out_$p108;
    assume true;
    goto $bb124;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    out_$i337 := $eq.i32(out_$i336, 10);
    goto corral_source_split_2082;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    out_$i336 := $load.i32($M.0, out_$p335);
    goto corral_source_split_2081;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    out_$p335 := $add.ref($add.ref(out_$p334, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2080;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    out_$p334 := $load.ref($M.0, out_$p333);
    goto corral_source_split_2079;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    out_$p333 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2112, 1));
    goto corral_source_split_2078;

  $bb121:
    assume out_$i331 == 1;
    goto corral_source_split_2077;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    out_$p332 := out_$p108;
    assume true;
    goto $bb121;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    out_$i331 := $eq.i32(out_$i330, 0);
    goto corral_source_split_2075;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} out_$i330 := strcasecmp(out_$p108, .str.67);
    call {:si_unique_call 391} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i330);
    goto corral_source_split_2074;

  $bb119:
    assume !(out_$i322 == 1);
    goto corral_source_split_2073;

  $bb133_dummy:
    call {:si_unique_call 1} out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$p94, out_$p95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i104, out_$i105, out_$i106, out_$p107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$p134, out_$i135, out_$i136, out_$i140, out_$i141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$p150, out_$p151, out_$i152, out_$i153, out_$i157, out_$i158, out_$p160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i168, out_$p172, out_$i173, out_$p177, out_$p178, out_$i179, out_$i180, out_$p181, out_$i184, out_$i185, out_$p186, out_$p187, out_$p188, out_$i189, out_$i190, out_$p195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i203, out_$p207, out_$i210, out_$i211, out_$p212, out_$p213, out_$p214, out_$i215, out_$i216, out_$p220, out_$i221, out_$i222, out_$p223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i231, out_$p234, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$p242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i250, out_$p253, out_$i256, out_$i257, out_$p258, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$p264, out_$p265, out_$p266, out_$i267, out_$i268, out_$p269, out_$p270, out_$p271, out_$i272, out_$i273, out_$p277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i287, out_$i288, out_$p289, out_$i290, out_$i291, out_$p292, out_$i293, out_$i294, out_$i298, out_$i299, out_$p301, out_$i304, out_$i305, out_$p306, out_$i307, out_$i308, out_$p309, out_$i310, out_$i311, out_$i315, out_$i316, out_$p318, out_$i321, out_$i322, out_$p323, out_$i324, out_$i325, out_$p326, out_$i327, out_$i330, out_$i331, out_$p333, out_$p334, out_$p335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$p345, out_$i346, out_$i347, out_$p348, out_$i349, out_$i350, out_$p332, out_$i328, out_$i329, out_$i319, out_$i320, out_$i302, out_$i303, out_$i285, out_$i286, out_$i254, out_$i255, out_$i235, out_$i236, out_$i208, out_$i209, out_$i182, out_$i183, out_$i83, out_$i84, out_$i85, out_$p86, out_$i355, out_$i356, out_$p67, out_$i68, out_$i69, out_$i70, out_$i357, out_$i358, out_$p359 := parse_raid_params_loop_$bb31(in_$p0, in_$p1, in_$p3, in_$i44, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$p94, out_$p95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i104, out_$i105, out_$i106, out_$p107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$p134, out_$i135, out_$i136, out_$i140, out_$i141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$p150, out_$p151, out_$i152, out_$i153, out_$i157, out_$i158, out_$p160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i168, out_$p172, out_$i173, out_$p177, out_$p178, out_$i179, out_$i180, out_$p181, out_$i184, out_$i185, out_$p186, out_$p187, out_$p188, out_$i189, out_$i190, out_$p195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i203, out_$p207, out_$i210, out_$i211, out_$p212, out_$p213, out_$p214, out_$i215, out_$i216, out_$p220, out_$i221, out_$i222, out_$p223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i231, out_$p234, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$p242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i250, out_$p253, out_$i256, out_$i257, out_$p258, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$p264, out_$p265, out_$p266, out_$i267, out_$i268, out_$p269, out_$p270, out_$p271, out_$i272, out_$i273, out_$p277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i287, out_$i288, out_$p289, out_$i290, out_$i291, out_$p292, out_$i293, out_$i294, out_$i298, out_$i299, out_$p301, out_$i304, out_$i305, out_$p306, out_$i307, out_$i308, out_$p309, out_$i310, out_$i311, out_$i315, out_$i316, out_$p318, out_$i321, out_$i322, out_$p323, out_$i324, out_$i325, out_$p326, out_$i327, out_$i330, out_$i331, out_$p333, out_$p334, out_$p335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$p345, out_$i346, out_$i347, out_$p348, out_$i349, out_$i350, out_$p332, out_$i328, out_$i329, out_$i319, out_$i320, out_$i302, out_$i303, out_$i285, out_$i286, out_$i254, out_$i255, out_$i235, out_$i236, out_$i208, out_$i209, out_$i182, out_$i183, out_$i83, out_$i84, out_$i85, out_$p86, out_$i355, out_$i356, out_$p67, out_$i68, out_$i69, out_$i70, out_$i357, out_$i358, out_$p359);
    return;

  exit:
    return;
}



procedure parse_raid_params_loop_$bb31(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i44: i32, in_$i71: i64, in_$i72: i64, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$p78: ref, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$p82: ref, in_$i87: i64, in_$i88: i64, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$p94: ref, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$p98: ref, in_$i99: i32, in_$i100: i1, in_$i104: i32, in_$i105: i64, in_$i106: i64, in_$p107: ref, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i32, in_$i115: i1, in_$i119: i64, in_$i120: i64, in_$p121: ref, in_$p122: ref, in_$i123: i32, in_$i124: i1, in_$i125: i64, in_$i126: i64, in_$p127: ref, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$i131: i64, in_$i132: i64, in_$p133: ref, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$i140: i64, in_$i141: i64, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$i145: i32, in_$i146: i32, in_$p147: ref, in_$i148: i64, in_$i149: i64, in_$p150: ref, in_$p151: ref, in_$i152: i32, in_$i153: i1, in_$i157: i32, in_$i158: i1, in_$p160: ref, in_$i161: i32, in_$i162: i64, in_$i163: i64, in_$i164: i1, in_$i168: i64, in_$p172: ref, in_$i173: i64, in_$p177: ref, in_$p178: ref, in_$i179: i32, in_$i180: i32, in_$p181: ref, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$p187: ref, in_$p188: ref, in_$i189: i32, in_$i190: i1, in_$p195: ref, in_$i196: i32, in_$i197: i64, in_$i198: i64, in_$i199: i1, in_$i203: i64, in_$p207: ref, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$p213: ref, in_$p214: ref, in_$i215: i32, in_$i216: i1, in_$p220: ref, in_$i221: i32, in_$i222: i32, in_$p223: ref, in_$i224: i64, in_$i225: i64, in_$i226: i64, in_$i227: i1, in_$i231: i64, in_$p234: ref, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i240: i32, in_$i241: i32, in_$p242: ref, in_$i243: i64, in_$i244: i1, in_$i245: i64, in_$i246: i1, in_$i250: i64, in_$p253: ref, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$i259: i32, in_$i260: i32, in_$p261: ref, in_$i262: i64, in_$i263: i64, in_$p264: ref, in_$p265: ref, in_$p266: ref, in_$i267: i32, in_$i268: i1, in_$p269: ref, in_$p270: ref, in_$p271: ref, in_$i272: i32, in_$i273: i1, in_$p277: ref, in_$i278: i64, in_$i279: i32, in_$i280: i32, in_$i281: i1, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$i290: i32, in_$i291: i32, in_$p292: ref, in_$i293: i64, in_$i294: i1, in_$i298: i64, in_$i299: i32, in_$p301: ref, in_$i304: i32, in_$i305: i1, in_$p306: ref, in_$i307: i32, in_$i308: i32, in_$p309: ref, in_$i310: i64, in_$i311: i1, in_$i315: i64, in_$i316: i32, in_$p318: ref, in_$i321: i32, in_$i322: i1, in_$p323: ref, in_$i324: i32, in_$i325: i32, in_$p326: ref, in_$i327: i64, in_$i330: i32, in_$i331: i1, in_$p333: ref, in_$p334: ref, in_$p335: ref, in_$i336: i32, in_$i337: i1, in_$i338: i64, in_$i339: i1, in_$i340: i64, in_$i341: i1, in_$p345: ref, in_$i346: i32, in_$i347: i32, in_$p348: ref, in_$i349: i64, in_$i350: i32, in_$p332: ref, in_$i328: i64, in_$i329: i32, in_$i319: i64, in_$i320: i32, in_$i302: i64, in_$i303: i32, in_$i285: i64, in_$i286: i32, in_$i254: i64, in_$i255: i32, in_$i235: i64, in_$i236: i32, in_$i208: i64, in_$i209: i32, in_$i182: i64, in_$i183: i32, in_$i83: i64, in_$i84: i32, in_$i85: i32, in_$p86: ref, in_$i355: i32, in_$i356: i1, in_$p67: ref, in_$i68: i32, in_$i69: i32, in_$i70: i64, in_$i357: i64, in_$i358: i32, in_$p359: ref) returns (out_$i71: i64, out_$i72: i64, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$p78: ref, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$p82: ref, out_$i87: i64, out_$i88: i64, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$p94: ref, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$p98: ref, out_$i99: i32, out_$i100: i1, out_$i104: i32, out_$i105: i64, out_$i106: i64, out_$p107: ref, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i32, out_$i115: i1, out_$i119: i64, out_$i120: i64, out_$p121: ref, out_$p122: ref, out_$i123: i32, out_$i124: i1, out_$i125: i64, out_$i126: i64, out_$p127: ref, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$i131: i64, out_$i132: i64, out_$p133: ref, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$i140: i64, out_$i141: i64, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$i145: i32, out_$i146: i32, out_$p147: ref, out_$i148: i64, out_$i149: i64, out_$p150: ref, out_$p151: ref, out_$i152: i32, out_$i153: i1, out_$i157: i32, out_$i158: i1, out_$p160: ref, out_$i161: i32, out_$i162: i64, out_$i163: i64, out_$i164: i1, out_$i168: i64, out_$p172: ref, out_$i173: i64, out_$p177: ref, out_$p178: ref, out_$i179: i32, out_$i180: i32, out_$p181: ref, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$p187: ref, out_$p188: ref, out_$i189: i32, out_$i190: i1, out_$p195: ref, out_$i196: i32, out_$i197: i64, out_$i198: i64, out_$i199: i1, out_$i203: i64, out_$p207: ref, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$p213: ref, out_$p214: ref, out_$i215: i32, out_$i216: i1, out_$p220: ref, out_$i221: i32, out_$i222: i32, out_$p223: ref, out_$i224: i64, out_$i225: i64, out_$i226: i64, out_$i227: i1, out_$i231: i64, out_$p234: ref, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i240: i32, out_$i241: i32, out_$p242: ref, out_$i243: i64, out_$i244: i1, out_$i245: i64, out_$i246: i1, out_$i250: i64, out_$p253: ref, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$i259: i32, out_$i260: i32, out_$p261: ref, out_$i262: i64, out_$i263: i64, out_$p264: ref, out_$p265: ref, out_$p266: ref, out_$i267: i32, out_$i268: i1, out_$p269: ref, out_$p270: ref, out_$p271: ref, out_$i272: i32, out_$i273: i1, out_$p277: ref, out_$i278: i64, out_$i279: i32, out_$i280: i32, out_$i281: i1, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$i290: i32, out_$i291: i32, out_$p292: ref, out_$i293: i64, out_$i294: i1, out_$i298: i64, out_$i299: i32, out_$p301: ref, out_$i304: i32, out_$i305: i1, out_$p306: ref, out_$i307: i32, out_$i308: i32, out_$p309: ref, out_$i310: i64, out_$i311: i1, out_$i315: i64, out_$i316: i32, out_$p318: ref, out_$i321: i32, out_$i322: i1, out_$p323: ref, out_$i324: i32, out_$i325: i32, out_$p326: ref, out_$i327: i64, out_$i330: i32, out_$i331: i1, out_$p333: ref, out_$p334: ref, out_$p335: ref, out_$i336: i32, out_$i337: i1, out_$i338: i64, out_$i339: i1, out_$i340: i64, out_$i341: i1, out_$p345: ref, out_$i346: i32, out_$i347: i32, out_$p348: ref, out_$i349: i64, out_$i350: i32, out_$p332: ref, out_$i328: i64, out_$i329: i32, out_$i319: i64, out_$i320: i32, out_$i302: i64, out_$i303: i32, out_$i285: i64, out_$i286: i32, out_$i254: i64, out_$i255: i32, out_$i235: i64, out_$i236: i32, out_$i208: i64, out_$i209: i32, out_$i182: i64, out_$i183: i32, out_$i83: i64, out_$i84: i32, out_$i85: i32, out_$p86: ref, out_$i355: i32, out_$i356: i1, out_$p67: ref, out_$i68: i32, out_$i69: i32, out_$i70: i64, out_$i357: i64, out_$i358: i32, out_$p359: ref);
  modifies $M.0, $M.1;



implementation parse_raid_params_loop_$bb23(in_$p0: ref, in_$p46: ref, in_$i50: i64, in_$p54: ref, in_$i55: i64, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i49: i32) returns (out_$i50: i64, out_$p54: ref, out_$i55: i64, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i49: i32)
{

  entry:
    out_$i50, out_$p54, out_$i55, out_$p59, out_$i60, out_$i61, out_$i62, out_$i49 := in_$i50, in_$p54, in_$i55, in_$p59, in_$i60, in_$i61, in_$i62, in_$i49;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1712;

  $bb25:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i49 := out_$i60;
    goto $bb25_dummy;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    out_$i62 := $ugt.i32(out_$i61, out_$i60);
    goto corral_source_split_1722;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, in_$p46);
    goto corral_source_split_1721;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i32(out_$i49, 1);
    call {:si_unique_call 352} {:cexpr "i"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_1720;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p59, $sub.i64(0, 1));
    goto corral_source_split_1719;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i55, 848)), $mul.ref(16, 1)), $mul.ref(528, 1));
    goto corral_source_split_1718;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i32.i64(out_$i49);
    goto corral_source_split_1717;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} set_bit(1, out_$p54);
    goto corral_source_split_1716;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i50, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_1715;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i32.i64(out_$i49);
    goto corral_source_split_1714;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb25_dummy:
    call {:si_unique_call 1} out_$i50, out_$p54, out_$i55, out_$p59, out_$i60, out_$i61, out_$i62, out_$i49 := parse_raid_params_loop_$bb23(in_$p0, in_$p46, out_$i50, out_$p54, out_$i55, out_$p59, out_$i60, out_$i61, out_$i62, out_$i49);
    return;

  exit:
    return;
}



procedure parse_raid_params_loop_$bb23(in_$p0: ref, in_$p46: ref, in_$i50: i64, in_$p54: ref, in_$i55: i64, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i49: i32) returns (out_$i50: i64, out_$p54: ref, out_$i55: i64, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i49: i32);
  modifies $M.0;



implementation dev_parms_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$i12: i64, in_$p16: ref, in_$i17: i64, in_$p20: ref, in_$i21: i64, in_$p24: ref, in_$i25: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p50: ref, in_$i51: i32, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i1, in_$i56: i32, in_$p58: ref, in_$i59: i64, in_$p63: ref, in_$i64: i64, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$i76: i64, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$i83: i64, in_$p87: ref, in_$i88: i64, in_$i89: i1, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i64, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$i110: i32, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$i115: i64, in_$p118: ref, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i125: i64, in_$p128: ref, in_$p129: ref, in_$i130: i64, in_$i131: i1, in_$i132: i64, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$i139: i64, in_$p143: ref, in_$i144: i32, in_$i145: i64, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$i152: i64, in_$p156: ref, in_$i157: i64, in_$p161: ref, in_$p163: ref, in_$i164: i64, in_$p168: ref, in_$i169: i32, in_$i170: i1, in_$i171: i32, in_$i172: i32, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$i173: i32, in_$p174: ref, in_$i175: i32, in_$i176: i1, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$i11: i32, in_$i177: i32, in_$i178: i32) returns (out_$i12: i64, out_$p16: ref, out_$i17: i64, out_$p20: ref, out_$i21: i64, out_$p24: ref, out_$i25: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p50: ref, out_$i51: i32, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i1, out_$i56: i32, out_$p58: ref, out_$i59: i64, out_$p63: ref, out_$i64: i64, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$i76: i64, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$i83: i64, out_$p87: ref, out_$i88: i64, out_$i89: i1, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i64, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$i110: i32, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$i115: i64, out_$p118: ref, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i125: i64, out_$p128: ref, out_$p129: ref, out_$i130: i64, out_$i131: i1, out_$i132: i64, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$i139: i64, out_$p143: ref, out_$i144: i32, out_$i145: i64, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$i152: i64, out_$p156: ref, out_$i157: i64, out_$p161: ref, out_$p163: ref, out_$i164: i64, out_$p168: ref, out_$i169: i32, out_$i170: i1, out_$i171: i32, out_$i172: i32, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$i173: i32, out_$p174: ref, out_$i175: i32, out_$i176: i1, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$i11: i32, out_$i177: i32, out_$i178: i32)
{

  entry:
    out_$i12, out_$p16, out_$i17, out_$p20, out_$i21, out_$p24, out_$i25, out_$p29, out_$p30, out_$i31, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$p50, out_$i51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p58, out_$i59, out_$p63, out_$i64, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p80, out_$i81, out_$i82, out_$i83, out_$p87, out_$i88, out_$i89, out_$p93, out_$p94, out_$p95, out_$i96, out_$p99, out_$p100, out_$i101, out_$i102, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$p111, out_$p112, out_$p113, out_$p114, out_$i115, out_$p118, out_$i119, out_$i120, out_$i121, out_$i125, out_$p128, out_$p129, out_$i130, out_$i131, out_$i132, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$p143, out_$i144, out_$i145, out_$p148, out_$p149, out_$p150, out_$p151, out_$i152, out_$p156, out_$i157, out_$p161, out_$p163, out_$i164, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i103, out_$i104, out_$i105, out_$i173, out_$p174, out_$i175, out_$i176, out_$p8, out_$i9, out_$i10, out_$i11, out_$i177, out_$i178 := in_$i12, in_$p16, in_$i17, in_$p20, in_$i21, in_$p24, in_$i25, in_$p29, in_$p30, in_$i31, in_$p35, in_$p36, in_$i37, in_$i38, in_$p39, in_$p40, in_$p41, in_$p42, in_$i43, in_$p44, in_$p45, in_$p46, in_$i47, in_$p50, in_$i51, in_$p52, in_$p53, in_$p54, in_$i55, in_$i56, in_$p58, in_$i59, in_$p63, in_$i64, in_$p68, in_$p69, in_$i70, in_$i71, in_$p72, in_$p73, in_$i74, in_$i75, in_$i76, in_$p80, in_$i81, in_$i82, in_$i83, in_$p87, in_$i88, in_$i89, in_$p93, in_$p94, in_$p95, in_$i96, in_$p99, in_$p100, in_$i101, in_$i102, in_$p106, in_$p107, in_$p108, in_$p109, in_$i110, in_$p111, in_$p112, in_$p113, in_$p114, in_$i115, in_$p118, in_$i119, in_$i120, in_$i121, in_$i125, in_$p128, in_$p129, in_$i130, in_$i131, in_$i132, in_$p135, in_$p136, in_$p137, in_$p138, in_$i139, in_$p143, in_$i144, in_$i145, in_$p148, in_$p149, in_$p150, in_$p151, in_$i152, in_$p156, in_$i157, in_$p161, in_$p163, in_$i164, in_$p168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i103, in_$i104, in_$i105, in_$i173, in_$p174, in_$i175, in_$i176, in_$p8, in_$i9, in_$i10, in_$i11, in_$i177, in_$i178;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2239;

  $bb38:
    assume out_$i176 == 1;
    assume {:verifier.code 0} true;
    out_$p8, out_$i9, out_$i10, out_$i11 := out_$p174, out_$i173, out_$i105, out_$i104;
    goto $bb38_dummy;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    out_$i177, out_$i178 := out_$i104, out_$i105;
    assume true;
    goto $bb38;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    out_$i176 := $sgt.i32(out_$i175, out_$i173);
    goto corral_source_split_2334;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    out_$i175 := $load.i32($M.0, in_$p3);
    goto corral_source_split_2333;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref(out_$p8, $mul.ref(2, 8));
    goto corral_source_split_2332;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    out_$i173 := $add.i32(out_$i103, 1);
    call {:si_unique_call 417} {:cexpr "i"} boogie_si_record_i32(out_$i173);
    goto corral_source_split_2331;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2330;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    out_$i103, out_$i104, out_$i105 := out_$i9, out_$i144, out_$i172;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i103, out_$i104, out_$i105 := out_$i9, out_$i11, out_$i10;
    goto $bb27;

  $bb25:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i64(out_$i101, 0);
    goto corral_source_split_2326;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    out_$i101 := $p2i.ref.i64(out_$p100);
    goto corral_source_split_2325;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    out_$p100 := $load.ref($M.0, out_$p99);
    goto corral_source_split_2324;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i96, 848)), $mul.ref(0, 1));
    goto corral_source_split_2323;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    out_$i96 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2322;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p95, .str.84);
    goto corral_source_split_2321;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p94, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2320;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.0, out_$p93);
    goto corral_source_split_2319;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2318;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i82 == 1);
    goto $bb20;

  $bb22:
    assume {:verifier.code 0} true;
    assume !(out_$i89 == 1);
    goto $bb20;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i64(out_$i88, 0);
    goto corral_source_split_2310;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i64($M.0, out_$p87);
    goto corral_source_split_2309;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i83, 848)), $mul.ref(16, 1)), $mul.ref(528, 1));
    goto corral_source_split_2308;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    out_$i83 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2307;

  $bb18:
    assume out_$i82 == 1;
    goto corral_source_split_2306;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 0);
    goto corral_source_split_2304;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} out_$i81 := constant_test_bit(1, out_$p80);
    call {:si_unique_call 416} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_2303;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i76, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_2302;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    out_$i76 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2301;

  $bb16:
    assume out_$i75 == 1;
    goto corral_source_split_2300;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 0);
    goto corral_source_split_2298;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} out_$i74 := strcmp(out_$p73, .str.81);
    call {:si_unique_call 414} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_2297;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.0, out_$p72);
    goto corral_source_split_2296;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(out_$p8, $mul.ref(1, 8));
    goto corral_source_split_2295;

  $bb7:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i64(out_$i70, 0);
    goto corral_source_split_2291;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    out_$i70 := $p2i.ref.i64(out_$p69);
    goto corral_source_split_2290;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_2289;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i64, 848)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_2288;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    out_$i64 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2287;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p63, out_$p58);
    goto corral_source_split_2286;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i59, 848)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_2285;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    out_$i59 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2284;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} out_$p58 := alloc_pages(208, 0);
    goto corral_source_split_2283;

  $bb9:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    out_$i56 := out_$i51;
    assume true;
    goto $bb9;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i32(out_$i51, 0);
    goto corral_source_split_2277;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p54, .str.82);
    goto corral_source_split_2276;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p53, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2275;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_2274;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2273;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} out_$i51 := dm_get_device(out_$p45, out_$p46, out_$i43, out_$p50);
    call {:si_unique_call 411} {:cexpr "ret"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_2272;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i47, 848)), $mul.ref(0, 1));
    goto corral_source_split_2271;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2270;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p8);
    goto corral_source_split_2269;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_2268;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2267;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} out_$i43 := dm_table_get_mode(out_$p42);
    call {:si_unique_call 409} {:cexpr "tmp"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_2266;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_2265;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p40, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2264;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_2263;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2262;

  $bb6:
    assume out_$i38 == 1;
    goto corral_source_split_2261;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_2259;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} out_$i37 := strcmp(out_$p36, .str.81);
    call {:si_unique_call 407} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_2258;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p8);
    goto corral_source_split_2257;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p35, out_$p30);
    goto corral_source_split_2256;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i31, 848)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_2255;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2254;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(16, 1));
    goto corral_source_split_2253;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p29, 0);
    goto corral_source_split_2252;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i25, 848)), $mul.ref(16, 1)), $mul.ref(88, 1));
    goto corral_source_split_2251;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2250;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p24, $0.ref);
    goto corral_source_split_2249;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i21, 848)), $mul.ref(8, 1));
    goto corral_source_split_2248;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2247;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p20, $0.ref);
    goto corral_source_split_2246;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i17, 848)), $mul.ref(0, 1));
    goto corral_source_split_2245;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2244;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p16, out_$i9);
    goto corral_source_split_2243;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i12, 848)), $mul.ref(16, 1)), $mul.ref(516, 1));
    goto corral_source_split_2242;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2241;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_2393;

  $bb36:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    out_$i172 := out_$i10;
    goto $bb37;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    out_$i172 := out_$i171;
    goto $bb37;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    out_$i171 := $add.i32(out_$i10, 1);
    call {:si_unique_call 425} {:cexpr "rebuild"} boogie_si_record_i32(out_$i171);
    goto corral_source_split_2391;

  $bb35:
    assume out_$i170 == 1;
    goto corral_source_split_2390;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    out_$i170 := $eq.i32(out_$i169, 0);
    goto corral_source_split_2388;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} out_$i169 := constant_test_bit(1, out_$p168);
    call {:si_unique_call 424} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i169);
    goto corral_source_split_2387;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i164, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_2386;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    out_$i164 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2385;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} list_add(out_$p161, out_$p163);
    goto corral_source_split_2384;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_2383;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i157, 848)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2382;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    out_$i157 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2381;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p156, out_$p151);
    goto corral_source_split_2380;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i152, 848)), $mul.ref(16, 1)), $mul.ref(48, 1));
    goto corral_source_split_2379;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    out_$i152 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2378;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    out_$p151 := $load.ref($M.0, out_$p150);
    goto corral_source_split_2377;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref($add.ref(out_$p149, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2376;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    out_$p149 := $load.ref($M.0, out_$p148);
    goto corral_source_split_2375;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i145, 848)), $mul.ref(8, 1));
    goto corral_source_split_2374;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    out_$i145 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2373;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_2372;

  $bb33:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    out_$i144 := out_$i11;
    goto $bb34;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    out_$i144 := 1;
    goto $bb34;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p143, out_$p138);
    goto corral_source_split_2370;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i139, 848)), $mul.ref(16, 1)), $mul.ref(40, 1));
    goto corral_source_split_2369;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    out_$i139 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2368;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    out_$p138 := $load.ref($M.0, out_$p137);
    goto corral_source_split_2367;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(out_$p136, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2366;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    out_$p136 := $load.ref($M.0, out_$p135);
    goto corral_source_split_2365;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i132, 848)), $mul.ref(0, 1));
    goto corral_source_split_2364;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    out_$i132 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2363;

  $bb32:
    assume out_$i131 == 1;
    goto corral_source_split_2362;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i64(out_$i130, 0);
    goto corral_source_split_2360;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    out_$i130 := $p2i.ref.i64(out_$p129);
    goto corral_source_split_2359;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    out_$p129 := $load.ref($M.0, out_$p128);
    goto corral_source_split_2358;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i125, 848)), $mul.ref(0, 1));
    goto corral_source_split_2357;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i125 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2356;

  $bb30:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    out_$i121 := out_$i119;
    assume true;
    goto $bb30;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    out_$i120 := $ne.i32(out_$i119, 0);
    goto corral_source_split_2348;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} out_$i119 := dm_get_device(out_$p112, out_$p114, out_$i110, out_$p118);
    call {:si_unique_call 421} {:cexpr "ret"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_2347;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i115, 848)), $mul.ref(8, 1));
    goto corral_source_split_2346;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    out_$i115 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2345;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    out_$p114 := $load.ref($M.0, out_$p113);
    goto corral_source_split_2344;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref(out_$p8, $mul.ref(1, 8));
    goto corral_source_split_2343;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.0, out_$p111);
    goto corral_source_split_2342;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2341;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} out_$i110 := dm_table_get_mode(out_$p109);
    call {:si_unique_call 419} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i110);
    goto corral_source_split_2340;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    out_$p109 := $load.ref($M.0, out_$p108);
    goto corral_source_split_2339;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(out_$p107, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2338;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    out_$p107 := $load.ref($M.0, out_$p106);
    goto corral_source_split_2337;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(0, 1));
    goto corral_source_split_2336;

  $bb17:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb38_dummy:
    call {:si_unique_call 1} out_$i12, out_$p16, out_$i17, out_$p20, out_$i21, out_$p24, out_$i25, out_$p29, out_$p30, out_$i31, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$p50, out_$i51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p58, out_$i59, out_$p63, out_$i64, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p80, out_$i81, out_$i82, out_$i83, out_$p87, out_$i88, out_$i89, out_$p93, out_$p94, out_$p95, out_$i96, out_$p99, out_$p100, out_$i101, out_$i102, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$p111, out_$p112, out_$p113, out_$p114, out_$i115, out_$p118, out_$i119, out_$i120, out_$i121, out_$i125, out_$p128, out_$p129, out_$i130, out_$i131, out_$i132, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$p143, out_$i144, out_$i145, out_$p148, out_$p149, out_$p150, out_$p151, out_$i152, out_$p156, out_$i157, out_$p161, out_$p163, out_$i164, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i103, out_$i104, out_$i105, out_$i173, out_$p174, out_$i175, out_$i176, out_$p8, out_$i9, out_$i10, out_$i11, out_$i177, out_$i178 := dev_parms_loop_$bb4(in_$p0, in_$p3, out_$i12, out_$p16, out_$i17, out_$p20, out_$i21, out_$p24, out_$i25, out_$p29, out_$p30, out_$i31, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$p50, out_$i51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p58, out_$i59, out_$p63, out_$i64, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p80, out_$i81, out_$i82, out_$i83, out_$p87, out_$i88, out_$i89, out_$p93, out_$p94, out_$p95, out_$i96, out_$p99, out_$p100, out_$i101, out_$i102, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$p111, out_$p112, out_$p113, out_$p114, out_$i115, out_$p118, out_$i119, out_$i120, out_$i121, out_$i125, out_$p128, out_$p129, out_$i130, out_$i131, out_$i132, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$p143, out_$i144, out_$i145, out_$p148, out_$p149, out_$p150, out_$p151, out_$i152, out_$p156, out_$i157, out_$p161, out_$p163, out_$i164, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i103, out_$i104, out_$i105, out_$i173, out_$p174, out_$i175, out_$i176, out_$p8, out_$i9, out_$i10, out_$i11, out_$i177, out_$i178);
    return;

  exit:
    return;
}



procedure dev_parms_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$i12: i64, in_$p16: ref, in_$i17: i64, in_$p20: ref, in_$i21: i64, in_$p24: ref, in_$i25: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p50: ref, in_$i51: i32, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i1, in_$i56: i32, in_$p58: ref, in_$i59: i64, in_$p63: ref, in_$i64: i64, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$i76: i64, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$i83: i64, in_$p87: ref, in_$i88: i64, in_$i89: i1, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i64, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$i110: i32, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$i115: i64, in_$p118: ref, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i125: i64, in_$p128: ref, in_$p129: ref, in_$i130: i64, in_$i131: i1, in_$i132: i64, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$i139: i64, in_$p143: ref, in_$i144: i32, in_$i145: i64, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$i152: i64, in_$p156: ref, in_$i157: i64, in_$p161: ref, in_$p163: ref, in_$i164: i64, in_$p168: ref, in_$i169: i32, in_$i170: i1, in_$i171: i32, in_$i172: i32, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$i173: i32, in_$p174: ref, in_$i175: i32, in_$i176: i1, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$i11: i32, in_$i177: i32, in_$i178: i32) returns (out_$i12: i64, out_$p16: ref, out_$i17: i64, out_$p20: ref, out_$i21: i64, out_$p24: ref, out_$i25: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p50: ref, out_$i51: i32, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i1, out_$i56: i32, out_$p58: ref, out_$i59: i64, out_$p63: ref, out_$i64: i64, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$i76: i64, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$i83: i64, out_$p87: ref, out_$i88: i64, out_$i89: i1, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i64, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$i110: i32, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$i115: i64, out_$p118: ref, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i125: i64, out_$p128: ref, out_$p129: ref, out_$i130: i64, out_$i131: i1, out_$i132: i64, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$i139: i64, out_$p143: ref, out_$i144: i32, out_$i145: i64, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$i152: i64, out_$p156: ref, out_$i157: i64, out_$p161: ref, out_$p163: ref, out_$i164: i64, out_$p168: ref, out_$i169: i32, out_$i170: i1, out_$i171: i32, out_$i172: i32, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$i173: i32, out_$p174: ref, out_$i175: i32, out_$i176: i1, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$i11: i32, out_$i177: i32, out_$i178: i32);
  modifies $M.0;



implementation super_sync_loop_$bb4(in_$p2: ref, in_$p10: ref, in_$i16: i64, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$i23: i64, in_$i24: i64, in_$i25: i64, in_$i27: i64, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$i34: i64, in_$i35: i64, in_$i36: i64, in_$i37: i64, in_$i26: i64, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i14: i64, in_$i15: i32, in_$i41: i64) returns (out_$i16: i64, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$i23: i64, out_$i24: i64, out_$i25: i64, out_$i27: i64, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$i34: i64, out_$i35: i64, out_$i36: i64, out_$i37: i64, out_$i26: i64, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i14: i64, out_$i15: i32, out_$i41: i64)
{

  entry:
    out_$i16, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i27, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i26, out_$i38, out_$i39, out_$i40, out_$i14, out_$i15, out_$i41 := in_$i16, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i27, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i26, in_$i38, in_$i39, in_$i40, in_$i14, in_$i15, in_$i41;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2437;

  $bb12:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i14, out_$i15 := out_$i26, out_$i38;
    goto $bb12_dummy;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i26;
    assume true;
    goto $bb12;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    out_$i40 := $sgt.i32(out_$i39, out_$i38);
    goto corral_source_split_2459;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, in_$p10);
    goto corral_source_split_2458;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i15, 1);
    call {:si_unique_call 432} {:cexpr "i"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_2457;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2456;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i26 := out_$i37;
    goto $bb8;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i25;
    goto $bb8;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    out_$i25 := $or.i64(out_$i24, out_$i14);
    call {:si_unique_call 429} {:cexpr "failed_devices"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_2448;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    out_$i24 := $shl.i64(1, out_$i23);
    goto corral_source_split_2447;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i32.i64(out_$i15);
    goto corral_source_split_2446;

  $bb6:
    assume out_$i22 == 1;
    goto corral_source_split_2445;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i64(out_$i21, 0);
    goto corral_source_split_2443;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_2442;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_2441;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref($sub.ref(0, 16), 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i16, 848)), $mul.ref(8, 1));
    goto corral_source_split_2440;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i15);
    goto corral_source_split_2439;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    out_$i37 := out_$i14;
    goto $bb11;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    out_$i37 := out_$i36;
    goto $bb11;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    out_$i36 := $or.i64(out_$i35, out_$i14);
    call {:si_unique_call 433} {:cexpr "failed_devices"} boogie_si_record_i64(out_$i36);
    goto corral_source_split_2464;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    out_$i35 := $shl.i64(1, out_$i34);
    goto corral_source_split_2463;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i32.i64(out_$i15);
    goto corral_source_split_2462;

  $bb9:
    assume out_$i33 == 1;
    goto corral_source_split_2461;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_2454;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} out_$i32 := constant_test_bit(0, out_$p31);
    call {:si_unique_call 431} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_2453;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref($sub.ref(0, 16), 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i27, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_2452;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i15);
    goto corral_source_split_2451;

  $bb7:
    assume !(out_$i22 == 1);
    goto corral_source_split_2450;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i16, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i27, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i26, out_$i38, out_$i39, out_$i40, out_$i14, out_$i15, out_$i41 := super_sync_loop_$bb4(in_$p2, in_$p10, out_$i16, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i27, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i26, out_$i38, out_$i39, out_$i40, out_$i14, out_$i15, out_$i41);
    return;

  exit:
    return;
}



procedure super_sync_loop_$bb4(in_$p2: ref, in_$p10: ref, in_$i16: i64, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$i23: i64, in_$i24: i64, in_$i25: i64, in_$i27: i64, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$i34: i64, in_$i35: i64, in_$i36: i64, in_$i37: i64, in_$i26: i64, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i14: i64, in_$i15: i32, in_$i41: i64) returns (out_$i16: i64, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$i23: i64, out_$i24: i64, out_$i25: i64, out_$i27: i64, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$i34: i64, out_$i35: i64, out_$i36: i64, out_$i37: i64, out_$i26: i64, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i14: i64, out_$i15: i32, out_$i41: i64);



implementation analyse_superblocks_loop_$bb49(in_$p1: ref, in_$p16: ref, in_$i94: i64, in_$i97: i64, in_$i98: i64, in_$i99: i1, in_$i100: i32, in_$i101: i1, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p96: ref) returns (out_$i97: i64, out_$i98: i64, out_$i99: i1, out_$i100: i32, out_$i101: i1, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p96: ref)
{

  entry:
    out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p96 := in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$p103, in_$p104, in_$p105, in_$p106, in_$i107, in_$i108, in_$p96;
    goto $bb49, exit;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_2648;

  $bb57:
    assume out_$i108 == 1;
    assume {:verifier.code 0} true;
    out_$p96 := out_$p104;
    goto $bb57_dummy;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i64(out_$i107, in_$i94);
    goto corral_source_split_2665;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    out_$i107 := $p2i.ref.i64(out_$p106);
    goto corral_source_split_2664;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p105, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_2663;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    out_$p105 := $bitcast.ref.ref(out_$p104);
    goto corral_source_split_2662;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.0, out_$p103);
    goto corral_source_split_2661;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref($add.ref(out_$p96, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2660;

  $bb52:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.i32(out_$i100, 0);
    goto corral_source_split_2656;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} out_$i100 := super_validate(in_$p1, out_$p96);
    call {:si_unique_call 449} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_2655;

  $bb51:
    assume out_$i99 == 1;
    goto corral_source_split_2654;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i64(out_$i97, out_$i98);
    goto corral_source_split_2652;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    out_$i98 := $p2i.ref.i64(in_$p16);
    goto corral_source_split_2651;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i97 := $p2i.ref.i64(out_$p96);
    goto corral_source_split_2650;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb57_dummy:
    call {:si_unique_call 1} out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p96 := analyse_superblocks_loop_$bb49(in_$p1, in_$p16, in_$i94, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p96);
    return;

  exit:
    return;
}



procedure analyse_superblocks_loop_$bb49(in_$p1: ref, in_$p16: ref, in_$i94: i64, in_$i97: i64, in_$i98: i64, in_$i99: i1, in_$i100: i32, in_$i101: i1, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p96: ref) returns (out_$i97: i64, out_$i98: i64, out_$i99: i1, out_$i100: i32, out_$i101: i1, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p96: ref);
  modifies $M.0, $M.2;



implementation analyse_superblocks_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i14: i64, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$p41: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p40: ref, in_$p31: ref, in_$p69: ref, in_$p70: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p75: ref) returns (out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$p41: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p40: ref, out_$p31: ref, out_$p69: ref, out_$p70: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p75: ref)
{

  entry:
    out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p41, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p40, out_$p31, out_$p69, out_$p70, out_$p72, out_$i73, out_$i74, out_$p17, out_$p18, out_$p19, out_$p75 := in_$p20, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$p32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p41, in_$p43, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$p49, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$p60, in_$i61, in_$i62, in_$p63, in_$p64, in_$p65, in_$p66, in_$p67, in_$p40, in_$p31, in_$p69, in_$p70, in_$p72, in_$i73, in_$i74, in_$p17, in_$p18, in_$p19, in_$p75;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2528;

  $bb33:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$p17, out_$p18, out_$p19 := out_$p31, out_$p70, out_$p18;
    goto $bb33_dummy;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    out_$p75 := out_$p31;
    assume true;
    goto $bb33;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i64(out_$i73, in_$i14);
    goto corral_source_split_2551;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    out_$i73 := $p2i.ref.i64(out_$p72);
    goto corral_source_split_2550;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p18, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_2549;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    goto corral_source_split_2548;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.0, out_$p69);
    goto corral_source_split_2547;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2546;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2545;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    out_$p31 := out_$p40;
    goto $bb8;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    out_$p31 := out_$p17;
    goto $bb8;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    out_$p31 := out_$p17;
    goto $bb8;

  $bb6:
    assume out_$i30 == 1;
    goto corral_source_split_2543;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_2541;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    out_$i29 := $and.i32(out_$i28, 1);
    goto corral_source_split_2540;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_2539;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p1, $mul.ref(0, 2144)), $mul.ref(12, 1));
    goto corral_source_split_2538;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p26, out_$i25);
    goto corral_source_split_2537;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p19, $mul.ref(0, 832)), $mul.ref(16, 1));
    goto corral_source_split_2536;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} out_$i25 := to_sector(out_$i24);
    goto corral_source_split_2535;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} out_$i24 := i_size_read(out_$p23);
    call {:si_unique_call 436} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_2534;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_2533;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 480)), $mul.ref(8, 1));
    goto corral_source_split_2532;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_2531;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_2530;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10:
    assume out_$i35 == 1;
    goto corral_source_split_2558;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i64(out_$i34, 0);
    goto corral_source_split_2556;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_2555;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_2554;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p19, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_2553;

  $bb7:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2564;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p40 := out_$p17;
    goto $bb21;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    out_$p40 := out_$p19;
    goto $bb21;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    out_$p40 := out_$p17;
    goto $bb21;

  $bb19:
    assume out_$i39 == 1;
    goto corral_source_split_2562;

  $bb14:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i36, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i37 := $slt.i32(out_$i36, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} out_$i36 := super_load(out_$p19, out_$p17);
    call {:si_unique_call 439} {:cexpr "ret"} boogie_si_record_i32(out_$i36);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb11:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16:
    assume out_$i38 == 1;
    goto corral_source_split_2560;

  $bb15:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i36, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} list_del(out_$p67);
    goto corral_source_split_2611;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p19, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_2610;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p66, $0.ref);
    goto corral_source_split_2609;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p19, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_2608;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p65, $0.ref);
    goto corral_source_split_2607;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p41, $mul.ref($sub.ref(0, 16), 848)), $mul.ref(8, 1));
    goto corral_source_split_2606;

  $bb30:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} dm_put_device(in_$p0, out_$p64);
    goto corral_source_split_2604;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.0, out_$p63);
    goto corral_source_split_2603;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p41, $mul.ref($sub.ref(0, 16), 848)), $mul.ref(8, 1));
    goto corral_source_split_2602;

  $bb29:
    assume out_$i62 == 1;
    goto corral_source_split_2601;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    out_$i62 := $ne.i64(out_$i61, 0);
    goto corral_source_split_2599;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    out_$i61 := $p2i.ref.i64(out_$p60);
    goto corral_source_split_2598;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_2597;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p41, $mul.ref($sub.ref(0, 16), 848)), $mul.ref(8, 1));
    goto corral_source_split_2596;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p58, 0);
    goto corral_source_split_2595;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p19, $mul.ref(0, 832)), $mul.ref(72, 1));
    goto corral_source_split_2594;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p57, $0.ref);
    goto corral_source_split_2593;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p19, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_2592;

  $bb27:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} put_page(out_$p56);
    goto corral_source_split_2590;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_2589;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p19, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_2588;

  $bb26:
    assume out_$i54 == 1;
    goto corral_source_split_2587;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, 0);
    goto corral_source_split_2585;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_2584;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_2583;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p19, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_2582;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p50, $0.ref);
    goto corral_source_split_2581;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p19, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_2580;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p49, $0.ref);
    goto corral_source_split_2579;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p41, $mul.ref($sub.ref(0, 16), 848)), $mul.ref(0, 1));
    goto corral_source_split_2578;

  $bb24:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} dm_put_device(in_$p0, out_$p48);
    goto corral_source_split_2576;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_2575;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p41, $mul.ref($sub.ref(0, 16), 848)), $mul.ref(0, 1));
    goto corral_source_split_2574;

  $bb23:
    assume out_$i46 == 1;
    goto corral_source_split_2573;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, 0);
    goto corral_source_split_2571;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_2570;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_2569;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p41, $mul.ref($sub.ref(0, 16), 848)), $mul.ref(0, 1));
    goto corral_source_split_2568;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    goto corral_source_split_2567;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_2566;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb18;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i39 == 1);
    goto $bb18;

  $bb33_dummy:
    call {:si_unique_call 1} out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p41, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p40, out_$p31, out_$p69, out_$p70, out_$p72, out_$i73, out_$i74, out_$p17, out_$p18, out_$p19, out_$p75 := analyse_superblocks_loop_$bb4(in_$p0, in_$p1, in_$i14, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p41, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p40, out_$p31, out_$p69, out_$p70, out_$p72, out_$i73, out_$i74, out_$p17, out_$p18, out_$p19, out_$p75);
    return;

  exit:
    return;
}



procedure analyse_superblocks_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i14: i64, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$p41: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p40: ref, in_$p31: ref, in_$p69: ref, in_$p70: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p75: ref) returns (out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$p41: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p40: ref, out_$p31: ref, out_$p69: ref, out_$p70: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p75: ref);
  modifies $M.0, $M.2;



implementation configure_discard_support_loop_$bb9(in_$p1: ref, in_$i16: i8, in_$p18: ref, in_$i22: i64, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i30: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i47: i1, in_$i48: i8, in_$i49: i1, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$i21: i32) returns (out_$i22: i64, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i30: i64, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i47: i1, out_$i48: i8, out_$i49: i1, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$i21: i32)
{

  entry:
    out_$i22, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i52, out_$i53, out_$i54, out_$i21 := in_$i22, in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i52, in_$i53, in_$i54, in_$i21;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2707;

  $bb31:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i52;
    goto $bb31_dummy;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    out_$i54 := $sgt.i32(out_$i53, out_$i52);
    goto corral_source_split_2719;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.0, in_$p18);
    goto corral_source_split_2718;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i21, 1);
    call {:si_unique_call 454} {:cexpr "i"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_2717;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb11:
    assume out_$i29 == 1;
    goto corral_source_split_2715;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i64(out_$i28, 0);
    goto corral_source_split_2713;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_2712;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_2711;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i22, 848)), $mul.ref(16, 1)), $mul.ref(48, 1));
    goto corral_source_split_2710;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i21);
    goto corral_source_split_2709;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb23:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    out_$i49 := $trunc.i8.i1(out_$i48);
    goto corral_source_split_2748;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i48 := $M.3;
    goto corral_source_split_2747;

  $bb25:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 0);
    goto corral_source_split_2743;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i8.i32(out_$i45);
    goto corral_source_split_2742;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i8($M.0, out_$p44);
    goto corral_source_split_2741;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref(out_$p36, $mul.ref(0, 4208)), $mul.ref(3488, 1)), $mul.ref(73, 1));
    goto corral_source_split_2740;

  $bb22:
    assume out_$i42 == 1;
    goto corral_source_split_2739;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i42 := $trunc.i8.i1(in_$i16);
    goto corral_source_split_2737;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 0);
    goto corral_source_split_2733;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} out_$i40 := constant_test_bit(14, out_$p39);
    call {:si_unique_call 457} {:cexpr "tmp"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_2732;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p36, $mul.ref(0, 4208)), $mul.ref(2504, 1));
    goto corral_source_split_2731;

  $bb16:
    assume !(out_$i38 == 1);
    goto corral_source_split_2730;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i64(out_$i37, 0);
    goto corral_source_split_2726;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_2725;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} out_$p36 := bdev_get_queue(out_$p35);
    goto corral_source_split_2724;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_2723;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i30, 848)), $mul.ref(16, 1)), $mul.ref(48, 1));
    goto corral_source_split_2722;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i21);
    goto corral_source_split_2721;

  $bb12:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i22, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i52, out_$i53, out_$i54, out_$i21 := configure_discard_support_loop_$bb9(in_$p1, in_$i16, in_$p18, out_$i22, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i52, out_$i53, out_$i54, out_$i21);
    return;

  exit:
    return;
}



procedure configure_discard_support_loop_$bb9(in_$p1: ref, in_$i16: i8, in_$p18: ref, in_$i22: i64, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i30: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i47: i1, in_$i48: i8, in_$i49: i1, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$i21: i32) returns (out_$i22: i64, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i30: i64, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i47: i1, out_$i48: i8, out_$i49: i1, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$i21: i32);



implementation validate_raid_redundancy_loop_$bb71(in_$p0: ref, in_$i52: i32, in_$i105: i32, in_$p107: ref, in_$i112: i32, in_$i113: i1, in_$i114: i1, in_$i115: i32, in_$i116: i64, in_$p120: ref, in_$p121: ref, in_$i122: i64, in_$i123: i1, in_$i124: i64, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$i131: i32, in_$i132: i1, in_$i133: i32, in_$i134: i32, in_$i135: i32, in_$i136: i1, in_$i110: i32, in_$i111: i32) returns (out_$i112: i32, out_$i113: i1, out_$i114: i1, out_$i115: i32, out_$i116: i64, out_$p120: ref, out_$p121: ref, out_$i122: i64, out_$i123: i1, out_$i124: i64, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$i131: i32, out_$i132: i1, out_$i133: i32, out_$i134: i32, out_$i135: i32, out_$i136: i1, out_$i110: i32, out_$i111: i32)
{

  entry:
    out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$p120, out_$p121, out_$i122, out_$i123, out_$i124, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i110, out_$i111 := in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$p120, in_$p121, in_$i122, in_$i123, in_$i124, in_$p128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i110, in_$i111;
    goto $bb71, exit;

  $bb71:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3040;

  $bb89:
    assume out_$i136 == 1;
    assume {:verifier.code 0} true;
    out_$i110, out_$i111 := out_$i134, out_$i133;
    goto $bb89_dummy;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    out_$i136 := $ugt.i32(out_$i135, out_$i134);
    goto corral_source_split_3074;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i32($M.0, in_$p107);
    goto corral_source_split_3073;

  $bb88:
    assume {:verifier.code 0} true;
    out_$i134 := $add.i32(out_$i110, 1);
    call {:si_unique_call 506} {:cexpr "i"} boogie_si_record_i32(out_$i134);
    goto corral_source_split_3072;

  $bb87:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb83:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    out_$i133 := out_$i115;
    goto $bb87;

  $bb86:
    assume {:verifier.code 0} true;
    out_$i133 := out_$i131;
    goto $bb87;

  $bb85:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    out_$i132 := $uge.i32(out_$i131, in_$i52);
    goto corral_source_split_3066;

  $bb81:
    assume {:verifier.code 0} true;
    out_$i131 := $add.i32(out_$i115, 1);
    call {:si_unique_call 505} {:cexpr "rebuilds_per_group"} boogie_si_record_i32(out_$i131);
    goto corral_source_split_3065;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb79:
    assume out_$i123 == 1;
    goto corral_source_split_3057;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    out_$i123 := $eq.i64(out_$i122, 0);
    goto corral_source_split_3055;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    out_$i122 := $p2i.ref.i64(out_$p121);
    goto corral_source_split_3054;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    out_$p121 := $load.ref($M.0, out_$p120);
    goto corral_source_split_3053;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i116, 848)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_3052;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    out_$i116 := $zext.i32.i64(out_$i110);
    goto corral_source_split_3051;

  $bb78:
    assume {:verifier.code 0} true;
    goto corral_source_split_3050;

  $bb75:
    assume {:verifier.code 0} true;
    out_$i115 := out_$i111;
    goto $bb78;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    out_$i115 := 0;
    goto $bb78;

  $bb76:
    assume out_$i114 == 1;
    goto corral_source_split_3048;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    out_$i114 := $ule.i32(out_$i110, in_$i105);
    goto corral_source_split_3046;

  $bb73:
    assume out_$i113 == 1;
    goto corral_source_split_3045;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    out_$i113 := $eq.i32(out_$i112, 0);
    goto corral_source_split_3043;

  $bb72:
    assume {:verifier.code 0} true;
    out_$i112 := $urem.i32(out_$i110, in_$i52);
    goto corral_source_split_3042;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb74:
    assume {:verifier.code 0} true;
    assume !(out_$i113 == 1);
    goto $bb75;

  $bb77:
    assume {:verifier.code 0} true;
    assume !(out_$i114 == 1);
    goto $bb75;

  $bb82:
    assume out_$i130 == 1;
    goto corral_source_split_3068;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i129, 0);
    goto corral_source_split_3063;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} out_$i129 := constant_test_bit(1, out_$p128);
    call {:si_unique_call 504} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i129);
    goto corral_source_split_3062;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i124, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_3061;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    out_$i124 := $zext.i32.i64(out_$i110);
    goto corral_source_split_3060;

  $bb80:
    assume !(out_$i123 == 1);
    goto corral_source_split_3059;

  $bb89_dummy:
    call {:si_unique_call 1} out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$p120, out_$p121, out_$i122, out_$i123, out_$i124, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i110, out_$i111 := validate_raid_redundancy_loop_$bb71(in_$p0, in_$i52, in_$i105, in_$p107, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$p120, out_$p121, out_$i122, out_$i123, out_$i124, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i110, out_$i111);
    return;

  exit:
    return;
}



procedure validate_raid_redundancy_loop_$bb71(in_$p0: ref, in_$i52: i32, in_$i105: i32, in_$p107: ref, in_$i112: i32, in_$i113: i1, in_$i114: i1, in_$i115: i32, in_$i116: i64, in_$p120: ref, in_$p121: ref, in_$i122: i64, in_$i123: i1, in_$i124: i64, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$i131: i32, in_$i132: i1, in_$i133: i32, in_$i134: i32, in_$i135: i32, in_$i136: i1, in_$i110: i32, in_$i111: i32) returns (out_$i112: i32, out_$i113: i1, out_$i114: i1, out_$i115: i32, out_$i116: i64, out_$p120: ref, out_$p121: ref, out_$i122: i64, out_$i123: i1, out_$i124: i64, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$i131: i32, out_$i132: i1, out_$i133: i32, out_$i134: i32, out_$i135: i32, out_$i136: i1, out_$i110: i32, out_$i111: i32);



implementation validate_raid_redundancy_loop_$bb49(in_$p0: ref, in_$i52: i32, in_$p61: ref, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$p71: ref, in_$i72: i32, in_$i73: i32, in_$i74: i64, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$i82: i64, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$i65: i32, in_$i66: i32) returns (out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$p71: ref, out_$i72: i32, out_$i73: i32, out_$i74: i64, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$i82: i64, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$i65: i32, out_$i66: i32)
{

  entry:
    out_$i67, out_$i68, out_$i69, out_$p71, out_$i72, out_$i73, out_$i74, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i65, out_$i66 := in_$i67, in_$i68, in_$i69, in_$p71, in_$i72, in_$i73, in_$i74, in_$p78, in_$p79, in_$i80, in_$i81, in_$i82, in_$p86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i65, in_$i66;
    goto $bb49, exit;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2987;

  $bb64:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$i65, out_$i66 := out_$i92, out_$i91;
    goto $bb64_dummy;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    out_$i95 := $ugt.i32(out_$i94, out_$i92);
    goto corral_source_split_3022;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    out_$i94 := $mul.i32(out_$i93, in_$i52);
    goto corral_source_split_3021;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.0, in_$p61);
    goto corral_source_split_3020;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i92 := $add.i32(out_$i65, 1);
    call {:si_unique_call 499} {:cexpr "i"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_3019;

  $bb62:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb58:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    out_$i91 := out_$i69;
    goto $bb62;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i91 := out_$i89;
    goto $bb62;

  $bb60:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    out_$i90 := $uge.i32(out_$i89, in_$i52);
    goto corral_source_split_3013;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i32(out_$i69, 1);
    call {:si_unique_call 498} {:cexpr "rebuilds_per_group"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_3012;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume out_$i81 == 1;
    goto corral_source_split_3004;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i64(out_$i80, 0);
    goto corral_source_split_3002;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    out_$i80 := $p2i.ref.i64(out_$p79);
    goto corral_source_split_3001;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.0, out_$p78);
    goto corral_source_split_3000;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i74, 848)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_2999;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i32.i64(out_$i73);
    goto corral_source_split_2998;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    out_$i73 := $urem.i32(out_$i65, out_$i72);
    call {:si_unique_call 495} {:cexpr "d"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_2997;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i32($M.0, out_$p71);
    goto corral_source_split_2996;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(16, 1)), $mul.ref(464, 1));
    goto corral_source_split_2995;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_2994;

  $bb52:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    out_$i69 := out_$i66;
    goto $bb53;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    out_$i69 := 0;
    goto $bb53;

  $bb51:
    assume out_$i68 == 1;
    goto corral_source_split_2992;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i67, 0);
    goto corral_source_split_2990;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i67 := $urem.i32(out_$i65, in_$i52);
    goto corral_source_split_2989;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb57:
    assume out_$i88 == 1;
    goto corral_source_split_3015;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i87, 0);
    goto corral_source_split_3010;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} out_$i87 := constant_test_bit(1, out_$p86);
    call {:si_unique_call 497} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i87);
    goto corral_source_split_3009;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i82, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_3008;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i32.i64(out_$i73);
    goto corral_source_split_3007;

  $bb55:
    assume !(out_$i81 == 1);
    goto corral_source_split_3006;

  $bb64_dummy:
    call {:si_unique_call 1} out_$i67, out_$i68, out_$i69, out_$p71, out_$i72, out_$i73, out_$i74, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i65, out_$i66 := validate_raid_redundancy_loop_$bb49(in_$p0, in_$i52, in_$p61, out_$i67, out_$i68, out_$i69, out_$p71, out_$i72, out_$i73, out_$i74, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i65, out_$i66);
    return;

  exit:
    return;
}



procedure validate_raid_redundancy_loop_$bb49(in_$p0: ref, in_$i52: i32, in_$p61: ref, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$p71: ref, in_$i72: i32, in_$i73: i32, in_$i74: i64, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$i82: i64, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$i65: i32, in_$i66: i32) returns (out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$p71: ref, out_$i72: i32, out_$i73: i32, out_$i74: i64, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$i82: i64, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$i65: i32, out_$i66: i32);



implementation validate_raid_redundancy_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i8: i64, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i15: i64, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i6: i32, in_$i7: i32, in_$i28: i32) returns (out_$i8: i64, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i15: i64, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i6: i32, out_$i7: i32, out_$i28: i32)
{

  entry:
    out_$i8, out_$p12, out_$i13, out_$i14, out_$i15, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i6, out_$i7, out_$i28 := in_$i8, in_$p12, in_$i13, in_$i14, in_$i15, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i6, in_$i7, in_$i28;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2921;

  $bb12:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i6, out_$i7 := out_$i25, out_$i24;
    goto $bb12_dummy;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i24;
    assume true;
    goto $bb12;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    out_$i27 := $ugt.i32(out_$i26, out_$i25);
    goto corral_source_split_2940;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, in_$p2);
    goto corral_source_split_2939;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i6, 1);
    call {:si_unique_call 489} {:cexpr "i"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_2938;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2937;

  $bb10:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := out_$i7;
    goto $bb11;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i23;
    goto $bb11;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i7, 1);
    call {:si_unique_call 488} {:cexpr "rebuild_cnt"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_2928;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i22 == 1;
    goto $bb7;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i14 == 1;
    goto $bb7;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, 0);
    goto corral_source_split_2926;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} out_$i13 := constant_test_bit(1, out_$p12);
    call {:si_unique_call 487} {:cexpr "tmp"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_2925;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i8, 848)), $mul.ref(16, 1)), $mul.ref(416, 1));
    goto corral_source_split_2924;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $zext.i32.i64(out_$i6);
    goto corral_source_split_2923;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i64(out_$i21, 0);
    goto corral_source_split_2935;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_2934;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_2933;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2144)), $mul.ref(2144, 1)), $mul.ref(out_$i15, 848)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_2932;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i32.i64(out_$i6);
    goto corral_source_split_2931;

  $bb8:
    assume !(out_$i14 == 1);
    goto corral_source_split_2930;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i8, out_$p12, out_$i13, out_$i14, out_$i15, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i6, out_$i7, out_$i28 := validate_raid_redundancy_loop_$bb4(in_$p0, in_$p2, out_$i8, out_$p12, out_$i13, out_$i14, out_$i15, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i6, out_$i7, out_$i28);
    return;

  exit:
    return;
}



procedure validate_raid_redundancy_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i8: i64, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i15: i64, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i6: i32, in_$i7: i32, in_$i28: i32) returns (out_$i8: i64, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i15: i64, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i6: i32, out_$i7: i32, out_$i28: i32);



implementation super_init_validation_loop_$bb55(in_$p2: ref, in_$i11: i64, in_$i132: i64, in_$p135: ref, in_$p136: ref, in_$i137: i64, in_$i138: i1, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$i152: i32, in_$p153: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$i159: i32, in_$i160: i1, in_$p164: ref, in_$i165: i32, in_$i167: i32, in_$i168: i64, in_$i169: i64, in_$i170: i1, in_$p171: ref, in_$p172: ref, in_$p139: ref, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$p177: ref, in_$i178: i64, in_$i179: i1, in_$p134: ref, in_vslice_dummy_var_31: i32) returns (out_$p135: ref, out_$p136: ref, out_$i137: i64, out_$i138: i1, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$i152: i32, out_$p153: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$i159: i32, out_$i160: i1, out_$p164: ref, out_$i165: i32, out_$i167: i32, out_$i168: i64, out_$i169: i64, out_$i170: i1, out_$p171: ref, out_$p172: ref, out_$p139: ref, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$p177: ref, out_$i178: i64, out_$i179: i1, out_$p134: ref, out_vslice_dummy_var_31: i32)
{

  entry:
    out_$p135, out_$p136, out_$i137, out_$i138, out_$p140, out_$p141, out_$p142, out_$p143, out_$p144, out_$p145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$p151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$p158, out_$i159, out_$i160, out_$p164, out_$i165, out_$i167, out_$i168, out_$i169, out_$i170, out_$p171, out_$p172, out_$p139, out_$p174, out_$p175, out_$p176, out_$p177, out_$i178, out_$i179, out_$p134, out_vslice_dummy_var_31 := in_$p135, in_$p136, in_$i137, in_$i138, in_$p140, in_$p141, in_$p142, in_$p143, in_$p144, in_$p145, in_$i146, in_$i147, in_$p148, in_$i149, in_$i150, in_$p151, in_$i152, in_$p153, in_$i154, in_$i155, in_$p156, in_$p157, in_$p158, in_$i159, in_$i160, in_$p164, in_$i165, in_$i167, in_$i168, in_$i169, in_$i170, in_$p171, in_$p172, in_$p139, in_$p174, in_$p175, in_$p176, in_$p177, in_$i178, in_$i179, in_$p134, in_vslice_dummy_var_31;
    goto $bb55, exit;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_3337;

  $bb76:
    assume out_$i179 == 1;
    assume {:verifier.code 0} true;
    out_$p134 := out_$p175;
    goto $bb76_dummy;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    out_$i179 := $ne.i64(out_$i178, in_$i132);
    goto corral_source_split_3352;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    out_$i178 := $p2i.ref.i64(out_$p177);
    goto corral_source_split_3351;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    out_$p177 := $add.ref($add.ref(out_$p176, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_3350;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    out_$p176 := $bitcast.ref.ref(out_$p175);
    goto corral_source_split_3349;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    out_$p175 := $load.ref($M.0, out_$p174);
    goto corral_source_split_3348;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref($add.ref(out_$p139, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3347;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_3346;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    out_$p139 := out_$p172;
    goto $bb59;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    out_$p139 := out_$p134;
    goto $bb59;

  $bb57:
    assume out_$i138 == 1;
    goto corral_source_split_3344;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i64(out_$i137, 0);
    goto corral_source_split_3342;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    out_$i137 := $p2i.ref.i64(out_$p136);
    goto corral_source_split_3341;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    out_$p136 := $load.ref($M.0, out_$p135);
    goto corral_source_split_3340;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(out_$p134, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_3339;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_3402;

  $bb63:
    assume {:verifier.code 0} true;
    out_$p172 := out_$p134;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    out_$p172 := out_$p134;
    goto $bb75;

  $bb73:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} set_bit(0, out_$p171);
    goto corral_source_split_3400;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref($add.ref(out_$p134, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3399;

  $bb72:
    assume out_$i170 == 1;
    goto corral_source_split_3398;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    out_$i170 := $ne.i64(out_$i169, 0);
    goto corral_source_split_3396;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    out_$i169 := $and.i64(out_$i168, in_$i11);
    goto corral_source_split_3395;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    out_$i168 := $sext.i32.i64(out_$i167);
    goto corral_source_split_3394;

  $bb71:
    assume {:verifier.code 0} true;
    out_$i167 := $shl.i32(1, out_$i152);
    goto corral_source_split_3393;

  $bb67:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} out_vslice_dummy_var_31 := printk.ref.i32.i32(.str.105, out_$i152, out_$i165);
    goto corral_source_split_3391;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    out_$i165 := $load.i32($M.0, out_$p164);
    goto corral_source_split_3390;

  $bb70:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref(out_$p134, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_3389;

  $bb69:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    out_$i160 := $ne.i32(out_$i159, 1);
    goto corral_source_split_3381;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    out_$i159 := $load.i32($M.0, out_$p158);
    goto corral_source_split_3380;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(out_$p157, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3379;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    out_$p157 := $load.ref($M.0, out_$p156);
    goto corral_source_split_3378;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(in_$p2, $mul.ref($sub.ref(0, 16), 2144)), $mul.ref(2112, 1));
    goto corral_source_split_3377;

  $bb66:
    assume out_$i155 == 1;
    goto corral_source_split_3376;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    out_$i155 := $ne.i32(out_$i154, out_$i152);
    goto corral_source_split_3374;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    out_$i154 := $load.i32($M.0, out_$p153);
    goto corral_source_split_3373;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref(out_$p134, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_3372;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i32($M.2, out_$p151);
    call {:si_unique_call 551} {:cexpr "role"} boogie_si_record_i32(out_$i152);
    goto corral_source_split_3371;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref($add.ref(out_$p143, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_3370;

  $bb64:
    assume out_$i150 == 1;
    goto corral_source_split_3369;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    out_$i150 := $sge.i32(out_$i149, 0);
    goto corral_source_split_3367;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    out_$i149 := $load.i32($M.0, out_$p148);
    goto corral_source_split_3366;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(out_$p134, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_3365;

  $bb61:
    assume out_$i147 == 1;
    goto corral_source_split_3364;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    out_$i147 := $eq.i32(out_$i146, 0);
    goto corral_source_split_3362;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} out_$i146 := constant_test_bit(10, out_$p145);
    call {:si_unique_call 550} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i146);
    goto corral_source_split_3361;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref(out_$p134, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3360;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, out_$p144, 0);
    goto corral_source_split_3359;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(out_$p143, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3358;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    out_$p143 := $bitcast.ref.ref(out_$p142);
    goto corral_source_split_3357;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} out_$p142 := lowmem_page_address(out_$p141);
    goto corral_source_split_3356;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    out_$p141 := $load.ref($M.0, out_$p140);
    goto corral_source_split_3355;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(out_$p134, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_3354;

  $bb58:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb62:
    assume {:verifier.code 0} true;
    assume !(out_$i147 == 1);
    goto $bb63;

  $bb65:
    assume {:verifier.code 0} true;
    assume !(out_$i150 == 1);
    goto $bb63;

  $bb76_dummy:
    call {:si_unique_call 1} out_$p135, out_$p136, out_$i137, out_$i138, out_$p140, out_$p141, out_$p142, out_$p143, out_$p144, out_$p145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$p151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$p158, out_$i159, out_$i160, out_$p164, out_$i165, out_$i167, out_$i168, out_$i169, out_$i170, out_$p171, out_$p172, out_$p139, out_$p174, out_$p175, out_$p176, out_$p177, out_$i178, out_$i179, out_$p134, out_vslice_dummy_var_31 := super_init_validation_loop_$bb55(in_$p2, in_$i11, in_$i132, out_$p135, out_$p136, out_$i137, out_$i138, out_$p140, out_$p141, out_$p142, out_$p143, out_$p144, out_$p145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$p151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$p158, out_$i159, out_$i160, out_$p164, out_$i165, out_$i167, out_$i168, out_$i169, out_$i170, out_$p171, out_$p172, out_$p139, out_$p174, out_$p175, out_$p176, out_$p177, out_$i178, out_$i179, out_$p134, out_vslice_dummy_var_31);
    return;

  exit:
    return;
}



procedure super_init_validation_loop_$bb55(in_$p2: ref, in_$i11: i64, in_$i132: i64, in_$p135: ref, in_$p136: ref, in_$i137: i64, in_$i138: i1, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$i152: i32, in_$p153: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$i159: i32, in_$i160: i1, in_$p164: ref, in_$i165: i32, in_$i167: i32, in_$i168: i64, in_$i169: i64, in_$i170: i1, in_$p171: ref, in_$p172: ref, in_$p139: ref, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$p177: ref, in_$i178: i64, in_$i179: i1, in_$p134: ref, in_vslice_dummy_var_31: i32) returns (out_$p135: ref, out_$p136: ref, out_$i137: i64, out_$i138: i1, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$i152: i32, out_$p153: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$i159: i32, out_$i160: i1, out_$p164: ref, out_$i165: i32, out_$i167: i32, out_$i168: i64, out_$i169: i64, out_$i170: i1, out_$p171: ref, out_$p172: ref, out_$p139: ref, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$p177: ref, out_$i178: i64, out_$i179: i1, out_$p134: ref, out_vslice_dummy_var_31: i32);
  modifies $M.2;



implementation super_init_validation_loop_$bb26(in_$i81: i64, in_$p88: ref, in_$i89: i32, in_$i90: i1, in_$p91: ref, in_$i92: i32, in_$i94: i32, in_$p97: ref, in_$i98: i32, in_$i99: i1, in_$i100: i32, in_$i101: i32, in_$i95: i32, in_$i96: i32, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p85: ref, in_$i86: i32, in_$i87: i32, in_$i109: i32, in_$i110: i32, in_vslice_dummy_var_26: i32) returns (out_$p88: ref, out_$i89: i32, out_$i90: i1, out_$p91: ref, out_$i92: i32, out_$i94: i32, out_$p97: ref, out_$i98: i32, out_$i99: i1, out_$i100: i32, out_$i101: i32, out_$i95: i32, out_$i96: i32, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p85: ref, out_$i86: i32, out_$i87: i32, out_$i109: i32, out_$i110: i32, out_vslice_dummy_var_26: i32)
{

  entry:
    out_$p88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i94, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i95, out_$i96, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p85, out_$i86, out_$i87, out_$i109, out_$i110, out_vslice_dummy_var_26 := in_$p88, in_$i89, in_$i90, in_$p91, in_$i92, in_$i94, in_$p97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i95, in_$i96, in_$p103, in_$p104, in_$p105, in_$p106, in_$i107, in_$i108, in_$p85, in_$i86, in_$i87, in_$i109, in_$i110, in_vslice_dummy_var_26;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3264;

  $bb34:
    assume out_$i108 == 1;
    assume {:verifier.code 0} true;
    out_$p85, out_$i86, out_$i87 := out_$p104, out_$i96, out_$i95;
    goto $bb34_dummy;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    out_$i109, out_$i110 := out_$i95, out_$i96;
    assume true;
    goto $bb34;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i64(out_$i107, in_$i81);
    goto corral_source_split_3287;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    out_$i107 := $p2i.ref.i64(out_$p106);
    goto corral_source_split_3286;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p105, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_3285;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    out_$p105 := $bitcast.ref.ref(out_$p104);
    goto corral_source_split_3284;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.0, out_$p103);
    goto corral_source_split_3283;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref($add.ref(out_$p85, $mul.ref(0, 832)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3282;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3281;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i95, out_$i96 := out_$i101, out_$i86;
    goto $bb30;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    out_$i95, out_$i96 := out_$i87, out_$i94;
    goto $bb30;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i86, 1);
    call {:si_unique_call 539} {:cexpr "rebuilds"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_3274;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} out_vslice_dummy_var_26 := printk.ref.i32(.str.99, out_$i92);
    goto corral_source_split_3273;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i32($M.0, out_$p91);
    goto corral_source_split_3272;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p85, $mul.ref(0, 832)), $mul.ref(516, 1));
    goto corral_source_split_3271;

  $bb28:
    assume out_$i90 == 1;
    goto corral_source_split_3270;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i89, 0);
    goto corral_source_split_3268;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} out_$i89 := constant_test_bit(1, out_$p88);
    call {:si_unique_call 537} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_3267;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p85, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3266;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb32:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    out_$i101 := out_$i87;
    goto $bb33;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    out_$i101 := out_$i100;
    goto $bb33;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    out_$i100 := $add.i32(out_$i87, 1);
    call {:si_unique_call 542} {:cexpr "new_devs"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_3290;

  $bb31:
    assume out_$i99 == 1;
    goto corral_source_split_3289;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i32(out_$i98, 0);
    goto corral_source_split_3279;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} out_$i98 := constant_test_bit(10, out_$p97);
    call {:si_unique_call 541} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_3278;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p85, $mul.ref(0, 832)), $mul.ref(416, 1));
    goto corral_source_split_3277;

  $bb29:
    assume !(out_$i90 == 1);
    goto corral_source_split_3276;

  $bb34_dummy:
    call {:si_unique_call 1} out_$p88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i94, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i95, out_$i96, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p85, out_$i86, out_$i87, out_$i109, out_$i110, out_vslice_dummy_var_26 := super_init_validation_loop_$bb26(in_$i81, out_$p88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i94, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i95, out_$i96, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p85, out_$i86, out_$i87, out_$i109, out_$i110, out_vslice_dummy_var_26);
    return;

  exit:
    return;
}



procedure super_init_validation_loop_$bb26(in_$i81: i64, in_$p88: ref, in_$i89: i32, in_$i90: i1, in_$p91: ref, in_$i92: i32, in_$i94: i32, in_$p97: ref, in_$i98: i32, in_$i99: i1, in_$i100: i32, in_$i101: i32, in_$i95: i32, in_$i96: i32, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p85: ref, in_$i86: i32, in_$i87: i32, in_$i109: i32, in_$i110: i32, in_vslice_dummy_var_26: i32) returns (out_$p88: ref, out_$i89: i32, out_$i90: i1, out_$p91: ref, out_$i92: i32, out_$i94: i32, out_$p97: ref, out_$i98: i32, out_$i99: i1, out_$i100: i32, out_$i101: i32, out_$i95: i32, out_$i96: i32, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p85: ref, out_$i86: i32, out_$i87: i32, out_$i109: i32, out_$i110: i32, out_vslice_dummy_var_26: i32);



implementation read_disk_sb_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} read_disk_sb_loop_$bb3();
    return;

  exit:
    return;
}



procedure read_disk_sb_loop_$bb3();



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p9: ref, in_$p10: ref, in_$p12: ref, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$i35: i32, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i32, in_$i76: i1, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$p86: ref, in_$i87: i32, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$i102: i32, in_$i103: i32, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$p107: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$p112: ref, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$p117: ref, in_$i119: i32, in_$i120: i1, in_$p121: ref, in_$p122: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$p127: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i132: i32, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$i137: i32, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$i142: i32, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$i147: i32, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$i152: i32, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i1, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$i181: i32, in_$i182: i1, in_$p183: ref, in_$i185: i32, in_$i186: i1, in_$p187: ref, in_$i188: i32, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$i193: i32, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$i198: i32, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i203: i32, in_$i205: i32, in_$i206: i1, in_$p207: ref, in_$i208: i32, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$i213: i32, in_$i214: i1, in_$p215: ref, in_$i216: i32, in_$i217: i32, in_$i218: i32, in_$i219: i32, in_$i220: i1, in_$p221: ref, in_$i222: i32, in_$i223: i32, in_$i224: i32, in_$i225: i32, in_$i226: i1, in_$p227: ref, in_$i228: i32, in_$i229: i32, in_$i230: i32, in_$i231: i32, in_$i232: i1, in_$p233: ref, in_$i234: i32, in_$i235: i32, in_$i236: i32, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i240: i32, in_$i241: i32, in_$i242: i32, in_$i243: i32, in_$i244: i1, in_$p245: ref, in_$i246: i32, in_$i247: i1, in_$p248: ref, in_$i249: i32, in_$i250: i1, in_$i251: i32, in_$i252: i32, in_$i253: i1, in_vslice_dummy_var_43: i32, in_vslice_dummy_var_44: i32, in_vslice_dummy_var_45: i32, in_vslice_dummy_var_46: i32, in_vslice_dummy_var_47: i32, in_vslice_dummy_var_48: i32, in_vslice_dummy_var_49: i32, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i32, in_vslice_dummy_var_52: i32, in_vslice_dummy_var_53: i32, in_vslice_dummy_var_54: i32, in_vslice_dummy_var_55: i32, in_vslice_dummy_var_56: i32, in_vslice_dummy_var_57: i32, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i32) returns (out_$i35: i32, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i32, out_$i76: i1, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$p86: ref, out_$i87: i32, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$p91: ref, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$i102: i32, out_$i103: i32, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$p107: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$p112: ref, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$p117: ref, out_$i119: i32, out_$i120: i1, out_$p121: ref, out_$p122: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$p127: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i132: i32, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$i137: i32, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$i142: i32, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$i147: i32, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$i152: i32, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i1, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$i181: i32, out_$i182: i1, out_$p183: ref, out_$i185: i32, out_$i186: i1, out_$p187: ref, out_$i188: i32, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$i193: i32, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$i198: i32, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i203: i32, out_$i205: i32, out_$i206: i1, out_$p207: ref, out_$i208: i32, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$i213: i32, out_$i214: i1, out_$p215: ref, out_$i216: i32, out_$i217: i32, out_$i218: i32, out_$i219: i32, out_$i220: i1, out_$p221: ref, out_$i222: i32, out_$i223: i32, out_$i224: i32, out_$i225: i32, out_$i226: i1, out_$p227: ref, out_$i228: i32, out_$i229: i32, out_$i230: i32, out_$i231: i32, out_$i232: i1, out_$p233: ref, out_$i234: i32, out_$i235: i32, out_$i236: i32, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i240: i32, out_$i241: i32, out_$i242: i32, out_$i243: i32, out_$i244: i1, out_$p245: ref, out_$i246: i32, out_$i247: i1, out_$p248: ref, out_$i249: i32, out_$i250: i1, out_$i251: i32, out_$i252: i32, out_$i253: i1, out_vslice_dummy_var_43: i32, out_vslice_dummy_var_44: i32, out_vslice_dummy_var_45: i32, out_vslice_dummy_var_46: i32, out_vslice_dummy_var_47: i32, out_vslice_dummy_var_48: i32, out_vslice_dummy_var_49: i32, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i32, out_vslice_dummy_var_52: i32, out_vslice_dummy_var_53: i32, out_vslice_dummy_var_54: i32, out_vslice_dummy_var_55: i32, out_vslice_dummy_var_56: i32, out_vslice_dummy_var_57: i32, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i32)
{

  entry:
    out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$i109, out_$i110, out_$p111, out_$p112, out_$i114, out_$i115, out_$p116, out_$p117, out_$i119, out_$i120, out_$p121, out_$p122, out_$i124, out_$i125, out_$p126, out_$p127, out_$i129, out_$i130, out_$p131, out_$i132, out_$i134, out_$i135, out_$p136, out_$i137, out_$i139, out_$i140, out_$p141, out_$i142, out_$i144, out_$i145, out_$p146, out_$i147, out_$i149, out_$i150, out_$p151, out_$i152, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$p168, out_$i169, out_$i170, out_$p171, out_$i173, out_$i174, out_$p175, out_$i177, out_$i178, out_$p179, out_$i181, out_$i182, out_$p183, out_$i185, out_$i186, out_$p187, out_$i188, out_$i190, out_$i191, out_$p192, out_$i193, out_$i195, out_$i196, out_$p197, out_$i198, out_$i200, out_$i201, out_$p202, out_$i203, out_$i205, out_$i206, out_$p207, out_$i208, out_$i210, out_$i211, out_$p212, out_$i213, out_$i214, out_$p215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$p221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$p227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$p245, out_$i246, out_$i247, out_$p248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_vslice_dummy_var_43, out_vslice_dummy_var_44, out_vslice_dummy_var_45, out_vslice_dummy_var_46, out_vslice_dummy_var_47, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61 := in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$p77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$p86, in_$i87, in_$i88, in_$i89, in_$i90, in_$p91, in_$i92, in_$i93, in_$i94, in_$i95, in_$p96, in_$i97, in_$i98, in_$i99, in_$i100, in_$p101, in_$i102, in_$i103, in_$i104, in_$i105, in_$p106, in_$p107, in_$i109, in_$i110, in_$p111, in_$p112, in_$i114, in_$i115, in_$p116, in_$p117, in_$i119, in_$i120, in_$p121, in_$p122, in_$i124, in_$i125, in_$p126, in_$p127, in_$i129, in_$i130, in_$p131, in_$i132, in_$i134, in_$i135, in_$p136, in_$i137, in_$i139, in_$i140, in_$p141, in_$i142, in_$i144, in_$i145, in_$p146, in_$i147, in_$i149, in_$i150, in_$p151, in_$i152, in_$i154, in_$i155, in_$p156, in_$i157, in_$i158, in_$p159, in_$i160, in_$i161, in_$p162, in_$i163, in_$i164, in_$p165, in_$i166, in_$i167, in_$p168, in_$i169, in_$i170, in_$p171, in_$i173, in_$i174, in_$p175, in_$i177, in_$i178, in_$p179, in_$i181, in_$i182, in_$p183, in_$i185, in_$i186, in_$p187, in_$i188, in_$i190, in_$i191, in_$p192, in_$i193, in_$i195, in_$i196, in_$p197, in_$i198, in_$i200, in_$i201, in_$p202, in_$i203, in_$i205, in_$i206, in_$p207, in_$i208, in_$i210, in_$i211, in_$p212, in_$i213, in_$i214, in_$p215, in_$i216, in_$i217, in_$i218, in_$i219, in_$i220, in_$p221, in_$i222, in_$i223, in_$i224, in_$i225, in_$i226, in_$p227, in_$i228, in_$i229, in_$i230, in_$i231, in_$i232, in_$p233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$p239, in_$i240, in_$i241, in_$i242, in_$i243, in_$i244, in_$p245, in_$i246, in_$i247, in_$p248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i253, in_vslice_dummy_var_43, in_vslice_dummy_var_44, in_vslice_dummy_var_45, in_vslice_dummy_var_46, in_vslice_dummy_var_47, in_vslice_dummy_var_48, in_vslice_dummy_var_49, in_vslice_dummy_var_50, in_vslice_dummy_var_51, in_vslice_dummy_var_52, in_vslice_dummy_var_53, in_vslice_dummy_var_54, in_vslice_dummy_var_55, in_vslice_dummy_var_56, in_vslice_dummy_var_57, in_vslice_dummy_var_58, in_vslice_dummy_var_59, in_vslice_dummy_var_60, in_vslice_dummy_var_61;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 685} out_$i35 := __VERIFIER_nondet_int();
    call {:si_unique_call 686} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i35);
    call {:si_unique_call 687} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i35);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} invoke_work_1();
    goto corral_source_split_3784;

  $bb12:
    assume out_$i41 == 1;
    goto corral_source_split_3783;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_3781;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    out_$i40 := $M.11;
    goto corral_source_split_3780;

  $bb10:
    assume out_$i39 == 1;
    goto corral_source_split_3779;

  $bb3:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i35, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i36 := $slt.i32(out_$i35, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb17:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i49 == 1);
    goto $bb28;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i51 == 1);
    goto $bb28;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i50, 0);
    goto corral_source_split_3798;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    out_$i50 := $M.12;
    goto corral_source_split_3797;

  $bb26:
    assume out_$i49 == 1;
    goto corral_source_split_3796;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i48, 3);
    goto corral_source_split_3794;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    out_$i48 := $M.13;
    goto corral_source_split_3793;

  $bb24:
    assume out_$i47 == 1;
    goto corral_source_split_3792;

  $bb19:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i44, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i44, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_3786:
    assume {:verifier.code 1} true;
    call {:si_unique_call 689} out_$i44 := __VERIFIER_nondet_int();
    call {:si_unique_call 690} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i44);
    call {:si_unique_call 691} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i44);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i43 == 1;
    goto corral_source_split_3786;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i32(out_$i42, 0);
    goto corral_source_split_3773;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    out_$i42 := $M.13;
    goto corral_source_split_3772;

  $bb5:
    assume out_$i37 == 1;
    goto corral_source_split_3771;

  $bb4:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    out_$i37 := $slt.i32(out_$i35, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb35:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i32(out_$i57, 0);
    goto corral_source_split_3818;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i57 := $M.15;
    goto corral_source_split_3817;

  $bb37:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} ldv_target_type_2();
    goto corral_source_split_3815;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 698} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3814;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $M.13 := 3;
    call {:si_unique_call 697} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_3813;

  $bb36:
    assume out_$i56 == 1;
    goto corral_source_split_3812;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i55, 0);
    goto corral_source_split_3810;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    out_$i55 := $M.15;
    goto corral_source_split_3809;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $M.15 := out_$i54;
    call {:si_unique_call 696} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_3808;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} out_$i54 := dm_raid_init();
    goto corral_source_split_3807;

  $bb34:
    assume out_$i53 == 1;
    goto corral_source_split_3806;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 1);
    goto corral_source_split_3790;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    out_$i52 := $M.13;
    goto corral_source_split_3789;

  $bb21:
    assume out_$i46 == 1;
    goto corral_source_split_3788;

  $bb20:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i44, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} ldv_stop();
    goto corral_source_split_3823;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb22:
    assume {:verifier.code 0} true;
    assume !(out_$i46 == 1);
    goto $bb23;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i47 == 1);
    goto $bb23;

  $bb47:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb77:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb79:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $M.12 := out_$i83;
    call {:si_unique_call 708} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i83);
    goto corral_source_split_3887;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    out_$i83 := $add.i32(out_$i82, 1);
    goto corral_source_split_3886;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    out_$i82 := $M.12;
    goto corral_source_split_3885;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $M.14 := 2;
    call {:si_unique_call 707} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3884;

  $bb78:
    assume out_$i81 == 1;
    goto corral_source_split_3883;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i80, 0);
    goto corral_source_split_3881;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    out_$i80 := $M.16;
    goto corral_source_split_3880;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $M.16 := out_$i79;
    call {:si_unique_call 706} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_3879;

  SeqInstr_21:
    goto corral_source_split_3878;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} out_$i79 := raid_ctr(out_$p77, out_$i78, in_$p16);
    goto SeqInstr_20;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.2, in_$p5);
    goto corral_source_split_3877;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    out_$p77 := $M.10;
    goto corral_source_split_3876;

  $bb76:
    assume out_$i76 == 1;
    goto corral_source_split_3875;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i75, 1);
    goto corral_source_split_3873;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    out_$i75 := $M.14;
    goto corral_source_split_3872;

  $bb74:
    assume out_$i74 == 1;
    goto corral_source_split_3871;

  $bb70:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i61, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb64:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i61, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb49:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i61, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i62 := $slt.i32(out_$i61, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_3825:
    assume {:verifier.code 1} true;
    call {:si_unique_call 702} out_$i61 := __VERIFIER_nondet_int();
    call {:si_unique_call 703} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i61);
    call {:si_unique_call 704} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i61);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb46:
    assume out_$i60 == 1;
    goto corral_source_split_3825;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i32(out_$i59, 0);
    goto corral_source_split_3777;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    out_$i59 := $M.14;
    goto corral_source_split_3776;

  $bb7:
    assume out_$i38 == 1;
    goto corral_source_split_3775;

  $bb6:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i35, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb93:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $M.12 := out_$i103;
    call {:si_unique_call 720} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i103);
    goto corral_source_split_3928;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    out_$i103 := $sub.i32(out_$i102, 1);
    goto corral_source_split_3927;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    out_$i102 := $M.12;
    goto corral_source_split_3926;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 719} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3925;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} raid_dtr(out_$p101);
    goto corral_source_split_3924;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    out_$p101 := $M.10;
    goto corral_source_split_3923;

  $bb92:
    assume out_$i100 == 1;
    goto corral_source_split_3922;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i99, 5);
    goto corral_source_split_3920;

  $bb91:
    assume {:verifier.code 0} true;
    out_$i99 := $M.14;
    goto corral_source_split_3919;

  $bb90:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $M.12 := out_$i98;
    call {:si_unique_call 717} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_3917;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    out_$i98 := $sub.i32(out_$i97, 1);
    goto corral_source_split_3916;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    out_$i97 := $M.12;
    goto corral_source_split_3915;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 716} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3914;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} raid_dtr(out_$p96);
    goto corral_source_split_3913;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    out_$p96 := $M.10;
    goto corral_source_split_3912;

  $bb89:
    assume out_$i95 == 1;
    goto corral_source_split_3911;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i94, 2);
    goto corral_source_split_3909;

  $bb88:
    assume {:verifier.code 0} true;
    out_$i94 := $M.14;
    goto corral_source_split_3908;

  $bb87:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $M.12 := out_$i93;
    call {:si_unique_call 714} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i93);
    goto corral_source_split_3906;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    out_$i93 := $sub.i32(out_$i92, 1);
    goto corral_source_split_3905;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    out_$i92 := $M.12;
    goto corral_source_split_3904;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 713} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3903;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} raid_dtr(out_$p91);
    goto corral_source_split_3902;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    out_$p91 := $M.10;
    goto corral_source_split_3901;

  $bb86:
    assume out_$i90 == 1;
    goto corral_source_split_3900;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i89, 3);
    goto corral_source_split_3898;

  $bb85:
    assume {:verifier.code 0} true;
    out_$i89 := $M.14;
    goto corral_source_split_3897;

  $bb84:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $M.12 := out_$i88;
    call {:si_unique_call 711} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_3895;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    out_$i88 := $sub.i32(out_$i87, 1);
    goto corral_source_split_3894;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    out_$i87 := $M.12;
    goto corral_source_split_3893;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 710} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3892;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} raid_dtr(out_$p86);
    goto corral_source_split_3891;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    out_$p86 := $M.10;
    goto corral_source_split_3890;

  $bb83:
    assume out_$i85 == 1;
    goto corral_source_split_3889;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i84, 4);
    goto corral_source_split_3865;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    out_$i84 := $M.14;
    goto corral_source_split_3864;

  $bb72:
    assume out_$i73 == 1;
    goto corral_source_split_3863;

  $bb71:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    out_$i73 := $slt.i32(out_$i61, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb108:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $M.14 := 5;
    call {:si_unique_call 730} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_3970;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} out_vslice_dummy_var_47 := raid_iterate_devices(out_$p126, out_$p127, in_$p7);
    goto corral_source_split_3969;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    out_$p127 := $load.ref($M.2, in_$p1);
    goto corral_source_split_3968;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    out_$p126 := $M.10;
    goto corral_source_split_3967;

  $bb107:
    assume out_$i125 == 1;
    goto corral_source_split_3966;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i124, 5);
    goto corral_source_split_3964;

  $bb106:
    assume {:verifier.code 0} true;
    out_$i124 := $M.14;
    goto corral_source_split_3963;

  $bb105:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    goto $bb106;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $M.14 := 2;
    call {:si_unique_call 728} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3961;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} out_vslice_dummy_var_46 := raid_iterate_devices(out_$p121, out_$p122, in_$p7);
    goto corral_source_split_3960;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    out_$p122 := $load.ref($M.2, in_$p1);
    goto corral_source_split_3959;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    out_$p121 := $M.10;
    goto corral_source_split_3958;

  $bb104:
    assume out_$i120 == 1;
    goto corral_source_split_3957;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, 2);
    goto corral_source_split_3955;

  $bb103:
    assume {:verifier.code 0} true;
    out_$i119 := $M.14;
    goto corral_source_split_3954;

  $bb102:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $M.14 := 3;
    call {:si_unique_call 726} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3952;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} out_vslice_dummy_var_45 := raid_iterate_devices(out_$p116, out_$p117, in_$p7);
    goto corral_source_split_3951;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    out_$p117 := $load.ref($M.2, in_$p1);
    goto corral_source_split_3950;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    out_$p116 := $M.10;
    goto corral_source_split_3949;

  $bb101:
    assume out_$i115 == 1;
    goto corral_source_split_3948;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    out_$i115 := $eq.i32(out_$i114, 3);
    goto corral_source_split_3946;

  $bb100:
    assume {:verifier.code 0} true;
    out_$i114 := $M.14;
    goto corral_source_split_3945;

  $bb99:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 724} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3943;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} out_vslice_dummy_var_44 := raid_iterate_devices(out_$p111, out_$p112, in_$p7);
    goto corral_source_split_3942;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.2, in_$p1);
    goto corral_source_split_3941;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    out_$p111 := $M.10;
    goto corral_source_split_3940;

  $bb98:
    assume out_$i110 == 1;
    goto corral_source_split_3939;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i109, 1);
    goto corral_source_split_3937;

  $bb97:
    assume {:verifier.code 0} true;
    out_$i109 := $M.14;
    goto corral_source_split_3936;

  $bb96:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $M.14 := 4;
    call {:si_unique_call 722} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3934;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} out_vslice_dummy_var_43 := raid_iterate_devices(out_$p106, out_$p107, in_$p7);
    goto corral_source_split_3933;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    out_$p107 := $load.ref($M.2, in_$p1);
    goto corral_source_split_3932;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    out_$p106 := $M.10;
    goto corral_source_split_3931;

  $bb95:
    assume out_$i105 == 1;
    goto corral_source_split_3930;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i104, 4);
    goto corral_source_split_3869;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    out_$i104 := $M.14;
    goto corral_source_split_3868;

  $bb73:
    assume !(out_$i73 == 1);
    goto corral_source_split_3867;

  $bb123:
    assume !(out_$i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $M.14 := 5;
    call {:si_unique_call 740} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4012;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} out_vslice_dummy_var_52 := raid_merge(out_$p151, in_$p18, in_$p20, out_$i152);
    goto corral_source_split_4011;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i32($M.2, in_$p3);
    goto corral_source_split_4010;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    out_$p151 := $M.10;
    goto corral_source_split_4009;

  $bb122:
    assume out_$i150 == 1;
    goto corral_source_split_4008;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    out_$i150 := $eq.i32(out_$i149, 5);
    goto corral_source_split_4006;

  $bb121:
    assume {:verifier.code 0} true;
    out_$i149 := $M.14;
    goto corral_source_split_4005;

  $bb120:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $M.14 := 2;
    call {:si_unique_call 738} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4003;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} out_vslice_dummy_var_51 := raid_merge(out_$p146, in_$p18, in_$p20, out_$i147);
    goto corral_source_split_4002;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    out_$i147 := $load.i32($M.2, in_$p3);
    goto corral_source_split_4001;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    out_$p146 := $M.10;
    goto corral_source_split_4000;

  $bb119:
    assume out_$i145 == 1;
    goto corral_source_split_3999;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i144, 2);
    goto corral_source_split_3997;

  $bb118:
    assume {:verifier.code 0} true;
    out_$i144 := $M.14;
    goto corral_source_split_3996;

  $bb117:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $M.14 := 3;
    call {:si_unique_call 736} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3994;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} out_vslice_dummy_var_50 := raid_merge(out_$p141, in_$p18, in_$p20, out_$i142);
    goto corral_source_split_3993;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    out_$i142 := $load.i32($M.2, in_$p3);
    goto corral_source_split_3992;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    out_$p141 := $M.10;
    goto corral_source_split_3991;

  $bb116:
    assume out_$i140 == 1;
    goto corral_source_split_3990;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    out_$i140 := $eq.i32(out_$i139, 3);
    goto corral_source_split_3988;

  $bb115:
    assume {:verifier.code 0} true;
    out_$i139 := $M.14;
    goto corral_source_split_3987;

  $bb114:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 734} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3985;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} out_vslice_dummy_var_49 := raid_merge(out_$p136, in_$p18, in_$p20, out_$i137);
    goto corral_source_split_3984;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    out_$i137 := $load.i32($M.2, in_$p3);
    goto corral_source_split_3983;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    out_$p136 := $M.10;
    goto corral_source_split_3982;

  $bb113:
    assume out_$i135 == 1;
    goto corral_source_split_3981;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 1);
    goto corral_source_split_3979;

  $bb112:
    assume {:verifier.code 0} true;
    out_$i134 := $M.14;
    goto corral_source_split_3978;

  $bb111:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $M.14 := 4;
    call {:si_unique_call 732} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3976;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} out_vslice_dummy_var_48 := raid_merge(out_$p131, in_$p18, in_$p20, out_$i132);
    goto corral_source_split_3975;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    out_$i132 := $load.i32($M.2, in_$p3);
    goto corral_source_split_3974;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    out_$p131 := $M.10;
    goto corral_source_split_3973;

  $bb110:
    assume out_$i130 == 1;
    goto corral_source_split_3972;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i129, 4);
    goto corral_source_split_3853;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    out_$i129 := $M.14;
    goto corral_source_split_3852;

  $bb66:
    assume out_$i70 == 1;
    goto corral_source_split_3851;

  $bb65:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i61, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb138:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $M.14 := 5;
    call {:si_unique_call 750} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4049;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} raid_io_hints(out_$p168, in_$p9);
    goto corral_source_split_4048;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    out_$p168 := $M.10;
    goto corral_source_split_4047;

  $bb137:
    assume out_$i167 == 1;
    goto corral_source_split_4046;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i32(out_$i166, 5);
    goto corral_source_split_4044;

  $bb136:
    assume {:verifier.code 0} true;
    out_$i166 := $M.14;
    goto corral_source_split_4043;

  $bb135:
    assume !(out_$i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $M.14 := 2;
    call {:si_unique_call 748} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4041;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} raid_io_hints(out_$p165, in_$p9);
    goto corral_source_split_4040;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    out_$p165 := $M.10;
    goto corral_source_split_4039;

  $bb134:
    assume out_$i164 == 1;
    goto corral_source_split_4038;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    out_$i164 := $eq.i32(out_$i163, 2);
    goto corral_source_split_4036;

  $bb133:
    assume {:verifier.code 0} true;
    out_$i163 := $M.14;
    goto corral_source_split_4035;

  $bb132:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $M.14 := 3;
    call {:si_unique_call 746} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4033;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} raid_io_hints(out_$p162, in_$p9);
    goto corral_source_split_4032;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    out_$p162 := $M.10;
    goto corral_source_split_4031;

  $bb131:
    assume out_$i161 == 1;
    goto corral_source_split_4030;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i32(out_$i160, 3);
    goto corral_source_split_4028;

  $bb130:
    assume {:verifier.code 0} true;
    out_$i160 := $M.14;
    goto corral_source_split_4027;

  $bb129:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 744} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4025;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} raid_io_hints(out_$p159, in_$p9);
    goto corral_source_split_4024;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    out_$p159 := $M.10;
    goto corral_source_split_4023;

  $bb128:
    assume out_$i158 == 1;
    goto corral_source_split_4022;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    out_$i158 := $eq.i32(out_$i157, 1);
    goto corral_source_split_4020;

  $bb127:
    assume {:verifier.code 0} true;
    out_$i157 := $M.14;
    goto corral_source_split_4019;

  $bb126:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $M.14 := 4;
    call {:si_unique_call 742} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4017;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} raid_io_hints(out_$p156, in_$p9);
    goto corral_source_split_4016;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    out_$p156 := $M.10;
    goto corral_source_split_4015;

  $bb125:
    assume out_$i155 == 1;
    goto corral_source_split_4014;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    out_$i155 := $eq.i32(out_$i154, 4);
    goto corral_source_split_3857;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$i154 := $M.14;
    goto corral_source_split_3856;

  $bb68:
    assume out_$i71 == 1;
    goto corral_source_split_3855;

  $bb67:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i61, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb150:
    assume !(out_$i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $M.14 := 5;
    call {:si_unique_call 758} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4078;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} out_vslice_dummy_var_56 := raid_map(out_$p183, in_$p12);
    goto corral_source_split_4077;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    out_$p183 := $M.10;
    goto corral_source_split_4076;

  $bb149:
    assume out_$i182 == 1;
    goto corral_source_split_4075;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    out_$i182 := $eq.i32(out_$i181, 5);
    goto corral_source_split_4073;

  $bb148:
    assume {:verifier.code 0} true;
    out_$i181 := $M.14;
    goto corral_source_split_4072;

  $bb147:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $M.14 := 2;
    call {:si_unique_call 756} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4070;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} out_vslice_dummy_var_55 := raid_map(out_$p179, in_$p12);
    goto corral_source_split_4069;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    out_$p179 := $M.10;
    goto corral_source_split_4068;

  $bb146:
    assume out_$i178 == 1;
    goto corral_source_split_4067;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    out_$i178 := $eq.i32(out_$i177, 2);
    goto corral_source_split_4065;

  $bb145:
    assume {:verifier.code 0} true;
    out_$i177 := $M.14;
    goto corral_source_split_4064;

  $bb144:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $M.14 := 3;
    call {:si_unique_call 754} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4062;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} out_vslice_dummy_var_54 := raid_map(out_$p175, in_$p12);
    goto corral_source_split_4061;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    out_$p175 := $M.10;
    goto corral_source_split_4060;

  $bb143:
    assume out_$i174 == 1;
    goto corral_source_split_4059;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 3);
    goto corral_source_split_4057;

  $bb142:
    assume {:verifier.code 0} true;
    out_$i173 := $M.14;
    goto corral_source_split_4056;

  $bb141:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $M.14 := 4;
    call {:si_unique_call 752} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4054;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} out_vslice_dummy_var_53 := raid_map(out_$p171, in_$p12);
    goto corral_source_split_4053;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    out_$p171 := $M.10;
    goto corral_source_split_4052;

  $bb140:
    assume out_$i170 == 1;
    goto corral_source_split_4051;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    out_$i170 := $eq.i32(out_$i169, 4);
    goto corral_source_split_3861;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    out_$i169 := $M.14;
    goto corral_source_split_3860;

  $bb69:
    assume !(out_$i71 == 1);
    goto corral_source_split_3859;

  $bb165:
    assume !(out_$i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $M.14 := 5;
    call {:si_unique_call 768} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4120;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} out_vslice_dummy_var_61 := raid_message(out_$p207, out_$i208, in_$p14);
    goto corral_source_split_4119;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    out_$i208 := $load.i32($M.2, in_$p2);
    goto corral_source_split_4118;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    out_$p207 := $M.10;
    goto corral_source_split_4117;

  $bb164:
    assume out_$i206 == 1;
    goto corral_source_split_4116;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    out_$i206 := $eq.i32(out_$i205, 5);
    goto corral_source_split_4114;

  $bb163:
    assume {:verifier.code 0} true;
    out_$i205 := $M.14;
    goto corral_source_split_4113;

  $bb162:
    assume !(out_$i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $M.14 := 2;
    call {:si_unique_call 766} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4111;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} out_vslice_dummy_var_60 := raid_message(out_$p202, out_$i203, in_$p14);
    goto corral_source_split_4110;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    out_$i203 := $load.i32($M.2, in_$p2);
    goto corral_source_split_4109;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    out_$p202 := $M.10;
    goto corral_source_split_4108;

  $bb161:
    assume out_$i201 == 1;
    goto corral_source_split_4107;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    out_$i201 := $eq.i32(out_$i200, 2);
    goto corral_source_split_4105;

  $bb160:
    assume {:verifier.code 0} true;
    out_$i200 := $M.14;
    goto corral_source_split_4104;

  $bb159:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $M.14 := 3;
    call {:si_unique_call 764} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4102;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} out_vslice_dummy_var_59 := raid_message(out_$p197, out_$i198, in_$p14);
    goto corral_source_split_4101;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    out_$i198 := $load.i32($M.2, in_$p2);
    goto corral_source_split_4100;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    out_$p197 := $M.10;
    goto corral_source_split_4099;

  $bb158:
    assume out_$i196 == 1;
    goto corral_source_split_4098;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    out_$i196 := $eq.i32(out_$i195, 3);
    goto corral_source_split_4096;

  $bb157:
    assume {:verifier.code 0} true;
    out_$i195 := $M.14;
    goto corral_source_split_4095;

  $bb156:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 762} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4093;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} out_vslice_dummy_var_58 := raid_message(out_$p192, out_$i193, in_$p14);
    goto corral_source_split_4092;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    out_$i193 := $load.i32($M.2, in_$p2);
    goto corral_source_split_4091;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    out_$p192 := $M.10;
    goto corral_source_split_4090;

  $bb155:
    assume out_$i191 == 1;
    goto corral_source_split_4089;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    out_$i191 := $eq.i32(out_$i190, 1);
    goto corral_source_split_4087;

  $bb154:
    assume {:verifier.code 0} true;
    out_$i190 := $M.14;
    goto corral_source_split_4086;

  $bb153:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $M.14 := 4;
    call {:si_unique_call 760} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4084;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} out_vslice_dummy_var_57 := raid_message(out_$p187, out_$i188, in_$p14);
    goto corral_source_split_4083;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    out_$i188 := $load.i32($M.2, in_$p2);
    goto corral_source_split_4082;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    out_$p187 := $M.10;
    goto corral_source_split_4081;

  $bb152:
    assume out_$i186 == 1;
    goto corral_source_split_4080;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    out_$i186 := $eq.i32(out_$i185, 4);
    goto corral_source_split_3841;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    out_$i185 := $M.14;
    goto corral_source_split_3840;

  $bb60:
    assume out_$i67 == 1;
    goto corral_source_split_3839;

  $bb51:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i61, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb50:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    out_$i63 := $slt.i32(out_$i61, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb168:
    assume !(out_$i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $M.14 := 4;
    call {:si_unique_call 770} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4125;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} raid_postsuspend(out_$p212);
    goto corral_source_split_4124;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    out_$p212 := $M.10;
    goto corral_source_split_4123;

  $bb167:
    assume out_$i211 == 1;
    goto corral_source_split_4122;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$i211 := $eq.i32(out_$i210, 3);
    goto corral_source_split_3845;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    out_$i210 := $M.14;
    goto corral_source_split_3844;

  $bb62:
    assume out_$i68 == 1;
    goto corral_source_split_3843;

  $bb61:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i61, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb183:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $M.14 := 5;
    call {:si_unique_call 780} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4177;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} raid_status(out_$p239, out_$i240, out_$i241, in_$p10, out_$i242);
    goto corral_source_split_4176;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    out_$i242 := $load.i32($M.2, in_$p0);
    goto corral_source_split_4175;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    out_$i241 := $load.i32($M.2, in_$p4);
    goto corral_source_split_4174;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    out_$i240 := $load.i32($M.2, in_$p6);
    goto corral_source_split_4173;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    out_$p239 := $M.10;
    goto corral_source_split_4172;

  $bb182:
    assume out_$i238 == 1;
    goto corral_source_split_4171;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    out_$i238 := $eq.i32(out_$i237, 5);
    goto corral_source_split_4169;

  $bb181:
    assume {:verifier.code 0} true;
    out_$i237 := $M.14;
    goto corral_source_split_4168;

  $bb180:
    assume !(out_$i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $M.14 := 2;
    call {:si_unique_call 778} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4166;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} raid_status(out_$p233, out_$i234, out_$i235, in_$p10, out_$i236);
    goto corral_source_split_4165;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    out_$i236 := $load.i32($M.2, in_$p0);
    goto corral_source_split_4164;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    out_$i235 := $load.i32($M.2, in_$p4);
    goto corral_source_split_4163;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    out_$i234 := $load.i32($M.2, in_$p6);
    goto corral_source_split_4162;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    out_$p233 := $M.10;
    goto corral_source_split_4161;

  $bb179:
    assume out_$i232 == 1;
    goto corral_source_split_4160;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    out_$i232 := $eq.i32(out_$i231, 2);
    goto corral_source_split_4158;

  $bb178:
    assume {:verifier.code 0} true;
    out_$i231 := $M.14;
    goto corral_source_split_4157;

  $bb177:
    assume !(out_$i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    goto $bb178;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $M.14 := 3;
    call {:si_unique_call 776} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4155;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} raid_status(out_$p227, out_$i228, out_$i229, in_$p10, out_$i230);
    goto corral_source_split_4154;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    out_$i230 := $load.i32($M.2, in_$p0);
    goto corral_source_split_4153;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    out_$i229 := $load.i32($M.2, in_$p4);
    goto corral_source_split_4152;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    out_$i228 := $load.i32($M.2, in_$p6);
    goto corral_source_split_4151;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    out_$p227 := $M.10;
    goto corral_source_split_4150;

  $bb176:
    assume out_$i226 == 1;
    goto corral_source_split_4149;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    out_$i226 := $eq.i32(out_$i225, 3);
    goto corral_source_split_4147;

  $bb175:
    assume {:verifier.code 0} true;
    out_$i225 := $M.14;
    goto corral_source_split_4146;

  $bb174:
    assume !(out_$i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 774} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4144;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} raid_status(out_$p221, out_$i222, out_$i223, in_$p10, out_$i224);
    goto corral_source_split_4143;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    out_$i224 := $load.i32($M.2, in_$p0);
    goto corral_source_split_4142;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    out_$i223 := $load.i32($M.2, in_$p4);
    goto corral_source_split_4141;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    out_$i222 := $load.i32($M.2, in_$p6);
    goto corral_source_split_4140;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    out_$p221 := $M.10;
    goto corral_source_split_4139;

  $bb173:
    assume out_$i220 == 1;
    goto corral_source_split_4138;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    out_$i220 := $eq.i32(out_$i219, 1);
    goto corral_source_split_4136;

  $bb172:
    assume {:verifier.code 0} true;
    out_$i219 := $M.14;
    goto corral_source_split_4135;

  $bb171:
    assume !(out_$i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    goto $bb172;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $M.14 := 4;
    call {:si_unique_call 772} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4133;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} raid_status(out_$p215, out_$i216, out_$i217, in_$p10, out_$i218);
    goto corral_source_split_4132;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    out_$i218 := $load.i32($M.2, in_$p0);
    goto corral_source_split_4131;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    out_$i217 := $load.i32($M.2, in_$p4);
    goto corral_source_split_4130;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    out_$i216 := $load.i32($M.2, in_$p6);
    goto corral_source_split_4129;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    out_$p215 := $M.10;
    goto corral_source_split_4128;

  $bb170:
    assume out_$i214 == 1;
    goto corral_source_split_4127;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    out_$i214 := $eq.i32(out_$i213, 4);
    goto corral_source_split_3849;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    out_$i213 := $M.14;
    goto corral_source_split_3848;

  $bb63:
    assume !(out_$i68 == 1);
    goto corral_source_split_3847;

  $bb186:
    assume !(out_$i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $M.14 := 3;
    call {:si_unique_call 782} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4182;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} raid_presuspend(out_$p245);
    goto corral_source_split_4181;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    out_$p245 := $M.10;
    goto corral_source_split_4180;

  $bb185:
    assume out_$i244 == 1;
    goto corral_source_split_4179;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    out_$i244 := $eq.i32(out_$i243, 2);
    goto corral_source_split_3829;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    out_$i243 := $M.14;
    goto corral_source_split_3828;

  $bb53:
    assume out_$i64 == 1;
    goto corral_source_split_3827;

  $bb52:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    out_$i64 := $slt.i32(out_$i61, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb189:
    assume !(out_$i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $M.14 := 2;
    call {:si_unique_call 784} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4187;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} raid_resume(out_$p248);
    goto corral_source_split_4186;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    out_$p248 := $M.10;
    goto corral_source_split_4185;

  $bb188:
    assume out_$i247 == 1;
    goto corral_source_split_4184;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    out_$i247 := $eq.i32(out_$i246, 5);
    goto corral_source_split_3833;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    out_$i246 := $M.14;
    goto corral_source_split_3832;

  $bb55:
    assume out_$i65 == 1;
    goto corral_source_split_3831;

  $bb54:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    out_$i65 := $slt.i32(out_$i61, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb192:
    assume !(out_$i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb194:
    assume !(out_$i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $M.14 := 5;
    call {:si_unique_call 787} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_4196;

  $bb193:
    assume out_$i253 == 1;
    goto corral_source_split_4195;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i32(out_$i252, 0);
    goto corral_source_split_4193;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    out_$i252 := $M.17;
    goto corral_source_split_4192;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $M.17 := out_$i251;
    call {:si_unique_call 786} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i251);
    goto corral_source_split_4191;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} out_$i251 := ldv_preresume_2();
    goto corral_source_split_4190;

  $bb191:
    assume out_$i250 == 1;
    goto corral_source_split_4189;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    out_$i250 := $eq.i32(out_$i249, 4);
    goto corral_source_split_3837;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    out_$i249 := $M.14;
    goto corral_source_split_3836;

  $bb57:
    assume out_$i66 == 1;
    goto corral_source_split_3835;

  $bb56:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i32(out_$i61, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} ldv_stop();
    goto corral_source_split_4198;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb58:
    assume {:verifier.code 0} true;
    assume !(out_$i66 == 1);
    goto $bb59;

  $bb75:
    assume {:verifier.code 0} true;
    assume !(out_$i74 == 1);
    goto $bb59;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} ldv_stop();
    goto corral_source_split_4200;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i39 == 1);
    goto $bb9;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$i109, out_$i110, out_$p111, out_$p112, out_$i114, out_$i115, out_$p116, out_$p117, out_$i119, out_$i120, out_$p121, out_$p122, out_$i124, out_$i125, out_$p126, out_$p127, out_$i129, out_$i130, out_$p131, out_$i132, out_$i134, out_$i135, out_$p136, out_$i137, out_$i139, out_$i140, out_$p141, out_$i142, out_$i144, out_$i145, out_$p146, out_$i147, out_$i149, out_$i150, out_$p151, out_$i152, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$p168, out_$i169, out_$i170, out_$p171, out_$i173, out_$i174, out_$p175, out_$i177, out_$i178, out_$p179, out_$i181, out_$i182, out_$p183, out_$i185, out_$i186, out_$p187, out_$i188, out_$i190, out_$i191, out_$p192, out_$i193, out_$i195, out_$i196, out_$p197, out_$i198, out_$i200, out_$i201, out_$p202, out_$i203, out_$i205, out_$i206, out_$p207, out_$i208, out_$i210, out_$i211, out_$p212, out_$i213, out_$i214, out_$p215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$p221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$p227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$p245, out_$i246, out_$i247, out_$p248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_vslice_dummy_var_43, out_vslice_dummy_var_44, out_vslice_dummy_var_45, out_vslice_dummy_var_46, out_vslice_dummy_var_47, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p9, in_$p10, in_$p12, in_$p14, in_$p16, in_$p18, in_$p20, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$i109, out_$i110, out_$p111, out_$p112, out_$i114, out_$i115, out_$p116, out_$p117, out_$i119, out_$i120, out_$p121, out_$p122, out_$i124, out_$i125, out_$p126, out_$p127, out_$i129, out_$i130, out_$p131, out_$i132, out_$i134, out_$i135, out_$p136, out_$i137, out_$i139, out_$i140, out_$p141, out_$i142, out_$i144, out_$i145, out_$p146, out_$i147, out_$i149, out_$i150, out_$p151, out_$i152, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$p168, out_$i169, out_$i170, out_$p171, out_$i173, out_$i174, out_$p175, out_$i177, out_$i178, out_$p179, out_$i181, out_$i182, out_$p183, out_$i185, out_$i186, out_$p187, out_$i188, out_$i190, out_$i191, out_$p192, out_$i193, out_$i195, out_$i196, out_$p197, out_$i198, out_$i200, out_$i201, out_$p202, out_$i203, out_$i205, out_$i206, out_$p207, out_$i208, out_$i210, out_$i211, out_$p212, out_$i213, out_$i214, out_$p215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$p221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$p227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$p245, out_$i246, out_$i247, out_$p248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_vslice_dummy_var_43, out_vslice_dummy_var_44, out_vslice_dummy_var_45, out_vslice_dummy_var_46, out_vslice_dummy_var_47, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p9: ref, in_$p10: ref, in_$p12: ref, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$i35: i32, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i32, in_$i76: i1, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$p86: ref, in_$i87: i32, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$i102: i32, in_$i103: i32, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$p107: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$p112: ref, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$p117: ref, in_$i119: i32, in_$i120: i1, in_$p121: ref, in_$p122: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$p127: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i132: i32, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$i137: i32, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$i142: i32, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$i147: i32, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$i152: i32, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i1, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$i181: i32, in_$i182: i1, in_$p183: ref, in_$i185: i32, in_$i186: i1, in_$p187: ref, in_$i188: i32, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$i193: i32, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$i198: i32, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i203: i32, in_$i205: i32, in_$i206: i1, in_$p207: ref, in_$i208: i32, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$i213: i32, in_$i214: i1, in_$p215: ref, in_$i216: i32, in_$i217: i32, in_$i218: i32, in_$i219: i32, in_$i220: i1, in_$p221: ref, in_$i222: i32, in_$i223: i32, in_$i224: i32, in_$i225: i32, in_$i226: i1, in_$p227: ref, in_$i228: i32, in_$i229: i32, in_$i230: i32, in_$i231: i32, in_$i232: i1, in_$p233: ref, in_$i234: i32, in_$i235: i32, in_$i236: i32, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i240: i32, in_$i241: i32, in_$i242: i32, in_$i243: i32, in_$i244: i1, in_$p245: ref, in_$i246: i32, in_$i247: i1, in_$p248: ref, in_$i249: i32, in_$i250: i1, in_$i251: i32, in_$i252: i32, in_$i253: i1, in_vslice_dummy_var_43: i32, in_vslice_dummy_var_44: i32, in_vslice_dummy_var_45: i32, in_vslice_dummy_var_46: i32, in_vslice_dummy_var_47: i32, in_vslice_dummy_var_48: i32, in_vslice_dummy_var_49: i32, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i32, in_vslice_dummy_var_52: i32, in_vslice_dummy_var_53: i32, in_vslice_dummy_var_54: i32, in_vslice_dummy_var_55: i32, in_vslice_dummy_var_56: i32, in_vslice_dummy_var_57: i32, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i32) returns (out_$i35: i32, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i32, out_$i76: i1, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$p86: ref, out_$i87: i32, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$p91: ref, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$i102: i32, out_$i103: i32, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$p107: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$p112: ref, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$p117: ref, out_$i119: i32, out_$i120: i1, out_$p121: ref, out_$p122: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$p127: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i132: i32, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$i137: i32, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$i142: i32, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$i147: i32, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$i152: i32, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i1, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$i181: i32, out_$i182: i1, out_$p183: ref, out_$i185: i32, out_$i186: i1, out_$p187: ref, out_$i188: i32, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$i193: i32, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$i198: i32, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i203: i32, out_$i205: i32, out_$i206: i1, out_$p207: ref, out_$i208: i32, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$i213: i32, out_$i214: i1, out_$p215: ref, out_$i216: i32, out_$i217: i32, out_$i218: i32, out_$i219: i32, out_$i220: i1, out_$p221: ref, out_$i222: i32, out_$i223: i32, out_$i224: i32, out_$i225: i32, out_$i226: i1, out_$p227: ref, out_$i228: i32, out_$i229: i32, out_$i230: i32, out_$i231: i32, out_$i232: i1, out_$p233: ref, out_$i234: i32, out_$i235: i32, out_$i236: i32, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i240: i32, out_$i241: i32, out_$i242: i32, out_$i243: i32, out_$i244: i1, out_$p245: ref, out_$i246: i32, out_$i247: i1, out_$p248: ref, out_$i249: i32, out_$i250: i1, out_$i251: i32, out_$i252: i32, out_$i253: i1, out_vslice_dummy_var_43: i32, out_vslice_dummy_var_44: i32, out_vslice_dummy_var_45: i32, out_vslice_dummy_var_46: i32, out_vslice_dummy_var_47: i32, out_vslice_dummy_var_48: i32, out_vslice_dummy_var_49: i32, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i32, out_vslice_dummy_var_52: i32, out_vslice_dummy_var_53: i32, out_vslice_dummy_var_54: i32, out_vslice_dummy_var_55: i32, out_vslice_dummy_var_56: i32, out_vslice_dummy_var_57: i32, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i32);
  modifies $M.5, $M.7, $M.8, $M.9, $M.10, $M.0, $CurrAddr, $M.14, $M.13, $M.15, $M.12, $M.16, $M.1, $M.2, $M.4, assertsPassed, $M.17;


